
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20200717
Copyright (c) 2000 - 2020 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x000008BA  0x02  "AMD   "  "CPMDFDG2"  0x00000001  "INTL"   0x20230331
 02)  MCFG  0x0000003C  0x01  "ALASKA"  "A M I   "  0x01072009  "MSFT"   0x00010013
 03)  APIC  0x0000015E  0x05  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 04)  SSDT  0x00000309  0x02  "ALASKA"  "CPUSSDT "  0x01072009  "AMI "   0x01072009
 05)  VFCT  0x0000B084  0x01  "ALASKA"  "A M I   "  0x00000001  "AMD "   0x31504F47
 06)  SSDT  0x0000097F  0x02  "AMD   "  "CPMMSOSC"  0x00000001  "INTL"   0x20230331
 07)  IVRS  0x000000C8  0x02  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 08)  DSDT  0x000116DB  0x3D  "ALASKA"  "A M I   "  0x01072009  "INTL"   0x20230331
 09)  SSDT  0x000022F2  0x02  "AMD   "  "AOD     "  0x00000001  "INTL"   0x20230331
 10)  WSMT  0x00000028  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 11)  SSDT  0x00000771  0x02  "AMD   "  "AmdTable"  0x00000001  "INTL"   0x20230331
 12)  WDRT  0x00000047  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00000005
 13)  SSDT  0x00000788  0x02  "AMD   "  "CPMDFIG5"  0x00000001  "INTL"   0x20230331
 14)  SSDT  0x0000047C  0x02  "AMD   "  "AMDWOV  "  0x00000001  "INTL"   0x20230331
 15)  SSDT  0x000074CE  0x02  "AMD   "  "AMD CPU "  0x00000001  "AMD "   0x00000001
 16)  FACP  0x00000114  0x06  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 17)  FPDT  0x00000044  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x01000013
 18)  SSDT  0x00007F64  0x02  "AMD   "  "Splinter"  0x00000002  "MSFT"   0x04000000
 19)  SSDT  0x00000500  0x02  "AMD   "  "MEMTOOL0"  0x00000002  "INTL"   0x20230331
 20)  HPET  0x00000038  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00000005
 21)  SSDT  0x00009828  0x02  "AMD   "  "CPMCMN  "  0x00000001  "INTL"   0x20230331
 22)  FIDT  0x0000009C  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 23)  FACS  0x00000040  0x02
 24)  BGRT  0x00000038  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 25)  SSDT  0x0000044E  0x02  "AMD   "  "AmdTable"  0x00000001  "INTL"   0x20230331

Found 25 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 0000015E
[008h 0008   1]                     Revision : 05
[009h 0009   1]                     Checksum : EB
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 02
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 04
[03Fh 0063   1]                Local Apic ID : 04
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 06
[047h 0071   1]                Local Apic ID : 06
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 08
[04Fh 0079   1]                Local Apic ID : 08
[050h 0080   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 0A
[057h 0087   1]                Local Apic ID : 0A
[058h 0088   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 0C
[05Fh 0095   1]                Local Apic ID : 10
[060h 0096   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 0E
[067h 0103   1]                Local Apic ID : 12
[068h 0104   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 00 [Processor Local APIC]
[06Dh 0109   1]                       Length : 08
[06Eh 0110   1]                 Processor ID : 10
[06Fh 0111   1]                Local Apic ID : 14
[070h 0112   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[074h 0116   1]                Subtable Type : 00 [Processor Local APIC]
[075h 0117   1]                       Length : 08
[076h 0118   1]                 Processor ID : 12
[077h 0119   1]                Local Apic ID : 16
[078h 0120   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[07Ch 0124   1]                Subtable Type : 00 [Processor Local APIC]
[07Dh 0125   1]                       Length : 08
[07Eh 0126   1]                 Processor ID : 14
[07Fh 0127   1]                Local Apic ID : 18
[080h 0128   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[084h 0132   1]                Subtable Type : 00 [Processor Local APIC]
[085h 0133   1]                       Length : 08
[086h 0134   1]                 Processor ID : 16
[087h 0135   1]                Local Apic ID : 1A
[088h 0136   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[08Ch 0140   1]                Subtable Type : 00 [Processor Local APIC]
[08Dh 0141   1]                       Length : 08
[08Eh 0142   1]                 Processor ID : 01
[08Fh 0143   1]                Local Apic ID : 01
[090h 0144   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[094h 0148   1]                Subtable Type : 00 [Processor Local APIC]
[095h 0149   1]                       Length : 08
[096h 0150   1]                 Processor ID : 03
[097h 0151   1]                Local Apic ID : 03
[098h 0152   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[09Ch 0156   1]                Subtable Type : 00 [Processor Local APIC]
[09Dh 0157   1]                       Length : 08
[09Eh 0158   1]                 Processor ID : 05
[09Fh 0159   1]                Local Apic ID : 05
[0A0h 0160   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0A4h 0164   1]                Subtable Type : 00 [Processor Local APIC]
[0A5h 0165   1]                       Length : 08
[0A6h 0166   1]                 Processor ID : 07
[0A7h 0167   1]                Local Apic ID : 07
[0A8h 0168   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0ACh 0172   1]                Subtable Type : 00 [Processor Local APIC]
[0ADh 0173   1]                       Length : 08
[0AEh 0174   1]                 Processor ID : 09
[0AFh 0175   1]                Local Apic ID : 09
[0B0h 0176   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0B4h 0180   1]                Subtable Type : 00 [Processor Local APIC]
[0B5h 0181   1]                       Length : 08
[0B6h 0182   1]                 Processor ID : 0B
[0B7h 0183   1]                Local Apic ID : 0B
[0B8h 0184   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0BCh 0188   1]                Subtable Type : 00 [Processor Local APIC]
[0BDh 0189   1]                       Length : 08
[0BEh 0190   1]                 Processor ID : 0D
[0BFh 0191   1]                Local Apic ID : 11
[0C0h 0192   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0C4h 0196   1]                Subtable Type : 00 [Processor Local APIC]
[0C5h 0197   1]                       Length : 08
[0C6h 0198   1]                 Processor ID : 0F
[0C7h 0199   1]                Local Apic ID : 13
[0C8h 0200   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0CCh 0204   1]                Subtable Type : 00 [Processor Local APIC]
[0CDh 0205   1]                       Length : 08
[0CEh 0206   1]                 Processor ID : 11
[0CFh 0207   1]                Local Apic ID : 15
[0D0h 0208   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0D4h 0212   1]                Subtable Type : 00 [Processor Local APIC]
[0D5h 0213   1]                       Length : 08
[0D6h 0214   1]                 Processor ID : 13
[0D7h 0215   1]                Local Apic ID : 17
[0D8h 0216   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0DCh 0220   1]                Subtable Type : 00 [Processor Local APIC]
[0DDh 0221   1]                       Length : 08
[0DEh 0222   1]                 Processor ID : 15
[0DFh 0223   1]                Local Apic ID : 19
[0E0h 0224   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0E4h 0228   1]                Subtable Type : 00 [Processor Local APIC]
[0E5h 0229   1]                       Length : 08
[0E6h 0230   1]                 Processor ID : 17
[0E7h 0231   1]                Local Apic ID : 1B
[0E8h 0232   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0ECh 0236   1]                Subtable Type : 00 [Processor Local APIC]
[0EDh 0237   1]                       Length : 08
[0EEh 0238   1]                 Processor ID : 18
[0EFh 0239   1]                Local Apic ID : 00
[0F0h 0240   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0F4h 0244   1]                Subtable Type : 00 [Processor Local APIC]
[0F5h 0245   1]                       Length : 08
[0F6h 0246   1]                 Processor ID : 19
[0F7h 0247   1]                Local Apic ID : 00
[0F8h 0248   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0FCh 0252   1]                Subtable Type : 00 [Processor Local APIC]
[0FDh 0253   1]                       Length : 08
[0FEh 0254   1]                 Processor ID : 1A
[0FFh 0255   1]                Local Apic ID : 00
[100h 0256   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[104h 0260   1]                Subtable Type : 00 [Processor Local APIC]
[105h 0261   1]                       Length : 08
[106h 0262   1]                 Processor ID : 1B
[107h 0263   1]                Local Apic ID : 00
[108h 0264   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[10Ch 0268   1]                Subtable Type : 00 [Processor Local APIC]
[10Dh 0269   1]                       Length : 08
[10Eh 0270   1]                 Processor ID : 1C
[10Fh 0271   1]                Local Apic ID : 00
[110h 0272   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[114h 0276   1]                Subtable Type : 00 [Processor Local APIC]
[115h 0277   1]                       Length : 08
[116h 0278   1]                 Processor ID : 1D
[117h 0279   1]                Local Apic ID : 00
[118h 0280   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[11Ch 0284   1]                Subtable Type : 00 [Processor Local APIC]
[11Dh 0285   1]                       Length : 08
[11Eh 0286   1]                 Processor ID : 1E
[11Fh 0287   1]                Local Apic ID : 00
[120h 0288   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[124h 0292   1]                Subtable Type : 00 [Processor Local APIC]
[125h 0293   1]                       Length : 08
[126h 0294   1]                 Processor ID : 1F
[127h 0295   1]                Local Apic ID : 00
[128h 0296   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[12Ch 0300   1]                Subtable Type : 04 [Local APIC NMI]
[12Dh 0301   1]                       Length : 06
[12Eh 0302   1]                 Processor ID : FF
[12Fh 0303   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[131h 0305   1]         Interrupt Input LINT : 01

[132h 0306   1]                Subtable Type : 01 [I/O APIC]
[133h 0307   1]                       Length : 0C
[134h 0308   1]                  I/O Apic ID : 20
[135h 0309   1]                     Reserved : 00
[136h 0310   4]                      Address : FEC00000
[13Ah 0314   4]                    Interrupt : 00000000

[13Eh 0318   1]                Subtable Type : 01 [I/O APIC]
[13Fh 0319   1]                       Length : 0C
[140h 0320   1]                  I/O Apic ID : 21
[141h 0321   1]                     Reserved : 00
[142h 0322   4]                      Address : FEC01000
[146h 0326   4]                    Interrupt : 00000018

[14Ah 0330   1]                Subtable Type : 02 [Interrupt Source Override]
[14Bh 0331   1]                       Length : 0A
[14Ch 0332   1]                          Bus : 00
[14Dh 0333   1]                       Source : 00
[14Eh 0334   4]                    Interrupt : 00000002
[152h 0338   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[154h 0340   1]                Subtable Type : 02 [Interrupt Source Override]
[155h 0341   1]                       Length : 0A
[156h 0342   1]                          Bus : 00
[157h 0343   1]                       Source : 09
[158h 0344   4]                    Interrupt : 00000009
[15Ch 0348   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

Raw Table Data: Length 350 (0x15E)

    0000: 41 50 49 43 5E 01 00 00 05 EB 41 4C 41 53 4B 41  // APIC^.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 02 02 01 00 00 00 00 08 04 04  // ................
    0040: 01 00 00 00 00 08 06 06 01 00 00 00 00 08 08 08  // ................
    0050: 01 00 00 00 00 08 0A 0A 01 00 00 00 00 08 0C 10  // ................
    0060: 01 00 00 00 00 08 0E 12 01 00 00 00 00 08 10 14  // ................
    0070: 01 00 00 00 00 08 12 16 01 00 00 00 00 08 14 18  // ................
    0080: 01 00 00 00 00 08 16 1A 01 00 00 00 00 08 01 01  // ................
    0090: 01 00 00 00 00 08 03 03 01 00 00 00 00 08 05 05  // ................
    00A0: 01 00 00 00 00 08 07 07 01 00 00 00 00 08 09 09  // ................
    00B0: 01 00 00 00 00 08 0B 0B 01 00 00 00 00 08 0D 11  // ................
    00C0: 01 00 00 00 00 08 0F 13 01 00 00 00 00 08 11 15  // ................
    00D0: 01 00 00 00 00 08 13 17 01 00 00 00 00 08 15 19  // ................
    00E0: 01 00 00 00 00 08 17 1B 01 00 00 00 00 08 18 00  // ................
    00F0: 00 00 00 00 00 08 19 00 00 00 00 00 00 08 1A 00  // ................
    0100: 00 00 00 00 00 08 1B 00 00 00 00 00 00 08 1C 00  // ................
    0110: 00 00 00 00 00 08 1D 00 00 00 00 00 00 08 1E 00  // ................
    0120: 00 00 00 00 00 08 1F 00 00 00 00 00 04 06 FF 05  // ................
    0130: 00 01 01 0C 20 00 00 00 C0 FE 00 00 00 00 01 0C  // .... ...........
    0140: 21 00 00 10 C0 FE 18 00 00 00 02 0A 00 00 02 00  // !...............
    0150: 00 00 00 00 02 0A 00 09 09 00 00 00 0F 00        // ..............


BGRT
----
[000h 0000   4]                    Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 71
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   2]                      Version : 0001
[026h 0038   1]       Status (decoded below) : 00
                                   Displayed : 0
                          Orientation Offset : 0
[027h 0039   1]                   Image Type : 00
[028h 0040   8]                Image Address : 000000006789F018
[030h 0048   4]                Image OffsetX : 00000480
[034h 0052   4]                Image OffsetY : 00000189

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 71 41 4C 41 53 4B 41  // BGRT8....qALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 01 00 00 00 18 F0 89 67 00 00 00 00  // ...........g....
    0030: 80 04 00 00 89 01 00 00                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 61, "ALASKA", "A M I ", 0x01072009)
{
    External (_SB_.APTS, MethodObj)    // 1 Arguments
    External (_SB_.AWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.DADR, IntObj)
    External (_SB_.PCI0.EBUS, IntObj)
    External (_SB_.PCI0.FLG0, IntObj)
    External (_SB_.PCI0.GP17, DeviceObj)
    External (_SB_.PCI0.GP17.ACP_, DeviceObj)
    External (_SB_.PCI0.GP17.AZAL, DeviceObj)
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (_SB_.PCI0.GP17.XHC0, DeviceObj)
    External (_SB_.PCI0.GP17.XHC1, DeviceObj)
    External (_SB_.PCI0.GP18, DeviceObj)
    External (_SB_.PCI0.GP19, DeviceObj)
    External (_SB_.PCI0.GP19.XHC2, DeviceObj)
    External (_SB_.PCI0.GPP0, DeviceObj)
    External (_SB_.PCI0.GPP1, DeviceObj)
    External (_SB_.PCI0.GPP1._ADR, IntObj)
    External (_SB_.PCI0.GPP2, DeviceObj)
    External (_SB_.PCI0.GPP3, DeviceObj)
    External (_SB_.PCI0.GPP4, DeviceObj)
    External (_SB_.PCI0.GPP5, DeviceObj)
    External (_SB_.PCI0.GPP6, DeviceObj)
    External (_SB_.PCI0.GPP7, DeviceObj)
    External (_SB_.PCI0.GPP7._ADR, IntObj)
    External (_SB_.PCI0.GPP7.UP00.DP40.UP00.DP20.WIFI.UHBS, FieldUnitObj)
    External (_SB_.PCI0.GPP7.UP00.DP40.UP00.DP20.WIFI.W6C1, FieldUnitObj)
    External (_SB_.PCI0.GPP7.UP00.DP40.UP00.DP20.WIFI.W6C2, FieldUnitObj)
    External (_SB_.PCI0.GPP7.UP00.DP40.UP00.DP20.WIFI.W6C3, FieldUnitObj)
    External (_SB_.PCI0.GPP7.UP00.DP40.UP00.DP20.WIFI.W6C4, FieldUnitObj)
    External (_SB_.PCI0.GPP7.UP00.DP40.UP00.DP20.WIFI.W6C5, FieldUnitObj)
    External (_SB_.PCI0.GPP7.UP00.DP40.UP00.DP20.WIFI.W6C6, FieldUnitObj)
    External (_SB_.PCI0.GPP7.UP00.DP40.UP00.DP20.WIFI.W6GS, FieldUnitObj)
    External (_SB_.PCI0.GPP8, DeviceObj)
    External (_SB_.PCI0.GPP9, DeviceObj)
    External (_SB_.PCI0.GPPA, DeviceObj)
    External (_SB_.PCI0.GPPB, DeviceObj)
    External (_SB_.PCI0.GPPC, DeviceObj)
    External (_SB_.PCI0.GPPD, DeviceObj)
    External (_SB_.PCI0.GPPE, DeviceObj)
    External (_SB_.PCI0.GPPF, DeviceObj)
    External (_SB_.PCI0.GPPG, DeviceObj)
    External (_SB_.PCI0.GPPH, DeviceObj)
    External (_SB_.PCI0.M641, IntObj)
    External (_SB_.PLTF.C000, DeviceObj)
    External (_SB_.PLTF.C001, DeviceObj)
    External (_SB_.PLTF.C002, DeviceObj)
    External (_SB_.PLTF.C003, DeviceObj)
    External (_SB_.PLTF.C004, DeviceObj)
    External (_SB_.PLTF.C005, DeviceObj)
    External (_SB_.PLTF.C006, DeviceObj)
    External (_SB_.PLTF.C007, DeviceObj)
    External (_SB_.PLTF.C008, DeviceObj)
    External (_SB_.PLTF.C009, DeviceObj)
    External (_SB_.PLTF.C00A, DeviceObj)
    External (_SB_.PLTF.C00B, DeviceObj)
    External (_SB_.PLTF.C00C, DeviceObj)
    External (_SB_.PLTF.C00D, DeviceObj)
    External (_SB_.PLTF.C00E, DeviceObj)
    External (_SB_.PLTF.C00F, DeviceObj)
    External (_SB_.PLTF.C010, DeviceObj)
    External (_SB_.PLTF.C011, DeviceObj)
    External (_SB_.PLTF.C012, DeviceObj)
    External (_SB_.PLTF.C013, DeviceObj)
    External (_SB_.PLTF.C014, DeviceObj)
    External (_SB_.PLTF.C015, DeviceObj)
    External (_SB_.PLTF.C016, DeviceObj)
    External (_SB_.PLTF.C017, DeviceObj)
    External (_SB_.PLTF.C018, DeviceObj)
    External (_SB_.PLTF.C019, DeviceObj)
    External (_SB_.PLTF.C01A, DeviceObj)
    External (_SB_.PLTF.C01B, DeviceObj)
    External (_SB_.PLTF.C01C, DeviceObj)
    External (_SB_.PLTF.C01D, DeviceObj)
    External (_SB_.PLTF.C01E, DeviceObj)
    External (_SB_.PLTF.C01F, DeviceObj)
    External (_SB_.PWRB, DeviceObj)
    External (_SB_.UBTC, DeviceObj)
    External (AFN7, MethodObj)    // 1 Arguments
    External (CRBI, UnknownObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M013, MethodObj)    // 4 Arguments
    External (M014, MethodObj)    // 5 Arguments
    External (M017, MethodObj)    // 6 Arguments
    External (M018, MethodObj)    // 7 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M047, IntObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M249, MethodObj)    // 4 Arguments
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M32C, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (M644, MethodObj)    // 3 Arguments
    External (M652, FieldUnitObj)
    External (MPTS, MethodObj)    // 1 Arguments
    External (MWAK, MethodObj)    // 1 Arguments
    External (TBIN, IntObj)
    External (UHBS, IntObj)
    External (W6C1, IntObj)
    External (W6C2, IntObj)
    External (W6C3, IntObj)
    External (W6C4, IntObj)
    External (W6C5, IntObj)
    External (W6C6, IntObj)
    External (W6GS, IntObj)

    Name (ENTK, 0x87)
    Name (EXTK, 0xAA)
    Name (IO1B, Zero)
    Name (IO1L, Zero)
    Name (IO2B, 0x0290)
    Name (IO2L, 0x10)
    Name (IO4B, Zero)
    Name (IO4L, Zero)
    Name (SP1O, 0x2E)
    Name (KBFG, Zero)
    Name (MSFG, Zero)
    Name (PEBL, 0x10000000)
    Name (ACPM, One)
    Name (NBTS, 0x5000)
    Name (CPVD, One)
    Name (SMBB, 0x0B20)
    Name (SMBL, 0x20)
    Name (SMB0, 0x0B00)
    Name (SMBM, 0x10)
    Name (PMBS, 0x0800)
    Name (PMLN, 0xA0)
    Name (SMIO, 0xB2)
    Name (GPBS, Zero)
    Name (GPLN, Zero)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (HPTB, 0xFED00000)
    Name (WDTB, 0xFEB00000)
    Name (WDTL, 0x1000)
    Name (GIOB, 0xFED81500)
    Name (IOMB, 0xFED80D00)
    Name (SSMB, 0xFED80200)
    Name (CAFS, 0xBB)
    Name (UTDB, Zero)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, One)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (ITKE, Zero)
    Name (PEBS, 0xE0000000)
    Name (PELN, 0x10000000)
    Name (CSMI, 0x61)
    Name (DSSP, Zero)
    Name (FHPP, One)
    Name (SMIA, 0xB2)
    Name (SMIB, 0xB3)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, Zero)
    Name (TMF1, Zero)
    Name (TMF2, Zero)
    Name (TMF3, Zero)
    Name (TTPF, One)
    Name (DTPT, Zero)
    Name (TTDP, Zero)
    Name (TPMB, 0xFFFFFFFF)
    Name (TPBS, 0x1000)
    Name (TPMC, 0xFFFFFFFF)
    Name (TPCS, 0x1000)
    Name (TPMM, 0xFED40000)
    Name (FTPM, 0xFFFFFFFF)
    Name (PPIM, 0x76A46A18)
    Name (PPIL, 0x1C)
    Name (TPMF, Zero)
    Name (PPIV, Zero)
    Name (AMDT, 0xFF)
    Name (HIDK, "MSFT0001")
    Name (HIDM, "MSFT0003")
    Name (CIDK, 0x0303D041)
    Name (CIDM, 0x030FD041)
    Name (MBEC, Zero)
    Name (NBTP, 0xFEC03000)
    Name (HSPB, 0xFFFFFFFF)
    Name (HSPS, 0xFFFFFFFF)
    Name (IOHW, 0x0290)
    Name (IO3B, 0x0200)
    Name (IO3L, 0x40)
    Name (SMIM, 0x80000009)
    Name (SMIP, 0xB2)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            \_SB.DSPI ()
            \_SB.PCI0.NAPE ()
        }

        PXXX (Arg0)
    }

    Name (PICM, Zero)
    Method (PXXX, 1, NotSerialized)
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == Zero))
        {
            DBG8 = 0xAC
        }

        OSVR = 0x03
        If (CondRefOf (\_OSI, Local0))
        {
            If (_OSI ("Windows 2001"))
            {
                OSVR = 0x04
            }

            If (_OSI ("Windows 2001.1"))
            {
                OSVR = 0x05
            }

            If (_OSI ("FreeBSD"))
            {
                OSVR = 0x06
            }

            If (_OSI ("HP-UX"))
            {
                OSVR = 0x07
            }

            If (_OSI ("OpenVMS"))
            {
                OSVR = 0x08
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSVR = 0x09
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSVR = 0x0A
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                OSVR = 0x0B
            }

            If (_OSI ("Windows 2006"))
            {
                OSVR = 0x0C
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                OSVR = 0x0D
            }

            If (_OSI ("Windows 2009"))
            {
                OSVR = 0x0E
            }

            If (_OSI ("Windows 2012"))
            {
                OSVR = 0x0F
            }

            If (_OSI ("Windows 2013"))
            {
                OSVR = 0x10
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSVR = Zero
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                OSVR = One
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSVR = 0x02
            }

            If (MCTH (_OS, "Linux"))
            {
                OSVR = 0x03
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                OSVR = 0x06
            }

            If (MCTH (_OS, "HP-UX"))
            {
                OSVR = 0x07
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                OSVR = 0x08
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0){})
        Name (BUF1, Buffer (Local0){})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            PRWP [One] = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [One])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [One])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (UPWP, 1, NotSerialized)
    {
        If (DerefOf (WAKP [Zero]))
        {
            WAKP [One] = Zero
        }
        Else
        {
            WAKP [One] = Arg0
        }
    }

    OperationRegion (DEB0, SystemIO, 0x80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0x0000)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    OperationRegion (DEB2, SystemIO, 0x80, 0x02)
    Field (DEB2, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    Name (OSTY, Ones)
    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ACMX,   8, 
        ACMA,   8
    }

    IndexField (ACMX, ACMA, ByteAcc, NoLock, Preserve)
    {
        Offset (0xB9), 
        IMEN,   8
    }

    OperationRegion (PSMI, SystemIO, SMIO, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    OperationRegion (PMRG, SystemMemory, 0xFED80300, 0x0100)
    Field (PMRG, AnyAcc, NoLock, Preserve)
    {
            ,   6, 
        HPEN,   1, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0x80), 
        SI3R,   1, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1
    }

    OperationRegion (GSMM, SystemMemory, 0xFED80000, 0x1000)
    Field (GSMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x288), 
            ,   1, 
        CLPS,   1, 
        Offset (0x296), 
            ,   7, 
        TMSE,   1, 
        Offset (0x2B0), 
            ,   2, 
        SLPS,   2, 
        Offset (0x3BB), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3E4), 
        BLNK,   2
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   6, 
        PEWS,   1, 
        WSTA,   1, 
        Offset (0x03), 
            ,   6, 
        PEWD,   1
    }

    OperationRegion (IOCC, SystemIO, PMBS, 0x80)
    Field (IOCC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   2, 
        RTCS,   1
    }

    Method (SPTS, 1, NotSerialized)
    {
        P80H = Arg0
        If ((Arg0 == 0x03))
        {
            BLNK = One
        }

        If (((Arg0 == 0x04) || (Arg0 == 0x05)))
        {
            BLNK = Zero
        }

        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        CLPS = One
        SLPS = One
        PEWS = PEWS /* \PEWS */
        If ((Arg0 == 0x03))
        {
            SLPS = One
        }

        If ((Arg0 == 0x04))
        {
            SLPS = One
            RSTU = One
        }

        If ((Arg0 == 0x05))
        {
            PWDE = One
        }
    }

    Method (SWAK, 1, NotSerialized)
    {
        BLNK = 0x03
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        PEWS = PEWS /* \PEWS */
        PEWD = Zero
        If (PICM)
        {
            \_SB.DSPI ()
        }

        If (TMSE)
        {
            TMSE = Zero
        }

        If ((Arg0 == 0x03))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        If ((Arg0 == 0x04))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_GPE)
    {
    }

    Scope (_SB)
    {
        OperationRegion (WPBR, SystemMemory, 0x76380000, 0x0001)
        Field (WPBR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x00), 
            CTRL,   8
        }
    }

    Scope (\)
    {
        Device (AWW0)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AWW")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x13, 0x12, 0x02, 0xC3, 0xBC, 0xD0, 0xA2, 0x41,  // .......A
                /* 0008 */  0xBA, 0x17, 0x81, 0x6C, 0xD5, 0xED, 0x77, 0x44,  // ...l..wD
                /* 0010 */  0x42, 0x43, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // BC..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x4D, 0x4F, 0x01, 0x00   // ..).MO..
            })
            Method (WMBC, 3, NotSerialized)
            {
                Local0 = \_SB.CTRL
                Return (Local0)
            }

            Name (WQMO, Buffer (0x0241)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x31, 0x02, 0x00, 0x00, 0x9C, 0x04, 0x00, 0x00,  // 1.......
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x28, 0x5A, 0x82, 0x00, 0x01, 0x06, 0x18, 0x42,  // (Z.....B
                /* 0020 */  0x20, 0xA4, 0x02, 0x89, 0xC0, 0xA1, 0x21, 0x14,  //  .....!.
                /* 0028 */  0x45, 0x01, 0x0C, 0x86, 0xCB, 0x72, 0x20, 0xE4,  // E....r .
                /* 0030 */  0x82, 0x89, 0x09, 0x10, 0x01, 0x21, 0xAF, 0x02,  // .....!..
                /* 0038 */  0x6C, 0x0A, 0x30, 0x09, 0xA2, 0xFE, 0xFD, 0x21,  // l.0....!
                /* 0040 */  0x4A, 0x82, 0x43, 0x09, 0x81, 0x90, 0x44, 0x01,  // J.C...D.
                /* 0048 */  0xE6, 0x05, 0xE8, 0x16, 0x60, 0x58, 0x80, 0x6D,  // ....`X.m
                /* 0050 */  0x01, 0xA6, 0x05, 0x38, 0x86, 0xA4, 0xD2, 0xC0,  // ...8....
                /* 0058 */  0x29, 0x81, 0xA5, 0x40, 0x48, 0xA8, 0x00, 0xE5,  // )..@H...
                /* 0060 */  0x02, 0x7C, 0x0B, 0xD0, 0x8E, 0x28, 0xC9, 0x02,  // .|...(..
                /* 0068 */  0x2C, 0xC3, 0x88, 0xC0, 0xA3, 0x88, 0x6C, 0x34,  // ,.....l4
                /* 0070 */  0x4E, 0x50, 0x36, 0x34, 0x4A, 0x06, 0x84, 0x3C,  // NP64J..<
                /* 0078 */  0x0B, 0xB0, 0x0E, 0x4C, 0x08, 0xEC, 0x5E, 0x80,  // ...L..^.
                /* 0080 */  0x43, 0x01, 0xCE, 0x04, 0x08, 0x13, 0xA0, 0x4C,  // C......L
                /* 0088 */  0x80, 0x31, 0x08, 0x02, 0xD3, 0xD6, 0x70, 0x04,  // .1....p.
                /* 0090 */  0x54, 0x21, 0x98, 0x50, 0xCE, 0x25, 0x52, 0x83,  // T!.P.%R.
                /* 0098 */  0x60, 0x42, 0x09, 0x14, 0x24, 0x4C, 0x6F, 0x28,  // `B..$Lo(
                /* 00A0 */  0x12, 0x07, 0x22, 0x6D, 0x78, 0xC2, 0x6C, 0x4D,  // .."mx.lM
                /* 00A8 */  0x80, 0x45, 0x0C, 0x41, 0x45, 0x08, 0x1A, 0xA1,  // .E.AE...
                /* 00B0 */  0xFD, 0x41, 0x90, 0x58, 0x0B, 0xD6, 0x50, 0x1D,  // .A.X..P.
                /* 00B8 */  0x69, 0x34, 0xA8, 0xE1, 0x25, 0x38, 0x5C, 0x0F,  // i4..%8\.
                /* 00C0 */  0xF5, 0x1C, 0x3B, 0x17, 0x20, 0x7D, 0x92, 0x02,  // ..;. }..
                /* 00C8 */  0x39, 0xC8, 0x73, 0xAB, 0x73, 0x9C, 0x04, 0x24,  // 9.s.s..$
                /* 00D0 */  0x81, 0xB1, 0x12, 0x74, 0x30, 0x70, 0x28, 0xAE,  // ...t0p(.
                /* 00D8 */  0x01, 0x35, 0xE3, 0xE3, 0x65, 0x82, 0xE0, 0x50,  // .5..e..P
                /* 00E0 */  0x43, 0xF4, 0x40, 0xC3, 0x9D, 0xC0, 0x21, 0x32,  // C.@...!2
                /* 00E8 */  0x40, 0xCF, 0xEE, 0x68, 0x30, 0x07, 0x00, 0x8F,  // @..h0...
                /* 00F0 */  0xEC, 0x64, 0xDE, 0x03, 0x4A, 0x15, 0x60, 0x76,  // .d..J.`v
                /* 00F8 */  0xCC, 0x9A, 0x5A, 0x82, 0xE3, 0x31, 0xF4, 0xE9,  // ..Z..1..
                /* 0100 */  0x9E, 0xCF, 0x09, 0x27, 0xB0, 0xFC, 0x41, 0xA0,  // ...'..A.
                /* 0108 */  0x46, 0x66, 0x68, 0xCF, 0xF4, 0xB4, 0x62, 0x86,  // Ffh...b.
                /* 0110 */  0x3C, 0xFC, 0xC3, 0x62, 0x62, 0x21, 0xF4, 0x41,  // <..bb!.A
                /* 0118 */  0xF0, 0x78, 0xE0, 0xFD, 0xFF, 0xC7, 0x03, 0x1E,  // .x......
                /* 0120 */  0xC5, 0x67, 0x02, 0x21, 0xBC, 0x12, 0xC4, 0xF6,  // .g.!....
                /* 0128 */  0x80, 0x12, 0x94, 0x07, 0x8C, 0x1E, 0x90, 0xFD,  // ........
                /* 0130 */  0x0A, 0x40, 0x08, 0x5E, 0xE6, 0x88, 0xE4, 0x14,  // .@.^....
                /* 0138 */  0x41, 0x63, 0xF2, 0xE4, 0x5E, 0x0D, 0x42, 0x3C,  // Ac..^.B<
                /* 0140 */  0x24, 0x14, 0x3E, 0x00, 0xCD, 0xEA, 0x31, 0x81,  // $.>...1.
                /* 0148 */  0x11, 0x14, 0x09, 0x8F, 0x12, 0x03, 0x8F, 0x3A,  // .......:
                /* 0150 */  0x04, 0x44, 0x3E, 0x9A, 0x73, 0x09, 0x7F, 0x34,  // .D>.s..4
                /* 0158 */  0x51, 0x4E, 0xE1, 0x70, 0x7C, 0x62, 0x30, 0x42,  // QN.p|b0B
                /* 0160 */  0xF8, 0x72, 0x0F, 0x0E, 0x44, 0xF3, 0x7C, 0x34,  // .r..D.|4
                /* 0168 */  0x89, 0x33, 0x7A, 0x17, 0xF0, 0xD9, 0x80, 0x1D,  // .3z.....
                /* 0170 */  0x2E, 0x1C, 0x89, 0x42, 0x36, 0x16, 0xEA, 0xA1,  // ...B6...
                /* 0178 */  0x52, 0x61, 0x40, 0x9A, 0x78, 0xDC, 0x98, 0x47,  // Ra@.x..G
                /* 0180 */  0xD1, 0xFB, 0x78, 0x28, 0xCA, 0xEB, 0x01, 0x83,  // ..x(....
                /* 0188 */  0x38, 0x29, 0x8F, 0x4E, 0xF0, 0x14, 0xC2, 0x12,  // 8).N....
                /* 0190 */  0x48, 0xE8, 0x90, 0x3C, 0x02, 0x47, 0x06, 0xA3,  // H..<.G..
                /* 0198 */  0x20, 0x1E, 0xBF, 0xE3, 0x40, 0xC8, 0xC9, 0x51,  //  ...@..Q
                /* 01A0 */  0x00, 0x35, 0x3A, 0xDF, 0x04, 0x3C, 0xAE, 0x53,  // .5:..<.S
                /* 01A8 */  0x3A, 0x8C, 0x03, 0x39, 0x8B, 0x28, 0xAF, 0x0C,  // :..9.(..
                /* 01B0 */  0x26, 0x30, 0xCE, 0x23, 0x03, 0xAC, 0x11, 0x1E,  // &0.#....
                /* 01B8 */  0xCE, 0xD9, 0x79, 0x22, 0x86, 0x33, 0xA4, 0xE1,  // ..y".3..
                /* 01C0 */  0xF8, 0x55, 0xE0, 0x8D, 0x22, 0x01, 0x3F, 0x12,  // .U..".?.
                /* 01C8 */  0xC0, 0xBF, 0x6E, 0xF8, 0x40, 0x70, 0x0A, 0x8F,  // ..n.@p..
                /* 01D0 */  0x1A, 0x6F, 0x19, 0x09, 0x2C, 0xF0, 0x48, 0x00,  // .o..,.H.
                /* 01D8 */  0x0A, 0x20, 0x5F, 0x02, 0xAC, 0xF4, 0x20, 0x40,  // . _... @
                /* 01E0 */  0xE7, 0x10, 0x22, 0x4C, 0x34, 0x13, 0xFC, 0xFF,  // .."L4...
                /* 01E8 */  0xC3, 0x73, 0xC1, 0x63, 0xA5, 0xB2, 0xC6, 0x85,  // .s.c....
                /* 01F0 */  0x1A, 0xAA, 0x4F, 0x07, 0x0C, 0xFB, 0x1D, 0xC0,  // ..O.....
                /* 01F8 */  0xA2, 0x67, 0xA8, 0x1B, 0xC1, 0x41, 0xBD, 0x3D,  // .g...A.=
                /* 0200 */  0x58, 0xA2, 0x53, 0xA9, 0x4E, 0x61, 0x3D, 0x52,  // X.S.Na=R
                /* 0208 */  0x0E, 0x6B, 0xB4, 0xB0, 0x07, 0xFC, 0xE4, 0xE0,  // .k......
                /* 0210 */  0x5B, 0x87, 0x67, 0x66, 0x8C, 0xB0, 0x1E, 0xAD,  // [.gf....
                /* 0218 */  0x15, 0xDA, 0xF4, 0xA9, 0xD1, 0xA8, 0x55, 0x83,  // ......U.
                /* 0220 */  0x32, 0x35, 0xCA, 0x34, 0xA8, 0xD5, 0xA7, 0x52,  // 25.4...R
                /* 0228 */  0x63, 0xC6, 0x4E, 0x22, 0x8E, 0xF1, 0x12, 0xD0,  // c.N"....
                /* 0230 */  0x58, 0x2C, 0x62, 0x39, 0x02, 0xB1, 0x74, 0x0A,  // X,b9..t.
                /* 0238 */  0x19, 0x01, 0x51, 0x10, 0x10, 0x01, 0xF9, 0xFF,  // ..Q.....
                /* 0240 */  0x0F                                             // .
            })
        }
    }

    Name (MNVA, 0x7636A000)
    Name (MNVL, 0x1000)
    OperationRegion (MNVS, SystemMemory, MNVA, MNVL)
    Field (MNVS, AnyAcc, Lock, Preserve)
    {
        Offset (0x00), 
        W6GS,   8, 
        Offset (0x01), 
        W6C1,   8, 
        Offset (0x02), 
        W6C2,   8, 
        Offset (0x03), 
        W6C3,   8, 
        Offset (0x04), 
        W6C4,   8, 
        Offset (0x05), 
        W6C5,   8, 
        Offset (0x06), 
        W6C6,   8
    }

    Name (WNVA, 0x7636B000)
    Name (WNVL, 0x1000)
    OperationRegion (WNVS, SystemMemory, WNVA, WNVL)
    Field (WNVS, AnyAcc, Lock, Preserve)
    {
        Offset (0x00), 
        UHBS,   32
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {4,5,6,10,11,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PG07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AG07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x27
            }
        })
        Name (PG09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AG09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2B
            }
        })
        Name (PG0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AG0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2F
            }
        })
        Name (PG0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AG0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2F
            }
        })
        Name (PG13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AG13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x29
            }
        })
        Name (PG15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x25
            }
        })
        Name (PG17, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AG17, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x21
            }
        })
        Name (PG19, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG19, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1D
            }
        })
        Name (PG1B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AG1B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x19
            }
        })
        Name (PG1D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AG1D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x18
            }
        })
        Name (PG1F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKE, 
                Zero
            }
        })
        Name (AG1F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1C
            }
        })
        Name (PG22, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AG22, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x21
            }
        })
        Name (PG24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x25
            }
        })
        Name (PG27, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AG27, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x29
            }
        })
        Name (PD00, Package (0x0A)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                LNKB, 
                Zero
            }
        })
        Name (AR00, Package (0x0A)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                Zero, 
                0x19
            }
        })
        Name (PG3C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG3C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
        Name (PG3D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG3D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
        Name (PG3F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AG3F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1B
            }
        })
        Name (PG40, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AG40, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1F
            }
        })
        Name (PG41, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AG41, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x23
            }
        })
        Name (PG42, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG42, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
        Name (PG43, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AG43, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PD00) /* \_SB_.PD00 */
            }

            Device (AMDN)
            {
                Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                Name (_UID, 0xC8)  // _UID: Unique ID
                Name (_STA, 0x0F)  // _STA: Status
                Name (NPTR, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y00)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._LEN, PL)  // _LEN: Length
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._BAS, PB)  // _BAS: Base Address
                    PB = PEBS /* \PEBS */
                    PL = PEBL /* \PEBL */
                    Return (NPTR) /* \_SB_.PCI0.AMDN.NPTR */
                }
            }

            Method (NPTS, 1, NotSerialized)
            {
                APTS (Arg0)
            }

            Method (NWAK, 1, NotSerialized)
            {
                AWAK (Arg0)
            }

            Name (CPRB, One)
            Name (LVGA, 0x01)
            Name (STAV, 0x0F)
            Name (BRB, 0x0000)
            Name (BRL, 0x0100)
            Name (IOB, 0x1000)
            Name (IOL, 0xF000)
            Name (MBB, 0x80000000)
            Name (MBL, 0x7D000000)
            Name (MAB, 0x0000001080000000)
            Name (MAL, 0x000000EF80000000)
            Name (MAM, 0x000000FFFFFFFFFF)
            Name (CRS1, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x007F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y01)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x03AF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x03B0,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x03E0,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0918,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y03, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0x0FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0300,             // Length
                    ,, _Y02, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
            })
            Name (CRS2, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0080,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y08)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y0A, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y09, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (STAV) /* \_SB_.PCI0.STAV */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (CPRB)
                {
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MIN, MIN0)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MAX, MAX0)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._LEN, LEN0)  // _LEN: Length
                    MIN0 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN0 = BRL /* \_SB_.PCI0.BRL_ */
                    Local0 = LEN0 /* \_SB_.PCI0._CRS.LEN0 */
                    MAX0 = (MIN0 + Local0--)
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MIN, MIN1)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MAX, MAX1)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._LEN, LEN1)  // _LEN: Length
                    If ((IOB == 0x1000))
                    {
                        Local0 = IOL /* \_SB_.PCI0.IOL_ */
                        MAX1 = (IOB + Local0--)
                        Local0 = (MAX1 - MIN1) /* \_SB_.PCI0._CRS.MIN1 */
                        LEN1 = (Local0 + One)
                    }
                    Else
                    {
                        MIN1 = IOB /* \_SB_.PCI0.IOB_ */
                        LEN1 = IOL /* \_SB_.PCI0.IOL_ */
                        Local0 = LEN1 /* \_SB_.PCI0._CRS.LEN1 */
                        MAX1 = (MIN1 + Local0--)
                    }

                    If (((LVGA == One) || (LVGA == 0x55)))
                    {
                        If (VGAF)
                        {
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MIN, IMN1)  // _MIN: Minimum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MAX, IMX1)  // _MAX: Maximum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._LEN, ILN1)  // _LEN: Length
                            IMN1 = 0x03B0
                            IMX1 = 0x03DF
                            ILN1 = 0x30
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MIN, VMN1)  // _MIN: Minimum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MAX, VMX1)  // _MAX: Maximum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._LEN, VLN1)  // _LEN: Length
                            VMN1 = 0x000A0000
                            VMX1 = 0x000BFFFF
                            VLN1 = 0x00020000
                            VGAF = Zero
                        }
                    }

                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MIN, MIN3)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MAX, MAX3)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._LEN, LEN3)  // _LEN: Length
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MIN, MIN7)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MAX, MAX7)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._LEN, LEN7)  // _LEN: Length
                    Local0 = (MBB + MBL) /* \_SB_.PCI0.MBL_ */
                    If ((Local0 < NBTP))
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = MBL /* \_SB_.PCI0.MBL_ */
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = Zero
                        MAX7 = Zero
                        LEN7 = Zero
                    }
                    Else
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = (NBTP - MBB)
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = 0xFEE00000
                        Local0 = (0xFEE00000 - NBTP)
                        LEN7 = (MBL - Local0)
                        LEN7 = (LEN7 - LEN3)
                        Local0 = LEN7 /* \_SB_.PCI0._CRS.LEN7 */
                        MAX7 = (MIN7 + Local0--)
                    }

                    If (MAL)
                    {
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MIN, MN8)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MAX, MX8)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._LEN, LN8)  // _LEN: Length
                        MN8 = MAB /* \_SB_.PCI0.MAB_ */
                        LN8 = MAL /* \_SB_.PCI0.MAL_ */
                        MX8 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS1) /* \_SB_.PCI0.CRS1 */
                }
                Else
                {
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MIN, MIN2)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MAX, MAX2)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._LEN, LEN2)  // _LEN: Length
                    MIN2 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN2 = BRL /* \_SB_.PCI0.BRL_ */
                    Local1 = LEN2 /* \_SB_.PCI0._CRS.LEN2 */
                    MAX2 = (MIN2 + Local1--)
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MIN, MIN4)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MAX, MAX4)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._LEN, LEN4)  // _LEN: Length
                    MIN4 = IOB /* \_SB_.PCI0.IOB_ */
                    LEN4 = IOL /* \_SB_.PCI0.IOL_ */
                    Local1 = LEN4 /* \_SB_.PCI0._CRS.LEN4 */
                    MAX4 = (MIN4 + Local1--)
                    If (LVGA)
                    {
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MIN, IMN2)  // _MIN: Minimum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MAX, IMX2)  // _MAX: Maximum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._LEN, ILN2)  // _LEN: Length
                        IMN2 = 0x03B0
                        IMX2 = 0x03DF
                        ILN2 = 0x30
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MIN, VMN2)  // _MIN: Minimum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MAX, VMX2)  // _MAX: Maximum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._LEN, VLN2)  // _LEN: Length
                        VMN2 = 0x000A0000
                        VMX2 = 0x000BFFFF
                        VLN2 = 0x00020000
                    }

                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MIN, MIN5)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MAX, MAX5)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._LEN, LEN5)  // _LEN: Length
                    MIN5 = MBB /* \_SB_.PCI0.MBB_ */
                    LEN5 = (NBTP - MBB)
                    Local1 = LEN5 /* \_SB_.PCI0._CRS.LEN5 */
                    MAX5 = (MIN5 + Local1--)
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MIN, MIN6)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MAX, MAX6)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._LEN, LEN6)  // _LEN: Length
                    MIN6 = (NBTP + NBTS) /* \NBTS */
                    LEN6 = (MBL - NBTS)
                    LEN6 = (LEN6 - LEN5)
                    Local0 = LEN6 /* \_SB_.PCI0._CRS.LEN6 */
                    MAX6 = (MIN6 + Local0--)
                    If (MAL)
                    {
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MIN, MN9)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MAX, MX9)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._LEN, LN9)  // _LEN: Length
                        MN9 = MAB /* \_SB_.PCI0.MAB_ */
                        LN9 = MAL /* \_SB_.PCI0.MAL_ */
                        MX9 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS2) /* \_SB_.PCI0.CRS2 */
                }
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, Zero)
                Name (CTRL, Zero)
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    If (!PEHP)
                    {
                        CTRL &= 0x1E
                    }

                    If (!SHPC)
                    {
                        CTRL &= 0x1D
                    }

                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            OperationRegion (NAPC, PCI_Config, 0xB8, 0x08)
            Field (NAPC, DWordAcc, NoLock, Preserve)
            {
                NAPX,   32, 
                NAPD,   32
            }

            Mutex (NAPM, 0x00)
            Method (NAPE, 0, NotSerialized)
            {
                Acquire (NAPM, 0xFFFF)
                NAPX = 0x14300000
                Local0 = NAPD /* \_SB_.PCI0.NAPD */
                Local0 &= 0xFFFFFFEF
                NAPD = Local0
                Release (NAPM)
            }

            Method (GPTS, 1, NotSerialized)
            {
            }

            Method (GWAK, 1, NotSerialized)
            {
                If (PICM)
                {
                    NAPE ()
                }
            }

            Device (IOMA)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x15)  // _UID: Unique ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (CRSB, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0xBBAABBAA,         // Address Base
                            0x00080000,         // Address Length
                            _Y0F)
                    })
                    Local0 = (PEBS + 0x2000)
                    OperationRegion (PCIF, SystemMemory, Local0, 0x0100)
                    Field (PCIF, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x44), 
                        BAR0,   32
                    }

                    Local1 = BAR0 /* \_SB_.PCI0.IOMA._CRS.BAR0 */
                    Local1 &= 0xFFF80000
                    CreateDWordField (CRSB, \_SB.PCI0.IOMA._CRS._Y0F._BAS, CBAR)  // _BAS: Base Address
                    CBAR = Local1
                    Return (CRSB) /* \_SB_.PCI0.IOMA._CRS.CRSB */
                }
            }

            Device (GNBD)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Device (BROD)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x14)  // _UID: Unique ID
                    Name (UMAS, 0x0001000000000000)
                    Name (UMAB, 0x0001000000000000)
                    Name (UMAM, 0x0001000000000000)
                    Name (CRS, ResourceTemplate ()
                    {
                        QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                            0x0000000000000000, // Granularity
                            0x0000000000000000, // Range Minimum
                            0x0000000000000000, // Range Maximum
                            0x0000000000000000, // Translation Offset
                            0x0000000000000000, // Length
                            ,, _Y10, AddressRangeMemory, TypeStatic)
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y10._MIN, UMIN)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y10._MAX, UMAX)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y10._LEN, ULEN)  // _LEN: Length
                        UMIN = UMAB /* \_SB_.PCI0.GNBD.BROD.UMAB */
                        ULEN = UMAS /* \_SB_.PCI0.GNBD.BROD.UMAS */
                        UMAX = UMAM /* \_SB_.PCI0.GNBD.BROD.UMAM */
                        Return (CRS) /* \_SB_.PCI0.GNBD.BROD.CRS_ */
                    }
                }
            }

            Device (D003)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
            }

            Device (GPP3)
            {
                Name (_ADR, 0x00010004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0F, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG07) /* \_SB_.AG07 */
                    }

                    Return (PG07) /* \_SB_.PG07 */
                }

                Device (D008)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP4)
            {
                Name (_ADR, 0x00010005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0E, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG09) /* \_SB_.AG09 */
                    }

                    Return (PG09) /* \_SB_.PG09 */
                }

                Device (D00A)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP5)
            {
                Name (_ADR, 0x00010006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0E, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG0B) /* \_SB_.AG0B */
                    }

                    Return (PG0B) /* \_SB_.PG0B */
                }

                Device (D00C)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP6)
            {
                Name (_ADR, 0x00010007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0E, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG0D) /* \_SB_.AG0D */
                    }

                    Return (PG0D) /* \_SB_.PG0D */
                }

                Device (D00E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (D00F)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
            }

            Device (D012)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
            }

            Device (GPP9)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG13) /* \_SB_.AG13 */
                    }

                    Return (PG13) /* \_SB_.PG13 */
                }

                Device (D014)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPA)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG15) /* \_SB_.AG15 */
                    }

                    Return (PG15) /* \_SB_.PG15 */
                }

                Device (D016)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPB)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG17) /* \_SB_.AG17 */
                    }

                    Return (PG17) /* \_SB_.PG17 */
                }

                Device (D018)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPC)
            {
                Name (_ADR, 0x00030004)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG19) /* \_SB_.AG19 */
                    }

                    Return (PG19) /* \_SB_.PG19 */
                }

                Device (D01A)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPD)
            {
                Name (_ADR, 0x00030005)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG1B) /* \_SB_.AG1B */
                    }

                    Return (PG1B) /* \_SB_.PG1B */
                }

                Device (D01C)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPE)
            {
                Name (_ADR, 0x00030006)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG1D) /* \_SB_.AG1D */
                    }

                    Return (PG1D) /* \_SB_.PG1D */
                }

                Device (D01E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPF)
            {
                Name (_ADR, 0x00030007)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG1F) /* \_SB_.AG1F */
                    }

                    Return (PG1F) /* \_SB_.PG1F */
                }

                Device (D020)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (D021)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
            }

            Device (GPPG)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG22) /* \_SB_.AG22 */
                    }

                    Return (PG22) /* \_SB_.PG22 */
                }

                Device (D023)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPH)
            {
                Name (_ADR, 0x00040002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG24) /* \_SB_.AG24 */
                    }

                    Return (PG24) /* \_SB_.PG24 */
                }

                Device (D025)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (D026)
            {
                Name (_ADR, 0x00080000)  // _ADR: Address
            }

            Device (GP17)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG27) /* \_SB_.AG27 */
                    }

                    Return (PG27) /* \_SB_.PG27 */
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (ACP)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }

                Device (AZAL)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                }

                Device (XHC1)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                }

                Device (APSP)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (PSPB, 0xFD100000)
                    Name (_STA, 0x0F)  // _STA: Status
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y11)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.GP17.APSP._Y11._BAS, PBAS)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.GP17.APSP._Y11._LEN, PLEN)  // _LEN: Length
                        PBAS = PSPB /* \_SB_.PCI0.GP17.APSP.PSPB */
                        PLEN = 0x00100000
                        Return (CRS) /* \_SB_.PCI0.GP17.APSP.CRS_ */
                    }
                }
            }

            Device (D032)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
            }

            Device (SBRG)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.SBRG.RTC0.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.SBRG.RTC0.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                OperationRegion (SMI0, SystemIO, SMIO, One)
                Field (SMI0, ByteAcc, NoLock, Preserve)
                {
                    SMIC,   8
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Device (S900)
                        {
                            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                            Name (_UID, 0x0700)  // _UID: Unique ID
                            Name (_STA, 0x0F)  // _STA: Status
                            Name (CRS, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0010,             // Range Minimum
                                    0x0010,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0022,             // Range Minimum
                                    0x0022,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x0063,             // Range Minimum
                                    0x0063,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0065,             // Range Minimum
                                    0x0065,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0067,             // Range Minimum
                                    0x0067,             // Range Maximum
                                    0x00,               // Alignment
                                    0x09,               // Length
                                    )
                                IO (Decode16,
                                    0x0072,             // Range Minimum
                                    0x0072,             // Range Maximum
                                    0x00,               // Alignment
                                    0x0E,               // Length
                                    )
                                IO (Decode16,
                                    0x0080,             // Range Minimum
                                    0x0080,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0084,             // Range Minimum
                                    0x0084,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0088,             // Range Minimum
                                    0x0088,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x008C,             // Range Minimum
                                    0x008C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0090,             // Range Minimum
                                    0x0090,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x00A2,             // Range Minimum
                                    0x00A2,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x00B1,             // Range Minimum
                                    0x00B1,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x00E0,             // Range Minimum
                                    0x00E0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x04D0,             // Range Minimum
                                    0x04D0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x040B,             // Range Minimum
                                    0x040B,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x04D6,             // Range Minimum
                                    0x04D6,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C00,             // Range Minimum
                                    0x0C00,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C14,             // Range Minimum
                                    0x0C14,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C50,             // Range Minimum
                                    0x0C50,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C52,             // Range Minimum
                                    0x0C52,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6C,             // Range Minimum
                                    0x0C6C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6F,             // Range Minimum
                                    0x0C6F,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD8,             // Range Minimum
                                    0x0CD8,             // Range Maximum
                                    0x00,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y12)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y14)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y13)
                                IO (Decode16,
                                    0x0900,             // Range Minimum
                                    0x0900,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0910,             // Range Minimum
                                    0x0910,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0060,             // Range Minimum
                                    0x0060,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                IO (Decode16,
                                    0x0064,             // Range Minimum
                                    0x0064,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y15)
                                Memory32Fixed (ReadWrite,
                                    0xFEC01000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEDC0000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEE00000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFED80000,         // Address Base
                                    0x00010000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y16)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y17)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y18)
                            })
                            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                            {
                                CreateWordField (CRS, \_SB.PCI0.S900._Y12._MIN, PBB)  // _MIN: Minimum Base Address
                                CreateWordField (CRS, \_SB.PCI0.S900._Y12._MAX, PBH)  // _MAX: Maximum Base Address
                                CreateByteField (CRS, \_SB.PCI0.S900._Y12._LEN, PML)  // _LEN: Length
                                PBB = PMBS /* \PMBS */
                                PBH = PMBS /* \PMBS */
                                PML = PMLN /* \PMLN */
                                If (SMBB)
                                {
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y13._MIN, SMB1)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y13._MAX, SMH1)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y13._LEN, SML1)  // _LEN: Length
                                    SMB1 = SMBB /* \SMBB */
                                    SMH1 = SMBB /* \SMBB */
                                    SML1 = SMBL /* \SMBL */
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y14._MIN, SMBZ)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y14._MAX, SMH0)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y14._LEN, SML0)  // _LEN: Length
                                    SMBZ = SMB0 /* \SMB0 */
                                    SMH0 = SMB0 /* \SMB0 */
                                    SML0 = SMBM /* \SMBM */
                                }

                                If (APCB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y15._BAS, APB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y15._LEN, APL)  // _LEN: Length
                                    APB = APCB /* \APCB */
                                    APL = APCL /* \APCL */
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y16._BAS, SPIB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y16._LEN, SPIL)  // _LEN: Length
                                SPIB = 0xFEC10000
                                SPIL = 0x1000
                                If (WDTB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y17._BAS, WDTB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y17._LEN, WDTL)  // _LEN: Length
                                    WDTB = \WDTB
                                    WDTL = \WDTL
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y18._BAS, ROMB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y18._LEN, ROML)  // _LEN: Length
                                ROMB = 0xFF000000
                                ROML = 0x01000000
                                Return (CRS) /* \_SB_.PCI0.S900.CRS_ */
                            }
                        }
                    }
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Scope (SBRG)
                        {
                            Method (RRIO, 4, NotSerialized)
                            {
                                Debug = "RRIO"
                            }

                            Method (RDMA, 3, NotSerialized)
                            {
                                Debug = "rDMA"
                            }
                        }
                    }
                }

                Device (SIO1)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y19)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1A)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1B)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1C)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1D)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((SP1O < 0x03F0) && (SP1O > 0xF0)))
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MIN, GPI0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MAX, GPI1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._LEN, GPIL)  // _LEN: Length
                            GPI0 = SP1O /* \SP1O */
                            GPI1 = SP1O /* \SP1O */
                            GPIL = 0x02
                        }

                        If (IO1B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._LEN, GPL1)  // _LEN: Length
                            GP10 = IO1B /* \IO1B */
                            GP11 = IO1B /* \IO1B */
                            GPL1 = IO1L /* \IO1L */
                        }

                        If (IO2B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._LEN, GPL2)  // _LEN: Length
                            GP20 = IO2B /* \IO2B */
                            GP21 = IO2B /* \IO2B */
                            GPL2 = IO2L /* \IO2L */
                        }

                        If (IO3B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1C._MIN, GP30)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1C._MAX, GP31)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1C._LEN, GPL3)  // _LEN: Length
                            GP30 = IO3B /* \IO3B */
                            GP31 = IO3B /* \IO3B */
                            GPL3 = IO3L /* \IO3L */
                        }

                        If (IO4B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1D._MIN, GP40)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1D._MAX, GP41)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1D._LEN, GPL4)  // _LEN: Length
                            GP40 = IO4B /* \IO4B */
                            GP41 = IO4B /* \IO4B */
                            GPL4 = IO4L /* \IO4L */
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.SIO1.CRS_ */
                    }

                    Name (DCAT, Package (0x15)
                    {
                        0x02, 
                        0x03, 
                        One, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0x06, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF
                    })
                    Mutex (MUT0, 0x00)
                    Method (ENFG, 1, NotSerialized)
                    {
                        Acquire (MUT0, 0x0FFF)
                        INDX = ENTK /* \ENTK */
                        INDX = ENTK /* \ENTK */
                        LDN = Arg0
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        INDX = EXTK /* \EXTK */
                        Release (MUT0)
                    }

                    Method (LPTM, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = (OPT0 & 0x02)
                        EXFG ()
                        Return (Local0)
                    }

                    Method (UHID, 1, NotSerialized)
                    {
                        Return (0x0105D041)
                    }

                    OperationRegion (IOID, SystemIO, SP1O, 0x02)
                    Field (IOID, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x21), 
                        SCF1,   8, 
                        Offset (0x22), 
                        SCF2,   8, 
                        Offset (0x23), 
                        SCF3,   8, 
                        Offset (0x24), 
                        SCF4,   8, 
                        Offset (0x25), 
                        SCF5,   8, 
                        Offset (0x26), 
                        SCF6,   8, 
                        Offset (0x2D), 
                        CR2D,   8, 
                        Offset (0x30), 
                        ACTR,   8, 
                        Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        IOH2,   8, 
                        IOL2,   8, 
                        Offset (0x70), 
                        INTR,   4, 
                        INTT,   4, 
                        Offset (0x74), 
                        DMCH,   8, 
                        Offset (0xE0), 
                        RGE0,   8, 
                        RGE1,   8, 
                        RGE2,   8, 
                        RGE3,   8, 
                        RGE4,   8, 
                        RGE5,   8, 
                        RGE6,   8, 
                        RGE7,   8, 
                        RGE8,   8, 
                        RGE9,   8, 
                        Offset (0xF0), 
                        OPT0,   8, 
                        OPT1,   8, 
                        OPT2,   8, 
                        OPT3,   8, 
                        OPT4,   8, 
                        OPT5,   8, 
                        OPT6,   8, 
                        OPT7,   8, 
                        OPT8,   8, 
                        OPT9,   8
                    }

                    Method (CGLD, 1, NotSerialized)
                    {
                        Return (DerefOf (DCAT [Arg0]))
                    }

                    Method (DSTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = ACTR /* \_SB_.PCI0.SBRG.SIO1.ACTR */
                        Local1 = ((IOAH << 0x08) | IOAL) /* \_SB_.PCI0.SBRG.SIO1.IOAL */
                        EXFG ()
                        If ((Local0 == 0xFF))
                        {
                            Return (Zero)
                        }

                        Local0 &= One
                        If ((Arg0 < 0x10))
                        {
                            IOST |= (Local0 << Arg0)
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        ElseIf ((Arg0 < 0x10))
                        {
                            If (((One << Arg0) & IOST))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            If (Local1)
                            {
                                Return (0x0D)
                            }

                            Return (Zero)
                        }
                    }

                    Method (DCNT, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        If (((DMCH < 0x04) && ((Local1 = (DMCH & 0x03)) != Zero)))
                        {
                            RDMA (Arg0, Arg1, Local1++)
                        }

                        ACTR = Arg1
                        Local1 = (IOAH << 0x08)
                        Local1 |= IOAL
                        RRIO (Arg0, Arg1, Local1, 0x08)
                        EXFG ()
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y20)
                        IRQNoFlags (_Y1E)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y1F)
                            {}
                    })
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1E._INT, IRQM)  // _INT: Interrupts
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1F._DMA, DMAM)  // _DMA: Direct Memory Access
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y20._MIN, IO11)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y20._MAX, IO12)  // _MAX: Maximum Base Address
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y20._LEN, LEN1)  // _LEN: Length
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y23)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y24)
                        IRQNoFlags (_Y21)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y22)
                            {}
                    })
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._INT, IRQE)  // _INT: Interrupts
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._DMA, DMAE)  // _DMA: Direct Memory Access
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y23._MIN, IO21)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y23._MAX, IO22)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y23._LEN, LEN2)  // _LEN: Length
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y24._MIN, IO31)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y24._MAX, IO32)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y24._LEN, LEN3)  // _LEN: Length
                    Name (CRS3, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y27)
                        IRQ (Edge, ActiveLow, Shared, _Y25)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y26)
                            {}
                    })
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y25._INT, IRQT)  // _INT: Interrupts
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y25._HE, IRQS)  // _HE_: High-Edge
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y26._DMA, DMAT)  // _DMA: Direct Memory Access
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y27._MIN, IO41)  // _MIN: Minimum Base Address
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y27._MAX, IO42)  // _MAX: Maximum Base Address
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y27._LEN, LEN4)  // _LEN: Length
                    Method (DCRS, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO11 = (IOAH << 0x08)
                        IO11 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        IO12 = IO11 /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        LEN1 = 0x08
                        If (INTR)
                        {
                            IRQM = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQM = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAM = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAM = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS1) /* \_SB_.PCI0.SBRG.SIO1.CRS1 */
                    }

                    Method (DCR2, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO21 = (IOAH << 0x08)
                        IO21 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        IO22 = IO21 /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        LEN2 = 0x08
                        IO31 = (IOH2 << 0x08)
                        IO31 |= IOL2 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        IO32 = IO31 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        LEN3 = 0x08
                        If (INTR)
                        {
                            IRQE = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQE = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAE = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAE = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS2) /* \_SB_.PCI0.SBRG.SIO1.CRS2 */
                    }

                    Method (DCR3, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO41 = (IOAH << 0x08)
                        IO41 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO41 */
                        IO42 = IO41 /* \_SB_.PCI0.SBRG.SIO1.IO41 */
                        LEN4 = 0x08
                        If (INTR)
                        {
                            IRQT = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQT = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAT = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAT = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS3) /* \_SB_.PCI0.SBRG.SIO1.CRS3 */
                    }

                    Method (DSRS, 2, NotSerialized)
                    {
                        If (((Arg1 == 0x02) & LPTM (Arg1)))
                        {
                            DSR2 (Arg0, Arg1)
                        }
                        Else
                        {
                            CreateWordField (Arg0, 0x09, IRQM)
                            CreateByteField (Arg0, 0x0C, DMAM)
                            CreateWordField (Arg0, 0x02, IO11)
                            ENFG (CGLD (Arg1))
                            IOAL = (IO11 & 0xFF)
                            IOAH = (IO11 >> 0x08)
                            If (IRQM)
                            {
                                FindSetRightBit (IRQM, Local0)
                                INTR = (Local0 - One)
                            }
                            Else
                            {
                                INTR = Zero
                            }

                            If (DMAM)
                            {
                                FindSetRightBit (DMAM, Local0)
                                DMCH = (Local0 - One)
                            }
                            Else
                            {
                                DMCH = 0x04
                            }

                            EXFG ()
                            DCNT (Arg1, One)
                            Local2 = Arg1
                            If ((Local2 > Zero))
                            {
                                Local2 -= One
                            }
                        }
                    }

                    Method (DSR2, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x11, IRQE)
                        CreateByteField (Arg0, 0x14, DMAE)
                        CreateWordField (Arg0, 0x02, IO21)
                        CreateWordField (Arg0, 0x0A, IO31)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO21 & 0xFF)
                        IOAH = (IO21 >> 0x08)
                        IOL2 = (IO31 & 0xFF)
                        IOH2 = (IO31 >> 0x08)
                        If (IRQE)
                        {
                            FindSetRightBit (IRQE, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAE)
                        {
                            FindSetRightBit (DMAE, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                        Local2 = Arg1
                        If ((Local2 > Zero))
                        {
                            Local2 -= One
                        }
                    }

                    Method (DSR3, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x02, IO41)
                        CreateWordField (Arg0, 0x09, IRQT)
                        CreateByteField (Arg0, 0x0B, IRQS)
                        CreateByteField (Arg0, 0x0D, DMAT)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO41 & 0xFF)
                        IOAH = (IO41 >> 0x08)
                        If (IRQT)
                        {
                            FindSetRightBit (IRQT, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAT)
                        {
                            FindSetRightBit (DMAT, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                        Local2 = Arg1
                        If ((Local2 > Zero))
                        {
                            Local2 -= One
                        }
                    }

                    Name (PMFG, Zero)
                    Method (SIOS, 1, NotSerialized)
                    {
                        Debug = "SIOS"
                        If ((0x05 != Arg0))
                        {
                            ENFG (0x0A)
                            If ((Arg0 == One))
                            {
                                OPT6 = Zero
                                OPT7 = Zero
                                If (KBFG)
                                {
                                    OPT6 |= 0x10
                                }
                                Else
                                {
                                    OPT6 &= 0xEF
                                }

                                If (MSFG)
                                {
                                    OPT6 |= 0x20
                                }
                                Else
                                {
                                    OPT6 &= 0xDF
                                }

                                OPT3 = 0xFF
                                OPT4 = 0xFF
                                Local0 = (One | OPT2) /* \_SB_.PCI0.SBRG.SIO1.OPT2 */
                                OPT2 = Local0
                            }

                            If ((Arg0 >= 0x03))
                            {
                                RGE0 &= 0x9F
                                Local0 = RGE3 /* \_SB_.PCI0.SBRG.SIO1.RGE3 */
                                Sleep (0xC8)
                                If (KBFG)
                                {
                                    RGE0 |= 0x41
                                }
                                Else
                                {
                                    RGE0 &= 0xBE
                                }

                                If (MSFG)
                                {
                                    RGE6 &= 0x7F
                                    RGE0 |= 0x22
                                }
                                Else
                                {
                                    RGE0 &= 0xDD
                                }
                            }

                            EXFG ()
                        }
                    }

                    Method (SIOW, 1, NotSerialized)
                    {
                        Debug = "SIOW"
                        ENFG (0x0A)
                        OPT3 = 0xFF
                        OPT6 &= 0xCF
                        OPT2 &= 0xFE
                        RGE0 &= 0xBE
                        RGE0 &= 0xDD
                        EXFG ()
                    }

                    Method (SIOH, 0, NotSerialized)
                    {
                    }
                }

                Device (HHMD)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x0B)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (SGPI)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (LDN, 0x09)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (ACPI)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, 0x03)  // _UID: Unique ID
                    Name (LDN, 0x0A)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (SP80)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, 0x04)  // _UID: Unique ID
                    Name (LDN, 0x14)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (SFED)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, 0x05)  // _UID: Unique ID
                    Name (LDN, 0x15)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (DSLP)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, 0x06)  // _UID: Unique ID
                    Name (LDN, 0x16)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }
            }

            Device (SDIO)
            {
                Name (_ADR, 0x00140007)  // _ADR: Address
            }

            Device (GP18)
            {
                Name (_ADR, 0x00080002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG3C) /* \_SB_.AG3C */
                    }

                    Return (PG3C) /* \_SB_.PG3C */
                }

                Device (D02E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GP19)
            {
                Name (_ADR, 0x00080003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG3D) /* \_SB_.AG3D */
                    }

                    Return (PG3D) /* \_SB_.PG3D */
                }

                Device (XHC2)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (GPP0)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG3F) /* \_SB_.AG3F */
                    }

                    Return (PG3F) /* \_SB_.PG3F */
                }

                Device (D004)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP1)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG40) /* \_SB_.AG40 */
                    }

                    Return (PG40) /* \_SB_.PG40 */
                }

                Device (D005)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP2)
            {
                Name (_ADR, 0x00010003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG41) /* \_SB_.AG41 */
                    }

                    Return (PG41) /* \_SB_.PG41 */
                }

                Device (D006)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP7)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG42) /* \_SB_.AG42 */
                    }

                    Return (PG42) /* \_SB_.PG42 */
                }

                Device (D010)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP8)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG43) /* \_SB_.AG43 */
                    }

                    Return (PG43) /* \_SB_.PG43 */
                }

                Device (D011)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L0F, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP3, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L0E, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP4, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP5, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP6, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x03, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            \_SB.PCI0.SBRG.EPTS (Arg0)
            \_SB.TPM.TPTS (Arg0)
            MPTS (Arg0)
            SPTS (Arg0)
            \_SB.PCI0.SBRG.SIO1.SIOS (Arg0)
            \_SB.PCI0.GPTS (Arg0)
            \_SB.PCI0.NPTS (Arg0)
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        \_SB.PCI0.NWAK (Arg0)
        \_SB.PCI0.GWAK (Arg0)
        \_SB.PCI0.SBRG.SIO1.SIOW (Arg0)
        DBG8 = (Arg0 << 0x04)
        SWAK (Arg0)
        MWAK (Arg0)
        \_SB.PCI0.SBRG.EWAK (Arg0)
        \_SB.PCI0.SBRG.EC0.DOSW (Arg0)
        Return (WAKP) /* \WAKP */
    }

    Scope (_SB)
    {
        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x0C), 
            SIRA,   8, 
            SIRB,   8, 
            SIRC,   8, 
            SIRD,   8, 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x17), 
            SDCL,   8, 
            Offset (0x1A), 
            SDIO,   8, 
            Offset (0x30), 
            USB1,   8, 
            Offset (0x34), 
            USB3,   8, 
            Offset (0x41), 
            SATA,   8, 
            Offset (0x62), 
            GIOC,   8, 
            Offset (0x70), 
            I2C0,   8, 
            I2C1,   8, 
            I2C2,   8, 
            I2C3,   8, 
            URT0,   8, 
            URT1,   8, 
            Offset (0x80), 
            AIRA,   8, 
            AIRB,   8, 
            AIRC,   8, 
            AIRD,   8, 
            AIRE,   8, 
            AIRF,   8, 
            AIRG,   8, 
            AIRH,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (DSPI, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \_SB_.PD64 */
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
            Local1 = PD64 /* \_SB_.PD64 */
            AIRA = 0x10
            AIRB = 0x11
            AIRC = 0x12
            AIRD = 0x13
            AIRE = 0x14
            AIRF = 0x15
            AIRG = 0x16
            AIRH = 0x17
        }

        Method (INTA, 1, NotSerialized)
        {
            PIRA = Arg0
            HDAD = Arg0
        }

        Method (INTB, 1, NotSerialized)
        {
            PIRB = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            PIRC = Arg0
            USB1 = Arg0
            USB3 = Arg0
        }

        Method (INTD, 1, NotSerialized)
        {
            PIRD = Arg0
            SATA = Arg0
        }

        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTA (Local0)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTB (Local0)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTC (Local0)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTD (Local0)
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (PIRE, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Device (HPET)
    {
        Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((HPEN == One))
            {
                If ((OSVR >= 0x0C))
                {
                    Return (0x0F)
                }

                HPEN = Zero
                Return (One)
            }

            Return (One)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            Name (BUF0, ResourceTemplate ()
            {
                IRQNoFlags ()
                    {0}
                IRQNoFlags ()
                    {8}
                Memory32Fixed (ReadOnly,
                    0xFED00000,         // Address Base
                    0x00000400,         // Address Length
                    )
            })
            Return (BUF0) /* \HPET._CRS.BUF0 */
        }
    }

    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Name (LINX, Zero)
    Name (OSSP, Zero)
    Method (SEQL, 2, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Local1 = SizeOf (Arg1)
        If ((Local0 != Local1))
        {
            Return (Zero)
        }

        Name (BUF0, Buffer (Local0){})
        BUF0 = Arg0
        Name (BUF1, Buffer (Local0){})
        BUF1 = Arg1
        Local2 = Zero
        While ((Local2 < Local0))
        {
            Local3 = DerefOf (BUF0 [Local2])
            Local4 = DerefOf (BUF1 [Local2])
            If ((Local3 != Local4))
            {
                Return (Zero)
            }

            Local2++
        }

        Return (One)
    }

    Method (OSTP, 0, NotSerialized)
    {
        If ((OSTB == Ones))
        {
            If (CondRefOf (\_OSI, Local0))
            {
                OSTB = Zero
                TPOS = Zero
                If (_OSI ("Windows 2001"))
                {
                    OSTB = 0x08
                    TPOS = 0x08
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTB = 0x20
                    TPOS = 0x20
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTB = 0x10
                    TPOS = 0x10
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTB = 0x11
                    TPOS = 0x11
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    OSTB = 0x12
                    TPOS = 0x12
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSTB = 0x41
                    TPOS = 0x41
                    OSSP = One
                }

                If (_OSI ("Windows 2009"))
                {
                    OSSP = One
                    OSTB = 0x50
                    TPOS = 0x50
                }

                If (_OSI ("Windows 2012"))
                {
                    OSSP = One
                    OSTB = 0x60
                    TPOS = 0x60
                }

                If (_OSI ("Windows 2013"))
                {
                    OSSP = One
                    OSTB = 0x61
                    TPOS = 0x61
                }

                If (_OSI ("Windows 2015"))
                {
                    OSSP = One
                    OSTB = 0x70
                    TPOS = 0x70
                }

                If (_OSI ("Linux"))
                {
                    LINX = One
                    OSTB = 0x80
                    TPOS = 0x80
                }
            }
            ElseIf (CondRefOf (\_OS, Local0))
            {
                If (SEQL (_OS, "Microsoft Windows"))
                {
                    OSTB = One
                    TPOS = One
                }
                ElseIf (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                {
                    OSTB = 0x02
                    TPOS = 0x02
                }
                ElseIf (SEQL (_OS, "Microsoft Windows NT"))
                {
                    OSTB = 0x04
                    TPOS = 0x04
                }
                Else
                {
                    OSTB = Zero
                    TPOS = Zero
                }
            }
            Else
            {
                OSTB = Zero
                TPOS = Zero
            }
        }

        Return (OSTB) /* \OSTB */
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If ((PICM != Zero))
            {
                DSPI ()
                NAPE ()
            }

            OSTP ()
            OSFL ()
        }
    }

    Device (_SB.TPM)
    {
        Name (TMRQ, 0xFFFFFFFF)
        Name (TLVL, 0xFFFFFFFF)
        Name (ITRV, 0xFFFFFFFF)
        Name (ILVV, 0xFFFFFFFF)
        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            ElseIf ((TTDP == Zero))
            {
                Return (0x310CD041)
            }
            Else
            {
                Return ("MSFT0101")
            }
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            ACC0,   8, 
            Offset (0x08), 
            INTE,   32, 
            INTV,   8, 
            Offset (0x10), 
            INTS,   32, 
            INTF,   32, 
            TSTS,   32, 
            Offset (0x24), 
            FIFO,   32, 
            Offset (0x30), 
            IDTF,   32, 
            Offset (0x4C), 
            SCMD,   32
        }

        Method (_STR, 0, NotSerialized)  // _STR: Description String
        {
            If ((TTDP == Zero))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, One)  // _UID: Unique ID
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                _Y28)
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                _Y29)
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y2A)
        })
        Name (CRID, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y2B)
        })
        Name (CREI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
            GpioInt (Level, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                "\\_SB.GPIO", 0x00, ResourceConsumer, _Y2C,
                )
                {   // Pin list
                    0x0000
                }
        })
        Name (CRSI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0x00000000,         // Address Base
                0x00000000,         // Address Length
                _Y2D)
        })
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            If ((AMDT == One))
            {
                CreateDWordField (CRST, \_SB.TPM._Y28._BAS, MTFB)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y28._LEN, LTFB)  // _LEN: Length
                MTFB = TPMB /* \TPMB */
                LTFB = TPBS /* \TPBS */
                CreateDWordField (CRST, \_SB.TPM._Y29._BAS, MTFC)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y29._LEN, LTFC)  // _LEN: Length
                MTFC = TPMC /* \TPMC */
                LTFC = TPCS /* \TPCS */
                Return (CRST) /* \_SB_.TPM_.CRST */
            }
            Else
            {
                If ((DTPT == One))
                {
                    CreateDWordField (CRSD, \_SB.TPM._Y2A._BAS, MTFE)  // _BAS: Base Address
                    CreateDWordField (CRSD, \_SB.TPM._Y2A._LEN, LTFE)  // _LEN: Length
                    MTFE = 0xFED40000
                    LTFE = 0x5000
                    Return (CRSD) /* \_SB_.TPM_.CRSD */
                }
                ElseIf ((TTPF == One))
                {
                    If (((TMRQ == Zero) && (TMRQ != 0xFFFFFFFF)))
                    {
                        CreateDWordField (CRID, \_SB.TPM._Y2B._BAS, MTFD)  // _BAS: Base Address
                        CreateDWordField (CRID, \_SB.TPM._Y2B._LEN, LTFD)  // _LEN: Length
                        MTFD = 0xFED40000
                        LTFD = 0x5000
                        Return (CRID) /* \_SB_.TPM_.CRID */
                    }
                    Else
                    {
                        CreateWordField (CREI, 0x23, LIRQ)
                        CreateBitField (CREI, \_SB.TPM._Y2C._POL, LLVL)  // _POL: Polarity
                        LIRQ = TMRQ /* \_SB_.TPM_.TMRQ */
                        LLVL = TLVL /* \_SB_.TPM_.TLVL */
                        Return (CREI) /* \_SB_.TPM_.CREI */
                    }
                }
                ElseIf ((TTPF == Zero))
                {
                    If ((AMDT == 0x02))
                    {
                        CreateDWordField (CRSI, \_SB.TPM._Y2D._BAS, HSPF)  // _BAS: Base Address
                        CreateDWordField (CRSI, \_SB.TPM._Y2D._LEN, HSPL)  // _LEN: Length
                        HSPF = HSPB /* \HSPB */
                        HSPL = HSPS /* \HSPS */
                        Return (CRSI) /* \_SB_.TPM_.CRSI */
                    }

                    CreateDWordField (CRST, \_SB.TPM._Y29._BAS, MTFF)  // _BAS: Base Address
                    MTFF = FTPM /* \FTPM */
                    Return (CRST) /* \_SB_.TPM_.CRST */
                }

                MTFE = Zero
                LTFE = Zero
                Return (CRID) /* \_SB_.TPM_.CRID */
            }

            Return (CRID) /* \_SB_.TPM_.CRID */
        }

        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
        {
            If (((TMRQ != Zero) && (TMRQ != 0xFFFFFFFF)))
            {
                If ((AMDT == 0x02)){}
                Else
                {
                    CreateWordField (Arg0, 0x23, IRQ0)
                    CreateWordField (CREI, 0x23, LIRQ)
                    LIRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                    TMRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                    CreateBitField (Arg0, 0x98, ITRG)
                    CreateBitField (CREI, \_SB.TPM._Y2C._MOD, LTRG)  // _MOD: Mode
                    LTRG = ITRG /* \_SB_.TPM_._SRS.ITRG */
                    ITRV = ITRG /* \_SB_.TPM_._SRS.ITRG */
                    CreateBitField (Arg0, 0x99, ILVL)
                    CreateBitField (CREI, \_SB.TPM._Y2C._POL, LLVL)  // _POL: Polarity
                    LLVL = ILVL /* \_SB_.TPM_._SRS.ILVL */
                    ILVV = ILVL /* \_SB_.TPM_._SRS.ILVL */
                }

                If ((((IDTF & 0x0F) == Zero) || ((IDTF & 0x0F
                    ) == 0x0F)))
                {
                    If ((IRQ0 < 0x10))
                    {
                        INTV = (IRQ0 & 0x0F)
                    }

                    If ((ITRV == One))
                    {
                        INTE |= 0x10
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFEF
                    }

                    If ((ILVV == Zero))
                    {
                        INTE |= 0x08
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFF7
                    }
                }
            }
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            HERR,   32, 
            Offset (0x40), 
            HCMD,   32, 
            Offset (0x44), 
            HSTS,   32
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((TTDP == Zero))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
            ElseIf ((TTDP == One))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Return (Zero)
        }

        Method (STRT, 3, Serialized)
        {
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                FERR,   32, 
                Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, Zero)
            If ((ToInteger (Arg0) != Zero)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    TIMR = Zero
                    If ((AMDT == One))
                    {
                        While (((BEGN == One) && (TIMR < 0x0200)))
                        {
                            If ((BEGN == One))
                            {
                                Sleep (One)
                                TIMR++
                            }
                        }
                    }
                    ElseIf ((((HSTS & 0x02) | (HSTS & One)
                        ) == 0x03))
                    {
                        HCMD = One
                    }
                    Else
                    {
                        FERR = One
                        BEGN = Zero
                    }

                    Return (Zero)
                }

            }

            Return (One)
        }

        Method (CRYF, 3, Serialized)
        {
            If ((ToInteger (Arg0) != One)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    Name (TPMV, Package (0x02)
                    {
                        One, 
                        Package (0x02)
                        {
                            One, 
                            0x20
                        }
                    })
                    If ((_STA () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            Zero
                        })
                    }

                    Return (TPMV) /* \_SB_.TPM_.CRYF.TPMV */
                }

            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, 0x02)
        Field (TSMI, WordAcc, NoLock, Preserve)
        {
            SMI,    16
        }

        OperationRegion (ATNV, SystemMemory, PPIM, PPIL)
        Field (ATNV, AnyAcc, NoLock, Preserve)
        {
            RQST,   32, 
            RCNT,   32, 
            ERRO,   32, 
            FLAG,   32, 
            MISC,   32, 
            OPTN,   32, 
            SRSP,   32
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        If ((PPIV == Zero))
                        {
                            Return ("1.2")
                        }
                        Else
                        {
                            Return ("1.3")
                        }
                    }
                    Case (0x02)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        SRSP = Zero
                        FLAG = 0x02
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x03)
                    {
                        Name (PPI1, Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                        PPI1 [One] = RQST /* \_SB_.TPM_.RQST */
                        Return (PPI1) /* \_SB_.TPM_._DSM.PPI1 */
                    }
                    Case (0x04)
                    {
                        Return (TRST) /* \TRST */
                    }
                    Case (0x05)
                    {
                        Name (PPI2, Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        })
                        SRSP = Zero
                        FLAG = 0x05
                        SMI = OFST /* \OFST */
                        PPI2 [One] = RCNT /* \_SB_.TPM_.RCNT */
                        PPI2 [0x02] = ERRO /* \_SB_.TPM_.ERRO */
                        Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x07
                        OPTN = Zero
                        If ((RQST == 0x17))
                        {
                            ToInteger (DerefOf (Arg3 [One]), OPTN) /* \_SB_.TPM_.OPTN */
                        }

                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x08)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x08
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d")))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x09
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }

            If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8")))
            {
                Return (CRYF (Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4")))
            {
                Return (STRT (Arg1, Arg2, Arg3))
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (TPTS, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x04)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }
                Case (0x05)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }

            }

            Sleep (0x012C)
        }
    }

    Scope (_SB.PCI0.SBRG)
    {
        OperationRegion (DBGP, SystemIO, 0x80, 0x08)
        Field (DBGP, ByteAcc, NoLock, Preserve)
        {
            DP80,   8
        }

        OperationRegion (SMIP, SystemIO, 0xB2, 0x08)
        Field (SMIP, ByteAcc, NoLock, Preserve)
        {
            DPB2,   8
        }

        Method (IBFX, 0, Serialized)
        {
            OperationRegion (ECR1, SystemIO, 0x66, One)
            Field (ECR1, ByteAcc, Lock, Preserve)
            {
                ECOF,   1, 
                ECIE,   1, 
                Offset (0x01)
            }

            Local0 = 0x1000
            While ((Local0-- && ECIE))
            {
                Sleep (One)
            }
        }

        Method (OBFX, 0, Serialized)
        {
            OperationRegion (ECR1, SystemIO, 0x66, One)
            Field (ECR1, ByteAcc, Lock, Preserve)
            {
                ECOF,   1, 
                ECIE,   1, 
                Offset (0x01)
            }

            Local0 = 0x1000
            While (Local0--)
            {
                If (ECOF)
                {
                    Break
                }

                Sleep (One)
            }
        }

        Name (ECB1, Zero)
        Method (EPTS, 1, NotSerialized)
        {
        }

        Method (EWAK, 1, Serialized)
        {
            OperationRegion (ECR2, SystemIO, 0x66, One)
            Field (ECR2, ByteAcc, Lock, Preserve)
            {
                EC66,   8
            }

            OperationRegion (ECR3, SystemIO, 0x62, One)
            Field (ECR3, ByteAcc, Lock, Preserve)
            {
                EC62,   8
            }

            IBFX ()
            EC66 = 0x91
            IBFX ()
            EC62 = 0xFF
            IBFX ()
            EC62 = Zero
            IBFX ()
            EC66 = 0x90
            IBFX ()
            EC62 = 0xD2
            OBFX ()
            ECB1 = EC62 /* \_SB_.PCI0.SBRG.EWAK.EC62 */
            IBFX ()
            EC66 = 0x91
            IBFX ()
            EC62 = 0xD2
            IBFX ()
            EC62 = (0x10 | ECB1)
        }

        Device (EC0)
        {
            Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0062,             // Range Minimum
                    0x0062,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0066,             // Range Minimum
                    0x0066,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
            })
            Name (_GPE, 0x04)  // _GPE: General Purpose Events
            Name (REGC, Zero)
            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
                If ((Arg0 == 0x03))
                {
                    REGC = Arg1
                }
            }

            Method (_Q01, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                \RMTW.AMWN (0xA0040001)
            }

            Method (_Q02, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                \RMTW.AMWN (0xA0040002)
            }

            Method (_Q03, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                \RMTW.AMWN (0xA0040003)
            }

            Method (_Q0B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                \RMTW.AMWN (0xA002000B)
            }

            Method (_Q0D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                \RMTW.AMWN (0xA0021000)
            }

            Method (_Q87, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                \RMTW.AMWN (0xA0040087)
            }

            Method (_Q88, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                \RMTW.AMWN (0xA0040088)
            }
        }
    }

    Scope (\)
    {
        Device (ABAW)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AsusBACKUPWMI")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x19, 0x56, 0x48, 0xA0, 0x07, 0x3E, 0xBE, 0x4A,  // .VH..>.J
                /* 0008 */  0xBE, 0x6B, 0x0A, 0xB6, 0x7E, 0x2A, 0x92, 0xE6,  // .k..~*..
                /* 0010 */  0x42, 0x43, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // BC..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x4D, 0x4F, 0x01, 0x00   // ..).MO..
            })
            Method (WMBC, 3, Serialized)
            {
                Switch (Arg1)
                {
                    Case (0x41424145)
                    {
                        Return (EABA ())
                    }
                    Case (0x41424147)
                    {
                        Return (GABA ())
                    }
                    Case (0x53425544)
                    {
                        Return (SBUD (Arg2))
                    }
                    Case (0x47425544)
                    {
                        Return (GBUD (Arg2))
                    }
                    Case (0x53595343)
                    {
                        Return (SYSC (Arg2))
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }

                Return (Zero)
            }

            Name (WQMO, Buffer (0x03F5)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xE5, 0x03, 0x00, 0x00, 0x06, 0x0F, 0x00, 0x00,  // ........
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0xA8, 0x50, 0x87, 0x00, 0x01, 0x06, 0x18, 0x42,  // .P.....B
                /* 0020 */  0x20, 0x74, 0x01, 0x89, 0xC0, 0xA1, 0x21, 0x14,  //  t....!.
                /* 0028 */  0x46, 0x01, 0x0C, 0x46, 0x02, 0x84, 0xE4, 0x40,  // F..F...@
                /* 0030 */  0xC8, 0x05, 0x13, 0x13, 0x20, 0x02, 0x42, 0x5E,  // .... .B^
                /* 0038 */  0x05, 0xD8, 0x14, 0x60, 0x12, 0x44, 0xFD, 0xFB,  // ...`.D..
                /* 0040 */  0x43, 0x94, 0x04, 0x87, 0x12, 0x02, 0x21, 0x89,  // C.....!.
                /* 0048 */  0x02, 0xCC, 0x0B, 0xD0, 0x2D, 0xC0, 0xB0, 0x00,  // ....-...
                /* 0050 */  0xDB, 0x02, 0x4C, 0x0B, 0x70, 0x0C, 0x49, 0xA5,  // ..L.p.I.
                /* 0058 */  0x81, 0x53, 0x02, 0x4B, 0x81, 0x90, 0x50, 0x01,  // .S.K..P.
                /* 0060 */  0xCA, 0x05, 0xF8, 0x16, 0xA0, 0x1D, 0x51, 0x92,  // ......Q.
                /* 0068 */  0x05, 0x58, 0x86, 0x11, 0x81, 0x47, 0x11, 0xD9,  // .X...G..
                /* 0070 */  0x68, 0x9C, 0xA0, 0x6C, 0x68, 0x94, 0x0C, 0x08,  // h..lh...
                /* 0078 */  0x79, 0x16, 0x60, 0x1D, 0x98, 0x10, 0xD8, 0xBD,  // y.`.....
                /* 0080 */  0x00, 0x83, 0x02, 0x84, 0xCD, 0x42, 0xE2, 0x04,  // .....B..
                /* 0088 */  0x58, 0x13, 0xA0, 0x4D, 0x80, 0x31, 0x01, 0xE6,  // X..M.1..
                /* 0090 */  0x04, 0xD8, 0x12, 0xE0, 0x4C, 0x80, 0x45, 0x28,  // ....L.E(
                /* 0098 */  0x79, 0x43, 0x11, 0x58, 0xBC, 0x0A, 0x71, 0x84,  // yC.X..q.
                /* 00A0 */  0x12, 0xC3, 0x80, 0x31, 0xA2, 0x44, 0x0B, 0x65,  // ...1.D.e
                /* 00A8 */  0x98, 0x80, 0x91, 0x2A, 0x83, 0x11, 0x72, 0x8C,  // ...*..r.
                /* 00B0 */  0x70, 0xB6, 0x3F, 0x08, 0x12, 0x6C, 0xC1, 0x1A,  // p.?..l..
                /* 00B8 */  0xAA, 0x23, 0x8D, 0x06, 0x35, 0xBC, 0x04, 0x87,  // .#..5...
                /* 00C0 */  0xEB, 0xA1, 0x9E, 0x63, 0xE7, 0x02, 0xA4, 0x4F,  // ...c...O
                /* 00C8 */  0x52, 0x20, 0x07, 0x79, 0x6E, 0x75, 0x8E, 0x93,  // R .ynu..
                /* 00D0 */  0x80, 0x24, 0x30, 0x56, 0x82, 0x0E, 0x06, 0x0E,  // .$0V....
                /* 00D8 */  0xC5, 0x35, 0xA0, 0x66, 0x7C, 0xBC, 0x4C, 0x10,  // .5.f|.L.
                /* 00E0 */  0x1C, 0x6A, 0x88, 0x1E, 0x68, 0xB8, 0x13, 0x38,  // .j..h..8
                /* 00E8 */  0x44, 0x06, 0xE8, 0x69, 0x1D, 0x0D, 0xE6, 0x00,  // D..i....
                /* 00F0 */  0x60, 0x87, 0x93, 0xD1, 0x3D, 0xA0, 0x54, 0x01,  // `...=.T.
                /* 00F8 */  0x66, 0xC7, 0xAC, 0x89, 0x25, 0x38, 0x1E, 0x43,  // f...%8.C
                /* 0100 */  0x9F, 0xEE, 0xF9, 0x9C, 0x70, 0x02, 0xCB, 0x1F,  // ....p...
                /* 0108 */  0x04, 0x6A, 0x64, 0x86, 0xF6, 0x20, 0x4F, 0x2B,  // .jd.. O+
                /* 0110 */  0x66, 0xC8, 0xC3, 0x3F, 0x2C, 0x26, 0x16, 0x42,  // f..?,&.B
                /* 0118 */  0x1F, 0x04, 0x8F, 0x07, 0xDE, 0xFF, 0x7F, 0x3C,  // .......<
                /* 0120 */  0xE0, 0x51, 0x7C, 0x26, 0x10, 0xC2, 0x2B, 0x41,  // .Q|&..+A
                /* 0128 */  0x6C, 0x0F, 0x28, 0x41, 0x81, 0xC0, 0xE8, 0x01,  // l.(A....
                /* 0130 */  0xD9, 0xAF, 0x00, 0x84, 0xE0, 0x65, 0x8E, 0x48,  // .....e.H
                /* 0138 */  0x4E, 0x11, 0x34, 0x26, 0x4F, 0xEE, 0xD5, 0x20,  // N.4&O.. 
                /* 0140 */  0xC4, 0xBB, 0x40, 0xE8, 0xB3, 0x3A, 0xE5, 0x30,  // ..@..:.0
                /* 0148 */  0x85, 0x9F, 0x13, 0x28, 0x41, 0x91, 0x03, 0x40,  // ...(A..@
                /* 0150 */  0x89, 0x19, 0x00, 0xEA, 0x14, 0x10, 0xFB, 0x70,  // .......p
                /* 0158 */  0x4E, 0xE6, 0x00, 0x0E, 0x27, 0xCA, 0x39, 0x1C,  // N...'.9.
                /* 0160 */  0x8F, 0x8F, 0x0C, 0x46, 0x38, 0xCB, 0x72, 0x4F,  // ...F8.rO
                /* 0168 */  0x0E, 0x44, 0xF3, 0x1C, 0x34, 0x85, 0x53, 0x7A,  // .D..4.Sz
                /* 0170 */  0x19, 0x30, 0xC1, 0x04, 0xAB, 0x94, 0x05, 0x10,  // .0......
                /* 0178 */  0x05, 0x3A, 0x1E, 0xC8, 0xC6, 0x4A, 0x4D, 0xA0,  // .:...JM.
                /* 0180 */  0x23, 0x85, 0x65, 0x01, 0x69, 0x38, 0xB8, 0x33,  // #.e.i8.3
                /* 0188 */  0x45, 0x98, 0xD7, 0x03, 0x0F, 0xDC, 0xE7, 0x03,  // E.......
                /* 0190 */  0xCF, 0x2A, 0xC2, 0x93, 0x01, 0x01, 0xD5, 0x71,  // .*.....q
                /* 0198 */  0x83, 0xC7, 0x87, 0x50, 0xF8, 0x31, 0x51, 0x38,  // ...P.1Q8
                /* 01A0 */  0xC7, 0x05, 0xA3, 0x20, 0x3E, 0x01, 0x38, 0x0A,  // ... >.8.
                /* 01A8 */  0x84, 0x9C, 0x1C, 0x06, 0xD0, 0x43, 0x3B, 0x0B,  // .....C;.
                /* 01B0 */  0x43, 0x1C, 0xAA, 0x09, 0x3C, 0x95, 0x47, 0x06,  // C...<.G.
                /* 01B8 */  0x58, 0x03, 0x8C, 0x78, 0x72, 0x9E, 0x86, 0xE1,  // X..xr...
                /* 01C0 */  0x0C, 0x69, 0x38, 0x7E, 0x15, 0x38, 0xAF, 0x04,  // .i8~.8..
                /* 01C8 */  0xFC, 0x48, 0x00, 0xFF, 0xBA, 0xE1, 0x03, 0xC1,  // .H......
                /* 01D0 */  0x29, 0x3C, 0x69, 0xBC, 0x5D, 0x24, 0xF0, 0x91,  // )<i.]$..
                /* 01D8 */  0x00, 0x1C, 0x40, 0xBE, 0x03, 0x58, 0xE9, 0x39,  // ..@..X.9
                /* 01E0 */  0x80, 0xCE, 0x21, 0x44, 0x98, 0x68, 0x26, 0xF8,  // ..!D.h&.
                /* 01E8 */  0xFF, 0x87, 0xE7, 0x82, 0x47, 0x4A, 0x65, 0x8D,  // ....GJe.
                /* 01F0 */  0x0B, 0x75, 0x2C, 0xF0, 0xE1, 0x80, 0x61, 0x9F,  // .u,...a.
                /* 01F8 */  0xFC, 0xD1, 0x14, 0x3D, 0x43, 0x5D, 0x08, 0x0E,  // ...=C]..
                /* 0200 */  0xEA, 0xED, 0xC1, 0x16, 0x0D, 0x2A, 0x34, 0x08,  // .....*4.
                /* 0208 */  0xEB, 0x91, 0x72, 0x58, 0xA3, 0x85, 0x3D, 0xE0,  // ..rX..=.
                /* 0210 */  0x27, 0x07, 0xDF, 0x3A, 0x3C, 0x33, 0x63, 0x84,  // '..:<3c.
                /* 0218 */  0xF5, 0x68, 0x1D, 0xE9, 0x60, 0x80, 0x12, 0x35,  // .h..`..5
                /* 0220 */  0x54, 0x03, 0xC9, 0xE3, 0x2C, 0xC8, 0xCD, 0x00,  // T...,...
                /* 0228 */  0xCE, 0xDC, 0x4E, 0xE5, 0x50, 0xD9, 0xC9, 0x00,  // ..N.P...
                /* 0230 */  0x38, 0x0C, 0xE3, 0x48, 0xCE, 0xE3, 0xF1, 0x21,  // 8..H...!
                /* 0238 */  0xC2, 0x8B, 0x0C, 0x3B, 0x19, 0x00, 0x9E, 0x3D,  // ...;...=
                /* 0240 */  0x9E, 0x0C, 0x40, 0xF1, 0xFF, 0x3F, 0x19, 0xE0,  // ..@..?..
                /* 0248 */  0xA2, 0xAC, 0x42, 0x27, 0x03, 0x3E, 0x60, 0x0B,  // ..B'.>`.
                /* 0250 */  0x02, 0xD2, 0x84, 0xDE, 0x6F, 0x1E, 0x67, 0x0C,  // ....o.g.
                /* 0258 */  0xEC, 0xC1, 0x1D, 0x47, 0xE4, 0x37, 0x80, 0x63,  // ...G.7.c
                /* 0260 */  0x79, 0xA0, 0x61, 0x12, 0x00, 0x75, 0x1E, 0xF0,  // y.a..u..
                /* 0268 */  0xA8, 0x1C, 0x9E, 0x42, 0xE1, 0x69, 0x74, 0x2C,  // ...B.it,
                /* 0270 */  0x40, 0x9C, 0x0E, 0x28, 0x88, 0x0F, 0x41, 0x8E,  // @..(..A.
                /* 0278 */  0x70, 0x2C, 0x40, 0x8F, 0xD2, 0xE3, 0x38, 0x05,  // p,@...8.
                /* 0280 */  0x36, 0xBA, 0x83, 0x64, 0x03, 0xF3, 0xD8, 0xB8,  // 6..d....
                /* 0288 */  0x06, 0x08, 0xDD, 0x00, 0x8C, 0x6B, 0x35, 0x83,  // .....k5.
                /* 0290 */  0x45, 0x81, 0xF9, 0x4C, 0x80, 0xD1, 0x75, 0x25,  // E..L..u%
                /* 0298 */  0x00, 0x59, 0x86, 0x11, 0xA1, 0x55, 0x80, 0x48,  // .Y...U.H
                /* 02A0 */  0x23, 0xA4, 0xEE, 0x48, 0x9E, 0x11, 0x78, 0x0F,  // #..H..x.
                /* 02A8 */  0x5F, 0x64, 0x46, 0x20, 0x8B, 0x71, 0xB1, 0x80,  // _dF .q..
                /* 02B0 */  0x72, 0xDC, 0xE0, 0x93, 0x06, 0xFB, 0x91, 0xC0,  // r.......
                /* 02B8 */  0x63, 0x02, 0x9B, 0x3E, 0x01, 0xFF, 0xFF, 0x6B,  // c..>...k
                /* 02C0 */  0x05, 0xB8, 0xD1, 0xF9, 0xA9, 0xC4, 0xC7, 0x05,  // ........
                /* 02C8 */  0x1E, 0x78, 0xD4, 0x14, 0xC4, 0x83, 0x72, 0x98,  // .x....r.
                /* 02D0 */  0xB9, 0xA2, 0x4F, 0x6B, 0x1E, 0xC0, 0x1B, 0xC9,  // ..Ok....
                /* 02D8 */  0x53, 0x92, 0x21, 0x5E, 0x22, 0x7C, 0x4A, 0xF2,  // S.!^"|J.
                /* 02E0 */  0xA9, 0x04, 0xEC, 0x50, 0x3E, 0x95, 0x00, 0x9E,  // ...P>...
                /* 02E8 */  0x1C, 0x3A, 0x35, 0xEB, 0xF4, 0x54, 0x02, 0x2E,  // .:5..T..
                /* 02F0 */  0x49, 0xEB, 0xD0, 0xA9, 0x04, 0x77, 0xB0, 0xF3,  // I....w..
                /* 02F8 */  0x84, 0x1E, 0x7F, 0xD8, 0x29, 0x07, 0x73, 0x80,  // ....).s.
                /* 0300 */  0xE0, 0x27, 0x14, 0x9D, 0x7D, 0x50, 0x21, 0x28,  // .'..}P!(
                /* 0308 */  0x14, 0xE1, 0x54, 0x82, 0x12, 0x0D, 0x47, 0x41,  // ..T...GA
                /* 0310 */  0x3C, 0x36, 0x07, 0x81, 0xD0, 0xFF, 0xFF, 0x5C,  // <6.....\
                /* 0318 */  0x80, 0x3B, 0xB6, 0xF9, 0xA4, 0xE7, 0x4B, 0x81,  // .;....K.
                /* 0320 */  0xC5, 0x9F, 0x0A, 0xA0, 0xDE, 0x28, 0xD8, 0xD1,  // .....(..
                /* 0328 */  0x07, 0x18, 0x0D, 0x0A, 0xCE, 0x34, 0xF9, 0x18,  // .....4..
                /* 0330 */  0x3C, 0x28, 0x70, 0x0F, 0xD7, 0x27, 0x07, 0xC0,  // <(p..'..
                /* 0338 */  0x93, 0x44, 0xAB, 0x0A, 0x4F, 0x0E, 0x20, 0xD3,  // .D..O. .
                /* 0340 */  0x7F, 0x72, 0x40, 0xAB, 0x00, 0xD2, 0x39, 0x8C,  // .r@...9.
                /* 0348 */  0x9F, 0x1C, 0xE0, 0xE4, 0x3E, 0x32, 0xD0, 0x51,  // ....>2.Q
                /* 0350 */  0xF9, 0xFF, 0x9F, 0x98, 0x44, 0xA9, 0x0F, 0x28,  // ....D..(
                /* 0358 */  0xA8, 0x9C, 0x63, 0xA7, 0x20, 0x06, 0x74, 0x88,  // ..c. .t.
                /* 0360 */  0x93, 0x03, 0xF4, 0xF3, 0x11, 0xF0, 0xBC, 0xDA,  // ........
                /* 0368 */  0x00, 0x8B, 0xE8, 0x53, 0x45, 0x85, 0x9D, 0x2A,  // ...SE..*
                /* 0370 */  0x05, 0xF1, 0x54, 0x7D, 0x9F, 0x80, 0x7B, 0xAB,  // ..T}..{.
                /* 0378 */  0x7C, 0xB1, 0x01, 0xFB, 0x7D, 0x02, 0x30, 0xF3,  // |...}.0.
                /* 0380 */  0xFF, 0xBF, 0x4F, 0x40, 0xF2, 0x78, 0x9F, 0x00,  // ..O@.x..
                /* 0388 */  0x97, 0x42, 0x9B, 0x3E, 0x35, 0x1A, 0xB5, 0x6A,  // .B.>5..j
                /* 0390 */  0x50, 0xA6, 0x46, 0x99, 0x06, 0xB5, 0xFA, 0x54,  // P.F....T
                /* 0398 */  0x6A, 0xCC, 0x98, 0x96, 0x93, 0x96, 0x2F, 0x32,  // j...../2
                /* 03A0 */  0x54, 0xC4, 0x72, 0x04, 0x62, 0xE9, 0x14, 0x32,  // T.r.b..2
                /* 03A8 */  0x72, 0x12, 0x30, 0x88, 0xEE, 0x0E, 0xE4, 0x73,  // r.0....s
                /* 03B0 */  0x2A, 0x20, 0x4B, 0x03, 0x11, 0x90, 0x23, 0x7D,  // * K...#}
                /* 03B8 */  0x1B, 0x04, 0xE4, 0x7C, 0x20, 0x02, 0xB2, 0x2A,  // ...| ..*
                /* 03C0 */  0x0F, 0x40, 0x4C, 0x22, 0x88, 0x80, 0x9C, 0x0D,  // .@L"....
                /* 03C8 */  0x88, 0x06, 0x05, 0xA2, 0xB1, 0xD6, 0x29, 0x20,  // ......) 
                /* 03D0 */  0x87, 0x04, 0x11, 0x90, 0x05, 0x7E, 0xD1, 0x04,  // .....~..
                /* 03D8 */  0x64, 0xB9, 0x20, 0x02, 0x72, 0x50, 0x20, 0x1A,  // d. .rP .
                /* 03E0 */  0x1B, 0x88, 0x0A, 0x7E, 0x23, 0x08, 0xC8, 0xEA,  // ...~#...
                /* 03E8 */  0x41, 0x04, 0x64, 0x9D, 0x36, 0x80, 0x98, 0x6A,  // A.d.6..j
                /* 03F0 */  0x10, 0x01, 0xF9, 0xFF, 0x0F                     // .....
            })
            OperationRegion (DEB0, SystemIO, 0x80, One)
            Field (DEB0, ByteAcc, NoLock, Preserve)
            {
                DBG8,   8
            }

            OperationRegion (IOB2, SystemIO, SMIP, 0x02)
            Field (IOB2, ByteAcc, NoLock, Preserve)
            {
                SMPT,   8, 
                SMIS,   8
            }

            Method (ISMI, 1, Serialized)
            {
                SMPT = Arg0
            }

            Method (EABA, 0, Serialized)
            {
                ISMI (0x95)
                Return (Zero)
            }

            Method (GABA, 0, Serialized)
            {
                Return (ABAP) /* \ABAW.ABAP */
            }

            Method (SYSC, 1, Serialized)
            {
                SYSD = Arg0
                ISMI (0x95)
                Return (ERCO) /* \ABAW.ERCO */
            }

            Method (SBUD, 1, Serialized)
            {
                IDAT = Arg0
                Local0 = (INDX + 0x0C)
                Local1 = (Local0 + ABAP) /* \ABAW.ABAP */
                OperationRegion (SBTB, SystemMemory, Local1, 0x04)
                Field (SBTB, ByteAcc, NoLock, Preserve)
                {
                    TDAT,   32
                }

                TDAT = DAT0 /* \ABAW.DAT0 */
                Return (Zero)
            }

            Method (GBUD, 1, Serialized)
            {
                INDX = Arg0
                Local0 = (INDX + 0x0C)
                Local1 = (Local0 + ABAP) /* \ABAW.ABAP */
                OperationRegion (GBTB, SystemMemory, Local1, 0x04)
                Field (GBTB, ByteAcc, NoLock, Preserve)
                {
                    RDAT,   32
                }

                Return (RDAT) /* \ABAW.GBUD.RDAT */
            }

            Name (ABAP, 0x76402018)
            Name (WBUF, Buffer (0x50){})
            OperationRegion (ABAX, SystemMemory, ABAP, 0x00010000)
            Field (ABAX, ByteAcc, NoLock, Preserve)
            {
                SIGN,   32, 
                WFUN,   32, 
                DSIG,   32, 
                BUDA,   1024, 
                ERCO,   32, 
                IDAT,   96
            }

            Field (ABAX, ByteAcc, NoLock, Preserve)
            {
                Offset (0x90), 
                INDX,   32, 
                DAT0,   32
            }

            Field (ABAX, ByteAcc, NoLock, Preserve)
            {
                SYSD,   96
            }
        }
    }

    Scope (_SB)
    {
        Name (RAMB, 0x7636C018)
        OperationRegion (\RAMW, SystemMemory, RAMB, 0x00010000)
        Field (RAMW, ByteAcc, NoLock, Preserve)
        {
            PAR0,   32, 
            PAR1,   32, 
            PAR2,   32, 
            PINX,   32, 
            PADD,   2048
        }

        Mutex (MPAR, 0x00)
        Name (ARBF, Buffer (0x10){})
        CreateDWordField (ARBF, Zero, REAX)
        CreateDWordField (ARBF, 0x04, REBX)
        CreateDWordField (ARBF, 0x08, RECX)
        CreateDWordField (ARBF, 0x0C, REDX)
        OperationRegion (DEB0, SystemIO, 0x80, One)
        Field (DEB0, ByteAcc, NoLock, Preserve)
        {
            DB80,   8
        }

        OperationRegion (IOG2, SystemIO, SMIP, 0x02)
        Field (IOG2, ByteAcc, NoLock, Preserve)
        {
            SSCP,   8, 
            SSSP,   8
        }

        Method (ISMI, 1, Serialized)
        {
            SSCP = Arg0
        }

        Method (GMSR, 1, Serialized)
        {
            If ((Acquire (MPAR, 0xFFFF) == Zero))
            {
                PINX = 0x80000000
                PAR0 = Arg0
                ISMI (0x90)
                RECX = Arg0
                REAX = PAR1 /* \_SB_.PAR1 */
                REDX = PAR2 /* \_SB_.PAR2 */
                Release (MPAR)
                Return (ARBF) /* \_SB_.ARBF */
            }

            Return (Ones)
        }

        Method (SMSR, 1, Serialized)
        {
            If ((Acquire (MPAR, 0xFFFF) == Zero))
            {
                CreateDWordField (Arg0, Zero, AEAX)
                CreateDWordField (Arg0, 0x04, AEBX)
                CreateDWordField (Arg0, 0x08, AECX)
                CreateDWordField (Arg0, 0x0C, AEDX)
                PINX = 0x80000001
                PAR0 = AECX /* \_SB_.SMSR.AECX */
                PAR1 = AEAX /* \_SB_.SMSR.AEAX */
                PAR2 = AEDX /* \_SB_.SMSR.AEDX */
                ISMI (0x90)
                Release (MPAR)
            }

            Return (Ones)
        }

        Method (GCID, 1, Serialized)
        {
            If ((Acquire (MPAR, 0xFFFF) == Zero))
            {
                PINX = 0x80000002
                PAR0 = Arg0
                ISMI (0x90)
                REAX = PAR1 /* \_SB_.PAR1 */
                REDX = PAR2 /* \_SB_.PAR2 */
                Release (MPAR)
                Return (ARBF) /* \_SB_.ARBF */
            }

            Return (Ones)
        }

        Method (GPRE, 1, Serialized)
        {
            PAR0 = Arg0
            PINX = 0x80000005
            ISMI (0x90)
            Return (PAR0) /* \_SB_.PAR0 */
        }

        Method (GNVS, 1, Serialized)
        {
            PAR0 = Arg0
            PINX = 0x80000003
            ISMI (0x90)
            Return (PAR1) /* \_SB_.PAR1 */
        }

        Method (SNVS, 2, Serialized)
        {
            PAR0 = Arg0
            PAR1 = Arg1
            PINX = 0x80000004
            ISMI (0x90)
        }

        Method (SIRS, 0, Serialized)
        {
            PINX = 0x8000000A
            ISMI (0x90)
        }

        Method (SRDM, 0, Serialized)
        {
            PINX = 0x8000000B
            ISMI (0x90)
        }

        Method (SARM, 1, Serialized)
        {
            If (((Arg0 > 0x03) && (Arg0 < 0x06)))
            {
                ISMI (0x92)
            }
        }

        Method (GAMM, 0, Serialized)
        {
            ISMI (0x91)
        }

        Method (SAMM, 0, Serialized)
        {
            ISMI (0x92)
        }
    }

    Scope (_SB)
    {
        Name (ANVM, 0x763D2000)
        OperationRegion (ANVX, SystemMemory, ANVM, 0x00030000)
        Name (ASFH, 0x76392000)
        OperationRegion (ASFX, SystemMemory, ASFH, 0x00040000)
    }

    Scope (_SB)
    {
        Name (MUTX, One)
        Device (ATKD)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "ATK")  // _UID: Unique ID
            Name (ATKQ, Package (0x10)
            {
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF
            })
            Name (AQHI, Zero)
            Name (AQTI, 0x0F)
            Name (AQNO, Zero)
            Method (IANQ, 1, Serialized)
            {
                If ((AQNO >= 0x10))
                {
                    Local0 = 0x64
                    While ((Local0 && (AQNO >= 0x10)))
                    {
                        Local0--
                        Sleep (0x0A)
                    }

                    If ((!Local0 && (AQNO >= 0x10)))
                    {
                        Return (Zero)
                    }
                }

                AQTI++
                AQTI &= 0x0F
                ATKQ [AQTI] = Arg0
                AQNO++
                Return (One)
            }

            Method (GANQ, 0, Serialized)
            {
                If (AQNO)
                {
                    AQNO--
                    Local0 = DerefOf (ATKQ [AQHI])
                    AQHI++
                    AQHI &= 0x0F
                    Return (Local0)
                }

                Return (Ones)
            }

            Name (_WDG, Buffer (0x3C)
            {
                /* 0000 */  0xD0, 0x5E, 0x84, 0x97, 0x6D, 0x4E, 0xDE, 0x11,  // .^..mN..
                /* 0008 */  0x8A, 0x39, 0x08, 0x00, 0x20, 0x0C, 0x9A, 0x66,  // .9.. ..f
                /* 0010 */  0x4E, 0x42, 0x01, 0x02, 0x35, 0xBB, 0x3C, 0x0B,  // NB..5.<.
                /* 0018 */  0xC2, 0xE3, 0xED, 0x45, 0x91, 0xC2, 0x4C, 0x5A,  // ...E..LZ
                /* 0020 */  0x6D, 0x19, 0x5D, 0x1C, 0xFF, 0x00, 0x01, 0x08,  // m.].....
                /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0038 */  0x4D, 0x4F, 0x01, 0x00                           // MO..
            })
            Method (WMNB, 3, Serialized)
            {
                CreateDWordField (Arg2, Zero, IIA0)
                Local0 = (Arg1 & 0xFFFFFFFF)
                If ((Local0 == 0x4E554653))
                {
                    Return (SFUN ())
                }

                If ((Local0 == 0x53545344))
                {
                    Return (DSTS (IIA0))
                }

                Return (0xFFFFFFFE)
            }

            Name (WQMO, Buffer (0x0387)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x77, 0x03, 0x00, 0x00, 0x06, 0x0B, 0x00, 0x00,  // w.......
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x98, 0x46, 0x85, 0x00, 0x01, 0x06, 0x18, 0x42,  // .F.....B
                /* 0020 */  0x10, 0x05, 0x10, 0xD2, 0xE0, 0x81, 0x42, 0x04,  // ......B.
                /* 0028 */  0x0A, 0x0D, 0xA1, 0x38, 0x44, 0x86, 0xA1, 0x12,  // ...8D...
                /* 0030 */  0x20, 0x24, 0x09, 0x42, 0x2E, 0x98, 0x98, 0x00,  //  $.B....
                /* 0038 */  0x21, 0x10, 0x92, 0x28, 0xC0, 0xBC, 0x00, 0xDD,  // !..(....
                /* 0040 */  0x02, 0x0C, 0x0B, 0xB0, 0x2D, 0xC0, 0xB4, 0x00,  // ....-...
                /* 0048 */  0xC7, 0x40, 0xEA, 0xDF, 0x1F, 0xA2, 0x34, 0x10,  // .@....4.
                /* 0050 */  0x89, 0x80, 0xA4, 0x52, 0x20, 0x24, 0x54, 0x80,  // ...R $T.
                /* 0058 */  0x72, 0x01, 0xBE, 0x05, 0x68, 0x47, 0x94, 0x64,  // r...hG.d
                /* 0060 */  0x01, 0x96, 0x61, 0x44, 0x60, 0xAF, 0xC8, 0x04,  // ..aD`...
                /* 0068 */  0x8D, 0x13, 0x94, 0x33, 0x0C, 0x14, 0xBC, 0x01,  // ...3....
                /* 0070 */  0xDB, 0x14, 0x60, 0x72, 0x10, 0x54, 0xF6, 0x20,  // ..`r.T. 
                /* 0078 */  0x50, 0x32, 0x20, 0xE4, 0x59, 0x80, 0xF5, 0x31,  // P2 .Y..1
                /* 0080 */  0x10, 0x02, 0xBB, 0x17, 0x60, 0x4E, 0x80, 0x37,  // ....`N.7
                /* 0088 */  0x01, 0xE2, 0x46, 0x23, 0x6B, 0x02, 0x2C, 0xCE,  // ..F#k.,.
                /* 0090 */  0x49, 0xC2, 0x04, 0xD8, 0x82, 0x11, 0x4A, 0x6D,  // I.....Jm
                /* 0098 */  0x30, 0x42, 0x69, 0x0C, 0x41, 0x20, 0x71, 0xA2,  // 0Bi.A q.
                /* 00A0 */  0x44, 0x6C, 0x50, 0x80, 0x33, 0x58, 0xA1, 0x44,  // DlP.3X.D
                /* 00A8 */  0x0C, 0x13, 0x22, 0x42, 0x65, 0x18, 0xC4, 0x21,  // .."Be..!
                /* 00B0 */  0x94, 0xD0, 0xE2, 0x46, 0x68, 0x7F, 0x10, 0x24,  // ...Fh..$
                /* 00B8 */  0xDA, 0x8A, 0x35, 0x54, 0x47, 0x1A, 0x0D, 0x6A,  // ..5TG..j
                /* 00C0 */  0x44, 0x09, 0x0E, 0xCC, 0x83, 0x3A, 0xD5, 0xCE,  // D....:..
                /* 00C8 */  0x05, 0x48, 0x9F, 0xAB, 0x40, 0x8E, 0xF5, 0x14,  // .H..@...
                /* 00D0 */  0xEB, 0x1C, 0x2E, 0x01, 0x49, 0x60, 0xAC, 0x04,  // ....I`..
                /* 00D8 */  0x1D, 0x0C, 0x11, 0x8A, 0x6B, 0x40, 0x4D, 0xFC,  // ....k@M.
                /* 00E0 */  0x10, 0x99, 0x20, 0x38, 0xD4, 0x10, 0x3D, 0xDE,  // .. 8..=.
                /* 00E8 */  0x70, 0x27, 0x70, 0x88, 0x0C, 0xD0, 0x73, 0x3A,  // p'p...s:
                /* 00F0 */  0x1A, 0xCC, 0x39, 0xC0, 0xE3, 0x3A, 0x99, 0x33,  // ..9..:.3
                /* 00F8 */  0x2E, 0x55, 0x80, 0xD9, 0xA1, 0x6B, 0x84, 0x09,  // .U...k..
                /* 0100 */  0x8E, 0xC7, 0xD0, 0xA7, 0x7B, 0x3E, 0x27, 0x9C,  // ....{>'.
                /* 0108 */  0xC0, 0xF2, 0x07, 0x81, 0x1A, 0x99, 0xA1, 0x3D,  // .......=
                /* 0110 */  0xC6, 0xD3, 0x8A, 0x19, 0xF2, 0x29, 0xE0, 0xB0,  // .....)..
                /* 0118 */  0x98, 0xD8, 0x53, 0x02, 0x1D, 0x0F, 0xBC, 0xFF,  // ..S.....
                /* 0120 */  0xFF, 0x78, 0xC0, 0xA3, 0xF8, 0x68, 0x20, 0x84,  // .x...h .
                /* 0128 */  0x57, 0x82, 0xD8, 0x1E, 0xD0, 0xE3, 0x82, 0x81,  // W.......
                /* 0130 */  0xB1, 0x03, 0xB2, 0x5F, 0x01, 0x08, 0xC1, 0xCB,  // ..._....
                /* 0138 */  0x1C, 0x91, 0x9C, 0x22, 0x68, 0x4C, 0x9E, 0xDC,  // ..."hL..
                /* 0140 */  0xAB, 0x41, 0x88, 0x20, 0x27, 0x75, 0xC8, 0x2F,  // .A. 'u./
                /* 0148 */  0x0B, 0x0C, 0xF1, 0x35, 0xC1, 0xD3, 0xAF, 0x10,  // ...5....
                /* 0150 */  0x50, 0x22, 0x47, 0x80, 0x12, 0x33, 0x02, 0x14,  // P"G..3..
                /* 0158 */  0x5E, 0xE4, 0x90, 0x67, 0x73, 0x04, 0xC7, 0x13,  // ^..gs...
                /* 0160 */  0xE5, 0x24, 0x0E, 0xC8, 0x47, 0x07, 0x23, 0x1C,  // .$..G.#.
                /* 0168 */  0x42, 0xB9, 0x27, 0x08, 0xA2, 0x79, 0x46, 0x9A,  // B.'..yF.
                /* 0170 */  0xC6, 0x39, 0xBD, 0x0D, 0x98, 0xA0, 0xD6, 0xC7,  // .9......
                /* 0178 */  0x81, 0x46, 0xEA, 0x90, 0xE7, 0x03, 0xD9, 0x58,  // .F.....X
                /* 0180 */  0xAA, 0x47, 0x4A, 0xA5, 0x02, 0x69, 0x04, 0x35,  // .GJ..i.5
                /* 0188 */  0x0A, 0xB0, 0x3A, 0x09, 0x11, 0x58, 0x24, 0x90,  // ..:..X$.
                /* 0190 */  0x8E, 0x1A, 0x5C, 0x1E, 0x85, 0xC4, 0x41, 0x68,  // ..\...Ah
                /* 0198 */  0x34, 0x86, 0xB3, 0x1C, 0x38, 0x0A, 0xE2, 0x31,  // 4...8..1
                /* 01A0 */  0x38, 0x2A, 0x84, 0x9C, 0x9C, 0x03, 0x50, 0x53,  // 8*....PS
                /* 01A8 */  0x4A, 0x50, 0xE9, 0x74, 0x24, 0x7C, 0x46, 0x1A,  // JP.t$|F.
                /* 01B0 */  0xD3, 0xE1, 0x9C, 0xD9, 0x71, 0x1A, 0x27, 0x10,  // ....q.'.
                /* 01B8 */  0x47, 0x3B, 0xAC, 0x50, 0x87, 0x15, 0xEA, 0xB9,  // G;.P....
                /* 01C0 */  0xC1, 0x17, 0x02, 0x83, 0xBD, 0x3B, 0x18, 0xEA,  // .....;..
                /* 01C8 */  0xD4, 0x62, 0x7A, 0x6C, 0x0F, 0x1E, 0x86, 0x89,  // .bzl....
                /* 01D0 */  0x86, 0x21, 0x88, 0xF5, 0xF4, 0x00, 0x0B, 0xF0,  // .!......
                /* 01D8 */  0x0C, 0x4E, 0xD3, 0xD3, 0x32, 0x9C, 0x21, 0x0D,  // .N..2.!.
                /* 01E0 */  0xC7, 0x6F, 0x05, 0xAF, 0x03, 0x26, 0x60, 0xA7,  // .o...&`.
                /* 01E8 */  0x03, 0xF8, 0x37, 0x0F, 0x4F, 0xE5, 0x14, 0x1E,  // ..7.O...
                /* 01F0 */  0x37, 0x9E, 0x35, 0x12, 0x58, 0xE0, 0xE9, 0x00,  // 7.5.X...
                /* 01F8 */  0xCA, 0xFF, 0xFF, 0x74, 0x80, 0x07, 0xF2, 0x6D,  // ...t...m
                /* 0200 */  0xC0, 0x63, 0x7D, 0x22, 0x60, 0x73, 0x08, 0x11,  // .c}"`s..
                /* 0208 */  0x26, 0x9A, 0xE1, 0x31, 0x82, 0x4F, 0x11, 0x54,  // &..1.O.T
                /* 0210 */  0xD6, 0xB8, 0x50, 0x07, 0x04, 0x5F, 0x14, 0x18,  // ..P.._..
                /* 0218 */  0xF6, 0x31, 0x1F, 0x4D, 0xD1, 0x33, 0xD4, 0xA4,  // .1.M.3..
                /* 0220 */  0x0F, 0xEA, 0x45, 0xC2, 0x4E, 0x35, 0x5A, 0xD5,  // ..E.N5Z.
                /* 0228 */  0x09, 0xEB, 0x91, 0x72, 0x58, 0xA3, 0x85, 0x3D,  // ...rX..=
                /* 0230 */  0x6B, 0xC3, 0xBE, 0x80, 0x78, 0x66, 0xBE, 0x00,  // k...xf..
                /* 0238 */  0x78, 0xB4, 0x2C, 0xC3, 0x3A, 0x74, 0x44, 0xC0,  // x.,.:tD.
                /* 0240 */  0x29, 0x01, 0xD2, 0x6C, 0x8F, 0xE8, 0x98, 0x0E,  // )..l....
                /* 0248 */  0x89, 0x69, 0x00, 0xD2, 0xD9, 0x86, 0xA7, 0x27,  // .i.....'
                /* 0250 */  0x51, 0xF2, 0x31, 0x52, 0x38, 0x67, 0x3D, 0x28,  // Q.1R8g=(
                /* 0258 */  0x50, 0x10, 0x03, 0x3A, 0xC8, 0x11, 0x01, 0x7D,  // P..:...}
                /* 0260 */  0xA8, 0xF1, 0x18, 0x8E, 0xE5, 0x9D, 0xC6, 0x27,  // .......'
                /* 0268 */  0x14, 0xCF, 0xF5, 0x25, 0x80, 0x0D, 0xEE, 0x18,  // ...%....
                /* 0270 */  0xD9, 0xB8, 0x3C, 0x34, 0xAE, 0x01, 0x42, 0x17,  // ..<4..B.
                /* 0278 */  0x00, 0xA3, 0x5B, 0xCD, 0x58, 0x51, 0x60, 0x3E,  // ..[.XQ`>
                /* 0280 */  0x12, 0x60, 0x74, 0xDD, 0x08, 0x40, 0xA6, 0xEF,  // .`t..@..
                /* 0288 */  0x44, 0x00, 0x72, 0x74, 0x2E, 0xE1, 0x7A, 0x81,  // D.rt..z.
                /* 0290 */  0xBA, 0x16, 0x79, 0xB2, 0x06, 0xF1, 0x64, 0x1D,  // ..y...d.
                /* 0298 */  0x68, 0xB2, 0xE8, 0x0B, 0x84, 0x4F, 0x1F, 0x9E,  // h....O..
                /* 02A0 */  0x2C, 0xE6, 0x84, 0xC3, 0x20, 0x9E, 0x4B, 0xFC,  // ,... .K.
                /* 02A8 */  0xFF, 0xBF, 0x51, 0x80, 0x7D, 0x38, 0xBE, 0x51,  // ..Q.}8.Q
                /* 02B0 */  0x00, 0x9E, 0x24, 0x3A, 0x95, 0xEA, 0xF4, 0x46,  // ..$:...F
                /* 02B8 */  0x01, 0xAE, 0x00, 0xAB, 0xA0, 0xC7, 0x00, 0x4B,  // .......K
                /* 02C0 */  0x86, 0x41, 0xDD, 0xB8, 0x00, 0x2B, 0x37, 0x82,  // .A...+7.
                /* 02C8 */  0x97, 0xA0, 0x17, 0x81, 0x27, 0x80, 0x18, 0x41,  // ....'..A
                /* 02D0 */  0x7C, 0xE6, 0x7A, 0xD4, 0x3A, 0xF9, 0x40, 0x3E,  // |.z.:.@>
                /* 02D8 */  0x0D, 0x3C, 0x74, 0xF9, 0xDC, 0xC5, 0x50, 0x9E,  // .<t...P.
                /* 02E0 */  0xB5, 0x1E, 0xBA, 0x42, 0x71, 0x90, 0x58, 0xEF,  // ...Bq.X.
                /* 02E8 */  0x01, 0xFF, 0xFF, 0x47, 0x2F, 0x43, 0x05, 0x0B,  // ...G/C..
                /* 02F0 */  0x13, 0xC4, 0x50, 0x6F, 0x5C, 0x4C, 0xFE, 0x33,  // ..Po\L.3
                /* 02F8 */  0x40, 0x37, 0x0D, 0xDF, 0xB8, 0x00, 0x7E, 0x44,  // @7....~D
                /* 0300 */  0x38, 0x8B, 0xA0, 0xA1, 0x0D, 0x7A, 0x36, 0x3E,  // 8....z6>
                /* 0308 */  0x43, 0xF8, 0xE6, 0xC1, 0x8E, 0x16, 0x5C, 0xD4,  // C.....\.
                /* 0310 */  0xD1, 0x02, 0x75, 0x68, 0xF0, 0x79, 0x81, 0x21,  // ..uh.y.!
                /* 0318 */  0xBE, 0x92, 0x18, 0xE2, 0xC9, 0x82, 0x1D, 0x42,  // .......B
                /* 0320 */  0xC0, 0x79, 0x25, 0x03, 0xEF, 0xD0, 0xD8, 0xFF,  // .y%.....
                /* 0328 */  0x7F, 0x0A, 0xBE, 0x92, 0x01, 0x93, 0x31, 0xE1,  // ......1.
                /* 0330 */  0x4E, 0x0C, 0x1E, 0x02, 0x1F, 0xC0, 0x13, 0xD9,  // N.......
                /* 0338 */  0xF9, 0xF9, 0x84, 0x72, 0x56, 0xB8, 0x11, 0xF3,  // ...rV...
                /* 0340 */  0x29, 0xE1, 0x06, 0x80, 0x51, 0x68, 0xD3, 0xA7,  // )...Qh..
                /* 0348 */  0x46, 0xA3, 0x56, 0x0D, 0xCA, 0xD4, 0x28, 0xD3,  // F.V...(.
                /* 0350 */  0xA0, 0x56, 0x9F, 0x4A, 0x8D, 0x19, 0x3B, 0x1E,  // .V.J..;.
                /* 0358 */  0x38, 0xC6, 0xC2, 0x75, 0x02, 0xB0, 0x88, 0x47,  // 8..u...G
                /* 0360 */  0x80, 0x40, 0x1C, 0x88, 0x42, 0x46, 0x40, 0x14,  // .@..BF@.
                /* 0368 */  0x0F, 0x44, 0x40, 0x16, 0x65, 0x01, 0x88, 0x29,  // .D@.e..)
                /* 0370 */  0x04, 0x11, 0x90, 0x35, 0xBD, 0x30, 0x04, 0x44,  // ...5.0.D
                /* 0378 */  0x40, 0x04, 0xE4, 0x24, 0xEB, 0x10, 0x88, 0x75,  // @..$...u
                /* 0380 */  0x98, 0x00, 0xA2, 0x20, 0xF4, 0xFF, 0x0F         // ... ...
            })
            Method (SFUN, 0, NotSerialized)
            {
                Local0 = One
                Return (Local0)
            }

            Method (DSTS, 1, Serialized)
            {
                Local0 = (Arg0 & 0xFFFFFFFF)
                Switch (Local0)
                {
                    Case (0x00130013)
                    {
                        Local1 = 0x00010000
                    }
                    Case (0x00130014)
                    {
                        Local1 = 0x00010000
                    }
                    Default
                    {
                        Local1 = Zero
                    }

                }

                Return (Local1)
            }
        }
    }

    Scope (_SB)
    {
        Name (MYAS, Zero)
        Device (ASUP)
        {
            Name (_HID, "ASUS2018")  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MYAS == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }
    }

    Scope (\)
    {
        Device (RMTW)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AsusMbSwInterface")  // _UID: Unique ID
            Name (_WDG, Buffer (0x3C)
            {
                /* 0000 */  0xD0, 0x5E, 0x84, 0x97, 0x6D, 0x4E, 0xDE, 0x11,  // .^..mN..
                /* 0008 */  0x8A, 0x39, 0x08, 0x00, 0x20, 0x0C, 0x9A, 0x66,  // .9.. ..f
                /* 0010 */  0x42, 0x43, 0x01, 0x02, 0x72, 0x0F, 0xBC, 0xAB,  // BC..r...
                /* 0018 */  0xA1, 0x8E, 0xD1, 0x11, 0x00, 0xA0, 0xC9, 0x06,  // ........
                /* 0020 */  0x29, 0x10, 0x00, 0x00, 0xD2, 0x00, 0x01, 0x08,  // ).......
                /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0038 */  0x4D, 0x4F, 0x01, 0x00                           // MO..
            })
            Method (WMBC, 3, Serialized)
            {
                Switch (Arg1)
                {
                    Case (0x53564544)
                    {
                        Return (DEVS (Arg2))
                    }
                    Case (0x53544344)
                    {
                        Return (DSTS (Arg2))
                    }
                    Case (0x4C455252)
                    {
                        Return (LERR (Arg2))
                    }
                    Case (0x47424F44)
                    {
                        Return (GBOD (Arg2))
                    }
                    Case (0x53424F44)
                    {
                        Return (SBOD (Arg2))
                    }
                    Case (0x47424F4E)
                    {
                        Return (GBON (Arg2))
                    }
                    Case (0x53415057)
                    {
                        Return (SAPW (Arg2))
                    }
                    Case (0x53555057)
                    {
                        Return (SUPW (Arg2))
                    }
                    Case (0x53555058)
                    {
                        Return (GLBN (Arg2))
                    }
                    Case (0x53555059)
                    {
                        Return (ISLG (Arg2))
                    }
                    Case (0x53555060)
                    {
                        Return (GLBO (Arg2))
                    }
                    Case (0x53555061)
                    {
                        Return (SLBO (Arg2))
                    }
                    Case (0x53424F47)
                    {
                        Return (SBOG (Arg2))
                    }
                    Case (0x4C444654)
                    {
                        Return (LDFT ())
                    }
                    Case (0x53465442)
                    {
                        Return (SFTB (Arg2))
                    }
                    Case (0x53444654)
                    {
                        Return (SDFT (Arg2))
                    }
                    Case (0x5346544D)
                    {
                        Return (SFTM ())
                    }
                    Case (0x4443544C)
                    {
                        Return (DCTL (Arg2))
                    }
                    Case (0x4746414E)
                    {
                        Return (GFAN (Arg2))
                    }
                    Case (0x4446414E)
                    {
                        Return (SFAN (Arg2))
                    }
                    Case (0x47464356)
                    {
                        Return (GFCV (Arg2))
                    }
                    Case (0x44464356)
                    {
                        Return (SFCV (Arg2))
                    }
                    Case (0x43455057)
                    {
                        Return (CKPW (Arg2))
                    }
                    Case (0x47544F44)
                    {
                        Return (GTOD (Arg2))
                    }
                    Case (0x53544F44)
                    {
                        Return (STOD (Arg2))
                    }
                    Case (0x4F505945)
                    {
                        Return (EYPO ())
                    }
                    Case (0x54505945)
                    {
                        Return (EYPT ())
                    }
                    Case (0x45505945)
                    {
                        Return (EYPE ())
                    }
                    Case (0x56505945)
                    {
                        Return (EYPF ())
                    }
                    Case (0xFFFFFFFF)
                    {
                        Return (Zero)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }

                Return (Zero)
            }

            Name (ECD2, Zero)
            Name (EID2, Zero)
            Method (WED2, 1, NotSerialized)
            {
                ECD2 = Arg0
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                If ((Arg0 == 0xD2))
                {
                    Return (EID2) /* \RMTW.EID2 */
                }

                Return (Zero)
            }

            Method (AMWR, 1, Serialized)
            {
                Local1 = Zero
                If (ECD2)
                {
                    EID2 = Arg0
                    Notify (RMTW, 0xD2) // Hardware-Specific
                    Local1 = One
                }
                Else
                {
                }

                Return (Local1)
            }

            Method (AMWN, 1, Serialized)
            {
                Local0 = AMWR (Arg0)
                Return (Local0)
            }

            Name (WQMO, Buffer (0x1912)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x02, 0x19, 0x00, 0x00, 0xBA, 0xC0, 0x00, 0x00,  // ........
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x98, 0xA3, 0x9A, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x05, 0x10, 0x4E, 0x46, 0x21, 0x02, 0x85,  // ...NF!..
                /* 0028 */  0x86, 0x50, 0x1C, 0x22, 0xC3, 0x50, 0x09, 0x10,  // .P.".P..
                /* 0030 */  0x92, 0x03, 0x21, 0x17, 0x4C, 0x4C, 0x80, 0x08,  // ..!.LL..
                /* 0038 */  0x08, 0x79, 0x15, 0x60, 0x53, 0x80, 0x49, 0x10,  // .y.`S.I.
                /* 0040 */  0xF5, 0xEF, 0x0F, 0x51, 0x12, 0x1C, 0x4A, 0x08,  // ...Q..J.
                /* 0048 */  0x84, 0x24, 0x0A, 0x30, 0x2F, 0x40, 0xB7, 0x00,  // .$.0/@..
                /* 0050 */  0xC3, 0x02, 0x6C, 0x0B, 0x30, 0x2D, 0xC0, 0x31,  // ..l.0-.1
                /* 0058 */  0x24, 0x95, 0x06, 0x4E, 0x09, 0x2C, 0x05, 0x42,  // $..N.,.B
                /* 0060 */  0x42, 0x05, 0x28, 0x17, 0xE0, 0x5B, 0x80, 0x76,  // B.(..[.v
                /* 0068 */  0x44, 0x49, 0x16, 0x60, 0x19, 0x46, 0x04, 0x1E,  // DI.`.F..
                /* 0070 */  0x45, 0x64, 0xA3, 0x71, 0x82, 0xB2, 0xA1, 0x51,  // Ed.q...Q
                /* 0078 */  0x32, 0x20, 0xE4, 0x59, 0x80, 0x75, 0x60, 0x42,  // 2 .Y.u`B
                /* 0080 */  0x60, 0xF7, 0x02, 0xCC, 0x09, 0xF0, 0x26, 0x40,  // `.....&@
                /* 0088 */  0xDC, 0x30, 0x64, 0x6D, 0x00, 0x82, 0x2A, 0x4C,  // .0dm..*L
                /* 0090 */  0x80, 0x2D, 0x18, 0xA1, 0xD4, 0x06, 0x23, 0x94,  // .-....#.
                /* 0098 */  0xC6, 0x10, 0x34, 0x0C, 0xA3, 0x44, 0x3C, 0xA4,  // ..4..D<.
                /* 00A0 */  0xCE, 0x60, 0x85, 0x12, 0x31, 0x4C, 0x88, 0x08,  // .`..1L..
                /* 00A8 */  0x95, 0x61, 0x90, 0x61, 0x85, 0x8A, 0x16, 0x37,  // .a.a...7
                /* 00B0 */  0x42, 0xFB, 0x83, 0x20, 0xD1, 0x56, 0xAC, 0xA1,  // B.. .V..
                /* 00B8 */  0x3A, 0xD2, 0x68, 0x50, 0xC3, 0x4B, 0x70, 0xB8,  // :.hP.Kp.
                /* 00C0 */  0x1E, 0xEA, 0x39, 0x76, 0x2E, 0x40, 0x3A, 0xB0,  // ..9v.@:.
                /* 00C8 */  0x40, 0x82, 0x9F, 0x45, 0x9D, 0xE3, 0x24, 0x20,  // @..E..$ 
                /* 00D0 */  0x09, 0x8C, 0x95, 0xA0, 0x83, 0x81, 0x43, 0x71,  // ......Cq
                /* 00D8 */  0x0D, 0xA8, 0x19, 0x1F, 0x2F, 0x13, 0x04, 0x87,  // ..../...
                /* 00E0 */  0x1A, 0xA2, 0x07, 0x1A, 0xEE, 0x04, 0x0E, 0x91,  // ........
                /* 00E8 */  0x01, 0x7A, 0x4E, 0x47, 0x83, 0x39, 0x00, 0xD8,  // .zNG.9..
                /* 00F0 */  0xE1, 0x64, 0x74, 0x0F, 0x28, 0x55, 0x80, 0xD9,  // .dt.(U..
                /* 00F8 */  0x31, 0xCB, 0x22, 0x90, 0xC6, 0x63, 0xE8, 0xD3,  // 1."..c..
                /* 0100 */  0x3D, 0x9F, 0x13, 0x4E, 0x60, 0xF9, 0x83, 0x40,  // =..N`..@
                /* 0108 */  0x8D, 0xCC, 0xD0, 0x36, 0x38, 0x2D, 0x61, 0x86,  // ...68-a.
                /* 0110 */  0x3C, 0xFC, 0xC3, 0x62, 0x62, 0x4F, 0x09, 0x74,  // <..bbO.t
                /* 0118 */  0x3C, 0xF0, 0xFE, 0xFF, 0xE3, 0x01, 0x8F, 0xE2,  // <.......
                /* 0120 */  0x33, 0x81, 0x10, 0x5E, 0x09, 0x62, 0x7B, 0x40,  // 3..^.b{@
                /* 0128 */  0xCF, 0x09, 0x06, 0xC6, 0x0E, 0xC8, 0x7E, 0x05,  // ......~.
                /* 0130 */  0x20, 0x04, 0x2F, 0x73, 0x44, 0x72, 0x8A, 0xA0,  //  ./sDr..
                /* 0138 */  0x31, 0x19, 0xA3, 0x55, 0x08, 0x0D, 0x21, 0xB4,  // 1..U..!.
                /* 0140 */  0x21, 0xCE, 0x2E, 0xFE, 0xC1, 0x1B, 0xE6, 0xDC,  // !.......
                /* 0148 */  0x4D, 0x50, 0xE4, 0x08, 0x50, 0x62, 0x46, 0x80,  // MP..PbF.
                /* 0150 */  0x3A, 0x06, 0x44, 0x0F, 0x7D, 0x36, 0xD1, 0x8F,  // :.D.}6..
                /* 0158 */  0x27, 0xCA, 0x49, 0x1C, 0x90, 0xCF, 0x0C, 0x46,  // '.I....F
                /* 0160 */  0x08, 0x5E, 0xEE, 0x21, 0x81, 0x68, 0x9E, 0x83,  // .^.!.h..
                /* 0168 */  0x4E, 0x0C, 0xE7, 0x74, 0x08, 0x4C, 0x69, 0x2F,  // N..t.Li/
                /* 0170 */  0x88, 0xF2, 0x40, 0x24, 0x6D, 0xA9, 0xB2, 0xB1,  // ..@$m...
                /* 0178 */  0x54, 0x0F, 0x82, 0x06, 0x3C, 0x23, 0x08, 0xD7,  // T...<#..
                /* 0180 */  0xF7, 0x08, 0x1F, 0x0E, 0x3C, 0x8D, 0xE3, 0xF6,  // ....<...
                /* 0188 */  0x14, 0x1E, 0x22, 0x1C, 0x0A, 0x4E, 0xA7, 0x0D,  // .."..N..
                /* 0190 */  0x1E, 0x87, 0x42, 0x61, 0x20, 0x34, 0x20, 0x1F,  // ..Ba 4 .
                /* 0198 */  0x03, 0x08, 0x1C, 0x05, 0xF1, 0x29, 0xC1, 0x61,  // .....).a
                /* 01A0 */  0x20, 0xE4, 0xE4, 0x28, 0x80, 0x3A, 0x5E, 0x78,  //  ..(.:^x
                /* 01A8 */  0x18, 0xD8, 0x3B, 0x05, 0x13, 0x7E, 0x62, 0x80,  // ..;..~b.
                /* 01B0 */  0x76, 0x39, 0xF0, 0x51, 0x80, 0xC3, 0x19, 0xD2,  // v9.Q....
                /* 01B8 */  0x70, 0xFC, 0x26, 0xF0, 0x0A, 0x60, 0x02, 0x76,  // p.&..`.v
                /* 01C0 */  0x22, 0x80, 0x7F, 0xDB, 0xF0, 0xF8, 0x7D, 0xC4,  // ".....}.
                /* 01C8 */  0x78, 0xBE, 0x48, 0xE0, 0x38, 0xC3, 0x42, 0x8F,  // x.H.8.B.
                /* 01D0 */  0xD6, 0x13, 0xE5, 0xA3, 0x3A, 0xA7, 0x23, 0x8F,  // ....:.#.
                /* 01D8 */  0xF2, 0x62, 0x61, 0x02, 0x8F, 0x0B, 0xDE, 0xFF,  // .ba.....
                /* 01E0 */  0x7F, 0x5C, 0xE0, 0x18, 0xB3, 0xC7, 0x05, 0x3E,  // .\.....>
                /* 01E8 */  0x81, 0x07, 0x07, 0x50, 0x00, 0xF9, 0xA2, 0x60,  // ...P...`
                /* 01F0 */  0xA5, 0x87, 0x05, 0x3A, 0x87, 0x10, 0x61, 0xA2,  // ...:..a.
                /* 01F8 */  0x19, 0x1E, 0x23, 0xF8, 0x80, 0x41, 0x65, 0x8D,  // ..#..Ae.
                /* 0200 */  0x0B, 0x35, 0x54, 0x9F, 0x5C, 0x18, 0xF6, 0xFB,  // .5T.\...
                /* 0208 */  0xC0, 0xD1, 0x14, 0x7D, 0x6D, 0xD0, 0x81, 0xE0,  // ...}m...
                /* 0210 */  0xA0, 0x9E, 0x08, 0x2C, 0xD1, 0xA2, 0x56, 0xA7,  // ...,..V.
                /* 0218 */  0xB0, 0x1E, 0x29, 0x87, 0x35, 0x5A, 0xD8, 0x03,  // ..).5Z..
                /* 0220 */  0x7E, 0xBE, 0xF0, 0x7D, 0x82, 0x5F, 0x5D, 0x3C,  // ~..}._]<
                /* 0228 */  0x5A, 0x96, 0xE4, 0xF4, 0x80, 0x1A, 0xB0, 0xF5,  // Z.......
                /* 0230 */  0x00, 0xE9, 0x9C, 0x80, 0xBD, 0xAC, 0x30, 0x88,  // ......0.
                /* 0238 */  0x13, 0x8D, 0x72, 0x4C, 0x02, 0xD4, 0xD1, 0x87,  // ..rL....
                /* 0240 */  0x67, 0x27, 0x51, 0xF2, 0x71, 0xD2, 0x01, 0x38,  // g'Q.q..8
                /* 0248 */  0xEB, 0xD8, 0x29, 0x88, 0x01, 0x1D, 0xE4, 0xF8,  // ..).....
                /* 0250 */  0x00, 0x9A, 0x01, 0x1E, 0x27, 0x1B, 0x9B, 0x87,  // ....'...
                /* 0258 */  0xC7, 0x35, 0x9C, 0x0B, 0x10, 0xE0, 0xD5, 0x8C,  // .5......
                /* 0260 */  0x17, 0x05, 0xE6, 0xD3, 0x03, 0x46, 0xD7, 0xAD,  // .....F..
                /* 0268 */  0x00, 0x64, 0xFA, 0x4E, 0x05, 0x50, 0xFE, 0xFF,  // .d.N.P..
                /* 0270 */  0xA7, 0x02, 0x30, 0xA1, 0xF3, 0x8D, 0x7A, 0xB2,  // ..0...z.
                /* 0278 */  0x3C, 0xF2, 0x64, 0x29, 0x88, 0x27, 0xEB, 0x4B,  // <.d).'.K
                /* 0280 */  0x05, 0x70, 0x38, 0x23, 0x9C, 0xDD, 0x63, 0x8A,  // .p8#..c.
                /* 0288 */  0x2F, 0x15, 0x80, 0x48, 0x87, 0x52, 0x2F, 0x15,  // /..H.R/.
                /* 0290 */  0x20, 0x4B, 0xB3, 0x0A, 0x5D, 0x2A, 0x38, 0x87,  //  K..]*8.
                /* 0298 */  0x35, 0x01, 0xE9, 0x6E, 0xC4, 0xEF, 0x14, 0x46,  // 5..n...F
                /* 02A0 */  0x7E, 0x26, 0x7A, 0xA6, 0x30, 0x4C, 0x90, 0xD7,  // ~&z.0L..
                /* 02A8 */  0xA8, 0xE8, 0xBE, 0x35, 0x08, 0x52, 0xB7, 0x0A,  // ...5.R..
                /* 02B0 */  0x9E, 0x9E, 0x42, 0xBA, 0x4F, 0x06, 0x28, 0xA5,  // ..B.O.(.
                /* 02B8 */  0x77, 0x1C, 0x0A, 0xE2, 0xC1, 0x39, 0xC4, 0xC9,  // w....9..
                /* 02C0 */  0x00, 0xF9, 0xFF, 0x27, 0x78, 0x67, 0xF2, 0x1C,  // ...'xg..
                /* 02C8 */  0x8E, 0xE9, 0x40, 0x9E, 0x9E, 0xD8, 0x9D, 0x02,  // ..@.....
                /* 02D0 */  0x78, 0x46, 0x18, 0x12, 0x1A, 0xDD, 0x67, 0x87,  // xF....g.
                /* 02D8 */  0xF3, 0x7C, 0xE9, 0x00, 0xF3, 0x4C, 0x7D, 0xE9,  // .|...L}.
                /* 02E0 */  0x00, 0xCE, 0x21, 0xEE, 0x02, 0x28, 0xD9, 0x77,  // ..!..(.w
                /* 02E8 */  0x01, 0x0A, 0xE2, 0x89, 0x39, 0xCA, 0x4C, 0xD1,  // ....9.L.
                /* 02F0 */  0x33, 0x31, 0xFE, 0xA3, 0xC0, 0xCB, 0xC0, 0x03,  // 31......
                /* 02F8 */  0x16, 0xE6, 0xCA, 0x01, 0xEE, 0xCB, 0x82, 0xAF,  // ........
                /* 0300 */  0x1C, 0xE0, 0x3B, 0xD6, 0xE0, 0xFE, 0xFF, 0x17,  // ..;.....
                /* 0308 */  0x06, 0x7E, 0x1B, 0x78, 0xD2, 0x31, 0xC4, 0x41,  // .~.x.1.A
                /* 0310 */  0x81, 0x1F, 0xCA, 0xD7, 0x12, 0xC0, 0x93, 0x52,  // .......R
                /* 0318 */  0xA7, 0xE7, 0xCD, 0xD7, 0x12, 0x70, 0x45, 0xB9,  // .....pE.
                /* 0320 */  0x96, 0xA0, 0xCE, 0x9A, 0x16, 0x04, 0x24, 0xEF,  // ......$.
                /* 0328 */  0x97, 0x42, 0x82, 0xE9, 0x73, 0x09, 0x3C, 0x82,  // .B..s.<.
                /* 0330 */  0xF1, 0x4F, 0x4F, 0xA8, 0xE0, 0x14, 0x8A, 0x7E,  // .OO....~
                /* 0338 */  0x78, 0x40, 0x85, 0x3D, 0x3C, 0x50, 0x10, 0x1F,  // x@.=<P..
                /* 0340 */  0x27, 0x7D, 0x2F, 0x01, 0xBE, 0xFF, 0xFF, 0x7B,  // '}/....{
                /* 0348 */  0x09, 0xE0, 0x26, 0xC3, 0x88, 0xD0, 0x2A, 0x8E,  // ..&...*.
                /* 0350 */  0x16, 0xC8, 0x19, 0x81, 0xF5, 0x44, 0xE0, 0x93,  // .....D..
                /* 0358 */  0x0B, 0x70, 0x0E, 0x7F, 0x74, 0x43, 0xC5, 0x9D,  // .p..tC..
                /* 0360 */  0x33, 0x05, 0xF1, 0xA0, 0x7C, 0x72, 0x01, 0x7E,  // 3...|r.~
                /* 0368 */  0xA7, 0x12, 0xB8, 0xFF, 0xFF, 0x53, 0x09, 0xE0,  // .....S..
                /* 0370 */  0xC3, 0xEB, 0xA9, 0x04, 0x74, 0x77, 0x2F, 0x30,  // ....tw/0
                /* 0378 */  0x5D, 0x4D, 0xCE, 0x24, 0x5A, 0x70, 0xDF, 0xBD,  // ]M.$Zp..
                /* 0380 */  0x00, 0x2E, 0xFC, 0xFF, 0xEF, 0x5E, 0x00, 0xFF,  // .....^..
                /* 0388 */  0xFF, 0xFF, 0x77, 0x2F, 0x90, 0x79, 0xBD, 0x7B,  // ..w/.y.{
                /* 0390 */  0x01, 0xAF, 0x73, 0x09, 0xE6, 0xEE, 0x05, 0xF0,  // ..s.....
                /* 0398 */  0xED, 0xFF, 0x7F, 0xF7, 0x02, 0x08, 0x7C, 0x2A,  // ......|*
                /* 03A0 */  0x01, 0x59, 0xB6, 0x53, 0x09, 0x5A, 0xA1, 0x83,  // .Y.S.Z..
                /* 03A8 */  0xFF, 0xFF, 0x39, 0x1A, 0xE6, 0x04, 0x0E, 0xE5,  // ..9.....
                /* 03B0 */  0x09, 0xA3, 0x6B, 0x58, 0xA2, 0xE7, 0xF2, 0x85,  // ..kX....
                /* 03B8 */  0x52, 0x02, 0xA3, 0xCB, 0x17, 0xC0, 0xB6, 0x40,  // R......@
                /* 03C0 */  0x77, 0x01, 0x54, 0x84, 0xBB, 0x00, 0x05, 0xF1,  // w.T.....
                /* 03C8 */  0xE5, 0x0B, 0x38, 0xFC, 0xFF, 0x2F, 0x5F, 0xC0,  // ..8../_.
                /* 03D0 */  0x29, 0x14, 0x84, 0x8C, 0xDC, 0x24, 0xE8, 0xE5,  // )....$..
                /* 03D8 */  0x0B, 0xCE, 0xC5, 0xC1, 0xF7, 0x23, 0x0F, 0x0A,  // .....#..
                /* 03E0 */  0x5C, 0x83, 0x39, 0xEF, 0x62, 0x4F, 0x8A, 0xF4,  // \.9.bO..
                /* 03E8 */  0x7A, 0x02, 0xF7, 0xCE, 0xE1, 0xB1, 0x81, 0x43,  // z......C
                /* 03F0 */  0xDC, 0x15, 0x0C, 0xD8, 0xBB, 0xBC, 0x9D, 0x80,  // ........
                /* 03F8 */  0x4B, 0xDB, 0xDA, 0x75, 0x3B, 0xC1, 0x25, 0x3C,  // K..u;.%<
                /* 0400 */  0x4E, 0x43, 0x3E, 0x9E, 0x60, 0xF2, 0xDC, 0x4E,  // NC>.`..N
                /* 0408 */  0x50, 0x49, 0x60, 0x94, 0x85, 0x44, 0x47, 0x08,  // PI`..DG.
                /* 0410 */  0xAE, 0xFE, 0x26, 0x46, 0xFF, 0xFF, 0x20, 0xB6,  // ..&F.. .
                /* 0418 */  0x70, 0x3B, 0x01, 0xE8, 0x30, 0x66, 0x38, 0x23,  // p;..0f8#
                /* 0420 */  0x7A, 0xAF, 0x30, 0xA4, 0xCF, 0x60, 0xC0, 0x34,  // z.0..`.4
                /* 0428 */  0xD0, 0x11, 0x04, 0x7D, 0x49, 0xC3, 0x26, 0xB8,  // ...}I.&.
                /* 0430 */  0x81, 0xD0, 0x19, 0xC1, 0xBB, 0x80, 0xC0, 0x9D,  // ........
                /* 0438 */  0x18, 0xE6, 0xFF, 0x3F, 0x31, 0xDC, 0x01, 0x04,  // ...?1...
                /* 0440 */  0x7C, 0x67, 0x35, 0xC0, 0xE0, 0x01, 0xC0, 0x67,  // |g5....g
                /* 0448 */  0x35, 0x40, 0xD5, 0xED, 0x05, 0x64, 0xD7, 0x14,  // 5@...d..
                /* 0450 */  0xDF, 0x5E, 0xF8, 0x80, 0xAD, 0x01, 0x48, 0xC7,  // .^....H.
                /* 0458 */  0x87, 0xD3, 0x3F, 0x8E, 0xA3, 0x38, 0xAF, 0xD3,  // ..?..8..
                /* 0460 */  0x78, 0x81, 0x89, 0x51, 0xB3, 0x80, 0xFF, 0xFF,  // x..Q....
                /* 0468 */  0x29, 0xC3, 0x13, 0xEE, 0x0D, 0x50, 0xA9, 0xAF,  // )....P..
                /* 0470 */  0x51, 0x74, 0x54, 0xCE, 0x4B, 0xA2, 0xD4, 0xC7,  // QtT.K...
                /* 0478 */  0x02, 0x54, 0xCE, 0x63, 0x01, 0x05, 0x31, 0xA0,  // .T.c..1.
                /* 0480 */  0x2F, 0x1E, 0x56, 0x72, 0xF1, 0x40, 0x0F, 0xE2,  // /.Vr.@..
                /* 0488 */  0x64, 0xDF, 0x50, 0x7D, 0xF1, 0x00, 0xF3, 0xDD,  // d.P}....
                /* 0490 */  0x05, 0x5C, 0xC6, 0x6E, 0x3D, 0x2F, 0x14, 0x40,  // .\.n=/.@
                /* 0498 */  0x24, 0xF8, 0x54, 0x51, 0x51, 0xA7, 0x4A, 0x41,  // $.TQQ.JA
                /* 04A0 */  0x3C, 0x55, 0xC7, 0x38, 0x91, 0x78, 0xAA, 0xE8,  // <U.8.x..
                /* 04A8 */  0x93, 0xD0, 0xB9, 0xBD, 0x91, 0xF0, 0xF3, 0xC0,  // ........
                /* 04B0 */  0xFB, 0x04, 0x98, 0x87, 0xE2, 0xC3, 0x15, 0xF0,  // ........
                /* 04B8 */  0xFF, 0xFF, 0x5F, 0x27, 0xC0, 0xA1, 0xD0, 0xA7,  // .._'....
                /* 04C0 */  0x49, 0xA5, 0xD7, 0x09, 0x70, 0x09, 0xBA, 0x4E,  // I...p..N
                /* 04C8 */  0xA0, 0x63, 0x2D, 0x55, 0xD7, 0x09, 0x78, 0xC3,  // .c-U..x.
                /* 04D0 */  0x74, 0x90, 0xEB, 0x04, 0x3D, 0xE6, 0xF1, 0x00,  // t...=...
                /* 04D8 */  0x87, 0x3D, 0x94, 0x64, 0x38, 0x0A, 0xE2, 0xB1,  // .=.d8...
                /* 04E0 */  0xF9, 0x4E, 0xEE, 0xEB, 0x04, 0xDC, 0x3B, 0x0B,  // .N....;.
                /* 04E8 */  0xBC, 0xEB, 0x04, 0x3B, 0x14, 0xC0, 0x26, 0xF0,  // ...;..&.
                /* 04F0 */  0x9D, 0x05, 0x3C, 0x07, 0x0A, 0x76, 0x70, 0x00,  // ..<..vp.
                /* 04F8 */  0xF3, 0xA0, 0xC0, 0x71, 0x70, 0x00, 0x8E, 0xFF,  // ...qp...
                /* 0500 */  0xFF, 0x83, 0x03, 0xD0, 0xB8, 0xD1, 0x82, 0x4C,  // .......L
                /* 0508 */  0xFF, 0xC1, 0x01, 0xAD, 0xE2, 0x5A, 0x03, 0x51,  // .....Z.Q
                /* 0510 */  0xDA, 0x69, 0x88, 0xE4, 0xBE, 0xD6, 0xA0, 0x12,  // .i......
                /* 0518 */  0x5F, 0x6B, 0x00, 0xD9, 0xD1, 0xA7, 0x8A, 0x0A,  // _k......
                /* 0520 */  0x3B, 0x55, 0x0A, 0xE2, 0xA9, 0xFA, 0xCA, 0x01,  // ;U......
                /* 0528 */  0xEB, 0x3A, 0x81, 0x39, 0x76, 0x81, 0xE5, 0xFF,  // .:.9v...
                /* 0530 */  0x7F, 0x9D, 0x80, 0x79, 0xE5, 0x00, 0xDF, 0xB1,  // ...y....
                /* 0538 */  0x0B, 0x88, 0xDF, 0x6B, 0x40, 0x27, 0xE9, 0x3E,  // ...k@'.>
                /* 0540 */  0x81, 0x0E, 0x76, 0xAF, 0x81, 0x78, 0x9F, 0x78,  // ..v..x.x
                /* 0548 */  0x5A, 0x7B, 0xA2, 0xD3, 0xBD, 0x06, 0x15, 0x82,  // Z{......
                /* 0550 */  0x42, 0x17, 0x1B, 0x9F, 0x0A, 0xB8, 0x68, 0x38,  // B.....h8
                /* 0558 */  0x0A, 0xE2, 0x7B, 0x0D, 0xE0, 0xE4, 0xE4, 0x00,  // ..{.....
                /* 0560 */  0x86, 0xFF, 0xFF, 0xBD, 0x06, 0xEC, 0x27, 0x07,  // ......'.
                /* 0568 */  0x40, 0xD5, 0xC5, 0x06, 0x64, 0x09, 0x4E, 0x0E,  // @...d.N.
                /* 0570 */  0x68, 0x1D, 0x17, 0x1B, 0xA8, 0x08, 0x09, 0x26,  // h......&
                /* 0578 */  0xBF, 0xD8, 0xA0, 0x32, 0x5F, 0x6C, 0x00, 0x59,  // ...2_l.Y
                /* 0580 */  0xFF, 0xFF, 0xFB, 0x29, 0xF0, 0xBD, 0x08, 0x3C,  // ...)...<
                /* 0588 */  0x50, 0xE0, 0x6E, 0x36, 0xC0, 0xF4, 0x7E, 0x0A,  // P.n6..~.
                /* 0590 */  0xFC, 0x25, 0xDE, 0x6C, 0x40, 0x27, 0xEA, 0x42,  // .%.l@'.B
                /* 0598 */  0x81, 0x8E, 0x76, 0xB3, 0x81, 0x6A, 0x0D, 0x50,  // ..v..j.P
                /* 05A0 */  0x61, 0x6E, 0x36, 0xA8, 0x18, 0x14, 0xBA, 0xDA,  // an6.....
                /* 05A8 */  0xF8, 0x58, 0xC0, 0x65, 0xC3, 0x51, 0x10, 0xDF,  // .X.e.Q..
                /* 05B0 */  0x6C, 0xF0, 0xFF, 0xFF, 0x9B, 0x0D, 0xE0, 0xE0,  // l.......
                /* 05B8 */  0xE8, 0x00, 0xEE, 0xAB, 0x0D, 0xF0, 0x39, 0x3A,  // ......9:
                /* 05C0 */  0x00, 0x0A, 0xAE, 0x36, 0x20, 0x8B, 0xF1, 0xC1,  // ...6 ...
                /* 05C8 */  0xD6, 0xD1, 0x01, 0x27, 0x06, 0x48, 0x47, 0x07,  // ...'.HG.
                /* 05D0 */  0x58, 0x77, 0x81, 0x08, 0x09, 0xC6, 0x5F, 0x91,  // Xw...._.
                /* 05D8 */  0xAE, 0x36, 0x3C, 0x38, 0x8C, 0xFE, 0xFF, 0xD1,  // .6<8....
                /* 05E0 */  0x49, 0x74, 0x91, 0x43, 0xC0, 0xE8, 0x22, 0x47,  // It.C.."G
                /* 05E8 */  0x40, 0x74, 0x8D, 0xF1, 0x45, 0xDE, 0xE7, 0x4C,  // @t..E..L
                /* 05F0 */  0xDC, 0x28, 0xAD, 0x70, 0x0C, 0x9A, 0x47, 0x82,  // .(.p..G.
                /* 05F8 */  0xA3, 0x78, 0xB3, 0x01, 0xEF, 0x25, 0x13, 0x5C,  // .x...%.\
                /* 0600 */  0x13, 0x82, 0x33, 0x84, 0xF3, 0xAD, 0x7D, 0x42,  // ..3...}B
                /* 0608 */  0x20, 0x3E, 0x85, 0x82, 0x2F, 0xC2, 0x84, 0xD0,  //  >../...
                /* 0610 */  0x2A, 0x40, 0xA4, 0xF1, 0x10, 0x40, 0x1C, 0x8F,  // *@...@..
                /* 0618 */  0x08, 0xC4, 0x87, 0x06, 0x3E, 0x22, 0x70, 0x1D,  // ....>"p.
                /* 0620 */  0x4E, 0x70, 0xE0, 0xBE, 0xF1, 0xDB, 0xF3, 0xDD,  // Np......
                /* 0628 */  0x09, 0xC4, 0x48, 0xBE, 0x3B, 0xB1, 0xFF, 0xFF,  // ..H.;...
                /* 0630 */  0xCD, 0x04, 0x3C, 0x19, 0x8E, 0xBA, 0x50, 0x4E,  // ..<...PN
                /* 0638 */  0x18, 0x11, 0x1F, 0x29, 0x1E, 0x30, 0x3C, 0x65,  // ...).0<e
                /* 0640 */  0xF0, 0xBE, 0x2D, 0x34, 0x65, 0x90, 0x9D, 0xAE,  // ..-4e...
                /* 0648 */  0x00, 0x83, 0x16, 0xCE, 0x34, 0x80, 0x8E, 0xFF,  // ....4...
                /* 0650 */  0xFF, 0x99, 0x06, 0xAE, 0x49, 0x87, 0x42, 0x4F,  // ....I.BO
                /* 0658 */  0x57, 0x20, 0x93, 0x79, 0xA6, 0x41, 0x87, 0x5D,  // W .y.A.]
                /* 0660 */  0x89, 0xCE, 0x34, 0xF0, 0xA6, 0xE9, 0x78, 0x67,  // ..4...xg
                /* 0668 */  0x1A, 0x0A, 0xE1, 0x60, 0x30, 0x8A, 0x05, 0xA1,  // ...`0...
                /* 0670 */  0x63, 0x01, 0x0F, 0x02, 0x47, 0x41, 0xEC, 0xE1,  // c...GA..
                /* 0678 */  0xF6, 0x47, 0xCF, 0x34, 0xF0, 0x4E, 0xE2, 0xE0,  // .G.4.N..
                /* 0680 */  0xBE, 0xD4, 0x80, 0x6F, 0x48, 0x70, 0x2E, 0x35,  // ...oHp.5
                /* 0688 */  0xFC, 0xAC, 0x0E, 0x5C, 0x8F, 0xF3, 0x70, 0x8E,  // ...\..p.
                /* 0690 */  0x35, 0x98, 0x31, 0x81, 0xE9, 0xFF, 0x3F, 0x26,  // 5.1...?&
                /* 0698 */  0x38, 0x07, 0x1B, 0xF0, 0x8D, 0xC9, 0x07, 0x1B,  // 8.......
                /* 06A0 */  0x78, 0xC7, 0x33, 0x70, 0x43, 0xF9, 0x0C, 0x07,  // x.3pC...
                /* 06A8 */  0xBE, 0x61, 0xC3, 0x39, 0xDA, 0xE0, 0x86, 0x0D,  // .a.9....
                /* 06B0 */  0xEE, 0xBB, 0x0D, 0xF8, 0x8E, 0x79, 0xC0, 0xEF,  // .....y..
                /* 06B8 */  0x0C, 0x03, 0x1C, 0xFE, 0xFF, 0x67, 0x18, 0xA0,  // .....g..
                /* 06C0 */  0x7A, 0xCC, 0x03, 0x99, 0x8A, 0x55, 0xE8, 0x0C,  // z....U..
                /* 06C8 */  0x83, 0xCB, 0x72, 0x21, 0x86, 0x78, 0x5D, 0x78,  // ..r!.x]x
                /* 06D0 */  0x33, 0xB7, 0xFA, 0xF3, 0x1D, 0x1D, 0x95, 0x75,  // 3......u
                /* 06D8 */  0x53, 0x48, 0xFD, 0x81, 0x13, 0xA5, 0xF7, 0xC0,  // SH......
                /* 06E0 */  0x49, 0x41, 0x3C, 0x36, 0x27, 0x39, 0x5C, 0xA0,  // IA<6'9\.
                /* 06E8 */  0xB5, 0x1C, 0x38, 0xC9, 0x9C, 0x8E, 0xE1, 0x7C,  // ..8....|
                /* 06F0 */  0x4E, 0xA8, 0xF8, 0x33, 0x31, 0x50, 0xBE, 0x87,  // N..31P..
                /* 06F8 */  0xC1, 0x19, 0x14, 0xE6, 0xAC, 0x07, 0xDC, 0xFE,  // ........
                /* 0700 */  0xFF, 0xF7, 0x30, 0x60, 0x14, 0xFC, 0x1E, 0x86,  // ..0`....
                /* 0708 */  0x8A, 0x3A, 0x23, 0x0A, 0xE2, 0x6B, 0x81, 0xEF,  // .:#..k..
                /* 0710 */  0x25, 0x70, 0xEE, 0x1C, 0xB8, 0x7B, 0x09, 0xBC,  // %p...{..
                /* 0718 */  0x6B, 0x18, 0x38, 0x6E, 0x37, 0xE0, 0xBB, 0x72,  // k.8n7..r
                /* 0720 */  0x00, 0x6F, 0xB1, 0x12, 0xAF, 0xCC, 0x60, 0x0B,  // .o....`.
                /* 0728 */  0x77, 0x65, 0x46, 0x4B, 0xBC, 0x72, 0x40, 0x3D,  // weFK.r@=
                /* 0730 */  0xD3, 0xFB, 0xFA, 0xEC, 0x5B, 0x18, 0x97, 0x03,  // ....[...
                /* 0738 */  0x23, 0x31, 0x17, 0x55, 0x54, 0xFC, 0x2B, 0x07,  // #1.UT.+.
                /* 0740 */  0x05, 0xF1, 0x1D, 0xC7, 0x71, 0x04, 0xFC, 0xFF,  // ....q...
                /* 0748 */  0xAF, 0x1C, 0xD8, 0x31, 0xF9, 0xCA, 0x01, 0xEB,  // ...1....
                /* 0750 */  0xD6, 0x0C, 0x8C, 0xCF, 0x0E, 0x70, 0x4E, 0x1D,  // .....pN.
                /* 0758 */  0xB8, 0xBB, 0x18, 0xF0, 0x3F, 0x5E, 0x80, 0xE3,  // ....?^..
                /* 0760 */  0x2E, 0x06, 0x9C, 0x8E, 0x17, 0xC0, 0xE6, 0xFF,  // ........
                /* 0768 */  0x7F, 0xBC, 0x00, 0xD9, 0x05, 0x09, 0x64, 0x5A,  // ......dZ
                /* 0770 */  0x2E, 0x48, 0xE8, 0x44, 0xC7, 0x0B, 0xA8, 0x17,  // .H.D....
                /* 0778 */  0x7C, 0x67, 0xB8, 0x20, 0xA1, 0xEE, 0x48, 0x4E,  // |g. ..HN
                /* 0780 */  0x7D, 0x84, 0x41, 0xE5, 0x3C, 0x1D, 0x50, 0x10,  // }.A.<.P.
                /* 0788 */  0x03, 0xFA, 0x46, 0xE8, 0x6B, 0x18, 0xEE, 0xDC,  // ..F.k...
                /* 0790 */  0x80, 0x3F, 0x1E, 0x01, 0xC3, 0x43, 0x18, 0xBB,  // .?...C..
                /* 0798 */  0xFC, 0x00, 0x8B, 0x18, 0x67, 0x2B, 0x94, 0xF0,  // ....g+..
                /* 07A0 */  0x8B, 0x09, 0x05, 0xF1, 0xC4, 0x7C, 0x82, 0x83,  // .....|..
                /* 07A8 */  0x73, 0x9D, 0xE0, 0x22, 0xC7, 0xA4, 0x43, 0x2D,  // s.."..C-
                /* 07B0 */  0xF8, 0xFF, 0xFF, 0xE7, 0x7E, 0x70, 0x8E, 0x0A,  // ....~p..
                /* 07B8 */  0xEE, 0x70, 0xCF, 0xE6, 0xA8, 0xC0, 0x7F, 0x51,  // .p.....Q
                /* 07C0 */  0xF0, 0x31, 0x0F, 0xF0, 0xA4, 0xD4, 0xA6, 0xC4,  // .1......
                /* 07C8 */  0x3B, 0x12, 0xC8, 0xE2, 0xDD, 0x91, 0xD0, 0x22,  // ;......"
                /* 07D0 */  0x6F, 0x1D, 0x50, 0x8F, 0x3C, 0x96, 0x75, 0x47,  // o.P.<.uG
                /* 07D8 */  0x42, 0x09, 0x82, 0xD1, 0x25, 0xC9, 0x67, 0x07,  // B...%.g.
                /* 07E0 */  0xBE, 0x34, 0x83, 0x19, 0xC4, 0x77, 0x24, 0x07,  // .4...w$.
                /* 07E8 */  0xB9, 0x75, 0x40, 0x3F, 0x15, 0xC0, 0xF9, 0xFF,  // .u@?....
                /* 07F0 */  0x5F, 0x90, 0x80, 0xD3, 0xD1, 0x01, 0x1C, 0xE7,  // _.......
                /* 07F8 */  0x0B, 0xF8, 0x37, 0x24, 0xF0, 0x9C, 0x2F, 0x80,  // ..7$../.
                /* 0800 */  0xEB, 0x1D, 0x09, 0x3C, 0xE7, 0x0B, 0xC0, 0x94,  // ...<....
                /* 0808 */  0x52, 0xAF, 0xFF, 0xFF, 0xF3, 0x05, 0xB8, 0xF4,  // R.......
                /* 0810 */  0x1C, 0xD4, 0xD1, 0xA9, 0x0E, 0xEA, 0x50, 0xBD,  // ......P.
                /* 0818 */  0x01, 0x2A, 0xC7, 0x09, 0x9D, 0x8E, 0xCA, 0x09,  // .*......
                /* 0820 */  0x60, 0x74, 0x49, 0x02, 0x4C, 0x47, 0xB9, 0x99,  // `tI.LG..
                /* 0828 */  0xA0, 0xC4, 0xDF, 0x4C, 0x28, 0x88, 0x2F, 0xC7,  // ...L(./.
                /* 0830 */  0x3E, 0xC3, 0x79, 0xAA, 0x38, 0x68, 0x0F, 0xE0,  // >.y.8h..
                /* 0838 */  0x11, 0xE0, 0xC5, 0x04, 0xEE, 0x15, 0x09, 0x78,  // .......x
                /* 0840 */  0x8D, 0xE9, 0xFF, 0x7F, 0x4C, 0x70, 0x14, 0x8F,  // ....Lp..
                /* 0848 */  0x09, 0x08, 0xDC, 0x38, 0xC0, 0x39, 0x26, 0x58,  // ...8.9&X
                /* 0850 */  0x77, 0xFC, 0x63, 0x02, 0xFF, 0x0D, 0x1E, 0x5C,  // w.c....\
                /* 0858 */  0x63, 0x82, 0x7D, 0xA6, 0x38, 0x26, 0xF0, 0xDF,  // c.}.8&..
                /* 0860 */  0x8C, 0x7C, 0x6F, 0x01, 0x6C, 0xFC, 0xFF, 0xEF,  // .|o.l...
                /* 0868 */  0x2D, 0x30, 0xFF, 0x8A, 0x1D, 0x5E, 0xB3, 0x40,  // -0...^.@
                /* 0870 */  0x76, 0xD0, 0xF0, 0xBD, 0x05, 0x27, 0xE1, 0x9A,  // v....'..
                /* 0878 */  0x05, 0x71, 0x98, 0x8F, 0x98, 0x0E, 0x7D, 0xD5,  // .q....}.
                /* 0880 */  0xA3, 0xA3, 0x72, 0x5C, 0x12, 0x85, 0xBE, 0xB7,  // ..r\....
                /* 0888 */  0xA0, 0x62, 0x1E, 0x32, 0x28, 0x88, 0x01, 0x7D,  // .b.2(..}
                /* 0890 */  0xF0, 0x06, 0x56, 0x04, 0x3E, 0x78, 0x03, 0xA6,  // ..V.>x..
                /* 0898 */  0x4F, 0xBB, 0xB0, 0xFE, 0xFF, 0x47, 0x59, 0xC0,  // O....GY.
                /* 08A0 */  0x88, 0x43, 0x8B, 0x97, 0x40, 0xB0, 0x5D, 0xFA,  // .C..@.].
                /* 08A8 */  0x7C, 0x9C, 0xC0, 0x85, 0x5A, 0xAA, 0x8E, 0x13,  // |...Z...
                /* 08B0 */  0xF0, 0xCC, 0xDD, 0x45, 0xE9, 0x25, 0x90, 0x07,  // ...E.%..
                /* 08B8 */  0xA0, 0x90, 0xFC, 0xFB, 0x28, 0x4A, 0x30, 0x1C,  // ....(J0.
                /* 08C0 */  0x05, 0xF1, 0xD8, 0x7C, 0xA2, 0x06, 0x6E, 0xF7,  // ...|..n.
                /* 08C8 */  0x09, 0xF0, 0x9D, 0xA8, 0x81, 0xD5, 0xFF, 0xFF,  // ........
                /* 08D0 */  0xDC, 0x00, 0xF8, 0xBA, 0xDC, 0x81, 0x2D, 0xFD,  // ......-.
                /* 08D8 */  0xB9, 0x01, 0x7D, 0x92, 0xF6, 0xE5, 0x0E, 0xDE,  // ..}.....
                /* 08E0 */  0xB9, 0xC1, 0xAA, 0x4F, 0xD4, 0x28, 0xBD, 0x14,  // ...O.(..
                /* 08E8 */  0x52, 0x7D, 0x6E, 0x40, 0xE9, 0x3C, 0x37, 0x50,  // R}n@.<7P
                /* 08F0 */  0x10, 0x8F, 0xCD, 0x09, 0x0E, 0x05, 0xE8, 0x51,  // .......Q
                /* 08F8 */  0x7A, 0xBE, 0x0F, 0x01, 0x75, 0x1E, 0x6A, 0x80,  // z...u.j.
                /* 0900 */  0xE8, 0xAD, 0x07, 0x38, 0xFC, 0xFF, 0x67, 0x04,  // ...8..g.
                /* 0908 */  0xE3, 0xCC, 0x00, 0xBE, 0x5B, 0x0F, 0x60, 0xEF,  // ....[.`.
                /* 0910 */  0x3E, 0xC1, 0xAF, 0x1B, 0x80, 0x1F, 0x9F, 0x26,  // >......&
                /* 0918 */  0x9D, 0xDE, 0x7A, 0x40, 0x16, 0xE9, 0xBA, 0x81,  // ..z@....
                /* 0920 */  0x16, 0x76, 0xDD, 0x80, 0xF6, 0xFF, 0xBF, 0xF5,  // .v......
                /* 0928 */  0xF8, 0x52, 0x67, 0x29, 0x47, 0x69, 0x94, 0x88,  // .Rg)Gi..
                /* 0930 */  0x43, 0xB4, 0x2F, 0x98, 0xA8, 0xAB, 0x19, 0x07,  // C./.....
                /* 0938 */  0xF1, 0x05, 0xCF, 0x67, 0x53, 0x5F, 0x37, 0xE0,  // ...gS_7.
                /* 0940 */  0x5D, 0x7A, 0x80, 0xFF, 0xBD, 0x08, 0x78, 0xDC,  // ]z....x.
                /* 0948 */  0x38, 0xC0, 0x77, 0x2F, 0x02, 0x6E, 0x27, 0x0B,  // 8.w/.n'.
                /* 0950 */  0xE0, 0xF6, 0xFF, 0x3F, 0x59, 0x00, 0x9D, 0x7B,  // ...?Y..{
                /* 0958 */  0x11, 0xC8, 0xE2, 0x9F, 0x2C, 0xD0, 0x21, 0x4E,  // ....,.!N
                /* 0960 */  0x16, 0x50, 0x0F, 0x46, 0x4F, 0x00, 0xBA, 0x17,  // .P.FO...
                /* 0968 */  0xA1, 0x04, 0x53, 0x48, 0xF6, 0xBD, 0x08, 0x25,  // ..SH...%
                /* 0970 */  0xF4, 0x64, 0x41, 0x41, 0x3C, 0x36, 0x47, 0x38,  // .dAA<6G8
                /* 0978 */  0x14, 0xA0, 0x55, 0x80, 0x48, 0xE1, 0x3C, 0x34,  // ..U.H.<4
                /* 0980 */  0x86, 0xAE, 0x0F, 0x46, 0x00, 0x19, 0xFE, 0xFF,  // ...F....
                /* 0988 */  0x07, 0x23, 0x80, 0x47, 0x36, 0xBD, 0x8A, 0x3C,  // .#.G6..<
                /* 0990 */  0x18, 0x81, 0x2C, 0xD4, 0x79, 0x03, 0x2D, 0xED,  // ..,.y.-.
                /* 0998 */  0xBC, 0x01, 0xF5, 0xC8, 0x6C, 0x31, 0x07, 0x23,  // ....l1.#
                /* 09A0 */  0x94, 0x0C, 0x18, 0x9D, 0x8C, 0x7C, 0x28, 0xE0,  // .....|(.
                /* 09A8 */  0xB1, 0xCF, 0x1B, 0x14, 0xC4, 0x07, 0x23, 0x1F,  // ......#.
                /* 09B0 */  0x0A, 0xE0, 0x9C, 0x37, 0x30, 0x87, 0x02, 0xEC,  // ...70...
                /* 09B8 */  0xFF, 0xFF, 0x64, 0x04, 0xF0, 0xFD, 0x68, 0xA1,  // ..d...h.
                /* 09C0 */  0x93, 0x11, 0xF2, 0xFF, 0x7F, 0xB4, 0x80, 0x9F,  // ........
                /* 09C8 */  0xE5, 0x68, 0x81, 0x56, 0x74, 0xB4, 0x80, 0x28,  // .h.Vt..(
                /* 09D0 */  0x4D, 0x80, 0xB6, 0xA3, 0x8D, 0x4F, 0x46, 0xA8,  // M....OF.
                /* 09D8 */  0xF4, 0x24, 0x4A, 0x7F, 0x7C, 0x41, 0xE5, 0x3D,  // .$J.|A.=
                /* 09E0 */  0x1D, 0x50, 0x10, 0x03, 0x3A, 0xCC, 0x10, 0x51,  // .P..:..Q
                /* 09E8 */  0x90, 0x1E, 0x88, 0xE7, 0x7B, 0x3A, 0xC7, 0xF0,  // ....{:..
                /* 09F0 */  0xE2, 0x80, 0x99, 0x6E, 0xE5, 0x08, 0x9A, 0x4C,  // ...n...L
                /* 09F8 */  0xF3, 0x70, 0x9A, 0xCB, 0xDB, 0x11, 0x78, 0x75,  // .p....xu
                /* 0A00 */  0x5D, 0x0B, 0xA0, 0x9F, 0x02, 0x8E, 0xF6, 0x4C,  // ]......L
                /* 0A08 */  0x0E, 0xC1, 0x9E, 0x2F, 0x3F, 0x40, 0x24, 0xFE,  // .../?@$.
                /* 0A10 */  0x74, 0x51, 0x81, 0xA7, 0x4B, 0x41, 0x3C, 0x5D,  // tQ..KA<]
                /* 0A18 */  0x38, 0x52, 0xAE, 0x14, 0xA8, 0xC9, 0xE2, 0x6E,  // 8R.....n
                /* 0A20 */  0x05, 0x0F, 0xEB, 0x60, 0xBF, 0x26, 0x7A, 0xB8,  // ...`.&z.
                /* 0A28 */  0xB0, 0xFF, 0xFF, 0xC3, 0xC5, 0x5D, 0xDF, 0x80,  // .....]..
                /* 0A30 */  0xBB, 0x52, 0x85, 0xB7, 0x0A, 0x70, 0xC5, 0x5A,  // .R...p.Z
                /* 0A38 */  0xA7, 0x6E, 0x15, 0x38, 0x71, 0xA7, 0x75, 0x88,  // .n.8q.u.
                /* 0A40 */  0xB7, 0x8A, 0xDE, 0x20, 0x7D, 0x5A, 0x47, 0x09,  // ... }ZG.
                /* 0A48 */  0xA1, 0x90, 0x8C, 0xEB, 0x1B, 0xEA, 0x9A, 0x65,  // .......e
                /* 0A50 */  0x30, 0x83, 0x78, 0x74, 0x0E, 0x75, 0x2E, 0x40,  // 0.xt.u.@
                /* 0A58 */  0x4B, 0xBA, 0x55, 0x40, 0x39, 0x1B, 0x80, 0xEB,  // K.U@9...
                /* 0A60 */  0x16, 0x04, 0x9E, 0xB3, 0x01, 0xB0, 0xFE, 0xFF,  // ........
                /* 0A68 */  0x9F, 0x0D, 0xC0, 0xE9, 0xF5, 0x6C, 0x00, 0xB2,  // .....l..
                /* 0A70 */  0x30, 0x17, 0x18, 0xB4, 0xA4, 0xAB, 0x16, 0x54,  // 0......T
                /* 0A78 */  0x67, 0xF7, 0x59, 0x7A, 0x81, 0xE1, 0xF1, 0x49,  // g.Yz...I
                /* 0A80 */  0x74, 0x04, 0x81, 0x9B, 0xE6, 0x6C, 0x80, 0xD6,  // t....l..
                /* 0A88 */  0x73, 0xD5, 0x42, 0x9D, 0x60, 0x00, 0x96, 0xFC,  // s.B.`...
                /* 0A90 */  0xFF, 0x4F, 0x30, 0x80, 0x49, 0x9B, 0x0F, 0xC2,  // .O0.I...
                /* 0A98 */  0xC7, 0x0A, 0x90, 0x05, 0x3B, 0xC1, 0xA0, 0xE5,  // ....;...
                /* 0AA0 */  0x9D, 0x60, 0x20, 0x1E, 0x2B, 0xDE, 0x60, 0x12,  // .` .+.`.
                /* 0AA8 */  0x14, 0x74, 0x82, 0x41, 0x49, 0xA1, 0xD0, 0x11,  // .t.AI...
                /* 0AB0 */  0xC6, 0xE7, 0x02, 0x1E, 0x1D, 0x8C, 0x82, 0x78,  // .......x
                /* 0AB8 */  0x74, 0x8E, 0x75, 0x2E, 0x40, 0x8B, 0x3A, 0x56,  // t.u.@.:V
                /* 0AC0 */  0x40, 0xBA, 0x1B, 0xC0, 0x39, 0xC2, 0x00, 0xDF,  // @...9...
                /* 0AC8 */  0xFF, 0xFF, 0xE1, 0x00, 0xB8, 0x1F, 0x61, 0x80,  // ......a.
                /* 0AD0 */  0x99, 0xB5, 0x23, 0x0C, 0x40, 0x94, 0xFF, 0xFF,  // ..#.@...
                /* 0AD8 */  0x11, 0x06, 0x60, 0x84, 0x43, 0x8B, 0x47, 0x18,  // ..`.C.G.
                /* 0AE0 */  0x60, 0x76, 0xF1, 0xF4, 0x11, 0x06, 0xB0, 0xF1,  // `v......
                /* 0AE8 */  0xFF, 0x3F, 0xC2, 0x00, 0x06, 0x0F, 0x07, 0x8F,  // .?......
                /* 0AF0 */  0x30, 0x60, 0x8B, 0x73, 0x38, 0x40, 0x8B, 0x02,  // 0`.s8@..
                /* 0AF8 */  0x92, 0xC7, 0x59, 0x90, 0x31, 0x9D, 0x7E, 0xEC,  // ..Y.1.~.
                /* 0B00 */  0x20, 0xB5, 0x9E, 0x00, 0x04, 0xFF, 0x72, 0x10,  //  .....r.
                /* 0B08 */  0xAA, 0xB1, 0xBB, 0xB8, 0x0F, 0x07, 0x28, 0x0A,  // ......(.
                /* 0B10 */  0x9F, 0x41, 0xE0, 0x3B, 0x39, 0x83, 0xA0, 0x67,  // .A.;9..g
                /* 0B18 */  0x01, 0xE3, 0x0C, 0x02, 0xF6, 0x73, 0x01, 0x38,  // .....s.8
                /* 0B20 */  0xAE, 0xD2, 0xFC, 0x10, 0xF8, 0xFC, 0xEE, 0x73,  // .......s
                /* 0B28 */  0x01, 0xDC, 0xFF, 0xFF, 0xB9, 0x00, 0xD8, 0x59,  // .......Y
                /* 0B30 */  0x34, 0x2B, 0xD4, 0xE7, 0xB9, 0x00, 0x78, 0x4D,  // 4+....xM
                /* 0B38 */  0xD3, 0xE7, 0x02, 0x80, 0x3E, 0x52, 0x61, 0xFF,  // ....>Ra.
                /* 0B40 */  0xFF, 0xCF, 0x05, 0xC0, 0xEA, 0x88, 0xEA, 0x73,  // .......s
                /* 0B48 */  0x01, 0x40, 0x1F, 0x8B, 0xE7, 0x02, 0xE0, 0x75,  // .@.....u
                /* 0B50 */  0xC6, 0xF4, 0xB9, 0x00, 0xF3, 0xFF, 0x3F, 0x17,  // ......?.
                /* 0B58 */  0x00, 0xA4, 0xD1, 0x7A, 0x2E, 0x00, 0x16, 0x43,  // ...z...C
                /* 0B60 */  0x7B, 0x74, 0xF3, 0xC9, 0xC0, 0xC7, 0x33, 0x4F,  // {t....3O
                /* 0B68 */  0x24, 0x44, 0x02, 0x9F, 0x0B, 0x80, 0xC1, 0x1C,  // $D......
                /* 0B70 */  0xF8, 0x94, 0xCF, 0xCE, 0xE7, 0x02, 0xD8, 0xFF,  // ........
                /* 0B78 */  0xFF, 0x73, 0x01, 0x60, 0x53, 0xA9, 0x52, 0x8B,  // .s.`S.R.
                /* 0B80 */  0x32, 0xCF, 0x05, 0xE0, 0x92, 0x76, 0x8A, 0x45,  // 2....v.E
                /* 0B88 */  0x07, 0x3C, 0x17, 0x20, 0x6E, 0x82, 0x67, 0x11,  // .<. n.g.
                /* 0B90 */  0x21, 0x48, 0x9F, 0x47, 0x00, 0x9D, 0x00, 0x7C,  // !H.G...|
                /* 0B98 */  0x2E, 0x60, 0x91, 0xCE, 0x05, 0xA8, 0x30, 0x14,  // .`....0.
                /* 0BA0 */  0x8A, 0x72, 0x3E, 0x44, 0x89, 0x87, 0xA3, 0x20,  // .r>D... 
                /* 0BA8 */  0x1E, 0x9B, 0xCF, 0x05, 0x80, 0x97, 0xC3, 0x2A,  // .......*
                /* 0BB0 */  0xF6, 0xFF, 0x3F, 0x2C, 0x36, 0x57, 0x38, 0x87,  // ..?,6W8.
                /* 0BB8 */  0x55, 0xC0, 0xB3, 0x44, 0x9F, 0x0A, 0x3D, 0x9E,  // U..D..=.
                /* 0BC0 */  0x1E, 0xC0, 0x95, 0xE3, 0xF4, 0x80, 0x56, 0x03,  // ......V.
                /* 0BC8 */  0xA4, 0x09, 0x3D, 0x3D, 0xC0, 0xCC, 0x7F, 0x6C,  // ..==...l
                /* 0BD0 */  0xA0, 0xA3, 0x72, 0x72, 0x12, 0x25, 0x3F, 0xA4,  // ..rr.%?.
                /* 0BD8 */  0xA0, 0xB2, 0x8E, 0x9D, 0x82, 0x18, 0xD0, 0x41,  // .......A
                /* 0BE0 */  0xCE, 0x05, 0xA0, 0xB9, 0x4F, 0x03, 0x93, 0xFF,  // ....O...
                /* 0BE8 */  0xFF, 0x7D, 0x1A, 0x70, 0x70, 0xF3, 0x00, 0x7E,  // .}.pp..~
                /* 0BF0 */  0x77, 0x0A, 0x70, 0x5C, 0x70, 0x00, 0x0F, 0x77,  // w.p\p..w
                /* 0BF8 */  0x0A, 0x39, 0xBD, 0xE0, 0x80, 0x6C, 0x15, 0xBA,  // .9...l..
                /* 0C00 */  0x53, 0x70, 0x49, 0x17, 0x1C, 0xAF, 0x45, 0x17,  // SpI...E.
                /* 0C08 */  0x1C, 0xFC, 0xD5, 0xCC, 0x77, 0x6A, 0xA3, 0xD7,  // ....wj..
                /* 0C10 */  0x79, 0x99, 0xD2, 0x08, 0x7C, 0xAB, 0xD2, 0xBD,  // y...|...
                /* 0C18 */  0x9F, 0xFE, 0xFF, 0x6F, 0x13, 0x84, 0x42, 0xB1,  // ...o..B.
                /* 0C20 */  0x4F, 0x06, 0xA8, 0xA0, 0xA3, 0xA7, 0x20, 0x06,  // O..... .
                /* 0C28 */  0x74, 0x0A, 0x08, 0x29, 0x39, 0x19, 0xA0, 0x74,  // t..)9..t
                /* 0C30 */  0x80, 0x48, 0xE4, 0x8D, 0x9A, 0xCC, 0xE8, 0xAC,  // .H......
                /* 0C38 */  0x7C, 0xA8, 0x00, 0x6E, 0xC7, 0x02, 0x7E, 0x25,  // |..n..~%
                /* 0C40 */  0x7E, 0xFE, 0xF6, 0xA1, 0x02, 0x58, 0x04, 0xBA,  // ~....X..
                /* 0C48 */  0x1D, 0xA1, 0x22, 0xDC, 0x4B, 0x28, 0x88, 0x6F,  // ..".K(.o
                /* 0C50 */  0x47, 0xC0, 0xF3, 0x50, 0x01, 0xCE, 0x48, 0xD7,  // G..P..H.
                /* 0C58 */  0x16, 0xF4, 0x67, 0xC1, 0x17, 0x05, 0xD8, 0x23,  // ..g....#
                /* 0C60 */  0x03, 0xCB, 0xFF, 0x7F, 0x64, 0xF0, 0x8E, 0x0B,  // ....d...
                /* 0C68 */  0xBE, 0x20, 0x01, 0x9E, 0x74, 0x5E, 0x90, 0x40,  // . ..t^.@
                /* 0C70 */  0xA7, 0xED, 0xF4, 0x81, 0x4E, 0x78, 0x41, 0x42,  // ....NxAB
                /* 0C78 */  0x8C, 0x2A, 0xE4, 0x91, 0x18, 0xF8, 0xC8, 0x9E,  // .*......
                /* 0C80 */  0x0B, 0x8D, 0xD0, 0xFB, 0x71, 0x81, 0xA0, 0x9B,  // ....q...
                /* 0C88 */  0x60, 0x9E, 0xD3, 0x07, 0x2A, 0x09, 0x85, 0x92,  // `...*...
                /* 0C90 */  0x1C, 0x21, 0x50, 0xDA, 0x8F, 0x10, 0x14, 0xC4,  // .!P.....
                /* 0C98 */  0xA3, 0x73, 0x9C, 0xC3, 0x01, 0x94, 0x21, 0x3F,  // .s....!?
                /* 0CA0 */  0x0E, 0xBC, 0x42, 0x78, 0x50, 0x6C, 0x22, 0x30,  // ..BxPl"0
                /* 0CA8 */  0x6E, 0x49, 0xC0, 0x33, 0x0A, 0x2E, 0xEA, 0xFF,  // nI.3....
                /* 0CB0 */  0x3F, 0x2E, 0x0F, 0xC6, 0xC7, 0x87, 0xB3, 0x3A,  // ?......:
                /* 0CB8 */  0xA5, 0xA3, 0x02, 0x1E, 0x53, 0xF6, 0x55, 0x0A,  // ....S.U.
                /* 0CC0 */  0x70, 0x7E, 0xFB, 0x00, 0xC7, 0x55, 0x0A, 0xF0,  // p~...U..
                /* 0CC8 */  0xE0, 0x55, 0xA8, 0xC1, 0xAB, 0x94, 0xFE, 0xFF,  // .U......
                /* 0CD0 */  0xB7, 0x0F, 0x30, 0x29, 0xBB, 0x7D, 0xA0, 0x38,  // ..0).}.8
                /* 0CD8 */  0x9C, 0xEF, 0xF6, 0x81, 0xB0, 0x7A, 0x79, 0xD0,  // .....zy.
                /* 0CE0 */  0xB1, 0xCE, 0xF7, 0x07, 0x18, 0x97, 0x0F, 0x80,  // ........
                /* 0CE8 */  0xA1, 0xFF, 0xFF, 0xCB, 0x07, 0xC0, 0x16, 0xAB,  // ........
                /* 0CF0 */  0x97, 0x0F, 0x90, 0x09, 0xBC, 0x7C, 0xA0, 0x46,  // .....|.F
                /* 0CF8 */  0xEA, 0x98, 0xE7, 0x42, 0xC4, 0xD0, 0x62, 0x3C,  // ...B..b<
                /* 0D00 */  0x21, 0xBC, 0x3E, 0x74, 0x2C, 0xC0, 0xFC, 0xD1,  // !.>t,...
                /* 0D08 */  0x10, 0xE8, 0xFF, 0xFF, 0x8F, 0x86, 0x00, 0xFF,  // ........
                /* 0D10 */  0xFF, 0xFF, 0x07, 0x10, 0xE0, 0x2A, 0xF6, 0x00,  // .....*..
                /* 0D18 */  0x02, 0x3A, 0x61, 0x47, 0x43, 0x74, 0xBC, 0xB5,  // .:aGCt..
                /* 0D20 */  0x08, 0xF8, 0x59, 0xE8, 0xFD, 0x03, 0xCE, 0x31,  // ..Y....1
                /* 0D28 */  0xE4, 0x75, 0xC1, 0x83, 0x7F, 0x06, 0x70, 0x98,  // .u....p.
                /* 0D30 */  0xD3, 0x07, 0x2A, 0xC6, 0xE9, 0x03, 0xD0, 0x1D,  // ..*.....
                /* 0D38 */  0xE7, 0xF4, 0x81, 0x0A, 0x70, 0xFA, 0xA0, 0x20,  // ....p.. 
                /* 0D40 */  0x3E, 0x7D, 0xC0, 0xFB, 0xFF, 0x9F, 0x3E, 0x00,  // >}....>.
                /* 0D48 */  0x07, 0x81, 0x86, 0x82, 0x1A, 0x96, 0xC7, 0xE1,  // ........
                /* 0D50 */  0xA3, 0x02, 0xFE, 0xA0, 0x80, 0x3B, 0x7C, 0x00,  // .....;|.
                /* 0D58 */  0x3F, 0xC5, 0xA7, 0x08, 0x72, 0x5F, 0xF0, 0x91,  // ?...r_..
                /* 0D60 */  0xC1, 0x87, 0x0F, 0x60, 0x6E, 0xF6, 0xF0, 0x01,  // ...`n...
                /* 0D68 */  0x3A, 0x71, 0x87, 0x0F, 0x94, 0x28, 0x08, 0x45,  // :q...(.E
                /* 0D70 */  0x3C, 0x4C, 0x41, 0x3F, 0xDC, 0xF9, 0xFF, 0x7F,  // <LA?....
                /* 0D78 */  0x3C, 0xF4, 0xF1, 0x81, 0x1C, 0xA5, 0x00, 0x0A,  // <.......
                /* 0D80 */  0xDF, 0x14, 0xE0, 0x8F, 0x0C, 0xCE, 0xFF, 0xFF,  // ........
                /* 0D88 */  0x28, 0x05, 0x38, 0x15, 0x7C, 0x94, 0x02, 0xF5,  // (.8.|...
                /* 0D90 */  0xF1, 0xC3, 0x47, 0x29, 0x5F, 0x73, 0xD9, 0xF1,  // ..G)_s..
                /* 0D98 */  0x03, 0x0C, 0x51, 0x8E, 0x1F, 0xA8, 0x10, 0x14,  // ..Q.....
                /* 0DA0 */  0x0A, 0x71, 0x86, 0x40, 0xC9, 0x3E, 0x43, 0x50,  // .q.@.>CP
                /* 0DA8 */  0x10, 0x0F, 0xCF, 0xC7, 0x0F, 0xC0, 0xC4, 0x59,  // .......Y
                /* 0DB0 */  0x18, 0xF3, 0xFF, 0xBF, 0x3F, 0x80, 0xE9, 0x98,  // ....?...
                /* 0DB8 */  0x0B, 0xB0, 0xFA, 0xFF, 0x7F, 0xE2, 0xB0, 0xE1,  // ........
                /* 0DC0 */  0xC3, 0x07, 0xE8, 0x42, 0xAD, 0x43, 0x87, 0x0F,  // ...B.C..
                /* 0DC8 */  0x9C, 0xB4, 0xC3, 0x07, 0xE2, 0xF8, 0x00, 0x03,  // ........
                /* 0DD0 */  0xE9, 0xF9, 0x0C, 0x2B, 0xE3, 0xF0, 0x81, 0xA2,  // ...+....
                /* 0DD8 */  0x20, 0x87, 0x0F, 0x54, 0xE4, 0xA3, 0x01, 0x05,  //  ..T....
                /* 0DE0 */  0x31, 0x9B, 0xF3, 0xDC, 0x2C, 0xD0, 0x8A, 0xCE,  // 1...,...
                /* 0DE8 */  0xA0, 0xC8, 0x89, 0xC0, 0x3B, 0xB5, 0x03, 0xCF,  // ....;...
                /* 0DF0 */  0xA3, 0x05, 0x60, 0xF1, 0xFF, 0x7F, 0x9E, 0x02,  // ..`.....
                /* 0DF8 */  0xE7, 0xD1, 0x02, 0x78, 0x7B, 0xF4, 0xA9, 0xF0,  // ...x{...
                /* 0E00 */  0x68, 0x01, 0xB2, 0x33, 0xA7, 0x8F, 0x16, 0x7C,  // h..3...|
                /* 0E08 */  0xC0, 0x16, 0x05, 0xA4, 0x89, 0x1D, 0xC4, 0x93,  // ........
                /* 0E10 */  0x4E, 0xC4, 0xF3, 0x0D, 0x5A, 0x33, 0x8A, 0xC6,  // N...Z3..
                /* 0E18 */  0x19, 0x3E, 0xF4, 0xB3, 0x64, 0x02, 0xCB, 0x38,  // .>..d..8
                /* 0E20 */  0x1C, 0x51, 0x08, 0x53, 0xF8, 0x5C, 0x00, 0xFC,  // .Q.S.\..
                /* 0E28 */  0x8F, 0xEF, 0xFC, 0x5C, 0x00, 0xDC, 0xFE, 0xFF,  // ...\....
                /* 0E30 */  0xE7, 0x02, 0xE0, 0x21, 0x55, 0xA3, 0x44, 0x99,  // ...!U.D.
                /* 0E38 */  0xE7, 0x02, 0x70, 0x65, 0x38, 0xC1, 0xA0, 0x60,  // ..pe8..`
                /* 0E40 */  0xAD, 0xE4, 0x04, 0x83, 0xD0, 0x78, 0x2B, 0xD0,  // .....x+.
                /* 0E48 */  0xA1, 0xE0, 0x19, 0x06, 0x43, 0x30, 0xFD, 0xB1,  // ....C0..
                /* 0E50 */  0x80, 0x0E, 0xCA, 0xB9, 0x49, 0x94, 0xFB, 0x58,  // ....I..X
                /* 0E58 */  0x80, 0x4A, 0x7A, 0x2C, 0xA0, 0x20, 0x3E, 0x2C,  // .Jz,. >,
                /* 0E60 */  0x13, 0x08, 0x19, 0x39, 0x16, 0xA0, 0x0E, 0x63,  // ...9...c
                /* 0E68 */  0x1E, 0x06, 0xD3, 0x3A, 0x0C, 0x8D, 0xE9, 0xE0,  // ...:....
                /* 0E70 */  0xDF, 0x0A, 0x7C, 0x5D, 0x78, 0x72, 0x01, 0xEF,  // ..|]xr..
                /* 0E78 */  0x48, 0x7D, 0x28, 0x00, 0x87, 0xB8, 0x8B, 0x0B,  // H}(.....
                /* 0E80 */  0xA0, 0xE9, 0xFF, 0x7F, 0x71, 0x01, 0x6C, 0x2A,  // ....q.l*
                /* 0E88 */  0xFC, 0x51, 0xBC, 0xB8, 0x80, 0x4C, 0xD0, 0x45,  // .Q...L.E
                /* 0E90 */  0x1E, 0x1D, 0xEB, 0x46, 0x81, 0x38, 0x48, 0x85,  // ...F.8H.
                /* 0E98 */  0x8E, 0x71, 0x24, 0xC7, 0x11, 0xF9, 0xD9, 0x05,  // .q$.....
                /* 0EA0 */  0x4B, 0xE0, 0xAB, 0xA2, 0x2F, 0x15, 0x5C, 0x3E,  // K.../.\>
                /* 0EA8 */  0x85, 0xE4, 0xDF, 0xB0, 0x50, 0x82, 0xEF, 0x16,  // ....P...
                /* 0EB0 */  0x14, 0xC4, 0xA3, 0x73, 0x92, 0x1B, 0x16, 0x5A,  // ...s...Z
                /* 0EB8 */  0x0B, 0x88, 0xE6, 0x81, 0xD3, 0x39, 0x0D, 0x4D,  // .....9.M
                /* 0EC0 */  0xCB, 0xD7, 0x2B, 0x60, 0x1A, 0xE2, 0xF6, 0x80,  // ..+`....
                /* 0EC8 */  0xFA, 0xFF, 0x4F, 0xCA, 0x32, 0x40, 0x74, 0xEF,  // ..O.2@t.
                /* 0ED0 */  0xC0, 0x5D, 0x15, 0x81, 0xD9, 0xD1, 0x01, 0x7B,  // .].....{
                /* 0ED8 */  0x55, 0x04, 0x18, 0x77, 0x33, 0xD2, 0xC1, 0x03,  // U..w3...
                /* 0EE0 */  0xFD, 0xFF, 0xBF, 0x2A, 0x42, 0xBF, 0x80, 0xA1,  // ...*B...
                /* 0EE8 */  0xAE, 0x8A, 0x04, 0x48, 0x37, 0x23, 0xCC, 0xD5,  // ...H7#..
                /* 0EF0 */  0x35, 0xC8, 0x23, 0x80, 0x0F, 0x84, 0xC7, 0x15,  // 5.#.....
                /* 0EF8 */  0xEA, 0xE9, 0xC8, 0x93, 0x79, 0x09, 0xE0, 0x77,  // ....y..w
                /* 0F00 */  0x30, 0x80, 0x3D, 0x36, 0x8F, 0x38, 0x40, 0xE4,  // 0.=6.8@.
                /* 0F08 */  0x7C, 0x63, 0xED, 0x23, 0xD1, 0xD9, 0x20, 0xC8,  // |c.#.. .
                /* 0F10 */  0x23, 0x80, 0xC1, 0x7D, 0x0B, 0xF0, 0x10, 0x1E,  // #..}....
                /* 0F18 */  0x71, 0xD8, 0xFF, 0xFF, 0x88, 0x03, 0xF6, 0x79,  // q......y
                /* 0F20 */  0xE0, 0x8E, 0x38, 0x00, 0x6B, 0xFF, 0xFF, 0x47,  // ..8.k..G
                /* 0F28 */  0x1C, 0xC0, 0x9A, 0x4C, 0xA9, 0x0E, 0x25, 0x1E,  // ...L..%.
                /* 0F30 */  0x3C, 0xC0, 0x15, 0x56, 0xC2, 0x95, 0x15, 0x2B,  // <..V...+
                /* 0F38 */  0x19, 0x48, 0xA7, 0xE7, 0x47, 0x1C, 0x0E, 0x7B,  // .H..G..{
                /* 0F40 */  0x60, 0x2F, 0x1D, 0x3E, 0x62, 0xF8, 0x8C, 0x93,  // `/.>b...
                /* 0F48 */  0xC0, 0x22, 0x01, 0x75, 0xEC, 0xE0, 0xF2, 0x60,  // .".u...`
                /* 0F50 */  0x14, 0xFB, 0x5C, 0x80, 0x0A, 0x7A, 0x2E, 0xA0,  // ..\..z..
                /* 0F58 */  0x20, 0x06, 0x74, 0x8A, 0xCB, 0x24, 0x7A, 0xC8,  //  .t..$z.
                /* 0F60 */  0x9E, 0x05, 0x9B, 0xEA, 0x39, 0x9C, 0xD4, 0xC3,  // ....9...
                /* 0F68 */  0x24, 0x60, 0xE7, 0xFF, 0x7F, 0xA4, 0x80, 0x21,  // $`.....!
                /* 0F70 */  0x73, 0x49, 0x1A, 0x2B, 0x17, 0x06, 0xA3, 0x03,  // sI.+....
                /* 0F78 */  0x23, 0x01, 0xD1, 0xB0, 0x7C, 0x98, 0x04, 0xBC,  // #...|...
                /* 0F80 */  0x04, 0x39, 0xD7, 0xA0, 0xAF, 0x2C, 0x3E, 0x53,  // .9...,>S
                /* 0F88 */  0xE1, 0x8E, 0x1D, 0xC0, 0xEF, 0x58, 0x83, 0x1D,  // .....X..
                /* 0F90 */  0x3A, 0xAC, 0xEB, 0xB4, 0xBD, 0x63, 0x08, 0xF3,  // :....c..
                /* 0F98 */  0x29, 0xC3, 0x47, 0x48, 0x36, 0x2C, 0x70, 0x43,  // ).GH6,pC
                /* 0FA0 */  0x79, 0xE8, 0xE0, 0x8B, 0x32, 0x74, 0x34, 0xF4,  // y...2t4.
                /* 0FA8 */  0xFF, 0x3F, 0x41, 0xD4, 0xF7, 0x03, 0x5F, 0x2C,  // .?A..._,
                /* 0FB0 */  0xA2, 0x3E, 0x7F, 0x78, 0x54, 0x60, 0xFF, 0x7A,  // .>.xT`.z
                /* 0FB8 */  0x68, 0xEC, 0x20, 0x1C, 0x15, 0x1C, 0xC8, 0x73,  // h. ....s
                /* 0FC0 */  0x31, 0xE6, 0x63, 0x94, 0x87, 0x0E, 0x7E, 0x0B,  // 1.c...~.
                /* 0FC8 */  0xA3, 0x02, 0xE5, 0x31, 0x07, 0x78, 0xEB, 0x34,  // ...1.x.4
                /* 0FD0 */  0xA8, 0xD1, 0xE3, 0x31, 0x07, 0x5C, 0xC9, 0x8E,  // ...1.\..
                /* 0FD8 */  0x39, 0x68, 0x7D, 0x40, 0x3A, 0x18, 0x62, 0x8E,  // 9h}@:.b.
                /* 0FE0 */  0x39, 0x30, 0x14, 0x1D, 0x73, 0x50, 0x5A, 0x60,  // 90..sPZ`
                /* 0FE8 */  0xA4, 0xC5, 0xC1, 0xFF, 0xFF, 0xAC, 0x82, 0x49,  // .......I
                /* 0FF0 */  0x7F, 0x66, 0xA3, 0x20, 0x3E, 0xAB, 0xF8, 0x98,  // .f. >...
                /* 0FF8 */  0x03, 0x98, 0xC8, 0x70, 0x71, 0x40, 0xAB, 0xB8,  // ...pq@..
                /* 1000 */  0xA7, 0x20, 0x6F, 0x6A, 0xC0, 0xEC, 0xD6, 0x80,  // . oj....
                /* 1008 */  0xCD, 0x71, 0x4A, 0x41, 0x5F, 0xE3, 0x7D, 0x4A,  // .qJA_.}J
                /* 1010 */  0x81, 0x31, 0x27, 0xB0, 0x1E, 0x0A, 0x7C, 0x9A,  // .1'...|.
                /* 1018 */  0x03, 0xDB, 0x51, 0xDF, 0x57, 0x14, 0xF8, 0x63,  // ..Q.W..c
                /* 1020 */  0x02, 0xC7, 0xFF, 0x7F, 0x4C, 0x30, 0x90, 0x3C,  // ....L0.<
                /* 1028 */  0x6D, 0xB0, 0x5D, 0x1D, 0x3C, 0x26, 0x9C, 0x8E,  // m.].<&..
                /* 1030 */  0x0B, 0x0A, 0x84, 0x29, 0x81, 0xF5, 0x0E, 0xE3,  // ...)....
                /* 1038 */  0x29, 0x81, 0xED, 0x4A, 0x08, 0x58, 0xBC, 0xDC,  // )..J.X..
                /* 1040 */  0x80, 0xE3, 0x4A, 0x08, 0x3C, 0xFE, 0xFF, 0x97,  // ..J.<...
                /* 1048 */  0x1B, 0xA0, 0x70, 0x25, 0x04, 0x99, 0xFE, 0x7F,  // ..p%....
                /* 1050 */  0x82, 0xAE, 0xB6, 0x38, 0x15, 0x40, 0xBA, 0x12,  // ...8.@..
                /* 1058 */  0xB2, 0x71, 0x3C, 0xC7, 0x78, 0x98, 0x0F, 0xA8,  // .q<.x...
                /* 1060 */  0x3E, 0xCA, 0xB0, 0xF1, 0xBD, 0x40, 0xF8, 0x20,  // >....@. 
                /* 1068 */  0xFB, 0x10, 0xE0, 0xCC, 0xAB, 0xD6, 0xF5, 0x86,  // ........
                /* 1070 */  0xA7, 0x85, 0x91, 0xF2, 0xAB, 0x2D, 0x4A, 0xEB,  // .....-J.
                /* 1078 */  0xD5, 0x96, 0x82, 0x78, 0x74, 0xBE, 0xDE, 0x00,  // ...xt...
                /* 1080 */  0x7C, 0xB8, 0x75, 0xC0, 0xFD, 0xFF, 0xDF, 0x3A,  // |.u....:
                /* 1088 */  0xC0, 0x74, 0xFA, 0xF4, 0x65, 0x80, 0x1F, 0x3C,  // .t..e..<
                /* 1090 */  0x39, 0x88, 0x01, 0x7D, 0xB0, 0x05, 0xBC, 0x1C,  // 9..}....
                /* 1098 */  0x1B, 0x7D, 0x65, 0xC0, 0x9F, 0x8E, 0xD8, 0xE5,  // .}e.....
                /* 10A0 */  0xDE, 0x37, 0x0B, 0x13, 0xBC, 0x72, 0xFB, 0x44,  // .7...r.D
                /* 10A8 */  0x08, 0xEE, 0x43, 0x03, 0xB8, 0x06, 0x05, 0x73,  // ..C....s
                /* 10B0 */  0x10, 0xE7, 0xE2, 0x9B, 0x99, 0x07, 0x05, 0xEE,  // ........
                /* 10B8 */  0xCB, 0x8F, 0x07, 0x05, 0xB6, 0xFF, 0xFF, 0xA0,  // ........
                /* 10C0 */  0x60, 0xC0, 0x06, 0x7C, 0x37, 0x38, 0x70, 0x60,  // `..|78p`
                /* 10C8 */  0x71, 0xC5, 0xF1, 0xA0, 0x80, 0xC5, 0xC0, 0x81,  // q.......
                /* 10D0 */  0xC5, 0x0D, 0xC4, 0x83, 0x02, 0xD7, 0xB9, 0xD2,  // ........
                /* 10D8 */  0x83, 0xC2, 0x1D, 0x33, 0x2C, 0x12, 0x50, 0xB7,  // ...3,.P.
                /* 10E0 */  0x90, 0xE7, 0x93, 0x13, 0xC7, 0x8C, 0x0A, 0xEC,  // ........
                /* 10E8 */  0x1E, 0x46, 0x05, 0x54, 0x66, 0x8E, 0x19, 0x15,  // .F.Tf...
                /* 10F0 */  0x78, 0xFE, 0xFF, 0xA3, 0x82, 0x05, 0xE3, 0x51,  // x......Q
                /* 10F8 */  0x81, 0xEB, 0x3E, 0x05, 0xBC, 0xB5, 0x3A, 0x3C,  // ..>...:<
                /* 1100 */  0x7C, 0x82, 0x4D, 0xEB, 0x7D, 0x0A, 0x9D, 0xF8,  // |.M.}...
                /* 1108 */  0x61, 0xA1, 0xC3, 0x27, 0xBB, 0x4F, 0xC1, 0xCE,  // a..'.O..
                /* 1110 */  0x77, 0x9F, 0x42, 0x25, 0x83, 0xD1, 0x71, 0xD4,  // w.B%..q.
                /* 1118 */  0x67, 0x1E, 0x9E, 0xE5, 0xCC, 0x43, 0x41, 0x6C,  // g....CAl
                /* 1120 */  0xE2, 0x3E, 0x05, 0x08, 0xFB, 0xFF, 0xDF, 0xA7,  // .>......
                /* 1128 */  0x80, 0xE1, 0xA0, 0xE1, 0x9C, 0x88, 0xF0, 0x83,  // ........
                /* 1130 */  0x06, 0xEB, 0xD5, 0x81, 0x0F, 0x1A, 0x3C, 0x53,  // ......<S
                /* 1138 */  0x82, 0x79, 0xFC, 0xC0, 0x4C, 0x09, 0xAC, 0x47,  // .y..L..G
                /* 1140 */  0x26, 0xF0, 0x4D, 0x09, 0xCE, 0x71, 0x08, 0x3F,  // &.M..q.?
                /* 1148 */  0x25, 0xB0, 0x5E, 0x98, 0xC0, 0xF7, 0xFF, 0x9F,  // %.^.....
                /* 1150 */  0x12, 0xCC, 0x51, 0x83, 0xFF, 0xBC, 0x04, 0xBE,  // ..Q.....
                /* 1158 */  0x4B, 0xAE, 0xA7, 0x84, 0x3B, 0x08, 0xFB, 0x2C,  // K...;..,
                /* 1160 */  0x04, 0x63, 0x4C, 0x60, 0x3D, 0x2E, 0x81, 0x6F,  // .cL`=..o
                /* 1168 */  0x4C, 0x70, 0x87, 0x0D, 0xFE, 0xC3, 0x12, 0xF8,  // Lp......
                /* 1170 */  0x4E, 0xB9, 0xC0, 0xEE, 0xFF, 0x7F, 0xCA, 0x05,  // N.......
                /* 1178 */  0x9E, 0x30, 0x3E, 0xE5, 0x02, 0x9E, 0x6E, 0x51,  // .0>...nQ
                /* 1180 */  0x3A, 0xE5, 0x82, 0x2C, 0xCD, 0x3A, 0x74, 0x8B,  // :..,.:t.
                /* 1188 */  0xE2, 0x03, 0xB6, 0x26, 0x20, 0x8D, 0xEC, 0x24,  // ...& ..$
                /* 1190 */  0x22, 0xBE, 0x6F, 0x77, 0x3D, 0x2F, 0x9D, 0x97,  // ".ow=/..
                /* 1198 */  0x3A, 0x47, 0xD0, 0x4D, 0xE6, 0x1D, 0xC0, 0xD0,  // :G.M....
                /* 11A0 */  0x56, 0x01, 0xA8, 0x3B, 0x14, 0xCF, 0x4F, 0xA2,  // V..;..O.
                /* 11A8 */  0xFC, 0xE7, 0x02, 0x54, 0xE2, 0x73, 0x01, 0x05,  // ...T.s..
                /* 11B0 */  0x31, 0xA0, 0xE3, 0x9C, 0x90, 0xD0, 0x3B, 0xF1,  // 1.....;.
                /* 11B8 */  0xB5, 0x8A, 0x21, 0x1C, 0x12, 0x1B, 0x08, 0x8C,  // ..!.....
                /* 11C0 */  0x6B, 0x12, 0xB8, 0xFE, 0xFF, 0xF7, 0x28, 0xEC,  // k.....(.
                /* 11C8 */  0x5D, 0x1C, 0x70, 0x3E, 0x18, 0x5F, 0x2B, 0x00,  // ].p>._+.
                /* 11D0 */  0x4F, 0x5E, 0x85, 0x5A, 0x74, 0x78, 0xAD, 0x00,  // O^.Ztx..
                /* 11D8 */  0x97, 0xA0, 0x55, 0xE8, 0x5A, 0x81, 0x8B, 0xB5,  // ..U.Z...
                /* 11E0 */  0x16, 0xDD, 0xC5, 0x99, 0x4F, 0x68, 0x61, 0x1C,  // ....Oha.
                /* 11E8 */  0xC9, 0xFF, 0xFF, 0x38, 0x22, 0x1F, 0xF2, 0x0B,  // ...8"...
                /* 11F0 */  0x44, 0x98, 0x10, 0x0F, 0xA4, 0xBA, 0x56, 0xA0,  // D.....V.
                /* 11F8 */  0x22, 0x50, 0x28, 0xFA, 0xB9, 0x00, 0x15, 0x76,  // "P(....v
                /* 1200 */  0xEC, 0x14, 0xC4, 0x80, 0x4E, 0x72, 0xAD, 0x40,  // ....Nr.@
                /* 1208 */  0x6B, 0x01, 0xD1, 0x2C, 0x70, 0x3A, 0x27, 0xA1,  // k..,p:'.
                /* 1210 */  0x49, 0xF9, 0x50, 0x01, 0xF8, 0x8A, 0x71, 0x8D,  // I.P...q.
                /* 1218 */  0x47, 0x09, 0xBF, 0xC6, 0x53, 0x10, 0x4F, 0xCC,  // G...S.O.
                /* 1220 */  0x87, 0x0A, 0xC0, 0xCB, 0xF1, 0xD7, 0xC3, 0xC2,  // ........
                /* 1228 */  0xC9, 0xB8, 0xE1, 0xF8, 0x8C, 0x49, 0x50, 0x0F,  // .....IP.
                /* 1230 */  0x0A, 0xF6, 0xFF, 0xFF, 0x38, 0x0E, 0xAC, 0x0E,  // ....8...
                /* 1238 */  0x1E, 0xC0, 0x5B, 0xA2, 0x4F, 0xA9, 0x87, 0x56,  // ..[.O..V
                /* 1240 */  0x90, 0x89, 0x39, 0x78, 0xA0, 0x23, 0xAD, 0x45,  // ..9x.#.E
                /* 1248 */  0x87, 0x56, 0x76, 0xF0, 0x80, 0x15, 0xE2, 0xE0,  // .Vv.....
                /* 1250 */  0x81, 0x92, 0x4F, 0x21, 0xF9, 0x67, 0x07, 0x94,  // ..O!.g..
                /* 1258 */  0xE0, 0xB3, 0x03, 0x05, 0xF1, 0xD8, 0x7C, 0xF0,  // ......|.
                /* 1260 */  0x00, 0x8C, 0x84, 0xB8, 0x39, 0x40, 0xF9, 0xFF,  // ....9@..
                /* 1268 */  0xDF, 0x1C, 0x70, 0x97, 0x56, 0x60, 0x76, 0x70,  // ..p.V`vp
                /* 1270 */  0xC0, 0x1E, 0x9F, 0x00, 0x8B, 0xC7, 0x0E, 0x40,  // .......@
                /* 1278 */  0x97, 0xD3, 0x63, 0x07, 0xAC, 0xFF, 0xFF, 0xB1,  // ..c.....
                /* 1280 */  0x03, 0x96, 0xF8, 0x55, 0xD0, 0xD0, 0x10, 0x92,  // ...U....
                /* 1288 */  0x0B, 0x83, 0xBA, 0xC7, 0x7A, 0xEC, 0xF8, 0xD1,  // ....z...
                /* 1290 */  0x1C, 0xCC, 0x31, 0x04, 0x67, 0xA7, 0x70, 0xC3,  // ..1.g.p.
                /* 1298 */  0xF1, 0x81, 0x7A, 0xEA, 0x8F, 0x9E, 0xA7, 0xF1,  // ..z.....
                /* 12A0 */  0xA8, 0xE1, 0x59, 0x3D, 0xF3, 0x85, 0x64, 0xD2,  // ..Y=..d.
                /* 12A8 */  0x86, 0x88, 0x3A, 0x16, 0x78, 0xAC, 0x6F, 0x05,  // ..:.x.o.
                /* 12B0 */  0x3E, 0x8A, 0x3F, 0xCD, 0x7A, 0x42, 0x61, 0x12,  // >.?.zBa.
                /* 12B8 */  0x78, 0x88, 0x0C, 0x8D, 0x9F, 0xF1, 0x19, 0x34,  // x......4
                /* 12C0 */  0xBF, 0x5D, 0xF8, 0x8E, 0xF1, 0x1A, 0xE0, 0xB9,  // .]......
                /* 12C8 */  0x99, 0xA0, 0xFB, 0xA1, 0x4B, 0x21, 0x82, 0x4E,  // ....K!.N
                /* 12D0 */  0x00, 0xEF, 0x04, 0x8F, 0xE2, 0xBD, 0x5D, 0x05,  // ......].
                /* 12D8 */  0x64, 0xEB, 0xF8, 0xA9, 0xD1, 0xC7, 0x6A, 0x0C,  // d.....j.
                /* 12E0 */  0x45, 0x10, 0x11, 0x82, 0x46, 0x31, 0x5E, 0x84,  // E...F1^.
                /* 12E8 */  0x50, 0x21, 0xA2, 0x44, 0x6D, 0x0E, 0x44, 0xDA,  // P!.Dm.D.
                /* 12F0 */  0x50, 0x05, 0x12, 0x2D, 0x98, 0x11, 0x98, 0xFD,  // P..-....
                /* 12F8 */  0x41, 0x10, 0xE9, 0xCF, 0x00, 0xDD, 0x33, 0x1C,  // A.....3.
                /* 1300 */  0xE9, 0x80, 0x82, 0x1E, 0xAE, 0x87, 0x7A, 0x8E,  // ......z.
                /* 1308 */  0xAF, 0x82, 0xCF, 0x2C, 0x06, 0x39, 0xC8, 0x73,  // ...,.9.s
                /* 1310 */  0x7B, 0x42, 0xC1, 0x80, 0xEB, 0x0C, 0x01, 0xED,  // {B......
                /* 1318 */  0xC2, 0x18, 0xF0, 0xDD, 0xD5, 0x87, 0x32, 0x02,  // ......2.
                /* 1320 */  0x87, 0x1A, 0xA2, 0x4F, 0x88, 0x9E, 0xC0, 0x21,  // ...O...!
                /* 1328 */  0x32, 0x40, 0x1F, 0x22, 0xE0, 0x8F, 0xC7, 0x87,  // 2@."....
                /* 1330 */  0x14, 0xCC, 0x81, 0x46, 0x83, 0x40, 0xDD, 0x8F,  // ...F.@..
                /* 1338 */  0xF9, 0x48, 0x4F, 0xEB, 0x49, 0xC6, 0xD7, 0x7B,  // .HO.I..{
                /* 1340 */  0x46, 0x50, 0xEC, 0xD9, 0x81, 0x8E, 0x07, 0xD6,  // FP......
                /* 1348 */  0xFF, 0x7F, 0x3C, 0x60, 0x52, 0x7C, 0x26, 0x10,  // ..<`R|&.
                /* 1350 */  0xC2, 0xC3, 0x83, 0xE7, 0xEB, 0x83, 0x9B, 0x4E,  // .......N
                /* 1358 */  0x22, 0x68, 0x68, 0x83, 0x9E, 0x8D, 0xCF, 0x10,  // "hh.....
                /* 1360 */  0xBE, 0x79, 0xB0, 0xA3, 0x05, 0x17, 0x75, 0xB4,  // .y....u.
                /* 1368 */  0x40, 0x9D, 0x16, 0x7C, 0x50, 0x60, 0xC7, 0x20,  // @..|P`. 
                /* 1370 */  0x7E, 0xB2, 0x60, 0xC7, 0x2D, 0x70, 0xCA, 0x3B,  // ~.`.-p.;
                /* 1378 */  0x84, 0x80, 0x02, 0xC4, 0x27, 0x0B, 0x36, 0x2F,  // ....'.6/
                /* 1380 */  0x0C, 0x81, 0x0F, 0xC9, 0xE1, 0x31, 0x87, 0x0E,  // .....1..
                /* 1388 */  0xC3, 0xF3, 0x53, 0xC2, 0xE3, 0x08, 0xC3, 0x7E,  // ..S....~
                /* 1390 */  0x23, 0xF1, 0x14, 0x0E, 0xC7, 0x47, 0x0A, 0x23,  // #....G.#
                /* 1398 */  0x04, 0x2F, 0xF7, 0x64, 0x41, 0x8E, 0xCB, 0x47,  // ./.dA..G
                /* 13A0 */  0x77, 0x4A, 0xA7, 0x7C, 0x08, 0x6C, 0xA8, 0x1E,  // wJ.|.l..
                /* 13A8 */  0x02, 0x3F, 0x2F, 0x78, 0x08, 0x7C, 0x00, 0xAD,  // .?/x.|..
                /* 13B0 */  0xCE, 0x8E, 0x9C, 0x4F, 0xCE, 0x09, 0x37, 0x5E,  // ...O..7^
                /* 13B8 */  0x3E, 0x26, 0xEC, 0x00, 0xB8, 0x42, 0x9B, 0x3E,  // >&...B.>
                /* 13C0 */  0x35, 0x1A, 0xB5, 0x6A, 0x50, 0xA6, 0x46, 0x99,  // 5..jP.F.
                /* 13C8 */  0x06, 0xB5, 0xFA, 0x54, 0x6A, 0xCC, 0x98, 0xE3,  // ...Tj...
                /* 13D0 */  0x55, 0xEB, 0x50, 0xE7, 0xF1, 0x5B, 0xC4, 0x13,  // U.P..[..
                /* 13D8 */  0x40, 0x20, 0x16, 0x4E, 0xA1, 0x73, 0xB5, 0x63,  // @ .N.s.c
                /* 13E0 */  0x80, 0x08, 0xC8, 0x32, 0x5E, 0x25, 0x02, 0xB2,  // ...2^%..
                /* 13E8 */  0x28, 0x10, 0x01, 0x39, 0xD2, 0x73, 0x5C, 0x40,  // (..9.s\@
                /* 13F0 */  0xCE, 0x07, 0x22, 0x20, 0xE7, 0x79, 0x63, 0x08,  // .." .yc.
                /* 13F8 */  0xC8, 0xE9, 0x40, 0x04, 0x64, 0x65, 0x6B, 0x11,  // ..@.dek.
                /* 1400 */  0x90, 0x65, 0x82, 0x08, 0xE8, 0xFF, 0x9F, 0x60,  // .e.....`
                /* 1408 */  0x36, 0x20, 0x1A, 0x14, 0x88, 0x86, 0x32, 0x01,  // 6 ....2.
                /* 1410 */  0xC4, 0x22, 0x82, 0x08, 0xC8, 0xE2, 0x54, 0x00,  // ."....T.
                /* 1418 */  0x31, 0xA9, 0x20, 0x02, 0x72, 0xD0, 0x17, 0x84,  // 1. .r...
                /* 1420 */  0x80, 0x9C, 0x1A, 0x44, 0x40, 0x96, 0xFA, 0x86,  // ...D@...
                /* 1428 */  0x10, 0x90, 0x75, 0x83, 0x08, 0xC8, 0x69, 0x81,  // ..u...i.
                /* 1430 */  0x68, 0x74, 0x20, 0x1A, 0xD3, 0x06, 0x10, 0x0B,  // ht .....
                /* 1438 */  0x0D, 0x22, 0x20, 0x0B, 0xF6, 0x01, 0xC4, 0xD4,  // ." .....
                /* 1440 */  0x83, 0x08, 0xC8, 0x91, 0x81, 0x68, 0x7E, 0x20,  // .....h~ 
                /* 1448 */  0x9A, 0xF5, 0x89, 0x20, 0x20, 0x27, 0x07, 0x11,  // ...  '..
                /* 1450 */  0x90, 0x35, 0xD3, 0x08, 0xC8, 0x09, 0x28, 0x04,  // .5....(.
                /* 1458 */  0xE4, 0xFC, 0x6F, 0x72, 0x01, 0x59, 0xCC, 0x7B,  // ..or.Y.{
                /* 1460 */  0x42, 0x40, 0x4E, 0x00, 0x22, 0x20, 0xC7, 0x01,  // B@N." ..
                /* 1468 */  0xA2, 0x22, 0x1E, 0x12, 0x02, 0xB2, 0x22, 0x10,  // ."....".
                /* 1470 */  0x01, 0x39, 0x3D, 0x10, 0xD5, 0x62, 0xE5, 0x58,  // .9=..b.X
                /* 1478 */  0x46, 0x9F, 0x64, 0x02, 0x72, 0x2C, 0x10, 0x01,  // F.d.r,..
                /* 1480 */  0x59, 0x8B, 0x17, 0x20, 0x26, 0x0C, 0x44, 0x03,  // Y.. &.D.
                /* 1488 */  0x20, 0x6F, 0x06, 0x01, 0x59, 0x12, 0x88, 0x80,  //  o..Y...
                /* 1490 */  0x1C, 0x0D, 0x88, 0x06, 0x05, 0xA2, 0x22, 0x7F,  // ......".
                /* 1498 */  0x5C, 0x02, 0xB2, 0x62, 0x10, 0x0D, 0x94, 0x00,  // \..b....
                /* 14A0 */  0xD1, 0xCC, 0x40, 0x54, 0xAA, 0x9B, 0x41, 0x53,  // ..@T..AS
                /* 14A8 */  0x10, 0x01, 0x39, 0x3B, 0x10, 0x15, 0xF2, 0x6E,  // ..9;...n
                /* 14B0 */  0x10, 0x90, 0x33, 0x83, 0x08, 0xC8, 0x0A, 0xEC,  // ..3.....
                /* 14B8 */  0x00, 0x31, 0xED, 0x7A, 0x80, 0x58, 0x10, 0x10,  // .1.z.X..
                /* 14C0 */  0x01, 0x59, 0xB2, 0x1F, 0x20, 0x16, 0x00, 0x44,  // .Y.. ..D
                /* 14C8 */  0x40, 0x8E, 0xFE, 0x3C, 0xD1, 0x00, 0x88, 0x21,  // @..<...!
                /* 14D0 */  0x20, 0x16, 0x01, 0x44, 0x40, 0x0E, 0x04, 0x44,  //  ..D@..D
                /* 14D8 */  0x85, 0x38, 0x02, 0x62, 0xAA, 0x40, 0x34, 0x70,  // .8.b.@4p
                /* 14E0 */  0x02, 0x44, 0xD5, 0xBC, 0x89, 0x34, 0x58, 0x62,  // .D...4Xb
                /* 14E8 */  0x09, 0x88, 0xE5, 0x02, 0x11, 0x90, 0x15, 0x69,  // .......i
                /* 14F0 */  0x02, 0x62, 0xFA, 0x40, 0x04, 0xF4, 0xFF, 0x4F,  // .b.@...O
                /* 14F8 */  0x30, 0x99, 0x27, 0x20, 0x16, 0x13, 0x44, 0x07,  // 0.' ..D.
                /* 1500 */  0x08, 0xF2, 0x36, 0x11, 0x90, 0x03, 0x82, 0xE8,  // ..6.....
                /* 1508 */  0xC0, 0x40, 0x54, 0x1D, 0x18, 0x28, 0x88, 0x06,  // .@T..(..
                /* 1510 */  0x4B, 0x80, 0x68, 0x68, 0x20, 0x2A, 0xF6, 0x19,  // K.hh *..
                /* 1518 */  0x25, 0x20, 0x2B, 0x07, 0xD1, 0x81, 0x81, 0x00,  // % +.....
                /* 1520 */  0xD1, 0xE8, 0x40, 0x54, 0xEF, 0x63, 0x28, 0x10,  // ..@T.c(.
                /* 1528 */  0x11, 0x0F, 0x22, 0x20, 0x07, 0x06, 0xA2, 0xE9,  // .." ....
                /* 1530 */  0x81, 0xA8, 0xE8, 0xF7, 0x9B, 0x0E, 0x0A, 0x04,  // ........
                /* 1538 */  0x44, 0x83, 0x20, 0xBE, 0x80, 0x98, 0x74, 0x10,  // D. ...t.
                /* 1540 */  0x01, 0x39, 0xF4, 0xAB, 0x45, 0x40, 0x96, 0xF0,  // .9..E@..
                /* 1548 */  0x35, 0x7A, 0xE0, 0x60, 0x20, 0x3A, 0x70, 0x10,  // 5z.` :p.
                /* 1550 */  0x20, 0x1A, 0x1F, 0x88, 0x8A, 0xF9, 0xB4, 0x68,  //  ......h
                /* 1558 */  0xE0, 0x04, 0x44, 0x03, 0x27, 0x40, 0x54, 0xCA,  // ..D.'@T.
                /* 1560 */  0xDB, 0xE5, 0x41, 0x81, 0x81, 0x68, 0xA0, 0x04,  // ..A..h..
                /* 1568 */  0x88, 0x06, 0x04, 0xA2, 0xFA, 0xAC, 0x01, 0x31,  // .......1
                /* 1570 */  0xB1, 0x20, 0x02, 0x72, 0x46, 0x20, 0x1A, 0x18,  // . .rF ..
                /* 1578 */  0x88, 0x26, 0x7B, 0x3A, 0x05, 0x22, 0x39, 0x41,  // .&{:."9A
                /* 1580 */  0x04, 0x64, 0x9D, 0xEF, 0xA8, 0x40, 0x44, 0x35,  // .d...@D5
                /* 1588 */  0x88, 0x80, 0x9C, 0x17, 0x88, 0xA6, 0x07, 0xA2,  // ........
                /* 1590 */  0xAA, 0x5F, 0x51, 0x81, 0x48, 0x06, 0x10, 0x1D,  // ._Q.H...
                /* 1598 */  0x18, 0x88, 0xBA, 0x03, 0x02, 0x75, 0x37, 0x48,  // .....u7H
                /* 15A0 */  0x0A, 0xA2, 0x41, 0x92, 0xF7, 0x8D, 0x80, 0x2C,  // ..A....,
                /* 15A8 */  0x1F, 0x44, 0x40, 0x0E, 0x03, 0x44, 0x85, 0xFC,  // .D@..D..
                /* 15B0 */  0xFB, 0x04, 0x64, 0x59, 0x20, 0x1A, 0x1C, 0x01,  // ..dY ...
                /* 15B8 */  0xA2, 0x01, 0x81, 0xA8, 0x38, 0x7F, 0x87, 0x02,  // ....8...
                /* 15C0 */  0x0A, 0x22, 0x20, 0x87, 0x7C, 0xC5, 0x09, 0xC8,  // ." .|...
                /* 15C8 */  0x89, 0x41, 0x34, 0x38, 0xF2, 0x95, 0x39, 0x38,  // .A48..98
                /* 15D0 */  0x06, 0xA2, 0x81, 0x92, 0x6F, 0x57, 0x20, 0xA2,  // ....oW .
                /* 15D8 */  0x16, 0x44, 0x40, 0x4E, 0x09, 0x44, 0x33, 0x03,  // .D@N.D3.
                /* 15E0 */  0x91, 0xFF, 0xFF, 0x5D, 0xDF, 0x07, 0x04, 0x0A,  // ...]....
                /* 15E8 */  0xA2, 0x83, 0x05, 0x79, 0xE4, 0x08, 0xC8, 0xCF,  // ...y....
                /* 15F0 */  0x1D, 0x03, 0x39, 0x29, 0x88, 0x80, 0x9C, 0x1B,  // ..9)....
                /* 15F8 */  0x88, 0x2A, 0x7E, 0x40, 0x07, 0x22, 0xFA, 0x41,  // .*~@.".A
                /* 1600 */  0x04, 0xE4, 0xDC, 0x40, 0x54, 0xC5, 0x23, 0x48,  // ...@T.#H
                /* 1608 */  0x87, 0x0C, 0xF2, 0x66, 0xD3, 0x21, 0x83, 0x80,  // ...f.!..
                /* 1610 */  0xE8, 0x60, 0x40, 0x80, 0xA8, 0x16, 0x95, 0x03,  // .`@.....
                /* 1618 */  0xA6, 0x20, 0x1A, 0x30, 0x71, 0x09, 0xC4, 0xA4,  // . .0q...
                /* 1620 */  0xBF, 0x7B, 0x02, 0x33, 0x10, 0x9D, 0x9C, 0xC8,  // .{.3....
                /* 1628 */  0x7B, 0x28, 0x10, 0x91, 0x03, 0x22, 0x20, 0xC7,  // {(..." .
                /* 1630 */  0x00, 0xA2, 0xA1, 0x80, 0xA8, 0x96, 0x17, 0xE8,  // ........
                /* 1638 */  0x43, 0x02, 0x03, 0x11, 0x90, 0xE3, 0x00, 0xD1,  // C.......
                /* 1640 */  0x6C, 0x40, 0x34, 0xC4, 0x6B, 0x28, 0x10, 0x89,  // l@4.k(..
                /* 1648 */  0x04, 0xA2, 0x3B, 0x26, 0x79, 0x10, 0x05, 0x22,  // ..;&y.."
                /* 1650 */  0xD2, 0x40, 0x74, 0x08, 0x20, 0x40, 0x34, 0x20,  // .@t. @4 
                /* 1658 */  0x10, 0x15, 0xF6, 0x2B, 0xD2, 0xA1, 0x87, 0x80,  // ...+....
                /* 1660 */  0xE8, 0xA0, 0x41, 0xFE, 0x52, 0x07, 0xCE, 0x40,  // ..A.R..@
                /* 1668 */  0x04, 0xE4, 0x84, 0x3F, 0xA4, 0x40, 0x24, 0x2F,  // ...?.@$/
                /* 1670 */  0x88, 0x80, 0xAC, 0xFB, 0x81, 0x14, 0x88, 0xA4,  // ........
                /* 1678 */  0x00, 0xD1, 0xE1, 0x80, 0xBC, 0xAB, 0x1E, 0x48,  // .......H
                /* 1680 */  0x18, 0x88, 0x80, 0xAC, 0x41, 0xED, 0x81, 0x86,  // ....A...
                /* 1688 */  0x82, 0xE8, 0x20, 0x44, 0xDC, 0x02, 0xB1, 0xA4,  // .. D....
                /* 1690 */  0x20, 0x3A, 0x68, 0x10, 0xBB, 0x87, 0x01, 0x0A,  //  :h.....
                /* 1698 */  0xA2, 0x43, 0x04, 0xD1, 0x7B, 0x88, 0xA0, 0x20,  // .C..{.. 
                /* 16A0 */  0x3A, 0xA0, 0x90, 0xEF, 0xD3, 0x03, 0x0A, 0x7B,  // :......{
                /* 16A8 */  0x7F, 0x09, 0xC8, 0x69, 0x9E, 0xB3, 0x1A, 0x28,  // ...i...(
                /* 16B0 */  0x01, 0x11, 0x90, 0xB5, 0x3D, 0x01, 0x05, 0x64,  // ....=..d
                /* 16B8 */  0xA5, 0x20, 0x3A, 0x18, 0x90, 0xF7, 0x97, 0x0E,  // . :.....
                /* 16C0 */  0x06, 0x04, 0x44, 0x03, 0x23, 0xFF, 0xAA, 0x03,  // ..D.#...
                /* 16C8 */  0x63, 0x20, 0x02, 0xB2, 0x8A, 0x5F, 0xAA, 0x80,  // c ..._..
                /* 16D0 */  0xAC, 0x09, 0x44, 0x40, 0xCE, 0xF4, 0x9E, 0x0A,  // ..D@....
                /* 16D8 */  0x44, 0x12, 0x82, 0x08, 0xE8, 0xFF, 0xFF, 0xE0,  // D.......
                /* 16E0 */  0x20, 0xD5, 0x07, 0x07, 0x0A, 0xA2, 0x03, 0x11,  //  .......
                /* 16E8 */  0x79, 0xDC, 0x05, 0x22, 0xC1, 0x41, 0x34, 0x68,  // y..".A4h
                /* 16F0 */  0xF2, 0x1E, 0xD4, 0x61, 0x85, 0x80, 0xE8, 0x50,  // ...a...P
                /* 16F8 */  0x44, 0xDE, 0x6B, 0x3A, 0xD8, 0x10, 0x10, 0x01,  // D.k:....
                /* 1700 */  0x59, 0xEE, 0xB3, 0xEB, 0x41, 0x85, 0x81, 0xE8,  // Y...A...
                /* 1708 */  0x80, 0x40, 0x5E, 0xA1, 0x3A, 0x20, 0x10, 0x10,  // .@^.: ..
                /* 1710 */  0x01, 0x39, 0x96, 0x71, 0x20, 0x96, 0x11, 0x44,  // .9.q ..D
                /* 1718 */  0x40, 0x16, 0xF8, 0x51, 0xD4, 0x60, 0x08, 0x88,  // @..Q.`..
                /* 1720 */  0x06, 0x49, 0x5E, 0x79, 0x07, 0xC9, 0x40, 0x74,  // .I^y..@t
                /* 1728 */  0x08, 0x21, 0x9F, 0x2E, 0x01, 0x39, 0x3C, 0x88,  // .!...9<.
                /* 1730 */  0x80, 0xAC, 0xFC, 0x2B, 0xF6, 0xB0, 0xC2, 0x40,  // ...+...@
                /* 1738 */  0x74, 0x78, 0x21, 0x8F, 0x46, 0x01, 0x39, 0x02,  // tx!.F.9.
                /* 1740 */  0x88, 0x80, 0xAC, 0x43, 0xFC, 0x81, 0x8B, 0x82,  // ...C....
                /* 1748 */  0x08, 0xC8, 0x12, 0xDE, 0x82, 0x02, 0xB2, 0x20,  // ....... 
                /* 1750 */  0x10, 0x1D, 0xB2, 0x08, 0x10, 0x8D, 0x08, 0x44,  // .......D
                /* 1758 */  0x15, 0x3E, 0x1E, 0x03, 0x11, 0xB9, 0x20, 0x3A,  // .>.... :
                /* 1760 */  0x84, 0x90, 0x17, 0xA0, 0x0E, 0x21, 0x04, 0x44,  // .....!.D
                /* 1768 */  0x40, 0x0E, 0x0B, 0x44, 0xA3, 0x03, 0x51, 0xED,  // @..D..Q.
                /* 1770 */  0xFA, 0x0F, 0x16, 0x14, 0x44, 0x40, 0x96, 0xED,  // ....D@..
                /* 1778 */  0x1F, 0x88, 0x85, 0x00, 0xD1, 0x81, 0x81, 0x04,  // ........
                /* 1780 */  0x38, 0x9C, 0x50, 0x10, 0x01, 0x39, 0x57, 0x01,  // 8.P..9W.
                /* 1788 */  0x20, 0x16, 0x12, 0x44, 0x40, 0x56, 0x99, 0x00,  //  ..D@V..
                /* 1790 */  0x88, 0x49, 0x06, 0xD1, 0x80, 0x49, 0x83, 0x01,  // .I...I..
                /* 1798 */  0x51, 0x10, 0x01, 0x39, 0xF9, 0x13, 0x50, 0x40,  // Q..9..P@
                /* 17A0 */  0x96, 0x51, 0xE1, 0xE0, 0x41, 0x41, 0x74, 0xF0,  // .Q..AAt.
                /* 17A8 */  0x20, 0x19, 0x0E, 0x39, 0xB4, 0xC3, 0x21, 0x87,  //  ..9..!.
                /* 17B0 */  0x82, 0xE8, 0xC0, 0x41, 0x4A, 0x1C, 0x38, 0x28,  // ...AJ.8(
                /* 17B8 */  0x88, 0x0E, 0x0A, 0x24, 0xC5, 0x41, 0x81, 0x82,  // ...$.A..
                /* 17C0 */  0xE8, 0x30, 0x40, 0x5A, 0x1C, 0x06, 0x28, 0x88,  // .0@Z..(.
                /* 17C8 */  0x80, 0x2C, 0x2D, 0x06, 0x10, 0xD3, 0x09, 0x22,  // .,-...."
                /* 17D0 */  0x20, 0xAB, 0xAA, 0x01, 0xC4, 0x34, 0x82, 0x08,  //  ....4..
                /* 17D8 */  0xE8, 0xFF, 0xFF, 0x00, 0xA1, 0x1C, 0x07, 0x08,  // ........
                /* 17E0 */  0x0A, 0xA2, 0x43, 0x09, 0x79, 0xC3, 0x0B, 0xC8,  // ..C.y...
                /* 17E8 */  0x39, 0x40, 0x74, 0x40, 0x21, 0x40, 0x54, 0x4B,  // 9@t@!@TK
                /* 17F0 */  0x91, 0xC1, 0x51, 0x10, 0x01, 0x59, 0xC7, 0x43,  // ..Q..Y.C
                /* 17F8 */  0x5B, 0x40, 0xCE, 0xD0, 0x64, 0x60, 0x14, 0x44,  // [@..d`.D
                /* 1800 */  0x40, 0x56, 0x1F, 0x05, 0x88, 0x65, 0x01, 0xD1,  // @V...e..
                /* 1808 */  0xC0, 0x48, 0x95, 0x81, 0x51, 0x10, 0x01, 0x39,  // .H..Q..9
                /* 1810 */  0x11, 0x10, 0xCD, 0x07, 0x44, 0xB5, 0x65, 0x39,  // ....D.e9
                /* 1818 */  0x30, 0x50, 0x10, 0x1D, 0x6C, 0x08, 0x10, 0xCD,  // 0P..l...
                /* 1820 */  0x0C, 0x44, 0xF5, 0xBE, 0x91, 0x75, 0x90, 0x20,  // .D...u. 
                /* 1828 */  0x20, 0x02, 0x72, 0x62, 0x20, 0x1A, 0x1F, 0x88,  //  .rb ...
                /* 1830 */  0x0A, 0x2F, 0x73, 0xD8, 0xA0, 0x20, 0x1A, 0x1C,  // ./s.. ..
                /* 1838 */  0x01, 0xA2, 0x5A, 0xD2, 0x0C, 0x8C, 0x82, 0x68,  // ..Z....h
                /* 1840 */  0x60, 0x04, 0x88, 0xCA, 0x6F, 0x73, 0x18, 0xA2,  // `...os..
                /* 1848 */  0x20, 0x3A, 0xB8, 0x90, 0x3A, 0x40, 0x4C, 0x19,  //  :..:@L.
                /* 1850 */  0x88, 0x0E, 0x31, 0x04, 0x88, 0x66, 0x03, 0xA2,  // ..1..f..
                /* 1858 */  0x49, 0xF2, 0x1C, 0xC0, 0x28, 0x88, 0x80, 0xAC,  // I...(...
                /* 1860 */  0xA9, 0x0F, 0x10, 0x53, 0x08, 0xA2, 0x83, 0x0A,  // ...S....
                /* 1868 */  0x01, 0xA2, 0x49, 0x81, 0xA8, 0xC6, 0x40, 0x07,  // ..I...@.
                /* 1870 */  0x37, 0x0A, 0xA2, 0x43, 0x08, 0x01, 0xA2, 0xC9,  // 7..C....
                /* 1878 */  0x81, 0xA8, 0xEA, 0x42, 0x07, 0x27, 0x0A, 0xA2,  // ...B.'..
                /* 1880 */  0xC3, 0x0A, 0x01, 0xA2, 0x6A, 0x12, 0x01, 0xB1,  // ....j...
                /* 1888 */  0x2C, 0x8D, 0x80, 0x58, 0x30, 0x10, 0x01, 0x59,  // ,..X0..Y
                /* 1890 */  0xCD, 0x93, 0x56, 0x07, 0x1C, 0x02, 0xA2, 0x03,  // ..V.....
                /* 1898 */  0x0A, 0x01, 0xA2, 0x01, 0x81, 0xA8, 0xB0, 0x4A,  // .......J
                /* 18A0 */  0x40, 0x4C, 0x25, 0x88, 0x80, 0x9C, 0x0E, 0x88,  // @L%.....
                /* 18A8 */  0x46, 0x05, 0xA2, 0x12, 0x33, 0x01, 0x31, 0xBD,  // F...3.1.
                /* 18B0 */  0x20, 0x3A, 0x20, 0x12, 0x20, 0x9A, 0x1A, 0x88,  //  : . ...
                /* 18B8 */  0xFC, 0xFF, 0x8F, 0x14, 0xEA, 0x04, 0xC4, 0xB4,  // ........
                /* 18C0 */  0x83, 0x08, 0xC8, 0x42, 0x43, 0x01, 0x31, 0xD9,  // ...BC.1.
                /* 18C8 */  0x20, 0x3A, 0xD0, 0x91, 0x52, 0x87, 0x05, 0x9A,  //  :..R...
                /* 18D0 */  0x0A, 0x88, 0xA5, 0x06, 0x11, 0x90, 0x35, 0xB4,  // ......5.
                /* 18D8 */  0x3A, 0x58, 0xD0, 0x58, 0x40, 0x2C, 0x0F, 0x88,  // :X.X@,..
                /* 18E0 */  0x0E, 0x0C, 0xA4, 0xD6, 0x81, 0x81, 0x82, 0xE8,  // ........
                /* 18E8 */  0xC0, 0x40, 0x72, 0x1D, 0x18, 0x28, 0x88, 0x0E,  // .@r..(..
                /* 18F0 */  0x44, 0xA4, 0xD7, 0x81, 0x81, 0x82, 0x08, 0xC8,  // D.......
                /* 18F8 */  0xB2, 0x82, 0x1D, 0x2A, 0x28, 0x88, 0x0E, 0x76,  // ...*(..v
                /* 1900 */  0xA4, 0xD8, 0xC1, 0x8E, 0x82, 0x08, 0xC8, 0x39,  // .......9
                /* 1908 */  0x9A, 0x0D, 0x81, 0x46, 0x03, 0xA2, 0x20, 0xF4,  // ...F.. .
                /* 1910 */  0xFF, 0x0F                                       // ..
            })
            Name (EPY1, 0xFFFFFFFF)
            Name (EPY2, 0xFFFFFFFF)
            Name (EPY3, 0xFFFFFFFF)
            Name (EPY4, 0xFFFFFFFF)
            Method (EYPO, 0, Serialized)
            {
                Return (EPY1) /* \RMTW.EPY1 */
            }

            Method (EYPT, 0, Serialized)
            {
                Return (EPY2) /* \RMTW.EPY2 */
            }

            Method (EYPE, 0, Serialized)
            {
                Return (EPY3) /* \RMTW.EPY3 */
            }

            Method (EYPF, 0, Serialized)
            {
                Return (EPY4) /* \RMTW.EPY4 */
            }

            Name (RAMA, 0x74A29018)
            Name (WBUF, Buffer (0x50){})
            OperationRegion (\RAMX, SystemMemory, RAMA, 0x0100)
            Field (RAMX, ByteAcc, NoLock, Preserve)
            {
                WFUN,   32, 
                WSIZ,   32, 
                Offset (0x10), 
                IDAT,   896, 
                Offset (0x80), 
                ODAT,   1024
            }

            Mutex (WMTX, 0x00)
            Name (LSTF, Buffer (0x04){})
            Name (LSTI, Buffer (0x70){})
            Name (CURF, Buffer (0x04){})
            Name (CURI, Buffer (0x70){})
            Method (WMII, 0, Serialized)
            {
                CURF = WFUN /* \RMTW.WFUN */
                CURI = IDAT /* \RMTW.IDAT */
                If (((CURF == LSTF) && (CURI == LSTI)))
                {
                    Return (Zero)
                }
                Else
                {
                    ODAT = Zero
                    \_SB.ISMI (0xDA)
                    LSTF = WFUN /* \RMTW.WFUN */
                    LSTI = IDAT /* \RMTW.IDAT */
                }
            }

            Method (LERR, 1, Serialized)
            {
                WBUF = ODAT /* \RMTW.ODAT */
                Return (DerefOf (WBUF [Zero]))
            }

            Method (GBOD, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000001
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (SBOD, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000002
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (GBON, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000003
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (GLBN, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000006
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (ISLG, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000007
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (GLBO, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000008
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (SLBO, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000009
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (SAPW, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000004
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (SUPW, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000005
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (SBOG, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x8000000A
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (LDFT, 0, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x8000000B
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (SFTB, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x8000000C
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (SDFT, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x8000000D
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (SFTM, 0, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x8000000E
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (DCTL, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x8000000F
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (GFAN, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000010
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (SFAN, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000011
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (GFCV, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000012
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (SFCV, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000013
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (CKPW, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000014
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (GTOD, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000015
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (STOD, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000016
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \RMTW.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \RMTW.WBUF */
                }

                Return (Ones)
            }

            Method (AAPD, 1, Serialized)
            {
                Return (Zero)
            }

            Method (DEVS, 1, Serialized)
            {
                CreateDWordField (Arg0, Zero, DVID)
                CreateDWordField (Arg0, 0x04, CPAR)
                Switch (DVID)
                {
                    Case (Zero)
                    {
                        Return (Zero)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Method (DSTS, 1, Serialized)
            {
                CreateDWordField (Arg0, Zero, DVID)
                Switch (DVID)
                {
                    Case (0xA0000000)
                    {
                        Local0 = 0x02
                    }
                    Case (Zero)
                    {
                        Return (Zero)
                    }
                    Default
                    {
                        Local0 = Zero
                    }

                }

                Local0 &= 0x0007FFFF
                Return (Local0)
            }

            Method (WMBD, 3, Serialized)
            {
                Local0 = One
                Switch (Arg1)
                {
                    Case (0x424D5352)
                    {
                        Return (RSMB (Arg2))
                    }
                    Case (0x424D5357)
                    {
                        Return (WSMB (Arg2))
                    }
                    Case (0x574D5352)
                    {
                        Return (RSMW (Arg2))
                    }
                    Case (0x574D5357)
                    {
                        Return (WSMW (Arg2))
                    }
                    Case (0x4B4D5352)
                    {
                        Return (RSMK (Arg2))
                    }
                    Case (0x4B4D5357)
                    {
                        Return (WSMK (Arg2))
                    }
                    Case (0x52494F42)
                    {
                        Return (RIOB (Arg2))
                    }
                    Case (0x57494F42)
                    {
                        Return (WIOB (Arg2))
                    }
                    Case (0x52494F57)
                    {
                        Return (RIOW (Arg2))
                    }
                    Case (0x57494F57)
                    {
                        Return (WIOW (Arg2))
                    }
                    Case (0x52494F44)
                    {
                        Return (RIOD (Arg2))
                    }
                    Case (0x57494F44)
                    {
                        Return (WIOD (Arg2))
                    }
                    Case (0x52504349)
                    {
                        Return (RPCI (Arg2))
                    }
                    Case (0x57504349)
                    {
                        Return (WPCI (Arg2))
                    }
                    Case (0x52494458)
                    {
                        Return (RIDX (Arg2))
                    }
                    Case (0x57494458)
                    {
                        Return (WIDX (Arg2))
                    }
                    Case (0x52444D52)
                    {
                        Return (RDMR (Arg2))
                    }
                    Case (0x57524D52)
                    {
                        Return (WRMR (Arg2))
                    }
                    Case (0x52434944)
                    {
                        Return (RCID (Arg2))
                    }
                    Case (0x52444543)
                    {
                        Return (RDEC (Arg2))
                    }
                    Case (0x57524543)
                    {
                        Return (WREC (Arg2))
                    }
                    Case (0x5253494F)
                    {
                        Return (RSIO (Arg2))
                    }
                    Case (0x5753494F)
                    {
                        Return (WSIO (Arg2))
                    }
                    Case (0x5248574D)
                    {
                        Return (RHWM (Arg2))
                    }
                    Case (0x5748574D)
                    {
                        Return (WHWM (Arg2))
                    }
                    Case (0x4252494F)
                    {
                        Return (BRIO (Arg2))
                    }
                    Case (0x4257494F)
                    {
                        Return (BWIO (Arg2))
                    }
                    Case (0x4252484D)
                    {
                        Return (BRHM (Arg2))
                    }
                    Case (0x4257484D)
                    {
                        Return (BWHM (Arg2))
                    }
                    Case (0x42524543)
                    {
                        Return (BREC (Arg2))
                    }
                    Case (0x42574543)
                    {
                        Return (BWEC (Arg2))
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }

                Return (Local0)
            }

            Mutex (ASMX, 0x00)
            Method (RIOB, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    OperationRegion (TMIO, SystemIO, W_PT, One)
                    Field (TMIO, ByteAcc, NoLock, Preserve)
                    {
                        PT08,   8
                    }

                    Local0 = PT08 /* \RMTW.RIOB.PT08 */
                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WIOB, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    CreateByteField (Arg0, 0x02, B_DT)
                    OperationRegion (TMIO, SystemIO, W_PT, One)
                    Field (TMIO, ByteAcc, NoLock, Preserve)
                    {
                        PT08,   8
                    }

                    PT08 = B_DT /* \RMTW.WIOB.B_DT */
                    Release (ASMX)
                }

                Return (Ones)
            }

            Method (RIOW, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    OperationRegion (TMIO, SystemIO, W_PT, 0x02)
                    Field (TMIO, WordAcc, NoLock, Preserve)
                    {
                        PT16,   16
                    }

                    Local0 = PT16 /* \RMTW.RIOW.PT16 */
                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WIOW, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    CreateWordField (Arg0, 0x02, W_DT)
                    OperationRegion (TMIO, SystemIO, W_PT, 0x02)
                    Field (TMIO, WordAcc, NoLock, Preserve)
                    {
                        PT16,   16
                    }

                    PT16 = W_DT /* \RMTW.WIOW.W_DT */
                    Release (ASMX)
                }

                Return (Ones)
            }

            Method (RIOD, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    OperationRegion (TMIO, SystemIO, W_PT, 0x04)
                    Field (TMIO, DWordAcc, NoLock, Preserve)
                    {
                        PT32,   32
                    }

                    Local0 = PT32 /* \RMTW.RIOD.PT32 */
                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WIOD, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    CreateDWordField (Arg0, 0x02, D_DT)
                    OperationRegion (TMIO, SystemIO, W_PT, 0x04)
                    Field (TMIO, DWordAcc, NoLock, Preserve)
                    {
                        PT32,   32
                    }

                    PT32 = D_DT /* \RMTW.WIOD.D_DT */
                    Release (ASMX)
                }

                Return (Ones)
            }

            Method (RPCI, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, TBUS)
                    CreateByteField (Arg0, One, TDEV)
                    CreateByteField (Arg0, 0x02, TFUN)
                    CreateWordField (Arg0, 0x04, TREG)
                    CreateByteField (Arg0, 0x06, W_SZ)
                    Local0 = TBUS /* \RMTW.RPCI.TBUS */
                    Local0 <<= 0x05
                    Local0 += TDEV /* \RMTW.RPCI.TDEV */
                    Local0 <<= 0x03
                    Local0 += TFUN /* \RMTW.RPCI.TFUN */
                    Local0 <<= 0x0C
                    Local0 += TREG /* \RMTW.RPCI.TREG */
                    Local0 += PEBS /* \PEBS */
                    OperationRegion (PCFG, SystemMemory, Local0, 0x04)
                    Field (PCFG, ByteAcc, NoLock, Preserve)
                    {
                        BCFG,   8
                    }

                    Field (PCFG, WordAcc, NoLock, Preserve)
                    {
                        WCFG,   16
                    }

                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        XCFG,   32
                    }

                    Local0 = Zero
                    Switch (ToInteger (W_SZ))
                    {
                        Case (One)
                        {
                            Local0 = BCFG /* \RMTW.RPCI.BCFG */
                        }
                        Case (0x02)
                        {
                            Local0 = WCFG /* \RMTW.RPCI.WCFG */
                        }
                        Case (0x04)
                        {
                            Local0 = XCFG /* \RMTW.RPCI.XCFG */
                        }
                        Default
                        {
                            Local0 = Ones
                        }

                    }

                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WPCI, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, TBUS)
                    CreateByteField (Arg0, One, TDEV)
                    CreateByteField (Arg0, 0x02, TFUN)
                    CreateWordField (Arg0, 0x04, TREG)
                    CreateByteField (Arg0, 0x06, W_SZ)
                    CreateDWordField (Arg0, 0x08, TDAT)
                    Local0 = TBUS /* \RMTW.WPCI.TBUS */
                    Local0 <<= 0x05
                    Local0 += TDEV /* \RMTW.WPCI.TDEV */
                    Local0 <<= 0x03
                    Local0 += TFUN /* \RMTW.WPCI.TFUN */
                    Local0 <<= 0x0C
                    Local0 += TREG /* \RMTW.WPCI.TREG */
                    Local0 += PEBS /* \PEBS */
                    OperationRegion (PCFG, SystemMemory, Local0, 0x04)
                    Field (PCFG, ByteAcc, NoLock, Preserve)
                    {
                        BCFG,   8
                    }

                    Field (PCFG, WordAcc, NoLock, Preserve)
                    {
                        WCFG,   16
                    }

                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        XCFG,   32
                    }

                    Local0 = Zero
                    Switch (ToInteger (W_SZ))
                    {
                        Case (One)
                        {
                            BCFG = TDAT /* \RMTW.WPCI.TDAT */
                        }
                        Case (0x02)
                        {
                            WCFG = TDAT /* \RMTW.WPCI.TDAT */
                        }
                        Case (0x04)
                        {
                            XCFG = TDAT /* \RMTW.WPCI.TDAT */
                        }
                        Default
                        {
                            Local0 = Ones
                        }

                    }

                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (RIDX, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    CreateByteField (Arg0, 0x02, W_ID)
                    OperationRegion (TMIO, SystemIO, W_PT, 0x02)
                    Field (TMIO, ByteAcc, NoLock, Preserve)
                    {
                        IDXP,   8, 
                        DATP,   8
                    }

                    IDXP = ToInteger (W_ID)
                    Local0 = DATP /* \RMTW.RIDX.DATP */
                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WIDX, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    CreateByteField (Arg0, 0x02, W_ID)
                    CreateByteField (Arg0, 0x03, W_DT)
                    OperationRegion (TMIO, SystemIO, W_PT, 0x02)
                    Field (TMIO, ByteAcc, NoLock, Preserve)
                    {
                        IDXP,   8, 
                        DATP,   8
                    }

                    IDXP = ToInteger (W_ID)
                    DATP = W_DT /* \RMTW.WIDX.W_DT */
                    Release (ASMX)
                    Return (Zero)
                }

                Return (Ones)
            }

            Name (RGBF, Buffer (0x10){})
            CreateDWordField (RGBF, Zero, REAX)
            CreateDWordField (RGBF, 0x04, REBX)
            CreateDWordField (RGBF, 0x08, RECX)
            CreateDWordField (RGBF, 0x0C, REDX)
            Name (MRBF, Buffer (0x08){})
            CreateDWordField (MRBF, Zero, MEDX)
            CreateDWordField (MRBF, 0x04, MEAX)
            Method (RDMR, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateDWordField (Arg0, Zero, W_ID)
                    RGBF = \_SB.GMSR (W_ID)
                    MEDX = REDX /* \RMTW.REDX */
                    MEAX = REAX /* \RMTW.REAX */
                    Release (ASMX)
                    Return (MRBF) /* \RMTW.MRBF */
                }

                Return (Ones)
            }

            Method (WRMR, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateDWordField (Arg0, Zero, W_ID)
                    CreateDWordField (Arg0, 0x04, W_HI)
                    CreateDWordField (Arg0, 0x08, W_LW)
                    RECX = W_ID /* \RMTW.WRMR.W_ID */
                    REDX = W_HI /* \RMTW.WRMR.W_HI */
                    REAX = W_LW /* \RMTW.WRMR.W_LW */
                    Local0 = \_SB.SMSR (RGBF)
                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (RCID, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateDWordField (Arg0, Zero, W_ID)
                    RGBF = \_SB.GCID (W_ID)
                    Release (ASMX)
                    Return (RGBF) /* \RMTW.RGBF */
                }

                Return (Ones)
            }

            Method (RDEC, 1, Serialized)
            {
                Return (Ones)
                Return (Ones)
            }

            Method (WREC, 1, Serialized)
            {
                Return (Ones)
                Return (Ones)
            }

            Method (RSIO, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, W_LN)
                    CreateByteField (Arg0, One, W_ID)
                    Local0 = Ones
                    If ((Acquire (\_SB.PCI0.SBRG.SIO1.MUT0, 0xFFFF) == Zero))
                    {
                        \_SB.PCI0.SBRG.SIO1.ENFG (W_LN)
                        \_SB.PCI0.SBRG.SIO1.INDX = W_ID /* \RMTW.RSIO.W_ID */
                        Local0 = \_SB.PCI0.SBRG.SIO1.DATA
                        \_SB.PCI0.SBRG.SIO1.EXFG ()
                    }

                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WSIO, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, W_LN)
                    CreateByteField (Arg0, One, W_ID)
                    CreateByteField (Arg0, 0x02, W_DT)
                    Local0 = Ones
                    If ((Acquire (\_SB.PCI0.SBRG.SIO1.MUT0, 0xFFFF) == Zero))
                    {
                        \_SB.PCI0.SBRG.SIO1.ENFG (W_LN)
                        \_SB.PCI0.SBRG.SIO1.INDX = W_ID /* \RMTW.WSIO.W_ID */
                        \_SB.PCI0.SBRG.SIO1.DATA = W_DT /* \RMTW.WSIO.W_DT */
                        \_SB.PCI0.SBRG.SIO1.EXFG ()
                    }

                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            IndexField (\_SB.PCI0.SBRG.SIO1.INDX, \_SB.PCI0.SBRG.SIO1.DATA, ByteAcc, NoLock, Preserve)
            {
                Offset (0x28), 
                    ,   4, 
                HMLK,   1
            }

            Name (LCKS, Zero)
            Method (RHWM, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, W_BK)
                    CreateByteField (Arg0, One, W_ID)
                    OperationRegion (SHWM, SystemIO, IOHW, 0x0A)
                    Field (SHWM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x05), 
                        HIDX,   8, 
                        HDAT,   8
                    }

                    IndexField (HIDX, HDAT, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x4E), 
                        BANK,   4
                    }

                    \_SB.PCI0.SBRG.SIO1.ENFG (0x07)
                    LCKS = HMLK /* \RMTW.HMLK */
                    HMLK = Zero
                    BANK = W_BK /* \RMTW.RHWM.W_BK */
                    HIDX = W_ID /* \RMTW.RHWM.W_ID */
                    Local0 = HDAT /* \RMTW.RHWM.HDAT */
                    HMLK = LCKS /* \RMTW.LCKS */
                    \_SB.PCI0.SBRG.SIO1.EXFG ()
                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WHWM, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, W_BK)
                    CreateByteField (Arg0, One, W_ID)
                    CreateByteField (Arg0, 0x02, W_DT)
                    OperationRegion (SHWM, SystemIO, IOHW, 0x0A)
                    Field (SHWM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x05), 
                        HIDX,   8, 
                        HDAT,   8
                    }

                    IndexField (HIDX, HDAT, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x4E), 
                        BANK,   4
                    }

                    \_SB.PCI0.SBRG.SIO1.ENFG (0x07)
                    LCKS = HMLK /* \RMTW.HMLK */
                    HMLK = Zero
                    BANK = W_BK /* \RMTW.WHWM.W_BK */
                    HIDX = W_ID /* \RMTW.WHWM.W_ID */
                    HDAT = W_DT /* \RMTW.WHWM.W_DT */
                    HMLK = LCKS /* \RMTW.LCKS */
                    \_SB.PCI0.SBRG.SIO1.EXFG ()
                    Release (ASMX)
                    Return (Zero)
                }

                Return (Ones)
            }

            Method (ATOH, 1, Serialized)
            {
                Local0 = Ones
                If (((Arg0 >= 0x61) && (Arg0 <= 0x66)))
                {
                    Local0 = (Arg0 - 0x57)
                }

                If (((Arg0 >= 0x41) && (Arg0 <= 0x46)))
                {
                    Local0 = (Arg0 - 0x37)
                }

                If (((Arg0 >= 0x30) && (Arg0 <= 0x39)))
                {
                    Local0 = (Arg0 - 0x30)
                }

                Return (Local0)
            }

            Method (HTOA, 1, Serialized)
            {
                Local0 = Ones
                If (((Arg0 >= Zero) && (Arg0 <= 0x09)))
                {
                    Local0 = (Arg0 + 0x30)
                }

                If (((Arg0 >= 0x0A) && (Arg0 <= 0x0F)))
                {
                    Local0 = (Arg0 - 0x0A)
                    Local0 += 0x41
                }

                Return (Local0)
            }

            Name (STRB, Buffer (0x0100){})
            Name (HEXB, Buffer (0x0100){})
            Method (STOH, 1, Serialized)
            {
                STRB = Arg0
                CreateByteField (Arg0, Zero, DCNT)
                DCNT >>= 0x02
                Local0 = Zero
                While ((Local0 < DCNT))
                {
                    Local1 = ((0x04 * Local0) + 0x02)
                    Local2 = (Local1 + 0x02)
                    Local3 = ATOH (DerefOf (STRB [Local1]))
                    Local3 <<= 0x04
                    Local3 += ATOH (DerefOf (STRB [Local2]))
                    HEXB [Local0] = Local3
                    Local0++
                }

                Return (HEXB) /* \RMTW.HEXB */
            }

            Method (HTOS, 2, Serialized)
            {
                HEXB = Arg0
                STRB [Zero] = (Arg1 << 0x02)
                STRB [One] = Zero
                Local0 = Zero
                While ((Local0 < Arg1))
                {
                    Local3 = DerefOf (HEXB [Local0])
                    Local4 = (Local3 >> 0x04)
                    Local4 &= 0x0F
                    Local3 &= 0x0F
                    Local1 = ((0x04 * Local0) + 0x02)
                    Local2 = (Local1 + 0x02)
                    STRB [Local1] = HTOA (Local4)
                    Local1++
                    STRB [Local1] = Zero
                    STRB [Local2] = HTOA (Local3)
                    Local2++
                    STRB [Local2] = Zero
                    Local0++
                }

                Return (STRB) /* \RMTW.STRB */
            }

            Name (IDBF, Buffer (0x60){})
            Name (OSBF, Buffer (0x82){})
            Name (ODBF, Buffer (0x20){})
            Name (B_CT, Zero)
            Name (B_BK, Zero)
            Name (B_ID, Zero)
            Name (B_DT, Zero)
            Method (BRIO, 1, Serialized)
            {
                CreateByteField (Arg0, Zero, WLEN)
                B_CT = (WLEN >> 0x02)
                If ((B_CT > 0x20))
                {
                    Return (Ones)
                }

                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    IDBF = STOH (Arg0)
                    \_SB.PCI0.SBRG.SIO1.ENFG (0x07)
                    Local0 = Zero
                    Local1 = Zero
                    While ((Local0 < B_CT))
                    {
                        B_BK = DerefOf (IDBF [Local0])
                        Local0++
                        B_ID = DerefOf (IDBF [Local0])
                        Local0++
                        \_SB.PCI0.SBRG.SIO1.LDN = B_BK /* \RMTW.B_BK */
                        \_SB.PCI0.SBRG.SIO1.INDX = B_ID /* \RMTW.B_ID */
                        ODBF [Local1] = \_SB.PCI0.SBRG.SIO1.DATA
                        Local1++
                    }

                    \_SB.PCI0.SBRG.SIO1.EXFG ()
                    OSBF = HTOS (ODBF, Local1)
                    Release (ASMX)
                    Return (OSBF) /* \RMTW.OSBF */
                }

                Return (Ones)
            }

            Method (BWIO, 1, Serialized)
            {
                CreateByteField (Arg0, Zero, WLEN)
                B_CT = (WLEN >> 0x02)
                If ((B_CT > 0x20))
                {
                    Return (Ones)
                }

                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    IDBF = STOH (Arg0)
                    \_SB.PCI0.SBRG.SIO1.ENFG (0x07)
                    Local0 = Zero
                    While ((Local0 < B_CT))
                    {
                        B_BK = DerefOf (IDBF [Local0])
                        Local0++
                        B_ID = DerefOf (IDBF [Local0])
                        Local0++
                        B_DT = DerefOf (IDBF [Local0])
                        Local0++
                        \_SB.PCI0.SBRG.SIO1.LDN = B_BK /* \RMTW.B_BK */
                        \_SB.PCI0.SBRG.SIO1.INDX = B_ID /* \RMTW.B_ID */
                        \_SB.PCI0.SBRG.SIO1.DATA = B_DT /* \RMTW.B_DT */
                    }

                    \_SB.PCI0.SBRG.SIO1.EXFG ()
                    Release (ASMX)
                    Return (Zero)
                }

                Return (Ones)
            }

            Method (BRHM, 1, Serialized)
            {
                CreateByteField (Arg0, Zero, WLEN)
                B_CT = (WLEN >> 0x02)
                If ((B_CT > 0x20))
                {
                    Return (Ones)
                }

                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    IDBF = STOH (Arg0)
                    OperationRegion (SHWM, SystemIO, IOHW, 0x0A)
                    Field (SHWM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x05), 
                        HIDX,   8, 
                        HDAT,   8
                    }

                    IndexField (HIDX, HDAT, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x4E), 
                        BANK,   4
                    }

                    \_SB.PCI0.SBRG.SIO1.ENFG (0x07)
                    LCKS = HMLK /* \RMTW.HMLK */
                    HMLK = Zero
                    Local0 = Zero
                    Local1 = Zero
                    While ((Local0 < B_CT))
                    {
                        B_BK = DerefOf (IDBF [Local0])
                        Local0++
                        B_ID = DerefOf (IDBF [Local0])
                        Local0++
                        BANK = B_BK /* \RMTW.B_BK */
                        HIDX = B_ID /* \RMTW.B_ID */
                        ODBF [Local1] = HDAT /* \RMTW.BRHM.HDAT */
                        Local1++
                    }

                    HMLK = LCKS /* \RMTW.LCKS */
                    \_SB.PCI0.SBRG.SIO1.EXFG ()
                    OSBF = HTOS (ODBF, Local1)
                    Release (ASMX)
                    Return (OSBF) /* \RMTW.OSBF */
                }

                Return (Ones)
            }

            Method (BWHM, 1, Serialized)
            {
                CreateByteField (Arg0, Zero, WLEN)
                B_CT = (WLEN >> 0x02)
                If ((B_CT > 0x20))
                {
                    Return (Ones)
                }

                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    IDBF = STOH (Arg0)
                    OperationRegion (SHWM, SystemIO, IOHW, 0x0A)
                    Field (SHWM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x05), 
                        HIDX,   8, 
                        HDAT,   8
                    }

                    IndexField (HIDX, HDAT, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x4E), 
                        BANK,   4
                    }

                    \_SB.PCI0.SBRG.SIO1.ENFG (0x07)
                    LCKS = HMLK /* \RMTW.HMLK */
                    HMLK = Zero
                    Local0 = Zero
                    While ((Local0 < B_CT))
                    {
                        B_BK = DerefOf (IDBF [Local0])
                        Local0++
                        B_ID = DerefOf (IDBF [Local0])
                        Local0++
                        B_DT = DerefOf (IDBF [Local0])
                        Local0++
                        BANK = B_BK /* \RMTW.B_BK */
                        HIDX = B_ID /* \RMTW.B_ID */
                        HDAT = B_DT /* \RMTW.B_DT */
                    }

                    HMLK = LCKS /* \RMTW.LCKS */
                    \_SB.PCI0.SBRG.SIO1.EXFG ()
                    Release (ASMX)
                    Return (Zero)
                }

                Return (Ones)
            }

            Name (ECBK, Zero)
            Method (BREC, 1, Serialized)
            {
                Return (Ones)
                Return (Ones)
            }

            Method (BWEC, 1, Serialized)
            {
                Return (Ones)
                Return (Ones)
            }

            Method (RSMB, 1, Serialized)
            {
                Return (Zero)
            }

            Method (WSMB, 1, Serialized)
            {
                Return (Zero)
            }

            Method (RSMW, 1, Serialized)
            {
                Return (Zero)
            }

            Method (WSMW, 1, Serialized)
            {
                Return (Zero)
            }

            Method (RSMK, 1, Serialized)
            {
                Return (Zero)
            }

            Method (WSMK, 1, Serialized)
            {
                Return (Zero)
            }
        }
    }

    Name (TBIN, Zero)
    Scope (_SB.PCI0.SBRG.EC0)
    {
        Name (DOSS, 0xFF)
        Name (SMUV, 0x01)
        Name (MLBS, 0xFFFF)
        Name (SMNI, 0xF8)
        Name (SMND, 0xFC)
        Name (PCOR, 0xFF)
        Name (NTRD, 0x18)
        Name (CCD0, Package (0x08)
        {
            One, 
            One, 
            One, 
            One, 
            One, 
            One, 
            One, 
            One
        })
        Name (CCD1, Package (0x08)
        {
            One, 
            One, 
            One, 
            One, 
            One, 
            One, 
            One, 
            One
        })
        Name (C0SA, Package (0x08)
        {
            Zero, 
            One, 
            0x02, 
            0x03, 
            0x04, 
            0x05, 
            0x06, 
            0x07
        })
        Name (C1SA, Package (0x08)
        {
            Zero, 
            One, 
            0x02, 
            0x03, 
            0x04, 
            0x05, 
            0x06, 
            0x07
        })
        Name (C0HI, Package (0x08)
        {
            One, 
            One, 
            One, 
            One, 
            One, 
            One, 
            One, 
            One
        })
        Name (C1HI, Package (0x08)
        {
            One, 
            One, 
            One, 
            One, 
            One, 
            One, 
            One, 
            One
        })
        Name (C0LO, Package (0x08)
        {
            One, 
            One, 
            One, 
            One, 
            One, 
            One, 
            One, 
            One
        })
        Name (C1LO, Package (0x08)
        {
            One, 
            One, 
            One, 
            One, 
            One, 
            One, 
            One, 
            One
        })
        Name (TPKG, Package (0x08)
        {
            One, 
            One, 
            One, 
            One, 
            One, 
            One, 
            One, 
            One
        })
        Name (C0SZ, Zero)
        Name (C1SZ, Zero)
        Name (MCC0, 0xFF)
        Name (MCC1, 0xFF)
        Name (XCC0, One)
        Name (XCC1, One)
        Name (SWST, Zero)
        Name (WRBF, Buffer (0x10)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Name (SLBF, Buffer (0x10)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Name (BASE, 0xFFFFFFFF)
        Name (TRES, 0x042E)
        Name (HYST, 0x04)
        Name (HCNT, Zero)
        Name (INI0, Zero)
        Method (RM32, 4, Serialized)
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.SBRG.EC0_.RM32.VARR */
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
                ))
            Return (Local2)
        }

        OperationRegion (ECR2, SystemIO, 0x66, One)
        Field (ECR2, ByteAcc, NoLock, Preserve)
        {
            EC66,   8
        }

        OperationRegion (ECR3, SystemIO, 0x62, One)
        Field (ECR3, ByteAcc, NoLock, Preserve)
        {
            EC62,   8
        }

        Method (IBFX, 0, Serialized)
        {
            OperationRegion (ECR1, SystemIO, 0x66, One)
            Field (ECR1, ByteAcc, NoLock, Preserve)
            {
                ECOF,   1, 
                ECIE,   1, 
                Offset (0x01)
            }

            Local0 = 0x1000
            While ((Local0-- && ECIE))
            {
                Sleep (One)
            }
        }

        Method (OBFX, 0, Serialized)
        {
            OperationRegion (ECR1, SystemIO, 0x66, One)
            Field (ECR1, ByteAcc, NoLock, Preserve)
            {
                ECOF,   1, 
                ECIE,   1, 
                Offset (0x01)
            }

            Local0 = 0x1000
            While (Local0--)
            {
                If (ECOF)
                {
                    Break
                }

                Sleep (One)
            }
        }

        Method (ECRB, 1, Serialized)
        {
            Local0 = Zero
            IBFX ()
            EC66 = 0x90
            IBFX ()
            EC62 = Arg0
            OBFX ()
            Local0 = EC62 /* \_SB_.PCI0.SBRG.EC0_.EC62 */
            Return (Local0)
        }

        Method (ECWB, 2, Serialized)
        {
            IBFX ()
            EC66 = 0x91
            IBFX ()
            EC62 = Arg0
            IBFX ()
            EC62 = Arg1
        }

        Method (ECCR, 1, Serialized)
        {
            ECWB (0xFF, Arg0)
        }

        Method (WM32, 5, Serialized)
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.SBRG.EC0_.WM32.VARR */
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = (Arg2 + Arg3)
            Local2 = (0x20 - Local2)
            Local2 = (((Local5 << Local2) & Local5) >> Local2)
            Local2 = ((Local2 >> Arg2) << Arg2)
            Local3 = (Arg4 << Arg2)
            Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
            VARR = Local4
        }

        Method (WSMU, 7, Serialized)
        {
            If ((SMUV == One))
            {
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B1057C)
                WM32 (0xE0000000, SMND, Zero, 0x20, Zero)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B109C4)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg0)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B109C8)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg1)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B109CC)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg2)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B109D0)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg3)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B109D4)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg4)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B109D8)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg5)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10530)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg6)
                Local0 = Zero
                Local1 = Zero
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B1057C)
                Local0 = RM32 (0xE0000000, SMND, Zero, 0x20)
                While (((Local0 != Zero) && (Local1 < 0x0A)))
                {
                    WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B1057C)
                    Local0 = RM32 (0xE0000000, SMND, Zero, 0x20)
                    Local1++
                }
            }
        }

        Method (WTMU, 7, Serialized)
        {
            If ((SMUV == One))
            {
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10570)
                WM32 (0xE0000000, SMND, Zero, 0x20, Zero)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10A40)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg0)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10A44)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg1)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10A48)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg2)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10A4C)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg3)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10AD0)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg4)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10AD4)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg5)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10524)
                WM32 (0xE0000000, SMND, Zero, 0x20, Arg6)
                Local0 = Zero
                Local1 = Zero
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10570)
                Local0 = RM32 (0xE0000000, SMND, Zero, 0x20)
                While (((Local0 != Zero) && (Local1 < 0x0A)))
                {
                    WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10570)
                    Local0 = RM32 (0xE0000000, SMND, Zero, 0x20)
                    Local1++
                }
            }
        }

        OperationRegion (DBGP, SystemIO, 0x80, 0x08)
        Field (DBGP, ByteAcc, NoLock, Preserve)
        {
            DP80,   8
        }

        Method (_QB0, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((DOSS == One))
            {
                If ((SMUV == One))
                {
                    If ((Acquire (_GL, 0x03E8) == Zero))
                    {
                        WSMU (Zero, Zero, Zero, Zero, Zero, Zero, 0x24)
                        Local0 = ECRB (0xFF)
                        ECCR (One)
                        ECWB (0x84, Zero)
                        ECCR (Local0)
                        Release (_GL)
                    }
                }
            }
        }

        Method (NOSP, 0, Serialized)
        {
            Notify (^^^^PLTF.C000, 0x85) // Device-Specific
            If ((NTRD > One))
            {
                Notify (^^^^PLTF.C001, 0x85) // Device-Specific
            }

            If ((NTRD > 0x02))
            {
                Notify (^^^^PLTF.C002, 0x85) // Device-Specific
            }

            If ((NTRD > 0x03))
            {
                Notify (^^^^PLTF.C003, 0x85) // Device-Specific
            }

            If ((NTRD > 0x04))
            {
                Notify (^^^^PLTF.C004, 0x85) // Device-Specific
            }

            If ((NTRD > 0x05))
            {
                Notify (^^^^PLTF.C005, 0x85) // Device-Specific
            }

            If ((NTRD > 0x06))
            {
                Notify (^^^^PLTF.C006, 0x85) // Device-Specific
            }

            If ((NTRD > 0x07))
            {
                Notify (^^^^PLTF.C007, 0x85) // Device-Specific
            }

            If ((NTRD > 0x08))
            {
                Notify (^^^^PLTF.C008, 0x85) // Device-Specific
            }

            If ((NTRD > 0x09))
            {
                Notify (^^^^PLTF.C009, 0x85) // Device-Specific
            }

            If ((NTRD > 0x0A))
            {
                Notify (^^^^PLTF.C00A, 0x85) // Device-Specific
            }

            If ((NTRD > 0x0B))
            {
                Notify (^^^^PLTF.C00B, 0x85) // Device-Specific
            }

            If ((NTRD > 0x0C))
            {
                Notify (^^^^PLTF.C00C, 0x85) // Device-Specific
            }

            If ((NTRD > 0x0D))
            {
                Notify (^^^^PLTF.C00D, 0x85) // Device-Specific
            }

            If ((NTRD > 0x0E))
            {
                Notify (^^^^PLTF.C00E, 0x85) // Device-Specific
            }

            If ((NTRD > 0x0F))
            {
                Notify (^^^^PLTF.C00F, 0x85) // Device-Specific
            }

            If ((NTRD > 0x10))
            {
                Notify (^^^^PLTF.C010, 0x85) // Device-Specific
            }

            If ((NTRD > 0x11))
            {
                Notify (^^^^PLTF.C011, 0x85) // Device-Specific
            }

            If ((NTRD > 0x12))
            {
                Notify (^^^^PLTF.C012, 0x85) // Device-Specific
            }

            If ((NTRD > 0x13))
            {
                Notify (^^^^PLTF.C013, 0x85) // Device-Specific
            }

            If ((NTRD > 0x14))
            {
                Notify (^^^^PLTF.C014, 0x85) // Device-Specific
            }

            If ((NTRD > 0x15))
            {
                Notify (^^^^PLTF.C015, 0x85) // Device-Specific
            }

            If ((NTRD > 0x16))
            {
                Notify (^^^^PLTF.C016, 0x85) // Device-Specific
            }

            If ((NTRD > 0x17))
            {
                Notify (^^^^PLTF.C017, 0x85) // Device-Specific
            }

            If ((NTRD > 0x18))
            {
                Notify (^^^^PLTF.C018, 0x85) // Device-Specific
            }

            If ((NTRD > 0x19))
            {
                Notify (^^^^PLTF.C019, 0x85) // Device-Specific
            }

            If ((NTRD > 0x1A))
            {
                Notify (^^^^PLTF.C01A, 0x85) // Device-Specific
            }

            If ((NTRD > 0x1B))
            {
                Notify (^^^^PLTF.C01B, 0x85) // Device-Specific
            }

            If ((NTRD > 0x1C))
            {
                Notify (^^^^PLTF.C01C, 0x85) // Device-Specific
            }

            If ((NTRD > 0x1D))
            {
                Notify (^^^^PLTF.C01D, 0x85) // Device-Specific
            }

            If ((NTRD > 0x1E))
            {
                Notify (^^^^PLTF.C01E, 0x85) // Device-Specific
            }

            If ((NTRD > 0x1F))
            {
                Notify (^^^^PLTF.C01F, 0x85) // Device-Specific
            }
        }

        Method (_QB1, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((DOSS == One))
            {
                If ((SMUV == One))
                {
                    If ((Acquire (_GL, 0x03E8) == Zero))
                    {
                        WSMU (Zero, Zero, Zero, Zero, Zero, Zero, 0x25)
                        Local0 = ECRB (0xFF)
                        ECCR (One)
                        ECWB (0x84, Zero)
                        ECCR (Local0)
                        If ((MLBS != 0xFFFF))
                        {
                            WTMU (MLBS, Zero, Zero, Zero, Zero, Zero, 0x70)
                            If ((PCOR == One))
                            {
                                NOSP ()
                            }
                        }

                        Release (_GL)
                    }
                }
            }
        }

        Method (WKDO, 0, Serialized)
        {
            If ((DOSS == One))
            {
                If ((SMUV == One))
                {
                    If ((Acquire (_GL, 0x03E8) == Zero))
                    {
                        WSMU (Zero, Zero, Zero, Zero, Zero, Zero, 0x25)
                        Local0 = ECRB (0xFF)
                        ECCR (One)
                        ECWB (0x84, Zero)
                        ECCR (Local0)
                        If ((MLBS != 0xFFFF))
                        {
                            WTMU (MLBS, Zero, Zero, Zero, Zero, Zero, 0x70)
                        }

                        Release (_GL)
                    }
                }
            }
        }

        Method (STMN, 1, Serialized)
        {
            If ((SMUV == One))
            {
                If ((Arg0 == Zero))
                {
                    WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10570)
                    WM32 (0xE0000000, SMND, Zero, 0x20, Zero)
                    WM32 (0xE0000000, SMND, Zero, 0x20, One)
                    WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10524)
                    WM32 (0xE0000000, SMND, Zero, 0x20, 0x04)
                }

                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10570)
                WM32 (0xE0000000, SMND, Zero, 0x20, Zero)
                WM32 (0xE0000000, SMND, Zero, 0x20, One)
                WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10524)
                WM32 (0xE0000000, SMND, Zero, 0x20, 0x03)
                If ((Arg0 == Zero))
                {
                    WM32 (0xE0000000, SMNI, Zero, 0x20, 0x03B10A40)
                    Local0 = RM32 (0xE0000000, SMND, Zero, 0x20)
                    Local1 = Zero
                    While (((Local0 == Zero) && (Local1 < 0x0F)))
                    {
                        Local0 = RM32 (0xE0000000, SMND, Zero, 0x20)
                        Local1 += One
                    }

                    BASE = Local0
                    BASE += 0x017C
                }
            }
        }

        Method (INIT, 0, Serialized)
        {
            CreateDWordField (WRBF, Zero, REAX)
            CreateDWordField (WRBF, 0x04, REBX)
            CreateDWordField (WRBF, 0x08, RECX)
            CreateDWordField (WRBF, 0x0C, REDX)
            Local0 = Zero
            While ((Local0 < 0x08))
            {
                Local3 = 0xC0010068
                If ((Local0 > 0x03))
                {
                    Local3 += One
                }

                WRBF = GMSR (Local3)
                Local1 = REAX /* \_SB_.PCI0.SBRG.EC0_.INIT.REAX */
                Local7 = (Local0 % 0x04)
                Local7 *= 0x08
                Local1 >>= Local7
                Local1 &= 0xFF
                CCD0 [Local0] = Local1
                If ((Local1 > One))
                {
                    C0SZ += One
                    If ((Local1 < MCC0))
                    {
                        MCC0 = Local1
                    }

                    If ((Local1 > XCC0))
                    {
                        XCC0 = Local1
                    }
                }

                Local3 = 0xC001006A
                If ((Local0 > 0x03))
                {
                    Local3 += One
                }

                WRBF = GMSR (Local3)
                Local2 = REAX /* \_SB_.PCI0.SBRG.EC0_.INIT.REAX */
                Local2 >>= Local7
                Local2 &= 0xFF
                CCD1 [Local0] = Local2
                If ((Local2 > One))
                {
                    C1SZ += One
                    If ((Local2 < MCC1))
                    {
                        MCC1 = Local2
                    }

                    If ((Local2 > XCC1))
                    {
                        XCC1 = Local2
                    }
                }

                If (((Local1 <= One) && (Local2 <= One)))
                {
                    Break
                }

                Local0 += One
            }

            If ((C1SZ > Zero))
            {
                STMN (Zero)
                Local0 = Zero
                While ((Local0 < C0SZ))
                {
                    Local5 = DerefOf (CCD0 [Local0])
                    TPKG [Local0] = Local5
                    C0LO [Local0] = Local5
                    C0HI [Local0] = Local5
                    Local0 += One
                }

                Local0 = Zero
                While ((Local0 < C0SZ))
                {
                    Local1 = (Local0 + One)
                    While ((Local1 < C0SZ))
                    {
                        Local2 = DerefOf (TPKG [Local0])
                        Local3 = DerefOf (TPKG [Local1])
                        If ((Local2 < Local3))
                        {
                            TPKG [Local0] = Local3
                            TPKG [Local1] = Local2
                            Local2 = DerefOf (C0SA [Local0])
                            Local3 = DerefOf (C0SA [Local1])
                            C0SA [Local0] = Local3
                            C0SA [Local1] = Local2
                        }

                        Local1 += One
                    }

                    Local0 += One
                }

                Local0 = Zero
                While ((Local0 < C1SZ))
                {
                    Local2 = DerefOf (CCD1 [Local0])
                    TPKG [Local0] = Local2
                    C1LO [Local0] = Local2
                    C1HI [Local0] = Local2
                    Local0 += One
                }

                Local0 = Zero
                While ((Local0 < C1SZ))
                {
                    Local1 = (Local0 + One)
                    While ((Local1 < C1SZ))
                    {
                        Local2 = DerefOf (TPKG [Local0])
                        Local3 = DerefOf (TPKG [Local1])
                        If ((Local2 < Local3))
                        {
                            TPKG [Local0] = Local3
                            TPKG [Local1] = Local2
                            Local2 = DerefOf (C1SA [Local0])
                            Local3 = DerefOf (C1SA [Local1])
                            C1SA [Local0] = Local3
                            C1SA [Local1] = Local2
                        }

                        Local1 += One
                    }

                    Local0 += One
                }

                If ((XCC1 > XCC0))
                {
                    If ((MCC1 <= XCC0))
                    {
                        Local0 = (XCC0 - MCC1) /* \_SB_.PCI0.SBRG.EC0_.MCC1 */
                        Local0 += One
                        Local2 = DerefOf (C1SA [(C1SZ - One)])
                        Local1 = DerefOf (CCD1 [Local2])
                        Local1 += Local0
                        If ((Local1 > 0xFF))
                        {
                            Local1 = 0xFF
                        }

                        C1LO [Local2] = Local1
                        If ((C1SZ > One))
                        {
                            Local1 = (C1SZ - 0x02)
                            While ((Local1 > Zero))
                            {
                                Local2 = DerefOf (C1SA [Local1])
                                Local3 = DerefOf (C1SA [(Local1 + One)])
                                If ((DerefOf (C1LO [Local2]) <= DerefOf (C1LO [Local3]
                                    )))
                                {
                                    Local4 = (DerefOf (C1LO [Local3]) - DerefOf (C1LO [Local2]))
                                    Local4 += One
                                    Local5 = DerefOf (C1LO [Local2])
                                    Local5 += Local4
                                    If ((Local5 > 0xFF))
                                    {
                                        Local5 = 0xFF
                                    }

                                    C1LO [Local2] = Local5
                                }

                                Local1 -= One
                            }

                            Local1 = Zero
                            Local2 = DerefOf (C1SA [Local1])
                            Local3 = DerefOf (C1SA [(Local1 + One)])
                            If ((DerefOf (C1LO [Local2]) <= DerefOf (C1LO [Local3]
                                )))
                            {
                                Local4 = (DerefOf (C1LO [Local3]) - DerefOf (C1LO [Local2]))
                                Local4 += One
                                Local5 = DerefOf (C1LO [Local2])
                                Local5 += Local4
                                If ((Local5 > 0xFF))
                                {
                                    Local5 = 0xFF
                                }

                                C1LO [Local2] = Local5
                            }
                        }

                        If ((MCC0 <= XCC1))
                        {
                            Local0 = (XCC1 - MCC0) /* \_SB_.PCI0.SBRG.EC0_.MCC0 */
                            Local0 += One
                            Local2 = DerefOf (C0SA [(C0SZ - One)])
                            Local1 = DerefOf (CCD0 [Local2])
                            Local1 += Local0
                            If ((Local1 > 0xFF))
                            {
                                Local1 = 0xFF
                            }

                            C0HI [Local2] = Local1
                            If ((C0SZ > One))
                            {
                                Local1 = (C0SZ - 0x02)
                                While ((Local1 > Zero))
                                {
                                    Local2 = DerefOf (C0SA [Local1])
                                    Local3 = DerefOf (C0SA [(Local1 + One)])
                                    If ((DerefOf (C0HI [Local2]) <= DerefOf (C0HI [Local3]
                                        )))
                                    {
                                        Local4 = (DerefOf (C0HI [Local3]) - DerefOf (C0HI [Local2]))
                                        Local4 += One
                                        Local5 = DerefOf (C0HI [Local2])
                                        Local5 += Local4
                                        If ((Local5 > 0xFF))
                                        {
                                            Local5 = 0xFF
                                        }

                                        C0HI [Local2] = Local5
                                    }

                                    Local1 -= One
                                }

                                Local1 = Zero
                                Local2 = DerefOf (C0SA [Local1])
                                Local3 = DerefOf (C0SA [(Local1 + One)])
                                If ((DerefOf (C0HI [Local2]) <= DerefOf (C0HI [Local3]
                                    )))
                                {
                                    Local4 = (DerefOf (C0HI [Local3]) - DerefOf (C0HI [Local2]))
                                    Local4 += One
                                    Local5 = DerefOf (C0HI [Local2])
                                    Local5 += Local4
                                    If ((Local5 > 0xFF))
                                    {
                                        Local5 = 0xFF
                                    }

                                    C0HI [Local2] = Local5
                                }
                            }
                        }
                    }
                    ElseIf ((MCC0 <= XCC1))
                    {
                        Local0 = (XCC1 - MCC0) /* \_SB_.PCI0.SBRG.EC0_.MCC0 */
                        Local0 += One
                        Local2 = DerefOf (C0SA [(C0SZ - One)])
                        Local1 = DerefOf (CCD0 [Local2])
                        Local1 += Local0
                        If ((Local1 > 0xFF))
                        {
                            Local1 = 0xFF
                        }

                        C0HI [Local2] = Local1
                        If ((C0SZ > One))
                        {
                            Local1 = (C0SZ - 0x02)
                            While ((Local1 > Zero))
                            {
                                Local2 = DerefOf (C0SA [Local1])
                                Local3 = DerefOf (C0SA [(Local1 + One)])
                                If ((DerefOf (C0HI [Local2]) <= DerefOf (C0HI [Local3]
                                    )))
                                {
                                    Local4 = (DerefOf (C0HI [Local3]) - DerefOf (C0HI [Local2]))
                                    Local4 += One
                                    Local5 = DerefOf (C0HI [Local2])
                                    Local5 += Local4
                                    If ((Local5 > 0xFF))
                                    {
                                        Local5 = 0xFF
                                    }

                                    C0HI [Local2] = Local5
                                }

                                Local1 -= One
                            }

                            Local1 = Zero
                            Local2 = DerefOf (C0SA [Local1])
                            Local3 = DerefOf (C0SA [(Local1 + One)])
                            If ((DerefOf (C0HI [Local2]) <= DerefOf (C0HI [Local3]
                                )))
                            {
                                Local4 = (DerefOf (C0HI [Local3]) - DerefOf (C0HI [Local2]))
                                Local4 += One
                                Local5 = DerefOf (C0HI [Local2])
                                Local5 += Local4
                                If ((Local5 > 0xFF))
                                {
                                    Local5 = 0xFF
                                }

                                C0HI [Local2] = Local5
                            }
                        }
                    }
                }
                ElseIf ((MCC0 <= XCC1))
                {
                    Local0 = (XCC1 - MCC0) /* \_SB_.PCI0.SBRG.EC0_.MCC0 */
                    Local0 += One
                    Local2 = DerefOf (C0SA [(C0SZ - One)])
                    Local1 = DerefOf (CCD0 [Local2])
                    Local1 += Local0
                    If ((Local1 > 0xFF))
                    {
                        Local1 = 0xFF
                    }

                    C0HI [Local2] = Local1
                    If ((C0SZ > One))
                    {
                        Local1 = (C0SZ - 0x02)
                        While ((Local1 > Zero))
                        {
                            Local2 = DerefOf (C0SA [Local1])
                            Local3 = DerefOf (C0SA [(Local1 + One)])
                            If ((DerefOf (C0HI [Local2]) <= DerefOf (C0HI [Local3]
                                )))
                            {
                                Local4 = (DerefOf (C0HI [Local3]) - DerefOf (C0HI [Local2]))
                                Local4 += One
                                Local5 = DerefOf (C0HI [Local2])
                                Local5 += Local4
                                If ((Local5 > 0xFF))
                                {
                                    Local5 = 0xFF
                                }

                                C0HI [Local2] = Local5
                            }

                            Local1 -= One
                        }

                        Local1 = Zero
                        Local2 = DerefOf (C0SA [Local1])
                        Local3 = DerefOf (C0SA [(Local1 + One)])
                        If ((DerefOf (C0HI [Local2]) <= DerefOf (C0HI [Local3]
                            )))
                        {
                            Local4 = (DerefOf (C0HI [Local3]) - DerefOf (C0HI [Local2]))
                            Local4 += One
                            Local5 = DerefOf (C0HI [Local2])
                            Local5 += Local4
                            If ((Local5 > 0xFF))
                            {
                                Local5 = 0xFF
                            }

                            C0HI [Local2] = Local5
                        }
                    }

                    If ((MCC1 <= XCC0))
                    {
                        Local0 = (XCC0 - MCC1) /* \_SB_.PCI0.SBRG.EC0_.MCC1 */
                        Local0 += One
                        Local2 = DerefOf (C1SA [(C1SZ - One)])
                        Local1 = DerefOf (CCD1 [Local2])
                        Local1 += Local0
                        If ((Local1 > 0xFF))
                        {
                            Local1 = 0xFF
                        }

                        C1LO [Local2] = Local1
                        If ((C1SZ > One))
                        {
                            Local1 = (C1SZ - 0x02)
                            While ((Local1 > Zero))
                            {
                                Local2 = DerefOf (C1SA [Local1])
                                Local3 = DerefOf (C1SA [(Local1 + One)])
                                If ((DerefOf (C1LO [Local2]) <= DerefOf (C1LO [Local3]
                                    )))
                                {
                                    Local4 = (DerefOf (C1LO [Local3]) - DerefOf (C1LO [Local2]))
                                    Local4 += One
                                    Local5 = DerefOf (C1LO [Local2])
                                    Local5 += Local4
                                    If ((Local5 > 0xFF))
                                    {
                                        Local5 = 0xFF
                                    }

                                    C1LO [Local2] = Local5
                                }

                                Local1 -= One
                            }

                            Local1 = Zero
                            Local2 = DerefOf (C1SA [Local1])
                            Local3 = DerefOf (C1SA [(Local1 + One)])
                            If ((DerefOf (C1LO [Local2]) <= DerefOf (C1LO [Local3]
                                )))
                            {
                                Local4 = (DerefOf (C1LO [Local3]) - DerefOf (C1LO [Local2]))
                                Local4 += One
                                Local5 = DerefOf (C1LO [Local2])
                                Local5 += Local4
                                If ((Local5 > 0xFF))
                                {
                                    Local5 = 0xFF
                                }

                                C1LO [Local2] = Local5
                            }
                        }
                    }
                }
                ElseIf ((MCC1 <= XCC0))
                {
                    Local0 = (XCC0 - MCC1) /* \_SB_.PCI0.SBRG.EC0_.MCC1 */
                    Local0 += One
                    Local2 = DerefOf (C1SA [(C1SZ - One)])
                    Local1 = DerefOf (C1LO [Local2])
                    Local1 += Local0
                    If ((Local1 > 0xFF))
                    {
                        Local1 = 0xFF
                    }

                    C1LO [Local2] = Local1
                    If ((C1SZ > One))
                    {
                        Local1 = (C1SZ - 0x02)
                        While ((Local1 > Zero))
                        {
                            Local2 = DerefOf (C1SA [Local1])
                            Local3 = DerefOf (C1SA [(Local1 + One)])
                            If ((DerefOf (C1LO [Local2]) <= DerefOf (C1LO [Local3]
                                )))
                            {
                                Local4 = (DerefOf (C1LO [Local3]) - DerefOf (C1LO [Local2]))
                                Local4 += One
                                Local5 = DerefOf (C1LO [Local2])
                                Local5 += Local4
                                If ((Local5 > 0xFF))
                                {
                                    Local5 = 0xFF
                                }

                                C1LO [Local2] = Local5
                            }

                            Local1 -= One
                        }

                        Local1 = Zero
                        Local2 = DerefOf (C1SA [Local1])
                        Local3 = DerefOf (C1SA [(Local1 + One)])
                        If ((DerefOf (C1LO [Local2]) <= DerefOf (C1LO [Local3]
                            )))
                        {
                            Local4 = (DerefOf (C1LO [Local3]) - DerefOf (C1LO [Local2]))
                            Local4 += One
                            Local5 = DerefOf (C1LO [Local2])
                            Local5 += Local4
                            If ((Local5 > 0xFF))
                            {
                                Local5 = 0xFF
                            }

                            C1LO [Local2] = Local5
                        }
                    }
                }

                Local0 = DerefOf (C0LO [One])
                Local1 = Local0
                Local1 >>= 0x08
                Local1 &= 0x3F
                If ((Local1 == Zero))
                {
                    Local0 += One
                    C0LO [One] = Local0
                }

                Local0 = DerefOf (C1LO [One])
                Local1 = Local0
                Local1 >>= 0x08
                Local1 &= 0x3F
                If ((Local1 == Zero))
                {
                    Local0 += One
                    C1LO [One] = Local0
                }

                Local0 = DerefOf (C0HI [One])
                Local1 = Local0
                Local1 >>= 0x08
                Local1 &= 0x3F
                If ((Local1 == Zero))
                {
                    Local0 += One
                    C0HI [One] = Local0
                }

                Local0 = DerefOf (C1HI [One])
                Local1 = Local0
                Local1 >>= 0x08
                Local1 &= 0x3F
                If ((Local1 == Zero))
                {
                    Local0 += One
                    C1HI [One] = Local0
                }
            }
            Else
            {
                SWST = 0xFF
            }
        }

        Method (QSW0, 1, Serialized)
        {
            CreateDWordField (WRBF, Zero, REAX)
            CreateDWordField (WRBF, 0x04, REBX)
            CreateDWordField (WRBF, 0x08, RECX)
            CreateDWordField (WRBF, 0x0C, REDX)
            Local0 = Zero
            REAX = Zero
            While ((Local0 < C0SZ))
            {
                If ((Arg0 == One))
                {
                    Local1 = DerefOf (C0HI [Local0])
                }
                Else
                {
                    Local1 = DerefOf (C0LO [Local0])
                }

                Local7 = Local0
                Local7 %= 0x04
                Local7 *= 0x08
                Local1 <<= Local7
                REAX |= Local1
                If (((Local0 == 0x03) || (Local0 == (C0SZ - One))))
                {
                    Local3 = 0xC0010068
                    If ((Local0 > 0x03))
                    {
                        Local3 += One
                    }

                    RECX = Local3
                    REDX = Zero
                    SMSR (WRBF)
                    REAX = Zero
                }

                Local0 += One
            }

            Local0 = Zero
            REAX = Zero
            While ((Local0 < C1SZ))
            {
                If ((Arg0 == One))
                {
                    Local1 = DerefOf (C1HI [Local0])
                }
                Else
                {
                    Local1 = DerefOf (C1LO [Local0])
                }

                Local7 = Local0
                Local7 %= 0x04
                Local7 *= 0x08
                Local1 <<= Local7
                REAX |= Local1
                If (((Local0 == 0x03) || (Local0 == (C1SZ - One))))
                {
                    Local3 = 0xC001006A
                    If ((Local0 > 0x03))
                    {
                        Local3 += One
                    }

                    RECX = Local3
                    REDX = Zero
                    SMSR (WRBF)
                    REAX = Zero
                }

                Local0 += One
            }

            SWST = Arg0
        }

        Method (_QE0, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((Acquire (_GL, 0x03E8) == Zero))
            {
                If ((((HCNT >= HYST) || (SWST == 0xFF)) || (SWST == 
                    One)))
                {
                    Local0 = ECRB (0xFF)
                    ECCR (One)
                    ECWB (0xDB, Zero)
                    ECCR (Local0)
                }

                If (((SWST == Zero) && (INI0 == Zero)))
                {
                    STMN (Zero)
                    INIT ()
                    INI0 = One
                }

                If (((SWST != One) && (SWST != 0xFF)))
                {
                    If ((TRES == Zero))
                    {
                        If ((HCNT >= HYST))
                        {
                            QSW0 (One)
                            NOSP ()
                            WSMU (Zero, Zero, Zero, Zero, Zero, Zero, 0x6D)
                            HCNT = Zero
                        }

                        HCNT += One
                    }
                    Else
                    {
                        OperationRegion (MEMR, SystemMemory, BASE, 0x04)
                        Field (MEMR, DWordAcc, NoLock, Preserve)
                        {
                            MERD,   32
                        }

                        Local5 = Zero
                        Local0 = Zero
                        While ((Local5 < 0x03))
                        {
                            STMN (One)
                            Local5 += One
                            Local1 = MERD /* \_SB_.PCI0.SBRG.EC0_._QE0.MERD */
                            Local0 += Local1
                        }

                        Divide (Local0, 0x002DC6C0, Local7, Local6)
                        If ((Local6 > TRES))
                        {
                            If ((HCNT >= HYST))
                            {
                                QSW0 (One)
                                NOSP ()
                                WSMU (Zero, Zero, Zero, Zero, Zero, Zero, 0x6D)
                                HCNT = Zero
                            }

                            HCNT += One
                        }
                    }
                }
                Else
                {
                    HCNT = Zero
                }

                Release (_GL)
            }
        }

        Method (_QE1, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((Acquire (_GL, 0x03E8) == Zero))
            {
                If ((((HCNT >= HYST) || (SWST == 0xFF)) || (SWST == 
                    0x02)))
                {
                    Local0 = ECRB (0xFF)
                    ECCR (One)
                    ECWB (0xDB, Zero)
                    ECCR (Local0)
                }

                If (((SWST == Zero) && (INI0 == Zero)))
                {
                    STMN (Zero)
                    INIT ()
                    INI0 = One
                }

                If (((SWST != 0x02) && (SWST != 0xFF)))
                {
                    If ((TRES == Zero))
                    {
                        If ((HCNT >= HYST))
                        {
                            QSW0 (0x02)
                            NOSP ()
                            WSMU (Zero, Zero, Zero, Zero, Zero, Zero, 0x6D)
                            HCNT = Zero
                        }

                        HCNT += One
                    }
                    Else
                    {
                        OperationRegion (MEMR, SystemMemory, BASE, 0x04)
                        Field (MEMR, DWordAcc, NoLock, Preserve)
                        {
                            MERD,   32
                        }

                        Local5 = Zero
                        Local0 = Zero
                        While ((Local5 < 0x03))
                        {
                            STMN (One)
                            Local5 += One
                            Local1 = MERD /* \_SB_.PCI0.SBRG.EC0_._QE1.MERD */
                            Local0 += Local1
                        }

                        Divide (Local0, 0x002DC6C0, Local7, Local6)
                        If ((Local6 <= TRES))
                        {
                            If ((HCNT >= HYST))
                            {
                                QSW0 (0x02)
                                NOSP ()
                                WSMU (Zero, Zero, Zero, Zero, Zero, Zero, 0x6D)
                                HCNT = Zero
                            }

                            HCNT += One
                        }
                    }
                }
                Else
                {
                    HCNT = Zero
                }

                Release (_GL)
            }
        }

        Method (DOSW, 1, NotSerialized)
        {
            WKDO ()
        }
    }

    Name (BDID, 0x00)
    Scope (_SB.PCI0.GP17.XHC0)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (PTGN, Package (0x06)
            {
                One, 
                0x02, 
                One, 
                0x02, 
                0x03, 
                0x04
            })
            Method (GUPC, 1, Serialized)
            {
                Name (PCKG, Package (0x04)
                {
                    Zero, 
                    0xFF, 
                    Zero, 
                    Zero
                })
                Local1 = Zero
                Local2 = Zero
                If ((Arg0 >= 0x03))
                {
                    Local0 = (Arg0 - 0x03)
                }
                Else
                {
                    Local0 = (Arg0 - One)
                }

                Local1 = 0x03
                Local2 = 0x03
                If ((Arg0 <= 0x02))
                {
                    If ((Local2 & (One << Local0)))
                    {
                        PCKG [Zero] = 0xFF
                        PCKG [One] = Zero
                    }
                }
                ElseIf ((Local1 & (One << Local0)))
                {
                    PCKG [Zero] = 0xFF
                    PCKG [One] = 0x03
                }

                Local3 = 0x03
                Local4 = 0x03
                If (((Local3 & (One << Local0)) && (Local4 & (
                    One << Local0))))
                {
                    PCKG [Zero] = 0xFF
                    PCKG [One] = 0x09
                }

                Return (PCKG) /* \_SB_.PCI0.GP17.XHC0.RHUB.GUPC.PCKG */
            }

            Method (GPLD, 1, Serialized)
            {
                Name (PCKG, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                If ((Arg0 >= 0x03))
                {
                    Local0 = (Arg0 - 0x03)
                }
                Else
                {
                    Local0 = (Arg0 - One)
                }

                Local2 = Zero
                Local3 = Zero
                Local1 = 0x230B
                Local1 |= 0x0303
                Local2 = (Local1 & 0x03)
                Local3 = ((Local1 >> 0x08) & 0x0F)
                If ((Arg0 <= 0x02))
                {
                    If ((Local3 & (One << Local0)))
                    {
                        VISI = One
                        Local4 = (Arg0 - One)
                        GPOS = DerefOf (PTGN [Local4])
                    }
                    Else
                    {
                        VISI = Zero
                    }
                }
                ElseIf ((Local2 & (One << Local0)))
                {
                    VISI = One
                    Local4 = (Arg0 - One)
                    GPOS = DerefOf (PTGN [Local4])
                }
                Else
                {
                    VISI = Zero
                }

                Return (PCKG) /* \_SB_.PCI0.GP17.XHC0.RHUB.GPLD.PCKG */
            }

            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (GUPC (One))
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (GPLD (One))
                }
            }

            Device (PRT3)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (GUPC (0x03))
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (GPLD (0x03))
                }
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (GUPC (0x02))
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (GPLD (0x02))
                }
            }

            Device (PRT4)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (GUPC (0x04))
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (GPLD (0x04))
                }
            }
        }
    }

    Scope (_SB.PCI0.GP17.XHC1)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (PTGN, Package (0x06)
            {
                0x05, 
                0x06, 
                0x05, 
                0x06, 
                0x07, 
                0x08
            })
            Method (GUPC, 1, Serialized)
            {
                Name (PCKG, Package (0x04)
                {
                    Zero, 
                    0xFF, 
                    Zero, 
                    Zero
                })
                Local1 = Zero
                Local2 = Zero
                If ((Arg0 >= 0x03))
                {
                    Local0 = (Arg0 - 0x03)
                }
                Else
                {
                    Local0 = (Arg0 - One)
                }

                Local1 = 0x02
                Local2 = 0x02
                If ((Arg0 <= 0x02))
                {
                    If ((Local2 & (One << Local0)))
                    {
                        PCKG [Zero] = 0xFF
                        PCKG [One] = Zero
                    }
                }
                ElseIf ((Local1 & (One << Local0)))
                {
                    PCKG [Zero] = 0xFF
                    PCKG [One] = 0x03
                }

                Local3 = Zero
                Local4 = Zero
                If (((Local3 & (One << Local0)) && (Local4 & (
                    One << Local0))))
                {
                    PCKG [Zero] = 0xFF
                    PCKG [One] = 0x09
                }

                Return (PCKG) /* \_SB_.PCI0.GP17.XHC1.RHUB.GUPC.PCKG */
            }

            Method (GPLD, 1, Serialized)
            {
                Name (PCKG, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                If ((Arg0 >= 0x03))
                {
                    Local0 = (Arg0 - 0x03)
                }
                Else
                {
                    Local0 = (Arg0 - One)
                }

                Local2 = Zero
                Local3 = Zero
                Local1 = 0x230B
                Local1 |= 0x0303
                Local2 = ((Local1 >> 0x02) & 0x03)
                Local3 = ((Local1 >> 0x0C) & 0x0F)
                If ((Arg0 <= 0x02))
                {
                    If ((Local3 & (One << Local0)))
                    {
                        VISI = One
                        Local4 = (Arg0 - One)
                        GPOS = DerefOf (PTGN [Local4])
                    }
                    Else
                    {
                        VISI = Zero
                    }
                }
                ElseIf ((Local2 & (One << Local0)))
                {
                    VISI = One
                    Local4 = (Arg0 - One)
                    GPOS = DerefOf (PTGN [Local4])
                }
                Else
                {
                    VISI = Zero
                }

                Return (PCKG) /* \_SB_.PCI0.GP17.XHC1.RHUB.GPLD.PCKG */
            }

            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (GUPC (One))
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (GPLD (One))
                }
            }

            Device (PRT3)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (GUPC (0x03))
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (GPLD (0x03))
                }
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (GUPC (0x02))
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (GPLD (0x02))
                }
            }

            Device (PRT4)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (GUPC (0x04))
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (GPLD (0x04))
                }
            }
        }
    }

    Scope (_SB.PCI0.GP19.XHC2)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (PTGN, Package (0x04)
            {
                0x09, 
                0x0A, 
                0x0B, 
                0x0C
            })
            Method (GUPC, 1, Serialized)
            {
                Name (PCKG, Package (0x04)
                {
                    Zero, 
                    0xFF, 
                    Zero, 
                    Zero
                })
                Local1 = Zero
                Local2 = Zero
                If ((Arg0 >= 0x03))
                {
                    Local0 = (Arg0 - 0x03)
                }
                Else
                {
                    Local0 = (Arg0 - One)
                }

                Local1 = Zero
                Local2 = Zero
                If ((Local2 & (One << Local0)))
                {
                    If ((Local1 & (One << Local0)))
                    {
                        PCKG [Zero] = 0xFF
                        PCKG [One] = 0x03
                    }
                    Else
                    {
                        PCKG [Zero] = 0xFF
                        PCKG [One] = Zero
                    }
                }

                Return (PCKG) /* \_SB_.PCI0.GP19.XHC2.RHUB.GUPC.PCKG */
            }

            Method (GPLD, 1, Serialized)
            {
                Name (PCKG, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                If ((Arg0 >= 0x03))
                {
                    Local0 = (Arg0 - 0x03)
                }
                Else
                {
                    Local0 = (Arg0 - One)
                }

                Local2 = Zero
                Local3 = Zero
                Local1 = 0x230B
                Local2 = ((Local1 >> 0x04) & 0x03)
                Local3 = ((Local1 >> 0x10) & 0x0F)
                If ((Arg0 <= Zero))
                {
                    If ((Local2 & (One << Local0)))
                    {
                        VISI = One
                        Local4 = (Arg0 - One)
                        GPOS = DerefOf (PTGN [Local4])
                    }
                    Else
                    {
                        VISI = Zero
                    }
                }
                ElseIf ((Local3 & (One << Local0)))
                {
                    VISI = One
                    Local4 = (Arg0 - One)
                    GPOS = DerefOf (PTGN [Local4])
                }
                Else
                {
                    VISI = Zero
                }

                Return (PCKG) /* \_SB_.PCI0.GP19.XHC2.RHUB.GPLD.PCKG */
            }

            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (GUPC (One))
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (GPLD (One))
                }
            }
        }
    }

    OperationRegion (CPVS, SystemMemory, 0x76369000, 0x0086)
    Field (CPVS, AnyAcc, Lock, Preserve)
    {
        Offset (0x00), 
        G000,   8, 
        Offset (0x01), 
        G001,   8, 
        Offset (0x02), 
        G002,   8, 
        Offset (0x03), 
        G003,   8, 
        Offset (0x04), 
        G004,   32, 
        Offset (0x08), 
        G005,   16, 
        Offset (0x0A), 
        G006,   16, 
        Offset (0x0C), 
        G007,   32, 
        Offset (0x10), 
        G008,   32, 
        Offset (0x14), 
        G009,   32, 
        Offset (0x18), 
        G00A,   32, 
        Offset (0x1C), 
        G00B,   64, 
        Offset (0x24), 
        G00C,   64, 
        Offset (0x2C), 
        G00D,   64, 
        Offset (0x34), 
        G00E,   64, 
        Offset (0x3C), 
        G00F,   16, 
        Offset (0x3E), 
        G010,   16, 
        Offset (0x40), 
        G011,   8, 
        Offset (0x41), 
        G012,   32, 
        Offset (0x45), 
        G013,   32, 
        Offset (0x49), 
        G014,   32, 
        Offset (0x4D), 
        G015,   32, 
        Offset (0x51), 
        G016,   32, 
        Offset (0x55), 
        G017,   8, 
        Offset (0x56), 
        G018,   32, 
        Offset (0x5A), 
        G019,   32, 
        Offset (0x5E), 
        G01A,   32, 
        Offset (0x62), 
        G01B,   32, 
        Offset (0x66), 
        G01C,   32, 
        Offset (0x6A), 
        G01D,   8, 
        Offset (0x6B), 
        G01E,   8, 
        Offset (0x6C), 
        G01F,   8, 
        Offset (0x6D), 
        G020,   8, 
        Offset (0x6E), 
        G021,   8, 
        Offset (0x6F), 
        G022,   8, 
        Offset (0x70), 
        G023,   8, 
        Offset (0x71), 
        G024,   8, 
        Offset (0x72), 
        G025,   8, 
        Offset (0x73), 
        G026,   8, 
        Offset (0x74), 
        G027,   8, 
        Offset (0x75), 
        G028,   32, 
        Offset (0x79), 
        G029,   32, 
        Offset (0x7D), 
        G02A,   32, 
        Offset (0x81), 
        G02B,   32, 
        Offset (0x85), 
        G02C,   8
    }

    Name (PWVA, 0xFFFFFFFF)
    Method (PWGS, 1, NotSerialized)
    {
        Local0 = M013 (G015, Zero, G016, One)
        If ((Local0 == One))
        {
            PWVA = Zero
            M014 (G015, Zero, G016, One, Zero)
        }

        Local0 = Arg0
        Local1 = (One << Local0)
        Local2 = (Local1 & PWVA) /* \PWVA */
        If ((Local2 == Zero))
        {
            PWVA |= Local1 /* \PWVA */
            M460 ("  OEM-ASL PWGS 0x%X don\'t Unlock from S0I3, PWVA = 0x%X\n", Arg0, PWVA, Zero, Zero, Zero, Zero)
            Return (Zero)
        }

        Return (One)
    }

    Method (UPWD, 0, NotSerialized)
    {
        M460 ("PLA-ASL-UPWD Unlock Nvme Password SMI\n", Zero, Zero, Zero, Zero, Zero, Zero)
    }

    Method (SPWD, 0, NotSerialized)
    {
        M460 ("PLA-ASL-SPWD Save Nvme Password SMI\n", Zero, Zero, Zero, Zero, Zero, Zero)
    }

    If ((G002 != One))
    {
        Scope (\_SB.PCI0.GPP0)
        {
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x08, 
                0x04
            })
        }

        Scope (\_SB.PCI0.GPP2)
        {
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x08, 
                0x04
            })
        }

        Scope (\_GPE)
        {
            Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                M460 ("  OEM-ASL-\\_GPE._L08 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
                M460 ("    Notify (\\_SB.PCI0.GPP0, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GPP0, 0x02) // Device Wake
                M460 ("    Notify (\\_SB.PCI0.GPP2, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GPP2, 0x02) // Device Wake
            }
        }
    }

    If (((G002 != 0x03) && ((G000 == One) && (G002 == 
        0x04)))){}
    If ((G002 != 0x03))
    {
        Scope (\_SB.PCI0.GPP7)
        {
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x02, 
                0x04
            })
        }
    }

    If (((G002 != 0x03) && (G000 == One)))
    {
        Scope (\_SB.PCI0.GPP7)
        {
            Device (UP00)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Device (DP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (NV00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP08)
                {
                    Name (_ADR, 0x00010000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP10)
                {
                    Name (_ADR, 0x00020000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (WN00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP18)
                {
                    Name (_ADR, 0x00030000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (LN00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP20)
                {
                    Name (_ADR, 0x00040000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (NV00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP28)
                {
                    Name (_ADR, 0x00050000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP30)
                {
                    Name (_ADR, 0x00060000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP38)
                {
                    Name (_ADR, 0x00070000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP40)
                {
                    Name (_ADR, 0x00080000)  // _ADR: Address
                }

                Device (DP48)
                {
                    Name (_ADR, 0x00090000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP50)
                {
                    Name (_ADR, 0x000A0000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP58)
                {
                    Name (_ADR, 0x000B0000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP60)
                {
                    Name (_ADR, 0x000C0000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (XH00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP68)
                {
                    Name (_ADR, 0x000D0000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (SA00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }
            }
        }
    }

    If (((G002 != 0x03) && ((G000 == One) && (
        G004 != 0x43FA1022))))
    {
        Scope (\_SB.PCI0.GPP7.UP00.DP60.XH00)
        {
            Device (RHUB)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (PTGN, Package (0x16)
                {
                    0x0B, 
                    0x0C, 
                    0x0D, 
                    0x0E, 
                    0x0F, 
                    0x10, 
                    0x0B, 
                    0x0C, 
                    0x0D, 
                    0x0E, 
                    0x0F, 
                    0x10, 
                    0x11, 
                    0x12, 
                    0x13, 
                    0x14, 
                    0x15, 
                    0x16, 
                    0x17, 
                    0x18, 
                    0x19, 
                    0x1A
                })
                Method (GUPC, 2, Serialized)
                {
                    Name (PCKG, Package (0x04)
                    {
                        Zero, 
                        0xFF, 
                        Zero, 
                        Zero
                    })
                    If ((Arg0 > 0x06))
                    {
                        Local0 = ((Arg0 - 0x06) + 0x07)
                    }
                    Else
                    {
                        Local0 = (Arg0 - One)
                    }

                    Local5 = 0x000F3C3C
                    If ((Local5 & (One << Local0)))
                    {
                        If ((Arg0 <= 0x06))
                        {
                            PCKG [Zero] = 0xFF
                            PCKG [One] = 0x03
                        }
                        Else
                        {
                            Local1 = (Arg0 - 0x07)
                            If ((Local5 & (One << Local1)))
                            {
                                PCKG [Zero] = 0xFF
                                PCKG [One] = 0x03
                            }
                            Else
                            {
                                PCKG [Zero] = 0xFF
                                PCKG [One] = Zero
                            }
                        }
                    }

                    If ((Arg0 > 0x06))
                    {
                        Local2 = (Arg0 - 0x07)
                        If ((One & (One << Local2)))
                        {
                            Local3 = 0x03
                            If (Local3)
                            {
                                Local4 = Zero
                                While (Local3)
                                {
                                    If ((Local3 & One))
                                    {
                                        Local4 += One
                                    }

                                    Local3 >>= One
                                }

                                If ((Local4 > One))
                                {
                                    PCKG [Zero] = 0xFF
                                    PCKG [One] = 0x0A
                                }
                                Else
                                {
                                    PCKG [Zero] = 0xFF
                                    PCKG [One] = 0x09
                                }
                            }
                            Else
                            {
                                PCKG [Zero] = 0xFF
                                PCKG [One] = 0x08
                            }
                        }
                    }
                    Else
                    {
                        Local2 = (Arg0 - One)
                        Local3 = 0x03
                        If ((Local3 & (One << Local2)))
                        {
                            Local4 = Zero
                            While (Local3)
                            {
                                If ((Local3 & One))
                                {
                                    Local4 += One
                                }

                                Local3 >>= One
                            }

                            If ((Local4 > One))
                            {
                                PCKG [Zero] = 0xFF
                                PCKG [One] = 0x0A
                            }
                            Else
                            {
                                PCKG [Zero] = 0xFF
                                PCKG [One] = 0x09
                            }
                        }
                    }

                    Return (PCKG) /* \_SB_.PCI0.GPP7.UP00.DP60.XH00.RHUB.GUPC.PCKG */
                }

                Method (GPLD, 2, Serialized)
                {
                    Name (PCKG, Package (0x01)
                    {
                        Buffer (0x14)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                        }
                    })
                    CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                    CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                    If ((Arg0 > 0x06))
                    {
                        Local0 = ((Arg0 - 0x06) + 0x07)
                    }
                    Else
                    {
                        Local0 = (Arg0 - One)
                    }

                    Local1 = 0x000F3C3C
                    Local1 |= 0x0103
                    If ((Local1 & (One << Local0)))
                    {
                        VISI = One
                    }
                    Else
                    {
                        VISI = Zero
                    }

                    If ((0x0103 & (One << Local0)))
                    {
                        Local2 = 0x03
                        If ((Arg1 == One))
                        {
                            Local2 &= 0xFFFFFFFD
                        }

                        If ((Local2 & (One << Local0)))
                        {
                            Local3 = Zero
                            While (Local2)
                            {
                                If ((Local2 & One))
                                {
                                    Break
                                }

                                Local3 += One
                                Local2 >>= One
                            }
                        }
                        ElseIf ((0x0100 & (One << Local0)))
                        {
                            Local3 = Zero
                            While (Local2)
                            {
                                If ((Local2 & One))
                                {
                                    Break
                                }

                                Local3 += One
                                Local2 >>= One
                            }
                        }
                    }
                    Else
                    {
                        Local3 = (Arg0 - One)
                    }

                    GPOS = DerefOf (PTGN [Local3])
                    Return (PCKG) /* \_SB_.PCI0.GPP7.UP00.DP60.XH00.RHUB.GPLD.PCKG */
                }

                Device (POT1)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (One, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (One, One))
                    }
                }

                Device (POT7)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x07, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x07, One))
                    }
                }

                Device (POT8)
                {
                    Name (_ADR, 0x10)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x08, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x08, One))
                    }
                }

                Device (POT3)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x03, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x03, One))
                    }
                }

                Device (POT9)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x09, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x09, One))
                    }
                }

                Device (POT4)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x04, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x04, One))
                    }
                }

                Device (POTA)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x0A, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x0A, One))
                    }
                }

                Device (POT5)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x05, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x05, One))
                    }
                }

                Device (POTB)
                {
                    Name (_ADR, 0x09)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x0B, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x0B, One))
                    }
                }

                Device (POT6)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x06, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x06, One))
                    }
                }

                Device (POTC)
                {
                    Name (_ADR, 0x0A)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x0C, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x0C, One))
                    }
                }

                Device (POTD)
                {
                    Name (_ADR, 0x0B)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x0D, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x0D, One))
                    }
                }

                Device (POTE)
                {
                    Name (_ADR, 0x0C)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x0E, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x0E, One))
                    }
                }

                Device (POTF)
                {
                    Name (_ADR, 0x0D)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x0F, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x0F, One))
                    }
                }

                Device (POTG)
                {
                    Name (_ADR, 0x0E)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x10, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x10, One))
                    }
                }

                Device (POTH)
                {
                    Name (_ADR, 0x0F)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x11, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x11, One))
                    }
                }

                Device (POTI)
                {
                    Name (_ADR, 0x11)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x12, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x12, One))
                    }
                }
            }
        }
    }

    If (((G002 != 0x03) && (G000 == 0x02)))
    {
        Scope (\_SB.PCI0.GPP7)
        {
            Device (XH00)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
            }

            Device (EP01)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
            }

            Device (UP02)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Device (DP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                }

                Device (DP40)
                {
                    Name (_ADR, 0x00040000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (NV00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                    }
                }

                Device (DP80)
                {
                    Name (_ADR, 0x00080000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (WN00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP90)
                {
                    Name (_ADR, 0x00090000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (LN00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }
            }
        }
    }

    If (((G002 != 0x03) && ((G000 == One) && (
        G002 != 0x04))))
    {
        Scope (\_SB.PCI0.GPP7.UP00.DP40)
        {
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x02, 
                0x04
            })
        }
    }

    If ((((G002 != 0x03) && (G000 == One)) && (
        (G002 != 0x04) && (G003 != Zero))))
    {
        Scope (\_SB.PCI0.GPP7.UP00.DP40)
        {
            Device (UP00)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
                Name (GPB1, 0x5A5A5A5A)
                Name (IOR0, 0x5A5A5A5A)
                Name (IOR1, 0x5A5A5A5A)
                Name (IOR2, 0x5A5A5A5A)
                Name (IOR3, 0x5A5A5A5A)
                Device (DP00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (NV00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP08)
                {
                    Name (_ADR, 0x00010000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP10)
                {
                    Name (_ADR, 0x00020000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (WN00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP18)
                {
                    Name (_ADR, 0x00030000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (LN00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP20)
                {
                    Name (_ADR, 0x00040000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (NV00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP28)
                {
                    Name (_ADR, 0x00050000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP30)
                {
                    Name (_ADR, 0x00060000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP38)
                {
                    Name (_ADR, 0x00070000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP40)
                {
                    Name (_ADR, 0x00080000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP48)
                {
                    Name (_ADR, 0x00090000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP50)
                {
                    Name (_ADR, 0x000A0000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP58)
                {
                    Name (_ADR, 0x000B0000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (EP00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP60)
                {
                    Name (_ADR, 0x000C0000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (XH00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }

                Device (DP68)
                {
                    Name (_ADR, 0x000D0000)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x02, 
                        0x04
                    })
                    Device (SA00)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x02, 
                            0x04
                        })
                    }
                }
            }
        }

        Scope (\_SB.PCI0.GPP7.UP00.DP40.UP00.DP60.XH00)
        {
            Device (RHUB)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (PTGN, Package (0x16)
                {
                    0x1F, 
                    0x20, 
                    0x21, 
                    0x22, 
                    0x23, 
                    0x24, 
                    0x1F, 
                    0x20, 
                    0x21, 
                    0x22, 
                    0x23, 
                    0x24, 
                    0x25, 
                    0x26, 
                    0x27, 
                    0x28, 
                    0x29, 
                    0x2A, 
                    0x2B, 
                    0x2C, 
                    0x2D, 
                    0x2E
                })
                Method (GUPC, 2, Serialized)
                {
                    Name (PCKG, Package (0x04)
                    {
                        Zero, 
                        0xFF, 
                        Zero, 
                        Zero
                    })
                    If ((Arg0 >= 0x07))
                    {
                        Local0 = (Arg0 + One)
                    }
                    Else
                    {
                        Local0 = (Arg0 - One)
                    }

                    If ((0xFC3C & (One << Local0)))
                    {
                        If ((Arg0 <= 0x06))
                        {
                            PCKG [Zero] = 0xFF
                            PCKG [One] = 0x03
                        }
                        Else
                        {
                            Local1 = (Arg0 - 0x07)
                            If ((0xFC3C & (One << Local1)))
                            {
                                PCKG [Zero] = 0xFF
                                PCKG [One] = 0x03
                            }
                            Else
                            {
                                PCKG [Zero] = 0xFF
                                PCKG [One] = Zero
                            }
                        }
                    }

                    If ((Arg0 >= 0x07))
                    {
                        Local2 = (Arg0 - 0x07)
                        If ((One & (One << Local2)))
                        {
                            Local3 = 0x03
                            If (Local3)
                            {
                                Local4 = Zero
                                While (Local3)
                                {
                                    If ((Local3 & One))
                                    {
                                        Local4 += One
                                    }

                                    Local3 >>= One
                                }

                                If ((Local4 > One))
                                {
                                    PCKG [Zero] = 0xFF
                                    PCKG [One] = 0x0A
                                }
                                Else
                                {
                                    PCKG [Zero] = 0xFF
                                    PCKG [One] = 0x09
                                }
                            }
                            Else
                            {
                                PCKG [Zero] = 0xFF
                                PCKG [One] = 0x08
                            }
                        }
                    }
                    Else
                    {
                        Local2 = (Arg0 - One)
                        Local3 = 0x03
                        If ((Local3 & (One << Local2)))
                        {
                            Local4 = Zero
                            While (Local3)
                            {
                                If ((Local3 & One))
                                {
                                    Local4 += One
                                }

                                Local3 >>= One
                            }

                            If ((Local4 > One))
                            {
                                PCKG [Zero] = 0xFF
                                PCKG [One] = 0x0A
                            }
                            Else
                            {
                                PCKG [Zero] = 0xFF
                                PCKG [One] = 0x09
                            }
                        }
                    }

                    Return (PCKG) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP60.XH00.RHUB.GUPC.PCKG */
                }

                Method (GPLD, 2, Serialized)
                {
                    Name (PCKG, Package (0x01)
                    {
                        Buffer (0x14)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                        }
                    })
                    CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                    CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                    If ((Arg0 >= 0x07))
                    {
                        Local0 = (Arg0 + One)
                    }
                    Else
                    {
                        Local0 = (Arg0 - One)
                    }

                    Local1 = 0xFC3C
                    Local1 |= 0x0103
                    If ((Local1 & (One << Local0)))
                    {
                        VISI = One
                    }
                    Else
                    {
                        VISI = Zero
                    }

                    If ((0x0103 & (One << Local0)))
                    {
                        Local2 = 0x03
                        If ((Arg1 == One))
                        {
                            Local2 &= 0xFFFFFFFD
                        }

                        If ((Local2 & (One << Local0)))
                        {
                            Local3 = Zero
                            While (Local2)
                            {
                                If ((Local2 & One))
                                {
                                    Break
                                }

                                Local3 += One
                                Local2 >>= One
                            }
                        }
                        ElseIf ((0x0100 & (One << Local0)))
                        {
                            Local3 = Zero
                            While (Local2)
                            {
                                If ((Local2 & One))
                                {
                                    Break
                                }

                                Local3 += One
                                Local2 >>= One
                            }
                        }
                    }
                    Else
                    {
                        Local3 = (Arg0 - One)
                    }

                    GPOS = DerefOf (PTGN [Local3])
                    Return (PCKG) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP60.XH00.RHUB.GPLD.PCKG */
                }

                Device (POT1)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (One, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (One, One))
                    }
                }

                Device (POT7)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x07, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x07, One))
                    }
                }

                Device (POT8)
                {
                    Name (_ADR, 0x10)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x08, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x08, One))
                    }
                }

                Device (POT3)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x03, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x03, One))
                    }
                }

                Device (POT9)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x09, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x09, One))
                    }
                }

                Device (POT4)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x04, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x04, One))
                    }
                }

                Device (POTA)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x0A, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x0A, One))
                    }
                }

                Device (POT5)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x05, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x05, One))
                    }
                }

                Device (POTB)
                {
                    Name (_ADR, 0x09)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x0B, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x0B, One))
                    }
                }

                Device (POT6)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x06, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x06, One))
                    }
                }

                Device (POTC)
                {
                    Name (_ADR, 0x0A)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x0C, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x0C, One))
                    }
                }

                Device (POTD)
                {
                    Name (_ADR, 0x0B)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x0D, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x0D, One))
                    }
                }

                Device (POTE)
                {
                    Name (_ADR, 0x0C)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x0E, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x0E, One))
                    }
                }

                Device (POTF)
                {
                    Name (_ADR, 0x0D)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x0F, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x0F, One))
                    }
                }

                Device (POTG)
                {
                    Name (_ADR, 0x0E)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x10, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x10, One))
                    }
                }

                Device (POTH)
                {
                    Name (_ADR, 0x0F)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x11, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x11, One))
                    }
                }

                Device (POTI)
                {
                    Name (_ADR, 0x11)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (GUPC (0x12, One))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (GPLD (0x12, One))
                    }
                }
            }
        }
    }

    If ((((G002 != 0x03) && (G000 == One)) && (
        (G002 != 0x04) && (G003 == Zero))))
    {
        Scope (\_SB.PCI0.GPP7.UP00.DP40)
        {
            Device (EP00)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x02, 
                    0x04
                })
            }
        }
    }

    If ((G002 != 0x03))
    {
        Scope (\_GPE)
        {
            Method (_L02, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                M460 ("  OEM-ASL-\\_GPE._L02 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
                M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7, 0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                M460 ("  OEM-ASL-Notify (\\_SB.PCI0.GPP7, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GPP7, 0x02) // Device Wake
            }
        }
    }

    Scope (\_SB.PCI0.GP17)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x19, 
            0x04
        })
    }

    Scope (\_SB.PCI0.GP17.XHC0)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x19, 
            0x04
        })
    }

    Scope (\_SB.PCI0.GP17.XHC1)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x19, 
            0x04
        })
    }

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Name (DOSA, Zero)
        Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
        {
            DOSA = Arg0
        }

        Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
        {
            M460 ("CPM-ASL-\\_SB.PCI0.GP17.VGA._DOD\n", Zero, Zero, Zero, Zero, Zero, Zero)
            Return (Package (0x07)
            {
                0x00010110, 
                0x00010210, 
                0x00010220, 
                0x00010230, 
                0x00010240, 
                0x00031000, 
                0x00032000
            })
        }

        Device (LCD)
        {
            Name (_ADR, 0x0110)  // _ADR: Address
            Name (BCLB, Package (0x34)
            {
                0x5A, 
                0x3C, 
                0x02, 
                0x04, 
                0x06, 
                0x08, 
                0x0A, 
                0x0C, 
                0x0E, 
                0x10, 
                0x12, 
                0x14, 
                0x16, 
                0x18, 
                0x1A, 
                0x1C, 
                0x1E, 
                0x20, 
                0x22, 
                0x24, 
                0x26, 
                0x28, 
                0x2A, 
                0x2C, 
                0x2E, 
                0x30, 
                0x32, 
                0x34, 
                0x36, 
                0x38, 
                0x3A, 
                0x3C, 
                0x3E, 
                0x40, 
                0x42, 
                0x44, 
                0x46, 
                0x48, 
                0x4A, 
                0x4C, 
                0x4E, 
                0x50, 
                0x52, 
                0x54, 
                0x56, 
                0x58, 
                0x5A, 
                0x5C, 
                0x5E, 
                0x60, 
                0x62, 
                0x64
            })
            Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
            {
                M460 ("CPM-ASL-\\_SB.PCI0.GP17.VGA.LCD._BCL\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (BCLB) /* \_SB_.PCI0.GP17.VGA_.LCD_.BCLB */
            }

            Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
            {
                M460 ("CPM-ASL-\\_SB.PCI0.GP17.VGA.LCD._BCM Arg0 = 0x%X\n", ToInteger (Arg0), Zero, Zero, Zero, Zero, Zero)
                Divide ((Arg0 * 0xFF), 0x64, Local1, Local0)
                AFN7 (Local0)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (_L19, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GP17, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.XHC0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.XHC1, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.AZAL, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.ACP, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (\_SB.PCI0.GP19.XHC2)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x1A, 
            0x04
        })
    }

    Scope (\_GPE)
    {
        Method (_L1A, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GP19.XHC2, 0x02) // Device Wake
        }
    }

    Name (TSOS, 0x75)
    Name (UR0I, 0x03)
    Name (UR1I, 0x0E)
    Name (UR2I, 0x05)
    Name (UR3I, 0x0F)
    Name (UR4I, 0x10)
    Name (IC0I, 0x0A)
    Name (IC1I, 0x0B)
    Name (IC2I, 0x04)
    Name (IC3I, 0x06)
    Name (IC4I, 0x16)
    If (CondRefOf (\_OSI))
    {
        If (\_OSI ("Windows 2009"))
        {
            TSOS = 0x50
        }

        If (\_OSI ("Windows 2015"))
        {
            TSOS = 0x70
        }
    }

    Scope (\_SB)
    {
        OperationRegion (SMIC, SystemMemory, 0xFED80000, 0x00800000)
        Field (SMIC, ByteAcc, NoLock, Preserve)
        {
            Offset (0x36A), 
            SMIB,   8
        }

        OperationRegion (SSMI, SystemIO, SMIB, 0x02)
        Field (SSMI, AnyAcc, NoLock, Preserve)
        {
            SMIW,   16
        }

        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            FRTB,   32
        }

        OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
        Field (FRTP, AnyAcc, NoLock, Preserve)
        {
            PEBA,   32, 
            Offset (0x04), 
                ,   5, 
            IC0E,   1, 
            IC1E,   1, 
            IC2E,   1, 
            IC3E,   1, 
            IC4E,   1, 
            IC5E,   1, 
            UT0E,   1, 
            UT1E,   1, 
            I31E,   1, 
            I32E,   1, 
            I33E,   1, 
            UT2E,   1, 
                ,   1, 
            EMMD,   2, 
            UT4E,   1, 
            I30E,   1, 
                ,   1, 
            XHCE,   1, 
                ,   1, 
                ,   1, 
            UT3E,   1, 
            ESPI,   1, 
            EMME,   1, 
            HFPE,   1, 
            HD0E,   1, 
            Offset (0x08), 
            PCEF,   1, 
                ,   4, 
            IC0D,   1, 
            IC1D,   1, 
            IC2D,   1, 
            IC3D,   1, 
            IC4D,   1, 
            IC5D,   1, 
            UT0D,   1, 
            UT1D,   1, 
            I31D,   1, 
            I32D,   1, 
            I33D,   1, 
            UT2D,   1, 
                ,   1, 
            EHCD,   1, 
                ,   1, 
            UT4D,   1, 
            I30D,   1, 
                ,   1, 
            XHCD,   1, 
            SD_D,   1, 
                ,   1, 
            UT3D,   1, 
                ,   1, 
            EMD3,   1, 
                ,   2, 
            S03D,   1, 
            Offset (0x1C), 
            I30M,   1, 
            I31M,   1, 
            I32M,   1, 
            I33M,   1
        }

        OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
        Field (FCFG, DWordAcc, NoLock, Preserve)
        {
            Offset (0xA3078), 
                ,   2, 
            LDQ0,   1, 
            Offset (0xA30CB), 
                ,   7, 
            AUSS,   1
        }

        OperationRegion (IOMX, SystemMemory, 0xFED80D00, 0x0100)
        Field (IOMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x15), 
            IM15,   8, 
            Offset (0x16), 
            IM16,   8, 
            Offset (0x1F), 
            IM1F,   8, 
            Offset (0x20), 
            IM20,   8, 
            Offset (0x44), 
            IM44,   8, 
            Offset (0x46), 
            IM46,   8, 
            Offset (0x4A), 
            IM4A,   8, 
            Offset (0x4B), 
            IM4B,   8, 
            Offset (0x57), 
            IM57,   8, 
            Offset (0x58), 
            IM58,   8, 
            Offset (0x68), 
            IM68,   8, 
            Offset (0x69), 
            IM69,   8, 
            Offset (0x6A), 
            IM6A,   8, 
            Offset (0x6B), 
            IM6B,   8, 
            Offset (0x6D), 
            IM6D,   8
        }

        OperationRegion (FACR, SystemMemory, 0xFED81E00, 0x0100)
        Field (FACR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x80), 
                ,   28, 
            RD28,   1, 
                ,   1, 
            RQTY,   1, 
            Offset (0x84), 
                ,   28, 
            SD28,   1, 
                ,   1, 
            Offset (0xA0), 
            PGA0,   1
        }

        OperationRegion (LUIE, SystemMemory, 0xFEDC0020, 0x04)
        Field (LUIE, AnyAcc, NoLock, Preserve)
        {
            IER0,   1, 
            IER1,   1, 
            IER2,   1, 
            IER3,   1, 
            UOL0,   1, 
            UOL1,   1, 
            UOL2,   1, 
            UOL3,   1, 
            WUR0,   2, 
            WUR1,   2, 
            WUR2,   2, 
            WUR3,   2
        }

        Method (FRUI, 1, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (IUA0) /* \_SB_.IUA0 */
            }
            ElseIf ((Arg0 == One))
            {
                Return (IUA1) /* \_SB_.IUA1 */
            }
            ElseIf ((Arg0 == 0x02))
            {
                Return (IUA2) /* \_SB_.IUA2 */
            }
            ElseIf ((Arg0 == 0x03))
            {
                Return (IUA3) /* \_SB_.IUA3 */
            }
            Else
            {
                Return (0x03)
            }
        }

        Method (FUIO, 1, Serialized)
        {
            If ((IER0 == One))
            {
                If ((WUR0 == Arg0))
                {
                    Return (Zero)
                }
            }

            If ((IER1 == One))
            {
                If ((WUR1 == Arg0))
                {
                    Return (One)
                }
            }

            If ((IER2 == One))
            {
                If ((WUR2 == Arg0))
                {
                    Return (0x02)
                }
            }

            If ((IER3 == One))
            {
                If ((WUR3 == Arg0))
                {
                    Return (0x03)
                }
            }

            Return (0x0F)
        }

        Method (SRAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            ADIS = One
            ADSR = Zero
            Stall (Arg1)
            ADSR = One
            ADIS = Zero
            Stall (Arg1)
        }

        Method (DSAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        Method (HSAD, 2, Serialized)
        {
            Local3 = (One << Arg0)
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    PGA0 = One
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    RQTY = One
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (!Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    RQTY = Zero
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }

                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    ADTD = 0x03
                    PGA0 = Zero
                }
            }
        }

        OperationRegion (FPIC, SystemIO, 0x0C00, 0x02)
        Field (FPIC, AnyAcc, NoLock, Preserve)
        {
            FPII,   8, 
            FPID,   8
        }

        IndexField (FPII, FPID, ByteAcc, NoLock, Preserve)
        {
            Offset (0xF4), 
            IUA0,   8, 
            Offset (0xF5), 
            IUA1,   8, 
            Offset (0xF8), 
            IUA2,   8, 
            Offset (0xF9), 
            IUA3,   8
        }

        Device (HFP1)
        {
            Name (_HID, "AMDI0060")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HFPE)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC11000,         // Address Base
                        0x00000100,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.HFP1._CRS.RBUF */
            }
        }

        Device (HID0)
        {
            Name (_HID, "AMDI0063")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HD0E)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC13000,         // Address Base
                        0x00000200,         // Address Length
                        )
                    GpioInt (Edge, ActiveHigh, SharedAndWake, PullNone, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x00AB
                        }
                })
                Return (RBUF) /* \_SB_.HID0._CRS.RBUF */
            }
        }

        Device (GPIO)
        {
            Name (_HID, "AMDI0030")  // _HID: Hardware ID
            Name (_CID, "AMDI0030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000400,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (PPKG)
        {
            Name (_HID, "AMDI0052")  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (FUR0)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {3}
                    Memory32Fixed (ReadWrite,
                        0xFEDC9000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDC7000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR0I & 0x0F))
                Return (BUF0) /* \_SB_.FUR0._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT0E == One))
                    {
                        If ((FUIO (Zero) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT0D && UT0E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT0D && UT0E))
                {
                    DSAD (0x0B, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT0D && UT0E))
                {
                    DSAD (0x0B, 0x03)
                }
            }
        }

        Device (FUR1)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDCA000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDC8000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR1I & 0x0F))
                Return (BUF0) /* \_SB_.FUR1._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT1E == One))
                    {
                        If ((FUIO (One) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT1D && UT1E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT1D && UT1E))
                {
                    DSAD (0x0C, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT1D && UT1E))
                {
                    DSAD (0x0C, 0x03)
                }
            }
        }

        Device (FUR2)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {3}
                    Memory32Fixed (ReadWrite,
                        0xFEDCE000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDCC000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR2I & 0x0F))
                Return (BUF0) /* \_SB_.FUR2._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT2E == One))
                    {
                        If ((FUIO (0x02) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT2D && UT2E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT2D && UT2E))
                {
                    DSAD (0x10, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT2D && UT2E))
                {
                    DSAD (0x10, 0x03)
                }
            }
        }

        Device (FUR3)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDCF000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDCD000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR3I & 0x0F))
                Return (BUF0) /* \_SB_.FUR3._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT3E == One))
                    {
                        If ((FUIO (0x03) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT3D && UT3E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT3D && UT3E))
                {
                    DSAD (0x1A, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT3D && UT3E))
                {
                    DSAD (0x1A, 0x03)
                }
            }
        }

        Device (FUR4)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {15}
                    Memory32Fixed (ReadWrite,
                        0xFEDD1000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDD0000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR4I & 0x0F))
                Return (BUF0) /* \_SB_.FUR4._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT4E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT4D && UT4E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT4D && UT4E))
                {
                    DSAD (0x14, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT4D && UT4E))
                {
                    DSAD (0x14, 0x03)
                }
            }
        }

        Device (I2CA)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {10}
                    Memory32Fixed (ReadWrite,
                        0xFEDC2000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC0I & 0x0F))
                Return (BUF0) /* \_SB_.I2CA._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC0E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e")))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x05, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC0D && IC0E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC0D && IC0E))
                {
                    DSAD (0x05, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC0D && IC0E))
                {
                    DSAD (0x05, 0x03)
                }
            }
        }

        Device (I2CB)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {11}
                    Memory32Fixed (ReadWrite,
                        0xFEDC3000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC1I & 0x0F))
                Return (BUF0) /* \_SB_.I2CB._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC1E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e")))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x06, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC1D && IC1E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC1D && IC1E))
                {
                    DSAD (0x06, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC1D && IC1E))
                {
                    DSAD (0x06, 0x03)
                }
            }
        }

        Device (I2CC)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDC4000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC2I & 0x0F))
                Return (BUF0) /* \_SB_.I2CC._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC2E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e")))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x07, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC2D && IC2E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC2D && IC2E))
                {
                    DSAD (0x07, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC2D && IC2E))
                {
                    DSAD (0x07, 0x03)
                }
            }
        }

        Device (I2CD)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {6}
                    Memory32Fixed (ReadWrite,
                        0xFEDC5000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC3I & 0x0F))
                Return (BUF0) /* \_SB_.I2CD._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC3E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e")))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x08, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC3D && IC3E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC3D && IC3E))
                {
                    DSAD (0x08, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC3D && IC3E))
                {
                    DSAD (0x08, 0x03)
                }
            }
        }

        Name (I3ID, "AMDI0015")
        Name (I2ID, "AMDI0016")
        Device (I3CA)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I30M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {10}
                    Memory32Fixed (ReadWrite,
                        0xFEDD2000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC0I & 0x0F))
                Return (BUF0) /* \_SB_.I3CA._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I30E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x15, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I30D && I30E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I30D && I30E))
                {
                    DSAD (0x15, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I30D && I30E))
                {
                    DSAD (0x15, 0x03)
                }
            }
        }

        Device (I3CB)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I31M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {11}
                    Memory32Fixed (ReadWrite,
                        0xFEDD3000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC1I & 0x0F))
                Return (BUF0) /* \_SB_.I3CB._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I31E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0D, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I31D && I31E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I31D && I31E))
                {
                    DSAD (0x0D, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I31D && I31E))
                {
                    DSAD (0x0D, 0x03)
                }
            }
        }

        Device (I3CC)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I32M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDD4000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC2I & 0x0F))
                Return (BUF0) /* \_SB_.I3CC._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I32E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0E, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I32D && I32E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I32D && I32E))
                {
                    DSAD (0x0E, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I32D && I32E))
                {
                    DSAD (0x0E, 0x03)
                }
            }
        }

        Device (I3CD)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I33M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {6}
                    Memory32Fixed (ReadWrite,
                        0xFEDD6000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC3I & 0x0F))
                Return (BUF0) /* \_SB_.I3CD._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I33E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0F, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I33D && I33E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I33D && I33E))
                {
                    DSAD (0x0F, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I33D && I33E))
                {
                    DSAD (0x0F, 0x03)
                }
            }
        }
    }

    Scope (\_SB.PCI0)
    {
        Device (UAR1)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_DDN, "COM1")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (Zero) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02E8,             // Range Minimum
                        0x02E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y2E)
                    IRQNoFlags (_Y2F)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y2E._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y2E._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR1._CRS._Y2F._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (Zero)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                IRQL = (One << (FRUI (Zero) & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR1._CRS.BUF0 */
            }
        }

        Device (UAR2)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_DDN, "COM2")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (One) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02F8,             // Range Minimum
                        0x02F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y30)
                    IRQNoFlags (_Y31)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y30._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y30._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR2._CRS._Y31._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (One)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                IRQL = (One << (FRUI (One) & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR2._CRS.BUF0 */
            }
        }

        Device (UAR3)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_DDN, "COM3")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (0x02) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03E8,             // Range Minimum
                        0x03E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y32)
                    IRQNoFlags (_Y33)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y32._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y32._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR3._CRS._Y33._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (0x02)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                IRQL = (One << (FRUI (0x02) & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR3._CRS.BUF0 */
            }
        }

        Device (UAR4)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_DDN, "COM4")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (0x03) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03F8,             // Range Minimum
                        0x03F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y34)
                    IRQNoFlags (_Y35)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y34._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y34._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR4._CRS._Y35._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (0x03)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                IRQL = (One << (FRUI (0x03) & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR4._CRS.BUF0 */
            }
        }
    }

    If ((G027 == One))
    {
        Scope (\_GPE)
        {
            Name (ETP0, 0x55)
            Name (ETP1, 0x55)
            Name (ETP2, 0x55)
            Name (ETP3, 0x55)
            Name (ETP4, 0x55)
            Name (ETP5, 0x55)
            Name (ETP6, 0x55)
            Name (ETP7, 0x55)
            Name (ETP8, 0x55)
            Name (ETP9, 0x55)
            Name (ETPA, 0x55)
            Name (ETPB, 0x55)
            Name (ETPC, 0x55)
            Name (ETPD, 0x55)
            Name (ETPE, 0x55)
            Name (ETPF, 0x55)
            Name (ETPG, 0x55)
            Name (ETPH, 0x55)
            Name (ET17, 0x55)
            Name (ET18, 0x55)
            Name (ET19, 0x55)
            Method (_E10, 0, NotSerialized)  // _Exx: Edge-Triggered GPE, xx=0x00-0xFF
            {
                M460 ("  OEM-ASL-\\_GPE._E10\n", Zero, Zero, Zero, Zero, Zero, Zero)
                M644 (0xFED80200, 0x04, 0x10)
                If ((\_GPE.ETP0 != 0xFF))
                {
                    \_GPE.ETP0 = (M017 (Zero, One, One, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETP0 == One) || (\_GPE.ETP0 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPP0))
                        {
                            If ((M620 != Zero))
                            {
                                If ((M049 (M620, 0x10) == One))
                                {
                                    If (((M049 (M620, 0x52) & 0x02) == Zero))
                                    {
                                        M460 ("    Notify (\\_SB.PCI0.GPP0, 0x0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                        Notify (\_SB.PCI0.GPP0, Zero) // Bus Check
                                    }
                                }
                            }

                            M460 ("    Notify (\\_SB.PCI0.GPP0, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPP0, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, One, One, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, One, One, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, One, One, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, One, One, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, One, One, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETP1 != 0xFF))
                {
                    \_GPE.ETP1 = (M017 (Zero, One, 0x02, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETP1 == One) || (\_GPE.ETP1 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPP1))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPP1, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPP1, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, One, 0x02, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, One, 0x02, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, One, 0x02, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, One, 0x02, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, One, 0x02, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETP2 != 0xFF))
                {
                    \_GPE.ETP2 = (M017 (Zero, One, 0x03, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETP2 == One) || (\_GPE.ETP2 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPP2))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPP2, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPP2, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, One, 0x03, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, One, 0x03, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, One, 0x03, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, One, 0x03, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, One, 0x03, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETP3 != 0xFF))
                {
                    \_GPE.ETP3 = (M017 (Zero, One, 0x04, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETP3 == One) || (\_GPE.ETP3 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPP3))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPP3, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPP3, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, One, 0x04, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, One, 0x04, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, One, 0x04, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, One, 0x04, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, One, 0x04, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETP4 != 0xFF))
                {
                    \_GPE.ETP4 = (M017 (Zero, One, 0x05, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETP4 == One) || (\_GPE.ETP4 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPP4))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPP4, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPP4, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, One, 0x05, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, One, 0x05, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, One, 0x05, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, One, 0x05, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, One, 0x05, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETP5 != 0xFF))
                {
                    \_GPE.ETP5 = (M017 (Zero, One, 0x06, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETP5 == One) || (\_GPE.ETP5 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPP5))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPP5, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPP5, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, One, 0x06, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, One, 0x06, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, One, 0x06, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, One, 0x06, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, One, 0x06, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETP6 != 0xFF))
                {
                    \_GPE.ETP6 = (M017 (Zero, One, 0x07, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETP6 == One) || (\_GPE.ETP6 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPP6))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPP6, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPP6, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, One, 0x07, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, One, 0x07, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, One, 0x07, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, One, 0x07, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, One, 0x07, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETP7 != 0xFF))
                {
                    \_GPE.ETP7 = (M017 (Zero, 0x02, One, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETP7 == One) || (\_GPE.ETP7 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPP7))
                        {
                            If ((M620 != Zero))
                            {
                                If ((M049 (M620, 0x10) == 0x03))
                                {
                                    If (((M049 (M620, 0x52) & 0x02) == Zero))
                                    {
                                        M460 ("    Notify (\\_SB.PCI0.GPP7, 0x0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                        Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                                    }
                                }
                                ElseIf ((M049 (M620, 0x10) == 0x04))
                                {
                                    If (((M049 (M620, 0x52) & 0x02) == Zero))
                                    {
                                        M460 ("    Notify (\\_SB.PCI0.GPP7, 0x0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                        Notify (\_SB.PCI0.GPP7, Zero) // Bus Check
                                    }
                                }
                            }

                            M460 ("    Notify (\\_SB.PCI0.GPP7, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPP7, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x02, One, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x02, One, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x02, One, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x02, One, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x02, One, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETP8 != 0xFF))
                {
                    \_GPE.ETP8 = (M017 (Zero, 0x02, 0x02, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETP8 == One) || (\_GPE.ETP8 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPP8))
                        {
                            If ((M620 != Zero))
                            {
                                If ((M049 (M620, 0x10) == 0x02))
                                {
                                    If (((M049 (M620, 0x52) & 0x02) == Zero))
                                    {
                                        M460 ("    Notify (\\_SB.PCI0.GPP8, 0x0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                        Notify (\_SB.PCI0.GPP8, Zero) // Bus Check
                                    }
                                }
                            }

                            M460 ("    Notify (\\_SB.PCI0.GPP8, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPP8, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x02, 0x02, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x02, 0x02, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x02, 0x02, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x02, 0x02, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x02, 0x02, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETP9 != 0xFF))
                {
                    \_GPE.ETP9 = (M017 (Zero, 0x03, One, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETP9 == One) || (\_GPE.ETP9 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPP9))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPP9, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPP9, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x03, One, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x03, One, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x03, One, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x03, One, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x03, One, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETPA != 0xFF))
                {
                    \_GPE.ETPA = (M017 (Zero, 0x03, 0x02, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETPA == One) || (\_GPE.ETPA == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPPA))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPPA, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPPA, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x03, 0x02, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x03, 0x02, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x03, 0x02, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x03, 0x02, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x03, 0x02, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETPB != 0xFF))
                {
                    \_GPE.ETPB = (M017 (Zero, 0x03, 0x03, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETPB == One) || (\_GPE.ETPB == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPPB))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPPB, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPPB, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x03, 0x03, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x03, 0x03, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x03, 0x03, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x03, 0x03, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x03, 0x03, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETPC != 0xFF))
                {
                    \_GPE.ETPC = (M017 (Zero, 0x03, 0x04, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETPC == One) || (\_GPE.ETPC == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPPC))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPPC, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPPC, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x03, 0x04, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x03, 0x04, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x03, 0x04, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x03, 0x04, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x03, 0x04, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETPD != 0xFF))
                {
                    \_GPE.ETPD = (M017 (Zero, 0x03, 0x05, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETPD == One) || (\_GPE.ETPD == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPPD))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPPD, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPPD, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x03, 0x05, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x03, 0x05, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x03, 0x05, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x03, 0x05, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x03, 0x05, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETPE != 0xFF))
                {
                    \_GPE.ETPE = (M017 (Zero, 0x03, 0x06, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETPE == One) || (\_GPE.ETPE == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPPE))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPPE, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPPE, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x03, 0x06, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x03, 0x06, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x03, 0x06, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x03, 0x06, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x03, 0x06, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETPF != 0xFF))
                {
                    \_GPE.ETPF = (M017 (Zero, 0x03, 0x07, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETPF == One) || (\_GPE.ETPF == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPPF))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPPF, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPPF, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x03, 0x07, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x03, 0x07, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x03, 0x07, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x03, 0x07, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x03, 0x07, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETPG != 0xFF))
                {
                    \_GPE.ETPG = (M017 (Zero, 0x04, One, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETPG == One) || (\_GPE.ETPG == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPPG))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPPG, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPPG, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x04, One, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x04, One, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x04, One, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x04, One, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x04, One, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ETPH != 0xFF))
                {
                    \_GPE.ETPH = (M017 (Zero, 0x04, 0x02, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ETPH == One) || (\_GPE.ETPH == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GPPH))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GPPH, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GPPH, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x04, 0x02, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x04, 0x02, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x04, 0x02, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x04, 0x02, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x04, 0x02, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ET17 != 0xFF))
                {
                    \_GPE.ET17 = (M017 (Zero, 0x08, One, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ET17 == One) || (\_GPE.ET17 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GP17))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GP17, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GP17, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x08, One, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x08, One, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x08, One, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x08, One, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x08, One, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ET18 != 0xFF))
                {
                    \_GPE.ET18 = (M017 (Zero, 0x08, 0x02, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ET18 == One) || (\_GPE.ET18 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GP18))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GP18, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GP18, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x08, 0x02, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x08, 0x02, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x08, 0x02, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x08, 0x02, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x08, 0x02, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }

                If ((\_GPE.ET19 != 0xFF))
                {
                    \_GPE.ET19 = (M017 (Zero, 0x08, 0x03, 0x78, Zero, 0x18) >> 0x10)
                    If (((\_GPE.ET19 == One) || (\_GPE.ET19 == 0x03)))
                    {
                        If (CondRefOf (\_SB.PCI0.GP19))
                        {
                            M460 ("    Notify (\\_SB.PCI0.GP19, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Notify (\_SB.PCI0.GP19, 0x02) // Device Wake
                            Sleep (0x64)
                            Local0 = M017 (Zero, 0x08, 0x03, 0x78, Zero, 0x20)
                            If (((Local0 & 0x00030000) != Zero))
                            {
                                M018 (Zero, 0x08, 0x03, 0x78, Zero, 0x20, Local0)
                                Local0 = M017 (Zero, 0x08, 0x03, 0x78, Zero, 0x20)
                                If (((Local0 & 0x00030000) != Zero))
                                {
                                    M018 (Zero, 0x08, 0x03, 0x78, Zero, 0x20, Local0)
                                    Local0 = M017 (Zero, 0x08, 0x03, 0x78, Zero, 0x20)
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    If ((G001 == One))
    {
        Scope (\_SB.PCI0)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                \_SB.PEP
            })
        }

        Scope (\_SB)
        {
            Device (PEP)
            {
                Name (_HID, "AMDI0008")  // _HID: Hardware ID
                Name (_CID, EisaId ("PNP0D80") /* Windows-compatible System Power Management Controller */)  // _CID: Compatible ID
                Name (_UID, One)  // _UID: Unique ID
                Name (DEV0, Package (0x03)
                {
                    Zero, 
                    0x2B, 
                    Package (0x2B)
                    {
                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C000", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C001", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C002", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C003", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C004", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C005", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C006", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C007", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C008", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C009", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C00A", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C00B", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C00C", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C00D", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C00E", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C00F", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C010", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C011", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C012", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C013", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C014", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C015", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C016", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C017", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C018", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C019", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C01A", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C01B", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C01C", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C01D", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C01E", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PLTF.C01F", 
                            One, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PCI0.GPP0", 
                            Zero, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PCI0.GPP7", 
                            Zero, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PCI0.GPP8", 
                            Zero, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PCI0.GPP1.NVME", 
                            Zero, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PCI0.GP17.VGA", 
                            Zero, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PCI0.GP17.AZAL", 
                            Zero, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PCI0.GP17.ACP", 
                            Zero, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PCI0.GP17.HDAU", 
                            Zero, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PCI0.GP17.XHC0", 
                            Zero, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PCI0.GP17.XHC1", 
                            Zero, 
                            0x03
                        }, 

                        Package (0x04)
                        {
                            One, 
                            "\\_SB.PCI0.GP19.XHC2", 
                            Zero, 
                            0x03
                        }
                    }
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e3f32452-febc-43ce-9039-932122d37721")))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Switch (ToInteger (Arg1))
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x03                                             // .
                                        })
                                    }
                                    Case (One)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x03                                             // .
                                        })
                                    }
                                    Case (0x02)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x3F                                             // ?
                                        })
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }
                            Case (One)
                            {
                                DEV0 [One] = SizeOf (DEV0 [0x02])
                                Return (DEV0) /* \_SB_.PEP_.DEV0 */
                            }
                            Case (0x02)
                            {
                                M000 (0x3E14)
                                Return (Zero)
                            }
                            Case (0x03)
                            {
                                M000 (0x3E15)
                                Return (Zero)
                            }
                            Case (0x04)
                            {
                                M000 (0x3E12)
                                Return (Zero)
                            }
                            Case (0x05)
                            {
                                M000 (0x3E13)
                                Return (Zero)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    ElseIf ((Arg0 == ToUUID ("11e00d56-ce64-47ce-837b-1f898f9aa461")))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Switch (ToInteger (Arg1))
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (0x02)
                                        {
                                             0xF9, 0x01                                       // ..
                                        })
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }
                            Case (0x03)
                            {
                                M000 (0x3E03)
                                Return (Zero)
                            }
                            Case (0x04)
                            {
                                M000 (0x3E04)
                                Return (Zero)
                            }
                            Case (0x05)
                            {
                                M000 (0x3E05)
                                Return (Zero)
                            }
                            Case (0x06)
                            {
                                M000 (0x3E06)
                                Return (Zero)
                            }
                            Case (0x07)
                            {
                                M000 (0x3E07)
                                Return (Zero)
                            }
                            Case (0x08)
                            {
                                M000 (0x3E08)
                                Return (Zero)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }
            }
        }

        Scope (\_TZ)
        {
            ThermalZone (TZ01)
            {
                Name (TZV0, 0xFF)
                Name (TZV1, 0x012C)
                Name (TZV2, Zero)
                Name (TZV3, Zero)
                Name (TZV4, 0xFF)
                Name (TZV5, 0xFF)
                Method (_TMP, 0, Serialized)  // _TMP: Temperature
                {
                    If ((TZV0 == 0xFF))
                    {
                        Local0 = M249 (Zero, Zero, Zero, 0x000599D4)
                        TZV0 = ((Local0 >> 0x0B) & One)
                    }

                    Local0 = M249 (Zero, Zero, Zero, 0x00059800)
                    TZV1 = ((Local0 >> 0x15) & 0x7FFF)
                    TZV1 = (TZV1 * 0x0A)
                    If ((TZV0 == One))
                    {
                        TZV1 = (TZV1 / 0x04)
                    }
                    Else
                    {
                        TZV1 = (TZV1 / 0x08)
                        If ((TZV4 == 0xFF))
                        {
                            TZV2 = ((Local0 >> 0x10) & 0x03)
                            TZV3 = ((Local0 >> 0x13) & One)
                            TZV4 = ((TZV2 != 0x03) && (TZV3 == Zero))
                        }

                        If ((TZV4 == Zero))
                        {
                            TZV1 -= 0x01EA
                        }
                    }

                    Return ((0x0AAC + TZV1))
                }

                Method (_PSL, 0, Serialized)  // _PSL: Passive List
                {
                    Return (Package (0x10)
                    {
                        \_SB.PLTF.C000, 
                        \_SB.PLTF.C001, 
                        \_SB.PLTF.C002, 
                        \_SB.PLTF.C003, 
                        \_SB.PLTF.C004, 
                        \_SB.PLTF.C005, 
                        \_SB.PLTF.C006, 
                        \_SB.PLTF.C007, 
                        \_SB.PLTF.C008, 
                        \_SB.PLTF.C009, 
                        \_SB.PLTF.C00A, 
                        \_SB.PLTF.C00B, 
                        \_SB.PLTF.C00C, 
                        \_SB.PLTF.C00D, 
                        \_SB.PLTF.C00E, 
                        \_SB.PLTF.C00F
                    })
                }

                Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
                {
                    If ((TZV5 == 0xFF))
                    {
                        Local0 = M249 (Zero, Zero, Zero, 0x00059808)
                        Local1 = ((Local0 >> 0x06) & 0xFF)
                        TZV5 = (Local1 - 0x31)
                    }

                    Return ((0x0AAC + (TZV5 * 0x0A)))
                }

                Method (_TC1, 0, Serialized)  // _TC1: Thermal Constant 1
                {
                    Return (One)
                }

                Method (_TC2, 0, Serialized)  // _TC2: Thermal Constant 2
                {
                    Return (0x02)
                }

                Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
                {
                    Return (0x14)
                }
            }
        }
    }

    Scope (\_SB.PCI0.GPP7.UP00.DP40.UP00.DP20)
    {
        Device (WIFI)
        {
            Name (_ADR, Zero)  // _ADR: Address
            OperationRegion (MPCI, PCI_Config, Zero, 0x10)
            Field (MPCI, AnyAcc, NoLock, Preserve)
            {
                Offset (0x00), 
                MPVD,   32
            }

            Method (MWST, 0, Serialized)
            {
                If (CondRefOf (MPVD))
                {
                    Switch (ToInteger (MPVD))
                    {
                        Case (0x060814C3)
                        {
                            Return (One)
                        }
                        Case (0x061614C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (MTCL, 0, Serialized)
            {
                If (MWST ())
                {
                    Name (MWCL, Package (0x13)
                    {
                        0x4D, 
                        0x54, 
                        0x43, 
                        0x4C, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    MWCL [0x05] = W6GS /* External reference */
                    MWCL [0x06] = W6C1 /* External reference */
                    MWCL [0x07] = W6C2 /* External reference */
                    MWCL [0x08] = W6C3 /* External reference */
                    MWCL [0x09] = W6C4 /* External reference */
                    MWCL [0x0A] = W6C5 /* External reference */
                    MWCL [0x0B] = W6C6 /* External reference */
                    Return (MWCL) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP20.WIFI.MTCL.MWCL */
                }
                Else
                {
                    Return (Zero)
                }
            }

            OperationRegion (RPXX, PCI_Config, Zero, 0x10)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                Offset (0x00), 
                VDID,   32
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (!WIST ())
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
                ElseIf ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x09                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == 0x03))
                    {
                        Local0 = UHBS /* External reference */
                        Return (Local0)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (\_SB.I2CA)
    {
        Device (CCG2)
        {
            Name (_HID, "CYP0002")  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0008, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB.I2CA",
                    0x00, ResourceConsumer, , Exclusive,
                    )
                GpioInt (Edge, ActiveBoth, ExclusiveAndWake, PullDefault, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x005A
                    }
                GpioIo (Shared, PullUp, 0x0000, 0x0000, IoRestrictionInputOnly,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x005A
                    }
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TBIN == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000114
[008h 0008   1]                     Revision : 06
[009h 0009   1]                     Checksum : 89
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]                 FACS Address : 76A2D000
[028h 0040   4]                 DSDT Address : 74A16000
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 01 [Desktop]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 000000B4
[04Ch 0076   4]       PM Timer Block Address : 00000808
[050h 0080   4]           GPE0 Block Address : 00000820
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0000
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 0003C5A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 1
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 00000000000000B2

[080h 0128   1]         Value to cause reset : BE
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 04
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 0000000074A16000
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 02 [Word Access:16]
[098h 0152   8]                      Address : 0000000000000800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 02 [Word Access:16]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000000804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 02 [Word Access:16]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 00000000000000B4

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000000808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224   8]                      Address : 0000000000000820

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 00
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248   8]                      Address : 0000000000000000

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 00 [SystemMemory]
[101h 0257   1]                    Bit Width : 00
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260   8]                      Address : 0000000000000000

[10Ch 0268   8]                Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 89 41 4C 41 53 4B 41  // FACP......ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 00 D0 A2 76 00 60 A1 74 00 01 09 00  // .......v.`.t....
    0030: B2 00 00 00 A0 A1 00 00 00 08 00 00 00 00 00 00  // ................
    0040: 04 08 00 00 00 00 00 00 B4 00 00 00 08 08 00 00  // ................
    0050: 20 08 00 00 00 00 00 00 04 02 01 04 08 00 00 00  //  ...............
    0060: 65 00 E9 03 00 04 10 00 01 03 0D 00 32 00 00 00  // e...........2...
    0070: A5 C5 03 00 01 08 00 00 B2 00 00 00 00 00 00 00  // ................
    0080: BE 00 00 04 00 00 00 00 00 00 00 00 00 60 A1 74  // .............`.t
    0090: 00 00 00 00 01 20 00 02 00 08 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 08 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 B4 00 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 08 00 00 00 00 00 00 01 40 00 01  // . ...........@..
    00E0: 20 08 00 00 00 00 00 00 01 00 00 01 00 00 00 00  //  ...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 8D37F5BC
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 BC F5 37 8D 00 00 00 00  // FACS@.....7.....
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FIDT
----
[000h 0000   4]                    Signature : "FIDT"    
[004h 0004   4]                 Table Length : 0000009C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : EA
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013


**** Unknown ACPI table signature [FIDT]


Raw Table Data: Length 156 (0x9C)

    0000: 46 49 44 54 9C 00 00 00 01 EA 41 4C 41 53 4B 41  // FIDT......ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 13 00 01 00 24 46 49 44 04 78 00 41 35 33 32 37  // ....$FID.x.A5327
    0030: 00 00 00 00 96 8E 9C 72 93 EF 7E F8 03 07 53 39  // .......r..~...S9
    0040: AA 3A AA B7 30 35 00 32 36 00 31 37 00 30 39 00  // .:..05.26.17.09.
    0050: E7 07 09 1C 0F 39 0D FF FF 41 4C 41 53 4B 41 41  // .....9...ALASKAA
    0060: 20 4D 20 49 00 00 00 31 00 00 00 FF FF FF FF FF  //  M I...1........
    0070: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0080: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0090: FF FF FF FF FF FF FF FF FF FF FF FF              // ............


FPDT
----
[000h 0000   4]                    Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004   4]                 Table Length : 00000044
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 99
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 01000013


[024h 0036   2]                Subtable Type : 0000
[026h 0038   1]                       Length : 10
[027h 0039   1]                     Revision : 01
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   8]     FPDT Boot Record Address : 0000000074842000

[034h 0052   2]                Subtable Type : 0001
[036h 0054   1]                       Length : 10
[037h 0055   1]                     Revision : 01
[038h 0056   4]                     Reserved : 00000000
[03Ch 0060   8]          S3PT Record Address : 000000007485A000

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 99 41 4C 41 53 4B 41  // FPDTD.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 00 01 00 00 10 01 00 00 00 00 00 20 84 74  // ............. .t
    0030: 00 00 00 00 01 00 10 01 00 00 00 00 00 A0 85 74  // ...............t
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : BD
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00000005

[024h 0036   4]            Hardware Block ID : 10228201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 40
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 37EE
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 BD 41 4C 41 53 4B 41  // HPET8.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 05 00 00 00 01 82 22 10 00 40 00 00 00 00 D0 FE  // ......"..@......
    0030: 00 00 00 00 00 EE 37 00                          // ......7.


IVRS
----
[000h 0000   4]                    Signature : "IVRS"    [I/O Virtualization Reporting Structure]
[004h 0004   4]                 Table Length : 000000C8
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 61
[00Ah 0010   6]                       Oem ID : "AMD  "
[010h 0016   8]                 Oem Table ID : "AmdTable"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]          Virtualization Info : 00203041
[028h 0040   8]                     Reserved : 0000000000000000

[030h 0048   1]                Subtable Type : 10 [Hardware Definition Block]
[031h 0049   1]                        Flags : B0
[032h 0050   2]                       Length : 0044
[034h 0052   2]                     DeviceId : 0002

[036h 0054   2]            Capability Offset : 0040
[038h 0056   8]                 Base Address : 00000000FD500000
[040h 0064   2]            PCI Segment Group : 0000
[042h 0066   2]          Virtualization Info : 0000
[044h 0068   4]            Feature Reporting : 80048F6E

[048h 0072   1]                   Entry Type : 03
[049h 0073   2]                    Device ID : 0003
[04Bh 0075   1]                 Data Setting : 00

[04Ch 0076   1]                   Entry Type : 04
[04Dh 0077   2]                    Device ID : FFFE
[04Fh 0079   1]                 Data Setting : 00

[050h 0080   1]                   Entry Type : 43
[051h 0081   2]                    Device ID : FF00
[053h 0083   1]                 Data Setting : 00
[054h 0084   1]                     Reserved : 00
[055h 0085   2]        Source Used Device ID : 00A5
[057h 0087   1]                     Reserved : 00

[058h 0088   1]                   Entry Type : 04
[059h 0089   2]                    Device ID : FFFF
[05Bh 0091   1]                 Data Setting : 00

[05Ch 0092   1]                   Entry Type : 48
[05Dh 0093   2]                    Device ID : 0000
[05Fh 0095   1]                 Data Setting : 00
[060h 0096   1]                       Handle : 00
[061h 0097   2]        Source Used Device ID : 00A0
[063h 0099   1]                      Variety : 02

[064h 0100   1]                   Entry Type : 48
[065h 0101   2]                    Device ID : 0000
[067h 0103   1]                 Data Setting : D7
[068h 0104   1]                       Handle : 20
[069h 0105   2]        Source Used Device ID : 00A0
[06Bh 0107   1]                      Variety : 01

[06Ch 0108   1]                   Entry Type : 48
[06Dh 0109   2]                    Device ID : 0000
[06Fh 0111   1]                 Data Setting : 00
[070h 0112   1]                       Handle : 21
[071h 0113   2]        Source Used Device ID : 0001
[073h 0115   1]                      Variety : 01

[074h 0116   1]                Subtable Type : 11 [Hardware Definition Block]
[075h 0117   1]                        Flags : 30
[076h 0118   2]                       Length : 0054
[078h 0120   2]                     DeviceId : 0002

[07Ah 0122   2]            Capability Offset : 0040
[07Ch 0124   8]                 Base Address : 00000000FD500000
[084h 0132   2]            PCI Segment Group : 0000
[086h 0134   2]          Virtualization Info : 0000
[088h 0136   4]                   Attributes : 00048000
[08Ch 0140   8]                    EFR Image : 246577EFA2254AFA
[094h 0148   8]                     Reserved : 0000000000000000

[09Ch 0156   1]                   Entry Type : 03
[09Dh 0157   2]                    Device ID : 0003
[09Fh 0159   1]                 Data Setting : 00

[0A0h 0160   1]                   Entry Type : 04
[0A1h 0161   2]                    Device ID : FFFE
[0A3h 0163   1]                 Data Setting : 00

[0A4h 0164   1]                   Entry Type : 43
[0A5h 0165   2]                    Device ID : FF00
[0A7h 0167   1]                 Data Setting : 00
[0A8h 0168   1]                     Reserved : 00
[0A9h 0169   2]        Source Used Device ID : 00A5
[0ABh 0171   1]                     Reserved : 00

[0ACh 0172   1]                   Entry Type : 04
[0ADh 0173   2]                    Device ID : FFFF
[0AFh 0175   1]                 Data Setting : 00

[0B0h 0176   1]                   Entry Type : 48
[0B1h 0177   2]                    Device ID : 0000
[0B3h 0179   1]                 Data Setting : 00
[0B4h 0180   1]                       Handle : 00
[0B5h 0181   2]        Source Used Device ID : 00A0
[0B7h 0183   1]                      Variety : 02

[0B8h 0184   1]                   Entry Type : 48
[0B9h 0185   2]                    Device ID : 0000
[0BBh 0187   1]                 Data Setting : D7
[0BCh 0188   1]                       Handle : 20
[0BDh 0189   2]        Source Used Device ID : 00A0
[0BFh 0191   1]                      Variety : 01

[0C0h 0192   1]                   Entry Type : 48
[0C1h 0193   2]                    Device ID : 0000
[0C3h 0195   1]                 Data Setting : 00
[0C4h 0196   1]                       Handle : 21
[0C5h 0197   2]        Source Used Device ID : 0001
[0C7h 0199   1]                      Variety : 01

Raw Table Data: Length 200 (0xC8)

    0000: 49 56 52 53 C8 00 00 00 02 61 41 4D 44 20 20 00  // IVRS.....aAMD  .
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 41 30 20 00 00 00 00 00 00 00 00 00  // ....A0 .........
    0030: 10 B0 44 00 02 00 40 00 00 00 50 FD 00 00 00 00  // ..D...@...P.....
    0040: 00 00 00 00 6E 8F 04 80 03 03 00 00 04 FE FF 00  // ....n...........
    0050: 43 00 FF 00 00 A5 00 00 04 FF FF 00 48 00 00 00  // C...........H...
    0060: 00 A0 00 02 48 00 00 D7 20 A0 00 01 48 00 00 00  // ....H... ...H...
    0070: 21 01 00 01 11 30 54 00 02 00 40 00 00 00 50 FD  // !....0T...@...P.
    0080: 00 00 00 00 00 00 00 00 00 80 04 00 FA 4A 25 A2  // .............J%.
    0090: EF 77 65 24 00 00 00 00 00 00 00 00 03 03 00 00  // .we$............
    00A0: 04 FE FF 00 43 00 FF 00 00 A5 00 00 04 FF FF 00  // ....C...........
    00B0: 48 00 00 00 00 A0 00 02 48 00 00 D7 20 A0 00 01  // H.......H... ...
    00C0: 48 00 00 00 21 01 00 01                          // H...!...


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 84
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000E0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : FF
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 84 41 4C 41 53 4B 41  // MCFG<.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 4D 53 46 54  // A M I.... ..MSFT
    0020: 13 00 01 00 00 00 00 00 00 00 00 00 00 00 00 E0  // ................
    0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


SSDT1
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "CPMDFDG2", 0x00000001)
{
    External (_SB_.PCI0.GPP0, DeviceObj)
    External (_SB_.PCI0.GPP0.M241, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.M434, IntObj)
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M047, IntObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M32C, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (M652, FieldUnitObj)

    Scope (\_SB.PCI0.GPP0)
    {
        PowerResource (M237, 0x00, 0x0000)
        {
            Name (M239, One)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (M239) /* \_SB_.PCI0.GPP0.M237.M239 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                If ((M239 == Zero))
                {
                    If (CondRefOf (\_SB.PCI0.GPP0.M241))
                    {
                        \_SB.PCI0.GPP0.M241 (One)
                    }
                }

                M239 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                If ((M239 == One))
                {
                    If (CondRefOf (\_SB.PCI0.GPP0.M241))
                    {
                        \_SB.PCI0.GPP0.M241 (Zero)
                    }
                }

                M239 = Zero
            }
        }

        Name (XPR0, Package (0x01)
        {
            M237
        })
        Name (XPR2, Package (0x01)
        {
            M237
        })
        Name (XPR3, Package (0x01)
        {
            M237
        })
        Name (XS0W, 0x04)
        Device (SWUS)
        {
            PowerResource (M237, 0x00, 0x0000)
            {
                Name (M239, One)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (M239) /* \_SB_.PCI0.GPP0.SWUS.M237.M239 */
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    M239 = One
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    M239 = Zero
                }
            }

            Name (XPR0, Package (0x01)
            {
                M237
            })
            Name (XPR2, Package (0x01)
            {
                M237
            })
            Name (XPR3, Package (0x01)
            {
                M237
            })
            Name (XS0W, 0x04)
            Name (_ADR, Zero)  // _ADR: Address
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }

            Name (DDPM, Package (0x02)
            {
                0x08, 
                0x04
            })
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (DDPM) /* \_SB_.PCI0.GPP0.SWUS.DDPM */
            }

            Device (SWDS)
            {
                PowerResource (M237, 0x00, 0x0000)
                {
                    Name (M239, One)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (M239) /* \_SB_.PCI0.GPP0.SWUS.SWDS.M237.M239 */
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        M239 = One
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        M239 = Zero
                    }
                }

                Name (XPR0, Package (0x01)
                {
                    M237
                })
                Name (XPR2, Package (0x01)
                {
                    M237
                })
                Name (XPR3, Package (0x01)
                {
                    M237
                })
                Name (XS0W, 0x04)
                Name (_ADR, Zero)  // _ADR: Address
                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (Zero)
                }

                Name (DDPM, Package (0x02)
                {
                    0x08, 
                    0x04
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (DDPM) /* \_SB_.PCI0.GPP0.SWUS.SWDS.DDPM */
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((M097 != Zero))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }
                }

                Method (_DSD, 0, Serialized)  // _DSD: Device-Specific Data
                {
                    Return (Package (0x02)
                    {
                        ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb"), 
                        Package (0x00){}
                    })
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    Name (M432, Zero)
                    Name (M433, Zero)
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (M435, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (M435, Zero, M436)
                                CreateBitField (M435, 0x05, M445)
                                CreateBitField (M435, 0x0A, M437)
                                CreateBitField (M435, 0x0B, M438)
                                If ((Arg1 >= 0x04))
                                {
                                    M436 = One
                                    M445 = One
                                    M432 = ((M049 (M128, 0x66) >> 0x04) & One)
                                    M433 = ((M049 (M128, 0x66) >> 0x05) & One)
                                    If ((M432 == One))
                                    {
                                        M437 = One
                                    }

                                    If ((M433 == One))
                                    {
                                        M438 = One
                                    }
                                }
                                Else
                                {
                                    M436 = One
                                    M445 = One
                                }

                                Return (M435) /* \_SB_.PCI0.GPP0.SWUS.SWDS._DSM.M435 */
                            }
                            Case (0x05)
                            {
                                Return (Zero)
                            }
                            Case (0x0A)
                            {
                                Return (One)
                            }
                            Case (0x0B)
                            {
                                Local0 = ToInteger (Arg3)
                                If ((Local0 <= 0x2710))
                                {
                                    \_SB.PCI0.GPP0.M434 = 0x2710
                                }
                                Else
                                {
                                    Local0 = 0x2710
                                }

                                Return (Local0)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }
            }
        }

        Method (_DSD, 0, Serialized)  // _DSD: Device-Specific Data
        {
            Return (Package (0x04)
            {
                ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4"), 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "HotPlugSupportInD3", 
                        One
                    }
                }, 

                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10"), 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                        One
                    }
                }
            })
        }
    }
}



SSDT10
------
DefinitionBlock ("", "SSDT", 2, "AMD", "MEMTOOL0", 0x00000002)
{
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M047, IntObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M04E, MethodObj)    // 3 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M32C, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (M652, FieldUnitObj)

    Method (MGRT, 1, NotSerialized)
    {
        CreateDWordField (Arg0, Zero, MEMI)
        CreateDWordField (Arg0, 0x04, MEMD)
        M460 ("  FEA-ASL-Memory Margin Tool Cmd:0x%X Value:0x%X\n", MEMI, MEMD, Zero, Zero, Zero, Zero)
        If ((M610 != Zero))
        {
            Local2 = M049 (M610, 0x10)
            Local3 = MEMI /* \MGRT.MEMI */
            Local4 = MEMD /* \MGRT.MEMD */
            M04E (M610, 0x11, Local3)
            M04E (M610, 0x15, Local4)
            M232 (Local2, Zero, Zero)
        }
    }
}



SSDT11
------
DefinitionBlock ("", "SSDT", 2, "AMD", "CPMCMN", 0x00000001)
{
    External (_GPE, DeviceObj)
    External (_GPE.AIE0, MethodObj)    // 0 Arguments
    External (_GPE.AIE1, MethodObj)    // 0 Arguments
    External (_GPE.AIE2, MethodObj)    // 0 Arguments
    External (_GPE.AIE3, MethodObj)    // 0 Arguments
    External (_GPE.BIE0, MethodObj)    // 0 Arguments
    External (_GPE.BIE1, MethodObj)    // 0 Arguments
    External (_GPE.BIE2, MethodObj)    // 0 Arguments
    External (_GPE.BIE3, MethodObj)    // 0 Arguments
    External (_GPE.PTS0, MethodObj)    // 1 Arguments
    External (_GPE.PTS1, MethodObj)    // 1 Arguments
    External (_GPE.PTS2, MethodObj)    // 1 Arguments
    External (_GPE.PTS3, MethodObj)    // 1 Arguments
    External (_GPE.SP00, MethodObj)    // 0 Arguments
    External (_GPE.SP01, MethodObj)    // 0 Arguments
    External (_GPE.SP02, MethodObj)    // 0 Arguments
    External (_GPE.SP03, MethodObj)    // 0 Arguments
    External (_GPE.SP04, MethodObj)    // 0 Arguments
    External (_GPE.SP05, MethodObj)    // 0 Arguments
    External (_GPE.SP06, MethodObj)    // 0 Arguments
    External (_GPE.SP07, MethodObj)    // 0 Arguments
    External (_GPE.SP10, MethodObj)    // 0 Arguments
    External (_GPE.SP11, MethodObj)    // 0 Arguments
    External (_GPE.SP12, MethodObj)    // 0 Arguments
    External (_GPE.SP13, MethodObj)    // 0 Arguments
    External (_GPE.SP14, MethodObj)    // 0 Arguments
    External (_GPE.SP15, MethodObj)    // 0 Arguments
    External (_GPE.SP16, MethodObj)    // 0 Arguments
    External (_GPE.SP17, MethodObj)    // 0 Arguments
    External (_GPE.SP20, MethodObj)    // 0 Arguments
    External (_GPE.SP21, MethodObj)    // 0 Arguments
    External (_GPE.SP22, MethodObj)    // 0 Arguments
    External (_GPE.SP23, MethodObj)    // 0 Arguments
    External (_GPE.SP24, MethodObj)    // 0 Arguments
    External (_GPE.SP25, MethodObj)    // 0 Arguments
    External (_GPE.SP26, MethodObj)    // 0 Arguments
    External (_GPE.SP27, MethodObj)    // 0 Arguments
    External (_GPE.SP30, MethodObj)    // 0 Arguments
    External (_GPE.SP31, MethodObj)    // 0 Arguments
    External (_GPE.SP32, MethodObj)    // 0 Arguments
    External (_GPE.SP33, MethodObj)    // 0 Arguments
    External (_GPE.SP34, MethodObj)    // 0 Arguments
    External (_GPE.SP35, MethodObj)    // 0 Arguments
    External (_GPE.SP36, MethodObj)    // 0 Arguments
    External (_GPE.SP37, MethodObj)    // 0 Arguments
    External (_GPE.SP40, MethodObj)    // 0 Arguments
    External (_GPE.SP41, MethodObj)    // 0 Arguments
    External (_GPE.SP42, MethodObj)    // 0 Arguments
    External (_GPE.SP43, MethodObj)    // 0 Arguments
    External (_GPE.SP44, MethodObj)    // 0 Arguments
    External (_GPE.SP45, MethodObj)    // 0 Arguments
    External (_GPE.SP46, MethodObj)    // 0 Arguments
    External (_GPE.SP47, MethodObj)    // 0 Arguments
    External (_GPE.SP50, MethodObj)    // 0 Arguments
    External (_GPE.SP51, MethodObj)    // 0 Arguments
    External (_GPE.SP52, MethodObj)    // 0 Arguments
    External (_GPE.SP53, MethodObj)    // 0 Arguments
    External (_GPE.SP54, MethodObj)    // 0 Arguments
    External (_GPE.SP55, MethodObj)    // 0 Arguments
    External (_GPE.SP56, MethodObj)    // 0 Arguments
    External (_GPE.SP57, MethodObj)    // 0 Arguments
    External (_GPE.SP60, MethodObj)    // 0 Arguments
    External (_GPE.SP61, MethodObj)    // 0 Arguments
    External (_GPE.SP62, MethodObj)    // 0 Arguments
    External (_GPE.SP63, MethodObj)    // 0 Arguments
    External (_GPE.SP64, MethodObj)    // 0 Arguments
    External (_GPE.SP65, MethodObj)    // 0 Arguments
    External (_GPE.SP66, MethodObj)    // 0 Arguments
    External (_GPE.SP67, MethodObj)    // 0 Arguments
    External (_GPE.SP70, MethodObj)    // 0 Arguments
    External (_GPE.SP71, MethodObj)    // 0 Arguments
    External (_GPE.SP72, MethodObj)    // 0 Arguments
    External (_GPE.SP73, MethodObj)    // 0 Arguments
    External (_GPE.SP74, MethodObj)    // 0 Arguments
    External (_GPE.SP75, MethodObj)    // 0 Arguments
    External (_GPE.SP76, MethodObj)    // 0 Arguments
    External (_GPE.SP77, MethodObj)    // 0 Arguments
    External (_GPE.WAK0, MethodObj)    // 1 Arguments
    External (_GPE.WAK1, MethodObj)    // 1 Arguments
    External (_GPE.WAK2, MethodObj)    // 1 Arguments
    External (_GPE.WAK3, MethodObj)    // 1 Arguments
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.AM00, MutexObj)
    External (_SB_.BPTS, MethodObj)    // 1 Arguments
    External (_SB_.BWAK, MethodObj)    // 1 Arguments
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.IPTS, MethodObj)    // 1 Arguments
    External (_SB_.IWAK, MethodObj)    // 1 Arguments
    External (_SB_.M263, MethodObj)    // 1 Arguments
    External (_SB_.M264, MethodObj)    // 1 Arguments
    External (_SB_.M284, MethodObj)    // 1 Arguments
    External (_SB_.OPTS, MethodObj)    // 1 Arguments
    External (_SB_.OWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PTBR.PTST.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PTBR.PTST.TWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.GPXX.SAXX.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.GPXX.SAXX.TWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.SAXX.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.SAXX.TWAK, MethodObj)    // 1 Arguments
    External (M038, MethodObj)    // 1 Arguments
    External (M039, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M127, DeviceObj)
    External (MOEM, MethodObj)    // 3 Arguments
    External (NFPC, MethodObj)    // 0 Arguments

    OperationRegion (CPNV, SystemMemory, 0x76A30018, 0x00010117)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M221,   8, 
        M086,   16, 
        M229,   8, 
        M231,   16, 
        M235,   8, 
        M233,   32, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x19), 
        M087,   1, 
            ,   1, 
        Offset (0x1C), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   32768, 
        M378,   32768, 
        M379,   32768, 
        M380,   32768, 
        M381,   32768, 
        M382,   32768, 
        M383,   32768, 
        M384,   32768, 
        M385,   32768, 
        M386,   32768, 
        M387,   32768, 
        M388,   32768, 
        M389,   32768, 
        M390,   32768, 
        M391,   32768, 
        M392,   32768, 
        M107,   64, 
        M320,   32, 
        M321,   32, 
        M322,   32, 
        M323,   32, 
        M324,   32, 
        M325,   32, 
        M326,   32, 
        M327,   16, 
        M328,   8, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32, 
        M220,   32, 
        M226,   32, 
        M251,   32, 
        M310,   32, 
        M280,   32, 
        M290,   32, 
        M331,   32, 
        M414,   16, 
        M444,   72, 
        M453,   32, 
        M454,   16, 
        M455,   8, 
        M456,   8, 
        M457,   8, 
        M449,   72, 
        M4C0,   32, 
        M23A,   8, 
        M31C,   32, 
        M4F0,   32, 
        M610,   32, 
        M620,   32, 
        M29A,   128, 
        M631,   32, 
        M652,   32
    }

    Name (CTMR, Zero)
    Name (M285, Buffer (0x04)
    {
         0x00, 0x03, 0x80, 0x00                           // ....
    })
    OperationRegion (VARP, SystemMemory, 0xFED80808, 0x04)
    Field (VARP, DWordAcc, NoLock, Preserve)
    {
        VAP1,   32
    }

    Method (M000, 1, Serialized)
    {
        CreateByteField (M285, Zero, M286)
        CreateByteField (M285, One, M287)
        CreateWordField (M285, 0x02, M288)
        Name (M450, Buffer (0x05)
        {
             0x00, 0x96, 0x05, 0x00, 0x00                     // .....
        })
        CreateDWordField (M450, Zero, M452)
        CreateByteField (M450, 0x04, M451)
        Local0 = (Arg0 + 0xB0000000)
        If (Zero)
        {
            Local1 = ToInteger (M288)
            If ((ToInteger (M287) == 0x03))
            {
                OperationRegion (VARM, SystemIO, Local1, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }
            ElseIf ((ToInteger (M287) == 0x02))
            {
                OperationRegion (VARN, SystemIO, Local1, 0x02)
                Field (VARN, WordAcc, NoLock, Preserve)
                {
                    VARS,   16
                }

                VARS = (Local0 & 0xFFFF)
            }
            ElseIf ((ToInteger (M287) == One))
            {
                OperationRegion (VARO, SystemIO, Local1, One)
                Field (VARO, ByteAcc, NoLock, Preserve)
                {
                    VART,   8
                }

                VART = (Local0 & 0xFF)
            }
        }

        If ((ToInteger (M451) == One))
        {
            Local2 = ToInteger (M452)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }

        Local1 = VAP1 /* \VAP1 */
        If ((Local1 >= CTMR))
        {
            Local2 = (Local1 - CTMR) /* \CTMR */
        }
        Else
        {
            Local2 = (Local1 + ((0xFFFFFFFE - CTMR) + One))
        }

        Divide (Local2, 0x19, Local3, Local2)
        Divide ((Local2 * 0x07), 0x03E8, Local3, Local2)
        If ((Local3 >= 0x64))
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.%d ms\n", Local0, Local1, Local2, Local3, Zero, Zero)
        }
        ElseIf ((Local3 >= 0x0A))
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.0%d ms\n", Local0, Local1, Local2, Local3, Zero, Zero)
        }
        Else
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.00%d ms\n", Local0, Local1, Local2, Local3, Zero, Zero)
        }

        CTMR = Local1
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0700), Arg0, Zero, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0400), Arg0, Zero, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 ((M084 + 0x0400), Arg0, Zero, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, Zero, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, Zero, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 == 0x15))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    OperationRegion (VARQ, SystemIO, 0x0CD8, 0x08)
    Field (VARQ, DWordAcc, NoLock, Preserve)
    {
        VAQ1,   32
    }

    Method (M004, 1, Serialized)
    {
        BankField (VARQ, VAQ1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M004.VAR2 */
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        BankField (VARQ, VAQ1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg1
    }

    Method (M006, 3, Serialized)
    {
        Local0 = (M004 (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, Zero)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, Zero)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, Zero)
            }

            Sleep (One)
        }

        If ((Arg0 == One))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (One)
        }

        If ((Arg0 == Zero))
        {
            M008 (Arg1)
            Local0 = M004 (M003 (0x03, Arg1, 0xA5))
            Local0 &= 0xFF
            Local1 = 0x01F4
            While (((Local1 > Zero) && (Local0 != 0x10)))
            {
                Local0 = M004 (M003 (0x03, Arg1, 0xA5))
                Local0 &= 0xFF
                Local1--
                Sleep (One)
            }

            If ((Local0 != 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x02)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, One)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (One)
    }

    Method (M007, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | One)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, Zero)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (One)
    }

    Method (M111, 2, Serialized)
    {
        M460 ("  KER-ASL-CpmSetDevicePower (0x%X, 0x%X)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                Local7 = Zero
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == (Arg1 & One))))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local3 != Zero))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 ((Local5 & 0xFF00FFFF), Local6)
                                If (((Arg1 & One) == Zero))
                                {
                                    M000 (0x0DD8)
                                }
                                Else
                                {
                                    M000 (0x0DDB)
                                }
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                While ((M009 ((Local5 & 0xFF00FFFF)) != Local6)){}
                                If (((Arg1 & One) == Zero))
                                {
                                    M000 (0x0DD9)
                                }
                                Else
                                {
                                    M000 (0x0DDC)
                                }
                            }

                            If ((Local4 == 0x02))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Sleep (((Local5 + 0x03E7) / 0x03E8))
                                If (((Arg1 & One) == Zero))
                                {
                                    M000 (0x0DDA)
                                }
                                Else
                                {
                                    M000 (0x0DDD)
                                }
                            }
                        }

                        Local7 = One
                    }
                    ElseIf (((Local7 == One) && ((Arg1 & 0x10) == 0x10)))
                    {
                        Local2 = Zero
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M470, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If (((Local3 == Zero) && (Local4 != Zero)))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 ((Local5 & 0xFF00FFFF)) == Local6))
                            {
                                Local7 = One
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }

        M460 ("  KER-ASL-CpmCheckDevicePowerState (0x%X, %d)  Return (%d)\n", Arg0, Arg1, Local7, Zero, Zero, Zero)
        Return (Local7)
    }

    Method (M228, 1, Serialized)
    {
        If ((Arg0 > 0x03))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                    If ((Local3 == Arg0))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        If ((Local4 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 ((Local5 & 0xFF00FFFF), Local6)
                        }

                        If ((Local4 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 ((Local5 & 0xFF00FFFF)) != Local6)){}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M219, 2, Serialized)
    {
        M460 ("  KER-ASL-CpmSetDeviceClock (0x%X, %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If ((Arg0 != Zero))
        {
            Local0 = M221 /* \M221 */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* \M220 */
                If (Local0)
                {
                    Local0 += 0x10
                    Local1 = Zero
                    Local2 = One
                    While ((Local2 != 0xFF))
                    {
                        Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                        Local5 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        Local7 = M013 ((Local0 + Local1), 0x08, Zero, 0x20)
                        If ((Local4 == Arg0))
                        {
                            If (((Local2 < 0x0A) && (Local5 & 0x80)))
                            {
                                If ((Arg1 == Zero))
                                {
                                    Local3 = Zero
                                }
                                ElseIf ((Local5 & 0x04))
                                {
                                    If ((Arg1 == One))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            Local3 = 0x03
                                        }
                                        Else
                                        {
                                            Local3 = 0x0F
                                        }
                                    }

                                    If ((Arg1 == 0x02))
                                    {
                                        Local6 = M017 (Zero, M013 ((Local0 + Local1), 0x05, Zero, 0x08), 
                                            M013 ((Local0 + Local1), 0x06, Zero, 0x08), 0x19, Zero, 0x08)
                                        If ((M265 (Local6, Zero, Zero) == One))
                                        {
                                            If ((M085 >= 0x04))
                                            {
                                                Local3 = One
                                            }
                                        }
                                        ElseIf ((M085 >= 0x04))
                                        {
                                            Local3 = 0x03
                                        }
                                        Else
                                        {
                                            Local3 = 0x0F
                                        }
                                    }
                                }
                                ElseIf ((M085 >= 0x04))
                                {
                                    Local3 = 0x03
                                }
                                Else
                                {
                                    Local3 = 0x0F
                                }

                                If ((M085 >= 0x04))
                                {
                                    If ((M085 == 0x08))
                                    {
                                        If (((Local7 & 0x0FF00000) > Zero))
                                        {
                                            Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                            Local6 &= (0xFFFFFFFF ^ (0x03 << (Local2 << One)))
                                            Local6 |= (Local3 << (Local2 << One))
                                            M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), (Local2 >> 0x02), ((Local2 & 
                                                0x03) << One), 0x02, Local3)
                                        }
                                    }
                                    ElseIf (((Local7 >> 0x1C) == 0x02))
                                    {
                                        M012 ((M084 + 0x1300), (Local2 >> 0x02), ((Local2 & 
                                            0x03) << One), 0x02, Local3)
                                    }
                                    Else
                                    {
                                        M012 ((M084 + 0x0E00), (Local2 >> 0x02), ((Local2 & 
                                            0x03) << One), 0x02, Local3)
                                    }
                                }
                                Else
                                {
                                    M012 ((M084 + 0x0E00), (Local2 >> One), ((Local2 & 
                                        One) << 0x02), 0x04, Local3)
                                }

                                If ((Arg1 == Zero))
                                {
                                    M000 (0x0DE0)
                                }

                                If ((Arg1 == One))
                                {
                                    M000 (0x0DE1)
                                }

                                If ((Arg1 == 0x02))
                                {
                                    M000 (0x0DE2)
                                }

                                Local2 = 0xFF
                            }
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }
    }

    Method (M112, 2, Serialized)
    {
        M460 ("  KER-ASL-CpmSetDeviceReset (0x%X, 0x%X)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                Local7 = Zero
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == (Arg1 & 0x03))))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 ((Local5 & 0xFF00FFFF), Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 ((Local5 & 0xFF00FFFF), Local6)
                                Local7 = M009 ((Local5 & 0xFF00FFFF))
                                Local4 = 0x03F2
                                While (((Local4 > Zero) && (Local7 != Local6)))
                                {
                                    Local4 = (Local4 - One)
                                    Stall (0x63)
                                    Local7 = M009 ((Local5 & 0xFF00FFFF))
                                }
                            }

                            If ((Local3 == Zero))
                            {
                                M000 (0x0DD5)
                            }

                            If ((Local3 == One))
                            {
                                M000 (0x0DD6)
                            }
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                            M000 (0x0DD7)
                        }

                        Local7 = One
                    }
                    ElseIf (((Local7 == One) && ((Arg1 & 0x10) == 0x10)))
                    {
                        Local2 = Zero
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M275, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 ((Local5 & 0xFF00FFFF)) == Local6))
                            {
                                Local7 = One
                            }
                        }
                    }

                    Local1 += 0x08
                }
            }
        }

        M460 ("  KER-ASL-CpmCheckDeviceResetState (0x%X, %d)  Return (%d)\n", Arg0, Arg1, Local7, Zero, Zero, Zero)
        Return (Local7)
    }

    Method (M113, 1, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M108 /* \M108 */
            Local7 = One
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    If ((Local2 == Arg0))
                    {
                        Local2 = 0xFF
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        If ((Local3 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x0A, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x0C, Zero, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x03))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x04))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x0A, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x0C, Zero, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }
                    }
                    Else
                    {
                        Local1 += 0x0E
                    }
                }
            }
        }
        Else
        {
            Local7 = Zero
        }

        If (Local7)
        {
            Local7 = One
        }

        Return (Local7)
    }

    Name (M046, 0xAA)
    Name (M047, 0xAA)
    Method (M045, 0, Serialized)
    {
        Local0 = Zero
        If (((M046 == 0xAA) || (M047 == 0xAA)))
        {
            M046 = Zero
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("DisplayMux"))
                {
                    M047 = One
                    M460 ("  KER-ASL-_OSI = This OS can support DisplayMux\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                Else
                {
                    M047 = Zero
                    M460 ("  KER-ASL-_OSI = This OS cannot support DisplayMux\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }

                If (\_OSI ("Windows 2022"))
                {
                    M046 = 0x0C
                    M460 ("  KER-ASL-_OSI = Windows 11, version 22H2\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2021"))
                {
                    M046 = 0x0B
                    M460 ("  KER-ASL-_OSI = Windows 11\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2020"))
                {
                    M046 = 0x0A
                    M460 ("  KER-ASL-_OSI = Windows 10, version 2004\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2019"))
                {
                    M046 = 0x09
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1903\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2018.2"))
                {
                    M046 = 0x08
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1809\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2018"))
                {
                    M046 = 0x07
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1803\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2017.2"))
                {
                    M046 = 0x06
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1709\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2017"))
                {
                    M046 = 0x05
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1703\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2016"))
                {
                    M046 = 0x04
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1607\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2015"))
                {
                    M046 = 0x03
                    M460 ("  KER-ASL-_OSI = Windows 10\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2013"))
                {
                    M046 = 0x02
                    M460 ("  KER-ASL-_OSI = Windows 8.1\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2012"))
                {
                    M046 = One
                    M460 ("  KER-ASL-_OSI = Windows 8, Win Server 2012\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
            }
        }

        If ((M046 >= One))
        {
            Local0 = One
        }

        Return (Local0)
    }

    OperationRegion (VARW, SystemMemory, 0xFED8020C, 0x14)
    Field (VARW, DWordAcc, NoLock, Preserve)
    {
        VA0C,   32, 
        Offset (0x0C), 
        VA18,   32, 
        VA1C,   32
    }

    Method (M22A, 1, Serialized)
    {
        M460 ("  KER-ASL-CpmTriggerSci (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        Local0 = (One << Arg0)
        Local1 = 0x7FFFFFFF
        Local1 |= 0x80000000
        Local1 ^= Local0
        VA0C &= Local1
        VA18 = ((VA18 & Local1) | Local0)
        VA1C = ((VA1C & Local1) | Local0)
        Sleep (One)
        VA1C &= Local1
        VA18 &= Local1
    }

    Mutex (M230, 0x00)
    Method (M232, 3, Serialized)
    {
        Local0 = Arg0
        Local1 = Arg1
        Local2 = Arg2
        M460 ("  KER-ASL-CpmTriggerSmi (0x%X, 0x%X, %d)\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
        Acquire (M230, 0xFFFF)
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, M231, 0x02)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VAR1,   8, 
            VAR2,   8
        }

        VAR2 = Local1
        VAR1 = Local0
        If ((Local2 > Zero))
        {
            Sleep (Local2)
        }

        Release (M230)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM (Arg0, Arg1, Arg2))
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MLIB, 2, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = DerefOf (Arg1 [0x02])
                Switch (ToInteger (Local0))
                {
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x05)
                    }
                    Case (0x04)
                    {
                        M228 (0x04)
                        M228 (0x06)
                    }
                    Case (0x05)
                    {
                        M228 (0x04)
                        M228 (0x07)
                    }

                }
            }

        }
    }

    Method (M458, 1, NotSerialized)
    {
        ToInteger (M453, Local0)
        If ((Local0 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local0, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                THRM,   8, 
                Offset (0x14), 
                LSRM,   8, 
                Offset (0x18), 
                MSRM,   8
            }

            Local1 = 0x001E8480
            While (((Local1 > Zero) && ((LSRM & 0x60) != 0x60)))
            {
                Local1 -= One
            }

            If ((M457 != Zero))
            {
                Local2 = 0x001E8480
                While (((Local2 > Zero) && ((MSRM & 0x10) != 0x10)))
                {
                    Local2 -= One
                }
            }

            If ((Local1 != Zero))
            {
                THRM = Arg0
                Return (Zero)
            }
        }
        ElseIf ((Local0 > Zero))
        {
            CreateWordField (M285, 0x02, M288)
            OperationRegion (VARN, SystemIO, Local0, 0x08)
            Field (VARN, ByteAcc, NoLock, Preserve)
            {
                THRI,   8, 
                Offset (0x05), 
                LSRI,   8
            }

            Local1 = 0x001E8480
            If ((ToInteger (M288) != Local0))
            {
                While (((Local1 > Zero) && ((LSRI & 0xE0) != 0x60)))
                {
                    If ((LSRI == 0xFF))
                    {
                        M453 = Zero
                        Local1 = One
                    }

                    Local1 -= One
                }
            }

            If ((Local1 != Zero))
            {
                THRI = Arg0
                Return (Zero)
            }
        }

        Return (0xFF)
    }

    Method (M459, 2, NotSerialized)
    {
        ToInteger (M453, Local0)
        If ((Local0 == Zero))
        {
            Return (0xFF)
        }
        ElseIf ((Local0 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local0, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                DLLM,   8, 
                Offset (0x04), 
                DLHM,   8, 
                Offset (0x08), 
                FCRM,   8, 
                Offset (0x0C), 
                LCRM,   8, 
                Offset (0x10), 
                MCRM,   8
            }

            If (((LCRM & 0x3F) != M455))
            {
                LCRM = 0x80
                DLHM = (M454 >> 0x08)
                DLLM = (M454 & 0xFF)
                LCRM = M455 /* \M455 */
                FCRM = Zero
                FCRM = M456 /* \M456 */
                DLHM = Zero
                MCRM = Zero
            }
        }

        Local0 = SizeOf (Arg0)
        ToInteger (Arg1, Local1)
        Local2 = Zero
        ToBuffer (Arg0, Local3)
        If ((Local0 != Zero))
        {
            While (((Local0 > Local1) && (Local2 == Zero)))
            {
                Local2 = M458 (DerefOf (Local3 [Local1]))
                Local1 += One
            }
        }

        Return (Local2)
    }

    Method (M460, 7, Serialized)
    {
        CreateWordField (M285, 0x02, M288)
        ToInteger (M453, Local7)
        If ((Local7 == Zero))
        {
            Return (0xFF)
        }
        ElseIf ((Local7 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local7, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                DLLM,   8, 
                Offset (0x04), 
                DLHM,   8, 
                Offset (0x08), 
                FCRM,   8, 
                Offset (0x0C), 
                LCRM,   8, 
                Offset (0x10), 
                MCRM,   8
            }

            If (((LCRM & 0x3F) != M455))
            {
                LCRM = 0x80
                DLHM = (M454 >> 0x08)
                DLLM = (M454 & 0xFF)
                LCRM = M455 /* \M455 */
                FCRM = Zero
                FCRM = M456 /* \M456 */
                DLHM = Zero
                MCRM = Zero
            }
        }
        ElseIf ((ToInteger (M288) == Local7))
        {
            OperationRegion (VARS, SystemIO, Local7, 0x04)
            Field (VARS, DWordAcc, NoLock, Preserve)
            {
                VART,   32
            }

            VART = 0x5F535452
        }

        Local0 = SizeOf (Arg0)
        Local1 = Zero
        Local2 = Zero
        Local5 = One
        ToBuffer (Arg0, Local3)
        If ((Local0 != Zero))
        {
            While (((Local0 > Local1) && (Local2 == Zero)))
            {
                Local4 = DerefOf (Local3 [Local1])
                If (((Local4 == 0x25) && (0x07 > Local5)))
                {
                    If ((Local5 == One))
                    {
                        Local6 = Arg1
                    }
                    ElseIf ((Local5 == 0x02))
                    {
                        Local6 = Arg2
                    }
                    ElseIf ((Local5 == 0x03))
                    {
                        Local6 = Arg3
                    }
                    ElseIf ((Local5 == 0x04))
                    {
                        Local6 = Arg4
                    }
                    ElseIf ((Local5 == 0x05))
                    {
                        Local6 = Arg5
                    }
                    ElseIf ((Local5 == 0x06))
                    {
                        Local6 = Arg6
                    }

                    Local5 += One
                    Local1 += One
                    Local4 = DerefOf (Local3 [Local1])
                    If (((Local4 == 0x58) || (Local4 == 0x78)))
                    {
                        Local2 = M459 (ToHexString (Local6), 0x02)
                    }
                    ElseIf (((Local4 == 0x44) || (Local4 == 0x64)))
                    {
                        Local2 = M459 (ToDecimalString (Local6), Zero)
                    }
                    ElseIf (((Local4 == 0x53) || (Local4 == 0x73)))
                    {
                        Local2 = M459 (Local6, Zero)
                    }
                    Else
                    {
                        Local2 = M458 (0x25)
                        Local5 -= One
                        Local1 -= One
                    }
                }
                ElseIf ((Local4 == 0x0A))
                {
                    Local2 = M458 (0x0D)
                    Local2 = M458 (0x0A)
                }
                Else
                {
                    Local2 = M458 (Local4)
                }

                Local1 += One
            }
        }

        If ((ToInteger (M288) == Local7))
        {
            OperationRegion (VARU, SystemIO, Local7, 0x04)
            Field (VARU, DWordAcc, NoLock, Preserve)
            {
                VARV,   32
            }

            VARV = 0x5F454E44
        }

        Return (Local2)
    }

    Name (M404, Buffer (0x07)
    {
         0x00, 0x02, 0x06, 0x08, 0x04, 0x0A, 0x0C         // .......
    })
    Method (M405, 5, Serialized)
    {
        If ((M085 >= 0x04))
        {
            If ((M085 == 0x08))
            {
                Local1 = DerefOf (M404 [Arg4])
                If (((Arg0 > Zero) || (Arg1 > Zero)))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                    Local0 >>= Local1
                    Local0 &= 0x03
                }
                Else
                {
                    Local0 = M011 ((M084 + 0x0E00), (Local1 >> 0x08), (
                        Local1 & 0x07), 0x02)
                }
            }
            ElseIf ((Arg3 == 0x02))
            {
                Local0 = M011 ((M084 + 0x1300), (Local1 >> 0x08), (
                    Local1 & 0x07), 0x02)
            }
            Else
            {
                Local0 = M011 ((M084 + 0x0E00), (Local1 >> 0x08), (
                    Local1 & 0x07), 0x02)
            }
        }
        Else
        {
            Local0 = M011 ((M084 + 0x0E00), (Arg4 >> One), (
                (Arg4 & One) << 0x02), 0x04)
        }

        M460 ("  KER-ASL-CpmReadClkReq  (%d, %d, %d, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Arg4, Local0)
        Return (Local0)
    }

    Method (M406, 6, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteClkReq (%d, %d, %d, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)
        If ((M085 >= 0x04))
        {
            If ((M085 == 0x08))
            {
                Local1 = DerefOf (M404 [Arg4])
                If (((Arg0 > Zero) || (Arg1 > Zero)))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                    Local0 &= (0xFFFFFFFF ^ (0x03 << Local1))
                    Local0 |= (Arg5 << Local1)
                    M250 (Arg0, Arg1, Arg2, 0x02D01E00, Local0)
                }
                Else
                {
                    M012 ((M084 + 0x0E00), (Local1 >> 0x08), (Local1 & 0x07
                        ), 0x02, Arg5)
                }
            }
            ElseIf ((Arg3 == 0x02))
            {
                M012 ((M084 + 0x1300), (Local1 >> 0x08), (Local1 & 0x07
                    ), 0x02, Arg5)
            }
            Else
            {
                M012 ((M084 + 0x0E00), (Local1 >> 0x08), (Local1 & 0x07
                    ), 0x02, Arg5)
            }
        }
        Else
        {
            M012 ((M084 + 0x0E00), (Arg4 >> One), ((Arg4 & 
                One) << 0x02), 0x04, Arg5)
        }
    }

    Method (M600, 2, Serialized)
    {
        Name (TEMP, Package (0x04)
        {
            0xFF, 
            0x09, 
            Zero, 
            Zero
        })
        If ((Arg0 == Zero))
        {
            TEMP [Zero] = Zero
        }

        If ((Arg1 != 0x09))
        {
            TEMP [One] = Arg1
        }

        Local0 = DerefOf (TEMP [Zero])
        Local1 = DerefOf (TEMP [One])
        Local2 = DerefOf (TEMP [0x02])
        Local3 = DerefOf (TEMP [0x03])
        M460 ("  KER-ASL-CpmGenerateUPC () Return Package (4) {0x%X, 0x%X, 0x%X, 0x%X}\n", Local0, Local1, Local2, Local3, Zero, Zero)
        Return (TEMP) /* \M600.TEMP */
    }

    Method (M602, 3, Serialized)
    {
        Name (TEMP, Package (0x04)
        {
            0xFF, 
            0x09, 
            0x3D, 
            Zero
        })
        If ((Arg0 == Zero))
        {
            TEMP [Zero] = Zero
        }

        If ((Arg1 != 0x09))
        {
            TEMP [One] = Arg1
        }

        If ((Arg2 != 0x3D))
        {
            TEMP [0x02] = Arg2
        }

        Local0 = DerefOf (TEMP [Zero])
        Local1 = DerefOf (TEMP [One])
        Local2 = DerefOf (TEMP [0x02])
        Local3 = DerefOf (TEMP [0x03])
        M460 ("  KER-ASL-CpmGenerateAcpi65UPC () Return Package (4) {0x%X, 0x%X, 0x%X, 0x%X}\n", Local0, Local1, Local2, Local3, Zero, Zero)
        Return (TEMP) /* \M602.TEMP */
    }

    Method (M601, 6, Serialized)
    {
        Name (TEMP, Package (0x01)
        {
            Buffer (0x14)
            {
                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
            }
        })
        CreateField (DerefOf (TEMP [Zero]), 0x20, 0x10, WIDH)
        CreateField (DerefOf (TEMP [Zero]), 0x30, 0x10, HIGT)
        CreateField (DerefOf (TEMP [Zero]), 0x40, One, VISI)
        CreateField (DerefOf (TEMP [Zero]), 0x42, One, FLID)
        CreateField (DerefOf (TEMP [Zero]), 0x43, 0x03, PANE)
        CreateField (DerefOf (TEMP [Zero]), 0x46, 0x02, VTPS)
        CreateField (DerefOf (TEMP [Zero]), 0x48, 0x02, HZPS)
        CreateField (DerefOf (TEMP [Zero]), 0x4A, 0x04, SHAP)
        CreateField (DerefOf (TEMP [Zero]), 0x4F, 0x08, GPTN)
        CreateField (DerefOf (TEMP [Zero]), 0x57, 0x08, GPPS)
        CreateField (DerefOf (TEMP [Zero]), 0x60, 0x02, EJTB)
        CreateField (DerefOf (TEMP [Zero]), 0x73, 0x04, ROTN)
        CreateField (DerefOf (TEMP [Zero]), 0x80, 0x20, OFST)
        If (((Arg0 == Zero) || (Arg0 == 0x02)))
        {
            SHAP = 0x03
            WIDH = 0x08
            HIGT = 0x0E
        }
        ElseIf (((Arg0 == One) || (Arg0 == 0x03)))
        {
            SHAP = One
            WIDH = 0x03
            HIGT = 0x08
        }
        ElseIf ((Arg0 == 0x02))
        {
            SHAP = 0x02
            WIDH = 0x08
            HIGT = 0x08
            FLID = One
        }

        If (((Arg0 == 0x02) || (Arg0 == 0x03)))
        {
            ROTN = 0x02
        }

        VISI = Arg1
        GPTN = ((Arg2 >> 0x08) & 0xFF)
        GPPS = (Arg2 & 0xFF)
        EJTB = Arg3
        PANE = (Arg4 & 0x07)
        VTPS = ((Arg4 >> 0x04) & 0x03)
        HZPS = ((Arg4 >> 0x08) & 0x03)
        If ((Arg5 != Zero))
        {
            OFST = Arg5
        }

        CreateDWordField (DerefOf (TEMP [Zero]), Zero, DW00)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x04, DW01)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x08, DW02)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x0C, DW03)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x10, DW04)
        M460 ("  KER-ASL-CpmGeneratePLD () Return 0x%X, 0x%X, 0x%X, 0x%X, 0x%X\n", DW00, DW01, DW02, DW03, DW04, Zero)
        Return (TEMP) /* \M601.TEMP */
    }

    Method (M643, 1, Serialized)
    {
        ToInteger (Arg0, Local0)
        Local1 = Zero
        If ((Local0 != Zero))
        {
            While (((Local1 < 0x20) && ((Local0 & One) == Zero)))
            {
                Local0 >>= One
                Local1 += One
            }
        }

        If ((Local1 >= 0x20))
        {
            Local1 = Zero
        }

        Return (Local1)
    }

    Method (MPTS, 1, NotSerialized)
    {
        M460 ("  KER-ASL-MPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        M000 (0x0DE7)
        M644 (0xFED80200, 0x04, 0x20)
        M644 (0xFED80240, 0x04, 0x40)
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TPTS))
                {
                    M460 ("    KER-ASL-Call \\_SB.PCXX.GPXX.SAXX.TPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCXX.GPXX.SAXX.TPTS (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TPTS))
                {
                    M460 ("    KER-ASL-Call ZERO_POWR_ODD_SATA_PATH.TPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCI0.PTBR.PTST.TPTS (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TPTS))
            {
                M460 ("    KER-ASL-Call \\_SB.PCXX.SAXX.TPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.PCXX.SAXX.TPTS (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M263))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmOtherHotplugCard_PTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.M263 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x21)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IPTS))
                {
                    M460 ("    KER-ASL-Call \\_SB.IPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.IPTS (Arg0)
                }
            }
        }

        If ((M620 != Zero))
        {
            Local0 = M049 (M620, 0x10)
            If ((Local0 != Zero))
            {
                If (CondRefOf (\_SB.BPTS))
                {
                    M460 ("    KER-ASL-Call \\_SB.BPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.BPTS (Arg0)
                }
            }
        }

        If ((M4F0 != Zero))
        {
            If (CondRefOf (\_GPE.PTS0))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS0 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS0 (Arg0)
            }

            If (CondRefOf (\_GPE.PTS1))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS1 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS1 (Arg0)
            }

            If (CondRefOf (\_GPE.PTS2))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS2 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS2 (Arg0)
            }

            If (CondRefOf (\_GPE.PTS3))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS3 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS3 (Arg0)
            }
        }

        If (CondRefOf (\_SB.OPTS))
        {
            M460 ("    KER-ASL-Call \\_SB.OPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            \_SB.OPTS (Arg0)
        }

        M000 (0x0DE8)
    }

    Method (MWAK, 1, NotSerialized)
    {
        M460 ("  KER-ASL-MWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        M000 (0x0DE9)
        M644 (0xFED80200, 0x04, 0x20)
        M644 (0xFED80240, 0x04, 0x40)
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TWAK))
                {
                    M460 ("    KER-ASL-Call \\_SB.PCXX.GPXX.SAXX.TWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCXX.GPXX.SAXX.TWAK (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TWAK))
                {
                    M460 ("    KER-ASL-Call ZERO_POWR_ODD_SATA_PATH.TWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCI0.PTBR.PTST.TWAK (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TWAK))
            {
                M460 ("    KER-ASL-Call \\_SB.PCXX.SAXX.TWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.PCXX.SAXX.TWAK (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M264))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmOtherHotplugCard_WAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.M264 (Arg0)
            }
        }

        If ((M280 != Zero))
        {
            If (CondRefOf (\_SB.M284))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmLowPowerEthernet_WAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.M284 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x21)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IWAK))
                {
                    M460 ("    KER-ASL-Call \\_SB.IWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.IWAK (Arg0)
                }
            }
        }

        If ((M620 != Zero))
        {
            Local0 = M049 (M620, 0x10)
            If ((Local0 != Zero))
            {
                If (CondRefOf (\_SB.BWAK))
                {
                    M460 ("    KER-ASL-Call \\_SB.BWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.BWAK (Arg0)
                }
            }
        }

        If ((M4F0 != Zero))
        {
            If (CondRefOf (\_GPE.WAK0))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK0 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK0 (Arg0)
            }

            If (CondRefOf (\_GPE.WAK1))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK1 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK1 (Arg0)
            }

            If (CondRefOf (\_GPE.WAK2))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK2 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK2 (Arg0)
            }

            If (CondRefOf (\_GPE.WAK3))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK3 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK3 (Arg0)
            }
        }

        If (CondRefOf (\_SB.OWAK))
        {
            M460 ("    KER-ASL-Call \\_SB.OWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            \_SB.OWAK (Arg0)
        }

        M000 (0x0DEA)
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20, Arg4)
    }

    Method (M021, 4, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            Offset (0x00), 
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M021.VAR2 */
        M460 ("  KER-ASL-CpmReadPcieRegister  (0x%X, 0x%X, 0x%X, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local0, Zero)
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWritePcieRegister (0x%X, 0x%X, 0x%X, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            Offset (0x00), 
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg4
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, One, Zero)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, One, One)
    }

    Method (M024, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x0128)
        If ((Local0 & 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Local0 = M021 (Arg0, Arg1, Arg2, 0xA2)
        Local0 &= 0xFFFFFFFFFFFFFFF8
        Local1 = (Local0 >> 0x04)
        Local1 &= 0x07
        Local0 |= Local1
        Local0 |= 0x0100
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 4, Serialized)
    {
        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (Arg3)
        {
            M429 (Arg0, Arg1, Arg2, 0x88, Zero, 0x04, Arg3)
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, One)
        Local1 = 0x64
        Local2 = One
        While ((Local1 && Local2))
        {
            Sleep (One)
            Local3 = M430 (Arg0, Arg1, Arg2)
            If ((Local3 & 0x0800))
            {
                Local1--
            }
            Else
            {
                Local2 = Zero
            }
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (!Local2)
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M430, 3, Serialized)
    {
        Local0 = M017 (Arg0, Arg1, Arg2, 0x68, 0x10, 0x10)
        Return (Local0)
    }

    Method (M017, 6, Serialized)
    {
        Local0 = M645 (Arg0, Arg1, Arg2)
        If ((Local0 == Zero))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            Local1 = ((Local3 >> Arg4) & (Local3 >> (0x20 - Arg5)
                ))
        }
        Else
        {
            Local1 = M013 (Local0, Arg3, Arg4, Arg5)
        }

        Return (Local1)
    }

    Method (M018, 7, Serialized)
    {
        Local0 = M645 (Arg0, Arg1, Arg2)
        If ((Local0 != Zero))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M014 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M428, 6, Serialized)
    {
        Local0 = M645 (Arg0, Arg1, Arg2)
        If ((Local0 == Zero))
        {
            Local3 = 0xFF
            Local1 = ((Local3 >> Arg4) & (Local3 >> (0x08 - Arg5)
                ))
        }
        Else
        {
            Local1 = M011 (Local0, Arg3, Arg4, Arg5)
        }

        Return (Local1)
    }

    Method (M429, 7, Serialized)
    {
        Local0 = M645 (Arg0, Arg1, Arg2)
        If ((Local0 != Zero))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M012 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M265, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M645 (Arg0, Arg1, Arg2)
        Local2 = M646 (Local1, 0x10)
        If ((Local2 != Zero))
        {
            Local3 = M013 (Local1, (Local2 + 0x0C), 0x12, One)
            Local4 = M013 (Local1, (Local2 + 0x10), 0x08, One)
            If (((Local3 == One) && (Local4 == One)))
            {
                Local0 = One
            }
        }

        Return (Local0)
    }

    Method (M033, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M645 (Arg0, Arg1, Arg2)
        Local2 = M646 (Local1, 0x10)
        If ((Local2 != Zero))
        {
            Local0 = M013 (Local1, (Local2 + 0x0C), 0x0A, 0x02)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M645 (Arg0, Arg1, Arg2)
        Local2 = M646 (Local1, 0x10)
        If ((Local2 != Zero))
        {
            Local0 = M013 (Local1, (Local2 + 0x10), Zero, 0x02)
        }

        M460 ("  KER-ASL-CpmGetPcieAspm (0x%X, 0x%X, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Local0, Zero, Zero)
        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        M460 ("  KER-ASL-CpmSetPcieAspm (0x%X, 0x%X, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
        Local1 = M645 (Arg0, Arg1, Arg2)
        Local2 = M646 (Local1, 0x10)
        If ((Local2 != Zero))
        {
            M014 (Local1, (Local2 + 0x10), Zero, 0x02, (Arg3 & 0x03))
        }
    }

    Method (M114, 4, Serialized)
    {
        Local7 = Zero
        If (!M001 (Arg0, Arg1))
        {
            Name (M115, Buffer (0x05){})
            CreateWordField (M115, Zero, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            M116 = 0x05
            M119 = Zero
            M118 = Arg0
            M117 = Arg1
            If ((Arg2 == Zero))
            {
                If ((Arg3 != One))
                {
                    M120 = Zero
                    \_SB.ALIB (0x06, M115)
                }
            }
            Else
            {
                If ((Arg3 != One))
                {
                    M120 = One
                    \_SB.ALIB (0x06, M115)
                }

                Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    Local1 = M019 (Local0, Zero, Zero, Zero)
                    Local2 = 0x7FFFFFFF
                    Local2 |= 0x80000000
                    If (((Local1 != Zero) && (Local1 != Local2)))
                    {
                        Local7 = One
                    }
                }
            }
        }
        ElseIf ((Arg2 == Zero))
        {
            M002 (One, Arg1)
        }
        Else
        {
            M002 (Zero, Arg1)
            Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                Local1 = M019 (Local0, Zero, Zero, Zero)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If (((Local1 != Zero) && (Local1 != Local2)))
                {
                    Local7 = One
                }
            }
        }

        Return (Local7)
    }

    Method (M248, 1, Serialized)
    {
        If ((M085 == 0x08))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x0B))
        {
            If ((M085 >= 0x0D))
            {
                Return (M017 (Zero, 0x08, (Arg0 + One), 0x19, Zero, 0x08))
            }
            ElseIf ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, Arg0, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, 0x02, 0x19, Zero, 0x08))
            }
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M401, 3, Serialized)
    {
        Local0 = (M430 (Arg0, Arg1, Arg2) & 0x0F)
        If (((Local0 == 0x0F) || (Local0 == Zero)))
        {
            Return (0xFF)
        }

        If (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            If ((Arg0 <= 0x03))
            {
                Local3 = (0x06 - Arg0)
            }
            Else
            {
                Local3 = 0x06
            }
        }
        Else
        {
            Local3 = 0x03
        }

        Local3 = (0x14001000 + (Local3 << 0x14))
        Local0 = (Arg1 & 0x1F)
        Local0 = ((Local0 << 0x03) | (Arg2 & 0x07))
        Local1 = Zero
        If (((M085 >= 0x09) && (M085 <= 0x0A)))
        {
            Local2 = 0x09
        }
        ElseIf (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            Local2 = 0x16
        }
        ElseIf ((M085 == 0x0D))
        {
            Local2 = 0x0D
        }
        ElseIf ((M085 == 0x0E))
        {
            Local2 = 0x0A
        }
        ElseIf ((M085 == 0x0F))
        {
            Local2 = 0x10
        }
        ElseIf ((M085 == 0x10))
        {
            Local2 = 0x15
        }
        ElseIf ((M085 == 0x12))
        {
            Local2 = 0x14
        }
        ElseIf ((M085 == 0x13))
        {
            Local2 = 0x0D
        }
        ElseIf ((M085 == 0x14))
        {
            Local2 = 0x12
        }
        ElseIf ((M085 == 0x15))
        {
            Local2 = 0x12
        }
        Else
        {
            Local2 = 0x12
        }

        Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
            ))
        While (((Local1 < Local2) && (Local4 != Local0)))
        {
            Local1++
            Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
                ))
        }

        If ((Local1 <= Local2))
        {
            Return (Local1)
        }
        Else
        {
            Return (0xFF)
        }
    }

    Method (M471, 3, Serialized)
    {
        If (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            If ((Arg0 <= 0x03))
            {
                Local5 = (0x04 - Arg0)
            }
            Else
            {
                Local5 = 0x04
            }
        }
        Else
        {
            Local5 = (Arg0 + One)
        }

        ToInteger (Arg1, Local4)
        If (((M085 >= 0x0D) && (M085 <= 0x0E)))
        {
            If ((Local4 >= 0x03))
            {
                Local4 -= 0x03
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x0F))
        {
            If ((Local4 >= 0x0C))
            {
                Local4 -= 0x0C
                Local5 += 0x03
            }
            ElseIf ((Local4 == 0x0B))
            {
                Local4 -= 0x0B
                Local5 += 0x02
            }
            ElseIf ((Local4 >= 0x05))
            {
                Local4 -= 0x05
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x12))
        {
            If ((Local4 >= 0x10))
            {
                Local4 -= 0x10
                Local5 += 0x03
            }
            ElseIf ((Local4 >= 0x0C))
            {
                Local4 -= 0x0C
                Local5 += 0x02
            }
            ElseIf ((Local4 >= 0x06))
            {
                Local4 -= 0x06
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x10))
        {
            If ((Local4 >= 0x09))
            {
                Local4 -= 0x09
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x13))
        {
            If ((Local4 >= 0x05))
            {
                Local4 -= 0x05
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x14))
        {
            If ((Local4 >= 0x09))
            {
                Local4 -= 0x09
                Local5 += 0x02
            }
            ElseIf ((Local4 >= 0x03))
            {
                Local4 -= 0x03
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x15))
        {
            If ((Local4 >= 0x09))
            {
                Local4 -= 0x09
                Local5 += 0x02
            }
            ElseIf ((Local4 >= 0x03))
            {
                Local4 -= 0x03
                Local5 += One
            }
        }
        ElseIf ((Local4 >= 0x08))
        {
            Local4 -= 0x08
            If (((M085 >= 0x0B) && (M085 <= 0x0C)))
            {
                Local5 += 0x04
            }
            Else
            {
                Local5 += One
            }
        }

        Local6 = (0x11000000 + (Local5 << 0x14))
        Local6 += (Arg2 << 0x10)
        If (((Arg2 == Zero) || (Arg2 == 0x04)))
        {
            Local6 += (Local4 << 0x0C)
        }

        Return (Local6)
    }

    Method (M402, 3, Serialized)
    {
        Local4 = M401 (Arg0, Arg1, Arg2)
        If ((Local4 != 0xFF))
        {
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                Local7 = (M471 (Arg0, Local4, 0x08) + 0x0188)
                Local0 = M249 (Zero, Zero, Zero, Local7)
                Local0 &= 0xFFFFDFFF
                M250 (Zero, Zero, Zero, Local7, (Local0 | 0x2000))
            }

            Local1 = (M019 (Zero, Zero, Zero, 0x84) & 0xFF00FCFF)
            Local2 = ((Arg1 << 0x13) | (Arg2 << 0x10))
            Local1 |= Local2
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0300))
            If ((M085 >= 0x0C))
            {
                Local3 = M019 (Zero, Zero, Zero, 0x84)
                Local5 = 0x4EEA
                Local6 = M453 /* \M453 */
                M453 = Zero
                While (((Local5 > Zero) && ((Local3 & 0x0400) != 0x0400)))
                {
                    Local5 = (Local5 - One)
                    Stall (0x63)
                    If (((Local5 & 0x03FF) == Zero))
                    {
                        M453 = Local6
                    }

                    Local3 = M019 (Zero, Zero, Zero, 0x84)
                    If (((Local5 & 0x03FF) == Zero))
                    {
                        M453 = Zero
                    }
                }

                M453 = Local6
            }

            Local6 = (M471 (Arg0, Local4, 0x04) + 0x0294)
            Local3 = M249 (Zero, Zero, Zero, Local6)
            Local5 = 0x4EEA
            Local4 = M453 /* \M453 */
            M453 = Zero
            While (((Local5 > Zero) && ((Local3 & 0x3F) != 0x1F)))
            {
                Local5 = (Local5 - One)
                Stall (0x63)
                If (((Local5 & 0x03FF) == Zero))
                {
                    M453 = Local4
                }

                Local3 = M249 (Zero, Zero, Zero, Local6)
                If (((Local5 & 0x03FF) == Zero))
                {
                    M453 = Zero
                }
            }

            M453 = Local4
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                M250 (Zero, Zero, Zero, Local7, Local0)
            }
        }
    }

    Method (M403, 4, Serialized)
    {
        Local4 = M401 (Arg0, Arg1, Arg2)
        If ((Local4 != 0xFF))
        {
            Local2 = (M471 (Arg0, Local4, 0x04) + 0x0280)
            Local0 = M249 (Zero, Zero, Zero, Local2)
            Local0 &= 0xFFBFFFFF
            Local1 = Arg3
            Local0 |= (Local1 << 0x16)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }
    }

    Method (M472, 4, Serialized)
    {
        Local4 = M401 (Arg0, Arg1, Arg2)
        If ((Local4 != 0xFF))
        {
            Local7 = (M471 (Arg0, Local4, 0x08) + 0x0428)
            If (((M085 >= 0x0D) && (M085 <= 0x0E)))
            {
                If ((Local4 >= 0x03))
                {
                    Local4 -= 0x03
                }
            }
            ElseIf ((M085 == 0x0F))
            {
                If ((Local4 >= 0x05))
                {
                    Local4 -= 0x05
                }
            }
            ElseIf ((M085 == 0x12))
            {
                If ((Local4 >= 0x06))
                {
                    Local4 -= 0x06
                }
            }
            ElseIf ((M085 == 0x13))
            {
                If ((Local4 >= 0x05))
                {
                    Local4 -= 0x05
                }
            }
            ElseIf ((M085 == 0x10))
            {
                If ((Local4 >= 0x09))
                {
                    Local4 -= 0x09
                }
            }
            ElseIf ((M085 == 0x14))
            {
                If ((Local4 >= 0x09))
                {
                    Local4 -= 0x09
                }
                ElseIf ((Local4 >= 0x03))
                {
                    Local4 -= 0x03
                }
            }
            ElseIf ((M085 == 0x15))
            {
                If ((Local4 >= 0x09))
                {
                    Local4 -= 0x09
                }
                ElseIf ((Local4 >= 0x03))
                {
                    Local4 -= 0x03
                }
            }
            ElseIf ((Local4 >= 0x08))
            {
                Local4 -= 0x08
            }

            Local0 = M249 (Zero, Zero, Zero, Local7)
            Local1 = (One << Local4)
            Local2 = (Arg3 << Local4)
            If (((Local0 & Local1) != Local2))
            {
                Local3 = (Local0 & (0xFFFFFFFF ^ Local1))
                M250 (Zero, Zero, Zero, Local7, (Local3 | Local2))
                Local0 = M249 (Zero, Zero, Zero, Local7)
            }
        }
    }

    Method (M645, 3, Serialized)
    {
        Local3 = Zero
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Return (Local3)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (Local0)
    }

    Method (M646, 2, Serialized)
    {
        Local0 = Zero
        Local1 = M049 (Arg0, 0x34)
        While ((Local1 != Zero))
        {
            Local2 = M049 (Arg0, Local1)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == Arg1))
            {
                Local0 = Local1
                Break
            }

            Local1 = M049 (Arg0, (Local1 + One))
        }

        M460 ("  FEA-ASL-CpmSearchPcieCapability (0x%X, 0x%X) = 0x%X\n", Arg0, Arg1, Local0, Zero, Zero, Zero)
        Return (Local0)
    }

    Method (M647, 2, Serialized)
    {
        If ((Arg0 != 0xEEEEEEEE))
        {
            Local0 = M04B (Arg0, Zero)
            Local1 = 0x7FFFFFFF
            Local1 |= 0x80000000
            If (((Local0 != Zero) && (Local0 != Local1)))
            {
                M644 (Arg0, 0x04, Arg1)
            }
        }
    }

    Method (M648, 3, Serialized)
    {
        Local2 = Zero
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local0 = Zero
        While ((Local0 <= Arg1))
        {
            Local1 = Zero
            While ((Local1 <= Arg2))
            {
                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                    0x0F) & 0x000F8000))
                Local3 |= ((Local1 << 0x0C) & 0x7000)
                Local4 = M04B (M083, Local3)
                If (((Local4 != Local5) && (Local4 != Zero)))
                {
                    Local2 |= (One << Local0)
                }
                ElseIf ((Local1 == Zero))
                {
                    Break
                }

                Local1++
            }

            Local0++
        }

        M460 ("  KER-ASL-CpmSearchPcieDevice (Bus 0x%X) = Device 0x%X Exist\n", Arg0, Local2, Zero, Zero, Zero, Zero)
        Return (Local2)
    }

    Method (M649, 1, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != 0xEEEEEEEE))
        {
            Local2 = M646 (Arg0, One)
            If ((Local2 != Zero))
            {
                Local0 = M04A (Arg0, (Local2 + 0x04))
            }
        }

        M460 ("  FEA-ASL-CpmGetPCIePowerState (0x%X) = 0x%X\n", Arg0, Local0, Zero, Zero, Zero, Zero)
        Return (Local0)
    }

    Method (M650, 2, Serialized)
    {
        Local0 = Zero
        Local1 = Zero
        If ((Arg0 != 0xEEEEEEEE))
        {
            Local2 = M646 (Arg0, One)
            If ((Local2 != Zero))
            {
                Local0 = M04A (Arg0, (Local2 + 0x04))
                Local1 = (Local0 & 0x7FFC)
                Local1 |= (Arg1 & 0x7FFF)
                M04D (Arg0, (Local2 + 0x04), Local1)
                Local1 = M04A (Arg0, (Local2 + 0x04))
            }
        }

        M460 ("  FEA-ASL-CpmSetPCIePowerState (0x%X, 0x%X) = 0x%X -> 0x%X\n", Arg0, Arg1, Local0, Local1, Zero, Zero)
        Return (Local0)
    }

    Method (M651, 4, Serialized)
    {
        Local0 = M04B (Arg0, Zero)
        Local1 = 0x7FFFFFFF
        Local1 |= 0x80000000
        If ((((Arg1 != Zero) && (Arg0 != 0xEEEEEEEE)) && (
            (Local0 != Zero) && (Local0 != Local1))))
        {
            M04E (Arg1, (Arg2 + Zero), M04B (Arg0, 0x18))
            M04E (Arg1, (Arg2 + 0x04), M04B (Arg0, 0x1C))
            M04E (Arg1, (Arg2 + 0x08), M04B (Arg0, 0x20))
            M04E (Arg1, (Arg2 + 0x0C), M04B (Arg0, 0x24))
            M04E (Arg1, (Arg2 + 0x10), M04B (Arg0, 0x28))
            M04E (Arg1, (Arg2 + 0x14), M04B (Arg0, 0x2C))
            M04D (Arg1, (Arg2 + 0x18), M04A (Arg0, 0x04))
            M04C (Arg1, (Arg2 + 0x1A), M049 (Arg0, 0x0C))
            M04C (Arg1, (Arg2 + 0x1B), M049 (Arg0, 0x3C))
            Local0 = (Arg0 + M646 (Arg0, One))
            If ((Local0 != Arg0))
            {
                M04D (Arg1, (Arg2 + 0x1C), M04A (Local0, 0x04))
            }
            Else
            {
                M04D (Arg1, (Arg2 + 0x1C), Zero)
            }

            If ((Arg3 == One))
            {
                Local0 = (Arg0 + M646 (Arg0, 0x15))
                If ((Local0 != Arg0))
                {
                    M04E (Arg1, (Arg2 + 0x20), M04B (Local0, 0x08))
                    M04E (Arg1, (Arg2 + 0x24), M04B (Local0, 0x0C))
                    M04E (Arg1, (Arg2 + 0x28), M04B (Local0, 0x10))
                    M04E (Arg1, (Arg2 + 0x2C), M04B (Local0, 0x14))
                    M04E (Arg1, (Arg2 + 0x30), M04B (Local0, 0x18))
                    M04E (Arg1, (Arg2 + 0x34), M04B (Local0, 0x1C))
                }
                Else
                {
                    M04E (Arg1, (Arg2 + 0x20), Zero)
                    M04E (Arg1, (Arg2 + 0x24), Zero)
                    M04E (Arg1, (Arg2 + 0x28), Zero)
                    M04E (Arg1, (Arg2 + 0x2C), Zero)
                    M04E (Arg1, (Arg2 + 0x30), Zero)
                    M04E (Arg1, (Arg2 + 0x34), Zero)
                }
            }
        }
        Else
        {
            M04E (Arg1, (Arg2 + Zero), Zero)
            M04E (Arg1, (Arg2 + 0x04), Zero)
            M04E (Arg1, (Arg2 + 0x08), Zero)
            M04E (Arg1, (Arg2 + 0x0C), Zero)
            M04E (Arg1, (Arg2 + 0x10), Zero)
            M04E (Arg1, (Arg2 + 0x14), Zero)
            M04E (Arg1, (Arg2 + 0x18), Zero)
            M04E (Arg1, (Arg2 + 0x1C), Zero)
            If ((Arg3 == One))
            {
                M04E (Arg1, (Arg2 + 0x20), Zero)
                M04E (Arg1, (Arg2 + 0x24), Zero)
                M04E (Arg1, (Arg2 + 0x28), Zero)
                M04E (Arg1, (Arg2 + 0x2C), Zero)
                M04E (Arg1, (Arg2 + 0x30), Zero)
                M04D (Arg1, (Arg2 + 0x34), Zero)
            }
        }

        M460 ("  FEA-ASL-CpmSavePcieBridgeData (0x%X, 0x%X, 0x%X, %d)\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
    }

    Mutex (M421, 0x00)
    Method (M422, 4, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 == Zero))
        {
            Return (0xFFFFFFFF)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xE0
        Acquire (M421, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            Offset (0x00), 
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M422.VAR1 */
        Local2 = VAR2 /* \M422.VAR2 */
        VAR1 = Local1
        Release (M421)
        M460 ("  KER-ASL-CpmReadBxbSmnRegister  (%d, %d, %d, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M423, 5, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 != Zero))
        {
            M460 ("  KER-ASL-CpmWriteBxbSmnRegister (%d, %d, %d, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xE0
            Acquire (M421, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                Offset (0x00), 
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M423.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M421)
        }
    }

    Mutex (M253, 0x00)
    Method (M249, 4, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 == 0xFFFFFFFF))
        {
            Return (0xFFFFFFFF)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xB8
        If (CondRefOf (\_SB.AM00))
        {
            Acquire (\_SB.AM00, 0xFFFF)
        }
        Else
        {
            Acquire (M253, 0xFFFF)
        }

        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            Offset (0x00), 
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M249.VAR1 */
        Local2 = VAR2 /* \M249.VAR2 */
        VAR1 = Local1
        If (CondRefOf (\_SB.AM00))
        {
            Release (\_SB.AM00)
        }
        Else
        {
            Release (M253)
        }

        M460 ("  KER-ASL-CpmReadSmnRegister  (%d, %d, %d, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M250, 5, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 != 0xFFFFFFFF))
        {
            M460 ("  KER-ASL-CpmWriteSmnRegister (%d, %d, %d, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xB8
            If (CondRefOf (\_SB.AM00))
            {
                Acquire (\_SB.AM00, 0xFFFF)
            }
            Else
            {
                Acquire (M253, 0xFFFF)
            }

            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                Offset (0x00), 
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M250.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            If (CondRefOf (\_SB.AM00))
            {
                Release (\_SB.AM00)
            }
            Else
            {
                Release (M253)
            }
        }
    }

    Method (M013, 4, Serialized)
    {
        Local1 = M04B (Arg0, Arg1)
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
            ))
        M460 ("  KER-ASL-CpmReadMem32  (0x%X, 0x%X, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteMem32 (0x%X, 0x%X, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local1 = M04B (Arg0, Arg1)
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        M04E (Arg0, Arg1, Local4)
    }

    Method (M011, 4, Serialized)
    {
        Local1 = M049 (Arg0, Arg1)
        Local2 = ((Local1 >> Arg2) & (0xFF >> (0x08 - Arg3)
            ))
        M460 ("  KER-ASL-CpmReadMem8  (0x%X, 0x%X, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteMem8 (0x%X, 0x%X, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local1 = M049 (Arg0, Arg1)
        Local2 = (Arg2 + Arg3)
        Local2 = (0x08 - Local2)
        Local2 = (((0xFF << Local2) & 0xFF) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (0xFF ^ Local2)) | Local3)
        M04C (Arg0, Arg1, Local4)
    }

    Method (M252, 3, Serialized)
    {
        If ((M085 >= 0x08))
        {
            Local0 = M251 /* \M251 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = Zero
                While ((Local2 != 0xFF))
                {
                    Local2 = M011 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M011 ((Local0 + Local1), One, Zero, 0x08)
                    Local4 = M011 ((Local0 + Local1), 0x02, Zero, 0x08)
                    Local5 = M011 ((Local0 + Local1), 0x03, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local4 == Arg2))
                        {
                            Return (Local5)
                        }
                    }

                    Local1 += 0x06
                }
            }
        }

        Return (0xFFFFFFFF)
    }

    Method (M624, 1, Serialized)
    {
        Local0 = Zero
        If ((M251 != Zero))
        {
            Local1 = (0x03 + (0x10 + (Arg0 * 0x06)))
            Local0 = M049 (M251, Local1)
            If ((Local0 == 0xFF))
            {
                Local0 = Zero
            }
        }

        Return (Local0)
    }

    Method (M049, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, One)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                VARR,   8
            }

            Local0 = VARR /* \M049.VARR */
        }

        Return (Local0)
    }

    Method (M04A, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x02)
            Field (VARM, WordAcc, NoLock, Preserve)
            {
                VARR,   16
            }

            Local0 = VARR /* \M04A.VARR */
        }

        Return (Local0)
    }

    Method (M04B, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local0 = VARR /* \M04B.VARR */
        }

        Return (Local0)
    }

    Method (M04C, 3, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, One)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                VARR,   8
            }

            VARR = Arg2
        }
    }

    Method (M04D, 3, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x02)
            Field (VARM, WordAcc, NoLock, Preserve)
            {
                VARR,   16
            }

            VARR = Arg2
        }
    }

    Method (M04E, 3, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            VARR = Arg2
        }
    }

    Method (M644, 3, Serialized)
    {
        M460 ("  KER-ASL-CpmDumpData (0x%X, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
        If (((Arg1 != One) && ((Arg1 != 0x02) && 
            (Arg1 != 0x04))))
        {
            M460 ("  Arg1: One Data Width is illegal", Zero, Zero, Zero, Zero, Zero, Zero)
        }
        ElseIf ((Arg2 > 0x1000))
        {
            M460 ("  Arg2: Total Data Size is illegal", Zero, Zero, Zero, Zero, Zero, Zero)
        }
        Else
        {
            Local0 = Zero
            Local1 = Arg0
            M460 ("  0x%X:", Local1, Zero, Zero, Zero, Zero, Zero)
            While ((Local0 < Arg2))
            {
                If ((Arg1 == One))
                {
                    M460 ("  %X", M049 (Arg0, Local0), Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf ((Arg1 == 0x02))
                {
                    M460 ("  %X", M04A (Arg0, Local0), Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf ((Arg1 == 0x04))
                {
                    M460 ("  %X", M04B (Arg0, Local0), Zero, Zero, Zero, Zero, Zero)
                }

                Local0 += Arg1
                Local1 = (Arg0 + Local0)
                If (((Local1 & 0x0F) == Zero))
                {
                    M460 ("\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    If ((Local0 < Arg2))
                    {
                        M460 ("  0x%X:", (Local1 & 0xFFFFFFF0), Zero, Zero, Zero, Zero, Zero)
                    }
                }
            }
        }

        M460 ("\n", Zero, Zero, Zero, Zero, Zero, Zero)
    }

    Method (M412, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x1F)
        Local0 &= One
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M409 (Local0, Local1, Local3)
        Local5 >>= Local4
        Local5 &= One
        Return (Local5)
    }

    Method (M4E3, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x15)
        Local0 &= 0x07
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M4E1 (Local0, Local1, Local3)
        Local5 >>= Local4
        Local5 &= One
        Return (Local5)
    }

    Method (M413, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x1F)
        Local0 &= One
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local2 = (Arg0 >> 0x06)
        Local2 &= 0x03
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M409 (Local0, Local1, (((Local2 + One) * One
            ) + Local3))
        Local6 = Local5
        Local5 &= (0xFFFFFFFF ^ (One << Local4))
        Local5 |= ((Arg1 & One) << Local4)
        If ((Local5 != Local6))
        {
            M410 (Local0, Local1, (((Local2 + One) * One) + Local3
                ), Local5)
        }
    }

    Method (M4E4, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x15)
        Local0 &= 0x07
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local2 = (Arg0 >> 0x06)
        Local2 &= 0x03
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M4E1 (Local0, Local1, (((Local2 + One) * One
            ) + Local3))
        Local6 = Local5
        Local5 &= (0xFFFFFFFF ^ (One << Local4))
        Local5 |= ((Arg1 & One) << Local4)
        If ((Local5 != Local6))
        {
            M4E2 (Local0, Local1, (((Local2 + One) * One) + Local3
                ), Local5)
        }
    }

    Method (M43A, 1, Serialized)
    {
        Local0 = Zero
        Local1 = M04B (M128, 0x33)
        Local2 = M04B (M128, 0x72)
        If (((Local1 == Zero) || (Local2 == Zero)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local1 = 0x%X  Local2 = 0x%X  ERROR ERROR ERROR\n", Arg0, Local1, Local2, Zero, Zero, Zero)
            Return (Local0)
        }

        Local3 = M011 (Local2, 0x19, Zero, 0x08)
        If (((Local3 == Zero) || (Local3 == 0xFF)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 1\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Local2 = (Local1 + (Local3 << 0x14))
        Local3 = M013 (Local2, 0x08, 0x08, 0x18)
        If ((Local3 != 0x00060400))
        {
            If ((Arg0 >= 0x08))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d >= 8)  Not PROM21  ERROR ERROR ERROR\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                Return (Local0)
            }

            Local3 = 0x02
            Local2 += (Local3 << 0x0C)
        }
        ElseIf ((Arg0 >= 0x18))
        {
            Local4 = M049 (M128, 0x93)
            If ((Local4 == Zero))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local4 = 0x%X  ERROR ERROR ERROR\n", Arg0, Local4, Zero, Zero, Zero, Zero)
                Return (Local0)
            }
            Else
            {
                Local4 &= 0x1F
            }

            Local3 = M011 (Local2, 0x19, Zero, 0x08)
            If (((Local3 == Zero) || (Local3 == 0xFF)))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 2\n", Arg0, Local3, Zero, Zero, Zero, Zero)
                Return (Local0)
            }

            Local2 = (Local1 + (Local3 << 0x14))
            Local2 += (Local4 << 0x0F)
            Local3 = M011 (Local2, 0x19, Zero, 0x08)
            If (((Local3 == Zero) || (Local3 == 0xFF)))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 3\n", Arg0, Local3, Zero, Zero, Zero, Zero)
                Return (Local0)
            }

            Local2 = (Local1 + (Local3 << 0x14))
        }

        Local3 = M011 (Local2, 0x04, Zero, 0x08)
        If (((Local3 == Zero) || (Local3 == 0xFF)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 4\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        If (((Local3 & 0x02) != 0x02))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 5\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Local3 = M013 (Local2, 0x40, Zero, 0x20)
        Local3 &= 0xFFFFFFFB
        If (((Local3 == Zero) || (Local3 == 0xFFFFFFFB)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 6\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }
        Else
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local3)
        }
    }

    Method (M440, 1, Serialized)
    {
        Local0 = M43A (Arg0)
        If ((Local0 == Zero))
        {
            M460 ("  KER-ASL-CpmPtReadGpio  (%d) = %d  MMIO = 0x%X  ERROR ERROR ERROR\n", Arg0, Local0, Local0, Zero, Zero, Zero)
            Return (Local0)
        }

        If ((Arg0 >= 0x18))
        {
            Local1 = (Arg0 - 0x18)
        }
        Else
        {
            Local1 = Arg0
        }

        Local2 = M013 (Local0, Zero, Local1, One)
        If ((Local2 == One))
        {
            M014 (Local0, Zero, Local1, One, Zero)
        }

        Local2 = M013 (Local0, 0x04, Local1, One)
        M460 ("  KER-ASL-CpmPtReadGpio  (%d) = %d  MMIO = 0x%X\n", Arg0, Local2, Local0, Zero, Zero, Zero)
        Return (Local2)
    }

    Method (M441, 2, Serialized)
    {
        Local0 = M43A (Arg0)
        If ((Local0 == Zero))
        {
            M460 ("  KER-ASL-CpmPtWriteGpio (%d, %d)   MMIO = 0x%X  ERROR ERROR ERROR\n", Arg0, Arg1, Local0, Zero, Zero, Zero)
        }

        If ((Arg0 >= 0x18))
        {
            Local1 = (Arg0 - 0x18)
        }
        Else
        {
            Local1 = Arg0
        }

        Local2 = M013 (Local0, Zero, Local1, One)
        If ((Local2 != One))
        {
            M014 (Local0, Zero, Local1, One, One)
        }

        M014 (Local0, 0x08, Local1, One, Arg1)
        M460 ("  KER-ASL-CpmPtWriteGpio (%d, %d)   MMIO = 0x%X\n", Arg0, Arg1, Local0, Zero, Zero, Zero)
    }

    Method (M009, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        Local2 = Zero
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                If (((Arg0 & 0xF8000000) == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        Local2 = M011 ((M084 + 0x1502), (Local1 * 0x04), Zero, 
                            One)
                    }
                    Else
                    {
                        Local2 = M011 ((M084 + 0x1202), (Local1 * 0x04), Zero, 
                            One)
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x1F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x1D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x1B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 >>= 0x10
                    Local2 &= One
                }
            }
            Else
            {
                Local2 = M011 ((M084 + 0x0100), Local1, 0x07, One)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x1F)
            Local3 &= One
            Local4 = (Arg0 >> 0x1D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x1B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 >>= 0x10
            Local2 &= One
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                Local2 = M038 ((Local1 + 0x08))
            }
            Else
            {
                Local2 = 0xFF
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            Local2 = M440 (Local1)
        }
        ElseIf ((Local0 == 0x06))
        {
            Local2 = M412 (Arg0)
        }
        ElseIf ((Local0 == 0x07))
        {
            Local2 = M4E3 (Arg0)
        }

        M460 ("  KER-ASL-CpmReadGpio  (0x%X) = 0x%X\n", Arg0, Local2, Zero, Zero, Zero, Zero)
        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        M460 ("  KER-ASL-CpmWriteGpio (0x%X, 0x%X)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                If (((Arg0 & 0xF8000000) == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                    Else
                    {
                        M012 ((M084 + 0x1202), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x1F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x1D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x1B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 &= 0xCF3FFFFF
                    Local2 |= 0x00800000
                    Local2 |= (Arg1 << 0x16)
                    M250 (Local3, Local4, Local5, Local6, Local2)
                }
            }
            Else
            {
                M012 ((M084 + 0x0100), Local1, 0x06, One, Arg1)
                M012 ((M084 + 0x0100), Local1, 0x05, One, Zero)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x1F)
            Local3 &= One
            Local4 = (Arg0 >> 0x1D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x1B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 &= 0xCF3FFFFF
            Local2 |= 0x00800000
            Local2 |= (Arg1 << 0x16)
            M423 (Local3, Local4, Local5, Local6, Local2)
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                M039 ((Local1 + 0x08), Arg1)
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            M441 (Local1, Arg1)
        }
        ElseIf ((Local0 == 0x06))
        {
            M413 (Arg0, Arg1)
        }
        ElseIf ((Local0 == 0x07))
        {
            M4E4 (Arg0, Arg1)
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */  0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // ~.......
        /* 0008 */  0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // . ......
        /* 0010 */  0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09         // .......
    })
    Name (M227, Buffer (0x18)
    {
        /* 0000 */  0x41, 0x42, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // AB......
        /* 0008 */  0x02, 0x44, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .D......
        /* 0010 */  0x17, 0x45, 0x0B, 0x01, 0x0F, 0x0D, 0x09, 0x08   // .E......
    })
    Name (M329, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x12, 0x18,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32A, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M330, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32B, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x0B, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x1D, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // ........
        /* 0010 */  0x17, 0x20, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // . T.(...
    })
    Name (M32C, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x73, 0x03, 0x16, 0x04, 0x15, 0x74, 0x05,  // Ys....t.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x18, 0x1A,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x1C, 0x01, 0x68, 0x00, 0x69, 0x6A   // ....h.ij
    })
    Method (M029, 1, Serialized)
    {
        If ((M085 == 0x02))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M037 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 < 0x02))
        {
            Return (M011 ((M084 + 0x0160), Arg0, 0x07, One))
        }
        ElseIf (((M085 > 0x02) && (M085 < 0x08)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M227 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x08))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M329 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x09) || (M085 == 0x0A)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0B) || (M085 == 0x0C)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32A [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0D) || (M085 == 0x0E)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x0F))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x10))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x12))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x13))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x14))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x15))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x11))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32C [Arg0]) * 
                0x04), Zero, One))
        }

        Return (Zero)
    }

    Method (M031, 1, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        Return (M011 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 
            0x07), One))
    }

    Method (M032, 2, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        M012 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 0x07
            ), One, Arg1)
    }

    Method (M477, 2, Serialized)
    {
        If ((Arg1 == Zero))
        {
            Return (Zero)
        }

        OperationRegion (VARM, SystemIO, Arg0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            SMB8,   8
        }

        Local0 = Arg1
        While ((Local0 > Zero))
        {
            SMB8 |= 0x40
            If ((Local0 < 0x00FFFFFF))
            {
                If ((Local0 > 0x05))
                {
                    Local0 = (Local0 - 0x05)
                }
                Else
                {
                    Local0 = Zero
                }
            }

            Stall (0x05)
            Local1 = SMB8 /* \M477.SMB8 */
            If (((Local1 & 0x50) == 0x40))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Method (M478, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, Arg0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            SMB8,   8
        }

        SMB8 |= 0x80
    }

    Method (M479, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, Arg0, 0x03)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8
        }

        Local0 = Arg1
        While ((Local0 > Zero))
        {
            Local1 = 0x64
            Local2 = One
            While (((Local1 > Zero) && ((Local2 & One) != Zero)))
            {
                SMB0 = 0x1F
                If ((Local0 < 0x00FFFFFF))
                {
                    If ((Local0 > 0x05))
                    {
                        Local0 = (Local0 - 0x05)
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local1--
                Stall (0x05)
                Local2 = SMB0 /* \M479.SMB0 */
            }

            If (((Local2 & One) != Zero))
            {
                SMB2 = 0x02
            }
            Else
            {
                Break
            }
        }

        If (((SMB0 & One) != Zero))
        {
            Return (One)
        }

        While ((Local0 > Zero))
        {
            Local1 = 0x64
            Local2 = One
            While (((Local1 > Zero) && ((Local2 & One) != Zero)))
            {
                SMB1 = 0x3F
                If ((Local0 < 0x00FFFFFF))
                {
                    If ((Local0 > 0x05))
                    {
                        Local0 = (Local0 - 0x05)
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local1--
                Stall (0x05)
                Local2 = SMB1 /* \M479.SMB1 */
            }

            If (((Local2 & One) != Zero))
            {
                SMB1 = 0x02
            }
            Else
            {
                Break
            }
        }

        If (((SMB1 & One) != Zero))
        {
            Return (One)
        }

        Return (Zero)
    }

    Mutex (M408, 0x00)
    Method (M47A, 6, Serialized)
    {
        Local0 = Buffer (0x22){}
        CreateByteField (Local0, Zero, STAT)
        CreateByteField (Local0, One, LEN)
        CreateByteField (Local0, 0x02, DATB)
        CreateWordField (Local0, 0x02, DATW)
        CreateField (Local0, 0x10, 0x0100, DTBF)
        STAT = 0xFF
        LEN = Zero
        DTBF = Zero
        M000 (0x0DE5)
        M460 ("  KER-ASL-CpmSmbusExecutor (Port%d, isRead %d, Potcl %d, DevAddr 0x%X, Cmd 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local1 = M049 (M128, 0x94)
        If ((((Arg0 != Zero) && (Arg0 != One)) || (
            Local1 == One)))
        {
            STAT = 0x80
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x80\n", Zero)
            Return (Local0)
        }

        If (((Arg1 != Zero) && (Arg1 != One)))
        {
            STAT = 0x81
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x81\n", Zero)
            Return (Local0)
        }

        Name (VALP, Package (0x05)
        {
            Zero, 
            One, 
            0x02, 
            0x03, 
            0x05
        })
        If ((Match (VALP, MEQ, Arg2, MTR, Zero, Zero) == Ones))
        {
            STAT = 0x82
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x82\n", Zero)
            Return (Local0)
        }

        If (((Arg1 == Zero) && (Arg2 == 0x05)))
        {
            Local7 = Arg5
            Local2 = DerefOf (Local7 [Zero])
            If (((Local2 < One) || (Local2 > 0x20)))
            {
                STAT = 0x83
                M460 ("  KER-ASL-CpmSmbusExecutor return 0x83, Length %d\n", Local2, Zero, Zero, Zero, Zero, Zero)
                Return (Local0)
            }
        }

        Acquire (M408, 0xFFFF)
        Local4 = (M414 + (Arg0 << 0x05))
        If ((Local4 == Zero))
        {
            Release (M408)
            STAT = 0x84
            M460 ("  KER-ASL-CpmSmbusExecutor return 0x84, Local4 %d\n", Local4, Zero, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        OperationRegion (VARM, SystemIO, Local4, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M049 ((M084 + 0x0300), 0x02)
        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        }

        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M47A.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        If (M477 (Local4, 0x4E20))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            STAT = 0x85
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x85\n", Zero)
            Return (Local0)
        }

        If (M479 (Local4, 0x4E20))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            M478 (Local4)
            Release (M408)
            STAT = 0x86
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x86\n", Zero)
            Return (Local0)
        }

        Local7 = Arg5
        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg3 << One) | Arg1)
            SMB3 = Arg4
            SMB2 = (Arg2 << 0x02)
            Local1 = SMB2 /* \M47A.SMB2 */
            If ((Arg1 == Zero))
            {
                If (((Arg2 == One) || (Arg2 == 0x02)))
                {
                    SMB5 = DerefOf (Local7 [One])
                }

                If ((Arg2 == 0x03))
                {
                    SMB6 = DerefOf (Local7 [0x02])
                    SMB5 = DerefOf (Local7 [One])
                }

                If ((Arg2 == 0x05))
                {
                    Local2 = DerefOf (Local7 [Zero])
                    SMB5 = Local2
                    Local1 = One
                    While ((Local1 <= Local2))
                    {
                        SMB7 = DerefOf (Local7 [Local1])
                        Local1++
                    }
                }
            }
            ElseIf ((Arg2 == 0x05))
            {
                Local2 = DerefOf (Local7 [Zero])
                SMB5 = Local2
            }

            SMB2 = ((Arg2 << 0x02) | 0x40)
            If ((Arg2 == 0x05))
            {
                Local1 = 0x1B58
            }
            Else
            {
                Local1 = 0x03E8
            }

            Local2 = One
            While (((Local1 > Zero) && ((Local2 & 0x0E) == Zero)))
            {
                If (((Local2 & One) == Zero))
                {
                    Break
                }

                Local1--
                Stall (0x05)
                Local2 = SMB0 /* \M47A.SMB0 */
            }

            If (((Local1 == Zero) && ((Local2 & One) != Zero)))
            {
                SMB2 = 0x02
                If ((Arg0 == One))
                {
                    SMB2 = Local6
                }

                If (((Local5 & One) == Zero))
                {
                    M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                }

                M478 (Local4)
                Release (M408)
                STAT = 0x87
                M459 ("  KER-ASL-CpmSmbusExecutor return 0x87\n", Zero)
                Return (Local0)
            }

            If (((Local2 & 0x04) != Zero))
            {
                Local3 = Zero
            }
            ElseIf (((Local2 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3--
            }
            Else
            {
                Local3 = Zero
                STAT = Zero
                If ((Arg1 != Zero))
                {
                    If (((Arg2 == One) || (Arg2 == 0x02)))
                    {
                        DATB = SMB5 /* \M47A.SMB5 */
                        LEN = One
                    }

                    If ((Arg2 == 0x03))
                    {
                        Local0 [0x03] = SMB6 /* \M47A.SMB6 */
                        Local0 [0x02] = SMB5 /* \M47A.SMB5 */
                        LEN = 0x02
                    }

                    If ((Arg2 == 0x05))
                    {
                        Local2 = SMB2 /* \M47A.SMB2 */
                        Local2 = SMB5 /* \M47A.SMB5 */
                        If ((Local2 > 0x20))
                        {
                            Local2 = 0x20
                        }

                        LEN = Local2
                        Local1 = 0x02
                        Local2 += 0x02
                        While ((Local1 < Local2))
                        {
                            Local0 [Local1] = 0xCC
                            Local0 [Local1] = SMB7 /* \M47A.SMB7 */
                            Local1++
                        }
                    }
                }
            }
        }

        Local1 = (SMB0 & 0x1D)
        STAT = Local1
        SMB0 = 0x1F
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        }

        M478 (Local4)
        Release (M408)
        M460 ("  KER-ASL-CpmSmbusExecutor return St: 0x%X, Len %d, Data: 0x%X, 0x%X, 0x%X, 0x%X ...\n", STAT, LEN, DerefOf (Local0 [0x02]), DerefOf (Local0 [
            0x03]), DerefOf (Local0 [0x04]), DerefOf (Local0 [0x05]))
        M000 (0x0DE6)
        Return (Local0)
    }

    Method (M47B, 3, Serialized)
    {
        Local0 = M47A (Arg0, Arg1, Zero, Arg2, Zero, Zero)
        Return (DerefOf (Local0 [Zero]))
    }

    Method (M47C, 4, Serialized)
    {
        Local0 = Buffer (0x02){}
        CreateByteField (Local0, Zero, LEN)
        CreateByteField (Local0, One, DATB)
        LEN = One
        DATB = Arg3
        Local1 = M47A (Arg0, Arg1, One, Arg2, Zero, Local0)
        Return (Local1)
    }

    Method (M47D, 5, Serialized)
    {
        Local0 = Buffer (0x02){}
        CreateByteField (Local0, Zero, LEN)
        CreateByteField (Local0, One, DATB)
        LEN = One
        DATB = Arg4
        Local1 = M47A (Arg0, Arg1, 0x02, Arg2, Arg3, Local0)
        Return (Local1)
    }

    Method (M47E, 5, Serialized)
    {
        Local0 = Buffer (0x03){}
        CreateByteField (Local0, Zero, LEN)
        CreateByteField (Local0, One, DATL)
        CreateByteField (Local0, 0x02, DATH)
        LEN = 0x02
        DATL = (Arg4 & 0xFF)
        DATH = ((Arg4 >> 0x08) & 0xFF)
        Local1 = M47A (Arg0, Arg1, 0x03, Arg2, Arg3, Local0)
        Return (Local1)
    }

    Method (M47F, 5, Serialized)
    {
        Local1 = M47A (Arg0, Arg1, 0x05, Arg2, Arg3, Arg4)
        Return (Local1)
    }

    Method (M409, 3, Serialized)
    {
        Local0 = M049 (M128, 0x94)
        If ((Local0 == One))
        {
            M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 Smbus Access Disable\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
            Return (Zero)
        }

        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M049 ((M084 + 0x0300), 0x02)
        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        }

        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M409.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M409.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 ERROR 1\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M409.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 ERROR 2\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg1 << One) | One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M409.SMB2 */
            SMB2 = 0x48
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M409.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    If (((Local5 & One) == Zero))
                    {
                        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    }

                    Release (M408)
                    M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 ERROR 3\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = SMB5 /* \M409.SMB5 */
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        }

        Release (M408)
        M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0x%X Success\n", Arg0, Arg1, Arg2, Local4, Zero, Zero)
        Return (Local4)
    }

    Method (M410, 4, Serialized)
    {
        Local0 = M049 (M128, 0x94)
        If ((Local0 == One))
        {
            M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) = 0 Smbus Access Disable\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
            Return (Zero)
        }

        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M049 ((M084 + 0x0300), 0x02)
        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        }

        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M410.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M410.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) = 0 ERROR 1\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M410.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) = 0 ERROR 2\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = (Arg1 << One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M410.SMB2 */
            SMB5 = Arg3
            SMB2 = 0x48
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M410.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    If (((Local5 & One) == Zero))
                    {
                        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    }

                    Release (M408)
                    M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) = 0 ERROR 3\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = Zero
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        }

        Release (M408)
        M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) Success\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
        Return (Local4)
    }

    Method (M4F1, 1, Serialized)
    {
        M460 ("  KER-ASL-CpmCheckExpanderInputEvent (0x%X) Start\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        Local5 = Zero
        If (((Arg0 >= Zero) && (Arg0 <= 0x03)))
        {
            Local0 = M4F0 /* \M4F0 */
            If ((Local0 != Zero))
            {
                Local0 += 0x10
                Local0 += (Arg0 * 0x26)
                If ((M049 (Local0, Zero) == Arg0))
                {
                    Local1 = M049 (Local0, 0x15)
                    Local2 = M049 (Local0, 0x16)
                    Local3 = M049 (Local0, 0x1E)
                    Local4 = M409 (Local1, Local2, Zero)
                    M04C (Local0, 0x1E, Local4)
                    Local4 ^= Local3
                    Local4 &= M049 (Local0, 0x1C)
                    Local4 |= M049 (Local0, 0x1D)
                    If ((M049 (Local0, 0x17) >= One))
                    {
                        Local3 = M049 (Local0, 0x25)
                        Local5 = M409 (Local1, Local2, One)
                        M04C (Local0, 0x25, Local5)
                        Local5 ^= Local3
                        Local5 &= M049 (Local0, 0x23)
                        Local5 |= M049 (Local0, 0x24)
                        Local5 <<= 0x08
                    }

                    Local5 |= Local4
                }
            }
        }

        M460 ("  KER-ASL-CpmCheckExpanderInputEvent (0x%X) = 0x%X End\n", Arg0, Local5, Zero, Zero, Zero, Zero)
        Return (Local5)
    }

    Mutex (M4E5, 0x00)
    Name (M4E7, 0x5A)
    Name (M4E8, 0x5A)
    Name (M4E9, 0x5A)
    Name (M4EA, 0x5A5A5A5A)
    Name (M4EB, 0x5A5A5A5A)
    Name (M4EC, Package (0x03)
    {
        0x02, 
        Package (0x05)
        {
            Package (0x07)
            {
                0x06, 
                0x0F, 
                0x13, 
                0x10, 
                0x12, 
                0x14, 
                0x15
            }, 

            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                Zero, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                Zero, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x71, 
                0x72, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x13, 
                0x14, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }
        }, 

        Package (0x07)
        {
            Package (0x02)
            {
                One, 
                0x11
            }, 

            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                One, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                One, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x95, 
                0x96, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x97, 
                0x98, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }, 

            Package (0x06)
            {
                "I2C4", 
                0x0D, 
                0x0E, 
                Zero, 
                0xFED81E52, 
                0xFEDC6000
            }, 

            Package (0x06)
            {
                "I2C5", 
                0x13, 
                0x14, 
                Zero, 
                0xFED81E54, 
                0xFEDCB000
            }
        }
    })
    Method (M4E6, 1, Serialized)
    {
        Local0 = M085 /* \M085 */
        Local1 = DerefOf (M4EC [Zero])
        Local2 = One
        Local7 = Zero
        While ((Local2 <= Local1))
        {
            Local3 = DerefOf (M4EC [Local2])
            Local4 = DerefOf (Local3 [Zero])
            Local5 = DerefOf (Local4 [Zero])
            Local6 = One
            While ((Local6 <= Local5))
            {
                If ((DerefOf (Local4 [Local6]) == Local0))
                {
                    Local7 = One
                    Break
                }

                Local6++
            }

            If ((One == Local7))
            {
                Break
            }

            Local2++
        }

        If ((Local2 > Local1))
        {
            Return (Zero)
        }

        Local2 = One
        Local1 = SizeOf (Local3)
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = "I2C0"
            }
            Case (One)
            {
                Local0 = "I2C1"
            }
            Case (0x02)
            {
                Local0 = "I2C2"
            }
            Case (0x03)
            {
                Local0 = "I2C3"
            }
            Case (0x04)
            {
                Local0 = "I2C4"
            }
            Case (0x05)
            {
                Local0 = "I2C5"
            }

        }

        While ((Local2 <= Local1))
        {
            Local4 = DerefOf (Local3 [Local2])
            Local5 = DerefOf (Local4 [Zero])
            If ((Local5 == Local0))
            {
                Break
            }

            Local2++
        }

        If ((Local2 > Local1))
        {
            Return (Zero)
        }

        M4E7 = DerefOf (Local4 [One])
        M4E8 = DerefOf (Local4 [0x02])
        M4E9 = DerefOf (Local4 [0x03])
        M4EA = DerefOf (Local4 [0x04])
        M4EB = DerefOf (Local4 [0x05])
        Return (One)
    }

    Method (M4E0, 5, Serialized)
    {
        Local0 = M4E6 (Arg0)
        If ((Local0 == Zero))
        {
            Return (0xFF00)
        }

        Name (RTFF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        Local0 = M4EA /* \M4EA */
        Local1 = M4EB /* \M4EB */
        OperationRegion (VAR0, SystemMemory, Local0, 0x02)
        Field (VAR0, ByteAcc, NoLock, Preserve)
        {
            ADTD,   2, 
            ADPS,   1, 
            ADPD,   1, 
            ADSO,   1, 
            ADSC,   1, 
            ADSR,   1, 
            ADIS,   1, 
            ADDS,   3
        }

        OperationRegion (VAR1, SystemMemory, Local1, 0x0100)
        Field (VAR1, DWordAcc, NoLock, Preserve)
        {
            IC00,   32, 
            IC04,   32, 
            Offset (0x10), 
            IC10,   32, 
            IC14,   32, 
            IC18,   32, 
            IC1C,   32, 
            IC20,   32, 
            Offset (0x30), 
            IC30,   32, 
            IC34,   32, 
            IC38,   32, 
            IC3C,   32, 
            IC40,   32, 
            IC44,   32, 
            IC48,   32, 
            Offset (0x54), 
            IC54,   32, 
            Offset (0x6C), 
            IC6C,   32, 
            IC70,   32, 
            IC74,   32, 
            IC78,   32, 
            IC7C,   32, 
            IC80,   32, 
            Offset (0x9C), 
            IC9C,   32, 
            Offset (0xF4), 
            ICF4,   32
        }

        Name (BUFF, Buffer (0x03)
        {
             0x00, 0x00, 0x00                                 // ...
        })
        CreateByteField (BUFF, Zero, AOAC)
        CreateByteField (BUFF, One, ISCL)
        CreateByteField (BUFF, 0x02, ISDA)
        Acquire (M4E5, 0xFFFF)
        Local1 = 0x000186A0
        Local0 = Zero
        AOAC = ADTD /* \M4E0.ADTD */
        ISCL = M011 (0xFED80D00, M4E7, Zero, 0x08)
        ISDA = M011 (0xFED80D00, M4E8, Zero, 0x08)
        M012 (0xFED80D00, M4E7, Zero, 0x08, M4E9)
        M012 (0xFED80D00, M4E8, Zero, 0x08, M4E9)
        Local2 = AOAC /* \M4E0.AOAC */
        If ((Local2 == 0x03))
        {
            ADTD = Zero
            ADPD = One
            Local3 = ADDS /* \M4E0.ADDS */
            While ((Local3 != 0x07))
            {
                Local1--
                Stall (0x0A)
                Local3 = ADDS /* \M4E0.ADDS */
                If ((Local1 == Zero))
                {
                    Local0 = 0xFF01
                    Break
                }
            }
        }

        If ((Local0 == Zero))
        {
            Local2 = IC70 /* \M4E0.IC70 */
            While ((0x20 == (Local2 & 0x20)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for IDE : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF02
                    Break
                }

                Local2 = IC70 /* \M4E0.IC70 */
                Local1--
                Stall (0x0A)
            }
        }

        If ((Local0 == Zero))
        {
            IC6C = Zero
            Local2 = IC9C /* \M4E0.IC9C */
            While ((Zero != (Local2 & One)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for fI2cDisable : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF03
                    Break
                }

                Local2 = IC9C /* \M4E0.IC9C */
                Local1--
                Stall (0x0A)
            }
        }

        If ((Local0 == Zero))
        {
            IC00 = 0x63
            IC04 = Arg1
            IC14 = 0x0285
            IC18 = 0x0357
            IC7C = 0x00400040
            IC38 = Zero
            IC34 = Zero
            IC30 = Zero
            Local2 = IC40 /* \M4E0.IC40 */
            Local2 = IC54 /* \M4E0.IC54 */
        }

        If ((Local0 == Zero))
        {
            IC6C = One
            Local2 = IC9C /* \M4E0.IC9C */
            While ((Zero == (Local2 & One)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for I2cEnable : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF04
                    Break
                }

                Local2 = IC9C /* \M4E0.IC9C */
                Local1--
                Stall (0x0A)
            }
        }

        If ((Local0 == Zero))
        {
            Local3 = Arg3
            Local4 = Arg2
            Local5 = Zero
            Local6 = Zero
            Local7 = 0x02
            While (((Local3 + Local4) > Zero))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for TxRx: (0x%X, 0x%X)\n", Local3, Local4, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF06
                    Break
                }

                Local2 = IC70 /* \M4E0.IC70 */
                If (((Local2 & 0x08) != Zero))
                {
                    Local2 = IC10 /* \M4E0.IC10 */
                    Local1--
                    Stall (0x0A)
                    Continue
                }

                Local2 = IC74 /* \M4E0.IC74 */
                If ((Local2 != Zero))
                {
                    Local1--
                    Stall (0x0A)
                    Continue
                }

                If ((Local3 > One))
                {
                    IC10 = (ToInteger (DerefOf (Arg4 [Local5])) & 0xFF)
                    Local3--
                    Local5++
                }
                ElseIf (((Local3 == One) && (Local4 != Zero)))
                {
                    IC10 = (ToInteger (DerefOf (Arg4 [Local5])) & 0xFF)
                    Local3--
                    Local5++
                }
                ElseIf (((Local3 == One) && (Local4 == Zero)))
                {
                    IC10 = ((ToInteger (DerefOf (Arg4 [Local5])) & 0xFF
                        ) | 0x0200)
                    Local3--
                    Local5++
                }
                ElseIf (((Local3 == Zero) && (Local4 > One)))
                {
                    IC10 = 0x0100
                    Local6 = One
                    Local4--
                }
                ElseIf (((Local3 == Zero) && (Local4 == One)))
                {
                    IC10 = 0x0300
                    Local6 = One
                    Local4--
                }

                Local1--
                Stall (0x0A)
                Local2 = IC34 /* \M4E0.IC34 */
                If ((Zero != (Local2 & 0x40)))
                {
                    Local7 = IC54 /* \M4E0.IC54 */
                    Local2 = IC80 /* \M4E0.IC80 */
                    M460 ("  I2cTX Abrt Source: (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF05
                    Break
                }

                If ((Local6 != Zero))
                {
                    Local2 = IC70 /* \M4E0.IC70 */
                    While (((Local2 & 0x08) != 0x08))
                    {
                        Local2 = IC70 /* \M4E0.IC70 */
                        If ((Local1 == Zero))
                        {
                            M460 ("  I2cTimeout for Rx : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                            Local0 = 0xFF07
                            Break
                        }

                        Local1--
                        Stall (0x0A)
                    }
                }

                If ((Local6 != Zero))
                {
                    Local2 = IC10 /* \M4E0.IC10 */
                    RTFF [Local7] = Local2
                    Local1--
                    Stall (0x14)
                    Local6 = Zero
                }
            }
        }

        Release (M4E5)
        If ((Local0 == Zero))
        {
            Local2 = IC70 /* \M4E0.IC70 */
            While ((0x20 == (Local2 & 0x20)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for IDE2 : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF08
                    Break
                }

                Local2 = IC70 /* \M4E0.IC70 */
                Local1--
                Stall (0x0A)
            }
        }

        If (((Local0 > 0xFF04) && (Local0 < 0xFF08)))
        {
            IC6C = Zero
            Local2 = IC9C /* \M4E0.IC9C */
            While ((Zero != (Local2 & One)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for fI2cDisable : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF09
                    Break
                }

                Local2 = IC9C /* \M4E0.IC9C */
                Local1--
                Stall (0x0A)
            }
        }

        Local3 = AOAC /* \M4E0.AOAC */
        If ((Local3 == 0x03))
        {
            ADPD = Zero
            Local2 = ADDS /* \M4E0.ADDS */
            While ((Local2 != Zero))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for AOAC Off : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF10
                    Break
                }

                Local1--
                Stall (0x0A)
                Local2 = ADDS /* \M4E0.ADDS */
            }

            ADTD = 0x03
        }

        M012 (0xFED80D00, M4E7, Zero, 0x08, ISCL)
        M012 (0xFED80D00, M4E8, Zero, 0x08, ISDA)
        CreateWordField (RTFF, Zero, STAT)
        STAT = Local0
        Return (RTFF) /* \M4E0.RTFF */
    }

    Method (M4E1, 3, Serialized)
    {
        Name (RTFF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        Name (WRFF, Buffer (One)
        {
             0x00                                             // .
        })
        CreateByteField (WRFF, Zero, WDAT)
        WDAT = Arg2
        RTFF = M4E0 (Arg0, Arg1, One, One, WRFF)
        CreateWordField (RTFF, Zero, STAT)
        CreateByteField (RTFF, 0x02, RDAT)
        Local0 = STAT /* \M4E1.STAT */
        Local1 = RDAT /* \M4E1.RDAT */
        M460 ("  Read I2C Byte (0x%X, 0x%X)\n", Local0, Local1, Zero, Zero, Zero, Zero)
        If ((Local0 == Zero))
        {
            Return ((RDAT & 0xFF))
        }

        Return (Zero)
    }

    Method (M4E2, 4, Serialized)
    {
        Name (WRFF, Buffer (0x02)
        {
             0x00, 0x00                                       // ..
        })
        CreateByteField (WRFF, Zero, WDA1)
        CreateByteField (WRFF, One, WDA2)
        WDA1 = Arg2
        WDA2 = (Arg3 & 0xFF)
        Local0 = M4E0 (Arg0, Arg1, Zero, 0x02, WRFF)
        CreateWordField (Local0, Zero, STAT)
        Local1 = STAT /* \M4E2.STAT */
        M460 ("  Write I2C Byte(0x%X)\n", Local1, Zero, Zero, Zero, Zero, Zero)
    }

    Scope (\_SB.GPIO)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            M460 ("  KER-ASL-\\_SB.GPIO._INI Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If ((M4F0 != Zero))
            {
                M4F1 (Zero)
                M4F1 (One)
                M4F1 (0x02)
                M4F1 (0x03)
            }

            M460 ("  KER-ASL-\\_SB.GPIO._INI End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }
    }

    Scope (\_GPE)
    {
        Method (SIE0, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE0 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE0))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE0 ()
            }

            Local0 = M4F1 (Zero)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP00))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP00\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP00 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP01))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP01\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP01 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP02))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP02\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP02 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP03))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP03\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP03 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP04))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP04\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP04 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP05))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP05\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP05 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP06))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP06\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP06 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP07))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP07\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP07 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP10))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP10\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP10 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP11))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP11\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP11 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP12))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP12\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP12 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP13))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP13\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP13 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP14))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP14\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP14 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP15))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP15\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP15 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP16))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP16\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP16 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP17))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP17\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP17 ()
                }
            }

            If (CondRefOf (\_GPE.AIE0))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE0 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE0 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SIE1, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE1 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE1))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE1\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE1 ()
            }

            Local0 = M4F1 (One)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP20))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP20\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP20 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP21))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP21\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP21 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP22))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP22\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP22 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP23))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP23\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP23 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP24))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP24\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP24 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP25))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP25\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP25 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP26))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP26\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP26 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP27))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP27\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP27 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP30))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP30\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP30 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP31))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP31\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP31 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP32))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP32\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP32 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP33))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP33\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP33 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP34))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP34\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP34 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP35))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP35\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP35 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP36))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP36\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP36 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP37))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP37\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP37 ()
                }
            }

            If (CondRefOf (\_GPE.AIE1))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE1\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE1 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE1 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SIE2, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE2 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE2))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE2\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE2 ()
            }

            Local0 = M4F1 (0x02)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP40))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP40\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP40 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP41))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP41\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP41 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP42))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP42\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP42 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP43))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP43\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP43 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP44))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP44\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP44 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP45))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP45\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP45 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP46))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP46\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP46 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP47))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP47\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP47 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP50))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP50\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP50 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP51))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP51\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP51 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP52))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP52\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP52 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP53))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP53\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP53 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP54))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP54\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP54 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP55))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP55\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP55 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP56))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP56\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP56 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP57))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP57\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP57 ()
                }
            }

            If (CondRefOf (\_GPE.AIE2))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE2\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE2 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE2 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SIE3, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE3 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE3))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE3\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE3 ()
            }

            Local0 = M4F1 (0x03)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP60))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP60\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP60 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP61))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP61\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP61 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP62))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP62\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP62 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP63))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP63\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP63 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP64))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP64\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP64 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP65))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP65\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP65 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP66))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP66\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP66 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP67))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP67\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP67 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP70))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP70\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP70 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP71))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP71\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP71 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP72))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP72\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP72 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP73))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP73\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP73 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP74))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP74\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP74 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP75))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP75\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP75 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP76))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP76\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP76 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP77))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP77\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP77 ()
                }
            }

            If (CondRefOf (\_GPE.AIE3))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE3\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE3 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE3 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Name (M4D2, Buffer (0x08){})
        Method (_L1B, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Local3 = Buffer (0x08){}
            CreateWordField (Local3, Zero, M254)
            CreateByteField (Local3, 0x02, M255)
            CreateDWordField (Local3, 0x03, M256)
            M256 = Zero
            M254 = 0x07
            M255 = 0x30
            If (CondRefOf (\_SB.ALIB))
            {
                M460 ("  KER-ASL-Call \\_SB.ALIB (0x0C, 0x%X)\n", Local3, Zero, Zero, Zero, Zero, Zero)
                Local4 = \_SB.ALIB (0x0C, Local3)
                M4D2 = Local4
                CreateDWordField (M4D2, Zero, M4D0)
                CreateDWordField (M4D2, 0x04, M4D1)
                ToInteger (M4D0, Local0)
                ToInteger (M4D1, Local1)
                M460 ("  KER-ASL-ALIB Return Data (0x%X, 0x%X)\n", Local0, Local1, Zero, Zero, Zero, Zero)
                If ((Local0 == Zero))
                {
                    If (CondRefOf (\_SB.APAD))
                    {
                        \_SB.APAD.M446 [One] = Local1
                        M460 ("  KER-ASL-Notify \\_SB.APAD 0x80\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.APAD, 0x80) // Status Change
                    }
                }
                ElseIf ((Local0 == One))
                {
                    M460 ("  KER-ASL-Notify \\_SB.APAD 0x84\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf ((Local0 == 0x02))
                {
                    M460 ("  KER-ASL-Notify \\_SB.APAD 0x85\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    If (CondRefOf (NFPC))
                    {
                        NFPC ()
                    }
                }
            }
        }
    }

    Scope (\_SB)
    {
        Name (MACO, Zero)
        Device (APAD)
        {
            Name (_HID, "ACPI000C" /* Processor Aggregator Device */)  // _HID: Hardware ID
            Name (M446, Package (0x02)
            {
                One, 
                Zero
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (\_OSI ("Processor Aggregator Device"))
                {
                    Local0 = M04A (M128, 0x91)
                    If (((Local0 & 0x80) == 0x80))
                    {
                        M460 ("  KER-ASL-\\_SB.APAD._STA = 0xF\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (0x0F)
                    }
                    Else
                    {
                        M460 ("  KER-ASL-\\_SB.APAD._STA = 0x0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (Zero)
                    }
                }
                Else
                {
                    M460 ("  KER-ASL-1-\\_SB.APAD._STA = 0x0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (Zero)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                M460 ("  KER-ASL-\\_SB.APAD._INI\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Local0 = M04A (M128, 0x91)
                If ((((Local0 & 0xC0) == 0xC0) && ((Local0 & 
                    0xFF00) != 0xFF00)))
                {
                    Local3 = Buffer (0x08){}
                    CreateWordField (Local3, Zero, M254)
                    CreateByteField (Local3, 0x02, M255)
                    CreateDWordField (Local3, 0x03, M256)
                    M256 = (Local0 >> 0x08)
                    M254 = 0x07
                    M255 = 0x31
                    If (CondRefOf (\_SB.ALIB))
                    {
                        M460 ("  KER-ASL-Call \\_SB.ALIB (0x0C, 0x%X)\n", Local3, Zero, Zero, Zero, Zero, Zero)
                        \_SB.ALIB (0x0C, Local3)
                    }
                }
            }

            Method (_PUR, 0, NotSerialized)  // _PUR: Processor Utilization Request
            {
                ToInteger (DerefOf (M446 [Zero]), Local0)
                ToInteger (DerefOf (M446 [One]), Local1)
                M460 ("  KER-ASL-\\_SB.APAD._PUR Return Package (2) (0x%X, 0x%X) to OSPM\n", Local0, Local1, Zero, Zero, Zero, Zero)
                Return (M446) /* \_SB_.APAD.M446 */
            }
        }
    }
}



SSDT12
------
DefinitionBlock ("", "SSDT", 2, "AMD", "AmdTable", 0x00000001)
{
    Scope (\_SB)
    {
        Name (TGPI, 0x0F)
        Device (PTIO)
        {
            Name (_HID, "AMDIF031")  // _HID: Hardware ID
            Name (_CID, "AMDIF031")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC40000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.PTIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (ASMT)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "ASMT0001")  // _HID: Hardware ID
            Name (_CID, "ASMT0001")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0000
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0001
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0002
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0003
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0004
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0005
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0006
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0007
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0008
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0009
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x000A
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x000B
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x000C
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x000D
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x000E
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x000F
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0010
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0011
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0012
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0013
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0014
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0015
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0016
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PTIO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0017
                        }
                })
                Return (RBUF) /* \_SB_.ASMT._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TGPI == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 2, "ALASKA", "CPUSSDT", 0x01072009)
{
    Scope (\_SB)
    {
        Device (PLTF)
        {
            Name (_HID, "ACPI0010" /* Processor Container Device */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A05") /* Generic Container Device */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Device (C000)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, Zero)  // _UID: Unique ID
            }

            Device (C001)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
            }

            Device (C002)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
            }

            Device (C003)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
            }

            Device (C004)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x04)  // _UID: Unique ID
            }

            Device (C005)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x05)  // _UID: Unique ID
            }

            Device (C006)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x06)  // _UID: Unique ID
            }

            Device (C007)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x07)  // _UID: Unique ID
            }

            Device (C008)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x08)  // _UID: Unique ID
            }

            Device (C009)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x09)  // _UID: Unique ID
            }

            Device (C00A)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0A)  // _UID: Unique ID
            }

            Device (C00B)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0B)  // _UID: Unique ID
            }

            Device (C00C)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0C)  // _UID: Unique ID
            }

            Device (C00D)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0D)  // _UID: Unique ID
            }

            Device (C00E)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0E)  // _UID: Unique ID
            }

            Device (C00F)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0F)  // _UID: Unique ID
            }

            Device (C010)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x10)  // _UID: Unique ID
            }

            Device (C011)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x11)  // _UID: Unique ID
            }

            Device (C012)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x12)  // _UID: Unique ID
            }

            Device (C013)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x13)  // _UID: Unique ID
            }

            Device (C014)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x14)  // _UID: Unique ID
            }

            Device (C015)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x15)  // _UID: Unique ID
            }

            Device (C016)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x16)  // _UID: Unique ID
            }

            Device (C017)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x17)  // _UID: Unique ID
            }
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "CPMMSOSC", 0x00000001)
{
    External (_SB_.M625, MethodObj)    // 2 Arguments
    External (DDEP, IntObj)
    External (DIMS, IntObj)
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M047, IntObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M32C, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (M652, FieldUnitObj)

    Scope (\_SB)
    {
        Name (M630, 0x5555)
        Name (U4PC, 0xFF)
        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            Name (MSDB, Zero)
            CreateDWordField (Arg0, Zero, UID0)
            CreateDWordField (Arg3, Zero, CDW1)
            If ((Arg2 >= 0x02))
            {
                CreateDWordField (Arg3, 0x04, CDW2)
            }

            If ((Arg2 >= 0x03))
            {
                CreateDWordField (Arg3, 0x08, CDW3)
            }

            If ((Arg2 == One))
            {
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Start  CDW1 = 0x%X\n", UID0, CDW1, Zero, Zero, Zero, Zero)
            }
            ElseIf ((Arg2 == 0x02))
            {
                Local2 = CDW2 /* \_SB_._OSC.CDW2 */
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Start  CDW1 = 0x%X CDW2 = 0x%X\n", UID0, CDW1, CDW2, Zero, Zero, Zero)
            }
            Else
            {
                Local3 = CDW3 /* \_SB_._OSC.CDW3 */
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Start  CDW1 = 0x%X CDW2 = 0x%X CDW3 = 0x%X\n", UID0, CDW1, CDW2, CDW3, Zero, Zero)
            }

            If ((Arg0 == ToUUID ("23a0d13a-26ab-486c-9c5f-0ffa525a575a")))
            {
                If ((Arg1 == One))
                {
                    Local5 = Zero
                    If ((\_SB.U4PC != 0xFF))
                    {
                        Local5 = (\_SB.U4PC & 0x0F)
                        Local3 &= 0xFFFFFFF0
                        Local3 |= Local5
                    }
                    ElseIf ((CondRefOf (\_SB.M625) && (M620 != Zero)))
                    {
                        If ((M049 (M620, 0x10) != Zero))
                        {
                            If ((\_SB.M630 == 0x5555))
                            {
                                Local1 = \_SB.M625 (0x0180, 0x03E8)
                                \_SB.M630 = Local1
                            }
                            Else
                            {
                                Local1 = \_SB.M630
                            }

                            If (((Local1 & 0xFF) == Zero))
                            {
                                Local5 = ((Local1 >> 0x10) & 0x0F)
                                Local3 &= 0xFFFFFFF0
                                Local3 |= Local5
                            }
                        }
                    }

                    If ((Local5 == Zero))
                    {
                        CDW1 |= 0x04
                    }
                    ElseIf ((Local3 != CDW3))
                    {
                        CDW3 = Local3
                        CDW1 |= 0x10
                    }
                }
                Else
                {
                    CDW1 |= 0x08
                }
            }
            ElseIf ((Arg0 == ToUUID ("0811b06e-4a27-44f9-8d60-3cbbc22e7b48") /* Platform-wide Capabilities */))
            {
                If ((Arg1 == One))
                {
                    If ((CondRefOf (\DIMS) && CondRefOf (\DDEP)))
                    {
                        If (((\DDEP == One) && ((CDW2 & 0x00040000) == 0x00040000)))
                        {
                            M460 ("    Disable USB4 ACPI _DEP\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Local1 = \DIMS /* External reference */
                            M232 (Local1, 0x55, Zero)
                            \DDEP = Zero
                        }
                    }

                    Local2 |= 0x04
                    If ((MSDB == One))
                    {
                        Local2 &= 0xFFFFFF7F
                    }

                    If ((U4PC != 0xFF))
                    {
                        Local2 |= 0x00040000
                    }
                    ElseIf ((M620 != Zero))
                    {
                        If ((M049 (M620, 0x10) != Zero))
                        {
                            If ((M049 (M620, 0x45) == Zero))
                            {
                                Local2 &= 0xFFFBFFFF
                            }
                        }
                        Else
                        {
                            Local2 &= 0xFFFBFFFF
                        }
                    }
                    Else
                    {
                        Local2 &= 0xFFFBFFFF
                    }

                    If ((Local2 != CDW2))
                    {
                        CDW2 = Local2
                        CDW1 |= 0x10
                    }

                    If ((((CDW1 & One) != One) && CondRefOf (\_SB.M625)))
                    {
                        If ((M620 != Zero))
                        {
                            If ((M049 (M620, 0x10) != Zero))
                            {
                                Local4 = M049 (M620, 0x43)
                                Local1 = \_SB.M625 ((0x0102 + (Local4 << 0x10)), 0x03E8)
                            }
                        }
                    }
                }
                Else
                {
                    CDW1 |= 0x08
                }
            }
            Else
            {
                CDW1 |= 0x04
            }

            If ((Arg2 == One))
            {
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Return CDW1 = 0x%X\n", UID0, CDW1, Zero, Zero, Zero, Zero)
            }
            ElseIf ((Arg2 == 0x02))
            {
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Return CDW1 = 0x%X CDW2 = 0x%X\n", UID0, CDW1, CDW2, Zero, Zero, Zero)
            }
            Else
            {
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Return CDW1 = 0x%X CDW2 = 0x%X CDW3 = 0x%X\n", UID0, CDW1, CDW2, CDW3, Zero, Zero)
            }

            Return (Arg3)
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "AOD     ", 0x00000001)
{
    External (OBID, PkgObj)
    External (OBIE, PkgObj)
    External (OBIT, PkgObj)

    Name (OBID, Package (0xC1)
    {
        0x40, 
        0x00040001, 
        0x00040002, 
        0x00020027, 
        0x00020026, 
        0x00020001, 
        0x00020002, 
        0x00020006, 
        0x00020005, 
        0x00020009, 
        0x00020010, 
        0x0002000B, 
        0x00020015, 
        0x0002000F, 
        0x0002000E, 
        0x0002000D, 
        0x00020012, 
        0x00020011, 
        0x00020017, 
        0x00020016, 
        0x00020018, 
        0x00020019, 
        0x0002001B, 
        0x0002001A, 
        0x0002001C, 
        0x0002001D, 
        0x0002001F, 
        0x0002001E, 
        0x0002002D, 
        0x00020007, 
        0x00020023, 
        0x00020024, 
        0x00020025, 
        0x00020036, 
        0x00020033, 
        0x00020035, 
        0x00030001, 
        0x00020031, 
        0x00020032, 
        0x00020034, 
        0x00020030, 
        0x00020038, 
        0x0002003A, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        One, 
        Zero, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        Zero, 
        One, 
        One, 
        Zero, 
        One, 
        Zero, 
        Zero, 
        One, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        "Command Buffer Start", 
        "Command Buffer End", 
        "Software Downcore Config", 
        "Set SMTEn", 
        "Set Mem Clock", 
        "Set Tcl", 
        "Set Trp", 
        "Set Tras", 
        "Set Trc", 
        "Set Twr", 
        "Set Trfc2", 
        "Set Trtp", 
        "Set TrrdL", 
        "Set TrrdS", 
        "Set Tfaw", 
        "Set TwtrL", 
        "Set TwtrS", 
        "Set TrdrdScL", 
        "Set TrdrdSc", 
        "Set TrdrdSd", 
        "Set TrdrdDd", 
        "Set TwrwrScL", 
        "Set TwrwrSc", 
        "Set TwrwrSd", 
        "Set TwrwrDd", 
        "Set Twrrd", 
        "Set Trdwr", 
        "Set CadBusAddrCmdDrvStren", 
        "Set ProcODT", 
        "Set RttWr", 
        "Set RttPark", 
        "Set PowerDwonEn", 
        "Set CCLK Fmax", 
        "Set FCLK OC Mode", 
        "Set FCLK Frequency", 
        "Set VDDIO", 
        "Set Interleave Mode", 
        "Set Interleave Size", 
        "Set SOC VID", 
        "Set CLDO_VDDP", 
        "Set CLDO VDDG", 
        "Set ECO Mode", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        ""
    })
    Name (OBIE, Package (0xC1)
    {
        0x40, 
        0x00010003, 
        0x00010004, 
        0x00010005, 
        0x00010006, 
        0x00010007, 
        0x00010008, 
        0x0005000A, 
        0x00050010, 
        0x0002003B, 
        0x0002003C, 
        0x0002003D, 
        0x00020041, 
        0x00020042, 
        0x0002003E, 
        0x0002003F, 
        0x00020040, 
        0x00050001, 
        0x00050002, 
        0x00050003, 
        0x00050004, 
        0x00030007, 
        0x00030003, 
        0x00030004, 
        0x00020043, 
        0x00030006, 
        0x0005000B, 
        0x00020044, 
        0x00020048, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        "Get OC Disable", 
        "Get OC Voltage Max", 
        "Get OC Frequency Max", 
        "Get GFX OC Voltage Max", 
        "Get GFX OC Frequency Max", 
        "Get Interlevaing Cap", 
        "Set Curve Optimizer", 
        "Set GFX Curve Optimizer", 
        "Set Trcd", 
        "Set Trfc1", 
        "Set TrfcSb", 
        "Set ProcDataDriveStrength", 
        "Set DRAMDataDriveStrength", 
        "Set RttNomWr", 
        "Set RttNomRd", 
        "Set RttParkDqs", 
        "Set PPT Limit", 
        "Set TDC Limit", 
        "Set EDC Limit", 
        "Set Scalar", 
        "Set DIMM VDDQ", 
        "Set VPP", 
        "Set APU VDDIO", 
        "Set LCLK Freq", 
        "Set VDD_MISC", 
        "Set VDDG IOD", 
        "Set UCLK DIV1", 
        "Reset Mem Para", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        ""
    })
    Name (OBIT, Package (0x45)
    {
        0x44, 
        Package (0x04)
        {
            0x0002003A, 
            Zero, 
            0x45, 
            Buffer (0x019C)
            {
                /* 0000 */  0x3A, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // :.......
                /* 0008 */  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00   // ........
            }
        }, 

        Package (0x04)
        {
            0x00020048, 
            Zero, 
            0x44, 
            Buffer (0x019C)
            {
                /* 0000 */  0x48, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // H.......
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00   // ........
            }
        }, 

        Package (0x04)
        {
            0x00020044, 
            Zero, 
            0x43, 
            Buffer (0x019C)
            {
                /* 0000 */  0x44, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // D.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0005000B, 
            One, 
            0x42, 
            Buffer (0x14)
            {
                /* 0000 */  0x0B, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x8A, 0x02, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  // ....r...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020038, 
            One, 
            0x41, 
            Buffer (0x14)
            {
                /* 0000 */  0x38, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                /* 0008 */  0x8A, 0x02, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  // ....r...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00030006, 
            One, 
            0x40, 
            Buffer (0x14)
            {
                /* 0000 */  0x06, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x4C, 0x04, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  // L...r...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020043, 
            One, 
            0x3F, 
            Buffer (0x14)
            {
                /* 0000 */  0x43, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // C.......
                /* 0008 */  0x05, 0x04, 0x00, 0x00, 0xC4, 0x09, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020030, 
            One, 
            0x3E, 
            Buffer (0x14)
            {
                /* 0000 */  0x30, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 0.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x14, 0x05, 0x00, 0x00,  // ........
                /* 0010 */  0x05, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020034, 
            One, 
            0x3D, 
            Buffer (0x14)
            {
                /* 0000 */  0x34, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 4.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xD3, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020032, 
            One, 
            0x3C, 
            Buffer (0x14)
            {
                /* 0000 */  0x32, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 2.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020031, 
            Zero, 
            0x3B, 
            Buffer (0x019C)
            {
                /* 0000 */  0x31, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 1.......
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            }
        }, 

        Package (0x04)
        {
            0x00030004, 
            One, 
            0x3A, 
            Buffer (0x14)
            {
                /* 0000 */  0x04, 0x00, 0x03, 0x00, 0xE2, 0x04, 0x00, 0x00,  // ........
                /* 0008 */  0xBC, 0x02, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  // ....r...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00030003, 
            One, 
            0x39, 
            Buffer (0x14)
            {
                /* 0000 */  0x03, 0x00, 0x03, 0x00, 0x08, 0x07, 0x00, 0x00,  // ........
                /* 0008 */  0xDC, 0x05, 0x00, 0x00, 0x52, 0x08, 0x00, 0x00,  // ....R...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00030007, 
            One, 
            0x38, 
            Buffer (0x14)
            {
                /* 0000 */  0x07, 0x00, 0x03, 0x00, 0xE2, 0x04, 0x00, 0x00,  // ........
                /* 0008 */  0x20, 0x03, 0x00, 0x00, 0x96, 0x05, 0x00, 0x00,  //  .......
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00030001, 
            One, 
            0x37, 
            Buffer (0x14)
            {
                /* 0000 */  0x01, 0x00, 0x03, 0x00, 0xE2, 0x04, 0x00, 0x00,  // ........
                /* 0008 */  0x20, 0x03, 0x00, 0x00, 0x96, 0x05, 0x00, 0x00,  //  .......
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020035, 
            Zero, 
            0x36, 
            Buffer (0x019C)
            {
                /* 0000 */  0x35, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 5.......
                /* 0008 */  0x34, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,  // 4...d...
                /* 0010 */  0xC8, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00,  // ........
                /* 0018 */  0xF4, 0x01, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00,  // .... ...
                /* 0020 */  0xA5, 0x03, 0x00, 0x00, 0x4C, 0x04, 0x00, 0x00,  // ....L...
                /* 0028 */  0x60, 0x04, 0x00, 0x00, 0x77, 0x04, 0x00, 0x00,  // `...w...
                /* 0030 */  0xB0, 0x04, 0x00, 0x00, 0xE2, 0x04, 0x00, 0x00,  // ........
                /* 0038 */  0xE9, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,  // ........
                /* 0040 */  0x14, 0x05, 0x00, 0x00, 0x28, 0x05, 0x00, 0x00,  // ....(...
                /* 0048 */  0x35, 0x05, 0x00, 0x00, 0x5B, 0x05, 0x00, 0x00,  // 5...[...
                /* 0050 */  0x78, 0x05, 0x00, 0x00, 0xA0, 0x05, 0x00, 0x00,  // x.......
                /* 0058 */  0xBB, 0x05, 0x00, 0x00, 0xCD, 0x05, 0x00, 0x00,  // ........
                /* 0060 */  0xDC, 0x05, 0x00, 0x00, 0x18, 0x06, 0x00, 0x00,  // ........
                /* 0068 */  0x40, 0x06, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  // @...r...
                /* 0070 */  0x90, 0x06, 0x00, 0x00, 0xC5, 0x06, 0x00, 0x00,  // ........
                /* 0078 */  0xD6, 0x06, 0x00, 0x00, 0xE0, 0x06, 0x00, 0x00,  // ........
                /* 0080 */  0x08, 0x07, 0x00, 0x00, 0xD0, 0x07, 0x00, 0x00,  // ........
                /* 0088 */  0xF1, 0x07, 0x00, 0x00, 0x13, 0x08, 0x00, 0x00,  // ........
                /* 0090 */  0x34, 0x08, 0x00, 0x00, 0x55, 0x08, 0x00, 0x00,  // 4...U...
                /* 0098 */  0x77, 0x08, 0x00, 0x00, 0x98, 0x08, 0x00, 0x00,  // w.......
                /* 00A0 */  0xB9, 0x08, 0x00, 0x00, 0xDB, 0x08, 0x00, 0x00,  // ........
                /* 00A8 */  0x60, 0x09, 0x00, 0x00, 0x81, 0x09, 0x00, 0x00,  // `.......
                /* 00B0 */  0xA3, 0x09, 0x00, 0x00, 0xC4, 0x09, 0x00, 0x00,  // ........
                /* 00B8 */  0xF6, 0x09, 0x00, 0x00, 0x28, 0x0A, 0x00, 0x00,  // ....(...
                /* 00C0 */  0x8C, 0x0A, 0x00, 0x00, 0xBE, 0x0A, 0x00, 0x00,  // ........
                /* 00C8 */  0xF0, 0x0A, 0x00, 0x00, 0x22, 0x0B, 0x00, 0x00,  // ...."...
                /* 00D0 */  0x54, 0x0B, 0x00, 0x00, 0x86, 0x0B, 0x00, 0x00,  // T.......
                /* 00D8 */  0xB8, 0x0B, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020033, 
            Zero, 
            0x35, 
            Buffer (0x019C)
            {
                /* 0000 */  0x33, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 3.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020036, 
            One, 
            0x34, 
            Buffer (0x14)
            {
                /* 0000 */  0x36, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 6.......
                /* 0008 */  0x5C, 0x12, 0x00, 0x00, 0x0C, 0x17, 0x00, 0x00,  // \.......
                /* 0010 */  0x19, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050004, 
            One, 
            0x33, 
            Buffer (0x14)
            {
                /* 0000 */  0x04, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00,  // ........
                /* 0010 */  0x64, 0x00, 0x00, 0x00                           // d...
            }
        }, 

        Package (0x04)
        {
            0x00050003, 
            One, 
            0x32, 
            Buffer (0x14)
            {
                /* 0000 */  0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x40, 0x42, 0x0F, 0x00,  // ....@B..
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050002, 
            One, 
            0x31, 
            Buffer (0x14)
            {
                /* 0000 */  0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x40, 0x42, 0x0F, 0x00,  // ....@B..
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050001, 
            One, 
            0x30, 
            Buffer (0x14)
            {
                /* 0000 */  0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x40, 0x42, 0x0F, 0x00,  // ....@B..
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020025, 
            Zero, 
            0x2F, 
            Buffer (0x019C)
            {
                /* 0000 */  0x25, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // %.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020040, 
            One, 
            0x2E, 
            Buffer (0x14)
            {
                /* 0000 */  0x40, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00,  // @.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020024, 
            One, 
            0x2D, 
            Buffer (0x14)
            {
                /* 0000 */  0x24, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00,  // $.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020023, 
            One, 
            0x2C, 
            Buffer (0x14)
            {
                /* 0000 */  0x23, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00,  // #.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003F, 
            One, 
            0x2B, 
            Buffer (0x14)
            {
                /* 0000 */  0x3F, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00,  // ?.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003E, 
            One, 
            0x2A, 
            Buffer (0x14)
            {
                /* 0000 */  0x3E, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00,  // >.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020042, 
            Zero, 
            0x29, 
            Buffer (0x019C)
            {
                /* 0000 */  0x42, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // B.......
                /* 0008 */  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00   // ........
            }
        }, 

        Package (0x04)
        {
            0x00020007, 
            Zero, 
            0x28, 
            Buffer (0x019C)
            {
                /* 0000 */  0x07, 0x00, 0x02, 0x00, 0x0E, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                /* 0020 */  0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                /* 0028 */  0x07, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,  // ........
                /* 0030 */  0x0D, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00,  // ........
                /* 0038 */  0x0F, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00,  // ........
                /* 0040 */  0x1D, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,  // ........
                /* 0048 */  0x1F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00,  // ....<...
                /* 0050 */  0x3D, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00,  // =...>...
                /* 0058 */  0x3F, 0x00, 0x00, 0x00                           // ?...
            }
        }, 

        Package (0x04)
        {
            0x00020041, 
            Zero, 
            0x27, 
            Buffer (0x019C)
            {
                /* 0000 */  0x41, 0x00, 0x02, 0x00, 0x1E, 0x00, 0x00, 0x00,  // A.......
                /* 0008 */  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x06, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,  // ........
                /* 0020 */  0x0E, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00,  // ........
                /* 0028 */  0x1E, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002002D, 
            Zero, 
            0x26, 
            Buffer (0x019C)
            {
                /* 0000 */  0x2D, 0x00, 0x02, 0x00, 0x1E, 0x00, 0x00, 0x00,  // -.......
                /* 0008 */  0x04, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x28, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00,  // (...<...
                /* 0018 */  0x78, 0x00, 0x00, 0x00                           // x...
            }
        }, 

        Package (0x04)
        {
            0x0002001E, 
            One, 
            0x25, 
            Buffer (0x14)
            {
                /* 0000 */  0x1E, 0x00, 0x02, 0x00, 0x13, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001F, 
            One, 
            0x24, 
            Buffer (0x14)
            {
                /* 0000 */  0x1F, 0x00, 0x02, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001D, 
            One, 
            0x23, 
            Buffer (0x14)
            {
                /* 0000 */  0x1D, 0x00, 0x02, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001C, 
            One, 
            0x22, 
            Buffer (0x14)
            {
                /* 0000 */  0x1C, 0x00, 0x02, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001A, 
            One, 
            0x21, 
            Buffer (0x14)
            {
                /* 0000 */  0x1A, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001B, 
            One, 
            0x20, 
            Buffer (0x14)
            {
                /* 0000 */  0x1B, 0x00, 0x02, 0x00, 0x15, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00,  // ....?...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020019, 
            One, 
            0x1F, 
            Buffer (0x14)
            {
                /* 0000 */  0x19, 0x00, 0x02, 0x00, 0x0A, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020018, 
            One, 
            0x1E, 
            Buffer (0x14)
            {
                /* 0000 */  0x18, 0x00, 0x02, 0x00, 0x0A, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020016, 
            One, 
            0x1D, 
            Buffer (0x14)
            {
                /* 0000 */  0x16, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020017, 
            One, 
            0x1C, 
            Buffer (0x14)
            {
                /* 0000 */  0x17, 0x00, 0x02, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020011, 
            One, 
            0x1B, 
            Buffer (0x14)
            {
                /* 0000 */  0x11, 0x00, 0x02, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020012, 
            One, 
            0x1A, 
            Buffer (0x14)
            {
                /* 0000 */  0x12, 0x00, 0x02, 0x00, 0x1C, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x08, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,  // ....0...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000D, 
            One, 
            0x19, 
            Buffer (0x14)
            {
                /* 0000 */  0x0D, 0x00, 0x02, 0x00, 0x20, 0x00, 0x00, 0x00,  // .... ...
                /* 0008 */  0x14, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,  // ....P...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000E, 
            One, 
            0x18, 
            Buffer (0x14)
            {
                /* 0000 */  0x0E, 0x00, 0x02, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x04, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000F, 
            One, 
            0x17, 
            Buffer (0x14)
            {
                /* 0000 */  0x0F, 0x00, 0x02, 0x00, 0x0E, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x04, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,  // .... ...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020015, 
            One, 
            0x16, 
            Buffer (0x14)
            {
                /* 0000 */  0x15, 0x00, 0x02, 0x00, 0x15, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x05, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003D, 
            One, 
            0x15, 
            Buffer (0x14)
            {
                /* 0000 */  0x3D, 0x00, 0x02, 0x00, 0x6C, 0x01, 0x00, 0x00,  // =...l...
                /* 0008 */  0x32, 0x00, 0x00, 0x00, 0xFF, 0x07, 0x00, 0x00,  // 2.......
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000B, 
            One, 
            0x14, 
            Buffer (0x14)
            {
                /* 0000 */  0x0B, 0x00, 0x02, 0x00, 0xBF, 0x01, 0x00, 0x00,  // ........
                /* 0008 */  0x32, 0x00, 0x00, 0x00, 0xFF, 0x0F, 0x00, 0x00,  // 2.......
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003C, 
            One, 
            0x13, 
            Buffer (0x14)
            {
                /* 0000 */  0x3C, 0x00, 0x02, 0x00, 0x38, 0x03, 0x00, 0x00,  // <...8...
                /* 0008 */  0x32, 0x00, 0x00, 0x00, 0xFF, 0x0F, 0x00, 0x00,  // 2.......
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020010, 
            One, 
            0x12, 
            Buffer (0x14)
            {
                /* 0000 */  0x10, 0x00, 0x02, 0x00, 0x54, 0x00, 0x00, 0x00,  // ....T...
                /* 0008 */  0x30, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,  // 0...`...
                /* 0010 */  0x06, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020009, 
            One, 
            0x11, 
            Buffer (0x14)
            {
                /* 0000 */  0x09, 0x00, 0x02, 0x00, 0x88, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x20, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,  //  .......
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020005, 
            One, 
            0x10, 
            Buffer (0x14)
            {
                /* 0000 */  0x05, 0x00, 0x02, 0x00, 0x4D, 0x00, 0x00, 0x00,  // ....M...
                /* 0008 */  0x1E, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00,  // ....~...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020006, 
            One, 
            0x0F, 
            Buffer (0x14)
            {
                /* 0000 */  0x06, 0x00, 0x02, 0x00, 0x28, 0x00, 0x00, 0x00,  // ....(...
                /* 0008 */  0x08, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00,  // ....>...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003B, 
            One, 
            0x0E, 
            Buffer (0x14)
            {
                /* 0000 */  0x3B, 0x00, 0x02, 0x00, 0x28, 0x00, 0x00, 0x00,  // ;...(...
                /* 0008 */  0x08, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00,  // ....>...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020002, 
            One, 
            0x0D, 
            Buffer (0x14)
            {
                /* 0000 */  0x02, 0x00, 0x02, 0x00, 0x28, 0x00, 0x00, 0x00,  // ....(...
                /* 0008 */  0x16, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00,  // ....>...
                /* 0010 */  0x02, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020001, 
            Zero, 
            0x0C, 
            Buffer (0x019C)
            {
                /* 0000 */  0x01, 0x00, 0x02, 0x00, 0xF0, 0x0A, 0x00, 0x00,  // ........
                /* 0008 */  0x2F, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00,  // /.......
                /* 0010 */  0xB0, 0x04, 0x00, 0x00, 0x40, 0x06, 0x00, 0x00,  // ....@...
                /* 0018 */  0xA4, 0x06, 0x00, 0x00, 0x08, 0x07, 0x00, 0x00,  // ........
                /* 0020 */  0x6C, 0x07, 0x00, 0x00, 0xD0, 0x07, 0x00, 0x00,  // l.......
                /* 0028 */  0x34, 0x08, 0x00, 0x00, 0x98, 0x08, 0x00, 0x00,  // 4.......
                /* 0030 */  0xFC, 0x08, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00,  // ....`...
                /* 0038 */  0xC4, 0x09, 0x00, 0x00, 0x28, 0x0A, 0x00, 0x00,  // ....(...
                /* 0040 */  0x8C, 0x0A, 0x00, 0x00, 0xF0, 0x0A, 0x00, 0x00,  // ........
                /* 0048 */  0x54, 0x0B, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00,  // T.......
                /* 0050 */  0x1C, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00,  // ........
                /* 0058 */  0xE4, 0x0C, 0x00, 0x00, 0x48, 0x0D, 0x00, 0x00,  // ....H...
                /* 0060 */  0xAC, 0x0D, 0x00, 0x00, 0x10, 0x0E, 0x00, 0x00,  // ........
                /* 0068 */  0x74, 0x0E, 0x00, 0x00, 0xD8, 0x0E, 0x00, 0x00,  // t.......
                /* 0070 */  0x3C, 0x0F, 0x00, 0x00, 0xA0, 0x0F, 0x00, 0x00,  // <.......
                /* 0078 */  0x04, 0x10, 0x00, 0x00, 0x68, 0x10, 0x00, 0x00,  // ....h...
                /* 0080 */  0xCC, 0x10, 0x00, 0x00, 0x30, 0x11, 0x00, 0x00,  // ....0...
                /* 0088 */  0x94, 0x11, 0x00, 0x00, 0xF8, 0x11, 0x00, 0x00,  // ........
                /* 0090 */  0x5C, 0x12, 0x00, 0x00, 0xC0, 0x12, 0x00, 0x00,  // \.......
                /* 0098 */  0x24, 0x13, 0x00, 0x00, 0x88, 0x13, 0x00, 0x00,  // $.......
                /* 00A0 */  0xEC, 0x13, 0x00, 0x00, 0x50, 0x14, 0x00, 0x00,  // ....P...
                /* 00A8 */  0xB4, 0x14, 0x00, 0x00, 0x18, 0x15, 0x00, 0x00,  // ........
                /* 00B0 */  0x7C, 0x15, 0x00, 0x00, 0xE0, 0x15, 0x00, 0x00,  // |.......
                /* 00B8 */  0x44, 0x16, 0x00, 0x00, 0xA8, 0x16, 0x00, 0x00,  // D.......
                /* 00C0 */  0x0C, 0x17, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00   // ....p...
            }
        }, 

        Package (0x04)
        {
            0x00020026, 
            Zero, 
            0x0B, 
            Buffer (0x019C)
            {
                /* 0000 */  0x26, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // &.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050010, 
            One, 
            0x0A, 
            Buffer (0x14)
            {
                /* 0000 */  0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0005000A, 
            One, 
            0x09, 
            Buffer (0x14)
            {
                /* 0000 */  0x0A, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00,  // ....2...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020027, 
            One, 
            0x08, 
            Buffer (0x14)
            {
                /* 0000 */  0x27, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // '.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010008, 
            One, 
            0x07, 
            Buffer (0x14)
            {
                /* 0000 */  0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010007, 
            One, 
            0x06, 
            Buffer (0x14)
            {
                /* 0000 */  0x07, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010006, 
            One, 
            0x05, 
            Buffer (0x14)
            {
                /* 0000 */  0x06, 0x00, 0x01, 0x00, 0xF0, 0x0A, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010005, 
            One, 
            0x04, 
            Buffer (0x14)
            {
                /* 0000 */  0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010004, 
            One, 
            0x03, 
            Buffer (0x14)
            {
                /* 0000 */  0x04, 0x00, 0x01, 0x00, 0xF0, 0x0A, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010003, 
            One, 
            0x02, 
            Buffer (0x14)
            {
                /* 0000 */  0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }
    })
    Scope (\)
    {
        Name (GF01, Zero)
        Name (ASMI, 0x00B2)
        Name (ISMI, 0xB9)
        Name (AODV, 0x06)
        OperationRegion (AODE, SystemMemory, 0x7637D018, 0x24AC)
        Field (AODE, AnyAcc, NoLock, Preserve)
        {
            OUTB,   1568, 
            AQVS,   32, 
            SCMI,   32, 
            SCMD,   32, 
            DSPD,   68128, 
            RESV,   96, 
            RMPD,   1120, 
            WCNS,   4096
        }

        Device (AOD)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AOD")  // _UID: Unique ID
            Method (AM01, 0, NotSerialized)
            {
                AODV = AQVS /* \AQVS */
                Return (\AODV)
            }

            Method (AM02, 0, NotSerialized)
            {
                If ((GF01 == Zero))
                {
                    GF01 = One
                }

                Return (Zero)
            }

            Method (AM03, 0, NotSerialized)
            {
                Return (\OBID) /* External reference */
            }

            Method (AM04, 1, NotSerialized)
            {
                Name (LODT, Buffer (0x019C)
                {
                     0x00                                             // .
                })
                Name (TEMP, Buffer (0x0200)
                {
                     0x00                                             // .
                })
                Local0 = Arg0
                Local1 = DerefOf (\OBIT [Zero])
                Local2 = One
                While ((Local2 <= Local1))
                {
                    Local3 = DerefOf (DerefOf (\OBIT [Local2]) [Zero])
                    Local4 = DerefOf (DerefOf (\OBIT [Local2]) [One])
                    If (((Local3 == Local0) && (Local4 == Zero)))
                    {
                        LODT = DerefOf (DerefOf (\OBIT [Local2]) [0x03])
                        TEMP = WCNS /* \WCNS */
                        Local5 = DerefOf (DerefOf (\OBIT [Local2]) [0x02])
                        Local5 *= 0x04
                        CreateDWordField (TEMP, Local5, TEM1)
                        CreateDWordField (LODT, 0x04, CRUT)
                        CRUT = TEM1 /* \AOD_.AM04.TEM1 */
                        Break
                    }

                    Local2++
                }

                Return (LODT) /* \AOD_.AM04.LODT */
            }

            OperationRegion (PSMI, SystemIO, ASMI, 0x02)
            Field (PSMI, AnyAcc, NoLock, Preserve)
            {
                ASMO,   8
            }

            Mutex (SMLO, 0x00)
            Method (AM05, 1, NotSerialized)
            {
                Name (LODT, Buffer (0xC8)
                {
                     0x00                                             // .
                })
                CreateDWordField (Arg0, Zero, DCMI)
                CreateDWordField (Arg0, 0x04, DCMD)
                SCMI = DCMI /* \AOD_.AM05.DCMI */
                SCMD = DCMD /* \AOD_.AM05.DCMD */
                ASMO = ISMI /* \ISMI */
                LODT = OUTB /* \OUTB */
                Return (LODT) /* \AOD_.AM05.LODT */
            }

            Method (AM06, 1, NotSerialized)
            {
                Name (LODT, Buffer (0x14)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                Name (TEMP, Buffer (0x0200)
                {
                     0x00                                             // .
                })
                Local0 = Arg0
                Local1 = DerefOf (\OBIT [Zero])
                Local2 = One
                While ((Local2 <= Local1))
                {
                    Local3 = DerefOf (DerefOf (\OBIT [Local2]) [Zero])
                    Local4 = DerefOf (DerefOf (\OBIT [Local2]) [One])
                    If (((Local3 == Local0) && (Local4 == One)))
                    {
                        LODT = DerefOf (DerefOf (\OBIT [Local2]) [0x03])
                        TEMP = WCNS /* \WCNS */
                        Local5 = DerefOf (DerefOf (\OBIT [Local2]) [0x02])
                        Local5 *= 0x04
                        CreateDWordField (TEMP, Local5, TEM1)
                        CreateDWordField (LODT, 0x04, CRUT)
                        CRUT = TEM1 /* \AOD_.AM06.TEM1 */
                        Break
                    }

                    Local2++
                }

                Return (LODT) /* \AOD_.AM06.LODT */
            }

            Method (AM07, 1, NotSerialized)
            {
                Name (BSPD, Buffer (0x0214){})
                If ((Arg0 > 0x0F))
                {
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                If ((Arg0 == Zero))
                {
                    BSPD = DSPD /* \DSPD */
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                Local0 = Zero
                Local0 += (Arg0 * 0x0214)
                Local1 = 0x0214
                Local2 = Zero
                While (Local1)
                {
                    BSPD [Local2] = DerefOf (DSPD [Local0])
                    Local1--
                    Local0++
                    Local2++
                }

                Return (BSPD) /* \AOD_.AM07.BSPD */
            }

            Method (AM08, 0, NotSerialized)
            {
                Return (\OBIE) /* External reference */
            }

            Method (AM09, 0, NotSerialized)
            {
                Name (TEMP, Buffer (0x8C){})
                TEMP = RMPD /* \RMPD */
                Return (TEMP) /* \AOD_.AM09.TEMP */
            }

            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x6A, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // j.......
                /* 0008 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // AA..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x00   // ..).BA..
            })
            Method (WMAA, 3, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((((Arg1 != One) || (Arg1 != 0x02)) || 
                        (Arg1 != 0x06)))
                    {
                        CreateDWordField (Arg2, Zero, WIID)
                    }

                    If ((Arg1 == One))
                    {
                        Return (AM01 ())
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Return (AM02 ())
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Return (AM03 ())
                    }
                    ElseIf ((Arg1 == 0x04))
                    {
                        Return (AM04 (WIID))
                    }
                    ElseIf ((Arg1 == 0x05))
                    {
                        Return (AM05 (Arg2))
                    }
                    ElseIf ((Arg1 == 0x06))
                    {
                        Return (AM06 (WIID))
                    }
                    ElseIf ((Arg1 == 0x07))
                    {
                        Return (AM07 (WIID))
                    }
                    ElseIf ((Arg1 == 0x08))
                    {
                        Return (AM08 ())
                    }
                    ElseIf ((Arg1 == 0x09))
                    {
                        Return (AM09 ())
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (Zero)
            }

            Name (WQBA, Buffer (0x0C80)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x70, 0x0C, 0x00, 0x00, 0x6C, 0x45, 0x00, 0x00,  // p...lE..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xD4, 0xA1, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x11, 0x10, 0x22, 0x21, 0x30, 0x34, 0x32,  // ..."!042
                /* 0028 */  0x0B, 0x03, 0x63, 0x04, 0x8A, 0x0B, 0x21, 0x07,  // ..c...!.
                /* 0030 */  0x10, 0x12, 0x07, 0x85, 0x12, 0x02, 0xA1, 0xFE,  // ........
                /* 0038 */  0x04, 0xF2, 0x2B, 0x00, 0xE1, 0x16, 0xCA, 0x14,  // ..+.....
                /* 0040 */  0x60, 0x50, 0x80, 0x53, 0x04, 0x11, 0xF4, 0x2A,  // `P.S...*
                /* 0048 */  0xC0, 0xA6, 0x00, 0x93, 0x02, 0x2C, 0x0A, 0xD0,  // .....,..
                /* 0050 */  0x2E, 0xC0, 0xB2, 0x00, 0xDD, 0x02, 0xA4, 0xC3,  // ........
                /* 0058 */  0x12, 0x91, 0xE0, 0x28, 0x31, 0xE0, 0x28, 0x9D,  // ...(1.(.
                /* 0060 */  0xD8, 0xC2, 0x0D, 0x1B, 0xBC, 0x50, 0x14, 0xCD,  // .....P..
                /* 0068 */  0x20, 0x4A, 0x82, 0xCA, 0x05, 0xF8, 0x46, 0x10,  //  J....F.
                /* 0070 */  0x78, 0xB9, 0x02, 0x24, 0x4F, 0x40, 0x9A, 0x05,  // x..$O@..
                /* 0078 */  0x18, 0x16, 0x60, 0x5D, 0x80, 0xEC, 0x21, 0x50,  // ..`]..!P
                /* 0080 */  0xA9, 0x43, 0x40, 0xC9, 0x19, 0x02, 0x6A, 0x00,  // .C@...j.
                /* 0088 */  0xAD, 0x4E, 0x40, 0xF8, 0x95, 0x4E, 0x09, 0x49,  // .N@..N.I
                /* 0090 */  0x10, 0xCE, 0x58, 0xC5, 0xE3, 0x6B, 0x16, 0x4D,  // ..X..k.M
                /* 0098 */  0xCF, 0x49, 0xCE, 0x31, 0xE4, 0x78, 0x5C, 0xE8,  // .I.1.x\.
                /* 00A0 */  0x41, 0xF0, 0x50, 0x1A, 0x40, 0x98, 0xFC, 0x21,  // A.P.@..!
                /* 00A8 */  0x2B, 0x06, 0x0C, 0x4A, 0xC2, 0x58, 0xA8, 0x8B,  // +..J.X..
                /* 00B0 */  0x51, 0xA3, 0x46, 0xCA, 0x06, 0x64, 0x88, 0xD2,  // Q.F..d..
                /* 00B8 */  0x46, 0x8D, 0x1E, 0xD0, 0xF9, 0x1D, 0xC9, 0xD9,  // F.......
                /* 00C0 */  0x1D, 0xDD, 0x91, 0x24, 0x30, 0xEA, 0x31, 0x1D,  // ...$0.1.
                /* 00C8 */  0x63, 0x61, 0x33, 0x12, 0x6A, 0x8C, 0xE6, 0xA0,  // ca3.j...
                /* 00D0 */  0x48, 0xB8, 0x41, 0xA3, 0x25, 0xC2, 0x6A, 0x5C,  // H.A.%.j\
                /* 00D8 */  0xB1, 0xCF, 0xCC, 0xC2, 0x87, 0x25, 0x8C, 0x23,  // .....%.#
                /* 00E0 */  0x38, 0xB0, 0x83, 0xB5, 0x68, 0x18, 0xA1, 0x15,  // 8...h...
                /* 00E8 */  0x04, 0xA7, 0x41, 0x1C, 0x45, 0x94, 0x30, 0x0C,  // ..A.E.0.
                /* 00F0 */  0xCF, 0x98, 0x81, 0x8E, 0x92, 0x21, 0x85, 0x09,  // .....!..
                /* 00F8 */  0x7A, 0x02, 0x41, 0x4E, 0x9E, 0x61, 0x19, 0xE2,  // z.AN.a..
                /* 0100 */  0x0C, 0x38, 0x56, 0x8C, 0x50, 0x21, 0x31, 0x03,  // .8V.P!1.
                /* 0108 */  0x09, 0xFE, 0xFF, 0x3F, 0x81, 0xAE, 0x31, 0xE4,  // ...?..1.
                /* 0110 */  0x19, 0x88, 0xDC, 0x03, 0x4E, 0x20, 0x48, 0xF4,  // ....N H.
                /* 0118 */  0x28, 0xC1, 0x8D, 0x6B, 0x54, 0x36, 0xA6, 0xB3,  // (..kT6..
                /* 0120 */  0xC1, 0x0D, 0xCC, 0x04, 0x71, 0x0E, 0x0F, 0x23,  // ....q..#
                /* 0128 */  0x03, 0x42, 0x13, 0x88, 0x1F, 0x3B, 0x7C, 0x02,  // .B...;|.
                /* 0130 */  0xBB, 0x3F, 0x0E, 0x48, 0x21, 0x82, 0x2E, 0x04,  // .?.H!...
                /* 0138 */  0x67, 0x5A, 0xA3, 0x00, 0x6B, 0x67, 0x07, 0xD9,  // gZ..kg..
                /* 0140 */  0x82, 0xD0, 0x59, 0x20, 0x56, 0x63, 0x28, 0x82,  // ..Y Vc(.
                /* 0148 */  0x88, 0x10, 0x34, 0x8A, 0xF1, 0x22, 0x84, 0x0A,  // ..4.."..
                /* 0150 */  0x11, 0x25, 0xEA, 0x39, 0x07, 0xA9, 0x4D, 0x80,  // .%.9..M.
                /* 0158 */  0x32, 0x10, 0xA1, 0x05, 0x33, 0x02, 0xB3, 0x7F,  // 2...3...
                /* 0160 */  0x06, 0x60, 0x16, 0x20, 0xFE, 0x08, 0x2C, 0xE1,  // .`. ..,.
                /* 0168 */  0x44, 0x20, 0x23, 0xA3, 0xA1, 0x87, 0x05, 0x9F,  // D #.....
                /* 0170 */  0x04, 0xD8, 0x01, 0xC1, 0xF3, 0x39, 0x35, 0x13,  // .....95.
                /* 0178 */  0x38, 0x30, 0x84, 0x78, 0x25, 0x40, 0xD4, 0xD1,  // 80.x%@..
                /* 0180 */  0x82, 0x12, 0x58, 0xCA, 0xD1, 0x80, 0xD8, 0x1E,  // ..X.....
                /* 0188 */  0x98, 0xEE, 0x01, 0x47, 0x78, 0xEE, 0xBE, 0x1C,  // ...Gx...
                /* 0190 */  0x9C, 0x9A, 0x7F, 0x1A, 0x9E, 0xE6, 0x43, 0x02,  // ......C.
                /* 0198 */  0x66, 0x88, 0x1E, 0xEB, 0x41, 0x04, 0x3C, 0x44,  // f...A.<D
                /* 01A0 */  0x76, 0x4A, 0x30, 0x20, 0xDE, 0xFB, 0xB5, 0x80,  // vJ0 ....
                /* 01A8 */  0x8C, 0xE0, 0x25, 0xC1, 0x80, 0x9E, 0xC4, 0x03,  // ..%.....
                /* 01B0 */  0x02, 0x58, 0x0E, 0x1A, 0x07, 0x7E, 0x42, 0x15,  // .X...~B.
                /* 01B8 */  0xDF, 0x01, 0xE8, 0x91, 0x80, 0xCD, 0x28, 0xBE,  // ......(.
                /* 01C0 */  0x09, 0xCA, 0x3A, 0x3E, 0xA0, 0xE7, 0x1C, 0xED,  // ..:>....
                /* 01C8 */  0xD9, 0xE1, 0x65, 0xA1, 0xD9, 0x2B, 0x06, 0x21,  // ..e..+.!
                /* 01D0 */  0x78, 0x0D, 0xF0, 0x4D, 0xC1, 0xA7, 0x11, 0x8B,  // x..M....
                /* 01D8 */  0x5A, 0x9D, 0x9C, 0xAC, 0xCA, 0x23, 0xA6, 0xE0,  // Z....#..
                /* 01E0 */  0x1E, 0x02, 0x97, 0x01, 0xA7, 0xA1, 0x7B, 0xBC,  // ......{.
                /* 01E8 */  0xE0, 0x50, 0x30, 0x5E, 0xFA, 0xFF, 0x1F, 0x2F,  // .P0^.../
                /* 01F0 */  0xB8, 0xE7, 0x75, 0xBC, 0x60, 0x39, 0x26, 0x3C,  // ..u.`9&<
                /* 01F8 */  0x6C, 0x54, 0x05, 0xA1, 0x41, 0x1C, 0x70, 0xF3,  // lT..A.p.
                /* 0200 */  0x03, 0x20, 0x57, 0x0B, 0x8F, 0x98, 0xCD, 0xE5,  // . W.....
                /* 0208 */  0xAC, 0xD8, 0x11, 0x85, 0x0F, 0x8F, 0x0F, 0xC3,  // ........
                /* 0210 */  0x23, 0x7E, 0x6F, 0x28, 0x16, 0x44, 0x02, 0x21,  // #~o(.D.!
                /* 0218 */  0x74, 0x66, 0x38, 0x72, 0xB0, 0x38, 0x3B, 0x41,  // tf8r.8;A
                /* 0220 */  0x88, 0xC0, 0xD2, 0x86, 0x8E, 0x1E, 0xB2, 0x47,  // .......G
                /* 0228 */  0xF5, 0x12, 0x63, 0x8C, 0x27, 0x02, 0xA3, 0x9E,  // ..c.'...
                /* 0230 */  0xD2, 0xD1, 0x83, 0x0F, 0xD0, 0xA3, 0x07, 0x7C,  // .......|
                /* 0238 */  0xFE, 0xFF, 0x47, 0x8F, 0x93, 0x34, 0x66, 0x89,  // ..G..4f.
                /* 0240 */  0x18, 0x3D, 0xFA, 0x1C, 0xE1, 0xE9, 0xBC, 0xFD,  // .=......
                /* 0248 */  0xF0, 0xA3, 0x48, 0x02, 0xC7, 0x87, 0xD0, 0xE8,  // ..H.....
                /* 0250 */  0xC1, 0x73, 0xFA, 0xF1, 0xE8, 0xC1, 0x3F, 0x46,  // .s....?F
                /* 0258 */  0x8F, 0x1E, 0x3C, 0x63, 0x38, 0x37, 0xDC, 0xD5,  // ..<c87..
                /* 0260 */  0xC6, 0x23, 0x07, 0xFB, 0x78, 0xF1, 0xF2, 0x8E,  // .#..x...
                /* 0268 */  0x5B, 0xA0, 0xF0, 0x39, 0x7B, 0x32, 0x80, 0xF7,  // [..9{2..
                /* 0270 */  0x20, 0xDC, 0x79, 0x0B, 0xB8, 0x8C, 0x80, 0xCB,  //  .y.....
                /* 0278 */  0x3D, 0x57, 0xA1, 0x04, 0x1E, 0xAD, 0x40, 0xFB,  // =W....@.
                /* 0280 */  0xFF, 0x3F, 0x5A, 0x01, 0x4C, 0xB8, 0x3F, 0xBC,  // .?Z.L.?.
                /* 0288 */  0x5A, 0x3D, 0x5A, 0x81, 0x3D, 0xE2, 0x73, 0x40,  // Z=Z.=.s@
                /* 0290 */  0x3F, 0x02, 0xC7, 0x86, 0x90, 0x93, 0xA3, 0x15,  // ?.......
                /* 0298 */  0xEA, 0x64, 0x84, 0x0B, 0x7A, 0xB0, 0x02, 0xBA,  // .d..z...
                /* 02A0 */  0x07, 0x0D, 0xDC, 0xF1, 0x00, 0xCE, 0xFF, 0xFF,  // ........
                /* 02A8 */  0x78, 0xC0, 0x07, 0xC6, 0x4F, 0x2F, 0xE0, 0x3B,  // x...O/.;
                /* 02B0 */  0xB3, 0x78, 0xAC, 0x38, 0x68, 0x86, 0x79, 0x20,  // .x.8h.y 
                /* 02B8 */  0xA7, 0xE6, 0x6B, 0x20, 0x0B, 0x3B, 0x5A, 0x50,  // ..k .;ZP
                /* 02C0 */  0x1D, 0xAB, 0x80, 0xC3, 0xB9, 0x12, 0x37, 0x5A,  // ......7Z
                /* 02C8 */  0xB8, 0x43, 0xC3, 0x8F, 0x17, 0x7C, 0x22, 0x4E,  // .C...|"N
                /* 02D0 */  0x52, 0x3E, 0xD4, 0x41, 0x3F, 0x80, 0x7A, 0xBC,  // R>.A?.z.
                /* 02D8 */  0xE0, 0x39, 0x48, 0x01, 0x87, 0x43, 0x1D, 0xF8,  // .9H..C..
                /* 02E0 */  0xFE, 0xFF, 0x87, 0x3A, 0x38, 0x43, 0x06, 0x9F,  // ...:8C..
                /* 02E8 */  0xBC, 0xB3, 0x18, 0xFA, 0x3C, 0xE3, 0x29, 0xD4,  // ....<.).
                /* 02F0 */  0x7A, 0x89, 0x21, 0xB0, 0x07, 0xE4, 0x93, 0x48,  // z.!....H
                /* 02F8 */  0x90, 0x13, 0x89, 0x70, 0x2E, 0x3E, 0x8D, 0x81,  // ...p.>..
                /* 0300 */  0xED, 0x00, 0x05, 0x1C, 0x4E, 0x63, 0xE0, 0xB9,  // ....Nc..
                /* 0308 */  0xA4, 0xB0, 0xDB, 0x18, 0x18, 0x0E, 0x51, 0xF0,  // ......Q.
                /* 0310 */  0x26, 0xE5, 0xF1, 0x83, 0xEF, 0xD4, 0x84, 0x3B,  // &......;
                /* 0318 */  0x44, 0xC1, 0xF3, 0x38, 0x24, 0x21, 0x9F, 0xC7,  // D..8$!..
                /* 0320 */  0x4B, 0x00, 0xEE, 0x1E, 0x85, 0x3F, 0x47, 0x81,  // K....?G.
                /* 0328 */  0xF7, 0xFF, 0x7F, 0x8E, 0x82, 0x27, 0x6B, 0xA1,  // .....'k.
                /* 0330 */  0xF4, 0x10, 0x65, 0x21, 0x30, 0xA8, 0x73, 0x14,  // ..e!0.s.
                /* 0338 */  0xC0, 0x14, 0x6F, 0xB7, 0x0D, 0xDD, 0xA2, 0x7C,  // ..o....|
                /* 0340 */  0x1B, 0x78, 0x1A, 0x78, 0x8D, 0x88, 0xF2, 0x1C,  // .x.x....
                /* 0348 */  0xE5, 0x8B, 0xD4, 0x0B, 0x41, 0x84, 0x28, 0xC7,  // ....A.(.
                /* 0350 */  0x7B, 0x02, 0x11, 0x1E, 0xA6, 0x3C, 0xE1, 0x30,  // {....<.0
                /* 0358 */  0xE1, 0x4E, 0x36, 0xCA, 0x4B, 0x43, 0x18, 0x43,  // .N6.KC.C
                /* 0360 */  0xC7, 0x0A, 0x14, 0x39, 0x7E, 0x08, 0x5F, 0x2A,  // ...9~._*
                /* 0368 */  0x7C, 0x8E, 0x62, 0x51, 0xCE, 0x03, 0xFA, 0x11,  // |.bQ....
                /* 0370 */  0xF8, 0xFC, 0x61, 0x23, 0x67, 0x11, 0xD4, 0x49,  // ..a#g..I
                /* 0378 */  0xC0, 0x87, 0x0E, 0x0F, 0xEA, 0x09, 0x01, 0x13,  // ........
                /* 0380 */  0xFA, 0x60, 0x08, 0xAA, 0xFF, 0xFF, 0x49, 0x0A,  // .`....I.
                /* 0388 */  0x38, 0x1F, 0x40, 0xE0, 0x85, 0x3C, 0xF3, 0x82,  // 8.@..<..
                /* 0390 */  0xEE, 0x44, 0x0F, 0x8E, 0x33, 0x61, 0xE4, 0xB8,  // .D..3a..
                /* 0398 */  0x0F, 0x34, 0xD8, 0xB3, 0x07, 0xF0, 0x91, 0x76,  // .4.....v
                /* 03A0 */  0xF0, 0x40, 0x89, 0x39, 0x7B, 0x00, 0xBA, 0xFE,  // .@.9{...
                /* 03A8 */  0xFF, 0x67, 0x0F, 0xC0, 0xC2, 0x65, 0xE3, 0xDD,  // .g...e..
                /* 03B0 */  0xC3, 0x97, 0x9E, 0x33, 0x7D, 0xF6, 0xF0, 0x5C,  // ...3}..\
                /* 03B8 */  0xDF, 0x39, 0x7C, 0x2A, 0x34, 0x8A, 0x21, 0xDE,  // .9|*4.!.
                /* 03C0 */  0x3F, 0x7C, 0x28, 0x88, 0x12, 0xF1, 0x5C, 0xA3,  // ?|(...\.
                /* 03C8 */  0x1C, 0x72, 0x94, 0xB8, 0x11, 0xC2, 0x3C, 0x1E,  // .r....<.
                /* 03D0 */  0x1A, 0x27, 0x46, 0xA8, 0x08, 0x0C, 0xF4, 0xD9,  // .'F.....
                /* 03D8 */  0x83, 0xC5, 0x39, 0x7B, 0x40, 0xC5, 0x3E, 0x9B,  // ..9{@.>.
                /* 03E0 */  0x37, 0x8E, 0x08, 0xAF, 0x01, 0xE7, 0x78, 0x3E,  // 7.....x>
                /* 03E8 */  0x3E, 0x7B, 0x00, 0xDE, 0xA4, 0x3C, 0xFD, 0x74,  // >{...<.t
                /* 03F0 */  0xF6, 0x00, 0xD7, 0x09, 0x18, 0x77, 0xF6, 0xC0,  // .....w..
                /* 03F8 */  0xFD, 0xFF, 0xCF, 0x1E, 0xB8, 0x71, 0x63, 0x4F,  // .....qcO
                /* 0400 */  0x1F, 0xC0, 0x4E, 0x84, 0x87, 0xA3, 0x07, 0x26,  // ..N....&
                /* 0408 */  0xF6, 0xF9, 0x16, 0xA0, 0xD0, 0xE1, 0xE3, 0xF9,  // ........
                /* 0410 */  0x16, 0xAC, 0xFF, 0xFF, 0x83, 0x14, 0x17, 0xFE,  // ........
                /* 0418 */  0xB2, 0xD4, 0xA7, 0xC0, 0xC1, 0x0F, 0xA9, 0xE8,  // ........
                /* 0420 */  0xE1, 0xF8, 0x38, 0x87, 0x39, 0xE0, 0x02, 0x6C,  // ..8.9..l
                /* 0428 */  0x3E, 0x5A, 0xFB, 0xFF, 0x7F, 0xB4, 0xC6, 0x03,  // >Z......
                /* 0430 */  0x87, 0xF4, 0x51, 0x01, 0x6C, 0xC7, 0x5B, 0xE0,  // ..Q.l.[.
                /* 0438 */  0x70, 0x54, 0x00, 0xCF, 0xC0, 0xF8, 0x58, 0x81,  // pT....X.
                /* 0440 */  0xC5, 0xC4, 0x1E, 0x5D, 0x8E, 0x15, 0x6C, 0x87,  // ...]..l.
                /* 0448 */  0x5A, 0xE0, 0x30, 0x56, 0x30, 0x0D, 0x8C, 0x8D,  // Z.0V0...
                /* 0450 */  0x15, 0x7C, 0x12, 0x8E, 0xD5, 0xE8, 0x31, 0xFA,  // .|....1.
                /* 0458 */  0xD6, 0x73, 0x40, 0x9E, 0x47, 0x84, 0xB0, 0xBE,  // .s@.G...
                /* 0460 */  0xC2, 0x24, 0x70, 0x5C, 0x08, 0xFD, 0xFF, 0x87,  // .$p\....
                /* 0468 */  0x0B, 0x1E, 0x50, 0x0F, 0x17, 0xFC, 0xF2, 0x86,  // ..P.....
                /* 0470 */  0x0B, 0x9A, 0xB1, 0xC1, 0x19, 0x31, 0xF8, 0x4E,  // .....1.N
                /* 0478 */  0x5E, 0x3E, 0x06, 0x83, 0xE5, 0x12, 0xC1, 0xCE,  // ^>......
                /* 0480 */  0x02, 0x6C, 0x3A, 0xF8, 0x9B, 0x30, 0xFE, 0xC8,  // .l:..0..
                /* 0488 */  0x05, 0x8C, 0x02, 0x98, 0x00, 0x61, 0x32, 0x4F,  // .....a2O
                /* 0490 */  0x07, 0x92, 0x0C, 0x83, 0x3A, 0x72, 0x01, 0xA7,  // ....:r..
                /* 0498 */  0x10, 0x07, 0x02, 0x28, 0xFF, 0xFF, 0x23, 0x17,  // ...(..#.
                /* 04A0 */  0xF0, 0x53, 0x3A, 0x25, 0x4D, 0xFA, 0xFD, 0x1B,  // .S:%M...
                /* 04A8 */  0x77, 0xCC, 0x02, 0x1B, 0xC2, 0x63, 0x16, 0xBF,  // w....c..
                /* 04B0 */  0x30, 0xFA, 0x98, 0x05, 0x46, 0x31, 0x4B, 0xD1,  // 0...F1K.
                /* 04B8 */  0x58, 0x2C, 0xE7, 0xCC, 0xE8, 0x53, 0x07, 0xEA,  // X,...S..
                /* 04C0 */  0x6C, 0xE1, 0x33, 0xC0, 0x19, 0x1E, 0xD8, 0xB3,  // l.3.....
                /* 04C8 */  0xC6, 0xF1, 0x9E, 0x42, 0xED, 0xC3, 0x24, 0x73,  // ...B..$s
                /* 04D0 */  0xF5, 0x75, 0xFD, 0x09, 0x80, 0x9F, 0x1B, 0x7D,  // .u.....}
                /* 04D8 */  0xD6, 0x02, 0xAE, 0x27, 0x84, 0x67, 0x2D, 0xF0,  // ...'.g-.
                /* 04E0 */  0xDC, 0x07, 0x7C, 0x0D, 0xE0, 0x13, 0x39, 0x3E,  // ..|...9>
                /* 04E8 */  0x38, 0xE7, 0x46, 0xF0, 0xFC, 0xFF, 0xCF, 0x52,  // 8.F....R
                /* 04F0 */  0x96, 0x35, 0x6E, 0xB4, 0x24, 0x10, 0x1D, 0x32,  // .5n.$..2
                /* 04F8 */  0x22, 0x9E, 0xE9, 0x41, 0xBC, 0xD6, 0xF9, 0x04,  // "..A....
                /* 0500 */  0xFC, 0x8A, 0x10, 0xFB, 0x1D, 0xC3, 0x37, 0x05,  // ......7.
                /* 0508 */  0x4F, 0xC4, 0xF7, 0x3A, 0x13, 0x8C, 0x7E, 0xEC,  // O..:..~.
                /* 0510 */  0x02, 0xBA, 0xA7, 0x14, 0xDC, 0xC0, 0xE1, 0x8E,  // ........
                /* 0518 */  0x0F, 0x77, 0xA4, 0xC0, 0x0F, 0x11, 0xCE, 0xD8,  // .w......
                /* 0520 */  0xC1, 0x25, 0xFC, 0x14, 0x8B, 0x3E, 0x42, 0xF0,  // .%...>B.
                /* 0528 */  0x61, 0x60, 0xB1, 0x03, 0xBF, 0x13, 0x60, 0xE4,  // a`....`.
                /* 0530 */  0x41, 0xEB, 0x24, 0x0B, 0x9E, 0x33, 0x18, 0x70,  // A.$..3.p
                /* 0538 */  0x88, 0x30, 0x74, 0xD0, 0xDC, 0x44, 0xCE, 0xE2,  // .0t..D..
                /* 0540 */  0xFF, 0x1F, 0x2C, 0x4E, 0xB4, 0x93, 0x38, 0x9F,  // ..,N..8.
                /* 0548 */  0x48, 0xE7, 0x17, 0x2C, 0x4A, 0x75, 0x33, 0x87,  // H..,Ju3.
                /* 0550 */  0x00, 0x74, 0x90, 0x38, 0x9C, 0x37, 0x1F, 0x8F,  // .t.8.7..
                /* 0558 */  0xCE, 0x30, 0xBE, 0x61, 0xB2, 0x7B, 0x00, 0xBF,  // .0.a.{..
                /* 0560 */  0xEF, 0x78, 0x2E, 0x07, 0xE6, 0xE3, 0x2D, 0xBC,  // .x....-.
                /* 0568 */  0x23, 0x83, 0x0F, 0x03, 0xE0, 0x12, 0x3D, 0x7E,  // #.....=~
                /* 0570 */  0x29, 0x39, 0x0C, 0xA0, 0x06, 0x69, 0xD8, 0xD3,  // )9...i..
                /* 0578 */  0x39, 0xFD, 0x03, 0x3B, 0xB2, 0xE6, 0xE1, 0x35,  // 9..;...5
                /* 0580 */  0xAA, 0xD7, 0x1D, 0x9F, 0x8C, 0x1E, 0x05, 0xC0,  // ........
                /* 0588 */  0x76, 0x44, 0x03, 0x0E, 0x01, 0x8E, 0x02, 0x40,  // vD.....@
                /* 0590 */  0x68, 0x9A, 0x38, 0x9C, 0xE3, 0xC4, 0x1C, 0x5F,  // h.8...._
                /* 0598 */  0x7D, 0x0F, 0x62, 0xD7, 0x15, 0x63, 0xBE, 0x51,  // }.b..c.Q
                /* 05A0 */  0x55, 0x7F, 0x12, 0x80, 0x7E, 0xF8, 0x02, 0xCF,  // U...~...
                /* 05A8 */  0xFF, 0xFF, 0xF2, 0xF3, 0xFA, 0x93, 0xC0, 0x42,  // .......B
                /* 05B0 */  0x8F, 0x02, 0x50, 0xA0, 0x5F, 0xBD, 0x7C, 0xAB,  // ..P._.|.
                /* 05B8 */  0x79, 0x56, 0x60, 0xB8, 0xA7, 0x74, 0x56, 0x09,  // yV`..tV.
                /* 05C0 */  0x2C, 0xE9, 0x28, 0x00, 0xAA, 0xE3, 0x1B, 0x70,  // ,.(....p
                /* 05C8 */  0xB8, 0x49, 0x3D, 0x0A, 0x80, 0x7F, 0x8A, 0x0C,  // .I=.....
                /* 05D0 */  0xE4, 0x18, 0xB1, 0xF7, 0x0B, 0x7E, 0x6A, 0xB3,  // .....~j.
                /* 05D8 */  0xCB, 0x43, 0x00, 0xD0, 0x39, 0x4C, 0x91, 0x43,  // .C..9L.C
                /* 05E0 */  0x00, 0x6A, 0x98, 0x9E, 0x36, 0x3F, 0xCE, 0xF2,  // .j..6?..
                /* 05E8 */  0x13, 0x00, 0x78, 0x40, 0x7D, 0x02, 0x00, 0xFF,  // ..x@}...
                /* 05F0 */  0xBD, 0xD7, 0x27, 0x00, 0x38, 0xFF, 0xFF, 0x13,  // ..'.8...
                /* 05F8 */  0x00, 0xFE, 0x8A, 0x82, 0x1F, 0x1D, 0x6E, 0xE0,  // ......n.
                /* 0600 */  0xF0, 0x8E, 0x1C, 0x3E, 0xA5, 0x80, 0xEB, 0xC8,  // ...>....
                /* 0608 */  0x88, 0x3B, 0x17, 0xC2, 0x1B, 0x12, 0x3B, 0x10,  // .;....;.
                /* 0610 */  0x02, 0xC3, 0xA0, 0x7A, 0x8E, 0x84, 0xF4, 0x70,  // ...z...p
                /* 0618 */  0x20, 0x51, 0xEB, 0xA4, 0x30, 0x3E, 0x0D, 0xF8,  //  Q..0>..
                /* 0620 */  0x40, 0x08, 0xF7, 0xE4, 0x65, 0x38, 0x3E, 0x42,  // @...e8>B
                /* 0628 */  0x0F, 0xFD, 0x21, 0xE2, 0xC9, 0xC7, 0xF7, 0x03,  // ..!.....
                /* 0630 */  0x4F, 0xEE, 0xC9, 0x10, 0xC6, 0x39, 0xC1, 0x77,  // O....9.w
                /* 0638 */  0x15, 0x76, 0x37, 0x7B, 0xD6, 0xF3, 0xB9, 0xCA,  // .v7{....
                /* 0640 */  0x04, 0x3E, 0x2C, 0x30, 0x34, 0x7E, 0x4C, 0x04,  // .>,04~L.
                /* 0648 */  0xEB, 0x8D, 0xC1, 0x87, 0x67, 0xB0, 0xDC, 0x11,  // ....g...
                /* 0650 */  0x31, 0x58, 0xCF, 0x1D, 0x36, 0x2A, 0xE0, 0xFF,  // 1X..6*..
                /* 0658 */  0x7F, 0x4B, 0xF7, 0x5D, 0xC6, 0xBE, 0x86, 0xA1,  // .K.]....
                /* 0660 */  0x3B, 0xA7, 0x0F, 0x71, 0xBE, 0x74, 0xF0, 0xE3,  // ;..q.t..
                /* 0668 */  0x3A, 0xEE, 0x74, 0x08, 0x2E, 0xEC, 0x67, 0x7A,  // :.t...gz
                /* 0670 */  0xB0, 0x87, 0x3A, 0x70, 0xD2, 0x48, 0xA3, 0x41,  // ..:p.H.A
                /* 0678 */  0x1D, 0x15, 0x7C, 0x28, 0xF0, 0x31, 0xC5, 0x03,  // ..|(.1..
                /* 0680 */  0x7C, 0xA9, 0xF0, 0x09, 0xC5, 0xD3, 0x7A, 0x5C,  // |.....z\
                /* 0688 */  0x78, 0x1A, 0xF0, 0xB8, 0xD9, 0x35, 0xC1, 0x1F,  // x....5..
                /* 0690 */  0x04, 0x1F, 0x0F, 0xF0, 0x07, 0x88, 0x80, 0xAF,  // ........
                /* 0698 */  0x37, 0x3E, 0x7A, 0xC0, 0x39, 0x82, 0xE0, 0x8F,  // 7>z.9...
                /* 06A0 */  0x2A, 0xF0, 0xC7, 0xE3, 0x63, 0x80, 0x8F, 0xB5,  // *...c...
                /* 06A8 */  0x5C, 0xFE, 0x20, 0x50, 0x07, 0x78, 0x3E, 0xD2,  // \. P.x>.
                /* 06B0 */  0xD3, 0x7A, 0x1B, 0xF0, 0x21, 0xE1, 0xB0, 0xD8,  // .z..!...
                /* 06B8 */  0x09, 0x86, 0x8F, 0x07, 0xFC, 0x07, 0xB2, 0x87,  // ........
                /* 06C0 */  0x0C, 0x5F, 0x19, 0x3C, 0x5F, 0x1F, 0xDD, 0xB1,  // ._.<_...
                /* 06C8 */  0x47, 0x10, 0x78, 0xB7, 0x0E, 0x1F, 0x1A, 0x42,  // G.x....B
                /* 06D0 */  0x3D, 0x75, 0x78, 0x06, 0xEF, 0x17, 0x3E, 0x81,  // =ux...>.
                /* 06D8 */  0x60, 0xFF, 0xFF, 0x27, 0x10, 0x70, 0x47, 0x71,  // `..'.pGq
                /* 06E0 */  0x03, 0xF1, 0x73, 0x6B, 0xA1, 0xEB, 0x94, 0x8D,  // ..sk....
                /* 06E8 */  0xB3, 0x0E, 0x3D, 0x0F, 0x58, 0xEE, 0x01, 0x41,  // ..=.X..A
                /* 06F0 */  0xD7, 0x08, 0xCC, 0x0D, 0x22, 0x88, 0x8F, 0x45,  // ...."..E
                /* 06F8 */  0xBE, 0x51, 0x30, 0x82, 0x02, 0x01, 0x75, 0xF8,  // .Q0...u.
                /* 0700 */  0x34, 0x84, 0xA5, 0x51, 0x48, 0x18, 0x84, 0x46,  // 4..QH..F
                /* 0708 */  0xE4, 0xA3, 0x07, 0x81, 0xA3, 0x20, 0x1E, 0xBD,  // ..... ..
                /* 0710 */  0x63, 0x1E, 0xCF, 0xD1, 0x43, 0xF5, 0x31, 0xC0,  // c...C.1.
                /* 0718 */  0x93, 0xC0, 0x85, 0x3A, 0xA4, 0xD1, 0xE3, 0x02,  // ...:....
                /* 0720 */  0x1E, 0xEF, 0x88, 0x4E, 0xCD, 0xD3, 0xF0, 0xD8,  // ...N....
                /* 0728 */  0x71, 0x27, 0x0F, 0xB8, 0xE3, 0xC0, 0x9F, 0x76,  // q'.....v
                /* 0730 */  0xF0, 0x17, 0x80, 0x57, 0x20, 0x13, 0xB0, 0x53,  // ...W ..S
                /* 0738 */  0x35, 0xF8, 0x04, 0x1E, 0x0E, 0x40, 0x01, 0xE4,  // 5....@..
                /* 0740 */  0xFB, 0x80, 0x0F, 0x3C, 0xCF, 0x04, 0x6C, 0x0E,  // ...<..l.
                /* 0748 */  0x21, 0xC2, 0x44, 0x33, 0x3C, 0x26, 0xF0, 0x31,  // !.D3<&.1
                /* 0750 */  0x8C, 0x9E, 0x86, 0x3C, 0x2E, 0x3E, 0x4A, 0x9F,  // ...<.>J.
                /* 0758 */  0x61, 0xD8, 0x09, 0xCE, 0xD7, 0x62, 0x0F, 0xF0,  // a....b..
                /* 0760 */  0xE5, 0xE0, 0xB9, 0x16, 0x03, 0xEB, 0x71, 0x73,  // ......qs
                /* 0768 */  0x58, 0xA3, 0x3D, 0xEE, 0xFA, 0x8A, 0xF0, 0xFF,  // X.=.....
                /* 0770 */  0x7F, 0x98, 0xF3, 0xA1, 0xCB, 0x57, 0x27, 0xC3,  // .....W'.
                /* 0778 */  0xFA, 0xE4, 0x01, 0x8E, 0xB3, 0x14, 0xFC, 0xA1,  // ........
                /* 0780 */  0xE2, 0xCE, 0x02, 0x70, 0x0F, 0xE4, 0x6C, 0x0E,  // ...p..l.
                /* 0788 */  0x4F, 0x03, 0x78, 0x99, 0x87, 0x08, 0xD4, 0x40,  // O.x....@
                /* 0790 */  0x2C, 0x72, 0x81, 0x3A, 0xAE, 0x78, 0x24, 0x26,  // ,r.:.x$&
                /* 0798 */  0xF0, 0x51, 0xD1, 0x07, 0x08, 0x7E, 0x7E, 0xF0,  // .Q...~~.
                /* 07A0 */  0x01, 0xD7, 0x07, 0x08, 0x2E, 0x04, 0x8E, 0x82,  // ........
                /* 07A8 */  0xF8, 0x00, 0xE1, 0x90, 0x10, 0x3A, 0xE7, 0xE2,  // .....:..
                /* 07B0 */  0x8E, 0x03, 0x3E, 0xC0, 0x30, 0x88, 0x07, 0x83,  // ..>.0...
                /* 07B8 */  0x07, 0x56, 0x76, 0x94, 0xF1, 0x01, 0x02, 0x78,  // .Vv....x
                /* 07C0 */  0x8C, 0x03, 0x7F, 0x80, 0x80, 0x7B, 0xFA, 0x02,  // .....{..
                /* 07C8 */  0xD7, 0xF9, 0x01, 0x78, 0x04, 0x3F, 0x3F, 0xA0,  // ...x.??.
                /* 07D0 */  0xFF, 0xFF, 0xE7, 0x07, 0xF8, 0x87, 0x53, 0x7E,  // ......S~
                /* 07D8 */  0x7E, 0x00, 0x9E, 0x03, 0x7C, 0x14, 0x00, 0xCB,  // ~...|...
                /* 07E0 */  0x99, 0x8C, 0xCD, 0xE1, 0xA5, 0xE6, 0xB5, 0xD3,  // ........
                /* 07E8 */  0x87, 0x21, 0x76, 0x9C, 0x67, 0x47, 0x7A, 0xAE,  // .!v.gGz.
                /* 07F0 */  0x6B, 0x04, 0x24, 0xE2, 0x19, 0x02, 0x35, 0x08,  // k.$...5.
                /* 07F8 */  0xC7, 0x39, 0x36, 0xE8, 0x38, 0xC1, 0x6E, 0xD9,  // .96.8.n.
                /* 0800 */  0x0F, 0x41, 0x55, 0xA3, 0x08, 0xDE, 0xB7, 0x02,  // .AU.....
                /* 0808 */  0x16, 0xE1, 0x18, 0x81, 0x12, 0x4F, 0x21, 0xE9,  // .....O!.
                /* 0810 */  0xC7, 0x08, 0x94, 0x58, 0x38, 0x0A, 0xE2, 0x51,  // ...X8..Q
                /* 0818 */  0xFB, 0x20, 0x61, 0x1B, 0xC7, 0x08, 0xD4, 0x18,  // . a.....
                /* 0820 */  0x3D, 0xB0, 0x77, 0x3B, 0x76, 0x14, 0xE0, 0xA7,  // =.w;v...
                /* 0828 */  0x08, 0xF8, 0xA7, 0x30, 0xDC, 0xD1, 0x03, 0x1C,  // ...0....
                /* 0830 */  0x17, 0xB1, 0x43, 0x3B, 0xBB, 0x47, 0x4C, 0x63,  // ..C;.GLc
                /* 0838 */  0x9E, 0x41, 0xC4, 0x08, 0xAF, 0xAE, 0x46, 0xF3,  // .A....F.
                /* 0840 */  0x18, 0x71, 0xE7, 0x4D, 0x5F, 0x0F, 0x7D, 0xA4,  // .q.M_.}.
                /* 0848 */  0xF0, 0xA1, 0x1D, 0x73, 0xA4, 0x80, 0xF7, 0xFF,  // ...s....
                /* 0850 */  0x27, 0xF0, 0xB9, 0x11, 0x77, 0xA4, 0x80, 0x33,  // '...w..3
                /* 0858 */  0x93, 0xF3, 0xC0, 0xDC, 0x41, 0x8F, 0x25, 0xBC,  // ....A.%.
                /* 0860 */  0xAF, 0x85, 0xF8, 0x83, 0x05, 0xF0, 0x38, 0x2E,  // ......8.
                /* 0868 */  0xF9, 0x60, 0x01, 0x2E, 0x48, 0x1F, 0x2C, 0x80,  // .`..H.,.
                /* 0870 */  0xEB, 0xF9, 0xC0, 0xA7, 0x03, 0xB0, 0x5E, 0xC8,  // ......^.
                /* 0878 */  0xF8, 0xFD, 0x00, 0xC6, 0x09, 0x03, 0xC6, 0xF9,  // ........
                /* 0880 */  0x00, 0x73, 0xC3, 0x70, 0xAC, 0x95, 0xEA, 0x84,  // .s.p....
                /* 0888 */  0x81, 0x8B, 0xF5, 0xA0, 0xD0, 0x40, 0xD8, 0xF0,  // .....@..
                /* 0890 */  0x9E, 0x7F, 0x9E, 0x0C, 0xF9, 0x61, 0x86, 0x45,  // .....a.E
                /* 0898 */  0x81, 0xD3, 0xD1, 0xC2, 0x27, 0x0B, 0x87, 0xA0,  // ....'...
                /* 08A0 */  0xD0, 0x41, 0xCC, 0x27, 0x0C, 0x2E, 0xE6, 0x84,  // .A.'....
                /* 08A8 */  0x41, 0x41, 0x0C, 0xE8, 0xA4, 0x10, 0xFA, 0xFF,  // AA......
                /* 08B0 */  0x9F, 0xC3, 0x70, 0xA7, 0x4D, 0x1F, 0x1B, 0x58,  // ..p.M..X
                /* 08B8 */  0xB8, 0xFB, 0x05, 0x9D, 0x8B, 0xE7, 0xCC, 0xF1,  // ........
                /* 08C0 */  0x7C, 0x0E, 0x31, 0xAC, 0x6F, 0x26, 0xE0, 0xB9,  // |.1.o&..
                /* 08C8 */  0x52, 0xB0, 0x33, 0x8F, 0x2F, 0x04, 0xBE, 0x4D,  // R.3./..M
                /* 08D0 */  0xF2, 0x03, 0x27, 0x3B, 0x16, 0x18, 0xE5, 0x78,  // ..';...x
                /* 08D8 */  0x5F, 0x0B, 0xAD, 0xE6, 0xAE, 0x80, 0x9A, 0x11,  // _.......
                /* 08E0 */  0x86, 0xC0, 0x03, 0xF6, 0x49, 0x0C, 0x4C, 0xFA,  // ....I.L.
                /* 08E8 */  0x6E, 0x14, 0x20, 0x47, 0xE7, 0x67, 0x6E, 0x8F,  // n. G.gn.
                /* 08F0 */  0x9E, 0x1F, 0x00, 0x7C, 0xB4, 0xE3, 0xA3, 0x77,  // ...|...w
                /* 08F8 */  0x6C, 0x08, 0x1D, 0x57, 0xE0, 0x1E, 0xEE, 0x7C,  // l..W...|
                /* 0900 */  0x86, 0x02, 0xBE, 0x03, 0xF3, 0x0C, 0x9F, 0x50,  // .......P
                /* 0908 */  0xC0, 0x75, 0x7F, 0xE0, 0xE7, 0xC2, 0xFF, 0xFF,  // .u......
                /* 0910 */  0xFB, 0x03, 0xE6, 0x2C, 0x0C, 0xE3, 0x94, 0x02,  // ...,....
                /* 0918 */  0x3C, 0x46, 0xEF, 0x53, 0x0A, 0xB8, 0x0E, 0x00,  // <F.S....
                /* 0920 */  0x3E, 0xA5, 0x00, 0xD7, 0x39, 0x3E, 0xC8, 0x83,  // >...9>..
                /* 0928 */  0x07, 0xC5, 0xF7, 0x5F, 0x4F, 0xC4, 0xC6, 0x87,  // ..._O...
                /* 0930 */  0x4F, 0x2F, 0x28, 0x1E, 0xCB, 0x9B, 0x37, 0x0F,  // O/(...7.
                /* 0938 */  0x75, 0x36, 0x41, 0x47, 0x7B, 0x3D, 0x68, 0xD0,  // u6AG{=h.
                /* 0940 */  0x0F, 0x2A, 0x9E, 0x7D, 0xF8, 0xE3, 0x8B, 0xF0,  // .*.}....
                /* 0948 */  0x7C, 0xEA, 0x71, 0xB1, 0x38, 0x67, 0x13, 0x54,  // |.q.8g.T
                /* 0950 */  0x10, 0x0A, 0x1D, 0x3B, 0x7D, 0x9C, 0xE0, 0x92,  // ...;}...
                /* 0958 */  0x8E, 0x13, 0x14, 0xC4, 0x80, 0xCE, 0x7B, 0xC4,  // ......{.
                /* 0960 */  0xF3, 0x21, 0x1E, 0x7D, 0xEA, 0xF3, 0x2D, 0xE1,  // .!.}..-.
                /* 0968 */  0x38, 0x9E, 0x40, 0x12, 0xCC, 0x77, 0x12, 0xA0,  // 8.@..w..
                /* 0970 */  0x97, 0x13, 0x78, 0xA7, 0x71, 0xDC, 0x48, 0x71,  // ..x.q.Hq
                /* 0978 */  0xFF, 0xFF, 0xCB, 0x09, 0x8C, 0x03, 0x8D, 0x67,  // .......g
                /* 0980 */  0xC1, 0x10, 0xDE, 0xAC, 0xD9, 0x71, 0x1D, 0x1E,  // .....q..
                /* 0988 */  0x8C, 0xAF, 0x27, 0x30, 0xEF, 0x79, 0xE0, 0x3A,  // ..'0.y.:
                /* 0990 */  0x9E, 0x00, 0x0B, 0x99, 0x07, 0x00, 0xD4, 0xB1,  // ........
                /* 0998 */  0xD1, 0x07, 0x47, 0x7E, 0x00, 0x70, 0xE8, 0xE3,  // ..G~.p..
                /* 09A0 */  0x09, 0x7A, 0x26, 0x3E, 0x16, 0x3D, 0x95, 0xF8,  // .z&>.=..
                /* 09A8 */  0x02, 0xC0, 0xCF, 0x6E, 0x3A, 0x9F, 0x80, 0xE2,  // ...n:...
                /* 09B0 */  0x9C, 0x09, 0x9E, 0x71, 0xB0, 0x2B, 0x00, 0xFE,  // ...q.+..
                /* 09B8 */  0x84, 0x02, 0xFB, 0x48, 0x06, 0xBE, 0x89, 0xF8,  // ...H....
                /* 09C0 */  0x54, 0x71, 0x20, 0xD8, 0xD3, 0x09, 0xF8, 0xFE,  // Tq .....
                /* 09C8 */  0xFF, 0x27, 0x59, 0xE0, 0x01, 0xCB, 0x4F, 0xB2,  // .'Y...O.
                /* 09D0 */  0x80, 0x8F, 0xDB, 0x08, 0x76, 0x16, 0xCF, 0x24,  // ....v..$
                /* 09D8 */  0x8C, 0x60, 0xE4, 0xA3, 0x09, 0xEA, 0x88, 0xEC,  // .`......
                /* 09E0 */  0xA0, 0xA7, 0x30, 0xC4, 0x38, 0x1F, 0x2B, 0x8C,  // ..0.8.+.
                /* 09E8 */  0x11, 0xB9, 0xF8, 0x51, 0x6B, 0x32, 0x3E, 0x9B,  // ...Qk2>.
                /* 09F0 */  0xF9, 0xB2, 0xCE, 0x0E, 0x3F, 0x38, 0x82, 0x81,  // ....?8..
                /* 09F8 */  0x0E, 0x28, 0xA8, 0xE3, 0x98, 0xCF, 0x62, 0x80,  // .(....b.
                /* 0A00 */  0xB3, 0xFF, 0xFF, 0x59, 0x0C, 0xF8, 0x9F, 0xDD,  // ...Y....
                /* 0A08 */  0x3D, 0x7A, 0x7E, 0x6C, 0xE7, 0x20, 0x1E, 0xBD,  // =z~l. ..
                /* 0A10 */  0xC3, 0x9F, 0xC5, 0xA0, 0x87, 0x3D, 0x8B, 0x01,  // .....=..
                /* 0A18 */  0x6D, 0xC1, 0x67, 0x31, 0x50, 0xDE, 0x22, 0xE0,  // m.g1P.".
                /* 0A20 */  0x9E, 0x41, 0x81, 0xD7, 0xDA, 0x7C, 0x42, 0x81,  // .A...|B.
                /* 0A28 */  0xFF, 0xFF, 0x3F, 0xA1, 0xE0, 0xEE, 0x0C, 0x3E,  // ..?....>
                /* 0A30 */  0xA1, 0x00, 0xD7, 0x23, 0x00, 0xEE, 0x0C, 0x0A,  // ...#....
                /* 0A38 */  0x8E, 0x13, 0x00, 0xF3, 0x75, 0x03, 0xA0, 0x20,  // ....u.. 
                /* 0A40 */  0x8F, 0x00, 0xF8, 0x2B, 0xBC, 0x0F, 0x26, 0xB8,  // ...+..&.
                /* 0A48 */  0x78, 0x27, 0x15, 0x14, 0x87, 0xE3, 0x9D, 0x54,  // x'.....T
                /* 0A50 */  0x10, 0x53, 0x89, 0xFC, 0xD6, 0xE2, 0x09, 0x84,  // .S......
                /* 0A58 */  0x3F, 0xB8, 0x38, 0xEF, 0x67, 0xFC, 0x54, 0x06,  // ?.8.g.T.
                /* 0A60 */  0x43, 0xD4, 0xC1, 0x02, 0x25, 0xE3, 0x60, 0x41,  // C...%.`A
                /* 0A68 */  0x41, 0x0C, 0xE8, 0x8C, 0xA7, 0x14, 0xF4, 0xA9,  // A.......
                /* 0A70 */  0x8C, 0x5F, 0x46, 0x3C, 0xB0, 0x04, 0x33, 0x5D,  // ._F<..3]
                /* 0A78 */  0x53, 0xA0, 0x5F, 0x40, 0x70, 0x03, 0x86, 0x0B,  // S._@p...
                /* 0A80 */  0xF6, 0x20, 0x61, 0x84, 0xD7, 0x64, 0xCF, 0x03,  // . a..d..
                /* 0A88 */  0x73, 0x44, 0x01, 0x16, 0xFF, 0xFF, 0x23, 0x0A,  // sD....#.
                /* 0A90 */  0xF0, 0x90, 0x3C, 0x74, 0x94, 0xC8, 0xA1, 0x53,  // ..<t...S
                /* 0A98 */  0x10, 0x0F, 0xDD, 0x34, 0x3E, 0xA2, 0xE0, 0xC6,  // ...4>...
                /* 0AA0 */  0xCA, 0x2E, 0x04, 0xB0, 0xA2, 0x9E, 0x52, 0x40,  // ......R@
                /* 0AA8 */  0x21, 0x72, 0xF8, 0xA0, 0x19, 0xC7, 0xD1, 0x3D,  // !r.....=
                /* 0AB0 */  0xF5, 0x78, 0x1E, 0xFC, 0x4E, 0xEC, 0x63, 0x1E,  // .x..N.c.
                /* 0AB8 */  0xDC, 0x93, 0x0A, 0xEE, 0xD4, 0x88, 0x3B, 0xA9,  // ......;.
                /* 0AC0 */  0x80, 0x61, 0x8E, 0xD8, 0x53, 0x19, 0xF0, 0x3A,  // .a..S..:
                /* 0AC8 */  0x82, 0x82, 0xCF, 0xC3, 0x21, 0x05, 0x14, 0xFF,  // ....!...
                /* 0AD0 */  0xFF, 0x23, 0x28, 0x70, 0x3E, 0xA4, 0xF0, 0x63,  // .#(p>..c
                /* 0AD8 */  0x06, 0xE6, 0x6A, 0xC0, 0x8F, 0xA0, 0x98, 0x98,  // ..j.....
                /* 0AE0 */  0xCF, 0x07, 0x9D, 0x4F, 0xF8, 0xD1, 0xC0, 0x81,  // ...O....
                /* 0AE8 */  0x5E, 0x05, 0x02, 0x67, 0x67, 0x7D, 0xDC, 0xE5,  // ^..gg}..
                /* 0AF0 */  0xC0, 0x27, 0x0C, 0x13, 0x8C, 0x70, 0x9A, 0xA0,  // .'...p..
                /* 0AF8 */  0x10, 0x16, 0x4F, 0x21, 0xE9, 0x87, 0x0A, 0x94,  // ..O!....
                /* 0B00 */  0x58, 0x38, 0x0A, 0xE2, 0x43, 0x85, 0x85, 0x1C,  // X8..C...
                /* 0B08 */  0x2A, 0xD0, 0xC7, 0x28, 0x7C, 0xF0, 0x13, 0x05,  // *..(|...
                /* 0B10 */  0x28, 0x2E, 0x00, 0x8F, 0xEC, 0xE0, 0xBD, 0xAF,  // (.......
                /* 0B18 */  0xE3, 0x07, 0x89, 0xBB, 0xA8, 0x78, 0xC8, 0x3E,  // .....x.>
                /* 0B20 */  0xB0, 0x63, 0xE6, 0xE9, 0xA3, 0x05, 0x3C, 0x02,  // .c....<.
                /* 0B28 */  0x9F, 0x1E, 0xC1, 0x07, 0xEF, 0xC3, 0x14, 0xEE,  // ........
                /* 0B30 */  0xFF, 0x7F, 0x98, 0x02, 0x2E, 0x67, 0x3D, 0x1F,  // .....g=.
                /* 0B38 */  0x2C, 0xC0, 0x05, 0xEE, 0x83, 0x05, 0x70, 0xBD,  // ,.....p.
                /* 0B40 */  0xFD, 0xF8, 0x74, 0x00, 0xD6, 0xD1, 0x1E, 0xF3,  // ..t.....
                /* 0B48 */  0xF9, 0xC6, 0x79, 0x3F, 0x80, 0x71, 0x53, 0x79,  // ..y?.qSy
                /* 0B50 */  0x88, 0xF4, 0x3D, 0xC0, 0xF8, 0xEC, 0x7C, 0x80,  // ..=...|.
                /* 0B58 */  0xBD, 0x12, 0xF9, 0xEC, 0xA0, 0x33, 0x06, 0x6A,  // .....3.j
                /* 0B60 */  0x38, 0x3E, 0x57, 0x78, 0x24, 0xEC, 0x02, 0x70,  // 8>Wx$..p
                /* 0B68 */  0xAE, 0x3E, 0x50, 0xE1, 0x0E, 0x7D, 0x3E, 0x62,  // .>P..}>b
                /* 0B70 */  0xF0, 0x23, 0xBD, 0x4F, 0xB9, 0xE0, 0x3A, 0x62,  // .#.O..:b
                /* 0B78 */  0xE0, 0x43, 0x1E, 0x31, 0x40, 0xF1, 0xFF, 0x3F,  // .C.1@..?
                /* 0B80 */  0x40, 0xE0, 0x46, 0x0D, 0x8E, 0xC9, 0x3D, 0x22,  // @.F...="
                /* 0B88 */  0x9C, 0xF2, 0x99, 0xE2, 0x0E, 0x16, 0xC0, 0x65,  // .......e
                /* 0B90 */  0x1E, 0xEC, 0x60, 0x01, 0xBC, 0x22, 0x1F, 0x80,  // ..`.."..
                /* 0B98 */  0x40, 0x67, 0xE2, 0x60, 0x01, 0x74, 0xCF, 0x04,  // @g.`.t..
                /* 0BA0 */  0xC0, 0x41, 0xA1, 0x4D, 0x9F, 0x1A, 0x8D, 0x5A,  // .A.M...Z
                /* 0BA8 */  0x35, 0x28, 0x53, 0xA3, 0x4C, 0x83, 0x5A, 0x7D,  // 5(S.L.Z}
                /* 0BB0 */  0x2A, 0x35, 0x46, 0xF0, 0xDC, 0xE3, 0xB5, 0x6A,  // *5F....j
                /* 0BB8 */  0xB0, 0x0E, 0xF5, 0x66, 0x10, 0x88, 0xE3, 0xAE,  // ...f....
                /* 0BC0 */  0x58, 0x03, 0x26, 0x0F, 0x27, 0xFD, 0xFF, 0x41,  // X.&.'..A
                /* 0BC8 */  0x2C, 0x44, 0x05, 0x08, 0x93, 0xB1, 0x2E, 0x81,  // ,D......
                /* 0BD0 */  0x58, 0xCA, 0xBA, 0x04, 0x62, 0xA1, 0xEF, 0x08,  // X...b...
                /* 0BD8 */  0x81, 0x38, 0xC8, 0x6B, 0x40, 0x20, 0x8E, 0xF7,  // .8.k@ ..
                /* 0BE0 */  0xD6, 0x13, 0x88, 0x83, 0x6A, 0x01, 0x61, 0x31,  // ....j.a1
                /* 0BE8 */  0xBD, 0x80, 0xB0, 0x70, 0x6B, 0x13, 0x88, 0x23,  // ...pk..#
                /* 0BF0 */  0x99, 0x19, 0x0A, 0xFD, 0xD6, 0x09, 0xC4, 0x61,  // .......a
                /* 0BF8 */  0xED, 0x80, 0x30, 0x09, 0x7E, 0x40, 0x98, 0xF4,  // ..0.~@..
                /* 0C00 */  0x05, 0x0B, 0x8C, 0x18, 0x02, 0x61, 0xA2, 0x1C,  // .....a..
                /* 0C08 */  0x81, 0x30, 0x91, 0x92, 0x86, 0x44, 0x3D, 0x81,  // .0...D=.
                /* 0C10 */  0xB0, 0x18, 0x20, 0x54, 0x90, 0xA9, 0xD3, 0xBE,  // .. T....
                /* 0C18 */  0x40, 0x24, 0x0F, 0x44, 0x40, 0x16, 0xEC, 0x0A,  // @$.D@...
                /* 0C20 */  0x88, 0xC9, 0x07, 0x11, 0x90, 0x43, 0xDB, 0x02,  // .....C..
                /* 0C28 */  0x62, 0x12, 0x7E, 0x22, 0x02, 0x72, 0x86, 0x27,  // b.~".r.'
                /* 0C30 */  0xB2, 0x80, 0x1C, 0x08, 0x44, 0x40, 0x8E, 0xB5,  // ....D@..
                /* 0C38 */  0x5E, 0x01, 0x39, 0x24, 0x88, 0x80, 0x2C, 0x50,  // ^.9$..,P
                /* 0C40 */  0x1A, 0x10, 0x53, 0x0B, 0x22, 0x20, 0x0B, 0xB7,  // ..S." ..
                /* 0C48 */  0x06, 0xC4, 0x62, 0x80, 0x08, 0xC8, 0xC9, 0xBD,  // ..b.....
                /* 0C50 */  0x01, 0x31, 0x19, 0xAF, 0x57, 0x01, 0x59, 0x8C,  // .1..W.Y.
                /* 0C58 */  0x39, 0x20, 0x26, 0x0D, 0x44, 0x40, 0x4E, 0xE7,  // 9 &.D@N.
                /* 0C60 */  0x0E, 0x88, 0x45, 0x05, 0x11, 0x90, 0xE3, 0xCB,  // ..E.....
                /* 0C68 */  0x03, 0x62, 0x62, 0xEC, 0x0D, 0x98, 0xFA, 0x03,  // .bb.....
                /* 0C70 */  0x62, 0x01, 0x41, 0x04, 0x64, 0x89, 0x0F, 0x98,  // b.A.d...
                /* 0C78 */  0x40, 0x44, 0x30, 0x88, 0x80, 0xFC, 0xFF, 0x07   // @D0.....
            })
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "AmdTable", 0x00000001)
{
    External (_SB_.PCI0.GPP7.UP00.DP40.UP00.DP68, DeviceObj)

    Scope (\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68)
    {
        Name (SPTS, 0x01)
        Name (TSGP, 0x0F)
        Device (SPTO)
        {
            Name (_HID, "AMDIF031")  // _HID: Hardware ID
            Name (_CID, "AMDIF031")  // _CID: Compatible ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFC300000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((SPTS == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (ASMP)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "ASMT0001")  // _HID: Hardware ID
            Name (_CID, "ASMT0001")  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0000
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0001
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0002
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0003
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0004
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0005
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0006
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0007
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0008
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0009
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x000A
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x000B
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x000C
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x000D
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x000E
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x000F
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0010
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0011
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0012
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0013
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0014
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0015
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0016
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                        "\\_SB.PCI0.GPP7.UP00.DP40.UP00.DP68.SPTO", 0x00, ResourceConsumer, ,
                        RawDataBuffer (0x01)  // Vendor Data
                        {
                            0x01
                        })
                        {   // Pin list
                            0x0017
                        }
                })
                Return (RBUF) /* \_SB_.PCI0.GPP7.UP00.DP40.UP00.DP68.ASMP._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSGP == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "CPMDFIG5", 0x00000001)
{
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFNC, MethodObj)    // 2 Arguments

    Method (AFN0, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN0))
        {
            \_SB.PCI0.GPP0.VGA.AFN0 ()
        }

        If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN0))
        {
            \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN0 ()
        }
    }

    Method (AFN1, 1, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN1))
        {
            \_SB.PCI0.GPP0.VGA.AFN1 (Arg0)
        }

        If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN1))
        {
            \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN1 (Arg0)
        }
    }

    Method (AFN2, 2, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN2))
        {
            \_SB.PCI0.GPP0.VGA.AFN2 (Arg0, Arg1)
        }

        If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN2))
        {
            \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN2 (Arg0, Arg1)
        }
    }

    Method (AFN3, 2, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN3))
        {
            \_SB.PCI0.GPP0.VGA.AFN3 (Arg0, Arg1)
        }

        If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN3))
        {
            \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN3 (Arg0, Arg1)
        }
    }

    Method (AFN4, 1, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN4))
        {
            \_SB.PCI0.GPP0.VGA.AFN4 (Arg0)
        }

        If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN4))
        {
            \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN4 (Arg0)
        }
    }

    Method (AFN5, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN5))
        {
            \_SB.PCI0.GPP0.VGA.AFN5 ()
        }

        If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN5))
        {
            \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN5 ()
        }
    }

    Method (AFN6, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN6))
        {
            \_SB.PCI0.GPP0.VGA.AFN6 ()
        }

        If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN6))
        {
            \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN6 ()
        }
    }

    Method (AFN7, 1, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN7))
        {
            \_SB.PCI0.GPP0.VGA.AFN7 (Arg0)
        }

        If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN7))
        {
            \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN7 (Arg0)
        }
    }

    Method (AFN8, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN8))
        {
            \_SB.PCI0.GPP0.VGA.AFN8 ()
        }

        If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN8))
        {
            \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN8 ()
        }
    }

    Method (AFNC, 2, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFNC))
        {
            \_SB.PCI0.GPP0.VGA.AFNC (Arg0, Arg1)
        }

        If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFNC))
        {
            \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFNC (Arg0, Arg1)
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "AMDWOV", 0x00000001)
{
    External (_SB_.PCI0.GP17.ACP_, DeviceObj)
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M047, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M32C, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (M652, FieldUnitObj)

    Scope (\_SB.PCI0.GP17.ACP)
    {
        Method (_WOV, 0, NotSerialized)
        {
            Return (One)
        }
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "AMD CPU", 0x00000001)
{
    External (_SB_.PLTF.C000, DeviceObj)
    External (_SB_.PLTF.C001, DeviceObj)
    External (_SB_.PLTF.C002, DeviceObj)
    External (_SB_.PLTF.C003, DeviceObj)
    External (_SB_.PLTF.C004, DeviceObj)
    External (_SB_.PLTF.C005, DeviceObj)
    External (_SB_.PLTF.C006, DeviceObj)
    External (_SB_.PLTF.C007, DeviceObj)
    External (_SB_.PLTF.C008, DeviceObj)
    External (_SB_.PLTF.C009, DeviceObj)
    External (_SB_.PLTF.C00A, DeviceObj)
    External (_SB_.PLTF.C00B, DeviceObj)
    External (_SB_.PLTF.C00C, DeviceObj)
    External (_SB_.PLTF.C00D, DeviceObj)
    External (_SB_.PLTF.C00E, DeviceObj)
    External (_SB_.PLTF.C00F, DeviceObj)
    External (_SB_.PLTF.C010, DeviceObj)
    External (_SB_.PLTF.C011, DeviceObj)
    External (_SB_.PLTF.C012, DeviceObj)
    External (_SB_.PLTF.C013, DeviceObj)
    External (_SB_.PLTF.C014, DeviceObj)
    External (_SB_.PLTF.C015, DeviceObj)
    External (_SB_.PLTF.C016, DeviceObj)
    External (_SB_.PLTF.C017, DeviceObj)

    Scope (\_SB.PLTF.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C000.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x0000125D
        })
    }

    Scope (\_SB.PLTF.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C001.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x0000125D
        })
    }

    Scope (\_SB.PLTF.C002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C002.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x0000125D
        })
    }

    Scope (\_SB.PLTF.C003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C003.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x0000125D
        })
    }

    Scope (\_SB.PLTF.C004)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C004.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x0000125D
        })
    }

    Scope (\_SB.PLTF.C005)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C005.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x0000125D
        })
    }

    Scope (\_SB.PLTF.C006)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C006.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x0000125D
        })
    }

    Scope (\_SB.PLTF.C007)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C007.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x0000125D
        })
    }

    Scope (\_SB.PLTF.C008)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C008.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x0000125D
        })
    }

    Scope (\_SB.PLTF.C009)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C009.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x0000125D
        })
    }

    Scope (\_SB.PLTF.C00A)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00A.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x0000125D
        })
    }

    Scope (\_SB.PLTF.C00B)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00B.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x0000125D
        })
    }

    Scope (\_SB.PLTF.C00C)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00C.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x0000125D
        })
    }

    Scope (\_SB.PLTF.C00D)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00D.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x0000125D
        })
    }

    Scope (\_SB.PLTF.C00E)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00E.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x0000125D
        })
    }

    Scope (\_SB.PLTF.C00F)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00F.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x0000125D
        })
    }

    Scope (\_SB.PLTF.C010)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000008, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C010.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000008, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x0000125D
        })
    }

    Scope (\_SB.PLTF.C011)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000008, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C011.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000008, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x0000125D
        })
    }

    Scope (\_SB.PLTF.C012)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000009, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C012.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000009, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x0000125D
        })
    }

    Scope (\_SB.PLTF.C013)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000009, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C013.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000009, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x0000125D
        })
    }

    Scope (\_SB.PLTF.C014)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000A, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C014.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000A, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x0000125D
        })
    }

    Scope (\_SB.PLTF.C015)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000A, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C015.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000A, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x0000125D
        })
    }

    Scope (\_SB.PLTF.C016)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000B, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C016.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000B, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x0000125D
        })
    }

    Scope (\_SB.PLTF.C017)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x0000125C, 
                0x000016F3, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000BB8, 
                0x000009F6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000B, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C017.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000B, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x0000125D
        })
    }

    Method (NFPC, 0, NotSerialized)
    {
        Notify (\_SB.PLTF.C000, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C001, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C002, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C003, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C004, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C005, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C006, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C007, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C008, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C009, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00A, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00B, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00C, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00D, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00E, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00F, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C010, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C011, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C012, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C013, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C014, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C015, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C016, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C017, 0x85) // Device-Specific
    }
}



SSDT9
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "Splinter", 0x00000002)
{
    Scope (\_SB)
    {
        Name (AGRB, 0xE0000000)
        Name (ADBG, Buffer (0x0100){})
        Mutex (AM00, 0x00)
        Name (ADAT, Buffer (0x0520)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0028 */  0x0F, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0x01, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0038 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0060 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x13,  // ........
            /* 0078 */  0x10, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0x02, 0x00,  // ........
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0088 */  0x01, 0x00, 0x01, 0x14, 0x17, 0xFF, 0xFF, 0x01,  // ........
            /* 0090 */  0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0100 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        OperationRegion (A001, SystemIO, 0x80, 0x04)
        Field (A001, DWordAcc, NoLock, Preserve)
        {
            A002,   32
        }

        OperationRegion (A003, SystemIO, 0x80, 0x02)
        Field (A003, WordAcc, NoLock, Preserve)
        {
            A004,   16
        }

        OperationRegion (A005, SystemIO, 0x80, One)
        Field (A005, ByteAcc, NoLock, Preserve)
        {
            A006,   8
        }

        Method (A007, 1, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [0x09]) == One))
            {
                A002 = (Arg0 | 0xB0000000)
            }
        }

        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                A007 (0xAA80)
                CreateWordField (Arg1, Zero, A020)
                CreateWordField (Arg1, 0x02, A021)
                CreateDWordField (Arg1, 0x04, A022)
                Local0 = Buffer (0x0100){}
                CreateWordField (Local0, Zero, A023)
                A023 = A020 /* \_SB_.ALIB.A020 */
                CreateWordField (Local0, 0x02, A024)
                A024 = A021 /* \_SB_.ALIB.A021 */
                CreateDWordField (Local0, 0x04, A025)
                A025 = A022 /* \_SB_.ALIB.A022 */
                A025 &= ~0x0F
                If ((DerefOf (\_SB.ADAT [Zero]) > Zero))
                {
                    Local1 = 0x0F
                }
                Else
                {
                    Local1 = One
                }

                A025 |= Local1
                A007 (0xAA81)
                Return (Local0)
            }

            If ((Arg0 == One))
            {
                A007 (0xAA82)
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = A026 (Local0)
                A007 (0xAA83)
                Return (Local1)
            }

            If ((Arg0 == 0x02))
            {
                A007 (0xAA84)
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                A007 (0xAA85)
                Return (Local0)
            }

            If ((Arg0 == 0x03))
            {
                A007 (0xAA86)
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                A007 (0xAA87)
                Return (Local0)
            }

            If ((Arg0 == 0x06))
            {
                A007 (0xAA88)
                Local0 = DerefOf (Arg1 [0x04])
                Local1 = DerefOf (Arg1 [0x02])
                Local2 = A029 (Local0, Local1)
                A007 (0xAA89)
                Return (Local2)
            }

            If ((Arg0 == 0x0A))
            {
                A007 (0xAA8A)
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = A030 (Local0)
                A007 (0xAA8B)
                Return (Local1)
            }

            If ((Arg0 == 0x0B))
            {
                A007 (0xAA8C)
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = DerefOf (Arg1 [0x03])
                Local2 = DerefOf (Arg1 [0x04])
                Local2 |= (DerefOf (Arg1 [0x05]) << 0x08)
                Local2 |= (DerefOf (Arg1 [0x06]) << 0x10)
                Local2 |= (DerefOf (Arg1 [0x07]) << 0x18)
                Local3 = DerefOf (Arg1 [0x08])
                Local3 |= (DerefOf (Arg1 [0x09]) << 0x08)
                Local3 |= (DerefOf (Arg1 [0x0A]) << 0x10)
                Local3 |= (DerefOf (Arg1 [0x0B]) << 0x18)
                Local4 = DerefOf (Arg1 [0x0C])
                Local4 |= (DerefOf (Arg1 [0x0D]) << 0x08)
                Local4 |= (DerefOf (Arg1 [0x0E]) << 0x10)
                Local4 |= (DerefOf (Arg1 [0x0F]) << 0x18)
                Local5 = A031 (Local0, Local1, Local2, Local3, Local4)
                A007 (0xAA8D)
                Return (Local5)
            }

            If ((Arg0 == 0x0C))
            {
                A007 (0xAA8E)
                Local0 = A032 (Arg1)
                A007 (0xAA8F)
                Return (Local0)
            }

            If ((Arg0 == 0x10))
            {
                A007 (0xAA90)
                Local7 = Buffer (0x18){}
                CreateDWordField (Local7, Zero, A033)
                CreateDWordField (Local7, 0x04, A034)
                CreateDWordField (Local7, 0x08, A035)
                CreateDWordField (Local7, 0x0C, A036)
                CreateDWordField (Local7, 0x10, A037)
                CreateDWordField (Local7, 0x14, A038)
                A033 = Zero
                A034 = Zero
                A035 = Zero
                A036 = Zero
                A037 = Zero
                A038 = Zero
                A018 (0x67, Local7)
                A007 (0xAA91)
            }

            If ((Arg0 == 0x11))
            {
                A007 (0xAA92)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, Zero, A012)
                CreateDWordField (Local6, 0x04, A013)
                CreateDWordField (Local6, 0x08, A014)
                CreateDWordField (Local6, 0x0C, A015)
                CreateDWordField (Local6, 0x10, A016)
                CreateDWordField (Local6, 0x14, A017)
                A012 = Zero
                A013 = Zero
                A014 = Zero
                A015 = Zero
                A016 = Zero
                A017 = Zero
                A018 (0x66, Local6)
                A007 (0xAA93)
            }

            If ((Arg0 == 0x12))
            {
                A007 (0xAA94)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, Zero, A039)
                CreateDWordField (Local6, 0x04, A040)
                CreateDWordField (Local6, 0x08, A041)
                CreateDWordField (Local6, 0x0C, A042)
                CreateDWordField (Local6, 0x10, A043)
                CreateDWordField (Local6, 0x14, A044)
                A039 = Zero
                A040 = Zero
                A041 = Zero
                A042 = Zero
                A043 = Zero
                A044 = Zero
                Local5 = A045 (Arg1)
                If ((0xFF != Local5))
                {
                    A039 = Local5
                    A040 = 0x02
                    A046 (0x24, Local6)
                }

                A007 (0xAA95)
            }

            If ((Arg0 == 0x13))
            {
                A007 (0xAA96)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, Zero, A047)
                CreateDWordField (Local6, 0x04, A048)
                CreateDWordField (Local6, 0x08, A049)
                CreateDWordField (Local6, 0x0C, A050)
                CreateDWordField (Local6, 0x10, A051)
                CreateDWordField (Local6, 0x14, A052)
                A047 = Zero
                A048 = Zero
                A049 = Zero
                A050 = Zero
                A051 = Zero
                A052 = Zero
                Local5 = A045 (Arg1)
                If ((0xFF != Local5))
                {
                    A047 = Local5
                    A048 = One
                    A046 (0x24, Local6)
                }

                A007 (0xAA97)
            }

            If ((Arg0 == 0x16))
            {
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, Zero, A053)
                CreateDWordField (Local6, 0x04, A054)
                CreateDWordField (Local6, 0x08, A055)
                CreateDWordField (Local6, 0x0C, A056)
                CreateDWordField (Local6, 0x10, A057)
                CreateDWordField (Local6, 0x14, A058)
                A053 = Arg1
                A054 = Zero
                A055 = Zero
                A056 = Zero
                A057 = Zero
                A058 = Zero
                A018 (0x6F, Local6)
            }

            If ((Arg0 == 0xAA))
            {
                A007 (0xAA98)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, Zero, A059)
                CreateDWordField (Local6, 0x04, A060)
                CreateDWordField (Local6, 0x08, A061)
                CreateDWordField (Local6, 0x0C, A062)
                CreateDWordField (Local6, 0x10, A063)
                CreateDWordField (Local6, 0x14, A064)
                A059 = Zero
                A060 = Zero
                A061 = Zero
                A062 = Zero
                A063 = Zero
                A064 = Zero
                A065 (Arg1)
                A007 (0xAA99)
            }

            Return (Zero)
        }

        Method (A029, 2, NotSerialized)
        {
            Local0 = Zero
            While ((Local0 < 0x0B))
            {
                Local1 = A116 (Local0, Arg1)
                If ((Local1 == One))
                {
                    Local2 = A117 (Local0, Arg0)
                    Break
                }

                Local0++
            }

            Local7 = Buffer (0x0A){}
            CreateWordField (Local7, Zero, A023)
            CreateByteField (Local7, 0x02, A067)
            CreateByteField (Local7, 0x03, A118)
            A023 = 0x04
            A067 = Zero
            If ((Local2 == Zero))
            {
                A118 = Zero
            }
            Else
            {
                A118 = One
            }

            Return (Local7)
        }

        Method (A116, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A112 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A112 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A112 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A112 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A112 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A112 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A112 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A112 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A112 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A112 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A112 (Arg1))
            }
        }

        Method (A117, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A113 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A113 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A113 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A113 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A113 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A113 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A113 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A113 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A113 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A113 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A113 (Arg1))
            }
        }

        Name (AD00, Zero)
        Name (DK00, Zero)
        Method (A026, 1, NotSerialized)
        {
            AD00 = Arg0
            A011 ()
        }

        Method (A030, 1, NotSerialized)
        {
            DK00 = Arg0
        }

        Method (A031, 5, NotSerialized)
        {
        }

        Name (AP01, Zero)
        Name (AP02, Zero)
        Name (AP03, Zero)
        Name (AP05, Zero)
        Name (AP0B, 0xFF)
        Name (AP10, Zero)
        Method (A066, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100){}
            CreateWordField (Local7, Zero, A023)
            A023 = 0x03
            CreateByteField (Local7, 0x02, A067)
            A067 = One
            If ((DerefOf (\_SB.ADAT [Zero]) == One))
            {
                A067 = 0x02
                Return (Local7)
            }

            If ((DerefOf (\_SB.ADAT [Zero]) == Zero))
            {
                A067 = One
                Return (Local7)
            }

            A068 (Arg0)
            If ((AP05 != One))
            {
                Return (Local7)
            }

            A069 ()
            A067 = 0x02
            Return (Local7)
        }

        Method (A070, 0, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [Zero]) <= One))
            {
                Return (Zero)
            }

            If ((AP05 != One))
            {
                Return (Zero)
            }

            A069 ()
        }

        Method (A071, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                AP01 = Zero
            }
        }

        Method (A072, 1, NotSerialized)
        {
            AP10 = One
        }

        Method (A073, 1, NotSerialized)
        {
            AP05 = Arg0
            If ((DerefOf (\_SB.ADAT [Zero]) <= One))
            {
                Return (Zero)
            }

            Local1 = AP0B /* \_SB_.AP0B */
            If ((AP05 == Zero))
            {
                Local0 = Zero
                While ((Local0 < 0x0B))
                {
                    A074 (Local0)
                    Local0++
                }

                AP0B = Zero
            }

            A069 ()
            AP0B = Local1
            Local7 = Buffer (0x0100){}
            Local7 [Zero] = 0x03
            Local7 [One] = Zero
            Local7 [0x02] = Zero
            Return (Local7)
        }

        Method (A075, 0, NotSerialized)
        {
            If ((AP0B != 0xFF))
            {
                Return (AP0B) /* \_SB_.AP0B */
            }

            Return (AD00) /* \_SB_.AD00 */
        }

        Method (A068, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Local0 = Zero
            While ((Local0 < 0x0B))
            {
                If ((A076 (Local0, AP06) == One))
                {
                    If (((AP07 & AP08) == One))
                    {
                        Local1 = A077 (Local0)
                        A078 (Local0, Local1)
                    }
                    Else
                    {
                        A078 (Local0, AP0A)
                    }

                    Break
                }

                Local0++
            }
        }

        Method (A079, 0, NotSerialized)
        {
            AP02 = One
            Local0 = Zero
            While ((Local0 < 0x0B))
            {
                Local1 = A080 (Local0)
                If ((Local1 > AP02))
                {
                    AP02 = Local1
                }

                Local0++
            }
        }

        Method (A081, 0, NotSerialized)
        {
            AP03 = Zero
            Local0 = Zero
            While ((Local0 < 0x0B))
            {
                Local1 = A082 (Local0)
                If ((Local1 > AP03))
                {
                    AP03 = Local1
                }

                Local0++
            }
        }

        Method (A069, 0, NotSerialized)
        {
            A081 ()
            A079 ()
            If ((AP02 != AP01))
            {
                A019 (AP02, AP01)
            }

            If ((AP02 > AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            Local0 = Zero
            While ((Local0 < 0x0B))
            {
                Local1 = A080 (Local0)
                Local2 = A083 (Local0)
                If ((Local1 != Local2))
                {
                    A084 (Local0, Local1)
                }
                ElseIf ((AP10 == One))
                {
                    A084 (Local0, Local1)
                }

                Local0++
            }

            If ((AP02 < AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }
            ElseIf ((AP10 == One))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            AP10 = Zero
        }

        Method (A084, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A085 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A085 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A085 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A085 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A085 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A085 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A085 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A085 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A085 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A085 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A085 (Arg1))
            }
        }

        Method (A083, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A086 ())
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A086 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A086 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A086 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A086 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A086 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A086 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A086 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A086 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A086 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A086 ())
            }
        }

        Method (A080, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A087 ())
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A087 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A087 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A087 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A087 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A087 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A087 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A087 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A087 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A087 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A087 ())
            }
        }

        Method (A082, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A088 ())
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A088 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A088 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A088 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A088 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A088 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A088 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A088 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A088 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A088 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A088 ())
            }
        }

        Method (A077, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A089 ())
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A089 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A089 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A089 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A089 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A089 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A089 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A089 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A089 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A089 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A089 ())
            }
        }

        Method (A078, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A090 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A090 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A090 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A090 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A090 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A090 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A090 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A090 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A090 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A090 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A090 (Arg1))
            }
        }

        Method (A076, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A091 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A091 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A091 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A091 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A091 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A091 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A091 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A091 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A091 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A091 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A091 (Arg1))
            }
        }

        Method (A074, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A092 ())
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A092 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A092 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A092 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A092 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A092 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A092 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A092 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A092 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A092 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A092 ())
            }
        }

        OperationRegion (A161, SystemMemory, AGRB, 0x1000)
        Field (A161, DWordAcc, Lock, Preserve)
        {
            Offset (0xB8), 
            A162,   32
        }

        BankField (A161, A162, 0x03B10530, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A146,   32
        }

        BankField (A161, A162, 0x03B1057C, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A139,   32
        }

        BankField (A161, A162, 0x03B109C4, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A140,   32
        }

        BankField (A161, A162, 0x03B109C8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A141,   32
        }

        BankField (A161, A162, 0x03B109CC, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A142,   32
        }

        BankField (A161, A162, 0x03B109D0, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A143,   32
        }

        BankField (A161, A162, 0x03B109D4, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A144,   32
        }

        BankField (A161, A162, 0x03B109D8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A145,   32
        }

        BankField (A161, A162, 0x13B00084, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A121,   32
        }

        BankField (A161, A162, 0x11140280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A122,   32
        }

        BankField (A161, A162, 0x11141280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A123,   32
        }

        BankField (A161, A162, 0x11142280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A124,   32
        }

        BankField (A161, A162, 0x11143280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A125,   32
        }

        BankField (A161, A162, 0x11240280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A126,   32
        }

        BankField (A161, A162, 0x11241280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A127,   32
        }

        BankField (A161, A162, 0x11242280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A128,   32
        }

        BankField (A161, A162, 0x11143280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A129,   32
        }

        BankField (A161, A162, 0x11144280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A130,   32
        }

        BankField (A161, A162, 0x11145280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A131,   32
        }

        BankField (A161, A162, 0x11146280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A132,   32
        }

        BankField (A161, A162, 0x0C910554, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A160,   32
        }

        BankField (A161, A162, 0x0C9109C8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A153,   32
        }

        BankField (A161, A162, 0x0C9109CC, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A154,   32
        }

        BankField (A161, A162, 0x0C9109D0, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A155,   32
        }

        BankField (A161, A162, 0x0C9109D4, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A156,   32
        }

        BankField (A161, A162, 0x0C9109D8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A157,   32
        }

        BankField (A161, A162, 0x0C9109DC, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A158,   32
        }

        BankField (A161, A162, 0x0C9109E0, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A159,   32
        }

        BankField (A161, A162, 0x11140294, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A168,   32
        }

        BankField (A161, A162, 0x11141294, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A169,   32
        }

        BankField (A161, A162, 0x11142294, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A170,   32
        }

        BankField (A161, A162, 0x11143294, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A171,   32
        }

        Method (A119, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A100 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A100 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A100 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A100 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A100 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A100 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A100 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A100 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A100 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A100 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A100 (Arg1))
            }
        }

        Method (A120, 2, NotSerialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            If ((Arg1 == One))
            {
                If ((Arg0 == Zero))
                {
                    Local0 = 0x00190300
                }

                If ((Arg0 == One))
                {
                    Local0 = 0x001A0300
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = 0x001B0300
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = 0x001C0300
                }

                If ((Arg0 == 0x04))
                {
                    Local0 = 0x001D0300
                }

                If ((Arg0 == 0x05))
                {
                    Local0 = 0x001E0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x001F0300
                }

                If ((Arg0 == 0x07))
                {
                    Local0 = 0x00090300
                }

                If ((Arg0 == 0x08))
                {
                    Local0 = 0x000A0300
                }

                If ((Arg0 == 0x09))
                {
                    Local0 = 0x000B0300
                }

                If ((Arg0 == 0x0A))
                {
                    Local0 = 0x000C0300
                }

                Local1 = A121 /* \_SB_.A121 */
                Local1 &= 0xFF00FCFF
                A121 = (Local0 | Local1)
                Local1 = A121 /* \_SB_.A121 */
                A121 = (0xFFFFFDFF & Local1)
            }
            ElseIf ((Arg1 == Zero))
            {
                If ((Arg0 == Zero))
                {
                    Local1 = A122 /* \_SB_.A122 */
                    A122 = (0x00400000 | Local1)
                    Local1 = A122 /* \_SB_.A122 */
                    A122 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == One))
                {
                    Local1 = A123 /* \_SB_.A123 */
                    A123 = (0x00400000 | Local1)
                    Local1 = A123 /* \_SB_.A123 */
                    A123 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x02))
                {
                    Local1 = A124 /* \_SB_.A124 */
                    A124 = (0x00400000 | Local1)
                    Local1 = A124 /* \_SB_.A124 */
                    A124 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x03))
                {
                    Local1 = A125 /* \_SB_.A125 */
                    A125 = (0x00400000 | Local1)
                    Local1 = A125 /* \_SB_.A125 */
                    A125 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x04))
                {
                    Local1 = A126 /* \_SB_.A126 */
                    A126 = (0x00400000 | Local1)
                    Local1 = A126 /* \_SB_.A126 */
                    A126 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x05))
                {
                    Local1 = A127 /* \_SB_.A127 */
                    A127 = (0x00400000 | Local1)
                    Local1 = A127 /* \_SB_.A127 */
                    A127 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x06))
                {
                    Local1 = A128 /* \_SB_.A128 */
                    A128 = (0x00400000 | Local1)
                    Local1 = A128 /* \_SB_.A128 */
                    A128 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x07))
                {
                    Local1 = A129 /* \_SB_.A129 */
                    A129 = (0x00400000 | Local1)
                    Local1 = A129 /* \_SB_.A129 */
                    A129 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x08))
                {
                    Local1 = A130 /* \_SB_.A130 */
                    A130 = (0x00400000 | Local1)
                    Local1 = A130 /* \_SB_.A130 */
                    A130 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x09))
                {
                    Local1 = A131 /* \_SB_.A131 */
                    A131 = (0x00400000 | Local1)
                    Local1 = A131 /* \_SB_.A131 */
                    A131 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x0A))
                {
                    Local1 = A132 /* \_SB_.A132 */
                    A132 = (0x00400000 | Local1)
                    Local1 = A132 /* \_SB_.A132 */
                    A132 = (0xFFBFFFFF & Local1)
                }
            }

            Release (\_SB.AM00)
        }

        Method (A010, 2, NotSerialized)
        {
            Local0 = Zero
            While ((Local0 < 0x0B))
            {
                Local1 = A119 (Local0, Arg1)
                If ((Local1 == One))
                {
                    A120 (Local0, Arg1)
                    Break
                }

                Local0++
            }
        }

        Method (A045, 1, NotSerialized)
        {
            Local0 = 0xFF
            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR0.A104 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR1.A104 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR2.A104 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR3.A104 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR1.ABR4.A104 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR1.ABR5.A104 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR1.ABR6.A104 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR1.ABR7.A104 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR1.ABR8.A104 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR1.ABR9.A104 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR1.ABRA.A104 (Arg0)
            }

            Return (Local0)
        }

        Method (A018, 2, Serialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            CreateDWordField (Arg1, Zero, A133)
            CreateDWordField (Arg1, 0x04, A134)
            CreateDWordField (Arg1, 0x08, A135)
            CreateDWordField (Arg1, 0x0C, A136)
            CreateDWordField (Arg1, 0x10, A137)
            CreateDWordField (Arg1, 0x14, A138)
            A139 = Zero
            While ((A139 != Zero)){}
            A140 = A133 /* \_SB_.A018.A133 */
            A141 = A134 /* \_SB_.A018.A134 */
            A142 = A135 /* \_SB_.A018.A135 */
            A143 = A136 /* \_SB_.A018.A136 */
            A144 = A137 /* \_SB_.A018.A137 */
            A145 = A138 /* \_SB_.A018.A138 */
            A146 = Arg0
            While ((A139 == Zero)){}
            Release (\_SB.AM00)
        }

        Method (A046, 2, Serialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            CreateDWordField (Arg1, Zero, A147)
            CreateDWordField (Arg1, 0x04, A148)
            CreateDWordField (Arg1, 0x08, A149)
            CreateDWordField (Arg1, 0x0C, A150)
            CreateDWordField (Arg1, 0x10, A151)
            CreateDWordField (Arg1, 0x14, A152)
            Local0 = (0x80000000 & A153) /* \_SB_.A153 */
            While ((Local0 == Zero))
            {
                Local0 = (0x80000000 & A153) /* \_SB_.A153 */
            }

            A154 = A147 /* \_SB_.A046.A147 */
            A155 = A148 /* \_SB_.A046.A148 */
            A156 = A149 /* \_SB_.A046.A149 */
            A157 = A150 /* \_SB_.A046.A150 */
            A158 = A151 /* \_SB_.A046.A151 */
            A159 = A152 /* \_SB_.A046.A152 */
            Local1 = (Arg0 & 0xFF)
            Local1 <<= 0x08
            A153 = Local1
            A160 = 0xFFFFFFFF
            Local0 = (0x80000000 & A153) /* \_SB_.A153 */
            While ((Local0 == Zero))
            {
                Local0 = (0x80000000 & A153) /* \_SB_.A153 */
            }

            Release (\_SB.AM00)
        }

        Method (AMNR, 1, NotSerialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            BankField (A161, A162, Arg0, DWordAcc, NoLock, Preserve)
            {
                Offset (0xBC), 
                A163,   32
            }

            Release (\_SB.AM00)
            Return (A163) /* \_SB_.AMNR.A163 */
        }

        Method (AMNW, 2, NotSerialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            BankField (A161, A162, Arg0, DWordAcc, NoLock, Preserve)
            {
                Offset (0xBC), 
                A164,   32
            }

            A164 = Arg1
            Release (\_SB.AM00)
        }

        Method (A032, 1, Serialized)
        {
            CreateWordField (Arg0, Zero, A165)
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, Zero, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            Local0 = 0x02
            While ((Local0 < A165))
            {
                Local1 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x10)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x18)
                Local0++
                A012 = Zero
                A013 = Zero
                A014 = Zero
                A015 = Zero
                A016 = Zero
                A017 = Zero
                If ((Local1 == One))
                {
                    A012 = Local2
                    A018 (0x4E, Local7)
                }

                If ((Local1 == 0x03))
                {
                    A012 = Local2
                    A018 (0x3F, Local7)
                }

                If ((Local1 == 0x04))
                {
                    A012 = Local2
                    A018 (0x3E, Local7)
                }

                If ((Local1 == 0x05))
                {
                    A012 = Local2
                    A018 (0x4F, Local7)
                }

                If ((Local1 == 0x06))
                {
                    A012 = Local2
                    A018 (0x3E, Local7)
                }

                If ((Local1 == 0x07))
                {
                    A012 = Local2
                    A018 (0x5F, Local7)
                }

                If ((Local1 == 0x08))
                {
                    A012 = Local2
                    A018 (0x61, Local7)
                }

                If ((Local1 == 0x0B))
                {
                    A012 = Local2
                    A018 (0x3C, Local7)
                }

                If ((Local1 == 0x0C))
                {
                    A012 = Local2
                    A018 (0x3D, Local7)
                }

                If ((Local1 == 0x10))
                {
                    A012 = Local2
                    A018 (0x3F, Local7)
                }

                If ((Local1 == 0x11))
                {
                    A012 = Local2
                    A018 (0x2F, Local7)
                }

                If ((Local1 == 0x13))
                {
                    A012 = Local2
                    A018 (0x60, Local7)
                }

                If ((Local1 == 0x20))
                {
                    A012 = Local2
                    A018 (0x50, Local7)
                }

                If ((Local1 == 0x21))
                {
                    A012 = Local2
                    A018 (0x51, Local7)
                }

                If ((Local1 == 0x22))
                {
                    A012 = Local2
                    A018 (0x52, Local7)
                }

                If ((Local1 == 0x23))
                {
                    A012 = Local2
                    A018 (0x53, Local7)
                }

                If ((Local1 == 0x24))
                {
                    A012 = Local2
                    A018 (0x54, Local7)
                }

                If ((Local1 == 0x25))
                {
                    A012 = Local2
                    A018 (0x55, Local7)
                }

                If ((Local1 == 0x26))
                {
                    A012 = Local2
                    A018 (0x56, Local7)
                }

                If ((Local1 == 0x27))
                {
                    A012 = Local2
                    A018 (0x57, Local7)
                }

                If ((Local1 == 0x28))
                {
                    A012 = Local2
                    A018 (0x58, Local7)
                }

                If ((Local1 == 0x29))
                {
                    A012 = Local2
                    A018 (0x59, Local7)
                }

                If ((Local1 == 0x2A))
                {
                    A012 = Local2
                    A018 (0x5A, Local7)
                }

                If ((Local1 == 0x2B))
                {
                    A012 = Local2
                    A018 (0x5B, Local7)
                }

                If ((Local1 == 0x2C))
                {
                    A012 = Local2
                    A018 (0x5C, Local7)
                }

                If ((Local1 == 0x2D))
                {
                    A012 = Local2
                    A018 (0x5D, Local7)
                }

                If ((Local1 == 0x2E))
                {
                    A012 = Local2
                    A018 (0x5E, Local7)
                }

                If ((Local1 == 0x30))
                {
                    A012 = Local2
                    A018 (0x6B, Local7)
                    Local3 = Buffer (0x08){}
                    CreateDWordField (Local3, Zero, A166)
                    CreateDWordField (Local3, 0x04, A167)
                    A166 = A140 /* \_SB_.A140 */
                    A167 = A141 /* \_SB_.A141 */
                    Return (Local3)
                }

                If ((Local1 == 0x31))
                {
                    A012 = Local2
                    A018 (0x6C, Local7)
                }

                If ((Local1 == 0x32))
                {
                    A012 = Local2
                    A018 (0x6D, Local7)
                }
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x8B)  // _UID: Unique ID
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR0.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR0.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR0.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR0.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR0.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR0.ABR0.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR0.ABR0.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR1.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR1.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR1.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR1.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR1.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR0.ABR1.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR0.ABR1.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR2.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR2.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR2.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR2.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR2.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR0.ABR2.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR0.ABR2.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR3.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR3.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR3.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR3.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR3.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR0.ABR3.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR0.ABR3.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }
        }

        Device (AWR1)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x8C)  // _UID: Unique ID
            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR4.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR4.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR4.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR4.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR4.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR4.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR4.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR4.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR1.ABR4.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR1.ABR4.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR4.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR1.ABR4.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR1.ABR4.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR5)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x85)  // _UID: Unique ID
                Name (AB12, 0x84)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR5.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR5.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR5.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR5.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR5.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR5.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR5.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR5.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR1.ABR5.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR1.ABR5.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR5.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR1.ABR5.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR1.ABR5.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR6)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x86)  // _UID: Unique ID
                Name (AB12, 0x98)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR6.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR6.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR6.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR6.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR6.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR6.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR6.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR6.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR1.ABR6.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR1.ABR6.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR6.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR1.ABR6.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR1.ABR6.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR7)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x87)  // _UID: Unique ID
                Name (AB12, 0xAC)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR7.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR7.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR7.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR7.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR7.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR7.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR7.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR7.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR1.ABR7.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR1.ABR7.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR7.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR1.ABR7.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR1.ABR7.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR8)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x88)  // _UID: Unique ID
                Name (AB12, 0xC0)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR8.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR8.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR1.ABR8.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR1.ABR8.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR8.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR1.ABR8.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR1.ABR8.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABR9)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x89)  // _UID: Unique ID
                Name (AB12, 0xD4)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR9.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR9.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR1.ABR9.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR1.ABR9.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR9.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR1.ABR9.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR1.ABR9.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }

            Device (ABRA)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8A)  // _UID: Unique ID
                Name (AB12, 0xE8)
                Name (AB00, Zero)
                Name (AB01, Zero)
                Name (AB0E, Zero)
                Name (AB02, Zero)
                Name (AB03, Zero)
                Name (AB04, Zero)
                Name (AB05, Zero)
                Name (AB06, Zero)
                Name (AB07, Zero)
                Name (AB08, Zero)
                Name (AB09, Zero)
                Name (AB0A, Zero)
                Name (AB0B, Zero)
                Name (AB0C, Zero)
                Name (AB0D, Zero)
                OperationRegion (A105, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A105, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A098,   8, 
                    A099,   8, 
                    Offset (0x68), 
                    A106,   2, 
                        ,   2, 
                    A107,   1, 
                    A108,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A109,   1, 
                    Offset (0x88), 
                    A110,   4, 
                        ,   1, 
                    A111,   1
                }

                Name (AB10, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + Zero)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + One)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A093, 0, NotSerialized)
                {
                    Local0 = A075 ()
                    If ((Local0 == One))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRA.AB01 */
                    }

                    If ((Local0 == Zero))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRA.AB0E */
                    }
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB10 != Zero))
                    {
                        If ((AB10 == One))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB05 != Zero))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRA.AB05 */
                    }

                    If ((AB10 > One))
                    {
                        Return ((AB10 - One))
                    }

                    Return (Zero)
                }

                Method (A087, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == Zero))
                    {
                        If ((AB05 != Zero))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRA.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRA.AB0E */
                    }

                    Local0 = A094 ()
                    If ((Local0 != Zero))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRA.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A093 ()
                    If ((\_SB.AP03 != Zero))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A086, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRA.AB02 */
                }

                Method (A089, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRA.AB00 */
                }

                Method (A085, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A095 (Arg0)
                    If ((AB10 != Zero)){}
                    Else
                    {
                    }

                    A096 (Zero)
                    Name (A097, Zero)
                    A096 (One)
                }

                Method (A090, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A091, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A098) && (Local0 <= A099)))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A100, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (A092, 0, NotSerialized)
                {
                    AB10 = Zero
                }

                Method (A095, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == One))
                    {
                        If ((AB04 == One)){}
                    }
                    Else
                    {
                    }
                }

                Method (A101, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = A102 (Local0, Zero)
                    Local2 = A102 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A102 (Zero, Local0)
                                    Local5 = Zero
                                    If ((((Local4 & 0x09) == Zero) && (Local4 != Zero)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A102 (Zero, Local0)
                                        }

                                        If ((Arg0 != Zero))
                                        {
                                            A103 (0x63, (Local4 & 0xFFFFFFF0), Zero)
                                            A103 (0x64, Local5, Zero)
                                            A103 (0x67, Zero, Zero)
                                            A103 (0x66, Zero, Zero)
                                            Break
                                        }
                                        Else
                                        {
                                            A103 (0x67, Zero, Zero)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A104, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR1.ABRA.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR1.ABRA.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A115, 2, NotSerialized)
                {
                    If ((A102 (Arg0, Zero) == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = A102 (Arg0, 0x34)
                    While (One)
                    {
                        Local1 = A102 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == Zero))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (A096, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((A102 (Local0, Zero) != 0xFFFFFFFF))
                    {
                        Local1 = (A102 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = Zero
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A115 (Local0, 0x10)
                            If ((Local1 == Zero))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == Zero))
                            {
                                Local2 = A102 (Local0, (Local1 + 0x10))
                                A114 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A114 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A114, 3, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A102, 2, Serialized)
                {
                    Local0 = (AGRB + (A099 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRA.A102.ADRR */
                }

                Method (A112, 1, NotSerialized)
                {
                    If ((AB0B != One))
                    {
                        Return (Zero)
                    }

                    Return (A100 (Arg0))
                }

                Method (A113, 1, NotSerialized)
                {
                    Name (A097, Zero)
                    Local2 = Zero
                    A097 = A106 /* \_SB_.AWR1.ABRA.A106 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == One))
                    {
                        A107 = Zero
                        Local0 = One
                    }
                    Else
                    {
                        A096 (Zero)
                        Local0 = A102 (Zero, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A114 (Zero, 0x04, (Local0 & ~0x04))
                            Local0 = A102 (One, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A114 (One, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = Zero
                        A107 = One
                        Local0 = 0x05
                    }

                    A106 = Zero
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == One))
                        {
                            Local2 = One
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A102 (Zero, Zero)
                            AB05 = Zero
                            AB04 = Zero
                            AB10 = Zero
                            Local2 = Zero
                            Local0 = 0x08
                        }
                    }

                    A106 = A097 /* \_SB_.AWR1.ABRA.A113.A097 */
                    If ((A097 != Zero))
                    {
                        A096 (One)
                    }

                    Return (Local2)
                }
            }
        }

        Method (A172, 1, Serialized)
        {
            If ((DerefOf (\_SB.ADAT [0x08]) == One))
            {
                Local0 = Zero
                While ((Local0 < 0x0B))
                {
                    A173 (Local0, Arg0)
                    Local0++
                }
            }
        }

        Method (A103, 3, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, Zero, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            A012 = Arg1
            A013 = Arg2
            A018 (Arg0, Local7)
        }

        Method (A173, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (\_SB.AWR0.ABR0.A101 (Arg1))
            }

            If ((Arg0 == One))
            {
                Return (\_SB.AWR0.ABR1.A101 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A101 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A101 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A101 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A101 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A101 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A101 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A101 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A101 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A101 (Arg1))
            }
        }

        Method (A065, 1, Serialized)
        {
            Local0 = Zero
            Local6 = DerefOf (Arg0 [Local0])
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, Zero, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            Local0 = 0x02
            Local1 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
            A012 = Zero
            A013 = Zero
            A014 = Zero
            A015 = Zero
            A016 = Zero
            A017 = Zero
            If ((Local1 == Zero))
            {
                A012 = Local2
                A172 (Zero)
            }

            If ((Local1 == One))
            {
                A012 = Local2
                A172 (One)
            }

            If ((Local1 == 0x02))
            {
                A012 = Local2
                A018 (0x66, Local7)
            }

            If ((Local1 == 0x03))
            {
                A012 = Local2
                A018 (0x67, Local7)
            }
        }

        Name (A008, One)
        Name (A009, Zero)
        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (AWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (APPM, 1, NotSerialized)
        {
            Local0 = DerefOf (Arg0 [0x04])
            Local1 = DerefOf (Arg0 [0x02])
            A010 (Local0, Local1)
        }

        Method (A011, 0, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, Zero, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            A012 = Zero
            A013 = Zero
            A014 = Zero
            A015 = Zero
            A016 = Zero
            A017 = Zero
            If ((AD00 == Zero))
            {
                A018 (0x68, Local7)
            }
            Else
            {
                A018 (0x69, Local7)
            }
        }

        Method (A019, 2, NotSerialized)
        {
        }
    }
}



VFCT
----
[000h 0000   4]                    Signature : "VFCT"    
[004h 0004   4]                 Table Length : 0000B084
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : FC
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD"
[020h 0032   4]        Asl Compiler Revision : 31504F47


**** Unknown ACPI table signature [VFCT]


Raw Table Data: Length 45188 (0xB084)

    0000: 56 46 43 54 84 B0 00 00 01 FC 41 4C 41 53 4B 41  // VFCT......ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 44 00  // A M I ......AMD.
    0020: 47 4F 50 31 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  // GOP12..]...I....
    0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  // ..y.L...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 02 10 BF 73 00 00 00 00  // ...........s....
    0060: 01 00 00 00 00 B0 00 00 55 AA 58 E9 46 29 00 00  // ........U.X.F)..
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 7C 03 00 00 00 00 49 42 4D 6A C4 A4 00 00 00 00  // |.....IBMj......
    0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  // ........ 7612955
    00A0: 32 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // 20..............
    00B0: 4E 03 00 00 00 00 00 00 31 31 2F 32 39 2F 32 31  // N.......11/29/21
    00C0: 20 32 31 3A 30 33 00 00 39 00 00 00 E9 39 2A 00  //  21:03..9....9*.
    00D0: E9 43 2A 00 00 00 10 02 09 00 00 00 01 02 40 00  // .C*...........@.
    00E0: 00 C3 BF 73 00 00 00 00 6E 00 64 00 DB 00 00 00  // ...s....n.d.....
    00F0: 5A 00 DC 05 10 0E D8 0E 7C 99 05 00 00 00 00 00  // Z.......|.......
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0150: 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00  // ................
    0160: 00 00 00 00 16 00 34 03 0F FC 40 01 00 00 00 00  // ......4...@.....
    0170: 08 00 08 00 08 80 41 CC F3 28 42 CD A3 10 80 E8  // ......A..(B.....
    0180: 0D 7E E3 78 CE FF FF 00 00 00 00 00 00 20 7E C5  // .~.x......... ~.
    0190: FF 01 00 00 00 80 05 10 00 90 F5 3B 87 B2 6A 3A  // ...........;..j:
    01A0: 47 3A C7 00 30 00 00 33 00 AE 73 53 05 80 0F 08  // G:..0..3..sS....
    01B0: 21 04 FF 3C 00 C0 22 02 02 E2 86 1C 65 D5 74 0E  // !..<..".....e.t.
    01C0: 00 E0 81 0A 00 00 90 08 F0 3E A7 68 24 DA 21 00  // .........>.h$.!.
    01D0: 21 00 21 00 01 00 C0 02 50 02 91 01 02 00 18 80  // !.!.....P.......
    01E0: 01 40 06 06 1E 11 07 52 80 18 0C 0E 12 00 00 00  // .@.....R........
    01F0: 0E F0 02 00 00 00 08 00 80 01 06 00 08 40 18 10  // .............@..
    0200: F0 00 00 00 20 00 00 00 04 00 00 00 1C 04 00 00  // .... ...........
    0210: C8 00 00 00 30 00 00 00 00 00 F8 08 40 00 00 00  // ....0.......@...
    0220: 00 00 00 04 00 00 00 00 1C 32 00 88 76 DC 90 03  // .........2..v...
    0230: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E4  // ................
    0240: 27 09 40 10 18 00 64 00 00 00 00 C0 98 07 00 00  // '.@...d.........
    0250: 40 FA 01 A0 00 24 00 00 00 80 10 90 01 18 00 00  // @....$..........
    0260: 08 00 80 81 47 01 00 00 00 10 11 30 00 00 00 00  // ....G......0....
    0270: 02 FC CE C1 0D B9 00 04 31 31 33 2D 32 34 33 37  // ........113-2437
    0280: 53 4D 32 2D 55 31 38 00 4E 41 56 49 32 31 45 58  // SM2-U18.NAVI21EX
    0290: 54 00 50 43 49 5F 45 58 50 52 45 53 53 00 47 44  // T.PCI_EXPRESS.GD
    02A0: 44 52 36 00 0D 0A 32 45 34 33 37 32 30 31 20 4E  // DR6...2E437201 N
    02B0: 32 31 20 58 4C 20 31 36 47 20 32 31 39 2F 32 32  // 21 XL 16G 219/22
    02C0: 39 20 53 61 6D 4D 69 63 20 32 32 30 20 20 20 20  // 9 SamMic 220    
    02D0: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    02E0: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    02F0: 20 20 0D 0A 00 0D 0A 20 0D 0A 00 28 43 29 20 31  //   ..... ...(C) 1
    0300: 39 38 38 2D 32 30 32 30 2C 20 41 64 76 61 6E 63  // 988-2020, Advanc
    0310: 65 64 20 4D 69 63 72 6F 20 44 65 76 69 63 65 73  // ed Micro Devices
    0320: 2C 20 49 6E 63 2E 00 41 54 4F 4D 42 49 4F 53 42  // , Inc..ATOMBIOSB
    0330: 4B 2D 41 4D 44 20 56 45 52 30 32 30 2E 30 30 31  // K-AMD VER020.001
    0340: 2E 30 30 30 2E 30 37 31 2E 30 30 30 30 30 30 00  // .000.071.000000.
    0350: 34 33 37 4C 32 37 53 4D 2E 55 31 38 00 32 33 38  // 437L27SM.U18.238
    0360: 32 35 32 35 20 00 35 39 35 38 33 37 20 20 00 20  // 2525 .595837  . 
    0370: 20 20 20 20 20 20 20 00 53 41 50 50 48 49 52 45  //        .SAPPHIRE
    0380: 5F 4E 41 56 49 32 31 45 58 54 5F 32 45 34 33 37  // _NAVI21EXT_2E437
    0390: 32 30 30 5F 32 32 30 5F 41 30 5F 47 44 52 36 5F  // 200_220_A0_GDR6_
    03A0: 31 36 5F 53 41 4D 53 55 4E 47 5C 63 6F 6E 66 69  // 16_SAMSUNG\confi
    03B0: 67 2E 68 00 00 00 2C 00 02 03 41 54 4F 4D 00 C0  // g.h...,...ATOM..
    03C0: 4B 2A E8 02 A1 03 3C 02 7E 2A 00 00 00 00 A2 1D  // K*....<.~*......
    03D0: 37 E4 7C 03 10 A8 D4 03 00 00 18 0B 00 00 00 00  // 7.|.............
    03E0: 03 00 00 00 50 43 49 52 02 10 BF 73 00 00 18 00  // ....PCIR...s....
    03F0: 00 00 00 03 58 00 01 14 00 00 00 00 41 4D 44 20  // ....X.......AMD 
    0400: 41 54 4F 4D 42 49 4F 53 00 16 D9 CE 75 00 00 00  // ATOMBIOS....u...
    0410: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0420: 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00  // ................
    0430: 00 00 00 00 00 00 00 00 00 00 00 00 4A 00 02 01  // ............J...
    0440: 00 00 00 00 E8 08 24 1E 7C 08 EC 1E 20 04 7C 04  // ......$.|... .|.
    0450: 10 0A 04 0B 00 00 48 0D B4 06 20 1F 54 0D A8 1F  // ......H... .T...
    0460: 00 00 94 1F AC 0D 00 00 CC 0D E0 0D F4 07 1C 1E  // ................
    0470: EC 0D 00 00 00 00 20 07 3C 0E 00 00 00 00 00 00  // ...... .<.......
    0480: 58 1D 00 00 00 00 00 00 5C 00 02 01 00 00 00 00  // X.......\.......
    0490: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04A0: 00 00 00 00 06 00 00 00 C8 00 00 00 00 00 34 21  // ..............4!
    04B0: 00 00 B8 0B 00 00 00 00 7D 00 00 01 00 00 00 00  // ........}.......
    04C0: 00 FF FF 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04E0: 00 00 00 00 38 02 05 04 10 00 38 00 7C 00 90 01  // ....8.....8.|...
    04F0: D8 01 48 00 30 75 00 00 0C 00 3F 05 3E 00 00 00  // ..H.0u....?.>...
    0500: 40 9C 00 00 0C 00 3F 05 3E 00 00 00 FF FF FF 00  // @.....?.>.......
    0510: 0C 00 3F 05 77 21 00 00 00 00 00 00 FF FF FF 00  // ..?.w!..........
    0520: 0C 00 3F 04 3E 00 00 00 00 00 00 00 0A 8B 02 00  // ..?.>...........
    0530: 0C 00 3F 04 3E 00 00 00 15 16 05 00 0C 00 3F 04  // ..?.>.........?.
    0540: 3E 00 00 00 1C C8 06 00 0C 00 3F 04 3E 00 00 00  // >.........?.>...
    0550: 23 7A 08 00 0C 00 3F 04 3E 00 00 00 00 00 00 00  // #z....?.>.......
    0560: 48 3F 00 00 3F 00 44 00 00 16 00 00 00 04 01 1F  // H?..?.D.........
    0570: 00 00 00 04 02 2C 00 00 00 04 03 3E 00 00 00 04  // .....,.....>....
    0580: 08 1B 50 00 00 04 09 25 60 00 00 04 0A 35 90 00  // ..P....%`....5..
    0590: 00 04 10 21 B0 00 00 04 11 2F F0 00 00 04 18 2A  // ...!...../.....*
    05A0: 40 01 00 04 78 69 00 00 3F 00 44 00 00 16 00 00  // @...xi..?.D.....
    05B0: 00 04 01 1F 00 00 00 04 02 2C 00 00 00 04 03 3E  // .........,.....>
    05C0: 00 00 00 04 08 1B 50 00 00 04 09 25 60 00 00 04  // ......P....%`...
    05D0: 0A 35 90 00 00 04 10 21 B0 00 00 04 11 2F F0 00  // .5.....!...../..
    05E0: 00 04 18 2A 40 01 00 04 F0 D2 00 00 3F 00 44 00  // ...*@.......?.D.
    05F0: 00 1D 00 00 00 04 01 26 00 00 00 04 02 30 00 00  // .......&.....0..
    0600: 00 04 03 3E 00 00 00 04 08 22 40 00 00 04 09 2C  // ...>....."@....,
    0610: 60 00 00 04 0A 37 70 00 00 04 10 27 90 00 00 04  // `....7p....'....
    0620: 11 32 C0 00 00 04 18 2E 00 01 00 04 68 3C 01 00  // .2..........h<..
    0630: 3F 00 44 00 00 1D 00 00 00 04 01 26 00 00 00 04  // ?.D........&....
    0640: 02 30 00 00 00 04 03 3E 00 00 00 04 08 22 40 00  // .0.....>....."@.
    0650: 00 04 09 2C 60 00 00 04 0A 37 70 00 00 04 10 27  // ...,`....7p....'
    0660: 90 00 00 04 11 32 C0 00 00 04 18 2E 00 01 00 04  // .....2..........
    0670: 00 00 00 00 00 01 02 03 02 03 00 01 00 07 05 00  // ................
    0680: 00 01 02 03 02 03 00 01 00 07 05 00 00 01 02 03  // ................
    0690: 02 03 00 01 00 07 05 00 00 01 02 03 02 03 00 01  // ................
    06A0: 00 07 05 00 00 01 02 03 02 03 00 01 00 07 05 00  // ................
    06B0: 00 01 02 03 02 03 00 01 00 07 05 00 08 30 00 00  // .............0..
    06C0: 9B 00 00 00 07 30 00 00 46 25 00 00 08 31 00 00  // .....0..F%...1..
    06D0: 9B 00 00 00 07 31 00 00 46 25 00 00 08 32 00 00  // .....1..F%...2..
    06E0: 9B 00 00 00 07 32 00 00 46 25 00 00 08 33 00 00  // .....2..F%...3..
    06F0: 9B 00 00 00 07 33 00 00 46 25 00 00 56 00 00 00  // .....3..F%..V...
    0700: 05 00 00 00 46 00 00 00 30 00 00 00 50 00 00 00  // ....F...0...P...
    0710: 30 00 00 00 FF FF FF FF 00 00 00 00 6C 00 02 01  // 0...........l...
    0720: B5 5D 00 00 00 00 01 00 B5 5D 00 00 08 08 02 00  // .].......]......
    0730: B5 5D 00 00 10 10 03 00 B5 5D 00 00 18 14 04 00  // .].......]......
    0740: B5 5D 00 00 1A 18 05 00 B5 5D 00 00 1C 1C 06 00  // .].......]......
    0750: 91 5D 00 00 08 08 90 00 95 5D 00 00 08 08 91 00  // .].......]......
    0760: 99 5D 00 00 08 08 92 00 9D 5D 00 00 08 08 93 00  // .].......]......
    0770: A1 5D 00 00 08 08 94 00 A5 5D 00 00 08 08 95 00  // .].......]......
    0780: A9 5D 00 00 08 08 97 00 D4 00 04 04 00 00 00 00  // .]..............
    0790: 24 F4 00 00 10 27 88 13 00 00 00 00 00 00 00 00  // $....'..........
    07A0: 5E 01 4E 0C 01 01 00 00 55 00 00 00 10 27 BF 73  // ^.N.....U....'.s
    07B0: 00 03 06 01 00 06 06 00 C8 91 05 00 80 EA 82 2B  // ...............+
    07C0: 00 00 00 00 00 00 00 00 00 00 00 00 54 00 01 00  // ............T...
    07D0: 00 00 00 00 00 00 00 00 00 00 00 00 10 11 3D 10  // ..............=.
    07E0: 4D 1C 02 00 00 45 00 00 00 00 00 00 00 00 00 00  // M....E..........
    07F0: 00 00 00 00 00 00 AA 0A 22 22 22 00 AA FA 03 00  // ........""".....
    0800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0810: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0820: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0830: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0850: 00 00 00 00 00 00 00 00 00 00 00 00 88 00 01 04  // ................
    0860: 88 06 04 00 13 31 48 00 1E 21 00 00 6C 00 00 00  // .....1H..!..l...
    0870: 08 00 00 00 13 32 51 00 20 21 00 00 73 00 00 00  // .....2Q. !..s...
    0880: 80 00 00 00 13 33 5A 00 21 21 00 00 7A 00 00 00  // .....3Z.!!..z...
    0890: 00 02 00 00 0C 31 63 00 20 22 00 00 81 00 00 00  // .....1c. "......
    08A0: 00 04 00 00 01 04 93 00 02 04 04 00 FF 01 04 91  // ................
    08B0: 00 02 04 02 00 FF 01 04 95 00 02 04 06 00 FF 01  // ................
    08C0: 04 90 00 02 04 01 00 FF 14 06 0F 0E 00 00 FF 14  // ................
    08D0: 06 0F 0E 00 00 FF 14 06 0F 0E 00 00 FF 14 06 0F  // ................
    08E0: 0E 00 00 FF 6C 00 03 04 47 00 01 14 50 C3 00 00  // ....l...G...P...
    08F0: A0 86 01 00 01 44 04 00 00 00 00 00 4C 00 00 00  // .....D......L...
    0900: 9D 03 20 03 46 05 64 03 01 00 00 00 80 00 00 00  // .. .F.d.........
    0910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0920: 00 00 00 00 DC 05 00 00 84 03 84 03 46 05 84 03  // ............F...
    0930: 06 09 00 00 00 00 00 00 00 0C 00 00 61 60 01 00  // ............a`..
    0940: 00 00 00 80 80 8D 5B 00 00 00 00 00 00 00 00 00  // ......[.........
    0950: 28 01 04 09 01 01 E0 00 00 01 01 00 01 01 E0 00  // (...............
    0960: 01 02 01 00 00 01 00 00 02 03 01 00 00 01 00 00  // ................
    0970: 03 04 01 00 00 01 00 00 04 05 00 00 00 01 00 00  // ................
    0980: 05 06 00 00 00 02 00 00 07 08 03 00 00 02 00 00  // ................
    0990: 05 09 05 00 00 02 00 00 06 0A 06 00 00 00 00 00  // ................
    09A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09D0: 00 00 00 00 FF FF 00 00 00 02 01 03 03 0C 00 00  // ................
    09E0: FE 01 00 00 40 00 00 00 40 00 00 00 40 00 00 00  // ....@...@...@...
    09F0: 00 80 01 00 FF 00 05 00 05 00 FF 00 00 01 02 00  // ................
    0A00: FF FF 00 00 00 00 1F 00 00 00 1F 00 01 10 21 00  // ..............!.
    0A10: 00 00 1F 00 FF FF 00 00 10 00 00 00 DB 00 00 00  // ................
    0A20: 10 0C 04 02 10 10 08 02 E2 04 E2 04 E2 04 E2 04  // ................
    0A30: A0 0F A0 0F A0 0F A0 0F 01 00 00 00 10 10 10 10  // ................
    0A40: 10 10 10 10 10 10 10 10 10 10 10 10 00 00 00 00  // ................
    0A50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A70: 00 00 00 00 00 00 00 00 F4 00 03 05 01 0B 00 00  // ................
    0A80: 00 00 4E 0C 00 00 4E 0C 10 27 00 00 C8 91 05 00  // ..N...N..'......
    0A90: 30 4B 07 00 04 00 00 00 00 53 07 00 30 75 00 00  // 0K.......S..0u..
    0AA0: 0C A3 00 00 50 81 00 00 54 CC 00 00 7B F1 00 00  // ....P...T...{...
    0AB0: 0C A3 00 00 00 00 00 00 20 30 05 00 00 00 00 00  // ........ 0......
    0AC0: A8 F1 01 00 D4 30 00 00 12 00 00 00 00 00 00 00  // .....0..........
    0AD0: 28 1D 01 00 A0 09 01 00 00 00 00 00 33 33 81 01  // (...........33..
    0AE0: 7D 1A 09 96 30 14 C9 02 03 00 03 00 48 08 19 00  // }...0.......H...
    0AF0: 28 1D 01 00 88 13 00 00 02 00 00 00 02 00 00 00  // (...............
    0B00: 02 00 00 00 02 00 00 00 01 00 00 00 01 00 00 00  // ................
    0B10: 01 80 00 00 7D 1F 1E 96 05 80 00 00 FF FF 0F 00  // ....}...........
    0B20: 71 00 FF 2F 4D 00 00 A5 00 00 00 00 00 00 00 00  // q../M...........
    0B30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B60: 00 00 00 00 00 00 00 00 00 00 00 00 44 02 02 06  // ............D...
    0B70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2C 02  // ..............,.
    0B80: 24 50 53 50 7F A6 B0 C5 1F 00 00 00 00 00 00 00  // $PSP............
    0B90: 00 00 00 00 40 04 00 00 00 00 03 00 00 00 00 00  // ....@...........
    0BA0: 01 00 00 00 00 30 00 00 00 D0 05 00 00 00 00 00  // .....0..........
    0BB0: 03 00 00 00 00 30 00 00 00 00 06 00 00 00 00 00  // .....0..........
    0BC0: 04 00 00 00 00 B0 00 00 00 00 00 00 00 00 00 00  // ................
    0BD0: 05 00 00 00 00 01 00 00 00 0A 03 00 00 00 00 00  // ................
    0BE0: 06 00 00 00 00 B0 00 00 00 60 0A 00 00 00 00 00  // .........`......
    0BF0: 07 00 00 00 40 04 00 00 C0 0B 03 00 00 00 00 00  // ....@...........
    0C00: 09 00 00 00 08 00 00 00 18 0D 00 00 00 00 00 00  // ................
    0C10: 11 00 00 00 00 82 00 00 00 F0 06 00 00 00 00 00  // ................
    0C20: 12 00 00 00 00 50 00 00 00 00 08 00 00 00 00 00  // .....P..........
    0C30: 14 00 00 00 00 30 00 00 00 10 03 00 00 00 00 00  // .....0..........
    0C40: 21 00 00 00 C0 00 00 00 00 0B 03 00 00 00 00 00  // !...............
    0C50: 23 00 00 00 00 50 00 00 00 80 0C 00 00 00 00 00  // #....P..........
    0C60: 2D 00 00 00 00 A0 00 00 00 40 03 00 00 00 00 00  // -........@......
    0C70: 2E 00 00 00 00 C0 00 00 00 30 06 00 00 00 00 00  // .........0......
    0C80: 30 00 00 00 00 60 00 00 00 10 0B 00 00 00 00 00  // 0....`..........
    0C90: 32 00 00 00 00 80 00 00 00 C0 0B 00 00 00 00 00  // 2...............
    0CA0: 33 00 00 00 00 70 00 00 00 E0 03 00 00 00 00 00  // 3....p..........
    0CB0: 35 00 00 00 10 00 00 00 20 0D 00 00 00 00 00 00  // 5....... .......
    0CC0: 36 00 00 00 00 50 00 00 00 50 08 00 00 00 00 00  // 6....P...P......
    0CD0: 37 00 00 00 00 10 00 00 00 A0 08 00 00 00 00 00  // 7...............
    0CE0: 38 00 00 00 40 04 00 00 00 05 03 00 00 00 00 00  // 8...@...........
    0CF0: 39 00 00 00 00 50 00 00 00 70 0B 00 00 00 00 00  // 9....P...p......
    0D00: 3D 00 00 00 00 20 00 00 00 30 0A 00 00 00 00 00  // =.... ...0......
    0D10: 40 00 00 00 00 30 00 00 00 40 0C 00 00 00 00 00  // @....0...@......
    0D20: 42 00 00 00 00 10 00 00 00 50 0A 00 00 00 00 00  // B........P......
    0D30: 49 00 00 00 00 C0 00 00 00 50 04 00 00 00 00 00  // I........P......
    0D40: 4A 00 00 00 00 8E 00 00 00 72 07 00 00 00 00 00  // J........r......
    0D50: 4B 00 00 00 00 C0 00 00 00 10 05 00 00 00 00 00  // K...............
    0D60: 4C 00 00 00 00 10 00 00 00 70 0C 00 00 00 00 00  // L........p......
    0D70: 71 00 00 00 00 80 01 00 00 B0 08 00 00 00 00 00  // q...............
    0D80: 01 00 00 00 00 00 00 00 03 01 00 00 00 0C 00 00  // ................
    0D90: 10 0C 04 02 10 10 08 02 64 6D 75 31 32 34 31 5F  // ........dmu1241_
    0DA0: 44 34 31 32 30 45 58 54 2E 30 34 32 00 00 00 00  // D4120EXT.042....
    0DB0: 0C 00 02 01 00 00 00 00 00 00 00 00 58 00 02 06  // ............X...
    0DC0: 03 0A 04 00 0A 02 04 02 64 C0 00 00 65 C0 00 00  // ........d...e...
    0DD0: 66 C0 00 00 67 C0 00 00 E8 C0 00 00 A0 21 00 00  // f...g........!..
    0DE0: 03 6B 01 00 10 27 00 00 0A 04 03 00 00 00 00 00  // .k...'..........
    0DF0: 9F 33 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // .3..............
    0E00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E10: 00 00 00 00 20 00 02 02 00 00 00 00 00 00 00 00  // .... ...........
    0E20: 08 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E30: 00 00 00 00 14 00 02 02 00 00 00 00 00 00 00 00  // ................
    0E40: 00 00 10 00 00 00 00 00 0C 00 02 02 08 00 00 00  // ................
    0E50: 00 00 00 00 50 00 03 03 00 00 00 00 00 F0 06 00  // ....P...........
    0E60: 00 82 00 00 00 00 00 00 64 00 E4 0C 07 08 70 00  // ........d.....p.
    0E70: 10 27 00 00 A0 86 01 00 48 07 01 00 84 B2 00 00  // .'......H.......
    0E80: E4 25 00 00 00 00 00 00 2B E0 0A 00 00 00 00 00  // .%......+.......
    0E90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EA0: 00 00 00 00 1C 0F 02 05 B5 00 21 02 65 08 79 09  // ..........!.e.y.
    0EB0: 4D 0D 00 00 00 00 00 00 03 07 08 08 00 40 00 00  // M............@..
    0EC0: FF FF 00 00 00 00 2D 00 00 70 10 04 72 00 00 00  // ......-..p..r...
    0ED0: 00 00 00 00 00 00 00 08 00 00 00 04 00 00 04 00  // ................
    0EE0: 00 00 0A 08 00 00 40 00 00 00 40 00 00 FF FF 00  // ......@...@.....
    0EF0: 00 00 00 39 00 00 70 10 04 72 00 00 00 00 00 00  // ...9..p..r......
    0F00: 00 00 00 1F 08 00 00 00 04 00 00 0D 00 C0 00 0A  // ................
    0F10: 08 00 00 40 00 4D 54 36 31 4B 35 31 32 4D 33 32  // ...@.MT61K512M32
    0F20: 43 00 00 40 00 00 FF FF 00 00 00 00 37 00 00 70  // C..@........7..p
    0F30: 10 04 72 01 00 00 00 00 00 00 00 00 81 08 00 00  // ..r.............
    0F40: 00 04 00 00 04 00 C0 00 0A 08 00 00 40 00 4B 34  // ............@.K4
    0F50: 5A 41 46 33 32 35 42 4D 00 1D 00 00 00 50 50 01  // ZAF325BM.....PP.
    0F60: 00 52 50 01 00 54 50 01 00 5E 50 01 00 72 50 01  // .RP..TP..^P..rP.
    0F70: 00 00 FE 00 01 04 FE 00 01 08 FE 00 01 10 FE 00  // ................
    0F80: 01 20 FE 00 01 28 FE 00 01 2C FE 00 01 34 FE 00  // . ...(...,...4..
    0F90: 01 3C FE 00 01 44 FE 00 01 48 FE 00 01 4C FE 00  // .<...D...H...L..
    0FA0: 01 54 FE 00 01 58 FE 00 01 78 FE 00 01 7C FE 00  // .T...X...x...|..
    0FB0: 01 80 FE 00 01 88 FE 00 01 98 FE 00 01 9C FE 00  // ................
    0FC0: 01 BC FE 00 01 C4 FE 00 01 02 1D 00 03 03 1D 00  // ................
    0FD0: 03 FF FF FF 00 0D 00 00 00 00 00 06 06 F4 29 E5  // ..............).
    0FE0: 0F 08 00 13 00 08 01 17 00 06 00 85 00 00 00 81  // ................
    0FF0: 04 00 00 81 05 9C 0C B4 02 17 10 80 00 2E CA 4C  // ...............L
    1000: 50 30 83 01 00 20 40 04 70 01 10 06 00 02 03 00  // P0... @.p.......
    1010: 00 3A 3A 28 4A 09 09 10 6D 2A FF 08 00 4A 49 49  // .::(J...m*...JII
    1020: 20 C2 20 51 80 E1 49 8C 60 00 00 04 70 00 00 04  //  . Q..I.`...p...
    1030: 01 00 16 20 20 1E 1E 1E 1E 4A E5 E9 04 18 00 05  // ...  ....J......
    1040: 50 2A 00 00 00 2A 00 00 00 FF FF FF 01 05 00 00  // P*...*..........
    1050: 00 00 00 08 08 F4 25 E5 0F 07 00 13 00 08 00 17  // ......%.........
    1060: 00 06 00 03 00 00 00 03 04 00 00 03 05 9C 00 F4  // ................
    1070: 02 17 10 60 00 22 CA 4C 50 30 83 00 00 20 40 04  // ...`.".LP0... @.
    1080: 60 00 10 06 00 00 00 00 00 38 38 2A 40 07 07 10  // `........88*@...
    1090: 6B 24 88 05 00 00 00 00 00 C0 F0 44 83 E1 49 8C  // k$.........D..I.
    10A0: 40 00 00 00 90 00 00 00 01 00 14 1A 1B 1B 1B 1C  // @...............
    10B0: 1C 4A A5 4A 05 18 00 00 00 2B 00 00 00 22 00 00  // .J.J.....+..."..
    10C0: 00 00 00 00 00 D4 30 00 01 09 05 04 06 EE 00 14  // ......0.........
    10D0: 08 04 03 01 02 02 02 04 03 04 08 02 03 02 0A 14  // ................
    10E0: 0A 0A 02 03 0A 12 14 02 0F 20 A1 07 00 0A 0A 04  // ......... ......
    10F0: 01 01 01 0A 0B 0D 01 02 03 04 03 0F 00 00 00 00  // ................
    1100: 00 00 00 00 00 20 4E 00 01 09 05 05 09 7C 01 20  // ..... N......|. 
    1110: 0A 04 04 01 04 02 02 04 03 04 08 02 03 02 0A 14  // ................
    1120: 0A 0A 02 03 0A 12 20 02 18 20 A1 07 00 0A 0A 04  // ...... .. ......
    1130: 01 01 01 0A 0B 0F 01 02 03 04 03 0F 00 00 00 00  // ................
    1140: 00 00 00 00 00 A8 61 00 01 0A 05 07 0B DB 01 28  // ......a........(
    1150: 0E 04 04 01 04 02 02 04 03 04 08 02 03 02 0A 14  // ................
    1160: 04 04 02 03 0A 12 28 03 1E 20 A1 07 00 0A 0A 04  // ......(.. ......
    1170: 01 01 01 0A 0C 11 01 02 02 04 04 0F 00 00 00 00  // ................
    1180: 00 00 00 00 00 50 C3 00 01 0B 05 0D 15 B6 03 50  // .....P.........P
    1190: 1A 05 08 02 08 02 02 08 04 05 08 02 03 02 0A 14  // ................
    11A0: 04 04 02 03 0A 12 50 05 3C 20 A1 07 00 0A 0A 04  // ......P.< ......
    11B0: 01 01 01 0A 0F 17 01 02 02 04 06 0F 00 00 00 00  // ................
    11C0: 00 00 00 00 00 F8 24 01 01 0D 05 13 1F 91 05 78  // ......$........x
    11D0: 26 08 0C 06 0C 02 03 0C 05 06 08 02 03 02 0A 14  // &...............
    11E0: 04 04 02 03 0A 12 78 08 5A 20 A1 07 00 0A 0A 04  // ......x.Z ......
    11F0: 01 01 01 0A 11 1F 01 02 02 04 09 0F 00 00 00 00  // ................
    1200: 00 00 00 00 00 CC 55 01 01 0F 05 16 24 7F 06 8C  // ......U.....$...
    1210: 2C 09 0E 08 0E 02 04 0E 06 07 08 02 03 02 0A 14  // ,...............
    1220: 04 04 02 03 0A 12 8C 09 69 20 A1 07 00 0A 0A 04  // ........i ......
    1230: 01 01 01 0A 13 23 01 02 02 04 0A 0F 00 00 00 00  // .....#..........
    1240: 00 00 00 00 00 A0 86 01 01 10 05 19 28 6C 07 A0  // ............(l..
    1250: 32 0A 10 0A 0F 02 04 10 06 07 08 02 03 02 0B 14  // 2...............
    1260: 04 04 02 03 0A 12 A0 0A 78 20 A1 07 00 0A 0A 04  // ........x ......
    1270: 01 01 01 0A 14 26 01 02 02 04 0B 0F 00 00 00 00  // .....&..........
    1280: 00 00 00 00 00 48 E8 01 01 12 05 20 33 47 09 C8  // .....H..... 3G..
    1290: 40 0D 14 0E 13 03 05 14 07 08 0C 02 03 02 0C 14  // @...............
    12A0: 04 04 02 03 0A 12 C8 0D 96 20 A1 07 00 0A 0A 04  // ......... ......
    12B0: 01 01 01 0A 16 2E 01 02 02 04 0E 0F 00 00 00 00  // ................
    12C0: 00 00 00 00 00 78 5D 02 01 15 05 26 3D 81 0B F0  // .....x]....&=...
    12D0: 4C 0F 18 12 17 03 06 18 08 09 0C 02 03 03 0C 14  // L...............
    12E0: 04 04 02 03 0A 12 F0 0F B4 20 A1 07 00 0A 0A 04  // ......... ......
    12F0: 01 01 01 0A 1A 36 01 02 02 04 10 0F 00 00 00 00  // .....6..........
    1300: 00 00 00 00 00 20 BF 02 01 17 05 2C 47 5C 0D 18  // ..... .....,G\..
    1310: 58 12 1C 16 1B 04 07 1C 09 0A 10 02 03 03 0D 14  // X...............
    1320: 04 04 02 03 0A 12 18 12 D2 20 A1 07 00 0A 0A 04  // ......... ......
    1330: 01 01 01 0A 1C 3E 01 02 02 04 13 0F 01 01 00 00  // .....>..........
    1340: 00 00 00 00 00 4C F2 02 01 18 07 2F 4C 29 0D 2C  // .....L...../L).,
    1350: 5E 13 1E 16 1D 04 08 1E 0A 0B 10 02 03 03 0E 14  // ^...............
    1360: 04 04 02 03 0A 12 2C 13 E1 20 A1 07 00 0A 0A 04  // ......,.. ......
    1370: 01 01 01 0A 1D 44 01 02 02 04 14 0F 01 01 00 00  // .....D..........
    1380: 00 00 00 00 00 B0 24 03 01 18 07 32 50 4A 0F 40  // ......$....2PJ.@
    1390: 64 14 20 18 1E 04 08 20 0A 0B 10 02 03 03 0E 14  // d. .... ........
    13A0: 04 04 02 03 0A 12 40 14 F0 20 A1 07 00 0A 0A 04  // ......@.. ......
    13B0: 01 01 01 0A 1D 47 01 02 02 04 15 0F 01 01 00 00  // .....G..........
    13C0: 00 00 00 00 00 78 89 03 01 1A 07 39 5B 34 11 69  // .....x.....9[4.i
    13D0: 6B 17 25 1D 22 05 0A 25 0C 0D 14 02 03 03 0E 14  // k.%."..%........
    13E0: 04 04 02 03 0A 12 69 17 0E 20 A1 07 00 0A 0A 04  // ......i.. ......
    13F0: 01 01 01 0A 1F 50 01 02 02 04 18 0F 01 01 01 00  // .....P..........
    1400: 00 00 00 00 00 A8 61 00 02 09 05 09 0D DB 01 1E  // ......a.........
    1410: 0F 03 05 03 05 02 02 05 03 05 08 02 03 01 0A 0A  // ................
    1420: 0A 0A 02 04 0A 0A 1E 03 1E 48 E8 01 00 03 0C 0A  // .........H......
    1430: 02 02 04 0A 10 15 01 02 09 04 04 01 00 00 00 00  // ................
    1440: 00 00 00 00 00 50 C3 00 02 0A 05 0F 17 B6 03 3C  // .....P.........<
    1450: 1E 04 08 05 08 02 02 08 04 06 08 02 03 01 0A 0A  // ................
    1460: 0A 0A 02 04 0A 0A 3C 05 3C 90 D0 03 00 05 0C 0A  // ......<.<.......
    1470: 02 02 04 0A 11 1B 01 02 09 04 07 01 00 00 00 00  // ................
    1480: 00 00 00 00 00 CC 55 01 02 0F 05 1B 29 7F 06 69  // ......U.....)..i
    1490: 35 07 0E 08 0E 04 04 0E 06 08 10 02 03 02 0B 0A  // 5...............
    14A0: 0A 0A 02 04 0A 0A 69 09 69 FC AC 06 00 09 0C 0A  // ......i.i.......
    14B0: 02 02 04 0A 17 28 01 02 0A 04 0C 01 00 00 00 00  // .....(..........
    14C0: 00 00 00 00 00 A0 86 01 02 10 05 1E 2D 6C 07 78  // ............-l.x
    14D0: 3C 08 0F 09 0F 04 04 10 06 08 10 02 03 02 0C 0A  // <...............
    14E0: 0A 0A 02 04 0A 0A 78 0A 78 20 A1 07 00 0A 0C 0A  // ......x.x ......
    14F0: 02 02 04 0A 18 2B 01 02 0A 04 0D 01 00 00 00 00  // .....+..........
    1500: 00 00 00 00 00 48 E8 01 02 14 06 26 39 47 09 96  // .....H.....&9G..
    1510: 4B 0A 13 0C 13 05 05 14 07 09 14 02 03 03 0D 0D  // K...............
    1520: 0A 0A 02 04 0D 0D 96 0D 96 68 89 09 00 0D 0C 0A  // .........h......
    1530: 02 02 05 0D 1D 33 01 02 0A 04 10 01 00 00 00 00  // .....3..........
    1540: 00 00 00 00 00 40 13 02 02 15 07 2D 44 18 0A B4  // .....@.....-D...
    1550: 5A 0C 17 0E 17 06 06 18 08 0A 18 02 03 03 0E 0F  // Z...............
    1560: 0A 0A 02 04 0F 0F B4 0F B4 B0 71 0B 00 0F 0C 0A  // ..........q.....
    1570: 02 02 06 0F 1F 3C 01 02 0B 04 13 01 00 00 00 00  // .....<..........
    1580: 00 00 00 00 00 78 5D 02 02 16 07 2D 44 81 0B B4  // .....x]....-D...
    1590: 5A 0C 17 0E 17 06 06 18 08 0A 18 02 03 03 0E 0F  // Z...............
    15A0: 0A 0A 02 04 0F 0F B4 0F B4 B0 71 0B 00 0F 0C 0A  // ..........q.....
    15B0: 02 02 06 0F 1F 3C 01 02 0B 04 13 01 00 00 00 00  // .....<..........
    15C0: 00 00 00 00 00 20 BF 02 02 18 07 34 4E 5C 0D D2  // ..... .....4N\..
    15D0: 69 0E 1A 10 1A 08 08 1C 09 0B 20 02 03 03 0F 12  // i......... .....
    15E0: 0A 0A 02 04 12 12 D2 12 D2 F8 59 0D 00 12 0C 0A  // ..........Y.....
    15F0: 02 02 07 12 21 43 01 02 0B 04 16 01 00 00 00 00  // ....!C..........
    1600: 00 00 00 00 00 B0 24 03 02 1A 08 3C 5A 4A 0F F0  // ......$....<ZJ..
    1610: 78 10 1E 12 1E 08 08 1F 0A 0C 20 02 03 03 10 14  // x......... .....
    1620: 0A 0A 02 04 14 14 F0 14 F0 40 42 0F 00 14 0C 0A  // .........@B.....
    1630: 02 02 08 14 23 4C 01 02 0C 04 19 01 00 00 00 00  // ....#L..........
    1640: 00 00 00 00 00 58 86 03 02 1C 08 44 66 25 11 0E  // .....X.....Df%..
    1650: 87 12 24 15 22 09 09 22 0C 0E 24 02 03 03 11 17  // ..$.".."..$.....
    1660: 0A 0A 02 04 17 17 0E 17 0E 88 2A 11 00 17 0C 0A  // ..........*.....
    1670: 02 02 09 17 26 54 01 02 0C 04 1C 01 01 01 01 00  // ....&T..........
    1680: 00 00 00 00 00 20 A0 03 02 1D 08 48 6C A2 11 1D  // ..... .....Hl...
    1690: 8E 13 24 16 24 09 09 24 0D 0F 24 02 04 03 11 18  // ..$.$..$..$.....
    16A0: 0B 0B 02 04 18 18 1D 18 1D 9D 1A 12 00 18 0D 0B  // ................
    16B0: 02 02 09 18 28 59 02 02 0D 04 1E 01 01 01 01 00  // ....(Y..........
    16C0: 00 00 00 00 00 58 B8 03 02 1E 08 4A 70 18 12 25  // .....X.....Jp..%
    16D0: 93 14 26 17 26 0A 0A 26 0D 10 28 02 04 03 11 1A  // ..&.&..&..(.....
    16E0: 0B 0B 02 04 1A 1A 25 1A 25 F5 94 12 00 1A 0D 0B  // ......%.%.......
    16F0: 02 02 0A 1A 29 5B 02 02 0D 04 1F 01 01 01 01 00  // ....)[..........
    1700: 00 00 00 00 00 00 00 00 00 03 00 00 00 55 50 01  // .............UP.
    1710: 00 A0 FE 00 01 A4 FE 00 01 FF FF FF 00 00 28 00  // ..............(.
    1720: 00 00 00 00 00 00 01 00 01 FF FF FF 01 00 28 00  // ..............(.
    1730: 00 00 00 00 00 00 01 00 01 FF FF FF 02 00 28 00  // ..............(.
    1740: 00 00 00 00 00 00 01 00 01 FF FF FF 03 00 28 00  // ..............(.
    1750: 00 00 00 00 00 00 01 00 01 FF FF FF 04 00 28 00  // ..............(.
    1760: 00 00 00 00 00 00 01 00 01 FF FF FF 05 00 28 00  // ..............(.
    1770: 00 00 00 00 00 00 01 00 01 FF FF FF 06 00 28 00  // ..............(.
    1780: 00 00 00 00 00 00 01 00 01 FF FF FF 07 00 28 00  // ..............(.
    1790: 00 00 00 00 00 00 01 00 01 FF FF FF 08 00 28 00  // ..............(.
    17A0: 00 00 00 00 00 00 02 00 02 FF FF FF 09 00 28 00  // ..............(.
    17B0: 00 00 00 00 00 00 02 00 02 FF FF FF 0A 00 28 00  // ..............(.
    17C0: 00 00 00 00 00 00 02 00 02 FF FF FF 0B 00 28 00  // ..............(.
    17D0: 00 00 00 00 00 00 02 00 02 FF FF FF 0C 00 28 00  // ..............(.
    17E0: 00 00 00 00 00 00 02 00 02 FF FF FF 0D 00 28 00  // ..............(.
    17F0: 00 00 00 00 00 00 02 00 02 FF FF FF 0E 00 28 00  // ..............(.
    1800: 00 00 00 00 00 00 02 00 02 FF FF FF 0F 00 28 00  // ..............(.
    1810: 00 00 00 00 00 00 02 00 02 00 00 00 00 79 00 00  // .............y..
    1820: 00 4F 50 01 00 51 50 01 00 53 50 01 00 56 50 01  // .OP..QP..SP..VP.
    1830: 00 57 50 01 00 58 50 01 00 73 50 01 00 76 50 01  // .WP..XP..sP..vP.
    1840: 00 5D 50 01 00 64 50 01 00 6B 50 01 00 78 50 01  // .]P..dP..kP..xP.
    1850: 00 7A 50 01 00 0C FE 00 01 14 FE 00 01 18 FE 00  // .zP.............
    1860: 01 1C FE 00 01 24 FE 00 01 30 FE 00 01 38 FE 00  // .....$...0...8..
    1870: 01 40 FE 00 01 50 FE 00 01 5C FE 00 01 60 FE 00  // .@...P...\...`..
    1880: 01 64 FE 00 01 68 FE 00 01 6C FE 00 01 70 FE 00  // .d...h...l...p..
    1890: 01 74 FE 00 01 84 FE 00 01 8C FE 00 01 90 FE 00  // .t..............
    18A0: 01 94 FE 00 01 A8 FE 00 01 AC FE 00 01 B0 FE 00  // ................
    18B0: 01 B4 FE 00 01 B8 FE 00 01 C0 FE 00 01 C8 FE 00  // ................
    18C0: 01 CC FE 00 01 D0 FE 00 01 D4 FE 00 01 D8 FE 00  // ................
    18D0: 01 DC FE 00 01 E0 FE 00 01 E4 FE 00 01 E8 FE 00  // ................
    18E0: 01 EC FE 00 01 F0 FE 00 01 F4 FE 00 01 F8 FE 00  // ................
    18F0: 01 FC FE 00 01 00 FF 00 01 04 FF 00 01 08 FF 00  // ................
    1900: 01 0C FF 00 01 10 FF 00 01 14 FF 00 01 18 FF 00  // ................
    1910: 01 1C FF 00 01 20 FF 00 01 24 FF 00 01 28 FF 00  // ..... ...$...(..
    1920: 01 2C FF 00 01 30 FF 00 01 34 FF 00 01 38 FF 00  // .,...0...4...8..
    1930: 01 3C FF 00 01 40 FF 00 01 44 FF 00 01 48 FF 00  // .<...@...D...H..
    1940: 01 4C FF 00 01 50 FF 00 01 54 FF 00 01 58 FF 00  // .L...P...T...X..
    1950: 01 5C FF 00 01 60 FF 00 01 64 FF 00 01 68 FF 00  // .\...`...d...h..
    1960: 01 6C FF 00 01 70 FF 00 01 74 FF 00 01 78 FF 00  // .l...p...t...x..
    1970: 01 7C FF 00 01 80 FF 00 01 84 FF 00 01 88 FF 00  // .|..............
    1980: 01 8C FF 00 01 90 FF 00 01 94 FF 00 01 98 FF 00  // ................
    1990: 01 9C FF 00 01 A0 FF 00 01 A4 FF 00 01 A8 FF 00  // ................
    19A0: 01 AC FF 00 01 B0 FF 00 01 B4 FF 00 01 B8 FF 00  // ................
    19B0: 01 BC FF 00 01 C0 FF 00 01 C4 FF 00 01 C8 FF 00  // ................
    19C0: 01 CC FF 00 01 D0 FF 00 01 D4 FF 00 01 D8 FF 00  // ................
    19D0: 01 DC FF 00 01 E0 FF 00 01 E4 FF 00 01 E8 FF 00  // ................
    19E0: 01 EC FF 00 01 F0 FF 00 01 F4 FF 00 01 F8 FF 00  // ................
    19F0: 01 FC FF 00 01 8C 1C 00 03 A1 04 00 05 18 04 00  // ................
    1A00: 05 55 02 00 05 FF FF FF 00 1A 27 20 00 00 00 2A  // .U........' ...*
    1A10: 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A20: 00 00 00 13 00 40 00 18 00 00 00 17 00 00 00 17  // .....@..........
    1A30: 00 00 00 17 00 04 20 00 F0 00 00 00 00 00 00 00  // ...... .........
    1A40: 00 46 04 48 44 00 00 08 00 00 00 08 00 13 30 80  // .F.HD.........0.
    1A50: 00 1C 0F DE 00 00 00 F0 01 00 00 00 00 88 00 00  // ................
    1A60: 1B 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A70: 00 00 00 00 00 00 00 00 00 00 00 00 00 C0 04 00  // ................
    1A80: 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    1A90: 00 00 00 00 00 00 00 00 00 08 00 C0 02 00 08 00  // ................
    1AA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1AB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1AC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1AD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1AE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1AF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B60: 00 1C 03 8E 03 AA 02 8E 03 E3 00 AA 02 E3 00 71  // ...............q
    1B70: 00 E3 00 71 00 55 01 71 00 1C 03 55 01 1C 03 8E  // ...q.U.q...U....
    1B80: 03 CF 00 30 FF FF 0C 00 F3 00 80 01 90 00 00 00  // ...0............
    1B90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1BA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1BB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1BC0: 00 00 00 00 00 00 00 00 00 00 08 80 01 05 00 00  // ................
    1BD0: 00 0E 10 00 40 3F FF 3F 0F 00 00 00 00 10 00 00  // ....@?.?........
    1BE0: 00 10 00 00 00 00 00 00 00 14 00 00 00 00 00 00  // ................
    1BF0: 00 CC 01 00 00 00 00 00 00 00 00 00 00 01 00 00  // ................
    1C00: 00 67 54 13 02 20 31 45 76 88 00 00 00 10 32 54  // .gT.. 1Ev.....2T
    1C10: 76 98 0A 00 00 00 06 00 00 04 00 00 00 64 57 32  // v............dW2
    1C20: 10 01 23 65 47 88 00 00 00 60 82 31 74 95 0A 00  // ..#eG....`.1t...
    1C30: 00 00 00 00 00 01 00 00 00 67 54 13 02 20 31 45  // .........gT.. 1E
    1C40: 76 88 00 00 00 10 32 54 76 98 0A 00 00 00 06 00  // v.....2Tv.......
    1C50: 00 04 00 00 00 64 57 13 20 01 23 75 46 88 00 00  // .....dW. .#uF...
    1C60: 00 40 21 96 83 57 0A 00 00 00 00 00 00 01 00 00  // .@!..W..........
    1C70: 00 20 31 45 76 67 54 13 02 88 00 00 00 10 32 54  // . 1EvgT.......2T
    1C80: 76 98 0A 00 00 00 06 00 00 04 00 00 00 02 31 75  // v.............1u
    1C90: 46 64 57 32 10 88 00 00 00 40 21 96 83 57 0A 00  // FdW2.....@!..W..
    1CA0: 00 00 00 00 00 01 00 00 00 20 31 45 76 67 54 13  // ......... 1EvgT.
    1CB0: 02 88 00 00 00 10 32 54 76 98 0A 00 00 00 06 00  // ......2Tv.......
    1CC0: 00 04 00 00 00 01 23 75 46 74 56 32 10 88 00 00  // ......#uFtV2....
    1CD0: 00 60 82 31 74 95 0A 00 00 00 00 00 00 01 00 00  // .`.1t...........
    1CE0: 00 20 31 45 76 67 54 13 02 88 00 00 00 10 32 54  // . 1EvgT.......2T
    1CF0: 76 98 0A 00 00 00 06 00 00 04 00 00 00 01 23 75  // v.............#u
    1D00: 46 74 56 23 10 88 00 00 00 97 42 53 01 68 0A 00  // FtV#......BS.h..
    1D10: 00 00 00 00 00 01 00 00 00 20 31 45 76 46 57 13  // ......... 1EvFW.
    1D20: 02 88 00 00 00 10 32 54 76 98 0A 00 00 00 06 00  // ......2Tv.......
    1D30: 00 04 00 00 00 10 23 75 46 64 57 32 10 88 00 00  // ......#uFdW2....
    1D40: 00 97 32 54 60 18 0A 00 00 00 00 00 00 01 00 00  // ..2T`...........
    1D50: 00 67 54 13 02 20 31 75 64 88 00 00 00 10 32 54  // .gT.. 1ud.....2T
    1D60: 76 98 0A 00 00 00 06 00 00 04 00 00 00 64 57 32  // v............dW2
    1D70: 01 01 23 75 46 88 00 00 00 97 32 54 60 18 0A 00  // ..#uF.....2T`...
    1D80: 00 00 00 00 00 01 00 00 00 67 54 13 02 20 31 45  // .........gT.. 1E
    1D90: 76 88 00 00 00 10 32 54 76 98 0A 00 00 00 06 00  // v.....2Tv.......
    1DA0: 00 04 00 00 00 64 57 32 10 01 32 65 47 88 00 00  // .....dW2..2eG...
    1DB0: 00 97 42 53 01 68 0A 00 00 00 00 00 00 00 00 00  // ..BS.h..........
    1DC0: C4 00 04 02 05 03 46 00 1A 06 60 00 00 00 00 00  // ......F...`.....
    1DD0: 4F 00 01 00 76 00 82 00 77 00 71 00 61 00 80 00  // O...v...w.q.a...
    1DE0: 93 00 7D 00 94 00 57 00 37 00 14 00 78 00 60 00  // ..}...W.7...x.`.
    1DF0: 79 00 9C 00 38 00 28 00 4A 00 D7 00 29 00 20 00  // y...8.(.J...). .
    1E00: 47 00 0A 00 48 00 E0 00 FF 00 05 07 0C 00 0E 00  // G...H...........
    1E10: 00 00 00 00 00 00 01 07 0C 00 0C 00 00 02 00 00  // ................
    1E20: 00 00 04 07 0C 00 0E 00 00 03 00 00 00 00 02 03  // ................
    1E30: 0E 00 21 06 44 00 00 00 00 00 FF 00 02 07 0C 00  // ..!.D...........
    1E40: 0E 72 01 01 00 00 00 00 08 00 3C 00 00 08 00 00  // .r........<.....
    1E50: 07 00 00 00 00 00 00 00 00 00 01 00 00 00 01 00  // ................
    1E60: 02 00 00 00 02 00 03 00 00 00 03 00 04 00 00 00  // ................
    1E70: 04 00 05 00 00 00 05 00 06 00 00 00 06 00 07 00  // ................
    1E80: 00 00 07 00 08 00 01 01 00 00 00 00 C8 00 02 01  // ................
    1E90: D6 09 80 02 A0 00 E0 01 2D 00 10 00 60 00 0A 00  // ........-...`...
    1EA0: 02 00 00 00 00 00 08 08 06 00 12 3C A0 0F 20 03  // ...........<.. .
    1EB0: 00 01 58 02 1C 00 28 00 80 00 01 00 04 00 00 00  // ..X...(.........
    1EC0: 00 00 00 00 00 00 6A 3C 64 19 00 04 40 01 00 03  // ......j<d...@...
    1ED0: 26 00 18 00 88 00 03 00 06 00 00 00 00 00 00 00  // &...............
    1EE0: 06 00 55 3C 30 2A 00 05 08 02 C0 03 28 00 60 00  // ..U<0*......(.`.
    1EF0: 70 00 01 00 03 00 00 00 00 00 00 00 00 00 E9 3C  // p..............<
    1F00: 30 2A 00 05 98 01 00 04 2A 00 30 00 70 00 01 00  // 0*......*.0.p...
    1F10: 03 00 00 00 00 00 00 00 00 00 EA 3C 8F 2F 78 05  // ...........<./x.
    1F20: D0 01 1A 04 27 00 58 00 90 00 03 00 04 00 00 00  // ....'.X.........
    1F30: 00 00 00 00 02 00 EB 3C 48 3F 40 06 30 02 B0 04  // .......<H?@.0...
    1F40: 32 00 40 00 C0 00 01 00 03 00 00 00 00 00 00 00  // 2.@.............
    1F50: 00 00 EC 3C 34 00 02 01 00 00 00 00 00 2A 00 2A  // ...<4........*.*
    1F60: 00 00 2A 2A 2A 00 00 2A 00 2A 2A 15 00 2A 2A 2A  // ..***..*.**..***
    1F70: 15 15 15 15 15 3F 15 3F 15 15 3F 3F 3F 15 15 3F  // .....?.?..???..?
    1F80: 15 3F 3F 3F 15 3F 3F 3F 74 00 01 01 10 01 06 12  // .???.???t.......
    1F90: 11 01 16 12 13 01 06 6A 14 01 16 6A 16 01 06 55  // .......j...j...U
    1FA0: 17 01 16 55 19 01 06 EA 1A 01 16 EA 65 01 16 E9  // ...U........e...
    1FB0: 66 01 0A E9 21 01 0A 12 22 01 0A 6A 23 01 0A 55  // f...!..."..j#..U
    1FC0: 24 01 0A EA 45 01 16 EB 46 01 0A EB 75 01 16 EC  // $...E...F...u...
    1FD0: 76 01 0A EC D2 01 16 70 D4 01 0A 70 D8 01 16 71  // v......p...p...q
    1FE0: D9 01 0A 71 E2 01 16 72 E4 01 0A 72 E8 01 16 73  // ...q...r...r...s
    1FF0: E9 01 0A 73 F5 01 16 74 F6 01 0A 74 14 00 02 01  // ...s...t...t....
    2000: 02 00 08 00 80 00 00 02 00 04 00 08 40 00 FF FF  // ............@...
    2010: A6 09 0F 00 02 22 03 AC 09 00 00 BC 3F 00 00 80  // ....."......?...
    2020: 00 18 00 00 00 1C 00 00 00 00 00 00 76 00 00 00  // ............v...
    2030: 00 00 00 00 00 00 00 00 00 00 01 00 00 00 01 00  // ................
    2040: 00 00 0D 00 00 00 AB 09 00 00 B0 04 00 00 E8 03  // ................
    2050: 00 00 0E 06 00 00 AB 04 00 00 56 05 00 00 AB 04  // ..........V.....
    2060: 00 00 56 05 00 00 B0 04 00 00 C1 04 00 00 C1 04  // ..V.............
    2070: 00 00 2A 03 00 00 C1 04 00 00 00 00 00 00 00 00  // ..*.............
    2080: 00 00 00 00 00 00 F4 01 00 00 E0 01 00 00 61 00  // ..............a.
    2090: 00 00 26 02 00 00 3D 01 00 00 6B 01 00 00 3D 01  // ..&...=...k...=.
    20A0: 00 00 6B 01 00 00 A2 01 00 00 E7 01 00 00 E7 01  // ..k.............
    20B0: 00 00 2C 01 00 00 E7 01 00 00 00 00 00 00 00 00  // ..,.............
    20C0: 00 00 00 00 00 00 81 00 00 00 10 00 00 00 1E 00  // ................
    20D0: 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01  // ................
    20E0: 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    20F0: 00 00 28 0A 00 00 28 0A 00 00 00 00 00 00 00 00  // ..(...(.........
    2100: 00 00 00 00 00 00 28 0A 00 00 33 04 00 00 33 04  // ......(...3...3.
    2110: 00 00 0A 00 00 00 E4 0C 00 00 E4 0C 00 00 64 00  // ..............d.
    2120: 00 00 6E 00 00 00 01 00 00 00 01 00 00 00 01 00  // ..n.............
    2130: 00 00 01 00 00 00 01 00 00 00 64 00 00 00 64 00  // ..........d...d.
    2140: 00 00 64 00 00 00 64 00 00 00 64 00 00 00 64 00  // ..d...d...d...d.
    2150: 00 00 64 00 00 00 64 00 00 00 64 00 00 00 64 00  // ..d...d...d...d.
    2160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2170: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    21A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    21B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    21C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    21D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    21E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    21F0: 00 00 F4 01 00 00 F4 01 00 00 00 00 00 00 00 00  // ................
    2200: 00 00 00 00 00 00 F4 01 00 00 A2 02 00 00 A2 02  // ................
    2210: 00 00 08 00 00 00 FA 00 00 00 E8 03 00 00 19 00  // ................
    2220: 00 00 32 00 00 00 00 00 00 00 00 00 00 00 00 00  // ..2.............
    2230: 00 00 00 00 00 00 00 00 00 00 19 00 00 00 0A 00  // ................
    2240: 00 00 19 00 00 00 0A 00 00 00 19 00 00 00 0A 00  // ................
    2250: 00 00 19 00 00 00 0A 00 00 00 19 00 00 00 0A 00  // ................
    2260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2270: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2290: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    22A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    22B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    22C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    22D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    22E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    22F0: 00 00 08 00 00 00 00 00 00 00 5A 00 5A 00 5A 00  // ..........Z.Z.Z.
    2300: 5A 00 BE 0A BE 0A BE 0A BE 0A BE 0A BE 0A BE 0A  // Z...............
    2310: BE 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2320: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2330: 00 00 06 00 00 00 FF FD 7F A3 63 37 00 00 DB 00  // ..........c7....
    2340: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 CB 00  // ................
    2350: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E5 00  // ................
    2360: 1E 00 00 00 00 00 64 00 6E 00 64 00 73 00 73 00  // ......d.n.d.s.s.
    2370: 73 00 73 00 00 00 00 00 00 00 00 00 00 00 01 00  // s.s.............
    2380: 00 00 0A 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2390: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FE 38  // ...............8
    23A0: 00 00 73 0F 00 00 64 00 64 00 03 0C 10 0E 00 00  // ..s...d.d.......
    23B0: 00 00 00 00 00 00 67 0C 74 0E 04 10 68 10 40 00  // ......g.t...h.@.
    23C0: 00 01 32 00 3C 00 67 0C 67 0C 74 0E 74 0E 14 00  // ..2.<.g.g.t.t...
    23D0: 14 00 00 00 02 00 00 00 80 3F 00 00 00 00 B5 37  // .........?.....7
    23E0: B8 3E EF 1B 67 BF 4F 40 A7 3F 8B 04 00 00 00 00  // .>..g.O@.?......
    23F0: 02 00 EE 7C 8F 3F A6 9B 84 3E 56 9A A4 3E 50 19  // ...|.?...>V..>P.
    2400: 5F BE 2F A3 50 3F 53 01 00 00 00 01 04 00 CD CC  // _./.P?S.........
    2410: AC 3F E3 A5 9B BD A1 B9 EE 3E BB D0 FC BE C6 A7  // .?.......>......
    2420: 68 3F 12 02 00 00 00 00 02 00 00 00 80 3F 00 00  // h?...........?..
    2430: 00 00 26 FC 82 3E D1 5C A7 BE DD EA 61 3F 7F 02  // ..&..>.\....a?..
    2440: 00 00 00 00 02 00 09 8A AF 3F 29 5C 0F BD 9B 5A  // .........?)\...Z
    2450: F6 3E 16 18 F2 BE EA EC 64 3F EC 01 00 00 00 00  // .>......d?......
    2460: 02 00 6A DE 89 3F B8 1E 05 3E 2B F6 97 3E D5 95  // ..j..?...>+..>..
    2470: 8F BE B3 24 58 3F D9 01 00 00 00 00 02 00 09 8A  // ...$X?..........
    2480: AF 3F 29 5C 0F BD 9B 5A F6 3E 16 18 F2 BE EA EC  // .?)\...Z.>......
    2490: 64 3F EC 01 00 00 00 00 02 00 6A DE 89 3F B8 1E  // d?........j..?..
    24A0: 05 3E 2B F6 97 3E D5 95 8F BE B3 24 58 3F D9 01  // .>+..>.....$X?..
    24B0: 00 00 00 00 02 00 7D 3F 95 3F DD 24 06 3E 77 15  // ......}?.?.$.>w.
    24C0: B2 3E 32 20 9B BE A9 13 58 3F B4 01 00 00 00 00  // .>2 ....X?......
    24D0: 02 00 6A BC 74 3F AE 47 61 3E 83 6E 6F 3E 10 CC  // ..j.t?.Ga>.no>..
    24E0: 51 BE DA AC 52 3F B7 01 00 00 00 00 02 00 6A BC  // Q...R?........j.
    24F0: 74 3F AE 47 61 3E 83 6E 6F 3E 10 CC 51 BE DA AC  // t?.Ga>.no>..Q...
    2500: 52 3F B7 01 00 00 00 00 02 00 0E 2D 12 3F 9A 99  // R?.........-.?..
    2510: D9 3E DD D2 AA 3D 07 EB 7F BD 5E 2E 4A 3F 77 01  // .>...=....^.J?w.
    2520: 00 00 00 00 02 00 6A BC 74 3F AE 47 61 3E 83 6E  // ......j.t?.Ga>.n
    2530: 6F 3E 10 CC 51 BE DA AC 52 3F B7 01 00 00 F4 01  // o>..Q...R?......
    2540: AB 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2550: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 6B 01  // ..............k.
    2560: 56 05 00 00 00 00 00 00 00 00 00 00 00 00 3D 01  // V.............=.
    2570: AB 04 00 00 00 00 00 00 00 00 00 00 00 00 E0 01  // ................
    2580: B0 04 00 00 00 00 00 00 00 00 00 00 00 00 61 00  // ..............a.
    2590: C9 01 A2 02 E8 03 A2 01 B0 04 00 00 00 00 00 00  // ................
    25A0: 00 00 00 00 00 00 E7 01 C1 04 00 00 00 00 00 00  // ................
    25B0: 00 00 00 00 00 00 E7 01 C1 04 00 00 00 00 00 00  // ................
    25C0: 00 00 00 00 00 00 2C 01 2A 03 00 00 00 00 00 00  // ......,.*.......
    25D0: 00 00 00 00 00 00 E7 01 C1 04 00 00 00 00 00 00  // ................
    25E0: 00 00 00 00 00 00 26 02 0E 06 00 00 00 00 00 00  // ......&.........
    25F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2610: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2620: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2630: 00 00 00 00 00 00 AB 09 00 00 B0 04 00 00 E8 03  // ................
    2640: 00 00 0E 06 00 00 AB 04 00 00 56 05 00 00 AB 04  // ..........V.....
    2650: 00 00 56 05 00 00 B0 04 00 00 C1 04 00 00 C1 04  // ..V.............
    2660: 00 00 2A 03 00 00 C1 04 00 00 00 02 03 03 78 05  // ..*...........x.
    2670: 00 00 4C 01 FA 01 F0 0A 80 0C 8C 0A 80 0C 48 0D  // ..L...........H.
    2680: 48 0D 88 13 18 15 18 15 18 15 F4 01 20 03 F4 01  // H........... ...
    2690: 01 00 01 02 5D 00 01 00 00 00 00 00 00 00 00 00  // ....]...........
    26A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    26B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    26C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    26D0: 00 00 78 0F 36 0F F5 0E B3 0E 72 0E 31 0E EF 0D  // ..x.6.....r.1...
    26E0: AE 0D 6C 0D 2B 0D EA 0C A8 0C F4 0B 41 0B 8D 0A  // ..l.+.......A...
    26F0: D9 09 00 00 00 00 03 02 01 00 00 00 00 00 00 00  // ................
    2700: 00 00 00 00 00 00 00 03 01 06 36 01 6B 02 37 00  // ..........6.k.7.
    2710: 46 00 90 01 90 01 90 01 90 01 90 01 90 01 90 01  // F...............
    2720: 90 01 90 01 90 01 14 00 DC 05 10 0E D8 0E 00 00  // ................
    2730: 5A 00 F4 01 00 00 01 00 01 02 00 00 00 00 00 00  // Z...............
    2740: 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    2750: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0D 54  // ...............T
    2760: 86 3D BC 05 D2 BD 1F 80 14 3E 00 00 00 00 00 00  // .=.......>......
    2770: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2780: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2790: 00 00 9A 99 99 3E 00 00 C0 3F 00 00 00 40 CD CC  // .....>...?...@..
    27A0: 0C 40 33 33 33 40 0A D7 23 3D 87 16 59 3D 9A 99  // .@333@..#=..Y=..
    27B0: 99 3D EC 51 B8 3D 1F 85 6B 3E 00 00 00 00 00 00  // .=.Q.=..k>......
    27C0: 00 00 00 00 00 00 00 00 00 00 44 69 2F 3E D8 81  // ..........Di/>..
    27D0: 73 BD 70 00 70 00 01 01 00 00 00 00 00 00 70 00  // s.p.p.........p.
    27E0: 70 00 19 00 19 00 00 00 00 00 00 00 00 00 00 00  // p...............
    27F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2810: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01  // ................
    2820: 67 0C 00 00 00 00 CA 54 41 3C 33 33 93 3E DA AC  // g......TA<33.>..
    2830: FA 3C CD CC CC 3E 00 00 01 00 00 00 00 00 00 00  // .<...>..........
    2840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2850: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2860: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2870: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2880: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2890: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    28A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    28B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    28C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    28D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    28E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    28F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2920: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2930: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2940: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2950: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2960: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2970: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2980: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2990: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    29A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    29B0: 00 00 00 00 1E 06 66 50 66 51 66 52 66 53 66 55  // ......fPfQfRfSfU
    29C0: 66 56 66 57 0E 1F A3 14 00 8C 0E 08 00 B2 20 E8  // fVfW.......... .
    29D0: 48 1C 0B C0 75 14 A2 02 00 66 5F 66 5E 66 5D 66  // H...u....f_f^f]f
    29E0: 5B 66 5A 66 59 66 58 07 1F CB E8 62 1D E8 34 1B  // [fZfYfX....b..4.
    29F0: 32 D2 8D 3E 4E 03 89 55 16 E8 C3 0C E8 86 0C E8  // 2..>N..U........
    2A00: 43 1A 75 19 E8 D1 0D E8 B0 02 E8 30 18 0B C0 74  // C.u........0...t
    2A10: 0C E8 39 00 E8 63 43 E8 7D 0C E8 B8 43 E8 A9 00  // ..9..cC.}...C...
    2A20: B4 80 E8 29 1B 8A C7 66 C1 E0 10 8A E3 B0 20 66  // ...)...f...... f
    2A30: A3 C4 A4 E8 B0 02 E8 90 0C E8 56 1D 66 5F 66 5E  // ..........V.f_f^
    2A40: 66 5D 66 5B 66 5A 66 59 66 58 07 1F CB 2E 8B 1E  // f]f[fZfYfX......
    2A50: 08 00 83 3E 5D 2A 00 75 04 89 1E 5B 2A 1E 2E 8E  // ...>]*.u...[*...
    2A60: 1E 53 2A 9C FA 66 C7 06 08 01 65 F0 00 F0 C7 06  // .S*..f....e.....
    2A70: 40 00 7E 2A 89 1E 42 00 C7 06 B4 01 7E 2A 89 1E  // @.~*..B.....~*..
    2A80: B6 01 C7 06 7C 00 A6 72 89 1E 7E 00 C7 06 0C 01  // ....|..r..~.....
    2A90: B9 76 89 1E 0E 01 C7 06 A8 04 D8 6C 89 1E AA 04  // .v.........l....
    2AA0: 2E 8E 1E 5B 2A 8B C3 A3 DA 6C A3 EA 6C A3 FC 6C  // ...[*....l..l..l
    2AB0: 9D 1F C3 50 4D 49 44 7E 2A 0A 5D 00 00 00 A0 00  // ...PMID~*.].....
    2AC0: B0 00 B8 00 C0 00 00 00 00 BB 00 00 E8 E3 0B 66  // ...............f
    2AD0: C1 E8 10 A3 82 03 BB 0B 00 E8 D6 0B 8D 3E 4E 03  // .............>N.
    2AE0: 66 89 45 18 C3 00 E8 84 1C 80 FC A0 75 05 E8 3D  // f.E.........u..=
    2AF0: 00 EB 11 80 FC 4F 75 05 E8 9D 31 EB 07 E8 F2 36  // .....Ou...1....6
    2B00: EB 02 B4 01 E8 8B 1C CF E8 62 1C E8 20 00 EB 02  // .........b.. ...
    2B10: B4 01 E8 7D 1C CB E8 54 1C 80 FC 4F 75 05 E8 77  // ...}...T...Ou..w
    2B20: 31 EB 07 E8 CC 36 EB 02 B4 01 E8 65 1C CB 1E 06  // 1....6.....e....
    2B30: 66 50 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F  // fPfQfRfSfUfVfW..
    2B40: 3C 04 75 29 2E A1 1A 00 66 C1 E0 10 2E A1 18 00  // <.u)....f.......
    2B50: 8D 36 39 02 8A 3C 80 EF 30 B3 02 8B EC 89 5E 0C  // .69..<..0.....^.
    2B60: 89 46 04 66 C1 E8 10 89 46 00 E9 2B 01 3C 05 75  // .F.f....F..+.<.u
    2B70: 18 E8 DA 19 E8 AD 19 2E A1 08 00 8B EC 89 56 10  // ..............V.
    2B80: 89 46 00 89 5E 04 E9 0F 01 3C 06 75 32 E8 0A 0B  // .F..^....<.u2...
    2B90: 66 D1 E0 8B EC 89 46 14 BB 02 00 E8 14 0B 88 46  // f.....F........F
    2BA0: 18 E8 FE 0A 66 89 46 0C BB 09 00 E8 04 0B 33 C0  // ....f.F.......3.
    2BB0: 66 89 46 00 2E 8B 16 82 03 89 56 10 E9 D9 00 3C  // f.F.......V....<
    2BC0: 0B 75 24 0A DB 75 11 B9 80 00 BB 02 00 8B EC 89  // .u$..u..........
    2BD0: 5E 0C 89 4E 14 E9 C0 00 8A C7 E8 D3 00 E8 38 01  // ^..N..........8.
    2BE0: 0F 84 AC 00 E9 B1 00 3C 17 75 1D E8 98 0D 74 06  // .......<.u....t.
    2BF0: E8 83 09 E8 8E 12 E8 13 07 E8 78 0A 33 C9 8B C8  // ..........x.3...
    2C00: 8B EC 89 4E 14 E9 90 00 3C 18 75 45 0A FF 75 10  // ...N....<.uE..u.
    2C10: E8 1F 0D 8B EC 89 46 0C E8 4F 07 89 4E 10 EB 78  // ......F..O..N..x
    2C20: E8 63 0D 75 6B BB 00 4C E8 E0 1A 66 0B C0 74 60  // .c.uk..L...f..t`
    2C30: 23 C9 74 5C E8 37 0D BE 00 4C E8 A2 0A 74 51 BE  // #.t\.7...L...tQ.
    2C40: 00 4C B0 40 E8 F1 0A E8 E8 0C 8B EC 89 46 0C EB  // .L.@.........F..
    2C50: 47 3C 82 75 1A 80 FB 05 75 15 0A FF 75 0A E8 2D  // G<.u....u...u..-
    2C60: 0C 8B EC 89 46 14 EB 30 E8 0A 0C 74 1B EB 29 3C  // ....F..0...t..)<
    2C70: 8E 75 15 80 FF 01 74 08 80 FF 02 75 0B 80 C1 02  // .u....t....u....
    2C80: 80 C1 02 E8 54 0C EB 10 8B EC C6 46 19 02 EB 0F  // ....T......F....
    2C90: 8B EC C6 46 19 01 EB 07 32 E4 8B EC 88 66 19 66  // ...F....2....f.f
    2CA0: 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F C3  // _f^f]f[fZfYfX...
    2CB0: 51 8A C8 B8 01 00 D3 E0 59 C3 E8 FB 1A C3 0C 01  // Q.......Y.......
    2CC0: C3 00 50 51 B0 B6 E6 43 B0 33 E6 42 B0 05 E6 42  // ..PQ...C.3.B...B
    2CD0: E4 61 8A E0 0C 03 E6 61 8A C4 B9 C8 00 E8 EE 16  // .a.....a........
    2CE0: E6 61 59 58 C3 00 1E 56 0E 1F 80 3E 02 00 80 76  // .aYX...V...>...v
    2CF0: 05 C6 06 02 00 80 8A 0E 02 00 C1 E1 09 FC C6 06  // ................
    2D00: 21 00 00 33 F6 32 E4 AC 02 E0 E2 FB F6 D4 FE C4  // !..3.2..........
    2D10: 88 26 21 00 5E 1F C3 00 57 0B C0 75 0F E8 1E 08  // .&!.^...W..u....
    2D20: 74 25 E8 24 00 F6 C3 04 74 F3 EB 11 8B C8 E8 0C  // t%.$....t.......
    2D30: 15 23 C1 74 12 E8 11 00 F6 C3 04 74 0A 5F 8D 5C  // .#.t.......t._.\
    2D40: 28 E8 91 05 0B F6 C3 5F C3 50 E8 D3 07 E8 5E 14  // (......_.P....^.
    2D50: 0A C9 74 11 E8 CA 11 3C 00 75 1F E8 CB 01 8A EB  // ..t....<.u......
    2D60: F6 C5 04 74 15 8D 9C A6 00 E8 9F 19 0A C0 74 0A  // ...t..........t.
    2D70: E8 88 04 74 05 33 C9 E8 51 05 E8 AC 01 58 C3 51  // ...t.3..Q....X.Q
    2D80: B9 5F 00 E8 F7 15 59 C3 51 E8 1A 00 75 14 E8 69  // ._....Y.Q...u..i
    2D90: 01 3C 01 75 0D B9 20 00 E8 27 00 75 05 80 C9 01  // .<.u.. ..'.u....
    2DA0: EB 02 33 C9 59 C3 53 E8 61 19 66 3D 00 FF FF FF  // ..3.Y.S.a.f=....
    2DB0: 75 0E 83 C3 04 E8 53 19 66 3D FF FF FF 00 75 00  // u.....S.f=....u.
    2DC0: 5B C3 50 52 32 D2 E8 42 19 02 D0 02 D4 66 C1 E8  // [.PR2..B.....f..
    2DD0: 10 02 D0 02 D4 83 C3 04 E2 EC 0A D2 5A 58 C3 E8  // ............ZX..
    2DE0: 3E 07 8D 9C A4 01 E8 E9 00 A9 DD 0F 74 52 E8 38  // >...........tR.8
    2DF0: 01 F6 C3 08 74 0C 8D 5C 28 E8 DD 00 75 04 E8 62  // ....t..\(...u..b
    2E00: 00 C3 B5 02 E8 FC 00 E8 1F 01 F6 C3 04 74 21 8D  // .............t!.
    2E10: 5C 28 E8 22 01 E8 6D 03 74 05 B5 03 E8 E4 00 E8  // \(."..m.t.......
    2E20: 41 04 E8 FA 00 80 FD 00 75 38 B5 02 E8 E6 00 C3  // A.......u8......
    2E30: 8D 9C C0 01 B8 00 55 E8 63 0D B5 02 E8 D6 00 C3  // ......U.c.......
    2E40: A9 02 00 74 1D B5 04 E8 B9 00 E8 DC 00 8D 5C 28  // ...t..........\(
    2E50: E8 E4 00 E8 51 16 E8 BC 00 8D 5C 28 E8 D8 00 E8  // ....Q.....\(....
    2E60: 01 04 C3 B5 01 E8 9B 00 B5 02 E8 A8 00 E8 B9 00  // ................
    2E70: F6 C3 04 75 10 8D 9C C0 01 B8 00 55 E8 1E 0D B5  // ...u.......U....
    2E80: 02 E8 17 00 C3 E8 AF 00 B5 02 8D 5C 28 E8 57 00  // ...........\(.W.
    2E90: 75 02 B5 01 E8 04 00 E8 C9 03 C3 8D 9C AC 02 B1  // u...............
    2EA0: 02 E8 0B 18 B5 02 E8 6C 00 C3 8D 9C A4 01 E8 21  // .......l.......!
    2EB0: 00 E8 75 00 F6 C3 04 74 12 8D 5C 28 E8 78 00 E8  // ..u....t..\(.x..
    2EC0: 5D 00 E8 59 07 8D 5C 28 E8 E5 15 B8 02 00 E8 0E  // ]..Y..\(........
    2ED0: FF C3 B9 48 00 E8 A5 14 C3 53 81 C3 05 01 E8 2A  // ...H.....S.....*
    2EE0: 18 24 06 3C 02 5B C3 E8 10 00 3D 01 04 75 0A 53  // .$.<.[....=..u.S
    2EF0: 83 C3 18 E8 15 18 5B A8 01 C3 53 83 C3 12 E8 0A  // ......[...S.....
    2F00: 18 5B C3 8D 9C AC 02 32 C9 E8 A3 17 C3 8D 9C AC  // .[.....2........
    2F10: 02 E8 F7 17 C3 8D 9C AC 02 B1 01 E8 91 17 C3 8D  // ................
    2F20: 9C AC 02 B1 01 E8 9F 17 C3 66 50 8D 9C A0 01 E8  // .........fP.....
    2F30: D9 17 8A D8 66 58 C3 55 57 51 B9 08 00 BD 00 00  // ....fX.UWQ......
    2F40: BB 08 00 2B D9 D1 E3 8D 58 4E E8 BE 17 E8 E3 01  // ...+....XN......
    2F50: E2 EE 8D 5C 4B E8 B3 17 B9 03 00 8B D0 BF AF 2F  // ...\K........../
    2F60: 85 55 06 74 17 66 8B 05 8D 9A 4C 02 E8 FC 16 8B  // .U.t.f....L.....
    2F70: 45 04 8D 9A 50 02 E8 0A 17 83 C5 08 83 C7 08 E2  // E...P...........
    2F80: DF 8D 7C 5E B9 04 00 33 ED 8B DF E8 7D 17 0B C0  // ..|^...3....}...
    2F90: 74 09 E8 5D 01 E8 97 00 83 C5 1C 83 C7 12 E2 E9  // t..]............
    2FA0: 55 32 ED E8 6F FF 8D 5C 28 E8 4E FF 3D 01 04 75  // U2..o..\(.N.=..u
    2FB0: 10 83 C3 14 E8 54 17 24 70 C0 E8 04 8A E8 E8 54  // .....T.$p......T
    2FC0: FF 5D 8D 9C A6 00 E8 42 17 0A C0 74 46 8D 9C A8  // .].....B...tF...
    2FD0: 00 E8 37 17 3C 02 75 3B 66 C1 E8 10 3C 04 72 33  // ..7.<.u;f...<.r3
    2FE0: 8D 9C A8 00 32 E4 03 D8 8B FB B9 04 00 8B DF E8  // ....2...........
    2FF0: 19 17 0B C0 74 15 E8 F9 00 A9 80 00 75 0D E8 2E  // ....t.......u...
    3000: 00 83 C5 1C 55 58 83 F8 70 73 08 83 C7 12 49 0B  // ....UX..ps....I.
    3010: C9 75 DA 59 5F 5D C3 20 03 58 02 3C 00 01 00 00  // .u.Y_]. .X.<....
    3020: 04 00 03 3C 00 00 08 80 02 E0 01 3C 00 20 00 51  // ...<.......<. .Q
    3030: 8D 1D E8 D6 16 8D 9A C0 01 E8 47 16 8D 5D 02 E8  // ..........G..]..
    3040: C9 16 8D 9A C2 01 E8 89 00 8D 5D 05 E8 BC 16 8D  // ..........].....
    3050: 9A C6 01 E8 7C 00 8D 5D 08 E8 AF 16 8B C8 8A DC  // ....|..]........
    3060: 66 C1 C8 10 8A D0 80 E2 0F 8A F0 C0 EE 04 8A EC  // f...............
    3070: C0 ED 06 8A FC C0 EF 04 80 E7 03 80 E4 0F C0 E4  // ................
    3080: 04 0A D4 80 E2 3F 80 E4 C0 C0 EC 02 0A F4 8B C3  // .....?..........
    3090: 8D 9A CC 01 E8 EC 15 8D 9A CA 01 8B C1 E8 E3 15  // ................
    30A0: 8D 9A CE 01 33 C0 8A C6 E8 D8 15 8D 9A D0 01 33  // ....3..........3
    30B0: C0 8A C2 E8 CD 15 8D 5D 0C E8 4F 16 8D 9A D2 01  // .......]..O.....
    30C0: E8 0F 00 8D 5D 0F E8 42 16 8D 9A D6 01 E8 B3 15  // ....]..B........
    30D0: 59 C3 8B C8 8A D4 66 C1 C8 10 8A F0 80 E6 0F 8A  // Y.....f.........
    30E0: E8 C0 ED 04 8B C1 E8 9A 15 83 C3 02 8B C2 E8 92  // ................
    30F0: 15 C3 8D 5D 11 E8 13 16 8A E0 BA 06 00 C0 E8 07  // ...]............
    3100: 74 03 80 CA 80 8A C4 C0 E8 03 24 03 3C 02 75 03  // t.........$.<.u.
    3110: 80 CA 40 3C 03 75 12 8A C4 D0 E8 A8 01 74 03 80  // ..@<.u.......t..
    3120: E2 FD A8 02 74 03 80 E2 FB 8B C2 8D 9A D8 01 E8  // ....t...........
    3130: 51 15 C3 3C 01 74 3D 8B D0 0F B6 C6 24 3F 04 3C  // Q..<.t=.....$?.<
    3140: 8D 9A 50 02 E8 3C 15 0F B6 C2 83 C0 1F C1 E0 03  // ..P..<..........
    3150: 8D 9A 4C 02 E8 2C 15 0F B6 DE C1 EB 06 C1 E3 02  // ..L..,..........
    3160: 2E F7 A7 0F 31 2E F7 B7 0D 31 8D 9A 4E 02 E8 12  // ....1....1..N...
    3170: 15 83 C5 08 C3 10 00 0A 00 04 00 03 00 05 00 04  // ................
    3180: 00 10 00 09 00 8D 9C A6 00 E8 7F 15 0A C0 74 1F  // ..............t.
    3190: 8D 9C A8 00 51 B1 03 E8 18 00 59 0B DB 74 10 E8  // ....Q.....Y..t..
    31A0: 69 15 32 C0 66 3D 00 03 0C 00 75 03 0B DB C3 33  // i.2.f=....u....3
    31B0: DB C3 66 50 52 E8 53 15 3C 02 75 39 80 FC 03 72  // ..fPR.S.<.u9...r
    31C0: 34 66 C1 E8 10 32 E4 3C 04 76 2A 03 C3 8B D0 83  // 4f...2.<.v*.....
    31D0: C3 04 3B DA 73 1F E8 32 15 8A E0 80 E4 E0 C0 EC  // ..;.s..2........
    31E0: 05 24 1F 38 CC 74 08 32 E4 FE C0 03 D8 EB E3 0B  // .$.8.t.2........
    31F0: DB 5A 66 58 C3 33 DB 5A 66 58 C3 51 8D 9C A6 00  // .ZfX.3.ZfX.Q....
    3200: E8 08 15 0A C0 74 1B 8D 9C A8 00 B1 12 E8 18 00  // .....t..........
    3210: 74 10 E8 F6 14 66 C1 E8 10 80 E4 07 75 04 B0 01  // t....f......u...
    3220: EB 02 32 C0 0A C0 59 C3 66 50 52 E8 DD 14 3C 70  // ..2...Y.fPR...<p
    3230: 75 2B 66 C1 E8 10 32 E4 83 C3 05 03 C3 8B D0 3B  // u+f...2........;
    3240: DA 73 1A E8 C5 14 38 C8 74 0D 66 C1 E8 10 32 E4  // .s....8.t.f...2.
    3250: 83 C0 03 03 D8 EB E8 0B DB 5A 66 58 C3 33 DB 5A  // .........ZfX.3.Z
    3260: 66 58 C3 57 66 51 8D 9C C0 01 8B FB 8B DF E8 3D  // fX.WfQ.........=
    3270: 00 0B C9 74 0B 66 8B D1 E8 D0 0B 83 C7 1C EB EC  // ...t.f..........
    3280: 66 59 5F C3 50 53 51 B9 07 00 53 8B DA E8 7B 14  // fY_.PSQ...S...{.
    3290: 83 F8 00 5B 74 09 66 C1 E3 10 8B DA E8 F3 10 59  // ...[t.f........Y
    32A0: 5B 58 C3 51 53 B9 07 00 E8 00 11 5B 59 C3 66 50  // [X.QS......[Y.fP
    32B0: 53 83 C3 06 E8 54 14 5B 8B C8 66 C1 E1 10 53 83  // S....T.[..f...S.
    32C0: C3 02 E8 46 14 8B C8 5B 66 58 C3 8D 9C A0 01 32  // ...F...[fX.....2
    32D0: C9 E8 DB 13 C3 57 B9 20 00 E8 DB 10 5F C3 53 51  // .....W. ...._.SQ
    32E0: E8 19 00 32 E4 8A C5 C1 E0 02 59 8D 9C 78 01 03  // ...2......Y..x..
    32F0: D8 E8 17 14 5B C3 B1 02 E8 07 00 C3 B1 01 E8 01  // ....[...........
    3300: 00 C3 53 8D 9C 98 01 E8 BD 13 5B C3 33 C9 E8 34  // ..S.......[.3..4
    3310: 11 75 3C 66 BA 22 F0 FF FF 66 33 C0 E8 3C 03 33  // .u<f."...f3..<.3
    3320: C0 E8 1A 02 74 1C A9 DD 0F 74 F6 E8 1B FA F6 C3  // ....t....t......
    3330: 04 75 05 F6 C3 18 74 E9 E8 1F 00 50 E8 A0 FA 58  // .u....t....P...X
    3340: EB DF E8 0B 00 75 08 E8 20 00 8B C1 E8 90 FA C3  // .....u.. .......
    3350: 66 50 E8 1F 03 8B C8 66 58 C3 66 52 66 BA FF FF  // fP.....fX.fRf...
    3360: FF FF 33 D0 E8 F4 02 66 5A C3 50 53 52 E8 E0 FF  // ..3....fZ.PSR...
    3370: 75 09 33 C0 E8 C7 01 8B C8 EB 10 83 F9 02 74 0B  // u.3...........t.
    3380: E8 82 06 80 FB 01 75 03 83 E1 FD 5A 5B 58 C3 56  // ......u....Z[X.V
    3390: 66 33 C0 66 BA 00 F0 FF FF E8 A5 05 66 C1 E6 10  // f3.f........f...
    33A0: E8 A8 01 0B C0 74 03 E8 05 00 E8 85 05 5E C3 50  // .....t.......^.P
    33B0: 51 E8 6C 01 50 32 C0 E8 90 02 E8 CC 00 E8 7F 00  // Q.l.P2..........
    33C0: 8D 9C 08 03 E8 44 13 38 E8 74 0A 8A C5 E8 9B 12  // .....D.8.t......
    33D0: B0 02 E8 75 02 58 E8 79 00 66 51 8D 9C A4 01 E8  // ...u.X.y.fQ.....
    33E0: 29 13 66 8B C8 8B D3 8D 9C D0 02 E8 1D 13 66 3B  // ).f...........f;
    33F0: C1 75 16 53 8D 9C AA 01 E8 10 13 8B C8 8D 9C D6  // .u.S............
    3400: 02 E8 07 13 3B C1 5B 74 05 B0 02 E8 3C 02 66 59  // ....;.[t....<.fY
    3410: E8 71 FE E8 FF 01 66 25 FF 0F 00 00 59 58 66 BA  // .q....f%....YXf.
    3420: FF FF FF FF 33 D0 E8 18 05 33 D2 C3 53 66 50 8D  // ....3....3..SfP.
    3430: 9C C8 02 E8 D5 12 8A C4 E8 30 12 66 58 5B C3 53  // .........0.fX[.S
    3440: 66 50 8D 9C C8 02 E8 C2 12 8A E0 E8 1D 12 66 58  // fP............fX
    3450: 5B C3 8D 9C C8 02 E8 B2 12 32 C0 E8 0D 12 C3 66  // [........2.....f
    3460: 52 52 32 ED 83 C1 02 B8 06 00 F7 E1 66 33 C9 8B  // RR2.........f3..
    3470: C8 5A 51 66 8B C2 8A CF 66 F7 E1 66 C1 E0 03 59  // .ZQf....f..f...Y
    3480: 66 F7 F1 66 8B C8 66 5A C3 53 E8 48 01 66 C1 E2  // f..f..fZ.S.H.f..
    3490: 10 E8 36 01 8D 9C 98 01 E8 70 12 8A E8 8D 9C AC  // ..6......p......
    34A0: 02 E8 67 12 8A C8 E8 96 0B 8A EB 5B C3 57 53 53  // ..g........[.WSS
    34B0: E8 D6 FF E8 14 01 5B E8 A8 0B 74 61 80 FD 00 75  // ......[...ta...u
    34C0: 29 53 E8 19 FE 66 8B D0 E8 54 FA 8A CD 51 E8 25  // )S...f...T...Q.%
    34D0: FE 8A FD 59 E8 88 FF 5B E8 30 12 66 25 FF FF 00  // ...Y...[.0.f%...
    34E0: 00 66 3B C8 73 34 32 DB EB 33 80 FD 02 75 11 E8  // .f;.s42..3...u..
    34F0: 2C 01 8D 1F E8 14 12 3D 74 40 76 1E 32 DB EB 1D  // ,......=t@v.2...
    3500: 80 FD 03 75 15 53 E8 C1 00 B3 03 E8 10 0B 5B E8  // ...u.S........[.
    3510: F9 11 3B C2 76 04 32 DB EB 03 80 CB 01 5B 5F C3  // ..;.v.2......[_.
    3520: 53 8B F0 E8 17 0D 23 F0 74 09 8B C6 E8 7C 0B 8B  // S.....#.t....|..
    3530: F3 0B DB 5B C3 51 E8 31 FE E8 0F 00 59 C3 51 50  // ...[.Q.1....Y.QP
    3540: E8 FA 0C 8B C8 58 E8 02 00 59 C3 57 53 E8 2B 0D  // .....X...Y.WS.+.
    3550: 0B C0 74 09 8B 1D 83 C7 02 3B C3 75 F7 8B 1D 83  // ..t......;.u....
    3560: FB FF 74 0B 83 C7 02 85 D9 74 F2 8B C3 EB 02 33  // ..t......t.....3
    3570: C0 0B C0 5B 5F C3 33 C0 E8 C3 FF 74 13 E8 A0 FF  // ...[_.3....t....
    3580: 8B DE B9 00 01 E8 F5 0D 83 C6 08 E8 5F 0C EB E8  // ............_...
    3590: BB F0 46 B8 5A A5 E8 EA 10 C3 53 66 50 8D 9C 08  // ..F.Z.....SfP...
    35A0: 03 E8 67 11 8A E8 66 58 5B C3 53 66 50 8D 9C C8  // ..g...fX[.SfP...
    35B0: 02 E8 57 11 8A C8 66 58 5B C3 53 66 50 8D 9C C9  // ..W...fX[.SfP...
    35C0: 02 E8 47 11 8A C8 66 58 5B C3 53 8D 5C 14 E8 3A  // ..G...fX[.S.\..:
    35D0: 11 8B D0 5B C3 53 66 50 8D 5C 16 E8 2D 11 8B D0  // ...[.SfP.\..-...
    35E0: 66 58 5B C3 53 66 50 8D 9C 18 03 E8 1D 11 66 8B  // fX[.SfP.......f.
    35F0: D0 66 58 5B C3 53 66 50 8D 9C 1C 03 E8 0C 11 66  // .fX[.SfP.......f
    3600: 8B D0 66 58 5B C3 53 66 50 8D 5C 10 E8 FC 10 8B  // ..fX[.SfP.\.....
    3610: C8 66 58 5B C3 53 8D 5C 08 E8 EF 10 5B C3 53 66  // .fX[.S.\....[.Sf
    3620: 50 8D 5C 0C E8 E4 10 8B D0 66 58 5B C3 8D 5C 04  // P.\......fX[..\.
    3630: E8 D8 10 C3 51 8D 5C 04 32 C9 E8 72 10 59 C3 8D  // ....Q.\.2..r.Y..
    3640: 9C 18 03 66 8B C2 E8 22 10 C3 53 51 8A E8 E8 DC  // ...f..."..SQ....
    3650: FF 24 FD 0A E8 E8 DC FF 59 5B C3 53 66 50 51 66  // .$......Y[.SfPQf
    3660: 8B C8 BB 00 00 E8 24 0A 23 C2 0B C1 E8 26 0A 59  // ......$.#....&.Y
    3670: 66 58 5B C3 BB 00 00 E8 12 0A 66 25 DF 0F 00 00  // fX[.......f%....
    3680: C3 80 FA 14 C3 E8 D3 0C E8 61 0C E8 3F 0C 75 06  // .........a..?.u.
    3690: E8 BC 0B E8 43 0C C3 B0 01 C3 55 B3 01 E8 29 0E  // ....C.....U...).
    36A0: 5D C3 66 53 66 BB 04 00 00 00 E8 05 00 33 C0 66  // ].fSf........3.f
    36B0: 5B C3 55 66 C1 E3 10 BB 00 00 E8 0C 0E 5D C3 E8  // [.Uf.........]..
    36C0: 61 0D BB 0A 00 E8 CD 09 C3 BB 0A 00 E8 BD 09 66  // a..............f
    36D0: 8B C8 E8 4E 0D BB 0A 00 66 2B C1 E8 B7 09 C3 E8  // ...N....f+......
    36E0: 29 00 0B C9 74 22 E8 A6 FC E8 24 07 66 51 66 8B  // )...t"....$.fQf.
    36F0: C8 BB 07 00 E8 95 09 66 25 00 FE 00 00 66 0B C1  // .......f%....f..
    3700: E8 92 09 66 59 0C 01 C3 32 C0 C3 E8 50 02 0B C9  // ...fY...2...P...
    3710: 75 06 E8 55 FC E8 56 02 51 E8 4E FC 66 C1 E6 10  // u..U..V.Q.N.f...
    3720: 33 C0 E8 10 FE 74 09 E8 EE 02 75 F6 33 C8 EB F2  // 3....t....u.3...
    3730: 58 23 C8 66 C1 EE 10 C3 A8 10 75 63 E8 E3 06 66  // X#.f......uc...f
    3740: C1 E6 10 33 C0 E8 F6 FD 74 35 E8 D3 FD 50 51 8B  // ...3....t5...PQ.
    3750: C8 E8 DE 01 85 C1 59 58 74 0D 50 E8 CF FE 24 03  // ......YXt.P...$.
    3760: 3C 03 58 75 E0 EB 0C 50 E8 C2 FE A8 01 58 74 D5  // <.Xu...P.....Xt.
    3770: E8 CC FC 50 E8 8B 07 58 B5 00 E8 B7 FE EB C6 E8  // ...P...X........
    3780: B0 01 E8 9B FD E8 1A 01 B1 00 E8 45 07 66 C1 EE  // ...........E.f..
    3790: 10 E8 87 06 A8 20 75 3B A8 40 75 03 E8 17 08 E8  // ..... u;.@u.....
    37A0: 6E 06 0A C0 75 00 E8 89 01 E8 74 FD E8 6F FE E8  // n...u.....t..o..
    37B0: CF FE 75 14 E8 4E 02 0A DB 74 0D E8 81 FC E8 41  // ..u..N...t.....A
    37C0: 07 B5 00 E8 6E FE EB 08 E8 28 07 B5 01 E8 64 FE  // ....n....(....d.
    37D0: E8 D5 00 C3 E8 66 0A C3 E8 9B FD E8 A6 06 33 C9  // .....f........3.
    37E0: E8 8B 01 66 33 D2 66 33 C0 E8 6F FE E8 4E 0A 0B  // ...f3.f3..o..N..
    37F0: C0 74 1C E8 74 07 E8 52 00 B1 FF E8 77 00 33 C0  // .t..t..R....w.3.
    3800: E8 3B FD 74 0A E8 18 FD 50 E8 14 07 58 EB F1 32  // .;.t....P...X..2
    3810: C9 E8 A6 01 E8 26 0A 0B C0 C3 E8 59 FD E8 64 06  // .....&.....Y..d.
    3820: 66 33 C0 66 BA 00 F0 FF FF E8 15 01 51 B1 01 E8  // f3.f........Q...
    3830: 6E 01 59 E8 47 07 33 C0 E8 03 FD 74 0A E8 E0 FC  // n.Y.G.3....t....
    3840: 50 E8 CD 06 58 EB F1 E8 F3 06 C3 B8 02 00 E8 CF  // P...X...........
    3850: FC 74 21 B8 02 00 E8 F0 F4 F6 C3 04 75 0A E8 DC  // .t!.........u...
    3860: 09 83 E0 FD E8 DF 09 C3 66 B8 02 00 00 00 E8 EA  // ........f.......
    3870: FD E8 36 F6 C3 E8 26 08 74 13 BB 02 00 E8 0C 08  // ..6...&.t.......
    3880: 8A E1 E8 10 08 E8 CD 06 0C 01 C3 0C 01 C3 51 E8  // ..............Q.
    3890: 0C 08 74 0C 8A CC BB 02 00 E8 F0 07 8A C4 8A E1  // ..t.............
    38A0: 59 C3 B0 01 E8 09 06 C3 B0 00 E8 03 06 C3 E8 94  // Y...............
    38B0: 0B 75 18 E8 7C 00 E8 67 FC 80 F9 01 75 0E 51 E8  // .u..|..g....u.Q.
    38C0: 31 06 B5 01 E8 6D FD 59 E8 DD FF C3 E8 D3 FF 51  // 1....m.Y.......Q
    38D0: E8 3E 06 B5 00 E8 5C FD 59 C3 B8 02 00 E8 40 FC  // .>....\.Y.....@.
    38E0: 74 03 E8 62 06 C3 E8 C6 04 3B C1 7C 35 8B C1 E8  // t..b.....;.|5...
    38F0: 06 05 E8 1A 07 8B C8 51 E8 36 05 E8 FA 04 59 E8  // .......Q.6....Y.
    3900: 0D 07 3B C8 72 02 8B C1 8D 5C 04 E8 75 0D 32 C9  // ..;.r....\..u.2.
    3910: E8 61 0A FE C1 38 C1 72 F7 8D 5C 04 E8 EC 0D 0B  // .a...8.r..\.....
    3920: C0 C3 33 C0 C3 BB 00 48 33 C0 8A C2 C1 E0 02 03  // ..3....H3.......
    3930: D8 C3 53 BB 03 00 E8 53 07 66 25 FF 0F 00 00 5B  // ..S....S.f%....[
    3940: C3 53 66 50 66 51 66 8B C8 BB 03 00 E8 3D 07 66  // .SfPfQf......=.f
    3950: 23 C2 66 0B C1 E8 3D 07 66 59 66 58 5B C3 66 50  // #.f...=.fYfX[.fP
    3960: BB 05 00 E8 26 07 25 FF 0F 8B C8 66 58 C3 E8 CC  // ....&.%....fX...
    3970: 08 23 C8 66 50 BB 05 00 E8 11 07 25 00 F0 0B C1  // .#.fP......%....
    3980: E8 12 07 66 58 C3 66 50 53 BB 06 00 E8 FD 06 A8  // ...fX.fPS.......
    3990: 10 75 09 BB F0 46 E8 72 0D 3D 5A A5 5B 66 58 C3  // .u...F.r.=Z.[fX.
    39A0: 66 50 53 BB 06 00 E8 E3 06 80 F1 01 C0 E1 04 24  // fPS............$
    39B0: EF 0A C1 E8 DF 06 5B 66 58 C3 53 66 50 BB F8 46  // ......[fX.SfP..F
    39C0: E8 48 0D 8A C1 E8 A3 0C 66 58 5B C3 53 BB F8 46  // .H......fX[.S..F
    39D0: E8 38 0D 83 E0 01 5B C3 53 66 50 BB 07 00 E8 AB  // .8....[.SfP.....
    39E0: 06 F6 C4 01 66 58 B0 06 74 02 B0 08 5B C3 53 BB  // ....fX..t...[.S.
    39F0: 07 00 E8 97 06 80 E4 FE 80 FD 06 74 03 80 CC 01  // ...........t....
    3A00: E8 92 06 5B C3 66 50 BB 06 00 E8 7F 06 24 40 C0  // ...[.fP......$@.
    3A10: E8 06 8A D8 66 58 C3 C3 50 66 51 E8 02 FB 83 EC  // ....fX..PfQ.....
    3A20: 04 8B EC 66 33 C0 66 89 46 00 33 D2 8D BC C0 01  // ...f3.f.F.3.....
    3A30: 8D 1D E8 D6 0C 0B C0 74 3D 8B DF B0 00 E8 2D 01  // .......t=.....-.
    3A40: 74 2F 8B DF E8 67 F8 66 8B 46 00 3B C8 7F 10 72  // t/...g.f.F.;...r
    3A50: 20 66 C1 C8 10 66 C1 C9 10 3B C8 7F 0E EB 12 66  //  f...f...;.....f
    3A60: C1 C8 10 66 C1 C9 10 3B C8 72 06 8B D7 66 89 4E  // ...f...;.r...f.N
    3A70: 00 83 C7 1C EB BA 0B D2 74 0A 8D 9C A4 01 E8 03  // ........t.......
    3A80: F8 E9 88 00 66 33 C0 66 89 46 00 8D BC 4C 02 33  // ....f3.f.F...L.3
    3A90: D2 8D 1D E8 75 0C 0B C0 74 58 66 50 E8 6E F4 3C  // ....u...tXfP.n.<
    3AA0: 01 66 58 74 05 3D 40 06 73 43 66 52 66 8B D0 8D  // .fXt.=@.sCfRf...
    3AB0: 5D 04 E8 56 0C E8 5D 00 8B CA 66 5A 74 2F 56 8D  // ]..V..]...fZt/V.
    3AC0: 9C A4 01 8B F1 E8 DB F7 5E B0 00 E8 9F 00 74 1D  // ........^.....t.
    3AD0: 8D 1D E8 36 0C 8B D9 8B 47 06 66 C1 E0 10 8B 47  // ...6....G.f....G
    3AE0: 02 66 3B 46 00 72 06 8B D1 66 89 46 00 83 C7 08  // .f;F.r...f.F....
    3AF0: EB 9F 0B D2 74 16 56 8D 9C A4 01 8B F2 E8 A3 F7  // ....t.V.........
    3B00: 5E 53 8D 9C BA 01 33 C0 E8 78 0B 5B 83 C4 04 0B  // ^S....3..x.[....
    3B10: D2 66 59 58 C3 57 53 51 E8 7E 07 3B 55 02 75 18  // .fYX.WSQ.~.;U.u.
    3B20: 66 C1 CA 10 8B DA 66 C1 CA 10 3B 5D 06 75 09 0A  // f.....f...;].u..
    3B30: C0 74 0E 3A 45 1B 74 09 83 C7 1C E2 DE 33 D2 EB  // .t.:E.t......3..
    3B40: 02 8B D7 0B D2 59 5B 5F C3 51 66 52 E8 4A 07 3A  // .....Y[_.QfR.J.:
    3B50: 65 1A 75 09 0A C0 74 0E 3A 45 1B 74 09 83 C7 1C  // e.u...t.:E.t....
    3B60: E2 ED 33 FF EB 00 0B FF 66 5A 59 C3 C3 66 51 66  // ..3.....fZY..fQf
    3B70: 52 53 53 66 C1 CE 10 8B DE 66 C1 CE 10 E8 8B 0B  // RSSf.....f......
    3B80: 5B 66 8B D0 E8 27 F7 3B CA 72 0A 66 3B CA 72 05  // [f...'.;.r.f;.r.
    3B90: E8 1A F9 75 02 32 C0 5B 66 5A 66 59 C3 56 57 E8  // ...u.2.[fZfY.VW.
    3BA0: A7 FF 8B F7 E8 FC F6 5F 5E C3 66 50 53 66 51 52  // ......._^.fPSfQR
    3BB0: 57 56 51 8B DE B9 08 00 E8 C2 07 59 8D 5C 08 8B  // WVQ........Y.\..
    3BC0: C1 66 C1 E0 10 8A C2 E8 A1 0A F6 C2 03 75 24 8B  // .f...........u$.
    3BD0: C1 24 7F BF 8D 3C 80 3D FF 0F 84 0F 01 3A 05 75  // .$...<.=.....:.u
    3BE0: 0D 66 8B 45 01 66 B9 00 05 02 00 E9 96 00 83 C7  // .f.E.f..........
    3BF0: 05 EB E3 F6 C2 01 74 25 8B C1 E8 70 01 0F 84 EB  // ......t%...p....
    3C00: 00 33 C9 8A CC 8A D0 0A C0 75 12 8D 5C 08 66 25  // .3.......u..\.f%
    3C10: FF FF 00 00 66 C1 E0 08 E8 50 0A EB B2 8A E1 8A  // ....f....P......
    3C20: CA 80 E1 0C C0 E9 02 80 E2 F0 C0 EA 04 8A EA 80  // ................
    3C30: FC 70 72 2A 80 FC 75 73 25 80 EC 70 8A C4 32 E4  // .pr*..us%..p..2.
    3C40: 50 E8 30 02 8B D8 58 38 D8 72 05 33 C0 E9 9C 00  // P.0...X8.r.3....
    3C50: E8 28 02 E8 B5 0A 0B C0 0F 84 90 00 EB 1B 32 C0  // .(............2.
    3C60: E8 E6 FE 0F 84 85 00 8D 5C 16 8B 05 E8 14 0A 8B  // ........\.......
    3C70: 45 06 66 C1 E0 10 8B 45 02 50 E8 92 03 66 C1 E1  // E.f....E.P...f..
    3C80: 10 8B C8 58 8D 1C E8 E2 09 66 50 8D 5C 04 66 8B  // ...X.....fP.\.f.
    3C90: C1 E8 D7 09 66 58 66 C1 E8 10 66 81 E1 FF FF 00  // ....fXf...f.....
    3CA0: 00 66 F7 E1 66 50 8D 5C 06 E8 5F 0A 8B C8 66 58  // .f..fP.\.._...fX
    3CB0: 66 D3 E0 66 C1 E8 10 40 8D 5C 14 E8 C5 09 BF ED  // f..f...@.\......
    3CC0: 3C 83 F9 01 74 11 BF F5 3C 81 F9 01 01 74 08 BF  // <...t...<....t..
    3CD0: FD 3C 83 F9 02 75 15 8D 5C 0C 66 8B 05 E8 8B 09  // .<...u..\.f.....
    3CE0: 8D 5C 10 66 8B 45 04 E8 81 09 0B DB 5E 5F 5A 66  // .\.f.E......^_Zf
    3CF0: 59 5B 66 58 C3 00 40 01 90 01 01 40 01 90 01 02  // Y[fX..@....@....
    3D00: 80 02 90 01 03 80 02 90 01 04 40 01 90 01 05 40  // ..........@....@
    3D10: 01 90 01 06 80 02 90 01 07 D0 02 5E 01 0D 40 01  // ...........^..@.
    3D20: 90 01 0E 80 02 90 01 0F 80 02 5E 01 10 80 02 5E  // ..........^....^
    3D30: 01 11 80 02 E0 01 12 80 02 E0 01 13 80 02 90 01  // ................
    3D40: 23 20 04 90 01 32 20 04 B0 02 33 20 04 C0 02 62  // # ...2 ...3 ...b
    3D50: 80 02 E0 01 FF 05 0A 05 05 05 00 00 00 05 0B 06  // ................
    3D60: 05 05 00 00 00 08 10 08 08 08 00 00 00 56 E8 27  // .............V.'
    3D70: 07 80 E4 01 3B 04 74 09 83 C6 04 E2 F7 33 C0 EB  // ....;.t......3..
    3D80: 05 8B 44 02 0B C0 5E C3 57 53 50 E8 0A 07 83 E9  // ..D...^.WSP.....
    3D90: 0A E8 E0 00 83 F8 05 76 03 B8 05 00 D1 E0 03 C8  // .......v........
    3DA0: FB A5 83 C6 02 E2 FA B8 FF FF AB 58 5B 5F C3 66  // ...........X[_.f
    3DB0: 53 51 66 52 E8 41 00 E8 77 00 66 C1 E8 10 66 0F  // SQfR.A..w.f...f.
    3DC0: B7 D8 66 B8 00 00 00 03 66 D3 E8 66 33 D2 66 F7  // ..f.....f..f3.f.
    3DD0: F3 E8 3B 02 66 5A 59 66 5B C3 53 66 50 BB 07 00  // ..;.fZYf[.SfP...
    3DE0: E8 A9 02 0A C0 66 58 5B C3 53 66 50 BB 07 00 E8  // .....fX[.SfP....
    3DF0: 9A 02 A8 01 66 58 5B C3 53 66 50 8D 5C 06 E8 0A  // ....fX[.SfP.\...
    3E00: 09 8A C8 66 58 5B C3 51 B9 08 00 E8 84 05 59 C3  // ...fX[.Q......Y.
    3E10: 53 8D 5C 08 E8 F4 08 24 03 5B C3 8D 5C 09 E8 EA  // S.\....$.[..\...
    3E20: 08 C3 51 53 B1 01 8A E8 8D 5C 08 E8 81 08 5B 59  // ..QS.....\....[Y
    3E30: C3 53 8D 1C E8 D4 08 5B C3 53 8D 5C 04 E8 CB 08  // .S.....[.S.\....
    3E40: 5B C3 53 8D 5C 16 E8 C2 08 5B C3 53 66 52 33 C0  // [.S.\....[.SfR3.
    3E50: E8 C2 FC 66 5A 75 1B E8 34 00 74 16 E8 15 00 40  // ...fZu..4.t....@
    3E60: 83 F8 05 73 0D E8 03 08 48 E8 0F 00 66 8B C2 E8  // ...s....H...f...
    3E70: F9 07 5B C3 BB 00 4E E8 91 08 C3 BB 08 4E C1 E0  // ..[...N......N..
    3E80: 03 03 D8 C3 BB 00 4E B9 32 00 E8 F0 04 C3 51 E8  // ......N.2.....Q.
    3E90: E2 FF 0B C0 74 12 8B C8 BB 08 4E E8 6D 08 66 3B  // ....t.....N.m.f;
    3EA0: C2 74 07 83 C3 08 E2 F3 0B DB 59 C3 C3 00 C3 00  // .t........Y.....
    3EB0: 8A E8 BB 20 DF 3C 01 74 02 32 DB E8 39 28 E8 E9  // ... .<.t.2..9(..
    3EC0: F6 66 B8 80 06 00 08 66 33 DB 8A D9 8A CD E8 B6  // .f.....f3.......
    3ED0: 00 C3 66 51 66 52 66 57 66 B8 80 05 00 08 66 BB  // ..fQfRfWf.....f.
    3EE0: 00 4C 00 00 66 33 C9 8B CE E8 9B 00 66 5F 66 5A  // .L..f3......f_fZ
    3EF0: 66 59 C3 66 B8 80 07 00 04 66 33 DB 8B DE E8 86  // fY.f.....f3.....
    3F00: 00 C3 66 B8 80 08 00 04 66 33 DB 8B DE E8 77 00  // ..f.....f3....w.
    3F10: C3 66 B8 80 09 00 04 66 33 DB 8B DE E8 68 00 C3  // .f.....f3....h..
    3F20: C3 66 B8 80 0A 00 04 66 33 DB 8B DE E8 58 00 E8  // .f.....f3....X..
    3F30: F7 EF F6 C3 02 74 03 B0 00 C3 B0 01 C3 66 B8 80  // .....t.......f..
    3F40: 0D 00 00 E8 41 00 C3 66 B8 80 0F 00 04 66 33 DB  // ....A..f.....f3.
    3F50: 8A D9 E8 32 00 66 B8 80 0F 00 04 66 33 DB 56 E8  // ...2.f.....f3.V.
    3F60: 10 03 8B 5C 20 5E E8 1E 00 C3 66 B8 00 00 00 00  // ...\ ^....f.....
    3F70: E8 14 00 66 B8 80 0C 00 04 E8 0B 00 C3 66 B8 00  // ...f.........f..
    3F80: 01 00 00 E8 01 00 C3 83 EC 1C 8B EC 66 89 46 00  // ............f.F.
    3F90: 66 89 5E 04 66 89 4E 08 66 89 56 0C 66 89 7E 10  // f.^.f.N.f.V.f.~.
    3FA0: 66 89 76 14 8C D0 66 C1 E0 10 8B C4 BB 42 00 E8  // f.v...f......B..
    3FB0: FA 02 83 C4 1C C3 51 8D 5C 14 E8 4E 07 66 C1 E0  // ......Q.\..N.f..
    3FC0: 10 E8 02 00 59 C3 83 EC 10 8B EC 66 3D F0 FF FF  // ....Y......f=...
    3FD0: 03 76 06 66 B8 F0 FF FF 03 66 8B C8 66 33 C0 66  // .v.f.....f..f3.f
    3FE0: 89 46 04 66 89 46 00 66 89 46 08 B0 01 88 46 09  // .F.f.F.f.F....F.
    3FF0: 66 B8 00 00 00 D0 66 0B C1 66 89 46 0C 8C D0 66  // f.....f..f.F...f
    4000: C1 E0 10 8B C4 BB 35 00 E8 A1 02 83 C4 10 C3 3D  // ......5........=
    4010: C0 7F 76 04 B8 C0 7F C3 83 C0 3F 24 C0 C3 53 51  // ..v.......?$..SQ
    4020: 66 50 B9 68 74 80 FB 03 74 0B B9 A0 8C 80 FB 00  // fP.ht...t.......
    4030: 75 03 B9 78 69 66 33 D2 8B D1 66 58 59 5B C3 66  // u..xif3...fXY[.f
    4040: 52 B3 00 66 F7 C2 00 00 FF FF 75 13 80 FD 13 74  // R..f......u....t
    4050: 0E 80 FD 14 74 09 B3 03 80 F9 03 74 02 B3 02 66  // ....t......t...f
    4060: 5A C3 E8 A6 06 66 C1 E8 10 0B C0 74 1C 53 83 C3  // Z....f.....t.S..
    4070: 06 E8 97 06 5B 3D E0 01 72 0F 53 83 C3 18 E8 8A  // ....[=..r.S.....
    4080: 06 5B A8 80 75 03 0C 01 C3 32 C0 C3 53 83 C3 4C  // .[..u....2..S..L
    4090: E8 46 06 5B C3 53 83 C3 4C E8 98 05 5B C3 56 E8  // .F.[.S..L...[.V.
    40A0: D0 01 8B 44 38 83 7C 20 00 5E C3 BB 00 50 83 F8  // ...D8.| .^...P..
    40B0: 02 74 32 BB 00 54 83 F8 08 74 2A BB 00 58 3D 80  // .t2..T...t*..X=.
    40C0: 00 74 22 BB 00 5C 3D 00 02 74 1A BB 00 60 3D 00  // .t"..\=..t...`=.
    40D0: 04 74 12 BB 00 64 3D 00 08 74 0A BB 00 68 83 F8  // .t...d=..t...h..
    40E0: 40 74 02 33 DB C3 57 E8 56 00 74 0A 8B 5D 02 E8  // @t.3..W.V.t..]..
    40F0: 08 00 0B DB 5F C3 33 DB 5F C3 52 51 0B DB 74 1B  // ...._.3._.RQ..t.
    4100: 56 E8 55 01 03 DE 5E 33 C9 8A 4F 01 80 3F FF 74  // V.U...^3..O..?.t
    4110: 08 3A 07 74 06 03 D9 EB F0 33 DB 0B DB 59 5A C3  // .:.t.....3...YZ.
    4120: 56 51 E8 34 01 32 C9 8D 7C 08 3B 5D 04 74 0C 83  // VQ.4.2..|.;].t..
    4130: C7 10 FE C1 3A 4C 06 72 F1 33 FF 0B FF 59 5E C3  // ....:L.r.3...Y^.
    4140: 56 51 E8 14 01 32 C9 8D 7C 08 3B 1D 74 0C 83 C7  // VQ...2..|.;.t...
    4150: 10 FE C1 3A 4C 06 72 F2 33 FF 0B FF 59 5E C3 56  // ...:L.r.3...Y^.V
    4160: 51 E8 F5 00 32 C9 8D 7C 08 3A 1D 74 0C 83 C7 10  // Q...2..|.:.t....
    4170: FE C1 3A 4C 06 72 F2 33 FF 0B FF 59 5E C3 56 51  // ..:L.r.3...Y^.VQ
    4180: E8 D6 00 32 C9 8D 7C 08 3B 45 0C 74 0C 83 C7 10  // ...2..|.;E.t....
    4190: FE C1 3A 4C 06 72 F1 33 FF 0B FF 59 5E C3 57 50  // ..:L.r.3...Y^.WP
    41A0: E8 DB FF 8A C3 8B 5D 02 E8 4F FF 58 5F C3 53 32  // ......]..O.X_.S2
    41B0: C9 B3 01 E8 E8 FF 74 03 8A 4F 02 0A C9 5B C3 53  // ......t..O...[.S
    41C0: 32 ED B3 02 E8 D7 FF 74 03 8A 6F 02 0A ED 5B C3  // 2......t..o...[.
    41D0: 50 57 8B DA E8 49 FF 75 04 33 DB EB 0D B0 14 8B  // PW...I.u.3......
    41E0: 5D 08 E8 15 FF 74 F2 8B 5F 02 5F 58 C3 66 50 53  // ]....t.._._X.fPS
    41F0: 51 57 8D 1C 66 25 FF FF 00 00 E8 6E 04 8B D8 E8  // QW..f%.....n....
    4200: 3B 00 23 C3 74 31 E8 75 FF 0B FF 74 2A 66 50 66  // ;.#.t1.u...t*fPf
    4210: 8B 45 04 8D 5C 0C E8 52 04 66 33 C0 8B 05 8D 5C  // .E..\..R.f3....\
    4220: 04 E8 47 04 66 58 E8 85 FF E8 93 FF 8D 5C 08 66  // ..G.fX.......\.f
    4230: 33 C0 8B C1 E8 34 04 5F 59 5B 66 58 C3 56 E8 18  // 3....4._Y[fX.V..
    4240: 00 8B 44 04 5E C3 56 E8 0F 00 89 44 04 5E C3 C3  // ..D.^.V....D.^..
    4250: BF 6E 03 8B 3D 8B 7D 0C C3 BE 6E 03 8B 34 8B 74  // .n..=.}...n..4.t
    4260: 30 C3 1E 0E 1F BF 6E 03 8B 3D 8B 7D 0E 83 C7 04  // 0.....n..=.}....
    4270: 1F C3 BE 6E 03 8B 34 8B 74 10 C3 BF 6E 03 8B 3D  // ...n..4.t...n..=
    4280: 8B 7D 26 83 C7 04 C3 BE 6E 03 8B 34 8B 74 1A C3  // .}&.....n..4.t..
    4290: BE 6E 03 8B 34 8B 74 3A C3 BF 6E 03 8B 3D 8B 7D  // .n..4.t:..n..=.}
    42A0: 0A 83 C7 04 B9 07 00 C3 E8 01 00 CB 83 EC 06 8B  // ................
    42B0: EC 89 46 00 66 33 C0 C6 46 04 00 89 46 02 06 52  // ..F.f3..F...F..R
    42C0: 8A D3 8B C5 E8 B2 16 5A 07 83 C4 06 C3 E8 80 FF  // .......Z........
    42D0: 66 F7 45 10 01 00 00 00 C3 50 E8 73 FF B8 01 00  // f.E......P.s....
    42E0: 09 45 10 58 C3 E8 68 FF 88 45 10 C3 66 53 83 EC  // .E.X..h..E..fS..
    42F0: 48 8B EC 66 89 5E 00 66 89 4E 04 8C D0 66 C1 E0  // H..f.^.f.N...f..
    4300: 10 8B C4 BB 00 00 E8 A3 FF 83 C4 48 66 5B E8 49  // ...........Hf[.I
    4310: 01 E8 83 01 E8 0E 00 BB 04 00 E8 6F FD 66 C1 E8  // ...........o.f..
    4320: 10 E8 C1 FF C3 83 EC 0C 8B EC 8C D0 66 C1 E0 10  // ............f...
    4330: 8B C4 BB 16 00 E8 74 FF 66 BB 00 00 00 00 83 C4  // ......t.f.......
    4340: 0C E8 0C FF 66 8B C3 66 C1 E8 08 66 89 45 28 66  // ....f..f...f.E(f
    4350: 8B C3 66 C1 E0 18 66 89 45 2C C3 E8 F2 FE 66 8B  // ..f...f.E,....f.
    4360: 5D 08 66 8B 4D 0C C3 56 E8 25 FF 66 8B 44 08 5E  // ].f.M..V.%.f.D.^
    4370: C3 B0 06 C3 B0 01 C3 B0 06 C3 B0 08 C3 53 66 50  // .............SfP
    4380: 66 33 C0 E8 E5 02 83 C3 04 E2 F8 66 58 5B C3 32  // f3.........fX[.2
    4390: C0 C3 FC E8 75 03 66 C1 CB 10 E8 CE 02 66 C1 CB  // ....u.f......f..
    43A0: 10 66 81 C3 04 00 04 00 E2 E9 C3 FC 66 AD E8 BA  // .f..........f...
    43B0: 02 83 C3 04 E2 F6 C3 FC E8 50 03 66 AB 83 C3 04  // .........P.f....
    43C0: E2 F6 C3 66 50 B8 64 00 E8 10 00 66 58 C3 66 50  // ...fP.d....fX.fP
    43D0: B8 50 C3 D1 E1 E8 03 00 66 58 C3 52 F7 E1 8B CA  // .P......fX.R....
    43E0: E8 41 01 66 53 8B D9 66 C1 E3 10 8B D8 66 B8 0C  // .A.fS..f.....f..
    43F0: AC 05 00 B2 00 66 EF B2 04 66 ED 33 C9 66 03 D8  // .....f...f.3.f..
    4400: 73 0A 66 ED 66 A9 00 00 00 80 75 F6 66 ED 66 3B  // s.f.f.....u.f.f;
    4410: C3 73 0C 66 C1 E8 10 3B C1 72 04 8B C8 EB ED 66  // .s.f...;.r.....f
    4420: 5B 5A C3 66 52 E8 FC 00 66 B8 0C AC 05 00 B2 00  // [Z.fR...f.......
    4430: 66 EF B2 04 66 ED 66 33 D2 66 BB 64 00 00 00 66  // f...f.f3.f.d...f
    4440: F7 F3 66 5A C3 66 50 53 BB 07 00 E8 3E FC 25 00  // ..fZ.fPS....>.%.
    4450: 02 35 00 02 0B C0 5B 66 58 C3 66 51 B3 01 E8 68  // .5....[fX.fQ...h
    4460: 00 E8 23 FE 66 33 C9 8B 4C 08 66 C1 E0 0A 0B C9  // ..#.f3..L.f.....
    4470: 75 03 B9 00 0C 66 2B C1 E8 0C FE 66 89 44 04 89  // u....f+....f.D..
    4480: 4C 08 66 59 C3 56 1E 0E 1F E8 FB FD 66 8B 44 04  // L.fY.V......f.D.
    4490: 66 C1 E0 0A 1F 5E C3 C3 BE 6E 03 8B 34 8B 74 1E  // f....^...n..4.t.
    44A0: 83 C6 04 B9 1C 00 C3 56 E8 C7 FD 8A 6C 33 5E C3  // .......V....l3^.
    44B0: 56 E8 BE FD 8A 44 24 80 FD 00 74 05 88 6C 33 0C  // V....D$...t..l3.
    44C0: 02 88 44 24 5E C3 32 C0 C3 66 53 83 EC 04 8B EC  // ..D$^.2..fS.....
    44D0: 8C D0 66 C1 E0 10 8B C4 66 89 5E 00 BB 06 00 E8  // ..f.....f.^.....
    44E0: CA FD 8B EC 66 8B 46 00 83 C4 04 66 5B C3 83 EC  // ....f.F....f[...
    44F0: 0C 8B EC 8C D0 66 C1 E0 10 8B C4 BB 16 00 E8 AB  // .....f..........
    4500: FD 8B EC 66 8B 5E 00 66 8B 4E 00 66 8B 56 08 83  // ...f.^.f.N.f.V..
    4510: C4 0C C3 66 B8 C8 91 05 00 C3 BF 6E 03 8B 3D 8B  // ...f.......n..=.
    4520: 7D 12 C3 00 66 50 8C C8 3D 00 C0 75 0C BA C3 03  // }...fP..=..u....
    4530: EC 8A F0 0A F6 74 02 EB 0E 53 2E 8B 1E 14 00 B2  // .....t...S......
    4540: 20 E8 D6 00 8A F4 5B 32 D2 66 ED 66 58 C3 2E 8B  //  .....[2.f.fX...
    4550: 1E 14 00 C3 0B C9 75 1A 4B 74 16 43 3B DA 77 09  // ......u.Kt.C;.w.
    4560: 8B C8 8B C2 2B D2 F7 F3 91 F7 F3 8B DA 8B D1 2B  // ....+..........+
    4570: C9 C3 3B CA 72 1A 75 10 3B D8 77 0C 2B C3 8B D8  // ..;.r.u.;.w.+...
    4580: 2B C9 2B D2 B8 01 00 C3 2B C9 2B DB 93 87 CA C3  // +.+.....+.+.....
    4590: 55 56 2B F6 8B EE 03 DB 13 C9 72 11 45 3B CA 72  // UV+.......r.E;.r
    45A0: F5 77 04 3B D8 76 EF F8 13 F6 4D 78 20 D1 D9 D1  // .w.;.v....Mx ...
    45B0: DB 2B C3 1B D1 F5 72 F0 03 F6 4D 78 0C D1 E9 D1  // .+....r...Mx....
    45C0: DB 03 C3 13 D1 73 F1 EB DF 03 C3 13 D1 8B D8 8B  // .....s..........
    45D0: CA 8B C6 33 D2 5E 5D C3 93 50 92 0B C0 74 02 F7  // ...3.^]..P...t..
    45E0: E2 91 0B C0 74 04 F7 E3 03 C8 58 F7 E3 03 D1 C3  // ....t.....X.....
    45F0: 52 66 50 B4 80 8A C7 66 C1 E0 10 8A E3 8A C2 24  // RfP....f.......$
    4600: FC BA F8 0C 66 EF 66 58 5A C3 52 BA FC 0C 66 ED  // ....f.fXZ.R...f.
    4610: 5A C3 52 BA FC 0C 66 EF 5A C3 E8 31 FF 9C FA E8  // Z.R...f.Z..1....
    4620: CE FF E8 E5 FF 9D C3 E8 24 FF 9C FA E8 C1 FF E8  // ........$.......
    4630: E0 FF 9D C3 52 66 53 66 50 E8 06 00 66 58 66 5B  // ....RfSfP...fXf[
    4640: 5A C3 66 C1 E3 10 66 C1 EB 0E E8 D7 FE E8 BF 01  // Z.f...f.........
    4650: C3 66 50 66 C1 E3 10 66 C1 EB 10 E8 27 FE 66 03  // .fPf...f....'.f.
    4660: D8 66 81 CB 00 00 00 80 66 58 C3 52 66 53 E8 04  // .f......fX.RfS..
    4670: 00 66 5B 5A C3 66 50 E8 AA FE E8 D4 FF E8 8F 01  // .f[Z.fP.........
    4680: 66 58 C3 52 51 66 53 66 50 8A CB 80 E3 FC 80 E1  // fX.RQfSfP.......
    4690: 03 C0 E1 03 E8 8D FE E8 B7 FF E8 59 01 66 D3 C8  // ...........Y.f..
    46A0: 58 50 66 D3 C0 E8 67 01 66 58 66 5B 59 5A C3 66  // XPf...g.fXf[YZ.f
    46B0: 50 51 C0 E1 03 E8 53 00 66 D3 C8 8A C5 66 D3 C0  // PQ....S.f....f..
    46C0: E8 A8 FF 59 66 58 C3 66 50 51 C0 E1 03 E8 3B 00  // ...YfX.fPQ....;.
    46D0: 66 D3 C8 59 8A E8 66 58 C3 E8 5F 00 C3 E8 44 FE  // f..Y..fX.._...D.
    46E0: 66 C1 E3 10 66 C1 EB 0E E8 0B 01 C3 E8 35 FE 66  // f...f........5.f
    46F0: C1 E3 02 E8 00 01 C3 52 66 53 E8 04 00 66 5B 5A  // .......RfS...f[Z
    4700: C3 E8 20 FE E8 4A FF E8 EC 00 C3 51 66 52 8A EB  // .. ..J.....QfR..
    4710: 8A CB 80 E1 03 C0 E1 03 80 E3 FC E8 D9 FF 80 F9  // ................
    4720: 00 74 14 66 8B D0 83 C3 04 E8 CB FF 83 EB 04 66  // .t.f...........f
    4730: 92 66 0F AD D0 8A DD 66 5A 59 C3 52 66 53 E8 9C  // .f.....fZY.RfS..
    4740: FF 66 5B 5A C3 52 66 53 E8 A1 FF 66 5B 5A C3 66  // .f[Z.RfS...f[Z.f
    4750: 50 55 52 66 50 8B EC 8B 56 0C 89 56 08 E8 C4 FD  // PURfP...V..V....
    4760: B2 00 66 ED 66 89 46 0A 66 58 5A 5D C3 66 50 55  // ..f.f.F.fXZ].fPU
    4770: 52 66 50 8B EC 8B 56 0C 89 56 08 E8 A6 FD 2E A1  // RfP...V..V......
    4780: C1 03 B2 18 EF B2 00 66 ED 66 89 46 0A 66 58 5A  // .......f.f.F.fXZ
    4790: 5D C3 66 50 55 52 8B EC E8 89 FD B2 00 66 8B 46  // ].fPUR.......f.F
    47A0: 0A 66 EF 8B 56 08 89 56 0C 66 8B 46 04 66 89 46  // .f..V..V.f.F.f.F
    47B0: 08 5A 5D 66 58 66 58 C3 66 50 52 E8 66 FD B2 18  // .Z]fXfX.fPR.f...
    47C0: 66 ED 2E A3 C1 03 5A 66 58 C3 66 52 66 53 E8 53  // f.....ZfX.fRfS.S
    47D0: FD 66 81 CB 00 00 00 80 E8 1B 00 66 5B 66 5A C3  // .f.........f[fZ.
    47E0: 66 52 66 53 E8 3D FD 66 81 CB 00 00 00 80 E8 1E  // fRfS.=.f........
    47F0: 00 66 5B 66 5A C3 66 81 FB FF 00 00 00 77 04 8A  // .f[fZ.f......w..
    4800: D3 EB 09 66 8B C3 B2 00 66 EF B2 04 66 ED C3 66  // ...f....f...f..f
    4810: 81 FB FF 00 00 00 77 04 8A D3 EB 0A 66 93 B2 00  // ......w.....f...
    4820: 66 EF 66 93 B2 04 66 EF C3 C3 C3 55 8B EC 53 51  // f.f...f....U..SQ
    4830: 8B F0 26 8B 5C 14 26 8B 4C 16 E8 28 00 8D 66 FC  // ..&.\.&.L..(..f.
    4840: 59 5B 5D C3 53 51 8B F0 26 8B 5C 24 33 C9 E8 14  // Y[].SQ..&.\$3...
    4850: 00 59 5B C3 55 8B EC 53 51 8B F0 26 8B 5C 08 26  // .Y[.U..SQ..&.\.&
    4860: 8B 4C 0A EB D5 52 56 57 C8 06 00 00 8B F0 89 4E  // .L...RVW.......N
    4870: FE 8C D0 8E C0 26 8B 7C 26 8A 45 01 32 E4 B9 20  // .....&.|&.E.2.. 
    4880: 00 2B C8 B8 FF FF 8B D0 E3 06 D1 EA D1 D8 E2 FA  // .+..............
    4890: 8A 4D 03 32 ED 8B FA E3 06 D1 E0 D1 D7 E2 FA F7  // .M.2............
    48A0: D0 F7 D7 26 21 44 1C 26 21 7C 1E 8C D0 8E C0 26  // ...&!D.&!|.....&
    48B0: 8B 7C 26 8A 4D 01 32 ED B8 20 00 2B C1 8B C8 66  // .|&.M.2.. .+...f
    48C0: C7 46 FA FF FF FF FF E3 08 D1 6E FC D1 5E FA E2  // .F........n..^..
    48D0: F8 8A 4D 02 32 ED 8B C3 8B 56 FE E3 06 D1 EA D1  // ..M.2....V......
    48E0: D8 E2 FA 23 46 FA 23 56 FC 8A 4D 03 32 ED E3 06  // ...#F.#V..M.2...
    48F0: D1 E0 D1 D2 E2 FA 26 09 44 1C 26 09 54 1E C9 5F  // ......&.D.&.T.._
    4900: 5E 5A C3 55 8B EC 53 51 52 57 50 8B D8 26 8B 7F  // ^Z.U..SQRWP..&..
    4910: 26 8A 45 01 32 E4 B9 20 00 2B C8 B8 FF FF 8B D0  // &.E.2.. .+......
    4920: E3 06 D1 EA D1 D8 E2 FA 8A 4D 02 88 4E F6 C6 46  // .........M..N..F
    4930: F7 00 8B FA 8B 4E F6 E3 06 D1 E0 D1 D7 E2 FA 26  // .....N.........&
    4940: 09 47 1C 26 09 7F 1E 8D 66 F8 5F 5A E9 F1 FE 53  // .G.&....f._Z...S
    4950: 51 52 57 8B D8 8C D0 8E C0 26 8B 77 26 8A 4C 01  // QRW......&.w&.L.
    4960: 32 ED B8 20 00 2B C1 8B C8 BE FF FF 8B D6 E3 06  // 2.. .+..........
    4970: D1 EA D1 DE E2 FA 26 8B 7F 26 8A 4D 02 32 ED 8B  // ......&..&.M.2..
    4980: C6 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47  // .............&!G
    4990: 1C 26 21 57 1E 5F E9 CC 05 53 56 8B D8 8C D2 8E  // .&!W._...SV.....
    49A0: C2 26 8B 77 26 80 3C 00 74 73 80 3C 01 75 58 8A  // .&.w&.<.ts.<.uX.
    49B0: 44 01 32 E4 26 83 7F 1E 00 75 4C 26 3B 47 1C 75  // D.2.&....uL&;G.u
    49C0: 46 8A 04 6B F0 03 8A 84 F8 A5 26 01 47 26 8C D0  // F..k......&.G&..
    49D0: 8E C0 26 8B 77 26 80 3C 09 74 17 8A 04 32 E4 6B  // ..&.w&.<.t...2.k
    49E0: F0 03 8B C3 FF 94 F6 A5 26 8B 77 26 8A 04 32 E4  // ........&.w&..2.
    49F0: EB D1 8B 44 01 26 29 47 26 26 FF 47 26 26 8B 47  // ...D.&)G&&.G&&.G
    4A00: 1C 26 8B 77 1E EB 1A 26 8B 77 26 8A 04 32 E4 6B  // .&.w...&.w&..2.k
    4A10: F0 03 8A 84 F8 A5 26 01 47 26 E9 80 FF 33 C0 33  // ......&.G&...3.3
    4A20: F6 8B D6 5E 5B C3 53 51 52 56 8B D8 8D 77 35 26  // ...^[.SQRV...w5&
    4A30: 8B 54 02 26 89 57 14 26 C7 47 16 00 00 8B F0 26  // .T.&.W.&.G.....&
    4A40: 8B 47 20 33 D2 26 01 47 14 26 11 54 16 8C D1 8E  // .G 3.&.G.&.T....
    4A50: C1 26 F6 47 2F 06 0F 85 0A 05 26 80 7F 34 00 75  // .&.G/.....&..4.u
    4A60: 22 26 8B 77 16 26 0B 77 14 75 10 26 D1 67 08 26  // "&.w.&.w.u.&.g.&
    4A70: D1 57 0A 26 D1 67 08 26 D1 57 0A 8B C3 E8 79 11  // .W.&.g.&.W....y.
    4A80: E9 E1 04 26 8A 47 34 32 E4 05 80 00 99 26 89 47  // ...&.G42.....&.G
    4A90: 1C 26 89 57 1E 8B C3 E8 FF FE E9 C7 04 53 56 8B  // .&.W.........SV.
    4AA0: D8 8D 77 35 26 8A 44 02 32 E4 C1 E0 02 26 8B 37  // ..w5&.D.2....&.7
    4AB0: 26 8B 34 03 F0 26 8B 47 08 26 8B 5F 0A 26 89 04  // &.4..&.G.&._.&..
    4AC0: 26 89 5C 02 5E 5B C3 53 52 56 8B D8 8C D0 8D 77  // &.\.^[.SRV.....w
    4AD0: 35 8E C0 26 8A 54 02 80 FA 40 73 21 26 8B 77 02  // 5..&.T...@s!&.w.
    4AE0: 32 F6 C1 E2 02 26 8B 74 04 03 F2 26 8B 57 08 26  // 2....&.t...&.W.&
    4AF0: 8B 47 0A 26 89 14 26 89 44 02 E9 7F 00 80 FA 41  // .G.&..&.D......A
    4B00: 75 12 26 8B 47 08 26 8B 57 0A 26 89 47 10 26 89  // u.&.G.&.W.&.G.&.
    4B10: 57 12 EB 68 80 FA 40 75 12 26 8B 47 08 26 8B 57  // W..h..@u.&.G.&.W
    4B20: 0A 26 89 47 0C 26 89 57 0E EB 51 80 FA 42 75 0A  // .&.G.&.W..Q..Bu.
    4B30: 26 8B 47 08 26 89 47 22 EB 42 80 FA 43 75 0A 26  // &.G.&.G".B..Cu.&
    4B40: 8A 47 08 26 88 47 33 EB 33 80 FA 46 75 12 26 8B  // .G.&.G3.3..Fu.&.
    4B50: 57 08 26 8B 47 0A 26 89 57 18 26 89 47 1A EB 1C  // W.&.G.&.W.&.G...
    4B60: 80 FA 47 75 0A 26 8B 47 08 26 89 47 24 EB 0D 80  // ..Gu.&.G.&.G$...
    4B70: FA 48 75 08 26 8B 47 08 26 89 47 20 5E 5A 5B C3  // .Hu.&.G.&.G ^Z[.
    4B80: 53 56 8B D8 8D 77 35 26 8A 44 02 32 E4 26 89 47  // SV...w5&.D.2.&.G
    4B90: 14 26 C7 47 16 00 00 5E 5B C3 53 56 8B D8 26 8B  // .&.G...^[.SV..&.
    4BA0: 77 02 26 8B 74 02 8A 04 32 E4 26 89 47 14 26 C7  // w.&.t...2.&.G.&.
    4BB0: 47 16 00 00 26 8B 5F 02 26 FF 47 02 5E 5B C3 53  // G...&._.&.G.^[.S
    4BC0: 56 8B D8 26 8B 77 02 26 8B 74 02 8B 34 26 89 77  // V..&.w.&.t..4&.w
    4BD0: 14 26 C7 47 16 00 00 26 8B 5F 02 26 83 47 02 02  // .&.G...&._.&.G..
    4BE0: 5E 5B C3 53 56 8B D8 26 8B 77 02 26 8B 74 02 8B  // ^[.SV..&.w.&.t..
    4BF0: 04 8B 74 02 26 89 47 14 26 89 77 16 26 8B 5F 02  // ..t.&.G.&.w.&._.
    4C00: 26 83 47 02 04 5E 5B C3 53 52 56 8B D8 E8 70 FF  // &.G..^[.SRV...p.
    4C10: 8B F3 26 8B 47 18 26 8B 57 1A D1 EA D1 D8 D1 EA  // ..&.G.&.W.......
    4C20: D1 D8 26 01 47 14 26 11 54 16 8B C3 E8 2B 10 E9  // ..&.G.&.T....+..
    4C30: 4A FF 53 8B D8 26 8B 5F 02 26 FF 47 02 5B C3 53  // J.S..&._.&.G.[.S
    4C40: 8B D8 26 8B 5F 02 26 83 47 02 02 5B C3 53 56 8B  // ..&._.&.G..[.SV.
    4C50: D8 E8 6B FF 8B F3 26 8B 57 20 33 C0 26 01 57 14  // ..k...&.W 3.&.W.
    4C60: 26 11 44 16 8C D2 8E C2 26 8B 47 2E 32 C0 80 E4  // &.D.....&.G.2...
    4C70: 06 3D 00 02 75 07 32 E4 33 D2 5E 5B C3 26 8B 47  // .=..u.2.3.^[.&.G
    4C80: 2E 32 C0 80 E4 06 3D 00 04 74 EB 26 80 7F 34 00  // .2....=..t.&..4.
    4C90: 75 08 8B C3 E8 2F 0F 5E 5B C3 26 8A 47 34 32 E4  // u..../.^[.&.G42.
    4CA0: 26 89 47 1C 26 C7 47 1E 00 00 8B C3 E8 EA FC 5E  // &.G.&.G........^
    4CB0: 5B C3 53 8B D8 E8 E2 FE 26 8B 47 14 C1 E0 02 26  // [.S.....&.G....&
    4CC0: 8B 1F 26 8B 1F 03 D8 26 8B 07 26 8B 57 02 5B C3  // ..&....&..&.W.[.
    4CD0: D6 4C CB 4C E1 4C 30 4D E7 4C FF 4C 19 4D 24 4D  // .L.L.L0M.L.L.M$M
    4CE0: 2A 4D 53 51 56 8B D8 E8 B0 FE 8C D2 8E C2 26 83  // *MSQV.........&.
    4CF0: 7F 16 00 75 22 26 83 7F 14 40 73 1B 26 8B 77 02  // ...u"&...@s.&.w.
    4D00: 26 8B 5F 14 C1 E3 02 26 8B 44 04 03 D8 26 8B 07  // &._....&.D...&..
    4D10: 26 8B 57 02 E9 7B 05 26 8B 77 14 26 8B 47 16 83  // &.W..{.&.w.&.G..
    4D20: C6 C0 83 D0 FF 75 71 83 FE 08 77 6C 03 F6 2E FF  // .....uq...wl....
    4D30: A4 68 4C 26 8B 47 10 26 8B 57 12 E9 54 05 26 8B  // .hL&.G.&.W..T.&.
    4D40: 47 0C 26 8B 57 0E E9 49 05 26 8B 47 22 EB 4B 26  // G.&.W..I.&.G".K&
    4D50: 8A 4F 33 32 ED BB 01 00 33 D2 E3 06 D1 E3 D1 D2  // .O32....3.......
    4D60: E2 FA 8B C3 E9 2B 05 26 8A 4F 33 32 ED B8 01 00  // .....+.&.O32....
    4D70: 33 D2 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 E9 11  // 3...............
    4D80: 05 26 8B 47 18 26 8B 57 1A E9 06 05 26 8B 47 24  // .&.G.&.W....&.G$
    4D90: EB 08 26 8B 47 20 EB 02 33 C0 33 D2 E9 F3 04 53  // ..&.G ..3.3....S
    4DA0: 56 8B D8 E8 F4 FD 8B F3 26 8B 47 18 26 8B 57 1A  // V.......&.G.&.W.
    4DB0: D1 EA D1 D8 D1 EA D1 D8 26 01 47 14 26 11 54 16  // ........&.G.&.T.
    4DC0: 8B C3 E8 16 0E 5E 5B C3 33 C0 33 D2 C3 53 56 8B  // .....^[.3.3..SV.
    4DD0: D8 E8 EB FD 26 8B 77 14 26 03 77 22 8B 04 8B 54  // ....&.w.&.w"...T
    4DE0: 02 5E 5B C3 53 8B D8 26 C6 47 2B 04 E8 AB FD 26  // .^[.S..&.G+....&
    4DF0: 8B 47 14 26 8B 57 16 5B C3 53 8B D8 26 C6 47 2B  // .G.&.W.[.S..&.G+
    4E00: 01 E8 BB FD EB E9 53 8B D8 26 C6 47 2B 00 E8 D2  // ......S..&.G+...
    4E10: FD EB DC 53 8B D8 83 C3 35 26 8A 5F 01 C0 EB 03  // ...S....5&._....
    4E20: 80 E3 07 32 FF 03 DB FF 97 86 A5 5B C3 53 52 56  // ...2.......[.SRV
    4E30: 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94  // ..&.G,2.........
    4E40: A2 A5 26 89 47 08 26 89 57 0A 26 8A 47 2D 32 E4  // ..&.G.&.W.&.G-2.
    4E50: 8B F0 03 F0 8B C3 FF 94 BA A5 26 89 47 04 26 89  // ..........&.G.&.
    4E60: 57 06 E9 17 FD 53 51 56 8B D8 26 8A 4F 2B 32 ED  // W....SQV..&.O+2.
    4E70: 8B F1 8A 8C EA A5 E3 0A 26 D1 6F 06 26 D1 5F 04  // ........&.o.&._.
    4E80: E2 F6 26 8A 4F 2B 32 ED 8B F1 C1 E6 02 8B 8C CA  // ..&.O+2.........
    4E90: A5 8B B4 CC A5 26 21 4F 04 26 21 77 06 26 8A 4F  // .....&!O.&!w.&.O
    4EA0: 2A 32 ED 8B F1 8A 8C F2 A5 E3 0A 26 D1 67 04 26  // *2.........&.g.&
    4EB0: D1 57 06 E2 F6 26 8B 4F 08 26 8B 77 0A 26 89 4F  // .W...&.O.&.w.&.O
    4EC0: 14 26 89 77 16 E9 CA 03 53 51 52 56 57 8B D8 8C  // .&.w....SQRVW...
    4ED0: D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02 26 8A  // ...&.G+2......&.
    4EE0: 47 2A 8B F8 8A 8D F2 A5 32 ED 8B 84 CA A5 8B 94  // G*......2.......
    4EF0: CC A5 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21  // ..............&!
    4F00: 47 14 26 21 57 16 26 8A 47 2A 32 E4 8B F0 8A 8C  // G.&!W.&.G*2.....
    4F10: F2 A5 32 ED E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6  // ..2...&.o.&._...
    4F20: 26 8A 47 2B 8B F0 C1 E6 02 8B 84 CA A5 8B 94 CC  // &.G+............
    4F30: A5 26 21 47 08 26 21 57 0A 26 8A 47 2A 32 E4 8B  // .&!G.&!W.&.G*2..
    4F40: F0 8A 8C F2 A5 32 ED E3 0A 26 D1 67 08 26 D1 57  // .....2...&.g.&.W
    4F50: 0A E2 F6 26 8B 47 14 26 8B 57 16 26 09 47 08 26  // ...&.G.&.W.&.G.&
    4F60: 09 57 0A 5F 5E 5A 59 5B C3 53 51 56 8B D8 26 8A  // .W._^ZY[.SQV..&.
    4F70: 4F 2B 32 ED 8B F1 8A 8C EA A5 E3 0A 26 D1 6F 06  // O+2.........&.o.
    4F80: 26 D1 5F 04 E2 F6 26 8A 4F 2B 32 ED 8B F1 C1 E6  // &._...&.O+2.....
    4F90: 02 8B 8C CA A5 8B B4 CC A5 26 21 4F 04 26 21 77  // .........&!O.&!w
    4FA0: 06 26 8A 4F 2A 32 ED 8B F1 8A 8C F2 A5 E3 0A 26  // .&.O*2.........&
    4FB0: D1 6F 0A 26 D1 5F 08 E2 F6 26 8A 4F 2B 32 ED 8B  // .o.&._...&.O+2..
    4FC0: F1 C1 E6 02 8B 8C CA A5 8B B4 CC A5 26 21 4F 08  // ............&!O.
    4FD0: 26 21 77 0A E9 BB 02 51 52 57 8B D8 8C D0 8E C0  // &!w....QRW......
    4FE0: 26 80 7F 2B 00 74 1A 26 8A 47 2C 32 E4 8B F0 03  // &..+.t.&.G,2....
    4FF0: F0 8B C3 FF 94 A2 A5 26 89 47 08 26 89 57 0A EB  // .......&.G.&.W..
    5000: 10 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 AE  // .&.G,2..........
    5010: A5 26 8A 47 2D 32 E4 8B F0 03 F0 8B C3 FF 94 BA  // .&.G-2..........
    5020: A5 26 89 47 04 26 89 57 06 8C D2 8E C2 26 80 7F  // .&.G.&.W.....&..
    5030: 2B 00 74 4A 26 8A 47 2B 32 E4 8B F0 C1 E6 02 26  // +.tJ&.G+2......&
    5040: 8A 47 2A 8B F8 8A 8D F2 A5 32 ED 8B 84 CA A5 8B  // .G*......2......
    5050: 94 CC A5 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26  // ...............&
    5060: 21 47 08 26 21 57 0A 8B C3 E8 F9 FD 26 8B 47 04  // !G.&!W......&.G.
    5070: 26 8B 57 06 26 09 47 08 26 09 57 0A EB 10 26 8B  // &.W.&.G.&.W...&.
    5080: 57 04 26 8B 47 06 26 89 57 08 26 89 47 0A 26 8A  // W.&.G.&.W.&.G.&.
    5090: 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 96 A5 5F 5A  // G,2..........._Z
    50A0: 59 C3 53 51 52 56 57 8B D8 26 8A 47 2A 32 E4 8B  // Y.SQRVW..&.G*2..
    50B0: F0 8A 8C F2 A5 32 ED E3 0A 26 D1 67 04 26 D1 57  // .....2...&.g.&.W
    50C0: 06 E2 F6 8C D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1  // .......&.G+2....
    50D0: E6 02 26 8A 47 2A 8B F8 8A 8D F2 A5 32 ED 8B 84  // ..&.G*......2...
    50E0: CA A5 8B 94 CC A5 E3 06 D1 E0 D1 D2 E2 FA F7 D0  // ................
    50F0: F7 D2 26 09 47 04 26 09 57 06 26 8B 47 04 26 8B  // ..&.G.&.W.&.G.&.
    5100: 57 06 26 21 47 08 26 21 57 0A E9 56 FE 55 8B EC  // W.&!G.&!W..V.U..
    5110: 51 52 50 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B  // QRP..&.G,2......
    5120: C3 FF 94 A2 A5 26 89 47 08 26 89 57 0A 26 8A 47  // .....&.G.&.W.&.G
    5130: 2B 88 46 FA 8B C3 E8 DA FC 26 89 47 04 26 89 57  // +.F......&.G.&.W
    5140: 06 26 8A 4F 2D 32 ED 8B F1 03 F1 8B C3 FF 94 BA  // .&.O-2..........
    5150: A5 26 89 47 14 26 89 57 16 8B C3 E8 44 FF 8A 46  // .&.G.&.W....D..F
    5160: FA 32 E4 8B F0 8A 8C EA A5 E3 0A 26 D1 6F 16 26  // .2.........&.o.&
    5170: D1 5F 14 E2 F6 26 8A 57 2B 32 F6 8B F2 C1 E6 02  // ._...&.W+2......
    5180: 8B 84 CA A5 8B 94 CC A5 26 21 47 14 26 21 57 16  // ........&!G.&!W.
    5190: 26 8A 47 2A 32 E4 8B F0 8A 8C F2 A5 32 ED E3 0A  // &.G*2.......2...
    51A0: 26 D1 67 14 26 D1 57 16 E2 F6 26 8B 47 14 26 8B  // &.g.&.W...&.G.&.
    51B0: 57 16 26 09 47 08 26 09 57 0A 26 8A 47 2C 32 E4  // W.&.G.&.W.&.G,2.
    51C0: 8B F0 03 F0 8B C3 FF 94 96 A5 8D 66 FC 5A 59 5D  // ...........f.ZY]
    51D0: C3 51 8B D8 E8 56 FC 26 8A 4F 2B 32 ED 8B F1 8A  // .Q...V.&.O+2....
    51E0: 8C EA A5 E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 8B  // .....&.o.&._....
    51F0: C3 E8 AE FE 26 8A 4F 2C 32 ED 8B F1 03 F1 8B C3  // ....&.O,2.......
    5200: FF 94 96 A5 59 C3 8B D8 E8 22 FC 8B C3 E8 55 FC  // ....Y...."....U.
    5210: 26 8B 47 04 26 8B 77 06 26 09 47 08 26 09 77 0A  // &.G.&.w.&.G.&.w.
    5220: 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 96 A5  // &.G,2...........
    5230: C3 53 56 8B D8 E8 F5 FB 8B C3 E8 28 FC 26 8B 47  // .SV........(.&.G
    5240: 04 26 8B 77 06 26 31 47 08 26 31 77 0A 26 8A 47  // .&.w.&1G.&1w.&.G
    5250: 2C 32 E4 8B F0 03 F0 8B C3 FF 94 96 A5 5E 5B C3  // ,2...........^[.
    5260: 53 51 56 8B D8 E8 C5 FB 8B C3 E8 F8 FB 26 8B 4F  // SQV..........&.O
    5270: 04 E3 0A 26 D1 67 08 26 D1 57 0A E2 F6 8B C3 E8  // ...&.g.&.W......
    5280: 46 FC 26 8A 4F 2C 32 ED 8B F1 03 F1 8B C3 FF 94  // F.&.O,2.........
    5290: 96 A5 5E 59 5B C3 53 51 56 8B D8 E8 8F FB 8B C3  // ..^Y[.SQV.......
    52A0: E8 C2 FB 26 8B 4F 04 E3 0A 26 D1 6F 0A 26 D1 5F  // ...&.O...&.o.&._
    52B0: 08 E2 F6 EB C8 52 8B D8 E8 72 FB 8B C3 E8 A5 FB  // .....R...r......
    52C0: 8B F3 26 8B 47 04 26 8B 57 06 26 01 47 08 26 11  // ..&.G.&.W.&.G.&.
    52D0: 54 0A 8B C3 E8 F1 FB 26 8A 47 2C 32 E4 8B F0 03  // T......&.G,2....
    52E0: F0 8B C3 FF 94 96 A5 5A C3 52 8B D8 E8 3E FB 8B  // .......Z.R...>..
    52F0: C3 E8 71 FB 8B F3 26 8B 47 04 26 8B 57 06 26 29  // ..q...&.G.&.W.&)
    5300: 47 08 26 19 54 0A EB CA 51 52 8B F0 E8 1E FB 8B  // G.&.T...QR......
    5310: C6 E8 55 FC 26 8B 44 08 26 8B 54 0A 26 8B 5C 04  // ..U.&.D.&.T.&.\.
    5320: 26 8B 4C 06 E8 B1 F2 26 89 44 0C 26 89 54 0E 5A  // &.L....&.D.&.T.Z
    5330: 59 C3 52 8B D0 E8 F5 FA 8B C2 E8 2C FC 8B C2 E8  // Y.R........,....
    5340: 5C 08 5A C3 51 52 57 8B F0 E8 E1 FA 8B C6 E8 18  // \.Z.QRW.........
    5350: FC 26 8B 44 08 26 8B 54 0A 26 8B 5C 04 26 8B 4C  // .&.D.&.T.&.\.&.L
    5360: 06 E8 F0 F1 26 89 44 0C 26 89 54 0E 8C D7 8E C7  // ....&.D.&.T.....
    5370: 26 8B 44 08 26 8B 54 0A 26 8B 5C 04 26 8B 4C 06  // &.D.&.T.&.\.&.L.
    5380: E8 D1 F1 26 89 5C 10 26 89 4C 12 E9 10 FD 52 8B  // ...&.\.&.L....R.
    5390: D0 E8 99 FA 8B C2 E8 D0 FB 8B C2 E8 D3 07 5A C3  // ..............Z.
    53A0: 51 52 8B D8 E8 86 FA 8B C3 E8 BD FB 8C D1 8E C1  // QR..............
    53B0: 26 8B 47 08 26 8B 57 0A 26 3B 57 06 75 0E 26 3B  // &.G.&.W.&;W.u.&;
    53C0: 47 04 75 08 26 C6 47 30 01 5A 59 C3 8B D0 26 8B  // G.u.&.G0.ZY...&.
    53D0: 47 0A 26 3B 47 06 72 08 75 0A 26 3B 57 04 73 04  // G.&;G.r.u.&;W.s.
    53E0: 33 C0 EB 03 B8 02 00 26 88 47 30 5A 59 C3 51 52  // 3......&.G0ZY.QR
    53F0: 57 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF  // W..&.G,2........
    5400: 94 A2 A5 26 89 47 08 26 89 57 0A 8C D0 8E C0 26  // ...&.G.&.W.....&
    5410: 8A 47 2B 32 E4 8B F0 C1 E6 02 8B F8 8A 8D EA A5  // .G+2............
    5420: 32 ED 8B 84 CA A5 8B 94 CC A5 E3 06 D1 E0 D1 D2  // 2...............
    5430: E2 FA F7 D0 F7 D2 26 21 47 08 26 21 57 0A E9 4D  // ......&!G.&!W..M
    5440: FC 55 8B EC 51 52 57 83 EC 06 8B D8 26 8A 47 2B  // .U..QRW.....&.G+
    5450: 32 E4 8B F0 C1 E6 02 8B F8 8A 8D EA A5 32 ED 8B  // 2............2..
    5460: 84 CA A5 89 46 F4 8B 84 CC A5 89 46 F6 E3 08 D1  // ....F......F....
    5470: 66 F4 D1 56 F6 E2 F8 8B 7E F4 8B 46 F6 89 46 F8  // f..V....~..F..F.
    5480: 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 A2 A5  // &.G,2...........
    5490: 26 89 47 08 26 89 57 0A 8B C3 E8 47 F9 26 89 47  // &.G.&.W....G.&.G
    54A0: 04 26 89 57 06 8B C7 F7 D0 8B 56 F6 F7 D2 26 23  // .&.W......V...&#
    54B0: 47 08 26 23 57 0A 26 89 47 14 26 89 57 16 26 21  // G.&#W.&.G.&.W.&!
    54C0: 7F 08 8B 46 F6 26 21 47 0A 8C D1 8D 77 35 8E C1  // ...F.&!G....w5..
    54D0: 26 80 3C 19 73 12 26 8B 4F 04 E3 0A 26 D1 67 08  // &.<.s.&.O...&.g.
    54E0: 26 D1 57 0A E2 F6 EB 10 26 8B 4F 04 E3 0A 26 D1  // &.W.....&.O...&.
    54F0: 6F 0A 26 D1 5F 08 E2 F6 26 21 7F 08 8B 46 F8 26  // o.&._...&!...F.&
    5500: 21 47 0A 26 8B 57 14 26 8B 47 16 26 09 57 08 26  // !G.&.W.&.G.&.W.&
    5510: 09 47 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF  // .G.&.G,2........
    5520: 94 96 A5 8D 66 FA 5F E9 A3 FC 52 8B D8 E8 FD F8  // ....f._...R.....
    5530: 8B C3 E8 34 FA 26 8B 47 08 26 8B 57 0A 26 85 57  // ...4.&.G.&.W.&.W
    5540: 06 75 06 26 85 47 04 74 05 B8 03 00 EB 03 B8 01  // .u.&.G.t........
    5550: 00 26 88 47 30 5A C3 53 51 52 56 8B D8 26 8A 4F  // .&.G0Z.SQRV..&.O
    5560: 2D 32 ED 8B F1 03 F1 FF 94 BA A5 26 89 47 04 26  // -2.........&.G.&
    5570: 89 57 06 26 8A 47 2B 32 E4 8B F0 8A 8C EA A5 E3  // .W.&.G+2........
    5580: 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 26 8A 47 2B 8B  // .&.o.&._...&.G+.
    5590: F0 C1 E6 02 8B 84 CA A5 8B 94 CC A5 26 21 47 04  // ............&!G.
    55A0: 26 21 57 06 E9 BD F9 52 8B D8 E8 AA FF 26 8B 47  // &!W....R.....&.G
    55B0: 04 26 8B 57 06 26 89 47 18 26 89 57 1A 5A C3 51  // .&.W.&.G.&.W.Z.Q
    55C0: 52 8B D8 E8 91 FF 8C D0 8E C0 26 8B 77 02 26 8B  // R.........&.w.&.
    55D0: 74 02 81 3C 5A 5A 74 5B 26 8B 77 02 26 8B 74 02  // t..<ZZt[&.w.&.t.
    55E0: 80 3C 63 75 E1 26 8B 77 02 26 FF 44 02 8B C3 E8  // .<cu.&.w.&.D....
    55F0: 21 F8 26 89 47 08 26 89 57 0A 8B C3 E8 FA F7 26  // !.&.G.&.W......&
    5600: 89 47 14 26 89 57 16 8C D1 8E C1 26 8B 57 04 26  // .G.&.W.....&.W.&
    5610: 8B 47 06 26 3B 47 0A 75 AD 26 3B 57 08 75 A7 26  // .G.&;G.u.&;W.u.&
    5620: 8B 77 02 26 8B 04 26 03 47 14 8B DE 26 89 47 02  // .w.&..&.G...&.G.
    5630: 5A 59 C3 26 8B 5F 02 26 83 47 02 02 5A 59 C3 52  // ZY.&._.&.G..ZY.R
    5640: 57 8B D8 8C D0 8E C0 26 8B 77 02 26 8B 74 02 8A  // W......&.w.&.t..
    5650: 54 01 84 D2 75 08 26 C7 47 22 00 00 EB 2F 80 FA  // T...u.&.G".../..
    5660: FF 75 14 26 8B 77 02 26 8B 3F 26 8B 34 26 2B 75  // .u.&.w.&.?&.4&+u
    5670: 02 26 89 77 22 EB 16 26 8B 07 E8 E3 02 8B F0 8A  // .&.w"..&........
    5680: C2 32 E4 03 C0 03 F0 8B 04 26 89 47 22 26 8B 5F  // .2.......&.G"&._
    5690: 02 26 83 47 02 02 5F 5A C3 8B D8 26 80 67 2F F9  // .&.G.._Z...&.g/.
    56A0: 26 8B 77 02 26 8B 74 02 8A 44 01 26 88 47 34 26  // &.w.&.t..D.&.G4&
    56B0: 8B 5F 02 26 83 47 02 03 C3 8B D8 26 8B 77 02 26  // ._.&.G.....&.w.&
    56C0: 8B 74 02 8B 74 01 26 89 77 20 EB E3 53 8B D8 26  // .t..t.&.w ..S..&
    56D0: 8A 47 2C 32 E4 24 03 26 80 67 2F F9 C1 E0 09 26  // .G,2.$.&.g/....&
    56E0: 09 47 2E E9 4F F5 8B D8 26 8B 77 02 26 8B 74 02  // .G..O...&.w.&.t.
    56F0: 8A 44 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B  // .D.2.&.G.&.G....
    5700: C3 E8 40 04 26 8B 5F 02 26 83 47 02 02 C3 8B D8  // ..@.&._.&.G.....
    5710: 26 8B 77 02 26 8B 74 02 8A 44 01 32 E4 26 89 47  // &.w.&.t..D.2.&.G
    5720: 04 26 C7 47 06 00 00 8B C3 E8 08 04 EB D6 53 56  // .&.G..........SV
    5730: 8B D8 26 8B 77 02 26 8B 74 02 8A 44 01 32 E4 26  // ..&.w.&.t..D.2.&
    5740: 89 47 04 26 C7 47 06 00 00 8B C3 E8 06 04 E9 86  // .G.&.G..........
    5750: F4 53 56 8B D8 26 8B 77 02 26 8B 74 02 8A 44 01  // .SV..&.w.&.t..D.
    5760: 32 E4 26 89 47 04 26 C7 47 06 00 00 8B C3 E8 F0  // 2.&.G.&.G.......
    5770: 03 E9 63 F4 53 56 8B D8 26 8B 77 02 8B DE 26 8B  // ..c.SV..&.w...&.
    5780: 5F 02 8B 5F 01 83 C3 03 26 01 5C 02 5E 5B C3 51  // _.._....&.\.^[.Q
    5790: 52 8B D8 26 8B 77 02 26 83 44 02 02 26 8B 07 E8  // R..&.w.&.D..&...
    57A0: A0 01 8B C8 26 8B 77 28 8A 44 01 32 E4 03 C0 8B  // ....&.w(.D.2....
    57B0: F1 03 F0 83 3C 00 74 4F 26 8B 77 28 8A 54 01 32  // ....<.tO&.w(.T.2
    57C0: F6 8B C3 E8 B0 01 26 88 47 31 26 8B 77 02 26 8B  // ......&.G1&.w.&.
    57D0: 34 8B 44 04 C1 E8 08 32 E4 24 7F C1 E8 02 32 E4  // 4.D....2.$....2.
    57E0: 24 1F 26 80 67 2F 07 C1 E0 0B 26 09 47 2E 26 8B  // $.&.g/....&.G.&.
    57F0: 37 26 8B 47 2E C1 E8 0B C1 E0 02 26 01 04 26 C6  // 7&.G.......&..&.
    5800: 47 32 01 26 89 4F 28 5A 59 C3 53 8B D8 26 C6 47  // G2.&.O(ZY.S..&.G
    5810: 32 82 5B C3 57 8B D8 8C D6 8E C6 26 80 7F 2C 05  // 2.[.W......&..,.
    5820: 74 0A 26 8A 47 2C 26 3A 47 30 75 1E 26 8B 77 02  // t.&.G,&:G0u.&.w.
    5830: 26 8B 74 02 26 8B 7F 02 26 8B 3D 8B 74 01 03 F7  // &.t.&...&.=.t...
    5840: 26 8B 5F 02 26 89 77 02 5F C3 26 8B 5F 02 26 83  // &._.&.w._.&._.&.
    5850: 47 02 03 5F C3 53 56 57 8B D8 8C D6 8E C6 26 80  // G.._.SVW......&.
    5860: 7F 30 01 74 0A 26 8A 47 30 26 3A 47 2C 75 20 26  // .0.t.&.G0&:G,u &
    5870: 8B 77 02 26 8B 74 02 26 8B 7F 02 26 8B 3D 8B 74  // .w.&.t.&...&.=.t
    5880: 01 03 F7 26 8B 5F 02 26 89 77 02 5F 5E 5B C3 26  // ...&._.&.w._^[.&
    5890: 8B 5F 02 26 83 47 02 03 EB F1 53 56 57 8B D8 8C  // ._.&.G....SVW...
    58A0: D0 8E C0 26 80 7F 30 01 74 E5 EB C3 55 8B EC 53  // ...&..0.t...U..S
    58B0: 51 52 57 8B D8 26 8B 77 02 26 8B 74 02 8A 04 26  // QRW..&.w.&.t...&
    58C0: C6 47 3D 00 8C D1 8E C1 26 80 7F 3D 08 73 20 26  // .G=.....&..=.s &
    58D0: 8B 77 02 26 8A 57 3D 32 F6 26 8B 7C 02 03 FA 8B  // .w.&.W=2.&.|....
    58E0: F3 03 F2 8A 15 26 88 54 35 26 FE 47 3D EB D5 26  // .....&.T5&.G=..&
    58F0: 8B 7F 02 8A D0 32 F6 8B F2 C1 E6 02 8A 94 17 A6  // .....2..........
    5900: 26 01 55 02 26 8B 7F 28 8A 55 01 80 E2 07 26 88  // &.U.&..(.U....&.
    5910: 57 2D 26 8B 7F 28 8A 55 01 C0 EA 03 80 E2 07 26  // W-&..(.U.......&
    5920: 88 57 2B 26 8B 7F 28 8A 55 01 C0 EA 06 26 88 57  // .W+&..(.U....&.W
    5930: 2A 8A 94 16 A6 26 88 57 2C 8D 66 F8 5F 5A 59 5B  // *....&.W,.f._ZY[
    5940: 5D C3 53 56 8B D8 26 8B 77 02 8B C6 8B 74 48 03  // ].SV..&.w....tH.
    5950: F0 8B D8 8B 74 1E 8B C6 03 C3 83 C0 04 5E 5B C3  // ....t........^[.
    5960: 53 56 8B D8 26 8B 77 02 8B C6 8B 74 48 03 F0 8B  // SV..&.w....tH...
    5970: D8 8B 74 20 EB E0 8A C2 C3 16 07 55 8B EC 53 51  // ..t .......U..SQ
    5980: 56 57 83 EC 40 8B F8 89 46 B8 E8 D3 FF 8B D8 89  // VW..@...F.......
    5990: 46 E0 26 8B 45 02 8B 5F 2E 03 D8 89 5E DE 83 46  // F.&.E.._....^..F
    59A0: DE 04 8B C7 E8 9B FF 89 46 E0 32 F6 8D 46 B8 E8  // ........F.2..F..
    59B0: C4 FF 8A D0 32 F6 03 D2 8B 5E E0 03 DA 83 3F 00  // ....2....^....?.
    59C0: 0F 84 65 01 88 46 E9 80 66 E7 F9 C6 46 EC 00 C7  // ..e..F..f...F...
    59D0: 46 D8 00 00 66 C7 46 D0 00 00 00 00 C7 46 F6 00  // F...f.F......F..
    59E0: 00 C6 46 EA 01 EB 06 3C 01 0F 85 8C 00 8A 56 E9  // ..F....<......V.
    59F0: 8A C2 32 E4 03 C0 8B 5E E0 03 D8 83 3F 00 74 75  // ..2....^....?.tu
    5A00: 26 8B 45 02 8B 1F 03 D8 8B 47 04 32 E4 8B C8 83  // &.E......G.2....
    5A10: C1 09 32 ED 80 E1 FE 83 F9 00 74 07 D1 E9 33 C0  // ..2.......t...3.
    5A20: 50 E2 FD 8B C4 8B D8 89 46 BA 85 C0 74 41 83 C0  // P.......F...tA..
    5A30: 08 26 89 47 04 8A C2 32 E4 03 C0 8B 5E E0 03 D8  // .&.G...2....^...
    5A40: 26 8B 45 02 03 07 8B 5E BA 26 89 07 8B 5E BA 26  // &.E....^.&...^.&
    5A50: 8B 07 83 C0 06 26 89 47 02 8B 5E BA 8B 76 F6 26  // .....&.G..^..v.&
    5A60: 89 77 06 8B 5E BA 89 5E F6 C6 46 EA 00 EB 0A C6  // .w..^..^..F.....
    5A70: 46 EA 87 EB 04 C6 46 EA 83 8A 46 EA 32 E4 83 F8  // F.....F...F.2...
    5A80: 10 0F 8F 99 00 88 66 EA 8A 46 EA 32 E4 85 C0 0F  // ......f..F.2....
    5A90: 8F 83 00 8C D0 8B 5E BA 8E C0 26 8B 5F 02 89 5E  // ......^...&._..^
    5AA0: E0 8B 5E BA 26 8B 5F 02 80 3F 5B 75 4A C6 46 EA  // ..^.&._..?[uJ.F.
    5AB0: 10 8B 5E BA 26 8B 5F 06 89 5E F6 8B 5E BA 26 8B  // ..^.&._..^..^.&.
    5AC0: 1F 8B 47 04 32 E4 8B C8 83 C1 09 32 ED 80 E1 FE  // ..G.2......2....
    5AD0: 03 E1 8B 5E F6 89 5E BA 85 DB 74 AC 26 8B 1F 8B  // ...^..^...t.&...
    5AE0: 47 04 C1 E8 08 32 E4 24 7F C1 E8 02 C1 E0 02 8B  // G....2.$........
    5AF0: 5E B8 26 29 07 EB 91 8D 46 B8 E8 AF FD 8A D0 8D  // ^.&)....F.......
    5B00: 46 B8 E8 2E 00 8A DA 32 FF C1 E3 02 8D 46 B8 FF  // F......2.....F..
    5B10: 97 14 A6 E9 72 FF 83 7E F6 00 0F 85 C9 FE 80 7E  // ....r..~.......~
    5B20: EA 10 74 05 8A 46 EA EB 02 32 C0 8D 66 F8 5F 5E  // ..t..F...2..f._^
    5B30: E9 0B FE C3 53 51 8B D8 26 8A 4F 04 32 ED E8 82  // ....SQ..&.O.2...
    5B40: E8 59 5B C3 53 51 8B D8 26 8A 4F 04 32 ED E8 7D  // .Y[.SQ..&.O.2..}
    5B50: E8 59 5B C3 53 8B D8 26 8A 47 04 32 E4 E6 80 5B  // .Y[.S..&.G.2...[
    5B60: C3 53 51 8B D8 26 8A 4F 04 32 ED E8 40 E3 59 5B  // .SQ..&.O.2..@.Y[
    5B70: C3 53 8B D8 66 50 66 52 66 51 66 26 8B 47 08 66  // .S..fPfRfQf&.G.f
    5B80: 26 8B 57 10 66 26 8B 4F 04 66 F7 F1 66 26 89 47  // &.W.f&.O.f..f&.G
    5B90: 0C 66 26 89 57 10 66 59 66 5A 66 58 5B C3 53 8B  // .f&.W.fYfZfX[.S.
    5BA0: D8 66 50 66 52 66 51 66 26 8B 47 08 66 26 8B 4F  // .fPfRfQf&.G.f&.O
    5BB0: 04 66 F7 E1 66 26 89 47 0C 66 26 89 57 10 66 59  // .f..f&.G.f&.W.fY
    5BC0: 66 5A 66 58 5B C3 53 57 8B D8 26 8B 5F 14 E8 0C  // fZfX[.SW..&._...
    5BD0: EB 8B D0 66 C1 E8 10 92 5F 5B C3 53 57 8B D8 26  // ...f...._[.SW..&
    5BE0: 8B 47 14 26 8B 57 16 8B D8 87 D3 66 C1 E3 10 8B  // .G.&.W.....f....
    5BF0: DA C1 E3 02 E8 0A EB EB D8 53 52 57 8B D8 26 8B  // .........SRW..&.
    5C00: 47 08 26 8B 57 0A 92 66 C1 E0 10 8B C2 26 8B 5F  // G.&.W..f.....&._
    5C10: 14 E8 2E EA 5F 5A 5B C3 53 52 8B D8 26 8B 47 1C  // ...._Z[.SR..&.G.
    5C20: 26 8B 57 1E 92 66 C1 E0 10 8B C2 26 8B 5F 26 8B  // &.W..f.....&._&.
    5C30: 5F 01 E8 0D EA 5A 5B C3 53 52 56 8B F0 26 8B 5C  // _....Z[.SRV..&.\
    5C40: 26 8B 5F 01 E8 96 EA 8B D0 66 C1 E8 10 92 26 89  // &._......f....&.
    5C50: 44 1C 26 89 54 1E 5E 5A 5B C3 53 51 52 57 8B D8  // D.&.T.^Z[.SQRW..
    5C60: 26 8B 47 08 26 8B 57 0A 92 66 C1 E0 10 8B C2 8B  // &.G.&.W..f......
    5C70: C8 26 8B 47 14 26 8B 57 16 8B D8 87 D3 66 C1 E3  // .&.G.&.W.....f..
    5C80: 10 8B DA C1 E3 02 8B C1 E8 EA E9 5F 5A 59 5B C3  // ..........._ZY[.
    5C90: 8B D0 66 C1 E8 10 92 C3 1E 06 66 50 66 51 66 52  // ..f.......fPfQfR
    5CA0: 66 53 66 55 66 56 66 57 0E 1F 0A C0 75 06 E8 07  // fSfUfVfW....u...
    5CB0: 01 E9 A8 00 3C 01 75 06 E8 37 01 E9 9E 00 3C 02  // ....<.u..7....<.
    5CC0: 75 06 E8 5F 02 E9 94 00 3C 03 75 0B E8 91 03 8B  // u.._....<.u.....
    5CD0: EC 89 5E 0C E9 85 00 3C 04 75 02 EB 7D 3C 05 75  // ..^....<.u..}<.u
    5CE0: 0A E8 0E 04 8B EC 89 56 10 EB 71 3C 06 75 10 E8  // .......V..q<.u..
    5CF0: 8C 03 8B EC 89 5E 0C 89 4E 14 89 56 10 EB 5D 3C  // .....^..N..V..]<
    5D00: 07 75 02 EB 55 3C 08 75 0A E8 D0 03 8B EC 88 7E  // .u..U<.u.......~
    5D10: 0D EB 49 3C 09 75 02 EB 41 3C 0A 75 10 E8 65 04  // ..I<.u..A<.u..e.
    5D20: 8B EC 89 4E 14 89 7E 00 8C 46 1C EB 2F 3C 0B 75  // ...N..~..F../<.u
    5D30: 02 EB 27 3C 10 75 0A E8 5A 04 8B EC 89 5E 0C EB  // ..'<.u..Z....^..
    5D40: 1B 3C 11 75 02 EB 13 3C 15 75 0F E8 80 04 8B EC  // .<.u...<.u......
    5D50: 89 5E 0C EB 07 B8 4F 01 EB 02 32 C0 8B EC 89 46  // .^....O...2....F
    5D60: 18 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07  // .f_f^f]f[fZfYfX.
    5D70: 1F C3 50 1E 2E 8E 1E 5B 2A 8C D8 A3 DA 6C A3 EA  // ..P....[*....l..
    5D80: 6C A3 FC 6C 2E 8E 1E 53 2A A3 AA 04 1F 58 CB 00  // l..l...S*....X..
    5D90: 30 31 2E 30 30 00 56 45 53 41 00 03 94 03 00 00  // 01.00.VESA......
    5DA0: 01 00 00 00 00 00 00 00 00 03 01 14 93 02 00 00  // ................
    5DB0: 20 02 00 00 28 5D 00 00 B9 3F 00 8B DF 83 C7 04  //  ...(]...?......
    5DC0: FC 66 33 C0 F3 66 AB 8B FB BE 2E 5D B9 22 00 F3  // .f3..f.....]."..
    5DD0: A4 06 1F 8C 4F 08 8C 47 10 8C 4F 18 8C 4F 1C 8C  // ....O..G..O..O..
    5DE0: 4F 20 83 C7 22 89 7F 0E 0E 1F E8 9B DF B0 4F 32  // O ..".........O2
    5DF0: E4 C3 56 51 57 B9 10 00 66 33 C0 F3 66 AB 5F 59  // ..VQW...f3..f._Y
    5E00: 8C DB 06 1F C7 05 BB 00 C6 45 02 07 C7 45 04 40  // .........E...E.@
    5E10: 00 C7 45 06 40 00 C6 45 1B 06 C6 45 18 01 C6 45  // ..E.@..E...E...E
    5E20: 1A 01 C6 45 1E 01 66 C7 45 3E 00 84 D7 17 8E DB  // ...E..f.E>......
    5E30: E8 6F D8 66 0B C0 0F 84 E1 00 06 1F 66 89 45 28  // .o.f........f.E(
    5E40: 8C C8 66 C1 E0 10 B8 E7 60 66 89 45 0C 81 F9 FF  // ..f.....`f.E....
    5E50: 81 0F 84 C2 00 80 E5 03 B2 01 53 8E DB BE 80 4C  // ..........S....L
    5E60: E8 47 DD 5B 06 1F 0F 84 B1 00 53 E8 C3 DF 66 89  // .G.[......S...f.
    5E70: 45 12 C7 45 16 08 10 8D 5C 0C E8 8E E8 66 89 45  // E..E....\....f.E
    5E80: 1F 66 89 45 36 8D 5C 10 E8 80 E8 66 89 45 23 66  // .f.E6.\....f.E#f
    5E90: 89 45 3A 8D 5C 08 E8 72 E8 0A C0 75 03 5B EB 7B  // .E:.\..r...u.[.{
    5EA0: E8 8E DF 66 C1 E8 10 3D 58 02 74 0D 3D 5E 01 74  // ...f...=X.t.=^.t
    5EB0: 08 77 0A C6 45 17 08 EB 04 C6 45 17 0E 2E A1 55  // .w..E.....E....U
    5EC0: 2A 89 45 08 8D 5C 04 E8 41 E8 66 8B C8 66 C1 E9  // *.E..\..A.f..f..
    5ED0: 10 D3 E0 89 45 10 89 45 32 B0 08 D2 E0 88 45 19  // ....E..E2.....E.
    5EE0: 8D 5C 14 E8 25 E8 5B 3D 00 03 77 2F 53 8B D8 B8  // .\..%.[=..w/S...
    5EF0: 00 03 33 D2 F7 F3 5B FE C8 88 45 1D 88 45 35 88  // ..3...[...E..E5.
    5F00: 45 34 8E DB 57 53 BE 80 4C E8 FF D7 5B 5F 0B C9  // E4..WS..L...[_..
    5F10: 75 05 06 1F 83 25 FE 32 E4 EB 02 B4 03 B0 4F 8E  // u....%.2......O.
    5F20: DB 5E C3 00 81 FB FF 81 74 68 0A FF 75 04 8B C3  // .^......th..u...
    5F30: EB 21 F6 C7 08 75 61 8B CB B2 01 BE 20 4C E8 69  // .!...ua..... L.i
    5F40: DC 74 55 E8 CA DE 0A C0 75 0E 66 C1 E8 10 80 E7  // .tU.....u.f.....
    5F50: 80 0A C7 E8 D5 02 EB 3A E8 2B DA 74 06 E8 BA D8  // .......:.+.t....
    5F60: E8 A9 D3 BE 20 4C E8 76 D7 74 2D E8 A5 00 E8 2C  // .... L.v.t-....,
    5F70: 00 66 BB 20 4C 00 4C E8 8D DE BE 00 4C E8 90 DE  // .f. L.L.....L...
    5F80: 66 C1 E8 10 8B D8 32 C0 F6 C7 80 74 02 B0 40 E8  // f.....2....t..@.
    5F90: A6 D7 B0 4F 32 E4 EB 04 B0 4F B4 03 C3 56 06 33  // ...O2....O...V.3
    5FA0: C0 8E C0 BE 20 4C E8 88 DE 8B C8 66 C1 E8 10 8B  // .... L.....f....
    5FB0: D0 C1 E9 03 26 89 0E 4A 04 C1 EA 04 FE CA 26 88  // ....&..J......&.
    5FC0: 16 84 04 26 C6 06 51 04 00 26 C6 06 50 04 00 26  // ...&..Q..&..P..&
    5FD0: C6 06 49 04 62 26 C7 06 4C 04 00 A0 26 C6 06 85  // ..I.b&..L...&...
    5FE0: 04 10 26 C7 06 0C 01 B9 76 8C C8 26 A3 0E 01 07  // ..&.....v..&....
    5FF0: 5E C3 01 0F 00 0A 00 00 00 00 00 40 05 0F FF 00  // ^..........@....
    6000: 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 01  // ................
    6010: 00 0F 00 FC BA C4 03 B8 00 01 EF B9 04 00 B4 01  // ................
    6020: BE 8A 5F AC 86 E0 EF 8A E0 FE C4 E2 F6 B8 00 03  // .._.............
    6030: EF B9 09 00 BA CE 03 32 E4 BE 8E 5F 8A C4 EE AC  // .......2..._....
    6040: 42 EE 4A FE C4 E2 F5 BA DA 03 EC B9 14 00 BA C0  // B.J.............
    6050: 03 32 E4 BE 97 5F 8A C4 EE AC EE FE C4 E2 F7 C3  // .2..._..........
    6060: BE 00 4C E8 AA DD 66 C1 E8 10 8B D8 E8 7A DD 75  // ..L...f......z.u
    6070: 05 E8 66 DD 75 04 B8 4F 00 C3 B8 4F 03 C3 E8 68  // ..f.u..O...O...h
    6080: DD 74 53 BE 00 4C 80 FB 00 74 18 80 FB 01 75 05  // .tS..L...t....u.
    6090: E8 A6 DD EB 1D 80 FB 02 75 10 8B C1 E8 59 DD D3  // ........u....Y..
    60A0: E8 8B C8 E8 40 D8 74 2E EB 08 80 FB 03 75 24 E8  // ....@.t......u$.
    60B0: FD DC E8 43 DD 8B D8 D3 E3 50 33 C0 BA 00 03 3B  // ...C.....P3....;
    60C0: DA 77 05 BA FF FF EB 04 F7 F3 8B D0 58 8B C8 B8  // .w..........X...
    60D0: 4F 00 C3 32 C0 C3 B0 4F B4 03 C3 00 0A DB 75 07  // O..2...O......u.
    60E0: 8A EF E8 09 D9 EB 05 E8 EE D8 8A F8 B0 4F 32 E4  // .............O2.
    60F0: C3 00 E8 F4 DC 74 2C BE 00 4C E8 13 DD 66 C1 E8  // .....t,..L...f..
    6100: 10 F6 C4 40 75 1D 0A FF 75 05 E8 1E 00 EB 0F 80  // ...@u...u.......
    6110: FF 01 75 14 BB 13 00 E8 BF E5 D1 E8 8B D0 B0 4F  // ..u............O
    6120: 32 E4 C3 B0 4F B4 03 C3 32 C0 C3 52 53 66 50 81  // 2...O...2..RSfP.
    6130: E2 FF 02 D1 E2 8B C2 40 66 C1 E0 10 8B C2 BB 13  // .......@f.......
    6140: 00 E8 F0 E4 BB 12 00 E8 EA E4 66 58 5B 5A C3 9C  // ..........fX[Z..
    6150: 1E 06 66 50 66 51 66 52 66 53 66 55 66 56 66 57  // ..fPfQfRfSfUfVfW
    6160: 0E 1F E8 08 E6 E8 8A FF E8 27 E6 8B EC 89 56 10  // .........'....V.
    6170: 89 46 18 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66  // .F.f_f^f]f[fZfYf
    6180: 58 07 1F 9D CB 0E 07 BF BC A4 2E 8B 0E BA A4 B8  // X...............
    6190: 4F 00 C3 00 0A DB 75 06 B7 04 B3 10 EB 26 80 FB  // O.....u......&..
    61A0: 01 75 14 E8 E0 D7 75 21 53 B1 01 0A FF 74 02 B1  // .u....u!S....t..
    61B0: 00 E8 FA D6 5B EB 0D 80 FB 02 75 0D E8 0D D8 8A  // ....[.....u.....
    61C0: F8 C0 E7 02 B0 4F 32 E4 C3 B8 4F 03 C3 00 80 E3  // .....O2...O.....
    61D0: 01 0A DB 75 05 BB 02 01 EB 0E E8 A9 D7 75 0E 33  // ...u.........u.3
    61E0: C0 53 E8 33 CB 5B 74 05 B0 4F 32 E4 C3 B0 4F B4  // .S.3.[t..O2...O.
    61F0: 03 C3 80 FC 1D 72 03 CD 42 C3 1E 06 66 50 66 51  // .....r..B...fPfQ
    6200: 66 52 66 53 66 55 66 56 66 57 0E 1F 50 0F B6 C4  // fRfSfUfVfW..P...
    6210: D1 E0 8B F0 58 2E FF 94 D4 61 66 5F 66 5E 66 5D  // ....X....af_f^f]
    6220: 66 5B 66 5A 66 59 66 58 07 1F C3 0E 1F 50 0F B6  // f[fZfYfX.....P..
    6230: C4 D1 E0 8B F0 58 2E FF 94 D4 61 C3 0E 62 24 9B  // .....X....a..b$.
    6240: 3D 9B 5A 9B 01 63 5D 92 8F 92 02 93 85 93 13 95  // =.Z..c].........
    6250: 17 95 20 98 F1 98 74 99 DB 99 76 9B D8 9B 81 9E  // .. ...t...v.....
    6260: 1A 65 C8 A2 C2 61 C2 61 C2 61 C2 61 C2 61 C2 61  // .e...a.a.a.a.a.a
    6270: 98 A3 9B 87 EF 88 2E 8E 1E 53 2A 80 26 87 04 F3  // .........S*.&...
    6280: 50 8A E0 80 E4 7F E8 C4 01 3B D3 75 02 58 C3 BA  // P........;.u.X..
    6290: CC 03 EC B2 B4 B1 30 26 F6 47 09 01 74 0C B2 D4  // ......0&.G..t...
    62A0: B1 20 A8 01 75 49 B5 09 EB 06 A8 01 74 41 B5 0B  // . ..uI......tA..
    62B0: 53 E8 70 41 0A FF 5B 75 0B 80 26 88 04 F0 08 2E  // S.pA..[u..&.....
    62C0: 88 04 EB 2B 58 80 0E 87 04 08 80 26 10 04 CF 08  // ...+X......&....
    62D0: 0E 10 04 89 16 63 04 C7 06 85 04 08 00 C6 06 84  // .....c..........
    62E0: 04 18 C7 06 0C 01 A6 6E 8C 0E 0E 01 CD 42 C3 80  // .......n.....B..
    62F0: 26 10 04 CF 08 0E 10 04 58 53 50 0E 1F 33 C9 8A  // &.......XSP..3..
    6300: C8 E8 82 D6 74 06 E8 11 D5 E8 00 D0 B2 08 BE 40  // ....t..........@
    6310: 4C E8 96 D8 BE 40 4C E8 C5 D3 58 5B 0F 84 6E FF  // L....@L...X[..n.
    6320: 2E 8E 1E 53 2A 0E 07 E8 19 29 0E 1F 53 66 BB 40  // ...S*....)..Sf.@
    6330: 4C 00 4C E8 D1 DA BE 00 4C B0 20 E8 FA D3 5B 2E  // L.L.....L. ...[.
    6340: 8E 1E 53 2A 0E 07 E8 22 2E E8 24 00 E8 2E 3D E8  // ..S*..."..$...=.
    6350: D1 01 E8 8E 01 E8 B4 3E 0E 1F BE 00 4C B0 10 E8  // .......>....L...
    6360: D6 D3 E8 FD 2D E8 F5 2D C3 8B EC C6 46 1B 00 C3  // ....-..-....F...
    6370: E8 2F 00 E8 0A 00 E8 BD 00 E8 52 00 E8 62 0A C3  // ./........R..b..
    6380: 53 83 C3 0A 8B 16 63 04 B9 19 00 B8 11 30 EF 32  // S.....c......0.2
    6390: C0 26 8A 27 EF 43 FE C0 E2 F7 5B 80 C2 06 32 C0  // .&.'.C....[...2.
    63A0: EE C3 53 BA C4 03 83 C3 05 B9 04 00 B0 01 26 8A  // ..S...........&.
    63B0: 27 3C 01 75 03 80 CC 20 EF 43 FE C0 E2 F0 5B 26  // '<.u... .C....[&
    63C0: 8A 47 09 BA C2 03 EE B2 C4 B8 00 03 EF C3 8B F3  // .G..............
    63D0: 83 C6 23 BA DA 03 26 F6 47 09 01 75 02 B2 BA F6  // ..#...&.G..u....
    63E0: 06 89 04 08 74 1D 83 C6 10 EC B9 04 00 B4 10 B2  // ....t...........
    63F0: C0 80 FC 11 74 07 8A C4 EE 26 8A 04 EE 46 FE C4  // ....t....&...F..
    6400: E2 EF C3 53 EC 8B DE B9 14 00 32 E4 B2 C0 8A C4  // ...S......2.....
    6410: EE FE C4 26 8A 07 EE 43 E2 F4 8A C4 EE 32 C0 EE  // ...&...C.....2..
    6420: 1E 06 E8 4F 2D 0B ED 74 09 1F 1E B9 10 00 F3 A4  // ...O-..t........
    6430: 46 A4 07 1F 5B C3 53 83 C3 37 B9 09 00 32 C0 BA  // F...[.S..7...2..
    6440: CE 03 26 8A 27 EF 43 FE C0 E2 F7 5B C3 BB D8 66  // ..&.'.C....[...f
    6450: 0E 07 8B D3 0A E4 7D 01 C3 E8 01 00 C3 33 F6 80  // ......}......3..
    6460: FC 03 7F 3C 4A F6 06 89 04 10 75 20 A0 88 04 24  // ...<J.....u ...$
    6470: 0F 3C 02 7E 24 3C 08 74 20 3C 06 74 1C 3C 07 74  // .<.~$<.t <.t.<.t
    6480: 18 B0 40 F6 E4 03 D8 81 C3 00 04 C3 B0 40 D0 EC  // ..@..........@..
    6490: F6 E4 03 D8 81 C3 80 04 C3 B0 40 F6 E4 03 D8 C3  // ..........@.....
    64A0: 80 FC 07 75 11 F6 06 89 04 10 75 05 81 C3 00 01  // ...u......u.....
    64B0: C3 81 C3 00 05 C3 BF 5A 64 BE 7B 64 33 C9 E8 4E  // .......Zd.{d3..N
    64C0: 00 C3 04 80 00 05 80 00 06 C0 00 0D 80 02 0E C0  // ................
    64D0: 02 0F 80 03 10 C0 03 11 40 05 12 80 05 13 C0 05  // ........@.......
    64E0: 62 40 01 53 8A 1E 49 04 80 FB 07 7F 10 32 FF D1  // b@.S..I......2..
    64F0: E3 2E 8B 87 97 64 A2 65 04 88 26 66 04 5B C3 2C  // .....d.e..&f.[.,
    6500: 30 28 30 2D 30 29 30 2A 30 2E 30 1E 3F 29 30 2E  // 0(0-0)0*0.0.?)0.
    6510: 38 25 75 07 2E 03 5D 01 33 F6 C3 83 C7 03 3B FE  // 8%u...].3.....;.
    6520: 75 ED C3 1E 06 2E 8E 1E 53 2A F6 06 87 04 80 75  // u.......S*.....u
    6530: 49 83 3E 4C 04 00 74 42 A0 49 04 B9 00 20 2E 8B  // I.>L..tB.I... ..
    6540: 3E 59 2A 26 F6 47 33 01 75 0E 26 F6 47 09 01 75  // >Y*&.G3.u.&.G..u
    6550: 1B 2E 8B 3E 57 2A EB 14 3C 06 7E 0B 2E 8B 3E 55  // ...>W*..<.~...>U
    6560: 2A 26 8A 67 37 B5 40 66 33 C0 EB 06 66 B8 20 07  // *&.g7.@f3...f. .
    6570: 20 07 8E C7 66 33 FF F3 66 AB 80 26 87 04 7F 07  //  ...f3..f..&....
    6580: 1F C3 2E 8E 1E 53 2A 80 FB 10 75 03 E9 7A 01 80  // .....S*...u..z..
    6590: FB 20 75 03 E9 9B 01 80 FB 32 75 1F BA CC 03 0A  // . u......2u.....
    65A0: C0 75 09 EC 0C 02 B2 C2 EE E9 F3 00 FE C8 0F 85  // .u..............
    65B0: F3 00 EC 24 FD B2 C2 EE E9 E4 00 80 FB 35 75 28  // ...$.........5u(
    65C0: 3C 80 75 08 80 0E 89 04 40 E9 D3 00 F6 06 89 04  // <.u.....@.......
    65D0: 40 0F 84 D0 00 0A C0 0F 84 CA 00 FE C8 75 06 E8  // @............u..
    65E0: 98 07 E9 BA 00 E9 BD 00 80 FB 30 74 03 E9 96 00  // ..........0t....
    65F0: 50 E8 30 3E 8A EF BA CC 03 EC 8A C8 58 0A C0 75  // P.0>........X..u
    6600: 30 B7 08 F6 C1 01 75 12 0A ED 75 0B A0 10 04 24  // 0.....u...u....$
    6610: 30 3C 30 75 10 B7 02 E9 8B 00 A0 10 04 24 30 3C  // 0<0u.........$0<
    6620: 30 75 02 B7 02 80 26 89 04 6F 80 0E 89 04 80 EB  // 0u....&..o......
    6630: 36 3C 01 75 41 80 26 89 04 6F B7 09 F6 C1 01 75  // 6<.uA.&..o.....u
    6640: 15 B7 0B A0 10 04 24 30 3C 30 74 1B B7 09 0A ED  // ......$0<0t.....
    6650: 74 15 B7 05 EB 11 A0 10 04 24 30 3C 30 75 08 B7  // t........$0<0u..
    6660: 0B 0A ED 74 02 B7 03 8A 1E 88 04 80 E3 F0 0A DF  // ...t............
    6670: 88 1E 88 04 EB 29 3C 02 75 2B 80 26 89 04 6F 80  // .....)<.u+.&..o.
    6680: 0E 89 04 10 EB B4 80 FB 31 75 1B 0A C0 74 0B 3C  // ........1u...t.<
    6690: 01 75 0C 80 0E 89 04 08 EB 05 80 26 89 04 F7 8B  // .u.........&....
    66A0: EC C6 46 1A 12 C3 80 FB 33 75 16 3C 00 74 0B 3C  // ..F.....3u.<.t.<
    66B0: 01 75 EC 80 26 89 04 FD EB E5 80 0E 89 04 02 EB  // .u..&...........
    66C0: DE 80 FB 34 75 17 3C 00 75 07 80 26 87 04 FE EB  // ...4u.<.u..&....
    66D0: CE 3C 01 75 07 80 0E 87 04 01 EB C3 C3 80 FB 36  // .<.u...........6
    66E0: 75 26 BB 20 FF 3C 01 74 09 BB 00 DF 3C 00 74 02  // u&. .<.t....<.t.
    66F0: EB AD E8 02 00 EB A8 9C FA BA C4 03 B0 01 EE 42  // ...............B
    6700: EC 22 C7 0A C3 EE 9D C3 C3 B3 03 B7 00 BA CC 03  // ."..............
    6710: EC A8 01 75 02 B7 01 A0 88 04 8A E0 B1 04 D2 EC  // ...u............
    6720: 25 0F 0F 8B C8 8B EC 89 5E 0E 89 4E 16 C6 46 1A  // %.......^..N..F.
    6730: 12 C3 9C FA C7 06 14 00 88 8C 8C 0E 16 00 9D C3  // ................
    6740: 28 18 08 00 08 09 03 00 02 63 2D 27 28 90 2B A0  // (........c-'(.+.
    6750: BF 1F 00 C7 06 07 00 00 00 00 9C 8E 8F 14 1F 96  // ................
    6760: B9 A3 FF 00 01 02 03 04 05 06 07 10 11 12 13 14  // ................
    6770: 15 16 17 08 00 0F 00 00 00 00 00 00 10 0E 00 FF  // ................
    6780: 50 18 08 00 10 01 03 00 02 63 5F 4F 50 82 55 81  // P........c_OP.U.
    6790: BF 1F 00 C7 06 07 00 00 00 00 9C 8E 8F 28 1F 96  // .............(..
    67A0: B9 A3 FF 00 01 02 03 04 05 06 07 10 11 12 13 14  // ................
    67B0: 15 16 17 08 00 0F 00 00 00 00 00 00 10 0E 00 FF  // ................
    67C0: 28 18 08 00 40 09 03 00 02 63 2D 27 28 90 2B 80  // (...@....c-'(.+.
    67D0: BF 1F 00 C1 00 00 00 00 00 00 9C 8E 8F 14 00 96  // ................
    67E0: B9 A2 FF 00 13 15 17 02 04 06 07 10 11 12 13 14  // ................
    67F0: 15 16 17 01 00 03 00 00 00 00 00 00 30 0F 00 FF  // ............0...
    6800: 50 18 08 00 40 01 01 00 06 63 5F 4F 50 82 54 80  // P...@....c_OP.T.
    6810: BF 1F 00 C1 00 00 00 00 00 00 9C 8E 8F 28 00 96  // .............(..
    6820: B9 C2 FF 00 17 17 17 17 17 17 17 17 17 17 17 17  // ................
    6830: 17 17 17 01 00 01 00 00 00 00 00 00 00 0D 00 FF  // ................
    6840: 50 18 0E 00 10 00 03 00 03 A6 5F 4F 50 82 55 81  // P........._OP.U.
    6850: BF 1F 00 4D 0B 0C 00 00 00 00 83 85 5D 28 0D 63  // ...M........](.c
    6860: BA A3 FF 00 08 08 08 08 08 08 08 10 18 18 18 18  // ................
    6870: 18 18 18 0E 00 0F 08 00 00 00 00 00 10 0A 00 FF  // ................
    6880: 50 1D 10 00 A0 01 0F 00 0A E3 5F 4F 50 82 54 80  // P........._OP.T.
    6890: 0B 3E 00 40 00 00 00 00 00 00 EA 8C DF 50 00 E7  // .>.@.........P..
    68A0: 04 E3 FF 00 01 02 03 04 05 06 07 08 09 0A 0B 0C  // ................
    68B0: 0D 0E 0F 01 00 0F 00 10 00 00 00 00 40 05 0F FF  // ............@...
    68C0: 00 05 11 1C 08 0B 14 28 0E 18 2D 32 20 24 38 3F  // .......(..-2 $8?
    68D0: 00 05 08 0B 0E 11 14 18 1C 20 24 28 2D 32 38 3F  // ......... $(-28?
    68E0: 07 0C 10 15 1A 18 16 15 13 1C 25 2F 38 33 2E 2A  // ..........%/83.*
    68F0: 25 27 29 2A 2C 23 19 10 23 25 27 2A 2C 2B 2A 29  // %')*,#..#%'*,+*)
    6900: 29 2D 32 37 3B 39 37 34 32 33 34 35 35 31 2C 27  // )-27;974234551,'
    6910: 2F 30 32 33 34 34 33 33 32 35 38 3A 3D 3C 3A 39  // /0234433258:=<:9
    6920: 38 38 39 39 3A 37 34 31 03 05 07 09 0B 0B 0A 09  // 8899:741........
    6930: 08 0D 11 15 19 17 15 13 11 11 12 13 14 0F 0B 07  // ................
    6940: 10 10 12 13 14 13 13 13 12 14 16 18 1A 19 18 17  // ................
    6950: 16 17 17 17 18 15 14 11 15 15 16 17 17 17 17 17  // ................
    6960: 16 18 19 1A 1B 1B 1A 19 19 19 19 19 1A 18 17 16  // ................
    6970: 02 03 04 05 07 06 06 05 05 07 0A 0C 0E 0D 0C 0B  // ................
    6980: 09 0A 0A 0B 0B 09 06 04 09 09 0A 0B 0B 0B 0B 0B  // ................
    6990: 0A 0C 0D 0E 0F 0F 0E 0D 0D 0D 0D 0D 0E 0C 0B 0A  // ................
    69A0: 0C 0C 0C 0D 0D 0D 0D 0D 0C 0D 0E 0F 0F 0F 0F 0E  // ................
    69B0: 0E 0E 0E 0E 0E 0E 0D 0C 00 00 00 00 00 00 00 00  // ................
    69C0: 28 18 08 00 20 09 0F 00 06 63 2D 27 28 90 2B 80  // (... ....c-'(.+.
    69D0: BF 1F 00 C0 00 00 00 00 00 00 9C 8E 8F 14 00 96  // ................
    69E0: B9 E3 FF 00 01 02 03 04 05 06 07 10 11 12 13 14  // ................
    69F0: 15 16 17 01 00 0F 00 00 00 00 00 00 00 05 0F FF  // ................
    6A00: 50 18 08 00 40 01 0F 00 06 63 5F 4F 50 82 54 80  // P...@....c_OP.T.
    6A10: BF 1F 00 C0 00 00 00 00 00 00 9C 8E 8F 28 00 96  // .............(..
    6A20: B9 E3 FF 00 01 02 03 04 05 06 07 10 11 12 13 14  // ................
    6A30: 15 16 17 01 00 0F 00 00 00 00 00 00 00 05 0F FF  // ................
    6A40: 00 05 11 1C 08 0B 25 28 02 07 1B 20 0F 14 28 2C  // ......%(... ..(,
    6A50: 0C 11 25 2A 14 1E 32 36 0F 13 27 2C 1B 20 34 39  // ..%*..26..',. 49
    6A60: 06 0B 1F 24 13 18 2C 30 09 0D 21 26 15 1A 2E 33  // ...$..,0..!&...3
    6A70: 13 17 2B 30 1F 24 38 3D 0E 18 2D 32 20 24 38 3F  // ..+0.$8=..-2 $8?
    6A80: 00 05 11 1C 08 0B 14 18 00 05 11 1C 08 0B 14 18  // ................
    6A90: 0E 18 2D 32 20 24 38 3F 0E 18 2D 32 20 24 38 3F  // ..-2 $8?..-2 $8?
    6AA0: 00 05 11 1C 08 0B 14 18 00 05 11 1C 08 0B 14 18  // ................
    6AB0: 0E 18 2D 32 20 24 38 3F 0E 18 2D 32 20 24 38 3F  // ..-2 $8?..-2 $8?
    6AC0: 50 18 0E 00 80 01 0F 00 06 A2 5F 4F 50 82 54 80  // P........._OP.T.
    6AD0: BF 1F 00 40 00 00 00 00 00 00 83 85 5D 28 0F 63  // ...@........](.c
    6AE0: BA E3 FF 00 08 00 00 18 18 00 00 00 08 00 00 00  // ................
    6AF0: 18 00 00 0B 00 05 00 00 00 00 00 00 00 05 05 FF  // ................
    6B00: 50 18 0E 00 80 01 0F 00 06 A3 5F 4F 50 82 54 80  // P........._OP.T.
    6B10: BF 1F 00 40 00 00 00 00 00 00 83 85 5D 28 0F 63  // ...@........](.c
    6B20: BA E3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    6B30: 3D 3E 3F 01 00 0F 00 00 00 00 00 00 00 05 0F FF  // =>?.............
    6B40: 28 18 0E 00 08 09 03 00 02 A3 2D 27 28 90 2B A0  // (.........-'(.+.
    6B50: BF 1F 00 4D 0B 0C 00 00 00 00 83 85 5D 14 1F 63  // ...M........]..c
    6B60: BA A3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    6B70: 3D 3E 3F 08 00 0F 00 00 00 00 00 00 10 0E 00 FF  // =>?.............
    6B80: 50 18 0E 00 10 01 03 00 02 A3 5F 4F 50 82 55 81  // P........._OP.U.
    6B90: BF 1F 00 4D 0B 0C 00 00 00 00 83 85 5D 28 1F 63  // ...M........](.c
    6BA0: BA A3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    6BB0: 3D 3E 3F 08 00 0F 00 00 00 00 00 00 10 0E 00 FF  // =>?.............
    6BC0: 28 18 10 00 08 08 03 00 02 67 2D 27 28 90 2B A0  // (........g-'(.+.
    6BD0: BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E 8F 14 1F 96  // ...O............
    6BE0: B9 A3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    6BF0: 3D 3E 3F 0C 00 0F 08 00 00 00 00 00 10 0E 00 FF  // =>?.............
    6C00: 50 18 10 00 10 00 03 00 02 67 5F 4F 50 82 55 81  // P........g_OP.U.
    6C10: BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E 8F 28 1F 96  // ...O.........(..
    6C20: B9 A3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    6C30: 3D 3E 3F 0C 00 0F 08 00 00 00 00 00 10 0E 00 FF  // =>?.............
    6C40: 50 18 10 00 10 00 03 00 02 66 5F 4F 50 82 55 81  // P........f_OP.U.
    6C50: BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E 8F 28 0F 96  // ...O.........(..
    6C60: B9 A3 FF 00 08 08 08 08 08 08 08 10 18 18 18 18  // ................
    6C70: 18 18 18 0E 00 0F 08 00 00 00 00 00 10 0A 00 FF  // ................
    6C80: 50 1D 10 00 A0 01 0F 00 06 E3 5F 4F 50 82 54 80  // P........._OP.T.
    6C90: 0B 3E 00 40 00 00 00 00 00 00 EA 8C DF 28 00 E7  // .>.@.........(..
    6CA0: 04 C3 FF 00 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F  // ....????????????
    6CB0: 3F 3F 3F 01 00 0F 00 00 00 00 00 00 00 05 01 FF  // ???.............
    6CC0: 50 1D 10 00 A0 01 0F 00 06 E3 5F 4F 50 82 54 80  // P........._OP.T.
    6CD0: 0B 3E 00 40 00 00 00 00 00 00 EA 8C DF 28 00 E7  // .>.@.........(..
    6CE0: 04 E3 FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C  // ...........89:;<
    6CF0: 3D 3E 3F 01 00 0F 00 00 00 00 00 00 00 05 0F FF  // =>?.............
    6D00: 28 18 08 00 20 01 0F 00 0E 63 5F 4F 50 82 54 80  // (... ....c_OP.T.
    6D10: BF 1F 00 41 00 00 00 00 00 00 9C 8E 8F 28 40 96  // ...A.........(@.
    6D20: B9 A3 FF 00 01 02 03 04 05 06 07 08 09 0A 0B 0C  // ................
    6D30: 0D 0E 0F 41 00 0F 00 00 00 00 00 00 40 05 0F FF  // ...A........@...
    6D40: D8 66 00 C0 00 00 00 00 00 00 00 00 00 00 00 00  // .f..............
    6D50: F8 6C 00 C0 00 00 00 00 00 00 00 00 00 00 00 00  // .l..............
    6D60: 1A 00 96 A4 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    6D70: 00 00 00 00 00 00 00 00 00 00 1E E8 10 00 2E 8E  // ................
    6D80: 1E 53 2A E8 FE 36 E8 D5 36 E8 76 1A 1F C3 2E 8E  // .S*..6..6.v.....
    6D90: 1E 53 2A C7 06 87 04 60 F9 C6 06 8A 04 0B A0 89  // .S*....`........
    6DA0: 04 0C 11 24 17 A2 89 04 B4 01 E8 73 1E A0 89 04  // ...$.......s....
    6DB0: 80 26 10 04 CF 80 0E 10 04 20 C7 06 63 04 D4 03  // .&....... ..c...
    6DC0: 0E 1F E8 A5 C5 F7 C1 02 00 75 03 E8 3E C5 B8 03  // .........u..>...
    6DD0: 00 E8 57 F4 C3 1E 2E 8E 1E 53 2A 0E 07 EB 00 1F  // ..W......S*.....
    6DE0: C3 F6 06 89 04 08 74 01 C3 53 BA C8 03 EC B0 FF  // ......t..S......
    6DF0: B2 C6 EE B2 C8 80 3E 63 04 B4 75 2F BE 5A 6E B9  // ......>c..u/.Zn.
    6E00: 40 00 33 DB 9C FA 8A C3 EE 8B FB C1 EF 03 83 E7  // @.3.............
    6E10: 03 03 FE 2E 8A 05 42 EE 2E 8A 45 04 EE 2E 8A 45  // ......B...E....E
    6E20: 08 EE FE C3 4A E2 DF 9D E9 85 00 26 8A 47 2B F6  // ....J......&.G+.
    6E30: 06 89 04 06 74 31 B9 F8 00 BF 58 68 3C 08 74 11  // ....t1....Xh<.t.
    6E40: B9 40 00 BF D8 69 3C 38 74 07 3C 3F 74 03 BF 18  // .@...i<8t.<?t...
    6E50: 6A 33 DB 9C FA 8A C3 EE 2E 8A 01 42 EE EE EE FE  // j3.........B....
    6E60: C3 4A E2 F1 9D EB 49 3C 08 74 25 3C 38 74 2E 3C  // .J....I<.t%<8t.<
    6E70: 3F 74 2A B9 08 00 33 DB 51 E8 E6 D3 B9 08 00 F7  // ?t*...3.Q.......
    6E80: C3 10 00 74 03 83 C7 18 E8 67 00 59 E2 EA EB 20  // ...t.....g.Y... 
    6E90: E8 CF D3 B9 10 00 33 DB E8 57 00 EB 13 B9 40 00  // ......3..W....@.
    6EA0: 33 DB 51 E8 28 00 8A C3 E8 B7 2F FE C3 59 E2 F2  // 3.Q.(...../..Y..
    6EB0: 5B C3 00 2A 00 2A 00 2A 00 2A 15 3F 15 3F 15 3F  // [..*.*.*.*.?.?.?
    6EC0: 15 3F 00 2A 00 3F 00 2A 00 3F 00 2A 00 3F 8B FB  // .?.*.?.*.?.*.?..
    6ED0: C1 EF 02 83 E7 0F 2E 8A B5 4A 6E 8B FB D1 EF 83  // .........Jn.....
    6EE0: E7 0F 2E 8A AD 4A 6E 8B FB 83 E7 0F 2E 8A 8D 4A  // .....Jn........J
    6EF0: 6E C3 9C 8A C3 FA EE 2E 8A 05 42 EE 47 2E 8A 05  // n.........B.G...
    6F00: EE 47 2E 8A 05 EE 47 FE C3 4A E2 E7 9D C3 00 00  // .G....G..J......
    6F10: 00 00 00 00 00 00 7E 81 A5 81 BD 99 81 7E 7C FE  // ......~......~|.
    6F20: D6 BA C6 FE 7C 00 C6 EE FE FE 7C 38 10 00 10 38  // ....|.....|8...8
    6F30: 7C FE 7C 38 10 00 10 38 10 EE EE 10 38 00 38 7C  // |.|8...8....8.8|
    6F40: FE FE 6C 10 38 00 00 18 3C 7E 3C 18 00 00 FF E7  // ..l.8...<~<.....
    6F50: C3 81 C3 E7 FF FF 00 18 3C 66 66 3C 18 00 FF E7  // ........<ff<....
    6F60: C3 99 99 C3 E7 FF 1E 0E 1E 36 78 CC CC 78 7E C3  // .........6x..x~.
    6F70: C3 7E 18 7E 18 18 1E 1A 1E 18 18 70 F0 60 3E 3E  // .~.~.......p.`>>
    6F80: 36 36 F6 66 1E 0C DB 3C 66 E7 66 3C DB 00 80 C0  // 66.f...<f.f<....
    6F90: F0 F8 F0 C0 80 00 02 06 1E 3E 1E 06 02 00 18 3C  // .........>.....<
    6FA0: 7E 18 7E 3C 18 00 66 66 66 66 66 00 66 00 7F DB  // ~.~<..fffff.f...
    6FB0: 7B 3B 1B 1B 1B 00 3C 66 38 6C 6C 38 CC 78 00 00  // {;....<f8ll8.x..
    6FC0: 00 00 FE FE FE 00 18 3C 7E 18 7E 3C 18 7E 18 3C  // .......<~.~<.~.<
    6FD0: 7E 18 18 18 18 00 18 18 18 18 7E 3C 18 00 00 18  // ~.........~<....
    6FE0: 1C FE 1C 18 00 00 00 30 70 FE 70 30 00 00 00 00  // .......0p.p0....
    6FF0: C0 C0 C0 FE 00 00 00 24 66 FF 66 24 00 00 00 10  // .......$f.f$....
    7000: 38 7C 7C FE 00 00 00 FE 7C 7C 38 10 00 00 00 00  // 8||.....||8.....
    7010: 00 00 00 00 00 00 18 3C 3C 18 18 00 18 00 6C 6C  // .......<<.....ll
    7020: 6C 00 00 00 00 00 6C 6C FE 6C FE 6C 6C 00 18 7E  // l.....ll.l.ll..~
    7030: C0 7C 06 FC 18 00 00 C6 0C 18 30 60 C6 00 38 6C  // .|........0`..8l
    7040: 38 76 CC CC 76 00 18 18 30 00 00 00 00 00 18 30  // 8v..v...0......0
    7050: 60 60 60 30 18 00 60 30 18 18 18 30 60 00 00 EE  // ```0..`0...0`...
    7060: 7C FE 7C EE 00 00 00 18 18 7E 18 18 00 00 00 00  // |.|......~......
    7070: 00 00 18 18 30 00 00 00 00 FE 00 00 00 00 00 00  // ....0...........
    7080: 00 00 00 38 38 00 06 0C 18 30 60 C0 80 00 7C C6  // ...88....0`...|.
    7090: CE DE F6 E6 7C 00 18 78 18 18 18 18 7E 00 7C C6  // ....|..x....~.|.
    70A0: 0C 18 30 66 FE 00 7C C6 06 3C 06 C6 7C 00 0C 1C  // ..0f..|..<..|...
    70B0: 3C 6C FE 0C 0C 00 FE C0 FC 06 06 C6 7C 00 7C C6  // <l..........|.|.
    70C0: C0 FC C6 C6 7C 00 FE C6 06 0C 18 18 18 00 7C C6  // ....|.........|.
    70D0: C6 7C C6 C6 7C 00 7C C6 C6 7E 06 C6 7C 00 00 1C  // .|..|.|..~..|...
    70E0: 1C 00 00 1C 1C 00 00 18 18 00 00 18 18 30 0C 18  // .............0..
    70F0: 30 60 30 18 0C 00 00 00 FE 00 00 FE 00 00 60 30  // 0`0...........`0
    7100: 18 0C 18 30 60 00 7C C6 06 0C 18 00 18 00 7C C6  // ...0`.|.......|.
    7110: C6 DE DC C0 7E 00 38 6C C6 C6 FE C6 C6 00 FC 66  // ....~.8l.......f
    7120: 66 7C 66 66 FC 00 3C 66 C0 C0 C0 66 3C 00 F8 6C  // f|ff..<f...f<..l
    7130: 66 66 66 6C F8 00 FE C2 C0 F8 C0 C2 FE 00 FE 62  // fffl...........b
    7140: 60 7C 60 60 F0 00 7C C6 C0 C0 DE C6 7C 00 C6 C6  // `|``..|.....|...
    7150: C6 FE C6 C6 C6 00 3C 18 18 18 18 18 3C 00 3C 18  // ......<.....<.<.
    7160: 18 18 D8 D8 70 00 C6 CC D8 F0 D8 CC C6 00 F0 60  // ....p..........`
    7170: 60 60 60 62 FE 00 C6 EE FE D6 D6 C6 C6 00 C6 E6  // ```b............
    7180: E6 F6 DE CE C6 00 7C C6 C6 C6 C6 C6 7C 00 FC 66  // ......|.....|..f
    7190: 66 7C 60 60 F0 00 7C C6 C6 C6 C6 D6 7C 06 FC C6  // f|``..|.....|...
    71A0: C6 FC D8 CC C6 00 7C C6 C0 7C 06 C6 7C 00 7E 5A  // ......|..|..|.~Z
    71B0: 18 18 18 18 3C 00 C6 C6 C6 C6 C6 C6 7C 00 C6 C6  // ....<.......|...
    71C0: C6 C6 6C 38 10 00 C6 C6 D6 D6 FE EE C6 00 C6 6C  // ..l8...........l
    71D0: 38 38 38 6C C6 00 66 66 66 3C 18 18 3C 00 FE 86  // 888l..fff<..<...
    71E0: 0C 18 30 62 FE 00 7C 60 60 60 60 60 7C 00 C0 60  // ..0b..|`````|..`
    71F0: 30 18 0C 06 02 00 7C 0C 0C 0C 0C 0C 7C 00 10 38  // 0.....|.....|..8
    7200: 6C C6 00 00 00 00 00 00 00 00 00 00 00 FF 30 30  // l.............00
    7210: 18 00 00 00 00 00 00 00 78 0C 7C CC 7E 00 E0 60  // ........x.|.~..`
    7220: 7C 66 66 66 FC 00 00 00 7C C6 C0 C6 7C 00 1C 0C  // |fff....|...|...
    7230: 7C CC CC CC 7E 00 00 00 7C C6 FE C0 7C 00 1C 36  // |...~...|...|..6
    7240: 30 FC 30 30 78 00 00 00 76 CE C6 7E 06 7C E0 60  // 0.00x...v..~.|.`
    7250: 7C 66 66 66 E6 00 18 00 38 18 18 18 3C 00 0C 00  // |fff....8...<...
    7260: 1C 0C 0C 0C CC 78 E0 60 66 6C 78 6C E6 00 18 18  // .....x.`flxl....
    7270: 18 18 18 18 1C 00 00 00 6C FE D6 D6 C6 00 00 00  // ........l.......
    7280: DC 66 66 66 66 00 00 00 7C C6 C6 C6 7C 00 00 00  // .ffff...|...|...
    7290: DC 66 66 7C 60 F0 00 00 76 CC CC 7C 0C 1E 00 00  // .ff|`...v..|....
    72A0: DC 66 60 60 F0 00 00 00 7C C0 7C 06 7C 00 30 30  // .f``....|.|.|.00
    72B0: FC 30 30 36 1C 00 00 00 CC CC CC CC 76 00 00 00  // .006........v...
    72C0: C6 C6 6C 38 10 00 00 00 C6 C6 D6 FE 6C 00 00 00  // ..l8........l...
    72D0: C6 6C 38 6C C6 00 00 00 C6 C6 CE 76 06 7C 00 00  // .l8l.......v.|..
    72E0: FC 98 30 64 FC 00 0E 18 18 70 18 18 0E 00 18 18  // ..0d.....p......
    72F0: 18 00 18 18 18 00 70 18 18 0E 18 18 70 00 76 DC  // ......p.....p.v.
    7300: 00 00 00 00 00 00 00 10 38 38 6C 6C FE 00 3C 66  // ........88ll..<f
    7310: C0 66 3C 18 CC 78 00 C6 00 C6 C6 CE 76 00 0E 00  // .f<..x......v...
    7320: 7C C6 FE C0 7C 00 7C C6 78 0C 7C CC 7E 00 C6 00  // |...|.|.x.|.~...
    7330: 78 0C 7C CC 7E 00 E0 00 78 0C 7C CC 7E 00 38 38  // x.|.~...x.|.~.88
    7340: 78 0C 7C CC 7E 00 00 00 7C C0 7C 18 6C 38 7C C6  // x.|.~...|.|.l8|.
    7350: 7C C6 FE C0 7C 00 C6 00 7C C6 FE C0 7C 00 E0 00  // |...|...|...|...
    7360: 7C C6 FE C0 7C 00 66 00 38 18 18 18 3C 00 7C C6  // |...|.f.8...<.|.
    7370: 38 18 18 18 3C 00 00 00 38 18 18 18 3C 00 C6 38  // 8...<...8...<..8
    7380: 6C C6 FE C6 C6 00 38 38 00 7C C6 FE C6 00 0E 00  // l.....88.|......
    7390: FE C0 F8 C0 FE 00 00 00 6C 9A 7E D8 6E 00 7E D8  // ........l.~.n.~.
    73A0: D8 FE D8 D8 DE 00 7C C6 00 7C C6 C6 7C 00 00 C6  // ......|..|..|...
    73B0: 00 7C C6 C6 7C 00 00 E0 00 7C C6 C6 7C 00 7C C6  // .|..|....|..|.|.
    73C0: 00 C6 C6 CE 76 00 00 E0 00 C6 C6 CE 76 00 18 00  // ....v.......v...
    73D0: 3C 18 18 18 3C 00 C6 38 6C C6 C6 6C 38 00 C6 00  // <...<..8l..l8...
    73E0: C6 C6 C6 C6 7C 00 00 18 7E D8 D8 7E 18 00 38 6C  // ....|...~..~..8l
    73F0: 60 F0 66 F6 6C 00 C3 66 3C 7E 18 3C 18 00 3E 63  // `.f.l..f<~.<..>c
    7400: 38 0E 63 3E 00 1C 00 3E 61 3C 86 7C 00 1C 0E 00  // 8.c>...>a<.|....
    7410: 78 0C 7C CC 7E 00 1C 00 38 18 18 18 3C 00 00 0E  // x.|.~...8...<...
    7420: 00 7C C6 C6 7C 00 00 0E 00 CC CC DC 76 00 00 FC  // .|..|.......v...
    7430: 00 BC 66 66 E6 00 FE 00 C6 E6 F6 CE C6 00 3E 00  // ..ff..........>.
    7440: 3E 60 67 63 3D 00 3E 00 76 CE C6 7E 06 7C 18 00  // >`gc=.>.v..~.|..
    7450: 18 30 60 66 3C 00 00 00 00 7C 60 60 00 00 00 00  // .0`f<....|``....
    7460: 00 7C 0C 0C 00 00 C0 CC D8 30 7C 36 0C 3E C0 CC  // .|.......0|6.>..
    7470: D8 30 6C 3C 7E 0C 18 00 18 18 3C 3C 18 00 00 36  // .0l<~.....<<...6
    7480: 6C D8 6C 36 00 00 00 D8 6C 36 6C D8 00 00 22 88  // l.l6....l6l...".
    7490: 22 88 22 88 22 88 55 AA 55 AA 55 AA 55 AA DD 77  // ".".".U.U.U.U..w
    74A0: DD 77 DD 77 DD 77 18 18 18 18 18 18 18 18 18 18  // .w.w.w..........
    74B0: 18 18 F8 18 18 18 18 18 F8 18 F8 18 18 18 36 36  // ..............66
    74C0: 36 36 F6 36 36 36 00 00 00 00 FE 36 36 36 00 00  // 66.666.....666..
    74D0: F8 18 F8 18 18 18 36 36 F6 06 F6 36 36 36 36 36  // ......66...66666
    74E0: 36 36 36 36 36 36 00 00 FE 06 F6 36 36 36 36 36  // 666666.....66666
    74F0: F6 06 FE 00 00 00 36 36 36 36 FE 00 00 00 18 18  // ......6666......
    7500: F8 18 F8 00 00 00 00 00 00 00 F8 18 18 18 18 18  // ................
    7510: 18 18 1F 00 00 00 18 18 18 18 FF 00 00 00 00 00  // ................
    7520: 00 00 FF 18 18 18 18 18 18 18 1F 18 18 18 00 00  // ................
    7530: 00 00 FF 00 00 00 18 18 18 18 FF 18 18 18 18 18  // ................
    7540: 1F 18 1F 18 18 18 36 36 36 36 37 36 36 36 36 36  // ......6666766666
    7550: 37 30 3F 00 00 00 00 00 3F 30 37 36 36 36 36 36  // 70?.....?0766666
    7560: F7 00 FF 00 00 00 00 00 FF 00 F7 36 36 36 36 36  // ...........66666
    7570: 37 30 37 36 36 36 00 00 FF 00 FF 00 00 00 36 36  // 707666........66
    7580: F7 00 F7 36 36 36 18 18 FF 00 FF 00 00 00 36 36  // ...666........66
    7590: 36 36 FF 00 00 00 00 00 FF 00 FF 18 18 18 00 00  // 66..............
    75A0: 00 00 FF 36 36 36 36 36 36 36 3F 00 00 00 18 18  // ...6666666?.....
    75B0: 1F 18 1F 00 00 00 00 00 1F 18 1F 18 18 18 00 00  // ................
    75C0: 00 00 3F 36 36 36 36 36 36 36 FF 36 36 36 18 18  // ..?6666666.666..
    75D0: FF 18 FF 18 18 18 18 18 18 18 F8 00 00 00 00 00  // ................
    75E0: 00 00 1F 18 18 18 FF FF FF FF FF FF FF FF 00 00  // ................
    75F0: 00 00 FF FF FF FF F0 F0 F0 F0 F0 F0 F0 F0 0F 0F  // ................
    7600: 0F 0F 0F 0F 0F 0F FF FF FF FF 00 00 00 00 00 00  // ................
    7610: 66 DC D8 DC 66 00 00 78 CC F8 CC C6 CC 00 00 FE  // f...f..x........
    7620: 62 60 60 60 E0 00 00 FE 6C 6C 6C 6C 6C 00 FE C6  // b```....lllll...
    7630: 60 30 60 C6 FE 00 00 7E D8 CC CC D8 70 00 00 66  // `0`....~....p..f
    7640: 66 66 66 7C C0 00 00 76 DC 18 18 18 38 00 FE 38  // fff|...v....8..8
    7650: 6C C6 6C 38 FE 00 38 6C C6 FE C6 6C 38 00 38 6C  // l.l8..8l...l8.8l
    7660: C6 C6 6C 6C EE 00 3E 60 38 66 C6 CC 78 00 00 00  // ..ll..>`8f..x...
    7670: 7E DB DB 7E 00 00 06 7C DE F6 E6 7C C0 00 38 60  // ~..~...|...|..8`
    7680: C0 F8 C0 60 38 00 7C C6 C6 C6 C6 C6 C6 00 00 FE  // ...`8.|.........
    7690: 00 FE 00 FE 00 00 18 18 7E 18 18 00 7E 00 30 18  // ........~...~.0.
    76A0: 0C 18 30 00 7E 00 0C 18 30 18 0C 00 7E 00 0C 1E  // ..0.~...0...~...
    76B0: 18 18 18 18 18 18 18 18 18 18 18 78 30 00 00 00  // ...........x0...
    76C0: 18 00 7E 00 18 00 00 76 DC 00 76 DC 00 00 7C C6  // ..~....v..v...|.
    76D0: C6 7C 00 00 00 00 00 00 00 18 18 00 00 00 00 00  // .|..............
    76E0: 00 00 18 00 00 00 1F 18 18 18 F8 38 18 00 D8 6C  // ...........8...l
    76F0: 6C 6C 00 00 00 00 70 D8 30 F8 00 00 00 00 00 00  // ll....p.0.......
    7700: 7C 7C 7C 7C 00 00 00 00 00 00 00 00 00 00 1D 00  // ||||............
    7710: 00 00 00 24 66 FF 66 24 00 00 00 00 00 00 00 10  // ...$f.f$........
    7720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7730: 00 00 00 7E 81 A5 81 81 BD 99 81 81 7E 00 00 00  // ...~........~...
    7740: 00 00 00 7C FE FE D6 FE FE BA C6 FE 7C 00 00 00  // ...|........|...
    7750: 00 00 00 00 6C EE FE FE FE FE 7C 38 10 00 00 00  // ....l.....|8....
    7760: 00 00 00 00 10 38 7C FE 7C 38 10 00 00 00 00 00  // .....8|.|8......
    7770: 00 00 00 00 10 38 38 10 6C EE 6C 10 38 00 00 00  // .....88.l.l.8...
    7780: 00 00 00 10 38 7C 7C FE FE FE 6C 10 38 00 00 00  // ....8||...l.8...
    7790: 00 00 00 00 00 00 18 3C 3C 3C 18 00 00 00 00 00  // .......<<<......
    77A0: 00 FF FF FF FF FF E7 C3 C3 C3 E7 FF FF FF FF FF  // ................
    77B0: FF 00 00 00 00 18 3C 66 66 66 3C 18 00 00 00 00  // ......<fff<.....
    77C0: 00 FF FF FF FF E7 C3 99 99 99 C3 E7 FF FF FF FF  // ................
    77D0: FF 00 00 1E 0E 1E 36 78 CC CC CC CC 78 00 00 00  // ......6x....x...
    77E0: 00 00 00 3C 66 66 66 3C 18 7E 18 18 18 00 00 00  // ...<fff<.~......
    77F0: 00 00 00 1E 1A 1E 18 18 18 18 78 F8 70 00 00 00  // ..........x.p...
    7800: 00 00 00 3E 36 3E 36 36 76 F6 66 0E 1E 0C 00 00  // ...>6>66v.f.....
    7810: 00 00 00 18 DB 7E 3C 66 66 3C 7E DB 18 00 00 00  // .....~<ff<~.....
    7820: 00 00 00 00 80 E0 F0 FC FE FC F0 E0 80 00 00 00  // ................
    7830: 00 00 00 00 02 0E 3E 7E FE 7E 3E 0E 02 00 00 00  // ......>~.~>.....
    7840: 00 00 00 18 3C 7E 18 18 18 18 7E 3C 18 00 00 00  // ....<~....~<....
    7850: 00 00 00 66 66 66 66 66 66 66 00 66 66 00 00 00  // ...fffffff.ff...
    7860: 00 00 00 7F DB DB DB DB 7B 1B 1B 1B 1B 00 00 00  // ........{.......
    7870: 00 00 00 7C C6 C6 60 7C F6 DE 7C 0C C6 C6 7C 00  // ...|..`|..|...|.
    7880: 00 00 00 00 00 00 00 00 00 FE FE FE FE 00 00 00  // ................
    7890: 00 00 00 18 3C 7E 18 18 18 7E 3C 18 7E 00 00 00  // ....<~...~<.~...
    78A0: 00 00 00 18 3C 7E 18 18 18 18 18 18 18 00 00 00  // ....<~..........
    78B0: 00 00 00 18 18 18 18 18 18 18 7E 3C 18 00 00 00  // ..........~<....
    78C0: 00 00 00 00 00 00 0C 0E FF 0E 0C 00 00 00 00 00  // ................
    78D0: 00 00 00 00 00 00 30 70 FE 70 30 00 00 00 00 00  // ......0p.p0.....
    78E0: 00 00 00 00 00 00 00 C0 C0 C0 FE 00 00 00 00 00  // ................
    78F0: 00 00 00 00 00 00 24 66 FF 66 24 00 00 00 00 00  // ......$f.f$.....
    7900: 00 00 00 00 10 38 38 38 7C 7C FE FE 00 00 00 00  // .....888||......
    7910: 00 00 00 00 FE FE 7C 7C 7C 38 38 10 00 00 00 00  // ......|||88.....
    7920: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7930: 00 00 00 18 3C 3C 3C 3C 18 18 00 18 18 00 00 00  // ....<<<<........
    7940: 00 00 36 36 36 36 14 00 00 00 00 00 00 00 00 00  // ..6666..........
    7950: 00 00 00 6C 6C 6C FE 6C 6C FE 6C 6C 6C 00 00 00  // ...lll.ll.lll...
    7960: 00 00 00 18 18 7C C6 C0 78 3C 06 C6 7C 18 18 00  // .....|..x<..|...
    7970: 00 00 00 00 00 00 62 66 0C 18 30 66 C6 00 00 00  // ......bf..0f....
    7980: 00 00 00 38 6C 38 30 76 7E CC CC CC 76 00 00 00  // ...8l80v~...v...
    7990: 00 00 0C 0C 0C 18 00 00 00 00 00 00 00 00 00 00  // ................
    79A0: 00 00 00 0C 18 30 30 30 30 30 30 18 0C 00 00 00  // .....000000.....
    79B0: 00 00 00 30 18 0C 0C 0C 0C 0C 0C 18 30 00 00 00  // ...0........0...
    79C0: 00 00 00 00 00 00 6C 38 FE 38 6C 00 00 00 00 00  // ......l8.8l.....
    79D0: 00 00 00 00 00 00 18 18 7E 18 18 00 00 00 00 00  // ........~.......
    79E0: 00 00 00 00 00 00 00 00 00 00 0C 0C 0C 18 00 00  // ................
    79F0: 00 00 00 00 00 00 00 00 FE 00 00 00 00 00 00 00  // ................
    7A00: 00 00 00 00 00 00 00 00 00 00 00 18 18 00 00 00  // ................
    7A10: 00 00 00 00 00 02 06 0C 18 30 60 C0 80 00 00 00  // .........0`.....
    7A20: 00 00 00 7C C6 C6 CE DE F6 E6 C6 C6 7C 00 00 00  // ...|........|...
    7A30: 00 00 00 18 78 18 18 18 18 18 18 18 7E 00 00 00  // ....x.......~...
    7A40: 00 00 00 7C C6 C6 06 0C 18 30 60 C6 FE 00 00 00  // ...|.....0`.....
    7A50: 00 00 00 7C C6 06 06 3C 06 06 06 C6 7C 00 00 00  // ...|...<....|...
    7A60: 00 00 00 0C 1C 3C 6C CC CC FE 0C 0C 1E 00 00 00  // .....<l.........
    7A70: 00 00 00 FE C0 C0 C0 FC 06 06 06 C6 7C 00 00 00  // ............|...
    7A80: 00 00 00 7C C6 C0 C0 FC C6 C6 C6 C6 7C 00 00 00  // ...|........|...
    7A90: 00 00 00 FE C6 06 0C 18 30 30 30 30 30 00 00 00  // ........00000...
    7AA0: 00 00 00 7C C6 C6 C6 7C C6 C6 C6 C6 7C 00 00 00  // ...|...|....|...
    7AB0: 00 00 00 7C C6 C6 C6 C6 7E 06 06 C6 7C 00 00 00  // ...|....~...|...
    7AC0: 00 00 00 00 00 00 0C 0C 00 00 0C 0C 00 00 00 00  // ................
    7AD0: 00 00 00 00 00 00 0C 0C 00 00 0C 0C 0C 18 00 00  // ................
    7AE0: 00 00 00 00 0C 18 30 60 C0 60 30 18 0C 00 00 00  // ......0`.`0.....
    7AF0: 00 00 00 00 00 00 00 FE 00 FE 00 00 00 00 00 00  // ................
    7B00: 00 00 00 00 60 30 18 0C 06 0C 18 30 60 00 00 00  // ....`0.....0`...
    7B10: 00 00 00 7C C6 C6 0C 18 18 18 00 18 18 00 00 00  // ...|............
    7B20: 00 00 00 7C C6 C6 C6 DE DE DE DC C0 7E 00 00 00  // ...|........~...
    7B30: 00 00 00 38 6C C6 C6 C6 FE C6 C6 C6 C6 00 00 00  // ...8l...........
    7B40: 00 00 00 FC 66 66 66 7C 66 66 66 66 FC 00 00 00  // ....fff|ffff....
    7B50: 00 00 00 3C 66 C2 C0 C0 C0 C0 C2 66 3C 00 00 00  // ...<f......f<...
    7B60: 00 00 00 F8 6C 66 66 66 66 66 66 6C F8 00 00 00  // ....lffffffl....
    7B70: 00 00 00 FE 66 60 64 7C 64 60 60 66 FE 00 00 00  // ....f`d|d``f....
    7B80: 00 00 00 FE 66 60 64 7C 64 60 60 60 F0 00 00 00  // ....f`d|d```....
    7B90: 00 00 00 7C C6 C6 C0 C0 C0 CE C6 C6 7C 00 00 00  // ...|........|...
    7BA0: 00 00 00 C6 C6 C6 C6 FE C6 C6 C6 C6 C6 00 00 00  // ................
    7BB0: 00 00 00 3C 18 18 18 18 18 18 18 18 3C 00 00 00  // ...<........<...
    7BC0: 00 00 00 3C 18 18 18 18 18 18 D8 D8 70 00 00 00  // ...<........p...
    7BD0: 00 00 00 C6 C6 CC D8 F0 F0 D8 CC C6 C6 00 00 00  // ................
    7BE0: 00 00 00 F0 60 60 60 60 60 60 62 66 FE 00 00 00  // ....``````bf....
    7BF0: 00 00 00 C6 C6 EE EE FE D6 D6 D6 C6 C6 00 00 00  // ................
    7C00: 00 00 00 C6 C6 E6 E6 F6 DE CE CE C6 C6 00 00 00  // ................
    7C10: 00 00 00 7C C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00  // ...|........|...
    7C20: 00 00 00 FC 66 66 66 66 7C 60 60 60 F0 00 00 00  // ....ffff|```....
    7C30: 00 00 00 7C C6 C6 C6 C6 C6 C6 D6 D6 7C 06 00 00  // ...|........|...
    7C40: 00 00 00 FC 66 66 66 7C 78 6C 66 66 E6 00 00 00  // ....fff|xlff....
    7C50: 00 00 00 7C C6 C0 C0 70 1C 06 06 C6 7C 00 00 00  // ...|...p....|...
    7C60: 00 00 00 7E 5A 18 18 18 18 18 18 18 3C 00 00 00  // ...~Z.......<...
    7C70: 00 00 00 C6 C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00  // ............|...
    7C80: 00 00 00 C6 C6 C6 C6 C6 C6 C6 6C 38 10 00 00 00  // ..........l8....
    7C90: 00 00 00 C6 C6 C6 D6 D6 D6 FE EE C6 C6 00 00 00  // ................
    7CA0: 00 00 00 C6 C6 C6 6C 38 38 6C C6 C6 C6 00 00 00  // ......l88l......
    7CB0: 00 00 00 66 66 66 66 66 3C 18 18 18 3C 00 00 00  // ...fffff<...<...
    7CC0: 00 00 00 FE C6 86 0C 18 30 60 C2 C6 FE 00 00 00  // ........0`......
    7CD0: 00 00 00 7C 60 60 60 60 60 60 60 60 7C 00 00 00  // ...|````````|...
    7CE0: 00 00 00 00 00 80 C0 60 30 18 0C 06 02 00 00 00  // .......`0.......
    7CF0: 00 00 00 7C 0C 0C 0C 0C 0C 0C 0C 0C 7C 00 00 00  // ...|........|...
    7D00: 00 00 10 38 6C C6 00 00 00 00 00 00 00 00 00 00  // ...8l...........
    7D10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF 00  // ................
    7D20: 00 00 18 18 18 0C 00 00 00 00 00 00 00 00 00 00  // ................
    7D30: 00 00 00 00 00 00 78 0C 7C CC CC DC 76 00 00 00  // ......x.|...v...
    7D40: 00 00 00 E0 60 60 7C 66 66 66 66 66 FC 00 00 00  // ....``|fffff....
    7D50: 00 00 00 00 00 00 7C C6 C0 C0 C0 C6 7C 00 00 00  // ......|.....|...
    7D60: 00 00 00 1C 0C 0C 7C CC CC CC CC CC 7E 00 00 00  // ......|.....~...
    7D70: 00 00 00 00 00 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ......|.....|...
    7D80: 00 00 00 1C 36 30 30 FC 30 30 30 30 78 00 00 00  // ....600.0000x...
    7D90: 00 00 00 00 00 00 76 CE C6 C6 CE 76 06 C6 7C 00  // ......v....v..|.
    7DA0: 00 00 00 E0 60 60 7C 66 66 66 66 66 E6 00 00 00  // ....``|fffff....
    7DB0: 00 00 00 18 18 00 38 18 18 18 18 18 3C 00 00 00  // ......8.....<...
    7DC0: 00 00 00 0C 0C 00 1C 0C 0C 0C 0C 0C CC CC 78 00  // ..............x.
    7DD0: 00 00 00 E0 60 60 66 66 6C 78 6C 66 E6 00 00 00  // ....``fflxlf....
    7DE0: 00 00 00 18 18 18 18 18 18 18 18 18 1C 00 00 00  // ................
    7DF0: 00 00 00 00 00 00 6C FE D6 D6 C6 C6 C6 00 00 00  // ......l.........
    7E00: 00 00 00 00 00 00 DC 66 66 66 66 66 66 00 00 00  // .......ffffff...
    7E10: 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ......|.....|...
    7E20: 00 00 00 00 00 00 DC 66 66 66 66 7C 60 60 F0 00  // .......ffff|``..
    7E30: 00 00 00 00 00 00 76 CC CC CC CC 7C 0C 0C 1E 00  // ......v....|....
    7E40: 00 00 00 00 00 00 DC 66 60 60 60 60 F0 00 00 00  // .......f````....
    7E50: 00 00 00 00 00 00 7C C6 C0 7C 06 C6 7C 00 00 00  // ......|..|..|...
    7E60: 00 00 00 30 30 30 FC 30 30 30 30 36 1C 00 00 00  // ...000.00006....
    7E70: 00 00 00 00 00 00 CC CC CC CC CC CC 76 00 00 00  // ............v...
    7E80: 00 00 00 00 00 00 C6 C6 C6 C6 6C 38 10 00 00 00  // ..........l8....
    7E90: 00 00 00 00 00 00 C6 C6 D6 D6 D6 FE 6C 00 00 00  // ............l...
    7EA0: 00 00 00 00 00 00 C6 C6 6C 38 6C C6 C6 00 00 00  // ........l8l.....
    7EB0: 00 00 00 00 00 00 C6 C6 C6 C6 CE 76 06 C6 7C 00  // ...........v..|.
    7EC0: 00 00 00 00 00 00 FE 86 0C 18 30 62 FE 00 00 00  // ..........0b....
    7ED0: 00 00 00 0E 18 18 18 70 18 18 18 18 0E 00 00 00  // .......p........
    7EE0: 00 00 00 18 18 18 18 00 18 18 18 18 18 00 00 00  // ................
    7EF0: 00 00 00 70 18 18 18 0E 18 18 18 18 70 00 00 00  // ...p........p...
    7F00: 00 00 00 76 DC 00 00 00 00 00 00 00 00 00 00 00  // ...v............
    7F10: 00 00 00 00 00 00 10 38 38 6C 6C FE 00 00 00 00  // .......88ll.....
    7F20: 00 00 00 3C 66 C0 C0 C0 C6 66 3C 18 0C CC 38 00  // ...<f....f<...8.
    7F30: 00 00 00 C6 00 00 C6 C6 C6 C6 C6 CE 76 00 00 00  // ............v...
    7F40: 00 00 0C 18 30 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ....0.|.....|...
    7F50: 00 00 30 78 CC 00 78 0C 7C CC CC DC 76 00 00 00  // ..0x..x.|...v...
    7F60: 00 00 00 CC 00 00 78 0C 7C CC CC DC 76 00 00 00  // ......x.|...v...
    7F70: 00 00 60 30 18 00 78 0C 7C CC CC DC 76 00 00 00  // ..`0..x.|...v...
    7F80: 00 00 38 6C 38 00 78 0C 7C CC CC DC 76 00 00 00  // ..8l8.x.|...v...
    7F90: 00 00 00 00 00 7C C6 C0 C0 C6 7C 18 0C 6C 38 00  // .....|....|..l8.
    7FA0: 00 00 30 78 CC 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ..0x..|.....|...
    7FB0: 00 00 00 CC 00 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ......|.....|...
    7FC0: 00 00 30 18 0C 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ..0...|.....|...
    7FD0: 00 00 00 66 00 00 38 18 18 18 18 18 3C 00 00 00  // ...f..8.....<...
    7FE0: 00 00 18 3C 66 00 38 18 18 18 18 18 3C 00 00 00  // ...<f.8.....<...
    7FF0: 00 00 00 00 00 00 38 18 18 18 18 18 3C 00 00 00  // ......8.....<...
    8000: 00 00 C6 00 38 6C C6 C6 C6 FE C6 C6 C6 00 00 00  // ....8l..........
    8010: 00 38 6C 38 00 38 6C C6 C6 FE C6 C6 C6 00 00 00  // .8l8.8l.........
    8020: 00 0C 18 30 00 FE 60 60 7C 60 60 60 FE 00 00 00  // ...0..``|```....
    8030: 00 00 00 00 00 66 DB 1B 7F D8 D8 DF 76 00 00 00  // .....f......v...
    8040: 00 00 00 7E D8 D8 D8 D8 FE D8 D8 D8 DE 00 00 00  // ...~............
    8050: 00 00 30 78 CC 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ..0x..|.....|...
    8060: 00 00 00 C6 00 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ......|.....|...
    8070: 00 00 30 18 0C 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ..0...|.....|...
    8080: 00 00 30 78 CC 00 C6 C6 C6 C6 C6 CE 76 00 00 00  // ..0x........v...
    8090: 00 00 60 30 18 00 C6 C6 C6 C6 C6 CE 76 00 00 00  // ..`0........v...
    80A0: 00 00 18 00 3C 18 18 18 18 18 18 18 3C 00 00 00  // ....<.......<...
    80B0: 00 00 C6 00 7C C6 C6 C6 C6 C6 C6 C6 7C 00 00 00  // ....|.......|...
    80C0: 00 00 C6 00 C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00  // ............|...
    80D0: 00 00 00 18 18 7C C6 C0 C0 C6 7C 18 18 00 00 00  // .....|....|.....
    80E0: 00 00 38 6C 60 60 F0 60 60 60 66 F6 6C 00 00 00  // ..8l``.```f.l...
    80F0: 00 00 66 66 66 66 3C 18 7E 18 3C 18 18 00 00 00  // ..ffff<.~.<.....
    8100: 00 00 00 3E 63 63 30 1C 06 63 63 3E 00 1C 00 00  // ...>cc0..cc>....
    8110: 00 00 00 00 00 00 3E 63 38 0E 63 3E 00 1C 00 00  // ......>c8.c>....
    8120: 00 00 0C 18 30 00 78 0C 7C CC CC DC 76 00 00 00  // ....0.x.|...v...
    8130: 00 00 0C 18 30 00 38 18 18 18 18 18 3C 00 00 00  // ....0.8.....<...
    8140: 00 00 0C 18 30 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ....0.|.....|...
    8150: 00 00 18 30 60 00 CC CC CC CC CC DC 76 00 00 00  // ...0`.......v...
    8160: 00 00 00 76 DC 00 BC 66 66 66 66 66 E6 00 00 00  // ...v...fffff....
    8170: 00 00 76 DC 00 C6 C6 E6 F6 DE CE C6 C6 00 00 00  // ..v.............
    8180: 00 00 21 1E 00 1E 33 60 60 67 63 33 1D 00 00 00  // ..!...3``gc3....
    8190: 00 00 42 3C 00 3B 66 66 66 3E 06 66 3C 00 00 00  // ..B<.;fff>.f<...
    81A0: 00 00 00 30 30 00 30 30 30 60 C6 C6 7C 00 00 00  // ...00.000`..|...
    81B0: 00 00 00 00 00 00 00 00 7E 60 60 60 00 00 00 00  // ........~```....
    81C0: 00 00 00 00 00 00 00 00 7E 06 06 06 00 00 00 00  // ........~.......
    81D0: 00 00 60 60 62 66 6C 18 30 60 DC 36 0C 18 3E 00  // ..``bfl.0`.6..>.
    81E0: 00 00 60 60 62 66 6C 18 36 6E DE 36 7E 06 06 00  // ..``bfl.6n.6~...
    81F0: 00 00 00 18 18 00 18 18 3C 3C 3C 3C 18 00 00 00  // ........<<<<....
    8200: 00 00 00 00 00 00 36 6C D8 6C 36 00 00 00 00 00  // ......6l.l6.....
    8210: 00 00 00 00 00 00 D8 6C 36 6C D8 00 00 00 00 00  // .......l6l......
    8220: 00 11 44 11 44 11 44 11 44 11 44 11 44 11 44 11  // ..D.D.D.D.D.D.D.
    8230: 44 AA 55 AA 55 AA 55 AA 55 AA 55 AA 55 AA 55 AA  // D.U.U.U.U.U.U.U.
    8240: 55 DD 77 DD 77 DD 77 DD 77 DD 77 DD 77 DD 77 DD  // U.w.w.w.w.w.w.w.
    8250: 77 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // w...............
    8260: 18 18 18 18 18 18 18 18 F8 18 18 18 18 18 18 18  // ................
    8270: 18 18 18 18 18 18 F8 18 F8 18 18 18 18 18 18 18  // ................
    8280: 18 36 36 36 36 36 36 36 F6 36 36 36 36 36 36 36  // .6666666.6666666
    8290: 36 00 00 00 00 00 00 00 FE 36 36 36 36 36 36 36  // 6........6666666
    82A0: 36 00 00 00 00 00 F8 18 F8 18 18 18 18 18 18 18  // 6...............
    82B0: 18 36 36 36 36 36 F6 06 F6 36 36 36 36 36 36 36  // .66666...6666666
    82C0: 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  // 6666666666666666
    82D0: 36 00 00 00 00 00 FE 06 F6 36 36 36 36 36 36 36  // 6........6666666
    82E0: 36 36 36 36 36 36 F6 06 FE 00 00 00 00 00 00 00  // 666666..........
    82F0: 00 36 36 36 36 36 36 36 FE 00 00 00 00 00 00 00  // .6666666........
    8300: 00 18 18 18 18 18 F8 18 F8 00 00 00 00 00 00 00  // ................
    8310: 00 00 00 00 00 00 00 00 F8 18 18 18 18 18 18 18  // ................
    8320: 18 18 18 18 18 18 18 18 1F 00 00 00 00 00 00 00  // ................
    8330: 00 18 18 18 18 18 18 18 FF 00 00 00 00 00 00 00  // ................
    8340: 00 00 00 00 00 00 00 00 FF 18 18 18 18 18 18 18  // ................
    8350: 18 18 18 18 18 18 18 18 1F 18 18 18 18 18 18 18  // ................
    8360: 18 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    8370: 00 18 18 18 18 18 18 18 FF 18 18 18 18 18 18 18  // ................
    8380: 18 18 18 18 18 18 1F 18 1F 18 18 18 18 18 18 18  // ................
    8390: 18 36 36 36 36 36 36 36 37 36 36 36 36 36 36 36  // .666666676666666
    83A0: 36 36 36 36 36 36 37 30 3F 00 00 00 00 00 00 00  // 66666670?.......
    83B0: 00 00 00 00 00 00 3F 30 37 36 36 36 36 36 36 36  // ......?076666666
    83C0: 36 36 36 36 36 36 F7 00 FF 00 00 00 00 00 00 00  // 666666..........
    83D0: 00 00 00 00 00 00 FF 00 F7 36 36 36 36 36 36 36  // .........6666666
    83E0: 36 36 36 36 36 36 37 30 37 36 36 36 36 36 36 36  // 6666667076666666
    83F0: 36 00 00 00 00 00 FF 00 FF 00 00 00 00 00 00 00  // 6...............
    8400: 00 36 36 36 36 36 F7 00 F7 36 36 36 36 36 36 36  // .66666...6666666
    8410: 36 18 18 18 18 18 FF 00 FF 00 00 00 00 00 00 00  // 6...............
    8420: 00 36 36 36 36 36 36 36 FF 00 00 00 00 00 00 00  // .6666666........
    8430: 00 00 00 00 00 00 FF 00 FF 18 18 18 18 18 18 18  // ................
    8440: 18 00 00 00 00 00 00 00 FF 36 36 36 36 36 36 36  // .........6666666
    8450: 36 36 36 36 36 36 36 36 3F 00 00 00 00 00 00 00  // 66666666?.......
    8460: 00 18 18 18 18 18 1F 18 1F 00 00 00 00 00 00 00  // ................
    8470: 00 00 00 00 00 00 1F 18 1F 18 18 18 18 18 18 18  // ................
    8480: 18 00 00 00 00 00 00 00 3F 36 36 36 36 36 36 36  // ........?6666666
    8490: 36 36 36 36 36 36 36 36 FF 36 36 36 36 36 36 36  // 66666666.6666666
    84A0: 36 18 18 18 18 18 FF 18 FF 18 18 18 18 18 18 18  // 6...............
    84B0: 18 18 18 18 18 18 18 18 F8 00 00 00 00 00 00 00  // ................
    84C0: 00 00 00 00 00 00 00 00 1F 18 18 18 18 18 18 18  // ................
    84D0: 18 FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    84E0: FF 00 00 00 00 00 00 00 00 FF FF FF FF FF FF FF  // ................
    84F0: FF F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0  // ................
    8500: F0 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F  // ................
    8510: 0F FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00  // ................
    8520: 00 00 00 00 00 76 DC D8 D8 D8 D8 DC 76 00 00 00  // .....v......v...
    8530: 00 00 00 78 CC CC D8 FC C6 C6 C6 C6 CC 00 00 00  // ...x............
    8540: 00 00 00 FE 66 62 60 60 60 60 60 60 60 00 00 00  // ....fb```````...
    8550: 00 00 00 00 00 00 FE 6C 6C 6C 6C 6C 6C 00 00 00  // .......llllll...
    8560: 00 00 00 FE C6 62 30 18 18 30 62 C6 FE 00 00 00  // .....b0..0b.....
    8570: 00 00 00 00 00 00 7E D8 CC CC CC D8 70 00 00 00  // ......~.....p...
    8580: 00 00 00 00 00 66 66 66 66 66 7C 60 C0 80 00 00  // .....fffff|`....
    8590: 00 00 00 00 00 00 76 DC 18 18 18 18 18 00 00 00  // ......v.........
    85A0: 00 00 00 FE 38 38 6C C6 C6 6C 38 38 FE 00 00 00  // ....88l..l88....
    85B0: 00 00 00 00 38 6C C6 C6 FE C6 C6 6C 38 00 00 00  // ....8l.....l8...
    85C0: 00 00 00 38 6C C6 C6 C6 C6 6C 6C 6C EE 00 00 00  // ...8l....lll....
    85D0: 00 00 00 3E 60 60 3C 66 C6 C6 C6 CC 78 00 00 00  // ...>``<f....x...
    85E0: 00 00 00 00 00 00 7E DB DB DB 7E 00 00 00 00 00  // ......~...~.....
    85F0: 00 00 00 02 06 7C CE DE F6 F6 7C 60 C0 00 00 00  // .....|....|`....
    8600: 00 00 00 00 1C 30 60 60 7C 60 60 30 1C 00 00 00  // .....0``|``0....
    8610: 00 00 00 7C C6 C6 C6 C6 C6 C6 C6 C6 C6 00 00 00  // ...|............
    8620: 00 00 00 00 00 FE 00 00 FE 00 00 FE 00 00 00 00  // ................
    8630: 00 00 00 00 00 18 18 7E 18 18 00 00 7E 00 00 00  // .......~....~...
    8640: 00 00 00 30 18 0C 06 0C 18 30 00 00 7E 00 00 00  // ...0.....0..~...
    8650: 00 00 00 0C 18 30 60 30 18 0C 00 00 7E 00 00 00  // .....0`0....~...
    8660: 00 00 00 00 00 0C 1E 1A 18 18 18 18 18 18 18 18  // ................
    8670: 18 18 18 18 18 18 18 18 18 18 18 58 78 30 00 00  // ...........Xx0..
    8680: 00 00 00 00 00 18 18 00 7E 00 18 18 00 00 00 00  // ........~.......
    8690: 00 00 00 00 00 00 00 76 DC 00 76 DC 00 00 00 00  // .......v..v.....
    86A0: 00 00 00 78 CC CC 78 00 00 00 00 00 00 00 00 00  // ...x..x.........
    86B0: 00 00 00 00 00 00 00 00 18 18 00 00 00 00 00 00  // ................
    86C0: 00 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00  // ................
    86D0: 00 00 00 1F 18 18 18 18 18 D8 D8 78 38 18 00 00  // ...........x8...
    86E0: 00 00 00 D8 6C 6C 6C 6C 6C 00 00 00 00 00 00 00  // ....lllll.......
    86F0: 00 00 00 70 D8 18 30 60 F8 00 00 00 00 00 00 00  // ...p..0`........
    8700: 00 00 00 00 00 00 7E 7E 7E 7E 7E 7E 00 00 00 00  // ......~~~~~~....
    8710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    8720: 00 1D 00 00 00 00 00 24 66 FF 66 24 00 00 00 00  // .......$f.f$....
    8730: 00 00 2F 00 00 00 01 03 06 0C 18 30 60 C0 80 00  // ../........0`...
    8740: 00 00 00 30 00 00 7E C3 C3 C3 DB DB C3 C3 C3 7E  // ...0..~........~
    8750: 00 00 00 00 4D 00 00 C3 C3 E7 FF FF DB DB C3 C3  // ....M...........
    8760: C3 00 00 00 00 54 00 00 FF 99 18 18 18 18 18 18  // .....T..........
    8770: 18 3C 00 00 00 00 56 00 00 C3 C3 C3 C3 C3 C3 C3  // .<....V.........
    8780: 66 3C 18 00 00 00 00 57 00 00 C3 C3 C3 C3 DB DB  // f<.....W........
    8790: DB DB FF 66 00 00 00 00 58 00 00 C3 C3 C3 66 3C  // ...f....X.....f<
    87A0: 3C 66 C3 C3 C3 00 00 00 00 59 00 00 C3 C3 C3 C3  // <f.......Y......
    87B0: 66 3C 18 18 18 3C 00 00 00 00 5C 00 00 00 80 C0  // f<...<....\.....
    87C0: 60 30 18 0C 06 03 01 00 00 00 00 6D 00 00 00 00  // `0.........m....
    87D0: 00 66 FF DB DB DB C3 C3 00 00 00 00 76 00 00 00  // .f..........v...
    87E0: 00 00 C3 C3 C3 C3 66 3C 18 00 00 00 00 77 00 00  // ......f<.....w..
    87F0: 00 00 00 C3 C3 DB DB DB FF 66 00 00 00 00 00 00  // .........f......
    8800: B9 76 C3 0B DB 74 03 E9 46 01 57 32 C0 B9 40 00  // .v...t..F.W2..@.
    8810: F3 AA 5F BB 86 A4 26 89 1D 26 8C 4D 02 2E 8E 1E  // .._...&..&.M....
    8820: 53 2A 57 BE 49 04 B9 1E 00 83 C7 04 FC 8A 04 26  // S*W.I..........&
    8830: 88 05 46 47 E2 F7 5F A0 84 04 FE C0 26 88 45 22  // ..FG.._.....&.E"
    8840: A1 85 04 26 89 45 23 57 E8 D9 1B 5F 26 88 5D 25  // ...&.E#W..._&.]%
    8850: 26 88 7D 26 8A 1E 49 04 E8 FC 05 74 05 80 FB 13  // &.}&..I....t....
    8860: 7F 1D 32 FF D1 E3 2E 8A 87 5E A4 32 E4 0A C0 74  // ..2......^.2...t
    8870: 01 40 26 89 45 27 2E 8A 87 5F A4 26 88 45 29 A1  // .@&.E'..._.&.E).
    8880: 85 04 8A 16 84 04 FE C2 F6 E2 B2 00 3D C8 00 7E  // ............=..~
    8890: 15 B2 01 3D 5E 01 7E 0E B2 02 3D 90 01 7E 07 B2  // ...=^.~...=..~..
    88A0: 03 3D E0 01 7E 00 26 88 55 2A 8A 26 87 04 8A C4  // .=..~.&.U*.&....
    88B0: 24 01 C0 E0 04 80 E4 02 D0 E4 0A E0 80 F4 10 A0  // $...............
    88C0: 89 04 24 0A 0A E0 E8 94 08 B2 C0 B0 30 EE 42 EC  // ..$.........0.B.
    88D0: 24 08 C0 E0 02 0A C4 0C 01 26 88 45 2D B0 03 26  // $........&.E-..&
    88E0: 88 45 31 E8 77 08 1E 06 32 D2 C4 1E A8 04 8C C1  // .E1.w...2.......
    88F0: 8C CE 3B CE 74 34 26 C5 77 04 8C D9 0B F1 74 03  // ..;.t4&.w.....t.
    8900: 80 CA 10 26 C5 77 0C 8C D9 0B F1 74 03 80 CA 08  // ...&.w.....t....
    8910: 26 C5 77 08 8C D9 0B F1 74 03 80 CA 04 26 C5 77  // &.w.....t....&.w
    8920: 10 8C D9 0B F1 74 03 80 CA 01 07 1F 26 88 55 32  // .....t......&.U2
    8930: B0 03 BA C4 03 E8 E4 04 8A E0 C0 EC 02 8A D4 8A  // ................
    8940: F2 D0 EE 81 E2 04 04 25 03 03 0B C2 26 89 45 2B  // .......%....&.E+
    8950: 8B EC C6 46 1A 1B C3 0A C0 74 0F FE C8 74 36 FE  // ...F.....t...t6.
    8960: C8 74 56 8B EC C6 46 1A 00 C3 B8 20 00 F6 C1 01  // .tV...F.... ....
    8970: 74 03 83 C0 60 F6 C1 02 74 03 83 C0 3A F6 C1 04  // t...`...t...:...
    8980: 74 03 05 03 03 83 C0 3F C1 E8 06 8B EC 89 46 0E  // t......?......F.
    8990: C6 46 1A 1C C3 8B FB 83 C7 20 F6 C1 01 74 03 E8  // .F....... ...t..
    89A0: 85 00 F6 C1 02 74 03 E8 EF 00 F6 C1 04 74 03 E8  // .....t.......t..
    89B0: F8 01 8B EC C6 46 1A 1C C3 F6 C1 01 74 06 E8 16  // .....F......t...
    89C0: 15 E8 25 01 F6 C1 02 74 03 E8 85 01 F6 C1 04 74  // ..%....t.......t
    89D0: 03 E8 12 02 EB DC 8A C4 EE 42 EC AA FE C4 4A E2  // .........B....J.
    89E0: F5 C3 E8 6B 04 BD C0 03 B9 15 00 32 E4 EC 87 EA  // ...k.......2....
    89F0: 8A C4 EE 42 EC AA FE C4 4A 87 EA E2 F0 EC 87 EA  // ...B....J.......
    8A00: B0 20 EE C3 26 8A 05 88 04 47 46 E2 F7 C3 26 8A  // . ..&....GF...&.
    8A10: 25 EF 47 FE C0 E2 F7 C3 B2 C0 8A C4 EE 26 8A 05  // %.G..........&..
    8A20: 47 FE C4 EE E2 F4 C3 9C FA 51 57 8B C7 2B C3 26  // G........QW..+.&
    8A30: 89 07 8B F7 E8 0A 04 EC 26 88 44 01 26 89 54 41  // ........&.D.&.TA
    8A40: B2 CE EC 26 88 44 02 B2 CC EC 26 88 44 09 B2 CA  // ...&.D....&.D...
    8A50: EC 26 88 44 04 B2 C4 EC 26 88 04 83 C7 05 B9 04  // .&.D....&.......
    8A60: 00 B4 01 E8 70 FF 26 8A 04 EE 8B FE 83 C7 0A 26  // ....p.&........&
    8A70: 8B 54 41 32 E4 B9 19 00 E8 5B FF 26 8A 44 01 EE  // .TA2.....[.&.D..
    8A80: E8 5F FF B2 CE 32 E4 B9 09 00 E8 49 FF 26 8A 44  // ._...2.....I.&.D
    8A90: 02 EE 5F 59 83 C7 60 9D C3 9C FA 8B C7 2B C3 26  // .._Y..`......+.&
    8AA0: 89 47 02 51 57 2E 8E 1E 53 2A A0 10 04 24 30 AA  // .G.QW...S*...$0.
    8AB0: BE 49 04 B9 1E 00 F3 A4 BE 84 04 B1 07 F3 A4 BE  // .I..............
    8AC0: A8 04 B1 04 F3 A4 BE 14 00 B1 04 F3 A4 BE 74 00  // ..............t.
    8AD0: B1 04 F3 A4 BE 7C 00 B1 04 F3 A4 BE 0C 01 B1 04  // .....|..........
    8AE0: F3 A4 5F 59 83 C7 3A 9D C3 9C FA 26 8B 3F 03 FB  // .._Y..:....&.?..
    8AF0: 8B F7 51 8B FE 83 C7 05 BA C4 03 B8 00 01 EF B0  // ..Q.............
    8B00: 01 B9 04 00 E8 07 FF 47 B2 C2 26 8A 44 09 EE B2  // .......G..&.D...
    8B10: C4 B8 00 03 EF 26 8A 04 EE 26 8B 54 41 B8 11 00  // .....&...&.TA...
    8B20: EF B1 19 32 C0 E8 E6 FE 26 8A 44 01 EE 80 C2 06  // ...2....&.D.....
    8B30: 26 8A 44 04 EE EC B1 15 32 E4 E8 DB FE B0 20 EE  // &.D.....2..... .
    8B40: B1 09 32 C0 B2 CE E8 C5 FE 26 8A 44 02 EE 59 9D  // ..2......&.D..Y.
    8B50: C3 9C FA 26 8B 7F 02 03 FB 06 51 2E 8E 1E 53 2A  // ...&......Q...S*
    8B60: 26 8A 05 80 26 10 04 CF 08 06 10 04 47 BE 49 04  // &...&.......G.I.
    8B70: B9 1E 00 E8 8E FE BE 84 04 B1 07 E8 86 FE BE A8  // ................
    8B80: 04 B1 04 E8 7E FE BE 14 00 B1 04 E8 76 FE BE 74  // ....~.......v..t
    8B90: 00 B1 04 E8 6E FE BE 7C 00 B1 04 E8 66 FE BE 0C  // ....n..|....f...
    8BA0: 01 B1 04 E8 5E FE 59 07 9D C3 9C FA 8B C7 2B C3  // ....^.Y.......+.
    8BB0: 26 89 47 04 E8 A6 05 B2 C0 B0 34 EE 42 EC 26 88  // &.G.......4.B.&.
    8BC0: 05 BA C8 03 EC 26 88 45 01 50 4A 4A EC 26 88 45  // .....&.E.PJJ.&.E
    8BD0: 02 83 C7 03 B9 00 03 42 32 C0 EE 42 42 EC AA E2  // .......B2..BB...
    8BE0: FC 58 4A EE 9D C3 9C FA 26 8B 77 04 03 F3 E8 6C  // .XJ.....&.w....l
    8BF0: 05 B2 C0 B0 34 EE 26 8A 04 EE BA C6 03 26 8A 44  // ....4.&......&.D
    8C00: 02 EE 56 42 42 83 C6 03 32 C0 EE 42 B9 00 03 26  // ..VBB...2..B...&
    8C10: 8A 04 EE 46 E2 F9 5E FE CA 26 8A 44 01 EE 9D C3  // ...F..^..&.D....
    8C20: BA CC 03 EC 24 FE 0A C4 B2 C2 EE C3 E8 A8 12 B2  // ....$...........
    8C30: C0 86 C4 EE EB 00 EB 00 86 C4 EE EB 00 EB 00 B0  // ................
    8C40: 20 EE C3 50 8A E0 80 E4 80 80 26 87 04 7F 08 26  //  ..P......&....&
    8C50: 87 04 24 7F 8A E0 3C 07 7E 1E 26 F6 47 33 01 75  // ..$...<.~.&.G3.u
    8C60: 17 3C 23 74 13 3C 32 74 0F 3C 33 74 0B B4 03 26  // .<#t.<2t.<3t...&
    8C70: F6 47 09 01 75 02 B4 07 88 26 49 04 BA B4 03 80  // .G..u....&I.....
    8C80: 0E 87 04 02 26 F6 47 09 01 74 07 B2 D4 80 26 87  // ....&.G..t....&.
    8C90: 04 FD 89 16 63 04 C7 06 4E 04 00 00 C6 06 62 04  // ....c...N.....b.
    8CA0: 00 B9 08 00 BF 50 04 FC 06 1E 07 33 C0 F3 AB 07  // .....P.....3....
    8CB0: 26 8A 07 32 E4 A3 4A 04 26 8A 47 01 A2 84 04 26  // &..2..J.&.G....&
    8CC0: 8A 47 02 A3 85 04 26 8B 47 03 A3 4C 04 26 8B 47  // .G....&.G..L.&.G
    8CD0: 14 86 C4 A3 60 04 58 C3 52 32 E4 33 D2 B0 0D CD  // ....`.X.R2.3....
    8CE0: 17 F6 C4 29 75 08 32 E4 33 D2 B0 0A CD 17 5A C3  // ...)u.2.3.....Z.
    8CF0: 06 1E 60 2E 8E 1E 53 2A 2E 83 0E 5D 2A 00 75 6E  // ..`...S*...]*.un
    8D00: 80 3E 00 05 01 74 67 C6 06 00 05 01 8A 1E 62 04  // .>...tg.......b.
    8D10: 32 FF D1 E3 8B FB 8B 85 50 04 8A 3E 62 04 50 32  // 2.......P..>b.P2
    8D20: F6 8A 0E 84 04 32 ED 41 51 8B 0E 4A 04 32 D2 E8  // .....2.AQ..J.2..
    8D30: A6 FF F6 C4 29 75 3D 51 52 89 95 50 04 B4 08 E8  // ....)u=QR..P....
    8D40: B0 D4 0A C0 75 02 B0 20 33 D2 32 E4 CD 17 F6 C4  // ....u.. 3.2.....
    8D50: 29 75 1F 5A FE C2 59 E2 DE FE C6 59 E2 CA E8 77  // )u.Z..Y....Y...w
    8D60: FF 32 C0 A2 00 05 58 89 85 50 04 E8 AF 03 61 1F  // .2....X..P....a.
    8D70: 07 CF 5A 59 59 B0 FF EB EA 52 2A F5 38 C6 7D 02  // ..ZYY....R*.8.}.
    8D80: 32 C0 2E 8E 06 55 2A 5A C3 A0 85 04 F6 E3 8A F7  // 2....U*Z........
    8D90: 8B D8 8B CA BA C4 03 B8 02 0F EF B4 02 E8 6D 00  // ..............m.
    8DA0: 8B D1 32 ED 8A E6 8A C6 F3 AA 03 FD 8A CA 4B 75  // ..2...........Ku
    8DB0: F7 32 E4 E8 57 00 C3 53 8A 1E 62 04 0B C0 75 04  // .2..W..S..b...u.
    8DC0: 0A DB 74 03 E8 35 03 5B 8B F8 2B D1 81 C2 01 01  // ..t..5.[..+.....
    8DD0: 8A C3 32 E4 C3 8A C6 32 F6 2B EA 0A DB 74 2A 2A  // ..2....2.+...t**
    8DE0: C3 F6 26 85 04 8B C8 52 B4 01 E8 20 00 B2 C4 B8  // ..&....R... ....
    8DF0: 02 0F EF 5A 1E 06 1F 8B C1 8B CA F3 A4 03 F5 03  // ...Z............
    8E00: FD 48 75 F5 1F E8 81 FF C3 8A D8 EB F8 BA CE 03  // .Hu.............
    8E10: B0 05 EE 42 EC 24 FC 0A C4 EE 4A C3 9C FA EE 42  // ...B.$....J....B
    8E20: EB 00 EC 4A 9D C3 1E 2E 8E 1E 53 2A 8B 16 63 04  // ...J......S*..c.
    8E30: 80 C2 06 1F C3 1E 2E 8E 1E 53 2A 8B 16 63 04 1F  // .........S*..c..
    8E40: C3 50 BA CC 03 EC B2 D4 A8 01 75 02 B2 B4 58 C3  // .P........u...X.
    8E50: E8 EE FF 80 C2 06 C3 1E 2E 8E 1E 53 2A 80 3E 49  // ...........S*.>I
    8E60: 04 03 74 13 80 3E 49 04 02 74 0C 80 3E 49 04 01  // ..t..>I..t..>I..
    8E70: 74 05 80 3E 49 04 00 1F C3 50 2E 8E 06 57 2A A0  // t..>I....P...W*.
    8E80: 10 04 24 30 3C 30 74 05 2E 8E 06 59 2A 58 0B C0  // ..$0<0t....Y*X..
    8E90: 74 03 E8 E1 01 03 06 4E 04 81 C2 01 01 2B D1 32  // t......N.....+.2
    8EA0: ED 8B 2E 4A 04 8B F8 8B F0 8B C5 F6 E3 D1 E0 D1  // ...J............
    8EB0: E5 0A DB 75 02 8A DE 38 F3 7E 02 8A DE C3 FC 8A  // ...u...8.~......
    8EC0: D8 8B C1 E8 B3 FF 03 F0 3A 16 4A 04 74 06 06 1F  // ........:.J.t...
    8ED0: E8 1B 00 C3 06 1F E8 40 00 C3 FC 8A D8 8A C1 8A  // .......@........
    8EE0: E6 E8 95 FF F7 DD 2B F0 06 1F E8 01 00 C3 53 8A  // ......+.......S.
    8EF0: CE 2A CB 32 ED 32 F6 2B EA 2B EA E3 0E 8A E1 8B  // .*.2.2.+.+......
    8F00: CA F3 A5 03 F5 03 FD FE CC 75 F4 58 B0 20 8A CA  // .........u.X. ..
    8F10: F3 AB 03 FD FE CB 75 F6 C3 53 8A C6 2A C3 74 06  // ......u..S..*.t.
    8F20: F6 E2 8B C8 F3 A5 58 8B C8 F6 E2 91 B0 20 F3 AB  // ......X...... ..
    8F30: C3 8B D8 E8 2E 00 2E 8E 1E 59 2A 8A C3 22 DF D3  // .........Y*.."..
    8F40: E3 A8 80 74 03 30 1C C3 F6 D7 8A 34 22 F7 0A DE  // ...t.0.....4"...
    8F50: 88 1C C3 8A FC E8 0C 00 2E 8E 1E 59 2A 8A 04 D2  // ...........Y*...
    8F60: E8 22 C7 C3 B0 28 F6 E2 F6 C2 01 74 03 05 D8 1F  // ."...(.....t....
    8F70: 8B F1 C1 EE 02 80 FF 05 7F 0C 03 F0 F6 D1 80 E1  // ................
    8F80: 03 D0 E1 B7 03 C3 D1 EE 03 F0 F6 D1 80 E1 07 B7  // ................
    8F90: 01 C3 FC 8A D8 2E 8E 06 59 2A 8B C1 E8 86 00 75  // ........Y*.....u
    8FA0: 02 8A DE 03 F0 E8 24 00 C3 FC 8A D8 2E 8E 06 59  // ......$........Y
    8FB0: 2A 8A C1 8A E6 E8 6D 00 75 02 8A DE F7 DD 81 C6  // *.....m.u.......
    8FC0: F0 00 81 C7 F0 00 2B F0 E8 01 00 C3 8A CE 2A CB  // ......+.......*.
    8FD0: E3 2C 51 8A CA 56 57 D1 E9 F3 A5 13 C9 F3 A4 8A  // .,Q..VW.........
    8FE0: CA 2B F1 2B F9 81 C6 00 20 81 C7 00 20 D1 E9 F3  // .+.+.... ... ...
    8FF0: A5 13 C9 F3 A4 5F 5E 03 F5 03 FD 59 E2 D4 8A C7  // ....._^....Y....
    9000: 8A E7 8A CA 57 D1 E9 F3 AB 13 C9 F3 AA 8A CA 2B  // ....W..........+
    9010: F9 81 C7 00 20 D1 E9 F3 AB 13 C9 F3 AA 5F 03 FD  // .... ........_..
    9020: FE CB 75 DE C3 E8 B0 00 81 C2 01 01 2B D1 38 F3  // ..u.........+.8.
    9030: 76 02 32 DB 51 B1 02 D2 E6 D2 E3 59 32 ED BD 50  // v.2.Q......Y2..P
    9040: 00 80 3E 49 04 06 74 04 D0 E2 D1 E0 06 1F 8B F8  // ..>I..t.........
    9050: 8B F0 B0 50 F6 E3 0A DB C3 52 53 8A DF 32 FF D1  // ...P.....RS..2..
    9060: E3 8B 87 50 04 E8 0E 00 50 D1 EB A1 4C 04 F7 E3  // ...P....P...L...
    9070: 5B 03 C3 5B 5A C3 52 8B D0 A0 4A 04 F6 E4 32 F6  // [..[Z.R...J...2.
    9080: 03 C2 D1 E0 5A C3 8B E8 83 E5 0F 2E 8A A6 36 90  // ....Z.........6.
    9090: 8B E8 C1 ED 04 83 E5 0F 2E 8A 86 36 90 C3 00 03  // ...........6....
    90A0: 0C 0F 30 33 3C 3F C0 C3 CC CF F0 F3 FC FF 26 8B  // ..03<?........&.
    90B0: 04 86 E0 BA 00 80 F6 C4 C0 74 02 0A D6 D0 EE C1  // .........t......
    90C0: E0 02 75 F2 88 56 00 45 C3 8B 16 63 04 8A C5 86  // ..u..V.E...c....
    90D0: E0 EF 8A E1 FE C0 EF C3 52 8B D0 8A C4 F6 26 4A  // ........R.....&J
    90E0: 04 C1 E0 02 32 F6 03 C2 5A C3 53 8A DF 32 FF D1  // ....2...Z.S..2..
    90F0: E3 8B 87 50 04 D1 EB E8 02 00 5B C3 52 8B D0 32  // ...P......[.R..2
    9100: F6 52 8A C4 F6 26 85 04 F7 26 4A 04 5A 03 C2 0A  // .R...&...&J.Z...
    9110: DB 74 08 03 06 4C 04 FE CB 75 F8 5A C3 52 8B D0  // .t...L...u.Z.R..
    9120: A0 4A 04 F6 E4 32 F6 03 C2 D1 E0 03 06 4E 04 D1  // .J...2.......N..
    9130: F8 8B C8 B4 0E E8 91 FF 5A C3 8B C2 F7 26 4A 04  // ........Z....&J.
    9140: 8B F9 C1 EF 03 03 F8 0A FF 74 0A 8A C7 32 E4 F7  // .........t...2..
    9150: 26 4C 04 03 F8 80 E1 07 B4 80 D2 EC C3 E8 F0 FC  // &L..............
    9160: EC C3 E8 F8 FF B2 C0 B0 20 EE C3 E8 EF FF B2 C0  // ........ .......
    9170: 32 C0 EE C3 C4 3E A8 04 26 C4 7D 04 8C C5 0B EF  // 2....>..&.}.....
    9180: C3 53 B0 0E E8 95 FC 8A E0 B0 0F E8 8E FC 8B D8  // .S..............
    9190: B8 0E AA EF B8 0F 55 EF B0 0E E8 7F FC 3C AA 74  // ......U......<.t
    91A0: 0D B0 0F E8 76 FC 3C 55 74 04 32 C0 5B C3 B0 0E  // ....v.<Ut.2.[...
    91B0: 8A E7 EF FE C0 8A E3 EF B0 01 0A C0 5B C3 8A EE  // ............[...
    91C0: 8A 36 85 04 06 1F 0A DB 74 25 8A C5 2A C3 F6 E6  // .6......t%..*...
    91D0: 8B C8 52 32 F6 C1 E2 02 8B C2 D1 E2 2B D5 51 8B  // ..R2........+.Q.
    91E0: C8 F3 A5 2B FA 2B F2 59 E2 F4 5A E8 05 00 C3 8A  // ...+.+.Y..Z.....
    91F0: DD EB F8 8A C6 F6 E3 8B C8 8A C7 8A E0 32 F6 C1  // .............2..
    9200: E2 02 8B DA D1 E2 8B F1 2B D5 8B CB F3 AB 2B FA  // ........+.....+.
    9210: 4E 75 F7 C3 2E 8E 1E 53 2A 89 0E 60 04 8A C5 24  // Nu.....S*..`...$
    9220: 60 A8 20 74 06 B9 00 1E E9 94 00 F6 06 87 04 01  // `. t............
    9230: 0F 85 8B 00 80 3E 49 04 07 74 06 E8 19 FC 74 01  // .....>I..t....t.
    9240: C3 F6 06 87 04 08 74 03 CD 42 C3 8A 36 85 04 8A  // ......t..B..6...
    9250: D6 FE CA 38 CD 7E 1F 0A C9 74 64 8A E9 8A CE FE  // ...8.~...td.....
    9260: C9 EB 5C 38 D1 74 58 8A CE 80 FD 03 7C 04 8A E9  // ..\8.tX.....|...
    9270: D0 ED FE C9 EB 49 80 F9 03 7E 44 8A E1 2A E5 0A  // .....I...~D..*..
    9280: E4 75 0A 38 CA 74 38 FE CA 38 CA 74 32 8A C5 0A  // .u.8.t8..8.t2...
    9290: C1 38 F0 7E 0A 80 FC 02 7E 12 80 FD 02 7F C8 80  // .8.~....~.......
    92A0: FC 03 7D BF 8A D6 FE CA 38 D1 74 13 8A CE FE C9  // ..}.....8.t.....
    92B0: FE C9 8A E9 2A EC 80 FE 08 7F 04 FE C1 FE C5 B4  // ....*...........
    92C0: 0A E8 05 FE C3 2E 8E 1E 53 2A A2 62 04 32 E4 8B  // ........S*.b.2..
    92D0: F0 F7 26 4C 04 A3 4E 04 8B C8 E8 7A FB 74 07 80  // ..&L..N....z.t..
    92E0: 3E 49 04 07 77 02 D1 F9 B4 0C E8 DC FD D1 E6 8B  // >I..w...........
    92F0: 84 50 04 E8 27 FE C3 2E 8E 1E 53 2A 8A 26 49 04  // .P..'.....S*.&I.
    9300: E8 D7 AA 74 07 C7 06 50 04 00 00 C3 E8 48 FB 74  // ...t...P.....H.t
    9310: 0B 80 FC 07 74 06 77 08 E8 77 FC C3 E8 9F FB C3  // ....t.w..w......
    9320: 80 FC 13 7C 03 74 1F C3 E8 4E FA 8A D8 8B C1 E8  // ...|.t...N......
    9330: 85 FA 8B 2E 4A 04 52 F6 26 85 04 F7 E5 8B F7 03  // ....J.R.&.......
    9340: F0 5A E8 90 FA C3 E8 30 FA 8A D8 8B C1 E8 67 FA  // .Z.....0......g.
    9350: C1 E7 03 52 8B 2E 4A 04 C1 E5 03 F7 26 85 04 F7  // ...R..J.....&...
    9360: E5 8B F7 03 F0 5A E8 55 FE C3 2E 8E 1E 53 2A 8A  // .....Z.U.....S*.
    9370: 26 49 04 E8 E1 FA 74 0C 80 FC 07 74 07 77 40 80  // &I....t....t.w@.
    9380: FC 03 7F 04 E8 53 FB C3 E8 1E FC C3 E8 EA F9 8A  // .....S..........
    9390: D8 8A C1 8A E6 FE C4 E8 1D FA 2B 3E 4A 04 C1 E7  // ..........+>J...
    93A0: 03 52 F7 26 85 04 F7 26 4A 04 C1 E0 03 8B F7 2B  // .R.&...&J......+
    93B0: F0 5A 8B 2E 4A 04 C1 E5 03 F7 DD E8 00 FE C3 80  // .Z..J...........
    93C0: FC 13 7C 03 74 C6 C3 E8 AF F9 8A D8 8A C1 8A E6  // ..|.t...........
    93D0: FE C4 E8 E2 F9 52 8B 2E 4A 04 F7 26 85 04 F7 E5  // .....R..J..&....
    93E0: 2B FD 8B F7 2B F0 5A F7 DD E8 E9 F9 C3 2E 8E 1E  // +...+.Z.........
    93F0: 53 2A 2E 8E 06 59 2A E8 5D FA 74 11 80 3E 49 04  // S*...Y*.].t..>I.
    9400: 07 7C 18 2E 8E 06 57 2A 74 03 E9 B1 00 E8 49 FC  // .|....W*t.....I.
    9410: 8B D8 26 8B 07 8B EC 89 46 1A C3 A1 50 04 E8 B7  // ..&.....F...P...
    9420: FC 8B F0 BB 08 00 2B E3 8B EC 80 3E 49 04 06 75  // ......+....>I..u
    9430: 1F B9 04 00 26 8A 04 88 46 00 45 26 8A 84 00 20  // ....&...F.E&... 
    9440: 88 46 00 45 83 C6 50 E2 EB B8 00 02 B2 80 EB 17  // .F.E..P.........
    9450: D1 E6 B9 04 00 E8 56 FC 81 C6 00 20 E8 4F FC 81  // ......V.... .O..
    9460: EE B0 1F E2 F0 EB E2 2B EB C4 3E 0C 01 32 F6 80  // .......+..>..2..
    9470: FB 0E 75 09 26 83 7D FE 10 75 02 B6 80 16 1F 8B  // ..u.&.}..u......
    9480: F5 8B CB F6 C6 80 74 01 47 56 57 F3 A6 5F 5E 74  // ......t.GVW.._^t
    9490: 23 FE C0 03 FB F6 C6 80 74 01 47 FE CA 75 E2 FE  // #.......t.G..u..
    94A0: CC 74 0F 2E 8E 1E 53 2A C4 3E 7C 00 B0 80 B2 80  // .t....S*.>|.....
    94B0: EB CB 32 C0 8B E5 03 E3 8B EC 89 46 1A C3 80 3E  // ..2........F...>
    94C0: 49 04 13 7C 05 75 02 EB 5A C3 2E 8E 06 55 2A E8  // I..|.u..Z....U*.
    94D0: 18 FC 8B F0 8B 1E 85 04 2B E3 8B EC B8 05 08 B9  // ........+.......
    94E0: 05 00 BA CE 03 80 3E 49 04 0F 72 1A F6 06 87 04  // ......>I..r.....
    94F0: 60 75 13 B4 0A F7 C6 01 00 75 02 B4 05 B0 07 EF  // `u.......u......
    9500: B8 05 18 B9 05 01 EF 51 8B CB 26 8A 04 F6 D0 88  // .......Q..&.....
    9510: 46 00 45 03 36 4A 04 E2 F1 58 EF B8 00 01 32 D2  // F.E.6J...X....2.
    9520: E9 44 FF 2E 8E 06 55 2A A1 50 04 8B D0 32 F6 52  // .D....U*.P...2.R
    9530: 8A C4 32 E4 F7 26 4A 04 F7 26 85 04 5A 03 C2 8B  // ..2..&J..&..Z...
    9540: F0 8B 1E 85 04 2B E3 8B EC 53 8B 3E 4A 04 4F C1  // .....+...S.>J.O.
    9550: E7 03 C1 E6 03 B9 08 00 32 E4 26 8A 04 D0 E4 0A  // ........2.&.....
    9560: C0 74 03 80 CC 01 46 E2 F1 88 66 00 45 03 F7 4B  // .t....F...f.E..K
    9570: 75 E3 5B B8 00 01 32 D2 E9 EC FE 33 ED EB 03 BD  // u.[...2....3....
    9580: 01 00 2E 8E 1E 53 2A 2E 8E 06 59 2A 8A 26 49 04  // .....S*...Y*.&I.
    9590: E8 C4 F8 74 0F 2E 8E 06 57 2A 80 FC 07 74 05 7C  // ...t....W*...t.|
    95A0: 3D E9 0B 02 8A E3 8B F0 8A DF 32 FF D1 E3 8B 87  // =.........2.....
    95B0: 50 04 8B D0 A0 4A 04 F6 E4 32 F6 03 C2 8B F8 D1  // P....J...2......
    95C0: E7 0A DB 74 0B D0 EB A1 4C 04 03 F8 FE CB 75 FA  // ...t....L.....u.
    95D0: 8B C6 0B ED 75 03 F3 AB C3 AA 47 E2 FC C3 50 2E  // ....u.....G...P.
    95E0: 8E 06 59 2A A1 50 04 E8 EE FA 8B F8 A0 50 04 8A  // ..Y*.P.......P..
    95F0: 26 4A 04 8B E8 58 A8 80 74 08 24 7F C5 36 7C 00  // &J...X..t.$..6|.
    9600: EB 04 C5 36 0C 01 8A FC 32 E4 C1 E0 03 03 F0 80  // ...6....2.......
    9610: FF 06 74 69 D1 E7 8A F3 B0 55 80 E3 03 F6 E3 8A  // ..ti.....U......
    9620: D8 8A F8 8B C5 50 B2 04 F6 C6 80 75 27 AC E8 55  // .....P.....u'..U
    9630: FA 23 C3 AB AC E8 4E FA 23 C3 26 89 85 FE 1F 83  // .#....N.#.&.....
    9640: C7 4E FE CA 75 E7 83 EE 08 81 EF 3E 01 58 E8 72  // .N..u......>.X.r
    9650: 00 E2 D2 C3 AC E8 2E FA 23 C3 26 31 05 AC E8 25  // ........#.&1...%
    9660: FA 23 C3 26 31 85 00 20 83 C7 50 FE CA 75 E5 83  // .#.&1.. ..P..u..
    9670: EE 08 81 EF 3E 01 58 E8 49 00 E2 A9 C3 8B C5 50  // ....>.X.I......P
    9680: B2 04 F6 C3 80 74 1F AC 26 30 05 AC 26 30 85 00  // .....t..&0..&0..
    9690: 20 83 C7 50 FE CA 7F EF 83 EE 08 81 EF 3F 01 58  //  ..P.........?.X
    96A0: E8 20 00 E2 DA C3 AC AA AC 26 88 85 FF 1F 83 C7  // . .......&......
    96B0: 4F FE CA 7F F1 83 EE 08 81 EF 3F 01 58 E8 03 00  // O.........?.X...
    96C0: E2 BD C3 FE C0 38 E0 72 06 32 C0 81 C7 F0 00 C3  // .....8.r.2......
    96D0: 8A 16 85 04 F6 E2 8B F0 32 F6 8B EA 66 0F B6 06  // ........2...f...
    96E0: 51 04 F6 E2 66 0F B7 16 4A 04 83 FA 64 75 03 BA  // Q...f...J...du..
    96F0: 68 00 83 FA 5A 75 03 BA 60 00 81 FA AF 00 75 03  // h...Zu..`.....u.
    9700: BA B0 00 52 F7 E2 66 0F B7 F8 66 0F B6 06 50 04  // ...R..f...f...P.
    9710: 66 03 F8 66 C1 CF 10 03 FA 66 C1 C7 03 81 CF 00  // f..f.....f......
    9720: FF 66 C1 C7 10 5A 8A E2 4A C1 E2 03 A0 50 04 50  // .f...Z..J....P.P
    9730: C5 06 0C 01 03 F0 2E 8E 06 55 2A 58 57 51 50 9C  // .........U*XWQP.
    9740: FC 8B CD E8 3B 00 B5 08 AC 8A E0 8A C7 D0 E4 73  // ....;..........s
    9750: 02 8A C3 26 88 05 66 47 FE CD 75 EF 66 03 FA E2  // ...&..fG..u.f...
    9760: E2 9D 58 59 5F 83 C7 08 FE C0 38 E0 72 0E 51 32  // ..XY_.....8.r.Q2
    9770: C0 8B CD 49 03 FA 83 C7 08 E2 F9 59 2B F5 E2 BC  // ...I.......Y+...
    9780: C3 06 52 33 C0 8E C0 66 C1 C7 10 8B C7 66 C1 C7  // ..R3...f.....f..
    9790: 10 E8 46 A6 74 16 38 E0 74 12 0F B6 D0 E8 8B C9  // ..F.t.8.t.......
    97A0: 8A E0 66 C1 C7 10 8B F8 66 C1 C7 10 5A 07 C3 80  // ..f.....f...Z...
    97B0: FC 13 7C 0B 0F 84 18 FF 80 FC 62 0F 84 11 FF E8  // ..|.......b.....
    97C0: 01 00 C3 80 FC 11 75 06 80 E3 80 80 CB 0F 50 53  // ......u.......PS
    97D0: 8A DF 32 FF D1 E3 8B 97 50 04 5B 2E 8E 06 55 2A  // ..2.....P.[...U*
    97E0: E8 07 F9 8B F8 8B 2E 85 04 58 32 F6 52 8B 36 4A  // .........X2.R.6J
    97F0: 04 56 8A 26 85 04 C5 36 0C 01 80 FC 0E 75 09 83  // .V.&...6.....u..
    9800: 7C FE 10 75 03 B4 10 46 F6 E4 03 F0 B6 03 F6 C3  // |..u...F........
    9810: 80 75 6D B2 C4 B8 02 0F EF 5A 58 50 52 4A 8A E0  // .um......ZXPRJ..
    9820: 57 51 51 57 8B CD 32 C0 AA 03 FA E2 FB 5F 47 FE  // WQQW..2......_G.
    9830: C4 38 D4 76 0A 32 E4 8B CD 49 03 FA 47 E2 FB 59  // .8.v.2...I..G..Y
    9840: E2 E0 59 5F BA C4 03 B0 02 8A E3 EF 5B 4B 5A 51  // ..Y_........[KZQ
    9850: 57 8B CD AC 26 8A 25 AA 03 FB E2 F7 5F 47 2B F5  // W...&.%....._G+.
    9860: 42 3B D3 76 0A 33 D2 8B CD 49 03 FB 47 E2 FB 59  // B;.v.3...I..G..Y
    9870: E2 DD BA CE 03 B8 03 00 EF B2 C4 B8 02 0F EF C3  // ................
    9880: B2 CE B8 03 18 EF EB BC 2E 8E 1E 53 2A 80 3E 63  // ...........S*.>c
    9890: 04 B4 74 0B BA CC 03 EC A8 01 75 04 CD 42 C3 C3  // ..t.......u..B..
    98A0: E8 D1 F8 0A FF 75 1C 8A E3 80 E4 1F 80 26 66 04  // .....u.......&f.
    98B0: E0 08 26 66 04 E8 2D 00 8A 1E 66 04 80 E3 20 B1  // ..&f..-...f... .
    98C0: 05 D2 EB E8 91 F5 74 19 A0 66 04 24 DF 80 E3 01  // ......t..f.$....
    98D0: 74 02 0C 20 A2 66 04 24 10 0C 02 0A D8 E8 53 00  // t.. .f.$......S.
    98E0: C3 E8 7E F8 C3 53 50 80 E3 0F 8A FB D0 E3 81 E3  // ..~..SP.........
    98F0: 10 07 0A DF E8 60 F5 74 0E B4 00 8A C3 E8 2C F3  // .....`.t......,.
    9900: 0B ED 74 03 26 88 1D 8A C3 E8 0B 00 0B ED 74 04  // ..t.&.........t.
    9910: 26 88 5D 10 58 5B C3 8A E0 1E 2E 8E 1E 53 2A 80  // &.].X[.......S*.
    9920: 3E 49 04 33 1F 7F 08 8A C4 B4 11 E8 FE F2 C3 E8  // >I.3............
    9930: 30 F8 C3 9C FA E8 9F 05 B2 C0 B9 03 00 B4 01 8A  // 0...............
    9940: C4 EE 8A C3 EE 0B ED 74 04 47 26 88 1D FE C4 80  // .......t.G&.....
    9950: C3 02 E2 EB B0 20 EE 9D C3 2E 8E 1E 53 2A 8A 26  // ..... ......S*.&
    9960: 49 04 E8 F2 F4 74 0A 80 FC 07 77 06 74 03 E8 C0  // I....t....w.t...
    9970: F5 C3 80 FC 13 7C 03 74 4C C3 8A D8 E8 BB F7 BA  // .....|.tL.......
    9980: CE 03 B0 08 EF 2E 8E 1E 55 2A F6 C3 80 75 1C B2  // ........U*...u..
    9990: C4 B8 02 FF EF 8A 25 C6 05 00 8A E3 EF 8A 25 B4  // ......%.......%.
    99A0: FF 88 25 EF B2 CE B8 08 FF EF C3 B8 03 18 EF B2  // ..%.............
    99B0: C4 B0 02 8A E3 EF 8A 25 B4 FF 88 25 EF B2 CE B8  // .......%...%....
    99C0: 03 00 EF EB E1 50 2E 8E 06 55 2A A1 4A 04 C1 E0  // .....P...U*.J...
    99D0: 03 F7 E2 03 C1 8B F8 58 26 88 05 C3 2E 8E 1E 53  // .......X&......S
    99E0: 2A 8A 26 49 04 E8 6F F4 74 0F 80 FC 07 77 0B 74  // *.&I..o.t....w.t
    99F0: 08 E8 5F F5 8B EC 89 46 1A C3 80 FC 13 7C 03 74  // .._....F.....|.t
    9A00: 29 C3 E8 35 F7 8A CC 2E 8E 1E 55 2A BA CE 03 32  // )..5......U*...2
    9A10: FF B8 04 03 EF D0 E7 8A 1D 22 D9 74 03 80 CF 01  // .........".t....
    9A20: FE CC 7D F0 8B EC 88 7E 1A C3 A1 4A 04 C1 E0 03  // ..}....~...J....
    9A30: F7 E2 03 C1 8B F8 2E 8E 1E 55 2A 8A 05 8B EC 88  // .........U*.....
    9A40: 46 1A C3 2E 8E 1E 53 2A 8A 3E 62 04 8A CF D0 E1  // F.....S*.>b.....
    9A50: 32 ED BE 50 04 03 F1 8B 14 8A 0E 49 04 3C 0D 76  // 2..P.......I.<.v
    9A60: 4A 2E 8E 06 59 2A E8 EE F3 75 33 8A 1E 4A 04 8A  // J...Y*...u3..J..
    9A70: F8 8A C6 F6 E3 8A CA 03 C8 D1 E1 03 0E 4E 04 8B  // .............N..
    9A80: F9 8A C7 AA D1 E9 41 FE C2 38 DA 73 59 89 14 8B  // ......A..8.sY...
    9A90: 16 63 04 B0 0E 8A E5 EF 8A E1 FE C0 EF C3 2E 8E  // .c..............
    9AA0: 06 57 2A 80 F9 07 74 C3 E9 83 00 75 04 32 D2 EB  // .W*...t....u.2..
    9AB0: 0F 3C 0A 75 1D 3A 36 84 04 75 03 E9 93 00 FE C6  // .<.u.:6..u......
    9AC0: 89 14 E8 92 F3 75 05 80 F9 07 7F 05 8B C2 E8 4C  // .....u.........L
    9AD0: F6 C3 3C 07 75 04 E8 E9 91 C3 3C 08 75 83 0A D2  // ..<.u.....<.u...
    9AE0: 74 DE FE CA EB DA 32 FF 32 D2 2B CB 3A 36 84 04  // t.....2.2.+.:6..
    9AF0: 74 06 FE C6 03 CB EB 95 89 14 8B 16 63 04 B0 0E  // t...........c...
    9B00: 8A E5 EF 8A E1 FE C0 EF 2B FB 2B FB 26 8A 65 02  // ........+.+.&.e.
    9B10: 50 8B 3E 4E 04 8B F3 D1 E6 03 F7 A0 84 04 F6 E3  // P.>N............
    9B20: 8B C8 06 1F F3 A5 8B CB 58 B0 20 F3 AB C3 B9 01  // ........X. .....
    9B30: 00 B4 0A E8 BC C6 FE C2 3A 16 4A 04 74 03 89 14  // ........:.J.t...
    9B40: C3 32 FF 32 D2 89 14 3A 36 84 04 74 2E FE C6 EB  // .2.2...:6..t....
    9B50: ED 89 14 2E 8E 06 59 2A E8 FC F2 74 0E 2E 8E 06  // ......Y*...t....
    9B60: 57 2A 80 F9 07 74 04 32 FF EB 10 8B C2 E8 AD F5  // W*...t.2........
    9B70: 8B F9 D1 E7 4F 8B 1E 4A 04 EB 91 33 C9 8A 36 84  // ....O..J...3..6.
    9B80: 04 8A 16 4A 04 FE CA B0 01 E9 70 F7 2E 8E 1E 53  // ...J......p....S
    9B90: 2A F6 06 87 04 08 74 03 CD 42 C3 E8 76 F6 8B EC  // *.....t..B..v...
    9BA0: C6 46 1B 00 C3 2E 8E 1E 53 2A 8A DF 32 FF D1 E3  // .F......S*..2...
    9BB0: 89 97 50 04 D0 EB 38 1E 62 04 75 05 8B C2 E8 5C  // ..P...8.b.u....\
    9BC0: F5 C3 2E 8E 1E 53 2A 8A DF 32 FF D1 E3 8B 97 50  // .....S*..2.....P
    9BD0: 04 8B 0E 60 04 8B EC 89 4E 16 89 56 12 C3 2E 8E  // ...`....N..V....
    9BE0: 1E 53 2A A0 87 04 24 80 0A 06 49 04 8A 26 4A 04  // .S*...$...I..&J.
    9BF0: F6 06 87 04 08 75 2D E8 5D F2 74 07 80 3E 49 04  // .....u-.].t..>I.
    9C00: 07 7F 21 51 8A CC 8A 2E 84 04 BE CF 9B 81 FE D8  // ..!Q............
    9C10: 9B 74 10 2E 3B 0C 74 05 83 C6 03 EB F0 24 80 2E  // .t..;.t......$..
    9C20: 0A 44 02 59 8A 3E 62 04 8B EC 89 46 1A 89 5E 0E  // .D.Y.>b....F..^.
    9C30: 89 4E 16 89 56 12 C3 84 18 23 84 2B 33 84 2A 32  // .N..V....#.+3.*2
    9C40: 2E 8E 1E 53 2A 3C 04 7F 1B 50 52 BA CC 03 EC A8  // ...S*<...PR.....
    9C50: 01 5A 58 74 08 80 3E 63 04 D4 74 08 C3 80 3E 63  // .ZXt..>c..t...>c
    9C60: 04 B4 75 F8 3C 1C 73 F4 32 E4 8B E8 D1 E5 2E FF  // ..u.<.s.2.......
    9C70: A6 0B 9C 43 9C 63 9C 75 9C AA 9C F4 9B F4 9B F4  // ...C.c.u........
    9C80: 9B CF 9C E7 9C EB 9C F4 9B F4 9B F4 9B F4 9B F4  // ................
    9C90: 9B F4 9B 19 9D F4 9B 1D 9D 38 9D F4 9B 77 9D F4  // .........8...w..
    9CA0: 9B 85 9D A0 9D A7 9D B3 9D D7 9D 80 3E 49 04 13  // ............>I..
    9CB0: 74 15 E8 BF F4 8B C3 86 E0 E8 70 EF 0B ED 74 07  // t.........p...t.
    9CC0: 8A C7 32 FF 26 88 01 E8 93 F4 C3 E8 A6 F4 8A C7  // ..2.&...........
    9CD0: E8 44 FC 0B ED 74 F0 26 88 7D 11 EB EA 80 3E 49  // .D...t.&.}....>I
    9CE0: 04 13 74 E3 06 E8 8C F4 1F 0B ED 74 07 8B F2 B9  // ..t........t....
    9CF0: 11 00 F3 A4 8B F2 E8 DE 01 32 E4 B9 10 00 B2 C0  // .........2......
    9D00: 9C FA 8A C4 EE AC EE 9D FE C4 E2 F4 AC E8 07 FC  // ................
    9D10: EB B5 80 FB 01 77 B0 E8 43 F4 B2 C0 B0 30 E8 FB  // .....w..C....0..
    9D20: F0 24 F7 80 26 65 04 DF 80 FB 00 74 07 0C 08 80  // .$..&e.....t....
    9D30: 0E 65 04 20 EE EB 90 E8 9D 01 8A C3 B2 C0 E8 DB  // .e. ............
    9D40: F0 8B C8 EE B0 20 EE 8B EC 88 4E 0F E9 78 FF B3  // ..... ....N..x..
    9D50: 11 EB E4 8B FA E8 05 F4 B9 10 00 32 E4 B2 C0 8A  // ...........2....
    9D60: C4 9C FA EE 42 EC 26 88 05 FE C4 4A EE 9D 47 E2  // ....B.&....J..G.
    9D70: EE 9C FA B0 11 EE 42 EC 9D 26 88 05 E8 E3 F3 EB  // ......B..&......
    9D80: 5A E8 CE 00 C3 8B FA 51 8B C3 26 8A 35 26 8A 6D  // Z......Q..&.5&.m
    9D90: 01 26 8A 4D 02 E8 CA 00 83 C7 03 43 59 E2 E8 C3  // .&.M.......CY...
    9DA0: 0A DB 75 1A E8 B6 F3 B2 C0 B0 30 E8 6E F0 24 7F  // ..u.......0.n.$.
    9DB0: F6 C7 01 74 02 0C 80 B4 30 E8 70 EE EB 1D FE CB  // ...t....0.p.....
    9DC0: 75 1C E8 98 F3 B2 C0 B0 30 E8 50 F0 EE A8 80 75  // u.......0.P....u
    9DD0: 03 C0 E7 02 B4 34 8A C7 E8 51 EE E8 7F F3 C3 8A  // .....4...Q......
    9DE0: C3 E8 D1 00 8B EC 89 4E 16 88 76 13 C3 8B FA 51  // .......N..v....Q
    9DF0: 8B C3 E8 C3 00 26 88 35 26 88 6D 01 26 88 4D 02  // .....&.5&.m.&.M.
    9E00: 83 C7 03 43 59 E2 E8 C3 BA C6 03 8A C3 EE C3 BA  // ...CY...........
    9E10: C6 03 EC 32 E4 8B EC 89 46 0E C3 E8 3F F3 B2 C0  // ...2....F...?...
    9E20: B0 34 E8 F7 EF 8A F8 EE B0 30 E8 EF EF B3 01 A8  // .4.......0......
    9E30: 80 75 05 B3 00 C0 EF 02 8B EC 89 5E 0E EB 9C 51  // .u.........^...Q
    9E40: 8B C3 E8 73 00 E8 2A 00 8A C3 E8 52 00 43 59 E2  // ...s..*....R.CY.
    9E50: EE C3 F6 06 89 04 02 74 03 E8 16 00 8A C3 E8 39  // .......t.......9
    9E60: 00 C3 F6 06 89 04 02 74 03 E8 06 00 8A C3 E8 2E  // .......t........
    9E70: 00 C3 50 B0 1E F6 E6 50 B0 3B F6 E5 50 B0 0B F6  // ..P....P.;..P...
    9E80: E1 59 03 C1 59 03 C1 B1 64 F6 F1 80 FC 32 7C 02  // .Y..Y...d....2|.
    9E90: FE C0 8A F0 8A E8 8A C8 58 C3 52 E8 39 00 5A 53  // ........X.R.9.ZS
    9EA0: 8B DA BA C8 03 9C FA EE 42 8A C7 EE 8A C5 EE 8A  // ........B.......
    9EB0: C1 EE 9D 5B C3 E8 1F 00 53 9C FA BA C7 03 EE 42  // ...[....S......B
    9EC0: 42 EC 8A F8 EB 00 EB 00 EC 8A E8 EB 00 EB 00 EC  // B...............
    9ED0: 8A C8 8A F7 9D 5B C3 50 51 E8 81 F2 B9 FF 7F EC  // .....[.PQ.......
    9EE0: A8 08 75 02 E2 F9 59 58 C3 2E 8E 1E 53 2A 8B F8  // ..u...YX....S*..
    9EF0: 24 0F 81 E7 F0 00 C1 EF 03 83 FF 06 7F 18 2E FF  // $...............
    9F00: A5 9B 9E A3 9E B8 9E 56 9F B2 9F 3C 03 74 08 3C  // .......V...<.t.<
    9F10: 04 7F 03 E8 CF 01 C3 BA C4 03 B0 03 8A E3 EF C3  // ................
    9F20: 3C 04 77 F2 50 53 50 52 8B 16 63 04 B0 07 E8 EB  // <.w.PSPR..c.....
    9F30: EE 8A E0 D0 EC 80 E4 01 A8 40 74 03 80 CC 02 B0  // .........@t.....
    9F40: 12 E8 D8 EE 40 A3 85 04 B0 09 E8 CF EE A8 80 74  // ....@..........t
    9F50: 04 D1 2E 85 04 A1 85 04 8B D0 3D F4 01 73 1B BA  // ..........=..s..
    9F60: E0 01 3D C2 01 73 13 BA 90 01 3D 7C 01 73 0B BA  // ..=..s....=|.s..
    9F70: 5E 01 3D 4A 01 73 03 BA C8 00 89 16 85 04 5A 58  // ^.=J.s........ZX
    9F80: C6 06 84 04 FF E8 5D 01 5B 58 8A DF 32 FF 0A C0  // ......].[X..2...
    9F90: 74 0E B3 0E 3C 01 74 08 B3 08 3C 02 74 02 B3 10  // t...<.t...<.t...
    9FA0: 8A CB 8A E9 81 E9 01 02 80 F9 08 7E 04 81 E9 01  // ...........~....
    9FB0: 01 87 1E 85 04 53 E8 5B F2 5B E8 85 02 C3 0A C0  // .....S.[.[......
    9FC0: 74 11 FE C8 74 1A FE C8 74 38 FE C8 74 3C FE C8  // t...t...t8..t<..
    9FD0: 74 40 C3 89 2E 7C 00 8C 06 7E 00 C3 8C C8 8E C0  // t@...|...~......
    9FE0: FE CA 0A DB 74 07 32 FF 2E 8A 97 96 9F 89 0E 85  // ....t.2.........
    9FF0: 04 88 16 84 04 89 2E 0C 01 8C 06 0E 01 C3 00 0D  // ................
    A000: 18 2A E8 09 03 B9 0E 00 EB D6 BD A6 6E B9 08 00  // .*..........n...
    A010: EB CA BD B9 76 B9 10 00 EB C2 0A C0 75 BD 8B 0E  // ....v.......u...
    A020: 85 04 8A 16 84 04 80 FF 07 77 35 80 FF 01 77 10  // .........w5...w.
    A030: 0A FF 75 06 C4 2E 7C 00 EB 26 C4 2E 0C 01 EB 20  // ..u...|..&..... 
    A040: 80 FF 02 75 0B 8C CD 8E C5 2E 8B 2E 98 87 EB 10  // ...u............
    A050: 0E 07 8A DF 32 FF 80 EB 02 D1 E3 2E 8B AF 09 A0  // ....2...........
    A060: 8B C5 8B EC 89 4E 16 89 56 12 89 46 0A 8C 46 1E  // .....N..V..F..F.
    A070: C3 B9 76 A6 6E A6 72 A6 76 B9 76 B9 86 53 06 8A  // ..v.n.r.v.v..S..
    A080: 26 49 04 E8 C7 C3 26 8A 47 02 26 8A 67 33 F6 C4  // &I....&.G.&.g3..
    A090: 01 74 22 BD B9 76 3C 10 7D 0E E8 71 02 8C 06 0E  // .t"..v<.}..q....
    A0A0: 01 3C 0E 7D 07 BD A6 6E 8C 0E 0E 01 89 2E 0C 01  // .<.}...n........
    A0B0: E8 10 01 EB 2D B4 84 3C 10 7D 13 B4 81 3C 0E 74  // ....-..<.}...<.t
    A0C0: 0D 7F 15 B4 02 3C 08 74 05 80 CC 80 EB 0A 26 F6  // .....<.t......&.
    A0D0: 47 05 01 74 03 80 E4 7F 86 C4 32 DB E8 06 00 E8  // G..t......2.....
    A0E0: C9 01 07 5B C3 8B F8 8B F2 BA CE 03 EC B8 05 00  // ...[............
    A0F0: EF B8 06 04 EF B2 C4 EC B8 02 04 EF B8 04 07 EF  // ................
    A100: 8B D6 8B C7 50 24 7F 0A C0 74 22 0E 07 33 D2 B9  // ....P$...t"..3..
    A110: 00 01 3C 04 75 07 B7 10 BD B9 76 EB 10 FE C8 75  // ..<.u.....v....u
    A120: 07 B7 0E E8 E8 01 EB 05 B7 08 BD A6 6E E8 2D 00  // ............n.-.
    A130: 58 A8 80 74 00 BA C4 03 B8 02 03 EF B8 04 02 EF  // X..t............
    A140: B2 CC EC A8 01 B8 06 0E 75 02 B4 0A B2 CE 50 EC  // ........u.....P.
    A150: 58 EF B0 04 EE 32 C0 EE B8 05 10 EF C3 FC 0B C9  // X....2..........
    A160: 75 01 C3 80 FF 0E 75 0A 26 83 7E FE 10 75 03 80  // u.....u.&.~..u..
    A170: CD 80 1E 06 1F 2E 8E 06 55 2A 8B FA C1 E7 05 B0  // ........U*......
    A180: 40 53 80 E3 03 F6 E3 5B F6 C3 04 74 02 04 20 86  // @S.....[...t.. .
    A190: E0 8B D0 03 FA 8B F5 E3 28 32 C0 86 FB 32 FF 51  // ........(2...2.Q
    A1A0: F6 C5 80 74 01 46 8B CB F3 A4 83 FB 20 74 07 B9  // ...t.F...... t..
    A1B0: 20 00 2B CB F3 AA 59 F6 C5 80 74 01 46 FE C9 75  //  .+...Y...t.F..u
    A1C0: DE 1F C3 8A 26 49 04 50 06 57 C4 3E A8 04 26 C4  // ....&I.P.W.>..&.
    A1D0: 7D 0C 8C C5 0B EF 74 30 8B EF 83 C7 07 26 8A 05  // }.....t0.....&..
    A1E0: 3C FF 74 24 38 E0 74 03 47 EB F2 8B FD 26 8A 05  // <.t$8.t.G....&..
    A1F0: FE C8 A2 84 04 26 8B 45 01 A3 85 04 26 C4 7D 03  // .....&.E....&.}.
    A200: 89 3E 0C 01 8C 06 0E 01 5F 07 58 C3 26 F6 47 33  // .>......_.X.&.G3
    A210: 01 74 01 C3 C4 1E A8 04 26 C4 5F 08 8C C0 0B C3  // .t......&._.....
    A220: 74 1F BF 0B 00 26 8A 01 3C FF 74 15 47 38 06 49  // t....&..<.t.G8.I
    A230: 04 75 F2 26 8A 07 32 E4 87 06 85 04 8B D8 E8 01  // .u.&..2.........
    A240: 00 C3 8B 16 63 04 8A 26 85 04 FE CC 80 E4 1F 9C  // ....c..&........
    A250: FA 80 FA D4 74 0B B0 14 EE 42 EC 24 E0 0A C4 EE  // ....t....B.$....
    A260: 4A B0 09 EE 42 EC 24 E0 0A C4 EE 9D 8A C8 8B C3  // J...B.$.........
    A270: 8A 16 85 04 F6 F2 80 3E 84 04 FF 75 07 A2 84 04  // .......>...u....
    A280: FE 0E 84 04 F6 E2 F6 C1 80 74 02 D1 E0 48 8A E0  // .........t...H..
    A290: B0 12 8B 16 63 04 EF A0 4A 04 8A 26 84 04 FE C4  // ....c...J..&....
    A2A0: F6 E4 D1 E0 05 00 01 A3 4C 04 C3 8A 26 49 04 50  // ........L...&I.P
    A2B0: 06 57 C4 3E A8 04 26 C4 7D 08 8C C5 0B EF 74 4A  // .W.>..&.}.....tJ
    A2C0: 8B EF 83 C7 0B 26 8A 05 3C FF 74 3E 38 E0 74 03  // .....&..<.t>8.t.
    A2D0: 47 EB F2 8B FD 26 8A 3D 26 8A 5D 01 26 8B 4D 02  // G....&.=&.].&.M.
    A2E0: 26 8B 55 04 26 8A 45 0A 3C FF 74 02 FE C8 50 A0  // &.U.&.E.<.t...P.
    A2F0: 84 04 FE C0 F6 26 85 04 A3 85 04 58 A2 84 04 26  // .....&.....X...&
    A300: C4 7D 06 8B EF 32 C0 E8 DB FD 5F 07 58 C3 50 53  // .}...2...._.X.PS
    A310: 51 52 2E A1 5D 2A 0B C0 74 09 2E 8B 2E 98 87 0E  // QR..]*..t.......
    A320: 07 EB 08 B8 30 11 B7 02 E8 C7 BE 5A 59 5B 58 C3  // ....0......ZY[X.
    A330: 3C 04 7C 01 C3 E3 FD 53 2E 8E 1E 53 2A 86 FB 32  // <.|....S...S*..2
    A340: FF D1 E3 8B FB 81 C7 50 04 8B 35 5B 89 15 56 8B  // .......P..5[..V.
    A350: F0 51 53 26 8A 46 00 45 3C 0D 7F 1F 75 04 32 D2  // .QS&.F.E<...u.2.
    A360: EB 40 3C 0A 74 32 3C 07 75 05 E8 55 89 EB 62 3C  // .@<.t2<.u..U..b<
    A370: 08 75 08 0A D2 74 5A FE CA EB 27 F7 C6 02 00 74  // .u...tZ...'....t
    A380: 05 26 8A 5E 00 45 B9 01 00 B4 09 E8 64 BE FE C2  // .&.^.E......d...
    A390: 3A 16 4A 04 72 0C 32 D2 89 15 3A 36 84 04 73 06  // :.J.r.2...:6..s.
    A3A0: FE C6 89 15 EB 2B 50 E8 AD EA 75 08 B8 00 08 E8  // .....+P...u.....
    A3B0: 40 BE EB 09 80 3E 49 04 07 74 F1 32 E4 86 3E 62  // @....>I..t.2..>b
    A3C0: 04 53 8A FC 55 E8 25 00 5D 5B 86 3E 62 04 58 8B  // .S..U.%.][.>b.X.
    A3D0: 15 5B 59 E2 15 5A F7 C6 01 00 75 02 89 15 8B 05  // .[Y..Z....u.....
    A3E0: 3A 3E 62 04 75 03 E8 34 ED C3 E9 64 FF 33 C9 8A  // :>b.u..4...d.3..
    A3F0: 36 84 04 8A 16 4A 04 FE CA B8 01 06 E8 F3 BD C3  // 6....J..........
    A400: 2E 8E 1E 53 2A 0A C0 75 0D E8 18 00 8B EC 89 5E  // ...S*..u.......^
    A410: 0E C6 46 1A 1A C3 3C 01 75 09 E8 41 00 8B EC C6  // ..F...<.u..A....
    A420: 46 1A 1A C3 A0 8A 04 BF 96 A4 2E 3A 05 72 04 BB  // F..........:.r..
    A430: FF FF C3 32 E4 D1 E0 03 F8 2E 8B 5D 04 0A DB 74  // ...2.......]...t
    A440: 05 0A FF 75 04 C3 86 FB C3 A0 10 04 24 30 3C 30  // ...u........$0<0
    A450: 74 06 F6 C3 01 75 EF C3 F6 C3 01 74 E9 C3 BF 96  // t....u.....t....
    A460: A4 2E 8A 0D 32 C0 83 C7 04 2E 3B 1D 74 12 86 FB  // ....2.....;.t...
    A470: 2E 3B 1D 74 0B 83 C7 02 FE C0 38 C8 7E EB B0 FF  // .;.t......8.~...
    A480: A2 8A 04 C3 BB 08 00 F6 06 89 04 02 74 0E BB 07  // ............t...
    A490: 00 BA CC 03 EC A8 01 74 18 BB 08 00 BA B4 03 E8  // .......t........
    A4A0: DF EC 74 21 B7 01 E8 8C E9 80 FA D4 74 17 86 FB  // ..t!........t...
    A4B0: C3 BA D4 03 E8 CA EC 74 0C B7 02 E8 77 E9 80 FA  // .......t....w...
    A4C0: B4 74 02 86 FB C3 0F 08 0F 08 0F 08 0F 08 03 01  // .t..............
    A4D0: 03 01 01 01 00 08 01 01 01 01 01 01 01 01 0F 01  // ................
    A4E0: 0F 08 0F 04 00 02 0F 02 01 01 0F 01 FF 01 FF E0  // ................
    A4F0: 0F 00 00 00 00 07 02 08 FF 0E 00 00 3F 00 10 01  // ............?...
    A500: 08 00 00 00 00 01 00 02 02 01 00 04 04 01 00 05  // ................
    A510: 02 05 00 06 01 06 05 06 00 08 01 08 00 07 02 07  // ................
    A520: 06 07 CA 00 34 00 90 00 96 00 00 00 00 00 00 00  // ....4...........
    A530: 5F 57 C3 90 50 66 52 E8 F4 FF FF FF 81 EF 10 00  // _W..PfR.........
    A540: 00 00 2E 8B 07 66 BA F8 0C EF 66 BA FC 0C ED 32  // .....f....f....2
    A550: C0 66 8B F8 66 5A 58 C3 66 B8 4F 03 66 52 66 56  // .f..fZX.f.O.fRfV
    A560: 53 57 50 0A FF 75 44 E8 C8 FF FF FF 66 33 F6 66  // SWP..uD.....f3.f
    A570: BB 53 00 E8 48 00 00 00 C1 E8 10 F6 C4 40 75 2B  // .S..H........@u+
    A580: 66 81 E2 FF 02 66 D1 E2 66 8B C2 66 40 C1 E0 10  // f....f..f..f@...
    A590: 66 8B C2 66 BB 13 00 E8 30 00 00 00 66 BB 12 00  // f..f....0...f...
    A5A0: E8 27 00 00 00 66 58 32 E4 66 50 58 5F 5B 66 5E  // .'...fX2.fPX_[f^
    A5B0: 66 5A C3 90 66 B8 4F 03 C3 90 66 B8 4F 03 C3 90  // fZ..f.O...f.O...
    A5C0: 66 52 E8 11 00 00 00 ED 66 5A C3 90 66 52 E8 05  // fR......fZ..fR..
    A5D0: 00 00 00 EF 66 5A C3 90 66 8B D7 50 33 C0 66 8B  // ....fZ..f..P3.f.
    A5E0: C3 66 03 C6 C1 E0 02 EF 66 83 C2 04 58 C3 9E 4D  // .f......f...X..M
    A5F0: 91 4D 91 4D 91 4D 7C 4D 7C 4D 7C 4D 7C 4D BE 49  // .M.M.M|M|M|M|M.I
    A600: 35 4A 5F 4A A0 4B 9F 4B 9F 4B E5 4B 4A 4C 7A 4C  // 5J_J.K.K.K.KJLzL
    A610: 37 4D 60 4D 60 4D D7 4B CA 4B CA 4B CA 4B CA 4B  // 7M`M`M.K.K.K.K.K
    A620: CA 4B E5 4B 4A 4C 7A 4C 37 4D 65 4D AB 4D 60 4D  // .K.KJLzL7MeM.M`M
    A630: 60 4D FF FF FF FF FF FF 00 00 FF FF 00 00 FF FF  // `M..............
    A640: 00 00 FF 00 00 00 FF 00 00 00 FF 00 00 00 FF 00  // ................
    A650: 00 00 00 00 08 10 00 08 10 18 00 08 10 18 C2 47  // ...............G
    A660: 01 C2 47 02 D0 5B 03 B0 5B 03 E7 48 03 9B 48 03  // ..G..[..[..H..H.
    A670: C3 47 04 DC 47 04 EC 47 04 C2 47 03 00 00 00 00  // .G..G..G..G.....
    A680: 6F 4F 00 02 6F 4F 01 02 6F 4F 02 02 6F 4F 03 02  // oO..oO..oO..oO..
    A690: 6F 4F 04 02 6F 4F 05 02 69 51 00 02 69 51 01 02  // oO..oO..iQ..iQ..
    A6A0: 69 51 02 02 69 51 03 02 69 51 04 02 69 51 05 02  // iQ..iQ..iQ..iQ..
    A6B0: 9E 51 00 02 9E 51 01 02 9E 51 02 02 9E 51 03 02  // .Q...Q...Q...Q..
    A6C0: 9E 51 04 02 9E 51 05 02 D9 53 00 02 D9 53 01 02  // .Q...Q...S...S..
    A6D0: D9 53 02 02 D9 53 03 02 D9 53 04 02 D9 53 05 02  // .S...S...S...S..
    A6E0: D9 53 00 02 D9 53 01 02 D9 53 02 02 D9 53 03 02  // .S...S...S...S..
    A6F0: D9 53 04 02 D9 53 05 02 A0 52 00 02 A0 52 01 02  // .S...S...R...R..
    A700: A0 52 02 02 A0 52 03 02 A0 52 04 02 A0 52 05 02  // .R...R...R...R..
    A710: DC 52 00 02 DC 52 01 02 DC 52 02 02 DC 52 03 02  // .R...R...R...R..
    A720: DC 52 04 02 DC 52 05 02 4D 52 00 02 4D 52 01 02  // .R...R..MR..MR..
    A730: 4D 52 02 02 4D 52 03 02 4D 52 04 02 4D 52 05 02  // MR..MR..MR..MR..
    A740: 81 52 00 02 81 52 01 02 81 52 02 02 81 52 03 02  // .R...R...R...R..
    A750: 81 52 04 02 81 52 05 02 31 56 00 00 64 56 01 00  // .R...R..1V..dV..
    A760: 64 56 02 00 51 56 00 00 3F 55 00 02 38 53 00 02  // dV..QV..?U..8S..
    A770: 38 53 01 02 38 53 02 02 38 53 03 02 38 53 04 02  // 8S..8S..8S..8S..
    A780: 38 53 05 02 57 55 00 02 AC 57 05 00 AC 57 01 00  // 8S..WU...W...W..
    A790: AC 57 00 00 AC 57 02 00 ED 57 00 00 ED 57 02 00  // .W...W...W...W..
    A7A0: 32 58 00 00 C2 54 00 02 C2 54 01 02 C2 54 02 02  // 2X...T...T...T..
    A7B0: C2 54 03 02 C2 54 04 02 C2 54 05 02 7E 56 00 00  // .T...T...T..~V..
    A7C0: A6 56 00 00 27 57 00 00 A2 57 00 00 86 53 00 02  // .V..'W...W...S..
    A7D0: 86 53 01 02 86 53 02 02 86 53 03 02 86 53 04 02  // .S...S...S...S..
    A7E0: 86 53 05 02 A1 57 00 01 A1 57 00 01 A5 50 00 02  // .S...W...W...P..
    A7F0: A5 50 01 02 A5 50 02 02 A5 50 03 02 A5 50 04 02  // .P...P...P...P..
    A800: A5 50 05 02 C6 56 00 00 A2 57 00 00 A2 57 00 00  // .P...V...W...W..
    A810: A2 57 00 00 D7 55 00 00 C9 51 00 02 C9 51 01 02  // .W...U...Q...Q..
    A820: C9 51 02 02 C9 51 03 02 C9 51 04 02 C9 51 05 02  // .Q...Q...Q...Q..
    A830: F8 51 00 02 F8 51 01 02 F8 51 02 02 F8 51 03 02  // .Q...Q...Q...Q..
    A840: F8 51 04 02 F8 51 05 02 2E 52 00 02 2E 52 01 02  // .Q...Q...R...R..
    A850: 2E 52 02 02 2E 52 03 02 2E 52 04 02 2E 52 05 02  // .R...R...R...R..
    A860: E9 56 00 00 0C 57 00 00 CA 52 01 02 CA 52 02 02  // .V...W...R...R..
    A870: 26 53 01 02 26 53 02 02 A6 00 02 01 B6 A8 00 00  // &S..&S..........
    A880: 00 00 00 00 00 00 00 00 1A A9 00 00 00 00 00 00  // ................
    A890: 00 00 00 00 00 00 A0 AE 00 00 00 00 00 00 00 00  // ................
    A8A0: 00 00 00 00 00 00 00 00 66 A9 00 00 00 00 00 00  // ........f.......
    A8B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A8C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 BE AE  // ................
    A8D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A8E0: 00 00 00 00 00 00 8E A9 00 00 00 00 00 00 00 00  // ................
    A8F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A900: 7E AA 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ~...............
    A910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 63 00  // ..............c.
    A920: 02 01 00 00 37 00 00 4B E5 00 04 49 37 00 56 00  // ....7..K...I7.V.
    A930: 40 01 05 00 00 61 60 01 00 3C E5 01 00 80 44 37  // @....a`..<....D7
    A940: 00 51 14 2D 05 40 01 00 00 00 3E 05 40 20 A1 07  // .Q.-.@....>.@ ..
    A950: 00 45 13 00 5B 52 0D 03 00 41 E3 0D 3E 05 41 00  // .E..[R...A..>.A.
    A960: 00 00 00 44 62 00 33 05 41 01 00 00 00 1B 05 41  // ...Db.3.A......A
    A970: 0B 01 02 06 00 41 0D 25 1F 0E 03 0D 65 53 00 02  // .....A.%....eS..
    A980: 5B 00 4B 00 01 01 00 00 37 00 00 42 21 00 63 00  // [.K.....7..B!.c.
    A990: 1F 00 63 01 39 00 63 03 3F 00 63 02 45 00 5A 5A  // ..c.9.c.?.c.E.ZZ
    A9A0: 5B 03 05 40 00 00 05 04 2D 19 40 00 15 05 40 02  // [..@....-.@...@.
    A9B0: 01 02 0C 00 40 02 00 00 0D 00 5B 02 00 00 E3 0D  // ....@.....[.....
    A9C0: 5B 02 00 00 E7 0D 5B 02 00 00 E8 0D 5B 00 28 00  // [.....[.....[.(.
    A9D0: 02 01 00 00 37 00 00 01 05 00 00 6C A8 01 00 02  // ....7......l....
    A9E0: 00 00 01 00 02 01 01 00 01 05 00 00 6D A8 01 00  // ............m...
    A9F0: 02 00 02 01 00 5B F0 00 03 03 0C 00 37 00 00 66  // .....[......7..f
    AA00: 04 03 04 46 28 00 3E 05 46 00 00 00 00 49 3C 00  // ...F(.>.F....I<.
    AA10: 03 01 00 00 03 01 01 01 03 01 02 02 52 16 03 01  // ............R...
    AA20: 46 00 1B 05 46 08 02 02 00 00 02 02 01 01 02 02  // F...F...........
    AA30: 02 02 3D 65 02 00 49 47 00 2C 22 02 46 3D E5 02  // ..=e..IG.,".F=..
    AA40: 00 49 52 00 2C A2 02 46 3D 65 02 02 49 6D 00 01  // .IR.,..F=e..Im..
    AA50: 05 00 00 E5 68 01 00 01 01 01 00 00 02 05 00 98  // ....h...........
    AA60: A3 05 00 03 01 40 03 09 05 40 00 00 00 FC 3E 05  // .....@...@....>.
    AA70: 40 00 00 00 D0 49 90 00 01 05 63 C0 00 00 00 40  // @....I....c....@
    AA80: 55 20 02 43 94 00 54 00 63 C0 01 01 64 C0 00 56  // U .C..T.c...d..V
    AA90: 00 40 03 21 40 02 01 02 65 C0 40 01 01 66 C0 01  // .@.!@...e.@..f..
    AAA0: 03 31 40 02 01 02 67 C0 40 01 01 E8 C0 03 3D 65  // .1@...g.@.....=e
    AAB0: 02 01 44 E7 00 3D E5 02 01 44 E7 00 51 02 56 00  // ..D..=...D..Q.V.
    AAC0: 40 4A E5 A0 21 80 44 EF 00 51 14 2D 05 40 01 00  // @J..!.D..Q.-.@..
    AAD0: 00 00 3E 05 40 A0 86 01 00 45 CB 00 5B 4A E5 A0  // ..>.@....E..[J..
    AAE0: 21 80 49 E7 00 5B 21 04 01 01 04 00 37 00 00 3D  // !.I..[!.....7..=
    AAF0: 25 00 00 44 F5 00 4A 05 A3 36 02 00 00 00 44 20  // %..D..J..6....D 
    AB00: 04 03 05 00 32 00 00 00 03 00 40 97 36 03 05 46  // ....2.....@.6..F
    AB10: 00 31 00 00 04 02 04 40 03 03 41 05 3E 02 41 40  // .1.....@..A.>.A@
    AB20: 48 4C 00 33 02 40 41 03 03 41 06 33 02 41 40 43  // HL.3.@A..A.3.A@C
    AB30: 50 00 33 02 41 40 3E 05 41 00 00 00 00 44 70 00  // P.3.A@>.A....Dp.
    AB40: 33 05 00 01 00 00 00 3E 05 00 00 00 00 00 44 20  // 3......>......D 
    AB50: 04 51 14 43 22 00 03 03 40 05 03 02 41 40 2D 05  // .Q.C"...@...A@-.
    AB60: 40 00 00 00 00 03 02 46 40 04 01 00 00 04 01 01  // @......F@.......
    AB70: 01 04 01 02 02 04 01 03 03 04 01 04 04 04 01 05  // ................
    AB80: 05 04 01 06 06 2D 05 41 40 00 00 00 3E 05 41 00  // .....-.A@...>.A.
    AB90: 20 00 00 45 B7 00 27 05 41 00 20 00 00 03 05 46  //  ..E..'.A. ....F
    ABA0: 00 31 00 00 04 02 05 41 01 02 96 36 41 03 05 00  // .1.....A...6A...
    ABB0: 80 1A 06 00 03 00 41 97 36 03 00 40 96 36 3E 02  // ......A.6..@.6>.
    ABC0: 41 40 44 20 04 33 05 00 01 00 00 00 3E 05 00 00  // A@D .3......>...
    ABD0: 00 00 00 44 20 04 51 14 43 CE 00 3D 65 00 01 44  // ...D .Q.C..=e..D
    ABE0: 32 01 4A 05 B6 36 00 00 01 00 49 32 01 4A 05 B6  // 2.J..6....I2.J..
    ABF0: 36 00 00 02 00 44 32 01 01 05 00 00 61 60 01 00  // 6....D2.....a`..
    AC00: 01 05 01 00 00 00 00 08 01 05 00 00 61 60 01 00  // ............a`..
    AC10: 3C E5 01 00 80 49 2A 01 4A 05 B6 36 00 00 02 00  // <....I*.J..6....
    AC20: 49 D1 01 01 05 B8 36 00 00 02 10 03 05 41 0A 00  // I.....6......A..
    AC30: 00 00 33 05 41 01 00 00 00 3E 05 41 00 00 00 00  // ..3.A....>.A....
    AC40: 44 8F 01 51 0A 3C 05 B8 36 00 00 02 00 49 4C 01  // D..Q.<..6....IL.
    AC50: 03 05 41 04 00 00 00 51 0A 33 05 41 01 00 00 00  // ..A....Q.3.A....
    AC60: 3E 05 41 00 00 00 00 44 8F 01 3C 05 AA 36 AD DE  // >.A....D..<..6..
    AC70: AD DE 49 71 01 01 05 B8 36 00 00 00 00 0D 05 B6  // ..Iq....6.......
    AC80: 36 00 00 02 00 07 05 B6 36 FF FF FE FF 0D 05 01  // 6.......6.......
    AC90: 38 00 01 00 00 51 0A 01 05 97 36 00 00 00 00 01  // 8....Q....6.....
    ACA0: 05 96 36 00 00 00 00 01 05 A3 36 00 00 00 00 07  // ..6.......6.....
    ACB0: 05 01 38 FF FE FF FF 66 0B 03 04 00 04 00 02 02  // ..8....f........
    ACC0: 04 00 15 05 00 0A 1A 05 04 16 02 05 00 00 00 00  // ................
    ACD0: 00 02 02 01 00 2C 05 01 00 00 02 00 55 00 02 02  // .....,......U...
    ACE0: 89 02 04 02 05 03 00 00 05 D0 52 35 02 05 00 00  // ..........R5....
    ACF0: 00 00 00 02 02 01 00 2C 05 01 00 00 00 00 55 00  // .......,......U.
    AD00: 02 02 89 02 04 02 05 03 00 20 00 D0 52 35 66 16  // ......... ..R5f.
    AD10: 3E 0D 42 00 00 44 9B 02 56 00 41 03 0C 41 00 00  // >.B..D..V.A..A..
    AD20: 2D 05 41 0F 00 00 00 09 05 41 F0 FF 00 00 2D 0A  // -.A......A....-.
    AD30: 41 42 03 05 46 00 80 00 00 56 08 42 04 04 00 00  // AB..F....V.B....
    AD40: 00 2D 05 46 04 00 00 00 2D 05 42 04 00 00 00 3E  // .-.F....-.B....>
    AD50: 02 42 41 45 56 02 02 05 00 00 80 00 00 2C 02 00  // .BAEV........,..
    AD60: 00 02 02 01 00 2C 05 01 00 00 02 00 02 89 02 04  // .....,..........
    AD70: 02 09 02 04 02 05 03 00 00 00 40 02 0A 03 41 52  // ..........@...AR
    AD80: 35 52 16 02 01 02 00 14 05 00 18 1A 05 02 08 03  // 5R..............
    AD90: 02 41 00 2D 05 41 00 00 02 00 2D 01 41 00 01 02  // .A.-.A....-.A...
    ADA0: 7B 36 41 03 01 40 04 2D 01 40 02 01 02 7C 36 40  // {6A..@.-.@...|6@
    ADB0: 01 05 68 36 00 00 00 03 01 05 70 36 FF FF 01 83  // ..h6......p6....
    ADC0: 03 02 41 00 2D 05 41 00 00 04 00 2D 01 41 00 01  // ..A.-.A....-.A..
    ADD0: 02 7D 36 41 03 01 40 04 2D 01 40 02 01 02 7E 36  // .}6A..@.-.@...~6
    ADE0: 40 01 05 69 36 00 00 00 04 01 05 71 36 FF FF 00  // @..i6......q6...
    ADF0: 84 03 02 41 00 2D 05 41 00 00 05 00 2D 01 41 00  // ...A.-.A....-.A.
    AE00: 01 02 7F 36 41 03 01 40 04 2D 01 40 02 01 02 80  // ...6A..@.-.@....
    AE10: 36 40 01 05 6A 36 00 00 00 05 01 05 72 36 FF FF  // 6@..j6......r6..
    AE20: 00 85 03 02 41 00 2D 05 41 00 00 06 00 2D 01 41  // ....A.-.A....-.A
    AE30: 00 01 02 81 36 41 03 01 40 04 2D 01 40 02 01 02  // ....6A..@.-.@...
    AE40: 82 36 40 01 05 6B 36 00 00 00 06 01 05 73 36 FF  // .6@..k6......s6.
    AE50: FF 00 86 03 05 46 00 31 00 00 03 02 41 00 2D 05  // .....F.1....A.-.
    AE60: 41 00 00 00 00 2D 01 41 00 03 01 40 04 2D 01 40  // A....-.A...@.-.@
    AE70: 02 04 02 00 41 04 02 01 40 04 05 04 00 00 00 00  // ....A...@.......
    AE80: 04 05 05 00 00 00 00 04 05 06 00 20 00 00 01 05  // ........... ....
    AE90: 94 36 00 00 00 80 01 05 95 36 00 20 00 00 01 02  // .6.......6. ....
    AEA0: 56 36 41 01 02 57 36 40 01 05 61 36 FF FF 00 80  // V6A..W6@..a6....
    AEB0: 01 05 97 36 00 00 00 00 01 05 96 36 00 00 00 00  // ...6.......6....
    AEC0: 03 00 41 96 36 01 05 B1 36 00 00 00 00 5C 05 B6  // ..A.6...6....\..
    AED0: 36 00 FF FF FF C6 00 09 00 07 05 B6 36 FF FF FD  // 6...........6...
    AEE0: FF 03 05 41 50 C3 00 00 4A 05 A3 36 02 00 00 00  // ...AP...J..6....
    AEF0: 49 20 04 51 14 33 05 41 01 00 00 00 3E 05 41 00  // I .Q.3.A....>.A.
    AF00: 00 00 00 49 02 04 5B 00 1E 00 02 01 00 04 37 00  // ...I..[.......7.
    AF10: 00 66 16 03 0C 41 04 00 4C 0D 41 02 00 44 1D 00  // .f...A..L.A..D..
    AF20: 0D A5 4C 00 02 5B 15 00 03 01 04 00 37 00 00 03  // ..L..[......7...
    AF30: 05 46 10 27 00 00 02 02 00 46 5B FF FF FF FF FF  // .F.'.....F[.....
    AF40: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AF50: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AF60: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AF70: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AF80: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AF90: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AFA0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AFB0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AFC0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AFD0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AFE0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AFF0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B000: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B010: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B020: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B030: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B040: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B050: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B060: FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00  // ................
    B070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B080: 00 00 00 00                                      // ....


WDRT
----
[000h 0000   4]                    Signature : "WDRT"    [Watchdog Resource Table]
[004h 0004   4]                 Table Length : 00000047
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : E2
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00000005


[024h 0036  12]             Control Register : [Generic Address Structure]
[024h 0036   1]                     Space ID : 00 [SystemMemory]
[025h 0037   1]                    Bit Width : 20
[026h 0038   1]                   Bit Offset : 00
[027h 0039   1]         Encoded Access Width : 03 [DWord Access:32]
[028h 0040   8]                      Address : 00000000FEB00000

[030h 0048  12]               Count Register : [Generic Address Structure]
[030h 0048   1]                     Space ID : 00 [SystemMemory]
[031h 0049   1]                    Bit Width : 20
[032h 0050   1]                   Bit Offset : 00
[033h 0051   1]         Encoded Access Width : 03 [DWord Access:32]
[034h 0052   8]                      Address : 00000000FEB00004

[03Ch 0060   2]                PCI Device ID : FFFF
[03Eh 0062   2]                PCI Vendor ID : FFFF
[040h 0064   1]                      PCI Bus : 00
[041h 0065   1]                   PCI Device : 00
[042h 0066   1]                 PCI Function : 00
[043h 0067   1]                  PCI Segment : 00
[044h 0068   2]                    Max Count : 03FF
[046h 0070   1]                Counter Units : 00

Raw Table Data: Length 71 (0x47)

    0000: 57 44 52 54 47 00 00 00 01 E2 41 4C 41 53 4B 41  // WDRTG.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 05 00 00 00 00 20 00 03 00 00 B0 FE 00 00 00 00  // ..... ..........
    0030: 00 20 00 03 04 00 B0 FE 00 00 00 00 FF FF FF FF  // . ..............
    0040: 00 00 00 00 FF 03 00                             // .......


WSMT
----
[000h 0000   4]                    Signature : "WSMT"    [Windows SMM Security Mitigations Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 65
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]             Protection Flags : 00000007
                          FIXED_COMM_BUFFERS : 1
           COMM_BUFFER_NESTED_PTR_PROTECTION : 1
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 65 41 4C 41 53 4B 41  // WSMT(....eALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 07 00 00 00                          // ........


