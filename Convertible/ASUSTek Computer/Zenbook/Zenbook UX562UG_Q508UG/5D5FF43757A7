
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20221020
Copyright (c) 2000 - 2022 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00000149  0x01  "AMD   "  "AmdTable"  0x00000001  "INTL"   0x20190509
 02)  MCFG  0x0000003C  0x01  "_ASUS_"  "Notebook"  0x01072009  "MSFT"   0x00010013
 03)  APIC  0x000000DE  0x03  "_ASUS_"  "Notebook"  0x01072009  "AMI "   0x00010013
 04)  ECDT  0x000000C1  0x01  "_ASUS_"  "Notebook"  0x01072009  "AMI."   0x00000005
 05)  CRAT  0x00000F28  0x01  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 06)  SSDT  0x00003A21  0x01  "AMD   "  "AMD AOD "  0x00000001  "INTL"   0x20190509
 07)  TPM2  0x0000004C  0x04  "_ASUS_"  "Notebook"  0x00000001  "AMI "   0x00000000
 08)  VFCT  0x0000D884  0x01  "_ASUS_"  "Notebook"  0x00000001  "AMD "   0x31504F47
 09)  SSDT  0x000036E9  0x01  "AMD   "  "AmdTable"  0x00000001  "INTL"   0x20190509
 10)  CDIT  0x00000029  0x01  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 11)  IVRS  0x000001A4  0x02  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000000
 12)  DSDT  0x0000D475  0x02  "_ASUS_"  "Notebook"  0x01072009  "INTL"   0x20190509
 13)  SSDT  0x0000151E  0x01  "AMD   "  "AmdTable"  0x00000001  "INTL"   0x20190509
 14)  WSMT  0x00000028  0x01  "_ASUS_"  "Notebook"  0x01072009  "AMI "   0x00010013
 15)  SSDT  0x00000489  0x01  "AMD   "  "AmdTable"  0x00000001  "INTL"   0x20190509
 16)  SSDT  0x000007CC  0x01  "AMD   "  "AmdTable"  0x00000001  "INTL"   0x20190509
 17)  SSDT  0x0000008D  0x01  "AMD   "  "AmdTable"  0x00000001  "INTL"   0x20190509
 18)  SSDT  0x00005354  0x02  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 19)  FACP  0x00000114  0x06  "_ASUS_"  "Notebook"  0x01072009  "AMI "   0x00010013
 20)  FPDT  0x00000044  0x01  "_ASUS_"  "A M I   "  0x01072009  "AMI "   0x01000013
 21)  SSDT  0x000072B0  0x02  "AMD   "  "AmdTable"  0x00000002  "MSFT"   0x04000000
 22)  MSDM  0x00000055  0x03  "_ASUS_"  "Notebook"  0x01072009  "ASUS"   0x00000001
 23)  SSDT  0x00003005  0x01  "AMD   "  "AmdTable"  0x00000001  "INTL"   0x20190509
 24)  HPET  0x00000038  0x01  "_ASUS_"  "Notebook"  0x01072009  "AMI "   0x00000005
 25)  SSDT  0x0000148E  0x01  "AMD   "  "AmdTable"  0x00000001  "INTL"   0x20190509
 26)  FIDT  0x0000009C  0x01  "_ASUS_"  "Notebook"  0x01072009  "AMI "   0x00010013
 27)  FACS  0x00000040  0x02
 28)  BGRT  0x00000038  0x01  "_ASUS_"  "Notebook"  0x01072009  "AMI "   0x00010013
 29)  SSDT  0x000008A8  0x01  "AMD   "  "AmdTable"  0x00000001  "INTL"   0x20190509

Found 29 ACPI tables in acpidump

APIC
----
[000h 0000 004h]                   Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004 004h]                Table Length : 000000DE
[008h 0008 001h]                    Revision : 03
[009h 0009 001h]                    Checksum : D1
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "Notebook"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 004h]          Local Apic Address : FEE00000
[028h 0040 004h]       Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044 001h]               Subtable Type : 00 [Processor Local APIC]
[02Dh 0045 001h]                      Length : 08
[02Eh 0046 001h]                Processor ID : 01
[02Fh 0047 001h]               Local Apic ID : 00
[030h 0048 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052 001h]               Subtable Type : 00 [Processor Local APIC]
[035h 0053 001h]                      Length : 08
[036h 0054 001h]                Processor ID : 02
[037h 0055 001h]               Local Apic ID : 01
[038h 0056 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060 001h]               Subtable Type : 00 [Processor Local APIC]
[03Dh 0061 001h]                      Length : 08
[03Eh 0062 001h]                Processor ID : 03
[03Fh 0063 001h]               Local Apic ID : 02
[040h 0064 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068 001h]               Subtable Type : 00 [Processor Local APIC]
[045h 0069 001h]                      Length : 08
[046h 0070 001h]                Processor ID : 04
[047h 0071 001h]               Local Apic ID : 03
[048h 0072 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076 001h]               Subtable Type : 00 [Processor Local APIC]
[04Dh 0077 001h]                      Length : 08
[04Eh 0078 001h]                Processor ID : 05
[04Fh 0079 001h]               Local Apic ID : 04
[050h 0080 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084 001h]               Subtable Type : 00 [Processor Local APIC]
[055h 0085 001h]                      Length : 08
[056h 0086 001h]                Processor ID : 06
[057h 0087 001h]               Local Apic ID : 05
[058h 0088 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092 001h]               Subtable Type : 00 [Processor Local APIC]
[05Dh 0093 001h]                      Length : 08
[05Eh 0094 001h]                Processor ID : 07
[05Fh 0095 001h]               Local Apic ID : 06
[060h 0096 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100 001h]               Subtable Type : 00 [Processor Local APIC]
[065h 0101 001h]                      Length : 08
[066h 0102 001h]                Processor ID : 08
[067h 0103 001h]               Local Apic ID : 07
[068h 0104 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108 001h]               Subtable Type : 00 [Processor Local APIC]
[06Dh 0109 001h]                      Length : 08
[06Eh 0110 001h]                Processor ID : 09
[06Fh 0111 001h]               Local Apic ID : 08
[070h 0112 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[074h 0116 001h]               Subtable Type : 00 [Processor Local APIC]
[075h 0117 001h]                      Length : 08
[076h 0118 001h]                Processor ID : 0A
[077h 0119 001h]               Local Apic ID : 09
[078h 0120 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[07Ch 0124 001h]               Subtable Type : 00 [Processor Local APIC]
[07Dh 0125 001h]                      Length : 08
[07Eh 0126 001h]                Processor ID : 0B
[07Fh 0127 001h]               Local Apic ID : 0A
[080h 0128 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[084h 0132 001h]               Subtable Type : 00 [Processor Local APIC]
[085h 0133 001h]                      Length : 08
[086h 0134 001h]                Processor ID : 0C
[087h 0135 001h]               Local Apic ID : 0B
[088h 0136 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[08Ch 0140 001h]               Subtable Type : 00 [Processor Local APIC]
[08Dh 0141 001h]                      Length : 08
[08Eh 0142 001h]                Processor ID : 0D
[08Fh 0143 001h]               Local Apic ID : 0C
[090h 0144 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[094h 0148 001h]               Subtable Type : 00 [Processor Local APIC]
[095h 0149 001h]                      Length : 08
[096h 0150 001h]                Processor ID : 0E
[097h 0151 001h]               Local Apic ID : 0D
[098h 0152 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[09Ch 0156 001h]               Subtable Type : 00 [Processor Local APIC]
[09Dh 0157 001h]                      Length : 08
[09Eh 0158 001h]                Processor ID : 0F
[09Fh 0159 001h]               Local Apic ID : 0E
[0A0h 0160 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0A4h 0164 001h]               Subtable Type : 00 [Processor Local APIC]
[0A5h 0165 001h]                      Length : 08
[0A6h 0166 001h]                Processor ID : 10
[0A7h 0167 001h]               Local Apic ID : 0F
[0A8h 0168 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0ACh 0172 001h]               Subtable Type : 04 [Local APIC NMI]
[0ADh 0173 001h]                      Length : 06
[0AEh 0174 001h]                Processor ID : FF
[0AFh 0175 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0B1h 0177 001h]        Interrupt Input LINT : 01

[0B2h 0178 001h]               Subtable Type : 01 [I/O APIC]
[0B3h 0179 001h]                      Length : 0C
[0B4h 0180 001h]                 I/O Apic ID : 21
[0B5h 0181 001h]                    Reserved : 00
[0B6h 0182 004h]                     Address : FEC00000
[0BAh 0186 004h]                   Interrupt : 00000000

[0BEh 0190 001h]               Subtable Type : 01 [I/O APIC]
[0BFh 0191 001h]                      Length : 0C
[0C0h 0192 001h]                 I/O Apic ID : 22
[0C1h 0193 001h]                    Reserved : 00
[0C2h 0194 004h]                     Address : FEC01000
[0C6h 0198 004h]                   Interrupt : 00000018

[0CAh 0202 001h]               Subtable Type : 02 [Interrupt Source Override]
[0CBh 0203 001h]                      Length : 0A
[0CCh 0204 001h]                         Bus : 00
[0CDh 0205 001h]                      Source : 00
[0CEh 0206 004h]                   Interrupt : 00000002
[0D2h 0210 002h]       Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[0D4h 0212 001h]               Subtable Type : 02 [Interrupt Source Override]
[0D5h 0213 001h]                      Length : 0A
[0D6h 0214 001h]                         Bus : 00
[0D7h 0215 001h]                      Source : 09
[0D8h 0216 004h]                   Interrupt : 00000009
[0DCh 0220 002h]       Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

Raw Table Data: Length 222 (0xDE)

    0000: 41 50 49 43 DE 00 00 00 03 D1 5F 41 53 55 53 5F  // APIC......_ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 20  // Notebook. ..AMI 
    0020: 13 00 01 00 00 00 E0 FE 01 00 00 00 00 08 01 00  // ................
    0030: 01 00 00 00 00 08 02 01 01 00 00 00 00 08 03 02  // ................
    0040: 01 00 00 00 00 08 04 03 01 00 00 00 00 08 05 04  // ................
    0050: 01 00 00 00 00 08 06 05 01 00 00 00 00 08 07 06  // ................
    0060: 01 00 00 00 00 08 08 07 01 00 00 00 00 08 09 08  // ................
    0070: 01 00 00 00 00 08 0A 09 01 00 00 00 00 08 0B 0A  // ................
    0080: 01 00 00 00 00 08 0C 0B 01 00 00 00 00 08 0D 0C  // ................
    0090: 01 00 00 00 00 08 0E 0D 01 00 00 00 00 08 0F 0E  // ................
    00A0: 01 00 00 00 00 08 10 0F 01 00 00 00 04 06 FF 05  // ................
    00B0: 00 01 01 0C 21 00 00 00 C0 FE 00 00 00 00 01 0C  // ....!...........
    00C0: 22 00 00 10 C0 FE 18 00 00 00 02 0A 00 00 02 00  // "...............
    00D0: 00 00 00 00 02 0A 00 09 09 00 00 00 0F 00        // ..............


BGRT
----
[000h 0000 004h]                   Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 00
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "Notebook"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 002h]                     Version : 0001
[026h 0038 001h]      Status (decoded below) : 00
                                   Displayed : 0
                          Orientation Offset : 0
[027h 0039 001h]                  Image Type : 00
[028h 0040 008h]               Image Address : 00000000A6EFE018
[030h 0048 004h]               Image OffsetX : 000002E0
[034h 0052 004h]               Image OffsetY : 000001B0

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 00 5F 41 53 55 53 5F  // BGRT8....._ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 20  // Notebook. ..AMI 
    0020: 13 00 01 00 01 00 00 00 18 E0 EF A6 00 00 00 00  // ................
    0030: E0 02 00 00 B0 01 00 00                          // ........


CDIT
----
[000h 0000 004h]                   Signature : "CDIT"    
[004h 0004 004h]                Table Length : 00000029
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : E7
[00Ah 0010 006h]                      Oem ID : "AMD"
[010h 0016 008h]                Oem Table ID : "AmdTable"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMD "
[020h 0032 004h]       Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CDIT]


Raw Table Data: Length 41 (0x29)

    0000: 43 44 49 54 29 00 00 00 01 E7 41 4D 44 00 00 00  // CDIT).....AMD...
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 01 00 00 00 0A                       // .........


CRAT
----
[000h 0000 004h]                   Signature : "CRAT"    
[004h 0004 004h]                Table Length : 00000F28
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 54
[00Ah 0010 006h]                      Oem ID : "AMD"
[010h 0016 008h]                Oem Table ID : "AmdTable"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMD "
[020h 0032 004h]       Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CRAT]


Raw Table Data: Length 3880 (0xF28)

    0000: 43 52 41 54 28 0F 00 00 01 54 41 4D 44 00 00 00  // CRAT(....TAMD...
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 3D 00 00 00 00 00 00 00 00 00 00 00  // ....=...........
    0030: 01 28 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0040: 00 00 00 00 00 00 0A 00 00 00 00 00 40 00 00 00  // ............@...
    0050: 00 00 00 00 00 00 00 00 01 28 00 00 01 00 00 00  // .........(......
    0060: 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 F4 AF  // ................
    0070: 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00  // ....@...........
    0080: 01 28 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0090: 01 00 00 00 00 00 00 50 01 00 00 00 40 00 00 00  // .......P....@...
    00A0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    00B0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    00E0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    00F0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0120: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0130: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0150: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0160: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0170: 00 00 00 00 FF 00 00 00 00 00 00 00 00 00 00 00  // ................
    0180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0190: 00 00 00 00 00 10 00 00 03 01 40 00 10 00 01 00  // ..........@.....
    01A0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    01B0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    01C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    01E0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    01F0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0210: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0220: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0230: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0240: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0250: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0260: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0270: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0290: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    02A0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    02B0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    02C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    02E0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    02F0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0310: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0320: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0330: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0340: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0350: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0360: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0370: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0390: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    03A0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    03B0: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    03C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03D0: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    03E0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    03F0: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0410: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0420: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0430: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0440: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0450: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0460: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0470: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0480: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0490: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    04A0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    04B0: 08 00 00 00 00 FF 00 00 00 00 00 00 00 00 00 00  // ................
    04C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04D0: 00 00 00 00 00 10 00 00 03 01 40 00 10 00 01 00  // ..........@.....
    04E0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    04F0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0510: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0520: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0530: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0540: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0550: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0560: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0570: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0590: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    05A0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    05B0: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    05C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    05E0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    05F0: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    0600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0610: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0620: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0630: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    0640: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0650: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0660: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0670: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    0680: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0690: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    06A0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    06B0: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    06C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    06E0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    06F0: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    0700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0710: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0720: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0730: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0740: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0750: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0760: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0770: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0780: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0790: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    07A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    07B0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    07C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07D0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    07E0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    07F0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0810: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0820: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0830: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0850: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0860: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0870: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0880: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0890: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    08A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    08B0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    08C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08D0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    08E0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    08F0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0910: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0920: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0930: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0940: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0950: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0960: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0970: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0980: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0990: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    09A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    09B0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    09C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09D0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    09E0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    09F0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0A00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A10: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0A20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0A30: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A50: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0A60: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0A70: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0AA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0AB0: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AD0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    0AE0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    0AF0: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B10: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0B20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0B30: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0B40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B50: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0B60: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0B70: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0B80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0BA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0BB0: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0BC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BD0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    0BE0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    0BF0: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0C00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C10: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0C20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0C30: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0C40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C50: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0C60: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0C70: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0C80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0CA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0CB0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0CC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CD0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    0CE0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    0CF0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0D00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D10: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0D20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0D30: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    0D40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D50: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0D60: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0D70: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    0D80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0DA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0DB0: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    0DC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DD0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    0DE0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    0DF0: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    0E00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E10: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0E20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0E30: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    0E40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E50: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0E60: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0E70: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    0E80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0EA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0EB0: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    0EC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0ED0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    0EE0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    0EF0: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    0F00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F10: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0F20: 00 00 00 00 00 00 00 00                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 2, "_ASUS_", "Notebook", 0x01072009)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.ALS_, DeviceObj)
    External (_SB_.ALS_.LUXL, UnknownObj)
    External (_SB_.APTS, MethodObj)    // 1 Arguments
    External (_SB_.AWAK, MethodObj)    // 1 Arguments
    External (_SB_.FANF, UnknownObj)
    External (_SB_.PCI0.GP17.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.PEGP, DeviceObj)
    External (_SB_.UBTC, DeviceObj)
    External (_SB_.UBTC.CCI0, UnknownObj)
    External (_SB_.UBTC.CCI1, UnknownObj)
    External (_SB_.UBTC.CCI2, UnknownObj)
    External (_SB_.UBTC.CCI3, UnknownObj)
    External (_SB_.UBTC.CTL0, UnknownObj)
    External (_SB_.UBTC.CTL1, UnknownObj)
    External (_SB_.UBTC.CTL2, UnknownObj)
    External (_SB_.UBTC.CTL3, UnknownObj)
    External (_SB_.UBTC.CTL4, UnknownObj)
    External (_SB_.UBTC.CTL5, UnknownObj)
    External (_SB_.UBTC.CTL6, UnknownObj)
    External (_SB_.UBTC.CTL7, UnknownObj)
    External (_SB_.UBTC.MGI0, UnknownObj)
    External (_SB_.UBTC.MGI1, UnknownObj)
    External (_SB_.UBTC.MGI2, UnknownObj)
    External (_SB_.UBTC.MGI3, UnknownObj)
    External (_SB_.UBTC.MGI4, UnknownObj)
    External (_SB_.UBTC.MGI5, UnknownObj)
    External (_SB_.UBTC.MGI6, UnknownObj)
    External (_SB_.UBTC.MGI7, UnknownObj)
    External (_SB_.UBTC.MGI8, UnknownObj)
    External (_SB_.UBTC.MGI9, UnknownObj)
    External (_SB_.UBTC.MGIA, UnknownObj)
    External (_SB_.UBTC.MGIB, UnknownObj)
    External (_SB_.UBTC.MGIC, UnknownObj)
    External (_SB_.UBTC.MGID, UnknownObj)
    External (_SB_.UBTC.MGIE, UnknownObj)
    External (_SB_.UBTC.MGIF, UnknownObj)
    External (_SB_.UBTC.MGO0, UnknownObj)
    External (_SB_.UBTC.MGO1, UnknownObj)
    External (_SB_.UBTC.MGO2, UnknownObj)
    External (_SB_.UBTC.MGO3, UnknownObj)
    External (_SB_.UBTC.MGO4, UnknownObj)
    External (_SB_.UBTC.MGO5, UnknownObj)
    External (_SB_.UBTC.MGO6, UnknownObj)
    External (_SB_.UBTC.MGO7, UnknownObj)
    External (_SB_.UBTC.MGO8, UnknownObj)
    External (_SB_.UBTC.MGO9, UnknownObj)
    External (_SB_.UBTC.MGOA, UnknownObj)
    External (_SB_.UBTC.MGOB, UnknownObj)
    External (_SB_.UBTC.MGOC, UnknownObj)
    External (_SB_.UBTC.MGOD, UnknownObj)
    External (_SB_.UBTC.MGOE, UnknownObj)
    External (_SB_.UBTC.MGOF, UnknownObj)
    External (AFN4, MethodObj)    // 1 Arguments
    External (CRBI, UnknownObj)
    External (GPUF, UnknownObj)

    Name (PEBL, 0x08000000)
    Name (NBTS, 0x5000)
    Name (CPVD, One)
    Name (SMBB, 0x0B20)
    Name (SMBL, 0x20)
    Name (SMB0, 0x0B00)
    Name (SMBM, 0x10)
    Name (PMBS, 0x0800)
    Name (PMLN, 0xA0)
    Name (SMIO, 0xB2)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (HPTB, 0xFED00000)
    Name (WDTB, Zero)
    Name (WDTL, Zero)
    Name (GIOB, 0xFED81500)
    Name (IOMB, 0xFED80D00)
    Name (SSMB, 0xFED80200)
    Name (CAFS, 0xBB)
    Name (UTDB, Zero)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, Zero)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (ITKE, Zero)
    Name (PEBS, 0xF0000000)
    Name (PELN, 0x08000000)
    Name (CSMI, 0x61)
    Name (SMIA, 0xB2)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, Zero)
    Name (TMF1, Zero)
    Name (TMF2, Zero)
    Name (TMF3, Zero)
    Name (TTPF, Zero)
    Name (DTPT, Zero)
    Name (TTDP, One)
    Name (TPMB, 0xAB31F000)
    Name (TPBS, 0x4000)
    Name (TPMC, 0xAB323000)
    Name (TPCS, 0x4000)
    Name (TPMM, 0xFD210510)
    Name (FTPM, 0xFD210510)
    Name (PPIM, 0xAC954918)
    Name (PPIL, 0x1C)
    Name (AMDT, One)
    Name (TPMF, One)
    Name (PPIV, One)
    Name (MBEC, Zero)
    Name (NBTP, 0xFEC00000)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            \_SB.DSPI ()
            \_SB.PCI0.NAPE ()
        }

        PXXX (Arg0)
    }

    OperationRegion (DEB0, SystemIO, 0x80, 0x04)
    Field (DEB0, DWordAcc, NoLock, Preserve)
    {
        DBG8,   32
    }

    Name (PICM, Zero)
    Method (PXXX, 1, NotSerialized)
    {
        If (Arg0)
        {
            DBGX = 0xAA
        }
        Else
        {
            DBGX = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == Zero))
        {
            DBGX = 0xAC
        }

        OSVR = 0x03
        If (CondRefOf (\_OSI, Local0))
        {
            If (_OSI ("Windows 2001"))
            {
                OSVR = 0x04
            }

            If (_OSI ("Windows 2001.1"))
            {
                OSVR = 0x05
            }

            If (_OSI ("FreeBSD"))
            {
                OSVR = 0x06
            }

            If (_OSI ("HP-UX"))
            {
                OSVR = 0x07
            }

            If (_OSI ("OpenVMS"))
            {
                OSVR = 0x08
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSVR = 0x09
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSVR = 0x0A
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                OSVR = 0x0B
            }

            If (_OSI ("Windows 2006"))
            {
                OSVR = 0x0C
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                OSVR = 0x0D
            }

            If (_OSI ("Windows 2009"))
            {
                OSVR = 0x0E
            }

            If (_OSI ("Windows 2012"))
            {
                OSVR = 0x0F
            }

            If (_OSI ("Windows 2013"))
            {
                OSVR = 0x10
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSVR = Zero
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                OSVR = One
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSVR = 0x02
            }

            If (MCTH (_OS, "Linux"))
            {
                OSVR = 0x03
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                OSVR = 0x06
            }

            If (MCTH (_OS, "HP-UX"))
            {
                OSVR = 0x07
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                OSVR = 0x08
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0){})
        Name (BUF1, Buffer (Local0){})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            PRWP [One] = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [One])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [One])
            }
        }

        If ((DAS3 == Zero))
        {
            If ((Arg1 <= 0x03))
            {
                PRWP [One] = Zero
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (UPWP, 1, NotSerialized)
    {
        If (DerefOf (WAKP [Zero]))
        {
            WAKP [One] = Zero
        }
        Else
        {
            WAKP [One] = Arg0
        }
    }

    OperationRegion (DEB3, SystemIO, 0x80, One)
    Field (DEB3, ByteAcc, NoLock, Preserve)
    {
        DBGX,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0xFFFF)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    OperationRegion (GNVS, SystemMemory, 0xAC954C18, 0x0D)
    Field (GNVS, AnyAcc, Lock, Preserve)
    {
        CNSB,   8, 
        RDHW,   8, 
        DAS3,   8, 
        ALST,   8, 
        NFCS,   8, 
        MWTT,   8, 
        DPTC,   8, 
        WOVS,   8, 
        WCRS,   8, 
        THPN,   8, 
        THPD,   8, 
        RV2I,   8, 
        ISDS,   8
    }

    OperationRegion (DEB2, SystemIO, 0x80, 0x04)
    Field (DEB2, DWordAcc, NoLock, Preserve)
    {
        P80H,   32
    }

    Name (OSTY, Ones)
    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ACMX,   8, 
        ACMA,   8
    }

    IndexField (ACMX, ACMA, ByteAcc, NoLock, Preserve)
    {
        Offset (0xB9), 
        IMEN,   8
    }

    OperationRegion (PSMI, SystemIO, SMIO, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    OperationRegion (PMRG, SystemMemory, 0xFED80300, 0x0100)
    Field (PMRG, AnyAcc, NoLock, Preserve)
    {
            ,   6, 
        HPEN,   1, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1
    }

    OperationRegion (GSMG, SystemMemory, 0xFED81500, 0x03FF)
    Field (GSMG, AnyAcc, NoLock, Preserve)
    {
        Offset (0x5C), 
        Offset (0x5E), 
        GS23,   1, 
            ,   5, 
        GV23,   1, 
        GE23,   1, 
        Offset (0xA0), 
        Offset (0xA2), 
        GS40,   1, 
            ,   5, 
        GV40,   1, 
        GE40,   1
    }

    OperationRegion (GSMM, SystemMemory, 0xFED80000, 0x1000)
    Field (GSMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x288), 
            ,   1, 
        CLPS,   1, 
        Offset (0x296), 
            ,   7, 
        TMSE,   1, 
        Offset (0x2B0), 
            ,   2, 
        SLPS,   2
    }

    OperationRegion (PMI2, SystemMemory, 0xFED80300, 0x0100)
    Field (PMI2, AnyAcc, NoLock, Preserve)
    {
        Offset (0xBB), 
            ,   6, 
        PWDE,   1, 
        Offset (0xBC)
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   6, 
        PEWS,   1, 
        WSTA,   1, 
        Offset (0x03), 
            ,   6, 
        PEWD,   1
    }

    OperationRegion (IOCC, SystemIO, PMBS, 0x80)
    Field (IOCC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   2, 
        RTCS,   1
    }

    Method (SPTS, 1, NotSerialized)
    {
        P80H = Arg0
        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        CLPS = One
        SLPS = One
        PEWS = PEWS /* \PEWS */
        If ((Arg0 == 0x03))
        {
            SLPS = One
        }

        If ((Arg0 == 0x04))
        {
            SLPS = One
            RSTU = One
        }

        If ((Arg0 == 0x05))
        {
            PWDE = One
        }
    }

    Method (SWAK, 1, NotSerialized)
    {
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        PEWS = PEWS /* \PEWS */
        PEWD = Zero
        If (PICM)
        {
            \_SB.DSPI ()
        }

        If (TMSE)
        {
            TMSE = Zero
        }

        If ((Arg0 == 0x03))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        If ((Arg0 == 0x04))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_GPE)
    {
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {4,5,7,10,11,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PD14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1F
            }
        })
        Name (PD18, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR18, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x23
            }
        })
        Name (PD1C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR1C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x27
            }
        })
        Name (PD20, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR20, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2B
            }
        })
        Name (PD24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2F
            }
        })
        Name (PD28, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR28, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x30
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x31
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x32
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x33
            }
        })
        Name (PD38, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR38, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x25
            }
        })
        Name (PD39, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR39, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x21
            }
        })
        Name (PD3A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR3A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1D
            }
        })
        Name (PD00, Package (0x0E)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                Zero
            }
        })
        Name (AR00, Package (0x0E)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                One, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x2A
            }
        })
        Name (PD10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1B
            }
        })
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PD00) /* \_SB_.PD00 */
            }

            Device (AMDN)
            {
                Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                Name (_UID, 0xC8)  // _UID: Unique ID
                Name (_STA, 0x0F)  // _STA: Status
                Name (NPTR, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y00)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._LEN, PL)  // _LEN: Length
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._BAS, PB)  // _BAS: Base Address
                    PB = PEBS /* \PEBS */
                    PL = PEBL /* \PEBL */
                    Return (NPTR) /* \_SB_.PCI0.AMDN.NPTR */
                }
            }

            Method (NPTS, 1, NotSerialized)
            {
                APTS (Arg0)
            }

            Method (NWAK, 1, NotSerialized)
            {
                AWAK (Arg0)
            }

            Name (CPRB, One)
            Name (LVGA, 0x01)
            Name (STAV, 0x0F)
            Name (BRB, 0x0000)
            Name (BRL, 0x0100)
            Name (IOB, 0x1000)
            Name (IOL, 0xF000)
            Name (MBB, 0xB0000000)
            Name (MBL, 0x50000000)
            Name (MAB, 0x0000000000000000)
            Name (MAL, 0x0000000000000000)
            Name (MAM, 0x0000000000000000)
            Name (CRS1, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x007F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y01)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x03AF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x03B0,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x03E0,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0918,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y03, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0x0FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0300,             // Length
                    ,, _Y02, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
            })
            Name (CRS2, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0080,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y08)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y0A, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y09, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (STAV) /* \_SB_.PCI0.STAV */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                DBG8 = 0x25
                If (CPRB)
                {
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MIN, MIN0)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MAX, MAX0)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._LEN, LEN0)  // _LEN: Length
                    MIN0 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN0 = BRL /* \_SB_.PCI0.BRL_ */
                    Local0 = LEN0 /* \_SB_.PCI0._CRS.LEN0 */
                    MAX0 = (MIN0 + Local0--)
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MIN, MIN1)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MAX, MAX1)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._LEN, LEN1)  // _LEN: Length
                    If ((IOB == 0x1000))
                    {
                        Local0 = IOL /* \_SB_.PCI0.IOL_ */
                        MAX1 = (IOB + Local0--)
                        Local0 = (MAX1 - MIN1) /* \_SB_.PCI0._CRS.MIN1 */
                        LEN1 = (Local0 + One)
                    }
                    Else
                    {
                        MIN1 = IOB /* \_SB_.PCI0.IOB_ */
                        LEN1 = IOL /* \_SB_.PCI0.IOL_ */
                        Local0 = LEN1 /* \_SB_.PCI0._CRS.LEN1 */
                        MAX1 = (MIN1 + Local0--)
                    }

                    If (((LVGA == One) || (LVGA == 0x55)))
                    {
                        If (VGAF)
                        {
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MIN, IMN1)  // _MIN: Minimum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MAX, IMX1)  // _MAX: Maximum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._LEN, ILN1)  // _LEN: Length
                            IMN1 = 0x03B0
                            IMX1 = 0x03DF
                            ILN1 = 0x30
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MIN, VMN1)  // _MIN: Minimum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MAX, VMX1)  // _MAX: Maximum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._LEN, VLN1)  // _LEN: Length
                            VMN1 = 0x000A0000
                            VMX1 = 0x000BFFFF
                            VLN1 = 0x00020000
                            VGAF = Zero
                        }
                    }

                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MIN, MIN3)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MAX, MAX3)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._LEN, LEN3)  // _LEN: Length
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MIN, MIN7)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MAX, MAX7)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._LEN, LEN7)  // _LEN: Length
                    Local0 = (MBB + MBL) /* \_SB_.PCI0.MBL_ */
                    If ((Local0 < NBTP))
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = MBL /* \_SB_.PCI0.MBL_ */
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = Zero
                        MAX7 = Zero
                        LEN7 = Zero
                    }
                    Else
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = (NBTP - MBB)
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = 0xFEE00000
                        Local0 = (0xFEE00000 - NBTP)
                        LEN7 = (MBL - Local0)
                        LEN7 = (LEN7 - LEN3)
                        Local0 = LEN7 /* \_SB_.PCI0._CRS.LEN7 */
                        MAX7 = (MIN7 + Local0--)
                    }

                    If (MAL)
                    {
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MIN, MN8)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MAX, MX8)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._LEN, LN8)  // _LEN: Length
                        MN8 = MAB /* \_SB_.PCI0.MAB_ */
                        LN8 = MAL /* \_SB_.PCI0.MAL_ */
                        MX8 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    DBG8 = 0x24
                    Return (CRS1) /* \_SB_.PCI0.CRS1 */
                }
                Else
                {
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MIN, MIN2)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MAX, MAX2)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._LEN, LEN2)  // _LEN: Length
                    MIN2 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN2 = BRL /* \_SB_.PCI0.BRL_ */
                    Local1 = LEN2 /* \_SB_.PCI0._CRS.LEN2 */
                    MAX2 = (MIN2 + Local1--)
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MIN, MIN4)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MAX, MAX4)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._LEN, LEN4)  // _LEN: Length
                    MIN4 = IOB /* \_SB_.PCI0.IOB_ */
                    LEN4 = IOL /* \_SB_.PCI0.IOL_ */
                    Local1 = LEN4 /* \_SB_.PCI0._CRS.LEN4 */
                    MAX4 = (MIN4 + Local1--)
                    If (LVGA)
                    {
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MIN, IMN2)  // _MIN: Minimum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MAX, IMX2)  // _MAX: Maximum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._LEN, ILN2)  // _LEN: Length
                        IMN2 = 0x03B0
                        IMX2 = 0x03DF
                        ILN2 = 0x30
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MIN, VMN2)  // _MIN: Minimum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MAX, VMX2)  // _MAX: Maximum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._LEN, VLN2)  // _LEN: Length
                        VMN2 = 0x000A0000
                        VMX2 = 0x000BFFFF
                        VLN2 = 0x00020000
                    }

                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MIN, MIN5)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MAX, MAX5)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._LEN, LEN5)  // _LEN: Length
                    MIN5 = MBB /* \_SB_.PCI0.MBB_ */
                    LEN5 = (NBTP - MBB)
                    Local1 = LEN5 /* \_SB_.PCI0._CRS.LEN5 */
                    MAX5 = (MIN5 + Local1--)
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MIN, MIN6)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MAX, MAX6)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._LEN, LEN6)  // _LEN: Length
                    MIN6 = (NBTP + NBTS) /* \NBTS */
                    LEN6 = (MBL - NBTS)
                    LEN6 = (LEN6 - LEN5)
                    Local0 = LEN6 /* \_SB_.PCI0._CRS.LEN6 */
                    MAX6 = (MIN6 + Local0--)
                    If (MAL)
                    {
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MIN, MN9)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MAX, MX9)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._LEN, LN9)  // _LEN: Length
                        MN9 = MAB /* \_SB_.PCI0.MAB_ */
                        LN9 = MAL /* \_SB_.PCI0.MAL_ */
                        MX9 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    DBG8 = 0x23
                    Return (CRS2) /* \_SB_.PCI0.CRS2 */
                }
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, Zero)
                Name (CTRL, Zero)
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    If (!PEHP)
                    {
                        CTRL &= 0x1E
                    }

                    If (!SHPC)
                    {
                        CTRL &= 0x1D
                    }

                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            Mutex (NAPM, 0x00)
            Method (NAPE, 0, NotSerialized)
            {
                Acquire (NAPM, 0xFFFF)
                DBG8 = 0x11
                Local0 = (PEBS + 0xB8)
                OperationRegion (VARM, SystemMemory, Local0, 0x08)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    NAPX,   32, 
                    NAPD,   32
                }

                Local1 = NAPX /* \_SB_.PCI0.NAPE.NAPX */
                NAPX = 0x14300000
                Local0 = NAPD /* \_SB_.PCI0.NAPE.NAPD */
                Local0 &= 0xFFFFFFEF
                NAPD = Local0
                NAPX = Local1
                DBG8 = 0x12
                Release (NAPM)
            }

            Device (IOMA)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x15)  // _UID: Unique ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    Memory32Fixed (ReadOnly,
                        0xFEB80000,         // Address Base
                        0x00080000,         // Address Length
                        )
                })
            }

            Device (D003)
            {
                Name (_ADR, Zero)  // _ADR: Address
            }

            Device (GPP1)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Device (DEV0)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (DEV1)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Method (MPRW, 0, NotSerialized)
                {
                    Return (GPRW (0x08, Zero))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR14) /* \_SB_.AR14 */
                    }

                    Return (PD14) /* \_SB_.PD14 */
                }

                Device (D006)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP2)
            {
                Name (_ADR, 0x00010003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0D, 0x04))
                }

                Method (MPRW, 0, NotSerialized)
                {
                    Return (GPRW (0x0D, Zero))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR18) /* \_SB_.AR18 */
                    }

                    Return (PD18) /* \_SB_.PD18 */
                }

                Device (D008)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP3)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0F, 0x04))
                }

                Method (MPRW, 0, NotSerialized)
                {
                    Return (GPRW (0x0F, Zero))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR1C) /* \_SB_.AR1C */
                    }

                    Return (PD1C) /* \_SB_.PD1C */
                }

                Device (D00A)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP4)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0E, 0x04))
                }

                Method (MPRW, 0, NotSerialized)
                {
                    Return (GPRW (0x0E, Zero))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR20) /* \_SB_.AR20 */
                    }

                    Return (PD20) /* \_SB_.PD20 */
                }

                Device (WLAN)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (GPP5)
            {
                Name (_ADR, 0x00020003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (MPRW, 0, NotSerialized)
                {
                    Return (GPRW (0x08, Zero))
                }

                Device (DEV0)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR24) /* \_SB_.AR24 */
                    }

                    Return (PD24) /* \_SB_.PD24 */
                }

                Device (D00D)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP6)
            {
                Name (_ADR, 0x00020004)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR28) /* \_SB_.AR28 */
                    }

                    Return (PD28) /* \_SB_.PD28 */
                }

                Device (D00F)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GP17)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (MPRW, 0, NotSerialized)
                {
                    Return (GPRW (0x19, Zero))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR38) /* \_SB_.AR38 */
                    }

                    Return (PD38) /* \_SB_.PD38 */
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (AF7E, 0x80000001)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (DOSA, Zero)
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSA = Arg0
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x07)
                        {
                            0x00010110, 
                            0x00010210, 
                            0x00010220, 
                            0x00010230, 
                            0x00010240, 
                            0x00031000, 
                            0x00032000
                        })
                    }

                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Name (BCLB, Package (0x34)
                        {
                            0x5A, 
                            0x3C, 
                            0x02, 
                            0x04, 
                            0x06, 
                            0x08, 
                            0x0A, 
                            0x0C, 
                            0x0E, 
                            0x10, 
                            0x12, 
                            0x14, 
                            0x16, 
                            0x18, 
                            0x1A, 
                            0x1C, 
                            0x1E, 
                            0x20, 
                            0x22, 
                            0x24, 
                            0x26, 
                            0x28, 
                            0x2A, 
                            0x2C, 
                            0x2E, 
                            0x30, 
                            0x32, 
                            0x34, 
                            0x36, 
                            0x38, 
                            0x3A, 
                            0x3C, 
                            0x3E, 
                            0x40, 
                            0x42, 
                            0x44, 
                            0x46, 
                            0x48, 
                            0x4A, 
                            0x4C, 
                            0x4E, 
                            0x50, 
                            0x52, 
                            0x54, 
                            0x56, 
                            0x58, 
                            0x5A, 
                            0x5C, 
                            0x5E, 
                            0x60, 
                            0x62, 
                            0x64
                        })
                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            Return (BCLB) /* \_SB_.PCI0.GP17.VGA_.LCD_.BCLB */
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            If ((AF7E == 0x80000001))
                            {
                                Divide ((Arg0 * 0xFF), 0x64, Local1, Local0)
                                AFN7 (Local0)
                            }
                        }
                    }
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (ACP)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }

                Device (AZAL)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }

                Device (MP2C)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                }

                Device (APSP)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (PSPA, 0xFD000000)
                    Name (LENA, 0x01000000)
                    Name (PSPB, 0x00000000)
                    Name (LENB, 0x00000000)
                    Name (_STA, 0x0F)  // _STA: Status
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0F)
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y10)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.GP17.APSP._Y0F._BAS, ABAS)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.GP17.APSP._Y0F._LEN, ALEN)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.PCI0.GP17.APSP._Y10._BAS, BBAS)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.GP17.APSP._Y10._LEN, BLEN)  // _LEN: Length
                        ABAS = PSPA /* \_SB_.PCI0.GP17.APSP.PSPA */
                        ALEN = LENA /* \_SB_.PCI0.GP17.APSP.LENA */
                        BBAS = PSPB /* \_SB_.PCI0.GP17.APSP.PSPB */
                        BLEN = LENB /* \_SB_.PCI0.GP17.APSP.LENB */
                        Return (CRS) /* \_SB_.PCI0.GP17.APSP.CRS_ */
                    }
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x19, 0x04))
                    }

                    Method (MPRW, 0, NotSerialized)
                    {
                        Return (GPRW (0x19, Zero))
                    }
                }

                Device (XHC1)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x19, 0x04))
                    }

                    Method (MPRW, 0, NotSerialized)
                    {
                        Return (GPRW (0x19, Zero))
                    }
                }
            }

            Device (GP18)
            {
                Name (_ADR, 0x00080002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR39) /* \_SB_.AR39 */
                    }

                    Return (PD39) /* \_SB_.PD39 */
                }

                Device (SATA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }

                Device (SAT1)
                {
                    Name (_ADR, One)  // _ADR: Address
                }
            }

            Device (GP19)
            {
                Name (_ADR, 0x00080003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (MPRW, 0, NotSerialized)
                {
                    Return (GPRW (0x08, Zero))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR3A) /* \_SB_.AR3A */
                    }

                    Return (PD3A) /* \_SB_.PD3A */
                }

                Device (D026)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }

                Device (D027)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (D028)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }
            }

            Device (D020)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
            }

            Device (SBRG)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.SBRG.RTC0.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.SBRG.RTC0.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                OperationRegion (SMI0, SystemIO, SMIO, One)
                Field (SMI0, ByteAcc, NoLock, Preserve)
                {
                    SMIC,   8
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Device (S900)
                        {
                            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                            Name (_UID, 0x0700)  // _UID: Unique ID
                            Name (_STA, 0x0F)  // _STA: Status
                            Name (CRS, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0010,             // Range Minimum
                                    0x0010,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0022,             // Range Minimum
                                    0x0022,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x0063,             // Range Minimum
                                    0x0063,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0065,             // Range Minimum
                                    0x0065,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0067,             // Range Minimum
                                    0x0067,             // Range Maximum
                                    0x00,               // Alignment
                                    0x09,               // Length
                                    )
                                IO (Decode16,
                                    0x0072,             // Range Minimum
                                    0x0072,             // Range Maximum
                                    0x00,               // Alignment
                                    0x0E,               // Length
                                    )
                                IO (Decode16,
                                    0x0080,             // Range Minimum
                                    0x0080,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0084,             // Range Minimum
                                    0x0084,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0088,             // Range Minimum
                                    0x0088,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x008C,             // Range Minimum
                                    0x008C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0090,             // Range Minimum
                                    0x0090,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x00A2,             // Range Minimum
                                    0x00A2,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x00B1,             // Range Minimum
                                    0x00B1,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x00E0,             // Range Minimum
                                    0x00E0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x04D0,             // Range Minimum
                                    0x04D0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x040B,             // Range Minimum
                                    0x040B,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x04D6,             // Range Minimum
                                    0x04D6,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C00,             // Range Minimum
                                    0x0C00,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C14,             // Range Minimum
                                    0x0C14,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C50,             // Range Minimum
                                    0x0C50,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C52,             // Range Minimum
                                    0x0C52,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6C,             // Range Minimum
                                    0x0C6C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6F,             // Range Minimum
                                    0x0C6F,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD8,             // Range Minimum
                                    0x0CD8,             // Range Maximum
                                    0x00,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y11)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y13)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y12)
                                IO (Decode16,
                                    0x0900,             // Range Minimum
                                    0x0900,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0910,             // Range Minimum
                                    0x0910,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0060,             // Range Minimum
                                    0x0060,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                IO (Decode16,
                                    0x0064,             // Range Minimum
                                    0x0064,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y14)
                                Memory32Fixed (ReadWrite,
                                    0xFEC01000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEDC0000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEE00000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFED80000,         // Address Base
                                    0x00010000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y15)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y16)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y17)
                            })
                            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                            {
                                CreateWordField (CRS, \_SB.PCI0.S900._Y11._MIN, PBB)  // _MIN: Minimum Base Address
                                CreateWordField (CRS, \_SB.PCI0.S900._Y11._MAX, PBH)  // _MAX: Maximum Base Address
                                CreateByteField (CRS, \_SB.PCI0.S900._Y11._LEN, PML)  // _LEN: Length
                                PBB = PMBS /* \PMBS */
                                PBH = PMBS /* \PMBS */
                                PML = PMLN /* \PMLN */
                                If (SMBB)
                                {
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y12._MIN, SMB1)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y12._MAX, SMH1)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y12._LEN, SML1)  // _LEN: Length
                                    SMB1 = SMBB /* \SMBB */
                                    SMH1 = SMBB /* \SMBB */
                                    SML1 = SMBL /* \SMBL */
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y13._MIN, SMBZ)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y13._MAX, SMH0)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y13._LEN, SML0)  // _LEN: Length
                                    SMBZ = SMB0 /* \SMB0 */
                                    SMH0 = SMB0 /* \SMB0 */
                                    SML0 = SMBM /* \SMBM */
                                }

                                If (APCB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y14._BAS, APB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y14._LEN, APL)  // _LEN: Length
                                    APB = APCB /* \APCB */
                                    APL = APCL /* \APCL */
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y15._BAS, SPIB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y15._LEN, SPIL)  // _LEN: Length
                                SPIB = 0xFEC10000
                                SPIL = 0x1000
                                If (WDTB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y16._BAS, WDTB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y16._LEN, WDTL)  // _LEN: Length
                                    WDTB = \WDTB
                                    WDTL = \WDTL
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y17._BAS, ROMB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y17._LEN, ROML)  // _LEN: Length
                                ROMB = 0xFF000000
                                ROML = 0x01000000
                                Return (CRS) /* \_SB_.PCI0.S900.CRS_ */
                            }
                        }
                    }
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Scope (SBRG)
                        {
                            Method (RRIO, 4, NotSerialized)
                            {
                                Debug = "RRIO"
                            }

                            Method (RDMA, 3, NotSerialized)
                            {
                                Debug = "rDMA"
                            }
                        }
                    }
                }
            }

            Device (D023)
            {
                Name (_ADR, 0x00140006)  // _ADR: Address
            }

            Device (GPP0)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (MPRW, 0, NotSerialized)
                {
                    Return (GPRW (0x08, Zero))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR10) /* \_SB_.AR10 */
                    }

                    Return (PD10) /* \_SB_.PD10 */
                }

                Device (D004)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP1, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP5, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP18, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP0, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP2, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L0F, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP3, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L0E, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP4, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L19, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GP17, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.XHC0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.XHC1, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x03, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            ASFS (Arg0)
            \_SB.PCI0.SBRG.EC0.EC0S (Arg0)
            \_SB.TPM.TPTS (Arg0)
            SPTS (Arg0)
            \_SB.PCI0.NPTS (Arg0)
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        \_SB.PCI0.NWAK (Arg0)
        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If ((PICM != Zero))
            {
                \_SB.PCI0.NAPE ()
            }
        }

        DBG8 = (Arg0 << 0x04)
        SWAK (Arg0)
        \_SB.PCI0.SBRG.EC0.EC0W (Arg0)
        Return (WAKP) /* \WAKP */
    }

    Scope (_SB)
    {
        Device (PLTF)
        {
            Name (_HID, "ACPI0010" /* Processor Container Device */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A05") /* Generic Container Device */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Device (P000)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
            }

            Device (P001)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
            }

            Device (P002)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
            }

            Device (P003)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x04)  // _UID: Unique ID
            }

            Device (P004)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x05)  // _UID: Unique ID
            }

            Device (P005)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x06)  // _UID: Unique ID
            }

            Device (P006)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x07)  // _UID: Unique ID
            }

            Device (P007)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x08)  // _UID: Unique ID
            }

            Device (P008)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x09)  // _UID: Unique ID
            }

            Device (P009)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0A)  // _UID: Unique ID
            }

            Device (P00A)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0B)  // _UID: Unique ID
            }

            Device (P00B)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0C)  // _UID: Unique ID
            }

            Device (P00C)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0D)  // _UID: Unique ID
            }

            Device (P00D)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0E)  // _UID: Unique ID
            }

            Device (P00E)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0F)  // _UID: Unique ID
            }

            Device (P00F)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x10)  // _UID: Unique ID
            }
        }
    }

    Scope (_SB)
    {
        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x0C), 
            SIRA,   8, 
            SIRB,   8, 
            SIRC,   8, 
            SIRD,   8, 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x17), 
            SDCL,   8, 
            Offset (0x1A), 
            SDIO,   8, 
            Offset (0x30), 
            USB1,   8, 
            Offset (0x34), 
            USB3,   8, 
            Offset (0x41), 
            SATA,   8, 
            Offset (0x62), 
            GIOC,   8, 
            Offset (0x70), 
            I2C0,   8, 
            I2C1,   8, 
            I2C2,   8, 
            I2C3,   8, 
            URT0,   8, 
            URT1,   8, 
            Offset (0x80), 
            AIRA,   8, 
            AIRB,   8, 
            AIRC,   8, 
            AIRD,   8, 
            AIRE,   8, 
            AIRF,   8, 
            AIRG,   8, 
            AIRH,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (DSPI, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \_SB_.PD64 */
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
            Local1 = PD64 /* \_SB_.PD64 */
            AIRA = 0x10
            AIRB = 0x11
            AIRC = 0x12
            AIRD = 0x13
            AIRE = 0x14
            AIRF = 0x15
            AIRG = 0x16
            AIRH = 0x17
        }

        Method (INTA, 1, NotSerialized)
        {
            PIRA = Arg0
            HDAD = Arg0
        }

        Method (INTB, 1, NotSerialized)
        {
            PIRB = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            PIRC = Arg0
            USB1 = Arg0
            USB3 = Arg0
        }

        Method (INTD, 1, NotSerialized)
        {
            PIRD = Arg0
            SATA = Arg0
        }

        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTA (Local0)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTB (Local0)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTC (Local0)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTD (Local0)
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (PIRE, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Name (LINX, Zero)
    Name (OSSP, Zero)
    Method (SEQL, 2, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Local1 = SizeOf (Arg1)
        If ((Local0 != Local1))
        {
            Return (Zero)
        }

        Name (BUF0, Buffer (Local0){})
        BUF0 = Arg0
        Name (BUF1, Buffer (Local0){})
        BUF1 = Arg1
        Local2 = Zero
        While ((Local2 < Local0))
        {
            Local3 = DerefOf (BUF0 [Local2])
            Local4 = DerefOf (BUF1 [Local2])
            If ((Local3 != Local4))
            {
                Return (Zero)
            }

            Local2++
        }

        Return (One)
    }

    Method (OSTP, 0, NotSerialized)
    {
        If ((OSTB == Ones))
        {
            If (CondRefOf (\_OSI, Local0))
            {
                OSTB = Zero
                TPOS = Zero
                If (_OSI ("Windows 2001"))
                {
                    OSTB = 0x08
                    TPOS = 0x08
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTB = 0x20
                    TPOS = 0x20
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTB = 0x10
                    TPOS = 0x10
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTB = 0x11
                    TPOS = 0x11
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    OSTB = 0x12
                    TPOS = 0x12
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSTB = 0x41
                    TPOS = 0x41
                    OSSP = One
                }

                If (_OSI ("Windows 2009"))
                {
                    OSSP = One
                    OSTB = 0x50
                    TPOS = 0x50
                }

                If (_OSI ("Windows 2012"))
                {
                    OSSP = One
                    OSTB = 0x60
                    TPOS = 0x60
                }

                If (_OSI ("Windows 2013"))
                {
                    OSSP = One
                    OSTB = 0x61
                    TPOS = 0x61
                }

                If (_OSI ("Windows 2015"))
                {
                    OSSP = One
                    OSTB = 0x70
                    TPOS = 0x70
                }

                If (_OSI ("Linux"))
                {
                    LINX = One
                    OSTB = 0x80
                    TPOS = 0x80
                }
            }
            ElseIf (CondRefOf (\_OS, Local0))
            {
                If (SEQL (_OS, "Microsoft Windows"))
                {
                    OSTB = One
                    TPOS = One
                }
                ElseIf (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                {
                    OSTB = 0x02
                    TPOS = 0x02
                }
                ElseIf (SEQL (_OS, "Microsoft Windows NT"))
                {
                    OSTB = 0x04
                    TPOS = 0x04
                }
                Else
                {
                    OSTB = Zero
                    TPOS = Zero
                }
            }
            Else
            {
                OSTB = Zero
                TPOS = Zero
            }
        }

        Return (OSTB) /* \OSTB */
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If ((PICM != Zero))
            {
                DSPI ()
                NAPE ()
            }

            OSTP ()
            OSFL ()
        }
    }

    Device (HPET)
    {
        Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((HPEN == One))
            {
                If ((OSVR >= 0x0C))
                {
                    Return (0x0F)
                }

                HPEN = Zero
                Return (One)
            }

            Return (One)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            Name (BUF0, ResourceTemplate ()
            {
                IRQNoFlags ()
                    {0}
                IRQNoFlags ()
                    {8}
                Memory32Fixed (ReadOnly,
                    0xFED00000,         // Address Base
                    0x00000400,         // Address Length
                    )
            })
            Return (BUF0) /* \HPET._CRS.BUF0 */
        }
    }

    Name (TSOS, 0x75)
    If (CondRefOf (\_OSI))
    {
        If (_OSI ("Windows 2009"))
        {
            TSOS = 0x50
        }

        If (_OSI ("Windows 2015"))
        {
            TSOS = 0x70
        }
    }

    Scope (_SB)
    {
        OperationRegion (SMIC, SystemMemory, 0xFED80000, 0x00800000)
        Field (SMIC, ByteAcc, NoLock, Preserve)
        {
            Offset (0x36A), 
            SMIB,   8
        }

        OperationRegion (SSMI, SystemIO, SMIB, 0x02)
        Field (SSMI, AnyAcc, NoLock, Preserve)
        {
            SMIW,   16
        }

        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            FRTB,   32
        }

        OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
        Field (FRTP, AnyAcc, NoLock, Preserve)
        {
            PEBA,   32, 
                ,   5, 
            IC0E,   1, 
            IC1E,   1, 
            IC2E,   1, 
            IC3E,   1, 
            IC4E,   1, 
            IC5E,   1, 
            UT0E,   1, 
            UT1E,   1, 
                ,   1, 
                ,   1, 
            ST_E,   1, 
            UT2E,   1, 
                ,   1, 
            EMMD,   2, 
                ,   3, 
            XHCE,   1, 
                ,   1, 
                ,   1, 
            UT3E,   1, 
            ESPI,   1, 
            EMME,   1, 
            HFPE,   1, 
            Offset (0x08), 
            PCEF,   1, 
                ,   4, 
            IC0D,   1, 
            IC1D,   1, 
            IC2D,   1, 
            IC3D,   1, 
            IC4D,   1, 
            IC5D,   1, 
            UT0D,   1, 
            UT1D,   1, 
                ,   1, 
                ,   1, 
            ST_D,   1, 
            UT2D,   1, 
                ,   1, 
            EHCD,   1, 
                ,   4, 
            XHCD,   1, 
            SD_D,   1, 
                ,   1, 
            UT3D,   1, 
                ,   1, 
            EMD3,   1, 
                ,   2, 
            S03D,   1, 
            FW00,   16, 
            FW01,   32, 
            FW02,   16, 
            FW03,   32, 
            SDS0,   8, 
            SDS1,   8, 
            CZFG,   1, 
            Offset (0x20), 
            SD10,   32, 
            EH10,   32, 
            XH10,   32, 
            STBA,   32
        }

        OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
        Field (FCFG, DWordAcc, NoLock, Preserve)
        {
            Offset (0xA3044), 
            IPDE,   32, 
            IMPE,   32, 
            Offset (0xA3078), 
                ,   2, 
            LDQ0,   1, 
            Offset (0xA30CB), 
                ,   7, 
            AUSS,   1
        }

        OperationRegion (IOMX, SystemMemory, 0xFED80D00, 0x0100)
        Field (IOMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x15), 
            IM15,   8, 
            IM16,   8, 
            Offset (0x1F), 
            IM1F,   8, 
            IM20,   8, 
            Offset (0x44), 
            IM44,   8, 
            Offset (0x46), 
            IM46,   8, 
            Offset (0x4A), 
            IM4A,   8, 
            IM4B,   8, 
            Offset (0x57), 
            IM57,   8, 
            IM58,   8, 
            Offset (0x68), 
            IM68,   8, 
            IM69,   8, 
            IM6A,   8, 
            IM6B,   8, 
            Offset (0x6D), 
            IM6D,   8
        }

        OperationRegion (FACR, SystemMemory, 0xFED81E00, 0x0100)
        Field (FACR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x80), 
                ,   28, 
            RD28,   1, 
                ,   1, 
            RQTY,   1, 
            Offset (0x84), 
                ,   28, 
            SD28,   1, 
                ,   1, 
            Offset (0xA0), 
            PG1A,   1
        }

        OperationRegion (EMMX, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0xD0), 
                ,   17, 
            FC18,   1, 
            FC33,   1, 
                ,   7, 
            CD_T,   1, 
            WP_T,   1
        }

        OperationRegion (EMMB, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMB, AnyAcc, NoLock, Preserve)
        {
            Offset (0xA4), 
            E0A4,   32, 
            E0A8,   32, 
            Offset (0xB0), 
            E0B0,   32, 
            Offset (0xD0), 
            E0D0,   32, 
            Offset (0x116), 
            E116,   32
        }

        Name (SVBF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        CreateDWordField (SVBF, Zero, S0A4)
        CreateDWordField (SVBF, 0x04, S0A8)
        CreateDWordField (SVBF, 0x08, S0B0)
        CreateDWordField (SVBF, 0x0C, S0D0)
        CreateDWordField (SVBF, 0x10, S116)
        Method (SECR, 0, Serialized)
        {
            S116 = E116 /* \_SB_.E116 */
            RQTY = Zero
            RD28 = One
            Local0 = SD28 /* \_SB_.SD28 */
            While (Local0)
            {
                Local0 = SD28 /* \_SB_.SD28 */
            }
        }

        Method (RECR, 0, Serialized)
        {
            E116 = S116 /* \_SB_.S116 */
        }

        OperationRegion (LUIE, SystemMemory, 0xFEDC0020, 0x04)
        Field (LUIE, AnyAcc, NoLock, Preserve)
        {
            IER0,   1, 
            IER1,   1, 
            IER2,   1, 
            IER3,   1, 
            UOL0,   1, 
            UOL1,   1, 
            UOL2,   1, 
            UOL3,   1, 
            WUR0,   2, 
            WUR1,   2, 
            WUR2,   2, 
            WUR3,   2
        }

        Method (FRUI, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Arg1 = IUA0 /* \_SB_.IUA0 */
            }

            If ((Arg0 == One))
            {
                Arg1 = IUA1 /* \_SB_.IUA1 */
            }

            If ((Arg0 == 0x02))
            {
                Arg1 = IUA2 /* \_SB_.IUA2 */
            }

            If ((Arg0 == 0x03))
            {
                Arg1 = IUA3 /* \_SB_.IUA3 */
            }
        }

        Method (FUIO, 1, Serialized)
        {
            If ((IER0 == One))
            {
                If ((WUR0 == Arg0))
                {
                    Return (Zero)
                }
            }

            If ((IER1 == One))
            {
                If ((WUR1 == Arg0))
                {
                    Return (One)
                }
            }

            If ((IER2 == One))
            {
                If ((WUR2 == Arg0))
                {
                    Return (0x02)
                }
            }

            If ((IER3 == One))
            {
                If ((WUR3 == Arg0))
                {
                    Return (0x03)
                }
            }

            Return (0x0F)
        }

        Method (SRAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            ADIS = One
            ADSR = Zero
            Stall (Arg1)
            ADSR = One
            ADIS = Zero
            Stall (Arg1)
        }

        Method (DSAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg0 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        Method (HSAD, 2, Serialized)
        {
            Local3 = (One << Arg0)
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    PG1A = One
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    RQTY = One
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (!Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    RQTY = Zero
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }

                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    ADTD = 0x03
                    PG1A = Zero
                }
            }
        }

        OperationRegion (FPIC, SystemIO, 0x0C00, 0x02)
        Field (FPIC, AnyAcc, NoLock, Preserve)
        {
            FPII,   8, 
            FPID,   8
        }

        IndexField (FPII, FPID, ByteAcc, NoLock, Preserve)
        {
            Offset (0xF4), 
            IUA0,   8, 
            IUA1,   8, 
            Offset (0xF8), 
            IUA2,   8, 
            IUA3,   8
        }

        Device (HFP1)
        {
            Name (_HID, "AMDI0060")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HFPE)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC11000,         // Address Base
                        0x00000100,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.HFP1._CRS.RBUF */
            }
        }

        Device (GPIO)
        {
            Name (_HID, "AMDI0030")  // _HID: Hardware ID
            Name (_CID, "AMDI0030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000400,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED81200,         // Address Base
                        0x00000100,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR0)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {3}
                Memory32Fixed (ReadWrite,
                    0xFEDC9000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDC7000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT0E == One))
                    {
                        If ((FUIO (Zero) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR1)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {4}
                Memory32Fixed (ReadWrite,
                    0xFEDCA000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDC8000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT1E == One))
                    {
                        If ((FUIO (One) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR2)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {3}
                Memory32Fixed (ReadWrite,
                    0xFEDCE000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDCC000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT2E == One))
                    {
                        If ((FUIO (0x02) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR3)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {4}
                Memory32Fixed (ReadWrite,
                    0xFEDCF000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDCD000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT3E == One))
                    {
                        If ((FUIO (0x03) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (I2CA)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {10}
                Memory32Fixed (ReadWrite,
                    0xFEDC2000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC0E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x05, 0xC8)
            }
        }

        Device (I2CB)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {11}
                Memory32Fixed (ReadWrite,
                    0xFEDC3000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC1E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x06, 0xC8)
            }
        }

        Device (I2CC)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {4}
                Memory32Fixed (ReadWrite,
                    0xFEDC4000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC2E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x07, 0xC8)
            }
        }

        Device (I2CD)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {6}
                Memory32Fixed (ReadWrite,
                    0xFEDC5000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC3E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x08, 0xC8)
            }
        }

        Device (I2CE)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {14}
                Memory32Fixed (ReadWrite,
                    0xFEDC6000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC4E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x09, 0xC8)
            }
        }

        Device (I2CF)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {15}
                Memory32Fixed (ReadWrite,
                    0xFEDCB000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC5E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0A, 0xC8)
            }
        }

        Method (EPIN, 0, NotSerialized)
        {
            IPDE = Zero
            IMPE = Zero
            IM15 = One
            IM16 = One
            IM20 = One
            IM44 = One
            IM46 = One
            IM68 = One
            IM69 = One
            IM6A = One
            IM6B = One
            IM4A = One
            IM58 = One
            IM4B = One
            IM57 = One
            IM6D = One
            IM1F = One
            SECR ()
        }

        Name (NCRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
        })
        Name (DCRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
            GpioInt (Edge, ActiveBoth, SharedAndWake, PullUp, 0x0BB8,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
            GpioIo (Shared, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
        })
        Name (AHID, "AMDI0040")
        Name (ACID, "AMDI0040")
        Name (SHID, 0x400DD041)
        Name (SCID, "PCICC_080501")
        Device (EMM0)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If (EMMD)
                {
                    Return (SHID) /* \_SB_.SHID */
                }
                Else
                {
                    Return (AHID) /* \_SB_.AHID */
                }
            }

            Method (_CID, 0, Serialized)  // _CID: Compatible ID
            {
                If (EMMD)
                {
                    Return (SCID) /* \_SB_.SCID */
                }
                Else
                {
                    Return (ACID) /* \_SB_.ACID */
                }
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (EMD3)
                {
                    Return (DCRS) /* \_SB_.DCRS */
                }
                Else
                {
                    Return (NCRS) /* \_SB_.NCRS */
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If (EMME)
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (EMME)
                {
                    EPIN ()
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((EMD3 && EMME))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, Zero)
                    RECR ()
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, 0x03)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (UAR1)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_DDN, "COM1")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (Zero) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02E8,             // Range Minimum
                        0x02E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y18)
                    IRQNoFlags (_Y19)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y18._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y18._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR1._CRS._Y19._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (Zero)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA0 /* \_SB_.IUA0 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR1._CRS.BUF0 */
            }
        }

        Device (UAR2)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_DDN, "COM2")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (One) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02F8,             // Range Minimum
                        0x02F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y1A)
                    IRQNoFlags (_Y1B)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y1A._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y1A._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR2._CRS._Y1B._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (One)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA1 /* \_SB_.IUA1 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR2._CRS.BUF0 */
            }
        }

        Device (UAR3)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_DDN, "COM3")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (0x02) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03E8,             // Range Minimum
                        0x03E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y1C)
                    IRQNoFlags (_Y1D)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y1C._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y1C._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR3._CRS._Y1D._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (0x02)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA2 /* \_SB_.IUA2 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR3._CRS.BUF0 */
            }
        }

        Device (UAR4)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_DDN, "COM4")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (0x03) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03F8,             // Range Minimum
                        0x03F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y1E)
                    IRQNoFlags (_Y1F)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y1E._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y1E._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR4._CRS._Y1F._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (0x03)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA3 /* \_SB_.IUA3 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR4._CRS.BUF0 */
            }
        }
    }

    Device (_SB.TPM)
    {
        Name (TMRQ, 0xFFFFFFFF)
        Name (TLVL, 0xFFFFFFFF)
        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            ElseIf ((TTDP == Zero))
            {
                Return (0x310CD041)
            }
            Else
            {
                Return ("MSFT0101")
            }
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            ACC0,   8, 
            Offset (0x08), 
            INTE,   32, 
            INTV,   8, 
            Offset (0x10), 
            INTS,   32, 
            INTF,   32, 
            TSTS,   32, 
            Offset (0x24), 
            FIFO,   32, 
            Offset (0x30), 
            IDTF,   32, 
            Offset (0x4C), 
            SCMD,   32
        }

        Method (_STR, 0, NotSerialized)  // _STR: Description String
        {
            If ((TTDP == Zero))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, One)  // _UID: Unique ID
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                _Y20)
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                _Y21)
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y22)
        })
        Name (CRID, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y23)
        })
        Name (CREI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
            GpioInt (Level, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                "\\_SB.GPIO", 0x00, ResourceConsumer, _Y24,
                )
                {   // Pin list
                    0x0000
                }
        })
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            If ((AMDT == One))
            {
                CreateDWordField (CRST, \_SB.TPM._Y20._BAS, MTFB)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y20._LEN, LTFB)  // _LEN: Length
                MTFB = TPMB /* \TPMB */
                LTFB = TPBS /* \TPBS */
                CreateDWordField (CRST, \_SB.TPM._Y21._BAS, MTFC)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y21._LEN, LTFC)  // _LEN: Length
                MTFC = TPMC /* \TPMC */
                LTFC = TPCS /* \TPCS */
                Return (CRST) /* \_SB_.TPM_.CRST */
            }
            Else
            {
                If ((DTPT == One))
                {
                    CreateDWordField (CRSD, \_SB.TPM._Y22._BAS, MTFE)  // _BAS: Base Address
                    CreateDWordField (CRSD, \_SB.TPM._Y22._LEN, LTFE)  // _LEN: Length
                    MTFE = 0xFED40000
                    LTFE = 0x5000
                    Return (CRSD) /* \_SB_.TPM_.CRSD */
                }
                ElseIf ((TTPF == One))
                {
                    If (((TMRQ == Zero) && (TMRQ != 0xFFFFFFFF)))
                    {
                        CreateDWordField (CRID, \_SB.TPM._Y23._BAS, MTFD)  // _BAS: Base Address
                        CreateDWordField (CRID, \_SB.TPM._Y23._LEN, LTFD)  // _LEN: Length
                        MTFD = 0xFED40000
                        LTFD = 0x5000
                        Return (CRID) /* \_SB_.TPM_.CRID */
                    }
                    Else
                    {
                        CreateWordField (CREI, 0x23, LIRQ)
                        CreateBitField (CREI, \_SB.TPM._Y24._POL, LLVL)  // _POL: Polarity
                        LIRQ = TMRQ /* \_SB_.TPM_.TMRQ */
                        LLVL = TLVL /* \_SB_.TPM_.TLVL */
                        Return (CREI) /* \_SB_.TPM_.CREI */
                    }
                }
                ElseIf ((TTPF == Zero))
                {
                    CreateDWordField (CRST, \_SB.TPM._Y21._BAS, MTFF)  // _BAS: Base Address
                    MTFF = FTPM /* \FTPM */
                    Return (CRST) /* \_SB_.TPM_.CRST */
                }

                MTFE = Zero
                LTFE = Zero
                Return (CRID) /* \_SB_.TPM_.CRID */
            }

            Return (CRID) /* \_SB_.TPM_.CRID */
        }

        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
        {
            If (((TMRQ != Zero) && (TMRQ != 0xFFFFFFFF)))
            {
                CreateWordField (Arg0, 0x23, IRQ0)
                CreateWordField (CREI, 0x23, LIRQ)
                LIRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                TMRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                CreateBitField (Arg0, 0x98, ITRG)
                CreateBitField (CREI, \_SB.TPM._Y24._MOD, LTRG)  // _MOD: Mode
                LTRG = ITRG /* \_SB_.TPM_._SRS.ITRG */
                CreateBitField (Arg0, 0x99, ILVL)
                CreateBitField (CREI, \_SB.TPM._Y24._POL, LLVL)  // _POL: Polarity
                LLVL = ILVL /* \_SB_.TPM_._SRS.ILVL */
                If ((((IDTF & 0x0F) == Zero) || ((IDTF & 0x0F
                    ) == 0x0F)))
                {
                    If ((IRQ0 < 0x10))
                    {
                        INTV = (IRQ0 & 0x0F)
                    }

                    If ((ITRG == One))
                    {
                        INTE |= 0x10
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFEF
                    }

                    If ((ILVL == Zero))
                    {
                        INTE |= 0x08
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFF7
                    }
                }
            }
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            HERR,   32, 
            Offset (0x40), 
            HCMD,   32, 
            HSTS,   32
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((TTDP == Zero))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
            ElseIf ((TTDP == One))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Return (Zero)
        }

        Method (STRT, 3, Serialized)
        {
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                FERR,   32, 
                Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, Zero)
            If ((ToInteger (Arg0) != Zero)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    TIMR = Zero
                    If ((AMDT == One))
                    {
                        While (((BEGN == One) && (TIMR < 0x0200)))
                        {
                            If ((BEGN == One))
                            {
                                Sleep (One)
                                TIMR++
                            }
                        }
                    }
                    ElseIf ((((HSTS & 0x02) | (HSTS & One)
                        ) == 0x03))
                    {
                        HCMD = One
                    }
                    Else
                    {
                        FERR = One
                        BEGN = Zero
                    }

                    Return (Zero)
                }

            }

            Return (One)
        }

        Method (CRYF, 3, Serialized)
        {
            If ((ToInteger (Arg0) != One)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    Name (TPMV, Package (0x02)
                    {
                        One, 
                        Package (0x02)
                        {
                            One, 
                            0x20
                        }
                    })
                    If ((_STA () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            Zero
                        })
                    }

                    Return (TPMV) /* \_SB_.TPM_.CRYF.TPMV */
                }

            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, 0x02)
        Field (TSMI, WordAcc, NoLock, Preserve)
        {
            SMI,    16
        }

        OperationRegion (ATNV, SystemMemory, PPIM, PPIL)
        Field (ATNV, AnyAcc, NoLock, Preserve)
        {
            RQST,   32, 
            RCNT,   32, 
            ERRO,   32, 
            FLAG,   32, 
            MISC,   32, 
            OPTN,   32, 
            SRSP,   32
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        If ((PPIV == Zero))
                        {
                            Return ("1.2")
                        }
                        Else
                        {
                            Return ("1.3")
                        }
                    }
                    Case (0x02)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        SRSP = Zero
                        FLAG = 0x02
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x03)
                    {
                        Name (PPI1, Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                        PPI1 [One] = RQST /* \_SB_.TPM_.RQST */
                        Return (PPI1) /* \_SB_.TPM_._DSM.PPI1 */
                    }
                    Case (0x04)
                    {
                        Return (TRST) /* \TRST */
                    }
                    Case (0x05)
                    {
                        Name (PPI2, Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        })
                        SRSP = Zero
                        FLAG = 0x05
                        SMI = OFST /* \OFST */
                        PPI2 [One] = RCNT /* \_SB_.TPM_.RCNT */
                        PPI2 [0x02] = ERRO /* \_SB_.TPM_.ERRO */
                        Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x07
                        OPTN = Zero
                        If ((RQST == 0x17))
                        {
                            ToInteger (DerefOf (Arg3 [One]), OPTN) /* \_SB_.TPM_.OPTN */
                        }

                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x08)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x08
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x09
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }

            If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8") /* Unknown UUID */))
            {
                Return (CRYF (Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4") /* Unknown UUID */))
            {
                Return (STRT (Arg1, Arg2, Arg3))
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (TPTS, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x04)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }
                Case (0x05)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }

            }

            Sleep (0x012C)
        }
    }

    Scope (_SB)
    {
        OperationRegion (RAMW, SystemMemory, 0xAC942000, 0x0100)
        Field (RAMW, AnyAcc, NoLock, Preserve)
        {
            AMLS,   32, 
            ARS1,   32, 
            ARS2,   32, 
            ARS3,   32, 
            APKG,   32, 
            AMDL,   32, 
            ACPB,   32, 
            ACAB,   32, 
            AECB,   32, 
            ALBB,   32, 
            APSB,   32, 
            ASRB,   32, 
            ASIB,   32, 
            AUSB,   32, 
            AVGB,   32, 
            AWRB,   32, 
            AWIB,   32, 
            AWQB,   32, 
            AWMB,   32
        }
    }

    Scope (_SB)
    {
        OperationRegion (APKO, SystemMemory, APKG, 0x04)
        Field (APKO, AnyAcc, NoLock, Preserve)
        {
            APKS,   32
        }
    }

    Scope (_SB)
    {
        OperationRegion (AMDO, SystemMemory, AMDL, 0x04)
        Field (AMDO, AnyAcc, NoLock, Preserve)
        {
            AMDS,   32
        }
    }

    Scope (_SB)
    {
        OperationRegion (ACPO, SystemMemory, ACPB, 0x11)
        Field (ACPO, AnyAcc, NoLock, Preserve)
        {
            ACPS,   32, 
            SMIF,   8, 
            ALPR,   32, 
            TMPB,   8, 
            INSK,   8, 
            WLDP,   8, 
            BTDP,   8, 
            FANF,   8, 
            MLED,   8, 
            CLED,   8, 
            CLE2,   8
        }
    }

    Scope (_SB)
    {
        OperationRegion (ACAO, SystemMemory, ACAB, 0x14)
        Field (ACAO, AnyAcc, NoLock, Preserve)
        {
            ACAS,   32, 
            CAL1,   32, 
            CA10,   32, 
            CA11,   32, 
            CA14,   32
        }
    }

    Scope (_SB)
    {
        OperationRegion (AECO, SystemMemory, AECB, 0x16)
        Field (AECO, AnyAcc, NoLock, Preserve)
        {
            AECS,   32, 
            ACPF,   8, 
            DCPF,   8, 
            DCP2,   8, 
            TPSV,   8, 
            TCRT,   8, 
            PPSV,   8, 
            DSYN,   8, 
            WOLO,   8, 
            EGBF,   32, 
            KBLC,   8, 
            KBLV,   8, 
            ALAE,   8, 
            KFSK,   8, 
            SPPF,   8, 
            CPUT,   8
        }
    }

    Scope (_SB)
    {
        OperationRegion (ALBO, SystemMemory, ALBB, 0x04)
        Field (ALBO, AnyAcc, NoLock, Preserve)
        {
            ALBS,   32
        }
    }

    Scope (_SB)
    {
        OperationRegion (APSO, SystemMemory, APSB, 0x05)
        Field (APSO, AnyAcc, NoLock, Preserve)
        {
            APSS,   32, 
            PTDI,   8
        }
    }

    Scope (_SB)
    {
        OperationRegion (ASRO, SystemMemory, ASRB, 0x04)
        Field (ASRO, AnyAcc, NoLock, Preserve)
        {
            ASRS,   32
        }
    }

    Scope (_SB)
    {
        OperationRegion (ASIO, SystemMemory, ASIB, 0x0E)
        Field (ASIO, AnyAcc, NoLock, Preserve)
        {
            ASIS,   32, 
            TPIF,   8, 
            TPDI,   8, 
            TPLP,   8, 
            TPLI,   8, 
            TPHI,   8, 
            TPP2,   8, 
            TPL2,   8, 
            FPVD,   16, 
            TPDP,   8
        }
    }

    Scope (_SB)
    {
        OperationRegion (AUSO, SystemMemory, AUSB, 0x06)
        Field (AUSO, AnyAcc, NoLock, Preserve)
        {
            AUSN,   32, 
            VBOF,   16
        }
    }

    Scope (_SB)
    {
        OperationRegion (AVGO, SystemMemory, AVGB, 0x16)
        Field (AVGO, AnyAcc, NoLock, Preserve)
        {
            AVGS,   32, 
            LCDV,   32, 
            LCDR,   8, 
            LCDS,   32, 
            VGAV,   16, 
            DOSF,   8, 
            CSTE,   16, 
            AVLD,   8, 
            SETD,   8, 
            ACTD,   8, 
            BRTI,   8
        }
    }

    Scope (_SB)
    {
        OperationRegion (AURO, SystemMemory, AWRB, 0x42)
        Field (AURO, AnyAcc, NoLock, Preserve)
        {
            STRE,   8, 
            STR0,   8, 
            STR1,   8, 
            STR2,   8, 
            STR3,   8, 
            STR4,   8, 
            STR5,   8, 
            STR6,   8, 
            STR7,   8, 
            STR8,   8, 
            STR9,   8, 
            STK0,   8, 
            STK1,   8, 
            STK2,   8, 
            STK3,   8, 
            STK4,   8, 
            STK5,   8, 
            STK6,   8, 
            STK7,   8, 
            STK8,   8, 
            STK9,   8, 
            STL0,   8, 
            STL1,   8, 
            STL2,   8, 
            STL3,   8, 
            STL4,   8, 
            STL5,   8, 
            STL6,   8, 
            STL7,   8, 
            STL8,   8, 
            STL9,   8, 
            STM0,   8, 
            STM1,   8, 
            STM2,   8, 
            STM3,   8, 
            STM4,   8, 
            STM5,   8, 
            STM6,   8, 
            STM7,   8, 
            STM8,   8, 
            STM9,   8, 
            STRF,   8, 
            STG0,   8, 
            SGD0,   8, 
            STG1,   8, 
            SGD1,   8, 
            STG2,   8, 
            SGD2,   8, 
            STG3,   8, 
            SGD3,   8, 
            STG4,   8, 
            SGD4,   8, 
            STG5,   8, 
            SGD5,   8, 
            STG6,   8, 
            SGD6,   8, 
            STG7,   8, 
            SGD7,   8, 
            STG8,   8, 
            SGD8,   8, 
            STG9,   8, 
            SGD9,   8, 
            STGA,   8, 
            SGDA,   8, 
            STGB,   8, 
            SGDB,   8
        }
    }

    Scope (_SB)
    {
        OperationRegion (AWLN, SystemMemory, AWIB, 0x4A)
        Field (AWLN, AnyAcc, NoLock, Preserve)
        {
            AWLS,   32, 
            STXE,   8, 
            ST10,   8, 
            ST11,   8, 
            ST12,   8, 
            ST13,   8, 
            ST14,   8, 
            ST15,   8, 
            ST16,   8, 
            ST17,   8, 
            ST18,   8, 
            ST19,   8, 
            STDE,   8, 
            STRS,   8, 
            ST20,   8, 
            ST21,   8, 
            ST22,   8, 
            ST23,   8, 
            ST24,   8, 
            ST25,   8, 
            ST26,   8, 
            ST27,   8, 
            ST28,   8, 
            ST29,   8, 
            ST30,   8, 
            ST31,   8, 
            ST32,   8, 
            ST33,   8, 
            ST34,   8, 
            ST35,   8, 
            ST36,   8, 
            ST37,   8, 
            ST38,   8, 
            ST39,   8, 
            ST40,   8, 
            ST41,   8, 
            ST42,   8, 
            ST43,   8, 
            ST44,   8, 
            ST45,   8, 
            ST46,   8, 
            ST47,   8, 
            ST48,   8, 
            ST49,   8, 
            SDAA,   8, 
            SDAB,   8, 
            SD11,   8, 
            SD12,   8, 
            SD13,   8, 
            SD14,   8, 
            SD15,   8, 
            SD16,   8, 
            SD21,   8, 
            SD22,   8, 
            SD23,   8, 
            SD24,   8, 
            SD25,   8, 
            SD26,   8, 
            SD31,   8, 
            SD32,   8, 
            SD33,   8, 
            SD34,   8, 
            SD35,   8, 
            SD36,   8, 
            BTSE,   8, 
            BTBR,   8, 
            BED2,   8, 
            BED3,   8, 
            BTLE,   8, 
            BTL2,   8, 
            BTLL,   8
        }
    }

    Scope (\)
    {
        Method (DIAG, 1, NotSerialized)
        {
            DBG8 = Arg0
        }

        OperationRegion (GPSC, SystemIO, 0xB2, 0x02)
        Field (GPSC, ByteAcc, NoLock, Preserve)
        {
            SMCM,   8, 
            SMST,   8
        }

        Method (ISMI, 1, Serialized)
        {
            SMCM = Arg0
        }

        Method (ASMI, 1, Serialized)
        {
            \_SB.ALPR = Arg0
            SMCM = 0xA3
            Return (\_SB.ALPR)
        }

        Name (OSFG, Zero)
        Name (OS9X, One)
        Name (OS98, 0x02)
        Name (OSME, 0x04)
        Name (OS2K, 0x08)
        Name (OSXP, 0x10)
        Name (OSEG, 0x20)
        Name (OSVT, 0x40)
        Name (OSW7, 0x80)
        Name (OSW8, 0x0100)
        Name (OSWA, 0x0110)
        Name (OS14, 0x0120)
        Name (OS15, 0x0130)
        Name (OS16, 0x0140)
        Name (OS17, 0x0150)
        Method (MSOS, 0, NotSerialized)
        {
            If (CondRefOf (\_OSI, Local0))
            {
                If (_OSI ("Linux"))
                {
                    OSFG = OS98 /* \OS98 */
                }

                If (_OSI ("Windows 2001"))
                {
                    OSFG = OSXP /* \OSXP */
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSFG = OSXP /* \OSXP */
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSFG = OSXP /* \OSXP */
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSFG = OSXP /* \OSXP */
                }

                If (_OSI ("Windows 2006"))
                {
                    OSFG = OSVT /* \OSVT */
                }

                If (_OSI ("Windows 2009"))
                {
                    OSFG = OSW7 /* \OSW7 */
                }

                If (_OSI ("Windows 2012"))
                {
                    OSFG = OSW8 /* \OSW8 */
                }

                If (_OSI ("Windows 2015"))
                {
                    OSFG = OSWA /* \OSWA */
                }
            }

            Return (OSFG) /* \OSFG */
        }

        Method (ADVG, 0, NotSerialized)
        {
            Return (0x03)
        }

        Method (GCDM, 0, NotSerialized)
        {
            Return (One)
        }

        Method (SWHG, 1, Serialized)
        {
            Return (Zero)
        }

        Method (NATK, 0, NotSerialized)
        {
            Return (One)
        }
    }

    Scope (_SB)
    {
        Device (SLPB)
        {
            Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
            Name (_STA, Zero)  // _STA: Status
        }

        Method (GGIV, 1, Serialized)
        {
            Return (Zero)
        }

        Method (SGOV, 2, Serialized)
        {
            RWGP (One, Arg0, Arg1)
        }

        Method (GGOV, 1, Serialized)
        {
            Local0 = Zero
            Local0 = RWGP (Zero, Arg0, Local0)
            Return (Local0)
        }

        Method (RWGP, 3, Serialized)
        {
            Local0 = 0xFED81500
            Local0 += (Arg1 << 0x02)
            Local0 += 0x02
            OperationRegion (ERMM, SystemMemory, Local0, One)
            Field (ERMM, AnyAcc, NoLock, Preserve)
            {
                GPII,   1, 
                GPIO,   5, 
                GPOO,   1
            }

            If ((Arg0 == Zero))
            {
                Return (GPII) /* \_SB_.RWGP.GPII */
            }
            Else
            {
                GPOO = Arg2
                Return (Zero)
            }
        }
    }

    Scope (_SB)
    {
        Name (ATKP, Zero)
        Name (AITM, Zero)
        Name (PLMD, Zero)
        Name (MUTX, One)
        Name (LEDS, Zero)
        Name (FNIV, Zero)
        Device (ATKD)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "ATK")  // _UID: Unique ID
            Name (ATKQ, Package (0x10)
            {
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF
            })
            Name (AQHI, Zero)
            Name (AQTI, 0x0F)
            Name (AQNO, Zero)
            Method (IANQ, 1, Serialized)
            {
                If ((AQNO >= 0x10))
                {
                    Local0 = 0x64
                    While ((Local0 && (AQNO >= 0x10)))
                    {
                        Local0--
                        Sleep (0x0A)
                    }

                    If ((!Local0 && (AQNO >= 0x10)))
                    {
                        Return (Zero)
                    }
                }

                AQTI++
                AQTI &= 0x0F
                ATKQ [AQTI] = Arg0
                AQNO++
                Return (One)
            }

            Method (GANQ, 0, Serialized)
            {
                If (AQNO)
                {
                    AQNO--
                    Local0 = DerefOf (ATKQ [AQHI])
                    AQHI++
                    AQHI &= 0x0F
                    Return (Local0)
                }

                Return (Ones)
            }

            Name (_WDG, Buffer (0x3C)
            {
                /* 0000 */  0xD0, 0x5E, 0x84, 0x97, 0x6D, 0x4E, 0xDE, 0x11,  // .^..mN..
                /* 0008 */  0x8A, 0x39, 0x08, 0x00, 0x20, 0x0C, 0x9A, 0x66,  // .9.. ..f
                /* 0010 */  0x4E, 0x42, 0x01, 0x02, 0x35, 0xBB, 0x3C, 0x0B,  // NB..5.<.
                /* 0018 */  0xC2, 0xE3, 0xED, 0x45, 0x91, 0xC2, 0x4C, 0x5A,  // ...E..LZ
                /* 0020 */  0x6D, 0x19, 0x5D, 0x1C, 0xFF, 0x00, 0x01, 0x08,  // m.].....
                /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0038 */  0x4D, 0x4F, 0x01, 0x00                           // MO..
            })
            Scope (\_SB.ATKD)
            {
                Method (WLED, 1, NotSerialized)
                {
                    Arg0 ^= One
                    If (((WAPF && 0x05) == Zero)){}
                    Return (One)
                }

                Method (BLED, 1, NotSerialized)
                {
                    Return (One)
                }

                Name (WAPF, Zero)
                Method (CWAP, 1, NotSerialized)
                {
                    WAPF |= Arg0 /* \_SB_.ATKD.WAPF */
                    Return (One)
                }
            }

            Scope (\_SB.ATKD)
            {
                Method (GALE, 1, NotSerialized)
                {
                    If ((Arg0 == 0x04))
                    {
                        If ((LEDS && 0x04))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg0 == 0x08))
                    {
                        If ((LEDS && 0x08))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg0 == 0x10))
                    {
                        If ((LEDS && 0x10))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Return (0x02)
                }
            }

            Scope (\_SB.ATKD)
            {
                Method (OFBD, 1, NotSerialized)
                {
                    Name (FBDT, Package (0x53)
                    {
                        0x88, 
                        0x89, 
                        0x8A, 
                        0x8B, 
                        0x8C, 
                        0x8D, 
                        0x8E, 
                        0x8F, 
                        0x70, 
                        0x71, 
                        0x72, 
                        0x73, 
                        0x74, 
                        0x75, 
                        0x76, 
                        0x77, 
                        0x78, 
                        0x79, 
                        0x7A, 
                        0x7B, 
                        0x7C, 
                        0x7D, 
                        0x7E, 
                        0x7F, 
                        0x60, 
                        0x61, 
                        0x62, 
                        0x63, 
                        0x64, 
                        0x65, 
                        0x66, 
                        0x67, 
                        0x91, 
                        0x92, 
                        0x93, 
                        0x96, 
                        0xE0, 
                        0xE1, 
                        0xE2, 
                        0xE3, 
                        0xE4, 
                        0xE5, 
                        0xE6, 
                        0xE7, 
                        0xE8, 
                        0xE9, 
                        0xEA, 
                        0xEB, 
                        0xEC, 
                        0xED, 
                        0xEE, 
                        0xEF, 
                        0xD0, 
                        0xD1, 
                        0xD2, 
                        0xD3, 
                        0xD4, 
                        0xD5, 
                        0xD6, 
                        0xD7, 
                        0xD8, 
                        0xD9, 
                        0xDA, 
                        0xDB, 
                        0xDC, 
                        0xDD, 
                        0xDE, 
                        0xDF, 
                        0xC0, 
                        0xC1, 
                        0xC2, 
                        0xC3, 
                        0xC4, 
                        0xC5, 
                        0xC6, 
                        0xC7, 
                        0xF0, 
                        0xF1, 
                        0xF2, 
                        0xF3, 
                        0xF6, 
                        0xF7, 
                        0xFA
                    })
                    Local0 = Match (FBDT, MEQ, Arg0, MTR, Zero, Zero)
                    Local0++
                    Return (Local0)
                }
            }

            Scope (\_SB.ATKD)
            {
                Method (FANL, 1, Serialized)
                {
                    FANF = Arg0
                    If ((^^PCI0.SBRG.EC0.RPIN (0x0E) != One))
                    {
                        ^^PCI0.SBRG.EC0.MPLI (0x05, Zero)
                        ^^PCI0.SBRG.EC0.MPLI (One, Zero)
                        ^^PCI0.SBRG.EC0.MPLI (0x07, Zero)
                        ^^PCI0.SBRG.EC0.MPLI (0x06, Zero)
                        ^^PCI0.SBRG.EC0.MPLI (0x08, Zero)
                        ^^PCI0.SBRG.EC0.MPLI (0x03, 0x05)
                        If ((Arg0 == One)){}
                        ElseIf ((Arg0 == Zero)){}
                        ElseIf ((Arg0 == 0x02)){}
                    }

                    TEMF = One
                    If ((GPUF == One))
                    {
                        Notify (^^PCI0.GPP0.PEGP, 0xD1) // Hardware-Specific
                    }

                    If ((^^PCI0.SBRG.EC0.RPIN (0x0E) != One))
                    {
                        SMIF = 0x05
                        FANF = Arg0
                    }

                    ^^PCI0.SBRG.EC0.BRAH = 0xC9
                    If (((Arg0 == One) & ((^^PCI0.SBRG.EC0.CNTD & 0x40) != 0x40)
                        ))
                    {
                        ^^PCI0.SBRG.EC0.CNTD &= 0x18
                        ^^PCI0.SBRG.EC0.CNTD |= 0x40
                    }
                    ElseIf (((Arg0 == 0x02) & ((^^PCI0.SBRG.EC0.CNTD & 0x20) != 
                        0x20)))
                    {
                        ^^PCI0.SBRG.EC0.CNTD &= 0x18
                        ^^PCI0.SBRG.EC0.CNTD |= 0x20
                    }
                    ElseIf (((Arg0 == Zero) & ((^^PCI0.SBRG.EC0.CNTD & 0x80) != 
                        0x80)))
                    {
                        ^^PCI0.SBRG.EC0.CNTD &= 0x18
                        ^^PCI0.SBRG.EC0.CNTD |= 0x80
                    }

                    Return (ASMI (Arg0))
                }
            }

            Method (WMNB, 3, Serialized)
            {
                CreateDWordField (Arg2, Zero, IIA0)
                CreateDWordField (Arg2, 0x04, IIA1)
                Local0 = (Arg1 & 0xFFFFFFFF)
                If ((Local0 == 0x54494E49))
                {
                    Return (INIT (IIA0))
                }

                If ((Local0 == 0x53545342))
                {
                    Return (BSTS ())
                }

                If ((Local0 == 0x4E554653))
                {
                    Return (SFUN ())
                }

                If ((Local0 == 0x474F4457))
                {
                    Return (WDOG (IIA0))
                }

                If ((Local0 == 0x494E424B))
                {
                    Return (KBNI ())
                }

                If ((Local0 == 0x47444353))
                {
                    Return (SCDG (IIA0, IIA1))
                }

                If ((Local0 == 0x43455053))
                {
                    Return (SPEC (IIA0))
                }

                If ((Local0 == 0x5256534F))
                {
                    OSVR (IIA0)
                    Return (Zero)
                }

                If ((Local0 == 0x53524556))
                {
                    Return (VERS (IIA0, IIA1))
                }

                If ((Local0 == 0x4C425053))
                {
                    Return (SPBL (IIA0))
                }

                If ((Local0 == 0x50534453))
                {
                    Return (SDSP (IIA0))
                }

                If ((Local0 == 0x50534447))
                {
                    Return (GDSP (IIA0))
                }

                If ((Local0 == 0x44434C47))
                {
                    Return (GLCD ())
                }

                If ((Local0 == 0x49564E41))
                {
                    Return (ANVI (IIA0))
                }

                If ((Local0 == 0x46494243))
                {
                    Return (CBIF (IIA0))
                }

                If ((Local0 == 0x4C4E4146))
                {
                    Return (FANL (IIA0))
                }

                If ((Local0 == 0x4647574D))
                {
                    If ((IIA0 == 0x00020013)){}
                    If ((IIA0 == 0x00010016))
                    {
                        Local0 = OFBD (IIA1)
                        If (Local0)
                        {
                            SMIF = One
                            Return (ASMI (IIA1))
                        }

                        Return (Zero)
                    }

                    If ((IIA0 == 0x0006001F))
                    {
                        SMIF = 0x02
                        Return (ASMI (Zero))
                    }

                    If ((IIA0 == 0x0010001F))
                    {
                        SMIF = 0x03
                        Return (ASMI (IIA1))
                    }
                }

                If ((Local0 == 0x53545344))
                {
                    If ((IIA0 == 0x00010002))
                    {
                        Return (Zero)
                    }

                    If ((IIA0 == 0x00010011))
                    {
                        If (WLDP)
                        {
                            Return (0x00030001)
                        }
                        Else
                        {
                            Return (0x02)
                        }
                    }

                    If ((IIA0 == 0x00010013))
                    {
                        If (BTDP)
                        {
                            Return (0x00030001)
                        }
                        Else
                        {
                            Return (0x02)
                        }
                    }

                    If ((IIA0 == 0x00080041))
                    {
                        Return (Zero)
                    }

                    If ((IIA0 == 0x00080042))
                    {
                        Return (Zero)
                    }

                    If ((IIA0 == 0x00080043))
                    {
                        Return (Zero)
                    }

                    If ((IIA0 == 0x00080044))
                    {
                        Return (Zero)
                    }

                    If ((IIA0 == 0x00100053))
                    {
                        Local0 = 0x00010001
                        Return (Local0)
                    }

                    If ((IIA0 == 0x00030022))
                    {
                        Local0 = Zero
                        Return (Local0)
                    }

                    If ((IIA0 == 0x00100054))
                    {
                        Local0 = Zero
                        Return (Local0)
                    }

                    If ((IIA0 == 0x00060061))
                    {
                        Return (Zero)
                    }

                    If ((IIA0 == 0x00020011))
                    {
                        Return ((GALE (One) | 0x00050000))
                    }

                    If ((IIA0 == 0x00020012))
                    {
                        Return ((GALE (0x02) | 0x00050000))
                    }

                    If ((IIA0 == 0x00020013))
                    {
                        Return ((GALE (0x04) | 0x00050000))
                    }

                    If ((IIA0 == 0x00040015))
                    {
                        Return ((GALE (0x08) | 0x00050000))
                    }

                    If ((IIA0 == 0x00020014))
                    {
                        Return ((GALE (0x10) | 0x00050000))
                    }

                    If ((IIA0 == 0x00020015))
                    {
                        Return ((GALE (0x20) | 0x00050000))
                    }

                    If ((IIA0 == 0x00020016))
                    {
                        Return ((GALE (0x40) | 0x00050000))
                    }

                    If ((IIA0 == 0x000600B1))
                    {
                        CALM [Zero] = Zero
                        CA1M = CA14 /* \_SB_.CA14 */
                        If ((ToInteger (CA14) == Zero))
                        {
                            Return (CALM) /* \_SB_.ATKD.CALM */
                        }

                        Local2 = Zero
                        Local3 = One
                        Local1 = CA1M /* \_SB_.ATKD.CA1M */
                        CALM [Zero] = 0x0200
                        While ((Local3 < 0x81))
                        {
                            CALM [Local3] = RMEM ((Local1 + Local2))
                            Local2 += 0x04
                            Local3 += One
                        }

                        Return (CALM) /* \_SB_.ATKD.CALM */
                    }

                    If ((IIA0 == 0x00010032))
                    {
                        Return (Zero)
                    }

                    If ((IIA0 == 0x00130041))
                    {
                        Return (Zero)
                    }

                    If ((IIA0 == 0x00110019))
                    {
                        Local0 = FANF /* \_SB_.FANF */
                        Local1 = 0x00030000
                        Local0 |= Local1
                        Return (Local0)
                    }

                    If ((IIA0 == 0x00110013))
                    {
                        Local0 = ^^PCI0.SBRG.EC0.RTAH (Zero)
                        Local0 /= 0x64
                        Return ((0x00010000 + Local0))
                    }

                    If ((IIA0 == 0x00110014))
                    {
                        Local0 = ^^PCI0.SBRG.EC0.RRAM (0xCC, 0x10)
                        If ((Local0 & 0x02))
                        {
                            Local0 = ^^PCI0.SBRG.EC0.RTAH (One)
                            Local0 /= 0x64
                            Return ((0x00010000 + Local0))
                        }

                        Return (Zero)
                    }

                    If ((IIA0 == 0x00010001))
                    {
                        Return (0x00040000)
                    }

                    If ((IIA0 == 0x00120061))
                    {
                        Local1 = ^^PCI0.SBRG.EC0.STA8 (Zero)
                        If ((Local1 & 0x10))
                        {
                            Return (0x00010001)
                        }

                        If ((Local1 & 0x08))
                        {
                            Return (0x00010002)
                        }

                        If (!(Local1 & 0x18))
                        {
                            Return (0x00010000)
                        }
                    }

                    If ((IIA0 == 0x00060062))
                    {
                        If (^^PCI0.SBRG.EC0.RPIN (0x0E))
                        {
                            Local0 = 0x00010001
                        }
                        Else
                        {
                            Local0 = 0x00010000
                        }

                        Return (Local0)
                    }

                    If ((IIA0 == 0x00110015))
                    {
                        Return (Zero)
                    }

                    If ((IIA0 == 0x00110016))
                    {
                        Return (Zero)
                    }

                    If ((IIA0 == 0x00050021))
                    {
                        If (^^PCI0.SBRG.EC0.GLKB (One))
                        {
                            Local0 = ^^PCI0.SBRG.EC0.GLKB (0x03)
                            Local0 <<= 0x08
                            Local0 += ^^PCI0.SBRG.EC0.GLKB (0x02)
                            Local0 |= 0x00050000
                            Local0 |= 0x00200000
                            Local0 |= 0x00100000
                            Return (Local0)
                        }

                        Return (0x8000)
                    }

                    If ((IIA0 == 0x00120057))
                    {
                        Name (RBU1, Buffer (0x02)
                        {
                             0x00, 0x00                                       // ..
                        })
                        RBU1 = ^^PCI0.SBRG.EC0.REBC (0x05, 0x02)
                        Local1 = DerefOf (RBU1 [One])
                        Local0 = 0x00010000
                        Local0 |= 0x00080000
                        If ((Local1 & One))
                        {
                            Local0 |= 0x00100000
                        }

                        If ((Local1 & 0x80))
                        {
                            Local0 |= 0x0200
                        }

                        Return (Local0)
                    }

                    If ((IIA0 == 0x00100023))
                    {
                        If ((KFSK == 0x80))
                        {
                            Return (0x00010001)
                        }
                        Else
                        {
                            Return (0x00010000)
                        }
                    }

                    If ((IIA0 == 0x00050033))
                    {
                        Return (0x00010000)
                    }

                    If ((IIA0 == 0x00060023))
                    {
                        Local0 = (^^PCI0.SBRG.EC0.STA8 (Zero) & 0x03)
                        If (Ones)
                        {
                            Local0 |= 0x04
                        }

                        If (((^^PCI0.SBRG.EC0.STA8 (Zero) & 0x80) == 0x80))
                        {
                            If ((^^PCI0.SBRG.EC0.STA8 (0x02) == 0x03))
                            {
                                Local0 |= 0x08
                            }
                        }

                        Return (Local0)
                    }

                    If ((IIA0 == 0x00060024))
                    {
                        Return (Package (0x03)
                        {
                            0x15E01022, 
                            0x06, 
                            0xFFFFFFFF
                        })
                    }

                    If ((IIA0 == 0x00060026))
                    {
                        Local0 = ^^PCI0.SBRG.EC0.STA8 (Zero)
                        Local0 &= 0x04
                        If ((Local0 == 0x04))
                        {
                            Return (0x00010001)
                        }
                        ElseIf ((Local0 == Zero))
                        {
                            Return (0x00010000)
                        }
                    }
                }

                If ((Local0 == 0x53564544))
                {
                    If ((IIA0 == 0x00010012))
                    {
                        WLED (IIA1)
                        Return (One)
                    }

                    If ((IIA0 == 0x00010013))
                    {
                        BLED (IIA1)
                        Return (One)
                    }

                    If ((IIA0 == 0x00010003))
                    {
                        Return (CWAP (IIA1))
                    }

                    If ((IIA0 == 0x00100054))
                    {
                        Return (Zero)
                    }

                    If ((IIA0 == 0x00060057))
                    {
                        Return (Zero)
                    }

                    If ((IIA0 == 0x00100013))
                    {
                        If ((IIA1 == Zero)){}
                        If ((IIA1 == One)){}
                        If ((IIA1 == 0x02))
                        {
                            If (^^PCI0.SBRG.EC0.ECAV ())
                            {
                                Acquire (^^PCI0.SBRG.EC0.MU4T, 0xFFFF)
                                ^^PCI0.SBRG.EC0.CMD = 0xFF
                                ^^PCI0.SBRG.EC0.EDA1 = 0xB6
                                ^^PCI0.SBRG.EC0.EDA2 = Zero
                                ^^PCI0.SBRG.EC0.ECAC ()
                                Release (^^PCI0.SBRG.EC0.MU4T)
                                Return (One)
                            }
                        }

                        Return (Zero)
                    }

                    If ((IIA0 == 0x00110019))
                    {
                        FANL (IIA1)
                        Return (One)
                    }

                    If ((IIA0 == 0x00050011))
                    {
                        If ((IIA1 == 0x02))
                        {
                            ^^PCI0.SBRG.EC0.BLCT = One
                        }

                        Return (One)
                    }

                    If ((IIA0 == 0x00050021))
                    {
                        ^^PCI0.SBRG.EC0.SLKB (IIA1)
                        Return (One)
                    }

                    If ((IIA0 == 0x00100022))
                    {
                        Return (One)
                    }

                    If ((IIA0 == 0x00110013))
                    {
                        Local0 = ^^PCI0.SBRG.EC0.RRAM (0xCC, 0x30)
                        If ((IIA1 == Zero))
                        {
                            Local1 = (Local0 & 0xFFFFFFFFFFFFFFBF)
                        }
                        ElseIf ((IIA1 == One))
                        {
                            Local1 = (Local0 | 0x40)
                        }

                        ^^PCI0.SBRG.EC0.WRAM (0xCD, 0x30, Local1)
                        Return (One)
                    }

                    If ((IIA0 == 0x00110014))
                    {
                        Local0 = ^^PCI0.SBRG.EC0.RRAM (0xCC, 0x10)
                        If ((Local0 & 0x02))
                        {
                            Local0 = ^^PCI0.SBRG.EC0.RRAM (0xCC, 0x30)
                            If ((IIA1 == Zero))
                            {
                                Local1 = (Local0 & 0xFFFFFFFFFFFFFFBF)
                            }
                            ElseIf ((IIA1 == One))
                            {
                                Local1 = (Local0 | 0x40)
                            }

                            ^^PCI0.SBRG.EC0.WRAM (0xCD, 0x30, Local1)
                            Return (One)
                        }

                        Return (Zero)
                    }

                    If ((IIA0 == 0x00110015))
                    {
                        Return (Zero)
                    }

                    If ((IIA0 == 0x00110016))
                    {
                        Return (Zero)
                    }

                    If ((IIA0 == 0x00120057))
                    {
                        Return (^^PCI0.SBRG.EC0.SRSC (IIA1))
                    }

                    If ((IIA0 == 0x00100023))
                    {
                        If ((IIA1 == One))
                        {
                            Local0 = 0x08
                        }
                        ElseIf ((IIA1 == Zero))
                        {
                            Local0 = 0x04
                        }

                        Local0 = (KFSK | Local0)
                        ^^PCI0.SBRG.EC0.ST9E (0x3C, 0xFF, Local0)
                        Return (One)
                    }

                    If ((IIA0 == 0x00060023))
                    {
                        Local0 = (IIA1 >> 0x09)
                        If (((Local0 & One) == One))
                        {
                            VBOF = One
                            Local0 = (IIA1 >> 0x18)
                            Local0 *= 0x0100
                            VBOF |= Local0 /* \_SB_.VBOF */
                        }
                        Else
                        {
                            VBOF = Zero
                        }

                        Local0 = (IIA1 & 0xFF)
                        ^^PCI0.SBRG.EC0.STA9 (One, Local0)
                        Local0 = (IIA1 >> 0x08)
                        Local1 = ^^PCI0.SBRG.EC0.STA8 (Zero)
                        If (((Local0 & One) == One))
                        {
                            Local1 |= 0x02
                            Local2 = (Local1 & 0x0F)
                            ^^PCI0.SBRG.EC0.STA9 (Zero, Local1)
                        }
                        Else
                        {
                            Local1 &= 0xFD
                            Local2 = (Local1 & 0x0F)
                            ^^PCI0.SBRG.EC0.STA9 (Zero, Local1)
                        }

                        Return (One)
                    }

                    If ((IIA0 == 0x00060026))
                    {
                        Local0 = ^^PCI0.SBRG.EC0.STA8 (Zero)
                        If ((IIA1 == One))
                        {
                            Local0 |= 0x04
                            ^^PCI0.SBRG.EC0.STA9 (Zero, Local0)
                        }
                        Else
                        {
                            Local0 &= 0xFB
                            ^^PCI0.SBRG.EC0.STA9 (Zero, Local0)
                        }

                        Return (One)
                    }
                }

                Return (0xFFFFFFFE)
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                If ((Arg0 == 0xFF))
                {
                    Return (GANQ ())
                }

                Return (Ones)
            }

            Name (WQMO, Buffer (0x0A7D)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x6D, 0x0A, 0x00, 0x00, 0x6E, 0x38, 0x00, 0x00,  // m...n8..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x98, 0xD4, 0x9A, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x05, 0x10, 0xD2, 0xA7, 0x8C, 0x42, 0x04,  // ......B.
                /* 0028 */  0x0A, 0x0D, 0xA1, 0x38, 0x44, 0x86, 0xA1, 0x12,  // ...8D...
                /* 0030 */  0x20, 0x24, 0x09, 0x42, 0x2E, 0x98, 0x98, 0x00,  //  $.B....
                /* 0038 */  0x21, 0x10, 0x92, 0x28, 0xC0, 0xBC, 0x00, 0xDD,  // !..(....
                /* 0040 */  0x02, 0x0C, 0x0B, 0xB0, 0x2D, 0xC0, 0xB4, 0x00,  // ....-...
                /* 0048 */  0xC7, 0x40, 0xEA, 0xDF, 0x1F, 0xA2, 0x34, 0x10,  // .@....4.
                /* 0050 */  0x89, 0x80, 0xA4, 0x52, 0x20, 0x24, 0x54, 0x80,  // ...R $T.
                /* 0058 */  0x72, 0x01, 0xBE, 0x05, 0x68, 0x47, 0x94, 0x64,  // r...hG.d
                /* 0060 */  0x01, 0x96, 0x61, 0x44, 0x60, 0xAF, 0xC8, 0x04,  // ..aD`...
                /* 0068 */  0x8D, 0x13, 0x94, 0x33, 0x0C, 0x14, 0xBC, 0x01,  // ...3....
                /* 0070 */  0xDB, 0x14, 0x60, 0x72, 0x10, 0x54, 0xF6, 0x20,  // ..`r.T. 
                /* 0078 */  0x50, 0x32, 0x20, 0xE4, 0x51, 0x80, 0x55, 0x38,  // P2 .Q.U8
                /* 0080 */  0x4D, 0x27, 0x81, 0xDD, 0x0B, 0x30, 0x27, 0xC0,  // M'...0'.
                /* 0088 */  0x9B, 0x00, 0x71, 0xA3, 0xD1, 0x0A, 0x5B, 0x84,  // ..q...[.
                /* 0090 */  0x92, 0x30, 0x01, 0xB6, 0x60, 0x84, 0x52, 0x1B,  // .0..`.R.
                /* 0098 */  0x8C, 0x50, 0x1A, 0x43, 0x10, 0x48, 0x9C, 0x28,  // .P.C.H.(
                /* 00A0 */  0x11, 0x1B, 0x14, 0xE0, 0x0C, 0x56, 0x28, 0x11,  // .....V(.
                /* 00A8 */  0xC3, 0x84, 0x88, 0x70, 0xA5, 0x31, 0xEC, 0x10,  // ...p.1..
                /* 00B0 */  0x4A, 0x68, 0x71, 0x23, 0xB4, 0x3F, 0x08, 0x12,  // Jhq#.?..
                /* 00B8 */  0x6D, 0xC5, 0x1A, 0xAA, 0x23, 0x8D, 0x06, 0x35,  // m...#..5
                /* 00C0 */  0xA2, 0x04, 0x07, 0xE6, 0xD1, 0x9C, 0x6A, 0xE7,  // ......j.
                /* 00C8 */  0x02, 0xA4, 0xCF, 0x55, 0x20, 0xC7, 0x7A, 0x8A,  // ...U .z.
                /* 00D0 */  0x75, 0x0E, 0x97, 0x80, 0x24, 0x30, 0x56, 0x82,  // u...$0V.
                /* 00D8 */  0x0E, 0x86, 0x08, 0xC5, 0x35, 0xA0, 0x26, 0x7E,  // ....5.&~
                /* 00E0 */  0x88, 0x4C, 0x10, 0x1C, 0x6A, 0x88, 0x1E, 0x6F,  // .L..j..o
                /* 00E8 */  0xB8, 0x13, 0x38, 0xEA, 0x23, 0x61, 0x10, 0xE7,  // ..8.#a..
                /* 00F0 */  0x74, 0x34, 0x98, 0x73, 0x80, 0xC7, 0x75, 0x32,  // t4.s..u2
                /* 00F8 */  0x67, 0x5C, 0xAA, 0x00, 0xB3, 0x43, 0xD7, 0x08,  // g\...C..
                /* 0100 */  0x13, 0x1C, 0x8F, 0xA1, 0xCF, 0xFE, 0x7C, 0x7A,  // ......|z
                /* 0108 */  0x86, 0x24, 0xF2, 0x07, 0x81, 0x1A, 0x99, 0xA1,  // .$......
                /* 0110 */  0x3D, 0xC6, 0xD3, 0x8A, 0x19, 0xF2, 0x29, 0xE0,  // =.....).
                /* 0118 */  0xB0, 0x98, 0xD8, 0x53, 0x02, 0x1D, 0x0F, 0xBC,  // ...S....
                /* 0120 */  0xFF, 0xFF, 0x78, 0xC0, 0xA3, 0xF8, 0x68, 0x20,  // ..x...h 
                /* 0128 */  0x84, 0x57, 0x82, 0xD8, 0x1E, 0xD0, 0xE3, 0x82,  // .W......
                /* 0130 */  0x81, 0xB1, 0x03, 0xB2, 0x5F, 0x01, 0x08, 0xC1,  // ...._...
                /* 0138 */  0xCB, 0x1C, 0x91, 0x9C, 0x22, 0x68, 0x4C, 0x9E,  // ...."hL.
                /* 0140 */  0x5C, 0xEB, 0x10, 0x02, 0x39, 0xA9, 0x43, 0x7E,  // \...9.C~
                /* 0148 */  0x59, 0x60, 0x88, 0xAF, 0x09, 0x9E, 0x7E, 0x85,  // Y`....~.
                /* 0150 */  0x80, 0x12, 0x39, 0x02, 0x94, 0x98, 0x11, 0xA0,  // ..9.....
                /* 0158 */  0xF0, 0x22, 0x87, 0x3C, 0x9B, 0x23, 0x38, 0x9E,  // .".<.#8.
                /* 0160 */  0x28, 0x27, 0x71, 0x40, 0x3E, 0x3A, 0x18, 0xE1,  // ('q@>:..
                /* 0168 */  0x10, 0xCA, 0x3D, 0x41, 0x10, 0xCD, 0x33, 0xD2,  // ..=A..3.
                /* 0170 */  0x34, 0xCE, 0xE9, 0x6D, 0xC0, 0x04, 0x73, 0xF8,  // 4..m..s.
                /* 0178 */  0x82, 0xE8, 0x04, 0xD2, 0x4B, 0x95, 0x8D, 0xA5,  // ....K...
                /* 0180 */  0x7A, 0xA4, 0x34, 0xFF, 0x19, 0x41, 0x33, 0x3C,  // z.4..A3<
                /* 0188 */  0x87, 0x10, 0x87, 0x98, 0xC0, 0xC9, 0x81, 0x74,  // .......t
                /* 0190 */  0xD2, 0xE0, 0x99, 0x49, 0x94, 0x7A, 0x34, 0x14,  // ...I.z4.
                /* 0198 */  0xCE, 0x39, 0x0F, 0x1C, 0x14, 0xC4, 0x80, 0x0E,  // .9......
                /* 01A0 */  0x01, 0xA1, 0x51, 0xF8, 0x1C, 0xC0, 0x07, 0xE1,  // ..Q.....
                /* 01A8 */  0x41, 0x3D, 0x2F, 0x18, 0xE2, 0x35, 0xC0, 0xA2,  // A=/..5..
                /* 01B0 */  0x0F, 0x0B, 0x74, 0x78, 0x3E, 0x06, 0x70, 0x0D,  // ..tx>.p.
                /* 01B8 */  0x10, 0xBA, 0x17, 0x18, 0xD9, 0x6A, 0x00, 0x29,  // .....j.)
                /* 01C0 */  0x18, 0x3F, 0x5C, 0x70, 0x82, 0xBA, 0xAE, 0x02,  // .?\p....
                /* 01C8 */  0xD0, 0x87, 0x79, 0x04, 0x9E, 0xC9, 0xBB, 0xC5,  // ..y.....
                /* 01D0 */  0x1F, 0x89, 0xF5, 0x1D, 0x05, 0x40, 0x01, 0xE4,  // .....@..
                /* 01D8 */  0xA9, 0x5B, 0xE9, 0xF0, 0xE9, 0x18, 0x42, 0x84,  // .[....B.
                /* 01E0 */  0x89, 0x66, 0x74, 0x1E, 0x7E, 0xAA, 0xA8, 0xB8,  // .ft.~...
                /* 01E8 */  0x53, 0xA5, 0x20, 0x9E, 0xEA, 0xFF, 0x3F, 0xC1,  // S. ...?.
                /* 01F0 */  0x28, 0x53, 0x45, 0xCF, 0xC4, 0x53, 0xE5, 0xF7,  // (SE..S..
                /* 01F8 */  0x03, 0x13, 0x58, 0xF8, 0x3D, 0x03, 0xDA, 0xA5,  // ..X.=...
                /* 0200 */  0x20, 0xE2, 0x13, 0x81, 0xA7, 0x61, 0x38, 0x4F,  //  ....a8O
                /* 0208 */  0x96, 0xC3, 0x79, 0xB2, 0x7C, 0x2C, 0xBE, 0x47,  // ..y.|,.G
                /* 0210 */  0xC0, 0x1F, 0x2D, 0x96, 0xA0, 0xC0, 0xD9, 0x82,  // ..-.....
                /* 0218 */  0x1C, 0x1E, 0x23, 0x78, 0xA4, 0x54, 0xD6, 0xB8,  // ..#x.T..
                /* 0220 */  0x50, 0x97, 0x03, 0x9F, 0x29, 0x18, 0xF6, 0x2B,  // P...)..+
                /* 0228 */  0xC2, 0xD1, 0xBC, 0x22, 0x9C, 0xE1, 0x53, 0xC4,  // ..."..S.
                /* 0230 */  0x41, 0x3D, 0x73, 0xD8, 0xA4, 0x4E, 0x93, 0x52,  // A=s..N.R
                /* 0238 */  0x61, 0x3D, 0x52, 0x0E, 0x6B, 0xB4, 0xB0, 0x07,  // a=R.k...
                /* 0240 */  0xFC, 0xBA, 0xE1, 0xB3, 0x8A, 0x67, 0x66, 0x8C,  // .....gf.
                /* 0248 */  0xB0, 0x1E, 0xAD, 0x03, 0xAD, 0x53, 0x97, 0x09,  // .....S..
                /* 0250 */  0x9C, 0x2C, 0x20, 0x5D, 0x33, 0x8E, 0xE8, 0x98,  // ., ]3...
                /* 0258 */  0x0E, 0x89, 0x09, 0xBA, 0x4C, 0x50, 0x08, 0x4B,  // ....LP.K
                /* 0260 */  0xA1, 0x90, 0x10, 0x08, 0x1D, 0x09, 0x78, 0x74,  // ......xt
                /* 0268 */  0x30, 0x0A, 0xE2, 0x91, 0x39, 0xD6, 0x91, 0x00,  // 0...9...
                /* 0270 */  0x2D, 0xEA, 0x0E, 0x41, 0x2F, 0x33, 0xB8, 0xC9,  // -..A/3..
                /* 0278 */  0x3E, 0xC4, 0x30, 0x90, 0x58, 0xEC, 0x62, 0xC0,  // >.0.X.b.
                /* 0280 */  0x0F, 0x06, 0x60, 0xFE, 0xFF, 0x13, 0xB0, 0x83,  // ..`.....
                /* 0288 */  0x01, 0xE0, 0x49, 0xA1, 0x53, 0xA9, 0x4E, 0x0F,  // ..I.S.N.
                /* 0290 */  0x06, 0xE0, 0x0A, 0x79, 0x30, 0x40, 0x4B, 0x05,  // ...y0@K.
                /* 0298 */  0xD2, 0x84, 0x6A, 0x3C, 0x40, 0xE9, 0xD6, 0x92,  // ..j<@...
                /* 02A0 */  0xC0, 0x22, 0x0F, 0x06, 0x28, 0x79, 0x14, 0x12,  // ."..(y..
                /* 02A8 */  0x77, 0x30, 0x40, 0xC9, 0x81, 0xA3, 0x20, 0x1E,  // w0@... .
                /* 02B0 */  0x99, 0xA3, 0x1E, 0x0C, 0xD0, 0xE3, 0x4C, 0x70,  // ......Lp
                /* 02B8 */  0x90, 0xC7, 0x72, 0x3C, 0x07, 0xF6, 0x5E, 0x73,  // ..r<..^s
                /* 02C0 */  0x36, 0x4F, 0x05, 0x1E, 0x7A, 0x9C, 0x40, 0x7C,  // 6O..z.@|
                /* 02C8 */  0x46, 0x86, 0x7A, 0xB5, 0x09, 0xF5, 0x7C, 0xE0,  // F.z...|.
                /* 02D0 */  0x53, 0x91, 0xC1, 0xDE, 0x11, 0x0C, 0xF5, 0x78,  // S......x
                /* 02D8 */  0x10, 0xD3, 0x93, 0x7B, 0xF9, 0xF2, 0x09, 0xC1,  // ...{....
                /* 02E0 */  0x68, 0xFC, 0x88, 0x00, 0x9C, 0xFF, 0xFF, 0x47,  // h......G
                /* 02E8 */  0x04, 0x60, 0xED, 0x54, 0xA3, 0x55, 0x9D, 0x47,  // .`.T.U.G
                /* 02F0 */  0x04, 0x70, 0x45, 0xBA, 0x26, 0xA1, 0x85, 0x01,  // .pE.&...
                /* 02F8 */  0x69, 0x1C, 0x87, 0xDB, 0xE7, 0x99, 0x4D, 0x04,  // i.....M.
                /* 0300 */  0x96, 0x04, 0xA4, 0x6B, 0x12, 0x17, 0x43, 0x21,  // ...k..C!
                /* 0308 */  0x19, 0x47, 0x04, 0x54, 0xF0, 0x83, 0x02, 0x05,  // .G.T....
                /* 0310 */  0x31, 0xA0, 0x53, 0x1D, 0x11, 0xD0, 0x87, 0x22,  // 1.S...."
                /* 0318 */  0x7B, 0x3F, 0x12, 0x90, 0x3B, 0xC1, 0x91, 0x9D,  // {?..;...
                /* 0320 */  0xCC, 0x99, 0xBD, 0x87, 0x9D, 0xEC, 0x5B, 0x81,  // ......[.
                /* 0328 */  0x87, 0xE4, 0x2B, 0x42, 0x98, 0x60, 0x0F, 0x06,  // ..+B.`..
                /* 0330 */  0x3E, 0x8F, 0xF9, 0xC2, 0xE5, 0xF3, 0x12, 0xE0,  // >.......
                /* 0338 */  0x4B, 0xC4, 0x98, 0x51, 0xB1, 0xC7, 0x4C, 0x41,  // K..Q..LA
                /* 0340 */  0x3C, 0x66, 0xDF, 0xF4, 0xFE, 0xFF, 0xC7, 0x8C,  // <f......
                /* 0348 */  0xFD, 0x08, 0x78, 0xBA, 0xB8, 0x2B, 0x86, 0xCF,  // ..x..+..
                /* 0350 */  0x32, 0xC0, 0xE5, 0xCC, 0x04, 0xB8, 0xF2, 0x2A,  // 2......*
                /* 0358 */  0xD1, 0xA7, 0xC7, 0x93, 0x05, 0xB8, 0xC2, 0x9D,  // ........
                /* 0360 */  0x65, 0xD0, 0x12, 0x81, 0xE4, 0xF2, 0xCE, 0xA4,  // e.......
                /* 0368 */  0x03, 0x9D, 0x09, 0x7C, 0x8E, 0xF1, 0x59, 0x86,  // ...|..Y.
                /* 0370 */  0x1F, 0x9D, 0x2C, 0xEA, 0x58, 0x80, 0x3A, 0x5C,  // ..,.X.:\
                /* 0378 */  0x18, 0xCC, 0x20, 0x1E, 0x99, 0x23, 0x1E, 0x0B,  // .. ..#..
                /* 0380 */  0xD0, 0x23, 0xF6, 0x79, 0xE0, 0xB1, 0xC0, 0xB7,  // .#.y....
                /* 0388 */  0x3D, 0x9F, 0xE8, 0xD8, 0x3D, 0xC6, 0x77, 0x26,  // =...=.w&
                /* 0390 */  0x76, 0x2E, 0x34, 0xD4, 0xAB, 0x41, 0x24, 0x8F,  // v.4..A$.
                /* 0398 */  0xEA, 0xCD, 0xCF, 0xA8, 0x8F, 0x33, 0xEF, 0x31,  // .....3.1
                /* 03A0 */  0xD8, 0xE3, 0x01, 0xBC, 0xFF, 0xFF, 0x39, 0x06,  // ......9.
                /* 03A8 */  0x30, 0xEA, 0x52, 0xE1, 0x0B, 0xED, 0xF1, 0x00,  // 0.R.....
                /* 03B0 */  0x5C, 0xA2, 0x56, 0xA1, 0xE3, 0x01, 0x2E, 0xDA,  // \.V.....
                /* 03B8 */  0x5A, 0x34, 0xA1, 0x33, 0x3B, 0xDD, 0xE7, 0x18,  // Z4.3;...
                /* 03C0 */  0x16, 0xEA, 0x1C, 0x83, 0xBA, 0xF3, 0x3A, 0xD2,  // ......:.
                /* 03C8 */  0xF1, 0x00, 0x15, 0xE2, 0x78, 0x40, 0x41, 0x3C,  // ....x@A<
                /* 03D0 */  0x2E, 0x87, 0x3B, 0x1E, 0xA0, 0xE5, 0xDD, 0x6D,  // ..;....m
                /* 03D8 */  0xC9, 0xC4, 0x7C, 0x03, 0xF1, 0x84, 0xA2, 0x3C,  // ..|....<
                /* 03E0 */  0x15, 0x3C, 0x17, 0xF0, 0x63, 0x8C, 0x0F, 0x06,  // .<..c...
                /* 03E8 */  0x6F, 0x4C, 0x3E, 0x20, 0x3C, 0x1F, 0xBC, 0x1A,  // oL> <...
                /* 03F0 */  0x60, 0xC0, 0x4E, 0x2B, 0x8E, 0x21, 0x5E, 0x65,  // `.N+.!^e
                /* 03F8 */  0x80, 0xE3, 0xFF, 0xFF, 0x6E, 0xC0, 0x52, 0x0C,  // ....n.R.
                /* 0400 */  0x0F, 0xAD, 0xE3, 0xD8, 0x40, 0x86, 0x16, 0xE1,  // ....@...
                /* 0408 */  0xEC, 0xCE, 0xCF, 0x53, 0x02, 0xEF, 0xB8, 0x7D,  // ...S...}
                /* 0410 */  0xDA, 0x01, 0xCE, 0xA7, 0x40, 0x9F, 0x0C, 0x78,  // ....@..x
                /* 0418 */  0xD8, 0x21, 0x51, 0x10, 0x9F, 0x10, 0x1C, 0xE4,  // .!Q.....
                /* 0420 */  0x9A, 0x0A, 0xE5, 0x32, 0x80, 0x39, 0x7A, 0x80,  // ...2.9z.
                /* 0428 */  0x7D, 0x20, 0x3E, 0x91, 0x01, 0xA2, 0x1C, 0x4A,  // } >....J
                /* 0430 */  0x3C, 0xE8, 0xE8, 0xFF, 0x7F, 0xF4, 0x00, 0x53,  // <......S
                /* 0438 */  0xA6, 0x13, 0x19, 0x5A, 0xD9, 0xD1, 0x83, 0x8C,  // ...Z....
                /* 0440 */  0xD2, 0x53, 0x4B, 0x60, 0x4D, 0x47, 0x0F, 0x94,  // .SK`MG..
                /* 0448 */  0x1A, 0x0A, 0xE9, 0x39, 0x7A, 0xA0, 0x14, 0x5C,  // ...9z..\
                /* 0450 */  0x87, 0xF9, 0x41, 0x87, 0xC6, 0x3B, 0xE8, 0x40,  // ..A..;.@
                /* 0458 */  0x39, 0x7A, 0xC0, 0xBB, 0x76, 0xE0, 0x0E, 0x55,  // 9z..v..U
                /* 0460 */  0x6C, 0x5C, 0x67, 0x68, 0xC8, 0x43, 0x7B, 0x34,  // l\gh.C{4
                /* 0468 */  0xF3, 0x81, 0x27, 0xB0, 0x2F, 0xC5, 0x80, 0xDF,  // ..'./...
                /* 0470 */  0xC3, 0xB9, 0x0F, 0x92, 0x3E, 0x6D, 0xF3, 0x1B,  // ....>m..
                /* 0478 */  0x19, 0xF0, 0xF8, 0xFF, 0xDF, 0x2C, 0x00, 0x41,  // .....,.A
                /* 0480 */  0x42, 0x2D, 0x3A, 0xBC, 0x3A, 0x82, 0xFF, 0xE6,  // B-:.:...
                /* 0488 */  0x78, 0x44, 0xB5, 0x4E, 0x49, 0x57, 0x47, 0x38,  // xD.NIWG8
                /* 0490 */  0xF7, 0x54, 0x1F, 0x09, 0x38, 0x99, 0xE1, 0x4C,  // .T..8..L
                /* 0498 */  0x61, 0x40, 0xA7, 0x3B, 0x12, 0xA0, 0xAF, 0x0B,  // a@.;....
                /* 04A0 */  0x1E, 0xCF, 0xC1, 0x3C, 0x56, 0x3C, 0x52, 0x78,  // ...<V<Rx
                /* 04A8 */  0x3C, 0xE7, 0xFA, 0x9E, 0x16, 0xE8, 0x3C, 0x7C,  // <.....<|
                /* 04B0 */  0x46, 0xF2, 0xE4, 0x43, 0xBD, 0x19, 0x78, 0x50,  // F..C..xP
                /* 04B8 */  0x06, 0x8A, 0xC5, 0xB4, 0x1F, 0x01, 0xC9, 0xF5,  // ........
                /* 04C0 */  0xCC, 0x27, 0x32, 0x76, 0xB2, 0x00, 0x8C, 0xFC,  // .'2v....
                /* 04C8 */  0xFF, 0x6F, 0xEF, 0x00, 0x87, 0x7C, 0x3A, 0xD5,  // .o...|:.
                /* 04D0 */  0xAA, 0xF4, 0x64, 0x01, 0x2E, 0xC5, 0x97, 0x39,  // ..d....9
                /* 04D8 */  0x74, 0xEE, 0xB5, 0xE8, 0x60, 0x71, 0x48, 0x98,  // t...`qH.
                /* 04E0 */  0xC4, 0x27, 0x0B, 0x54, 0x56, 0x0A, 0x25, 0x3B,  // .'.TV.%;
                /* 04E8 */  0x59, 0xA0, 0xB2, 0x9C, 0x2C, 0x28, 0x88, 0xC7,  // Y...,(..
                /* 04F0 */  0xE5, 0xDB, 0x3B, 0x7E, 0xF4, 0x3E, 0xE0, 0xBE,  // ..;~.>..
                /* 04F8 */  0x02, 0xB1, 0xC3, 0xA3, 0x47, 0x04, 0xE3, 0x56,  // ....G..V
                /* 0500 */  0x81, 0xFD, 0xFF, 0xDF, 0x2A, 0x80, 0xEB, 0x5D,  // ....*..]
                /* 0508 */  0x16, 0x7F, 0xD1, 0xF7, 0x8D, 0xE0, 0x99, 0x1B,  // ........
                /* 0510 */  0xCE, 0xC8, 0x80, 0xC7, 0x81, 0x0E, 0x78, 0x0B,  // ......x.
                /* 0518 */  0xBA, 0x1C, 0xA0, 0x24, 0x5C, 0x0E, 0x28, 0x88,  // ...$\.(.
                /* 0520 */  0xCF, 0x5B, 0x70, 0xC4, 0xCD, 0x90, 0x5C, 0x0D,  // .[p...\.
                /* 0528 */  0xC0, 0x71, 0x49, 0x30, 0x86, 0x6F, 0x33, 0xFC,  // .qI0.o3.
                /* 0530 */  0x6C, 0x07, 0x1C, 0xFE, 0xFF, 0x17, 0x11, 0xC0,  // l.......
                /* 0538 */  0x92, 0x56, 0x8B, 0x4A, 0x9D, 0x5E, 0x44, 0xC0,  // .V.J.^D.
                /* 0540 */  0x15, 0xE6, 0xC6, 0x84, 0xBE, 0x2D, 0xF9, 0x6C,  // .....-.l
                /* 0548 */  0xE7, 0xE9, 0x1F, 0xDA, 0x01, 0x90, 0x8B, 0x08,  // ........
                /* 0550 */  0x4A, 0x06, 0x85, 0x84, 0x1C, 0x0E, 0x50, 0xE7,  // J.....P.
                /* 0558 */  0x47, 0xC3, 0x19, 0xC4, 0x80, 0xCE, 0x75, 0x38,  // G.....u8
                /* 0560 */  0x40, 0x4F, 0xD9, 0x43, 0x39, 0xB3, 0x47, 0x3B,  // @O.C9.G;
                /* 0568 */  0x9F, 0x89, 0x7D, 0xA0, 0x3B, 0xD8, 0x17, 0x54,  // ..}.;..T
                /* 0570 */  0x23, 0x3D, 0x8E, 0x1C, 0xDD, 0x19, 0x9D, 0xD2,  // #=......
                /* 0578 */  0xAB, 0x99, 0x11, 0x62, 0x1D, 0x97, 0x2F, 0x08,  // ...b../.
                /* 0580 */  0x3E, 0xBD, 0x03, 0x6E, 0xFE, 0xFF, 0xF7, 0x3A,  // >..n...:
                /* 0588 */  0x80, 0x3F, 0x0A, 0x65, 0x1E, 0x2B, 0xC0, 0x15,  // .?.e.+..
                /* 0590 */  0xE0, 0x58, 0x81, 0x3E, 0x4F, 0x78, 0x42, 0x87,  // .X.>OxB.
                /* 0598 */  0xFB, 0x5C, 0xE1, 0x57, 0x09, 0x3F, 0x56, 0xF0,  // .\.W.?V.
                /* 05A0 */  0xE8, 0x24, 0x3A, 0x12, 0xC0, 0xCD, 0x72, 0x24,  // .$:...r$
                /* 05A8 */  0x40, 0x5F, 0x20, 0x7C, 0xAC, 0xC0, 0x5F, 0x3D,  // @_ |.._=
                /* 05B0 */  0xF9, 0x81, 0x02, 0xE6, 0xFF, 0xFF, 0x3A, 0x07,  // ......:.
                /* 05B8 */  0xB0, 0xD7, 0xA9, 0xC4, 0x0B, 0xC5, 0x03, 0x05,  // ........
                /* 05C0 */  0xB8, 0x42, 0x1C, 0x28, 0xD0, 0x52, 0x14, 0xFC,  // .B.(.R..
                /* 05C8 */  0xFF, 0x8F, 0xC3, 0x3E, 0x50, 0x60, 0x44, 0x1C,  // ...>P`D.
                /* 05D0 */  0x28, 0x50, 0xF1, 0x49, 0x7C, 0xEC, 0x41, 0x45,  // (P.I|.AE
                /* 05D8 */  0x1E, 0x37, 0x05, 0x31, 0xA0, 0xF3, 0x1C, 0x09,  // .7.1....
                /* 05E0 */  0xD0, 0x8A, 0xAE, 0x73, 0xA8, 0x23, 0x05, 0xC0,  // ...s.#..
                /* 05E8 */  0xD4, 0xFF, 0xFF, 0x91, 0x02, 0x58, 0x78, 0x3C,  // .....Xx<
                /* 05F0 */  0x52, 0x80, 0x2E, 0xCE, 0x3A, 0x75, 0xA4, 0xC0,  // R...:u..
                /* 05F8 */  0x89, 0x02, 0xD2, 0x91, 0xE2, 0xC8, 0x0E, 0xED,  // ........
                /* 0600 */  0x78, 0xD9, 0xAD, 0xD8, 0xFF, 0x09, 0x7A, 0x2E,  // x.....z.
                /* 0608 */  0x23, 0x32, 0x8E, 0x14, 0xA8, 0xE0, 0x60, 0x14,  // #2....`.
                /* 0610 */  0xC4, 0x23, 0x73, 0xA8, 0x23, 0x01, 0x5A, 0xD2,  // .#s.#.Z.
                /* 0618 */  0xA1, 0x8A, 0xDE, 0x08, 0x0C, 0xF2, 0xF0, 0xE7,  // ........
                /* 0620 */  0x19, 0x3D, 0x15, 0xBC, 0x95, 0xF9, 0xF0, 0xEE,  // .=......
                /* 0628 */  0xB1, 0x9E, 0xC8, 0x8B, 0x00, 0x3B, 0x17, 0x80,  // .....;..
                /* 0630 */  0x9B, 0xC0, 0xE7, 0x02, 0x40, 0x94, 0x4C, 0x87,  // ....@.L.
                /* 0638 */  0x12, 0xCF, 0x05, 0x30, 0xFF, 0xFF, 0xE7, 0x02,  // ...0....
                /* 0640 */  0x18, 0xE2, 0x4F, 0x2E, 0x68, 0x09, 0x40, 0x9A,  // ..O.h.@.
                /* 0648 */  0x53, 0x9D, 0x17, 0x5B, 0x61, 0x3F, 0x75, 0x90,  // S..[a?u.
                /* 0650 */  0x73, 0x01, 0x1D, 0x91, 0x63, 0x93, 0xE8, 0x48,  // s...c..H
                /* 0658 */  0xE0, 0x73, 0x01, 0x8F, 0x7A, 0x2E, 0xA0, 0x20,  // .s..z.. 
                /* 0660 */  0x06, 0x74, 0x8E, 0x73, 0x01, 0x5A, 0xC9, 0xC9,  // .t.s.Z..
                /* 0668 */  0x83, 0x0C, 0xF6, 0x48, 0x9F, 0x5A, 0x00, 0xD3,  // ...H.Z..
                /* 0670 */  0xE7, 0x3E, 0xC0, 0xCE, 0xFF, 0xFF, 0x38, 0x01,  // .>....8.
                /* 0678 */  0xCC, 0x0C, 0xEA, 0xD4, 0x6A, 0xF2, 0x38, 0x01,  // ....j.8.
                /* 0680 */  0xAE, 0x3C, 0xC7, 0x09, 0xB4, 0x2A, 0x20, 0x8D,  // .<...* .
                /* 0688 */  0xEC, 0x59, 0xD7, 0x1A, 0xA1, 0x88, 0x9E, 0x73,  // .Y.....s
                /* 0690 */  0x15, 0x4A, 0x09, 0x85, 0xB4, 0x9C, 0x5A, 0x50,  // .J....ZP
                /* 0698 */  0xE9, 0xC7, 0x4D, 0x41, 0x0C, 0xE8, 0x68, 0x27,  // ..MA..h'
                /* 06A0 */  0x61, 0x28, 0x63, 0x78, 0x02, 0xF6, 0x64, 0x1E,  // a(cx..d.
                /* 06A8 */  0x0A, 0x82, 0xBC, 0xB2, 0xF8, 0x06, 0xCC, 0x6F,  // .......o
                /* 06B0 */  0xC1, 0x6C, 0x4A, 0xBE, 0xBB, 0xF8, 0xEA, 0x12,  // .lJ.....
                /* 06B8 */  0xCE, 0x9A, 0xAF, 0x57, 0xE4, 0x8E, 0xF5, 0x86,  // ...W....
                /* 06C0 */  0xE4, 0x7B, 0x05, 0x60, 0xF7, 0xFF, 0x7F, 0xB9,  // .{.`....
                /* 06C8 */  0x02, 0xBC, 0x3B, 0x54, 0x68, 0x52, 0xE3, 0xBD,  // ..;ThR..
                /* 06D0 */  0x02, 0x5C, 0x42, 0x56, 0xA1, 0x7B, 0x05, 0x2E,  // .\BV.{..
                /* 06D8 */  0xCE, 0x5A, 0x34, 0x8B, 0xF3, 0x78, 0xBB, 0x7A,  // .Z4..x.z
                /* 06E0 */  0xAF, 0x60, 0x41, 0xEE, 0x15, 0xA8, 0x08, 0x14,  // .`A.....
                /* 06E8 */  0x0A, 0x71, 0xAF, 0x40, 0xC9, 0xBE, 0xFC, 0x50,  // .q.@...P
                /* 06F0 */  0x10, 0x8F, 0xCB, 0x41, 0x8E, 0x04, 0x68, 0x29,  // ...A..h)
                /* 06F8 */  0x20, 0xBA, 0x00, 0x3C, 0x3B, 0xFB, 0xC6, 0x6F,  //  ..<;..o
                /* 0700 */  0x90, 0x73, 0x7D, 0x09, 0x60, 0xD7, 0x09, 0xE0,  // .s}.`...
                /* 0708 */  0xF8, 0xFF, 0xBF, 0x11, 0xF8, 0x0A, 0x0B, 0xE7,  // ........
                /* 0710 */  0xEE, 0x81, 0x9F, 0xE9, 0x4B, 0x07, 0x9B, 0x15,  // ....K...
                /* 0718 */  0x78, 0x07, 0xEC, 0xBB, 0x11, 0xE0, 0x7B, 0x24,  // x.....{$
                /* 0720 */  0x3E, 0x74, 0x00, 0x7E, 0xFE, 0xFF, 0x87, 0x0E,  // >t.~....
                /* 0728 */  0x6E, 0xD3, 0xAB, 0xC7, 0x43, 0x07, 0xC8, 0x32,  // n...C..2
                /* 0730 */  0xDC, 0x8D, 0xD0, 0x97, 0x22, 0x1F, 0x61, 0x3D,  // ....".a=
                /* 0738 */  0xA6, 0x43, 0x62, 0x1A, 0x0E, 0x1D, 0xA8, 0xF4,  // .Cb.....
                /* 0740 */  0x24, 0x4A, 0x7E, 0x24, 0x40, 0x65, 0x3D, 0x12,  // $J~$@e=.
                /* 0748 */  0x50, 0x10, 0x03, 0xFA, 0xD0, 0x01, 0xF8, 0xB8,  // P.......
                /* 0750 */  0x4E, 0x00, 0x0B, 0x09, 0x17, 0x16, 0x54, 0xE8,  // N.....T.
                /* 0758 */  0xC9, 0x52, 0x10, 0x4F, 0xD6, 0x81, 0x26, 0x8B,  // .R.O..&.
                /* 0760 */  0xBE, 0x40, 0xF8, 0xCC, 0xE7, 0xC9, 0x62, 0x4E,  // .@....bN
                /* 0768 */  0x14, 0x8F, 0x45, 0xB8, 0x5B, 0x11, 0x30, 0xFB,  // ..E.[.0.
                /* 0770 */  0xFF, 0xDF, 0x28, 0x00, 0x1B, 0x3F, 0xD8, 0x52,  // ..(..?.R
                /* 0778 */  0x9D, 0xDE, 0x28, 0xC0, 0x25, 0xE5, 0x56, 0x84,  // ..(.%.V.
                /* 0780 */  0x0E, 0x74, 0xA3, 0x20, 0x43, 0x7A, 0xB6, 0x3C,  // .t. Cz.<
                /* 0788 */  0x24, 0x16, 0xE5, 0x46, 0x81, 0x3A, 0x6F, 0x3B,  // $..F.:o;
                /* 0790 */  0xC6, 0xA9, 0x00, 0x25, 0xFC, 0x56, 0x44, 0x41,  // ...%.VDA
                /* 0798 */  0x7C, 0x2B, 0x02, 0x9C, 0xA4, 0x19, 0x14, 0x5A,  // |+.....Z
                /* 07A0 */  0xCF, 0xAD, 0x08, 0xCA, 0xCD, 0x01, 0x3B, 0x2D,  // ......;-
                /* 07A8 */  0x70, 0xFE, 0xFF, 0xAF, 0x45, 0x00, 0x43, 0x25,  // p...E.C%
                /* 07B0 */  0x5A, 0xD4, 0x7A, 0xEA, 0x00, 0x59, 0x80, 0x6B,  // Z.z..Y.k
                /* 07B8 */  0x11, 0x5A, 0x06, 0x90, 0xEE, 0x67, 0x2F, 0xC8,  // .Z...g/.
                /* 07C0 */  0x1E, 0xDA, 0xF5, 0xF2, 0x53, 0x07, 0x8F, 0x6E,  // ....S..n
                /* 07C8 */  0xE0, 0xFF, 0x7F, 0x24, 0x80, 0x7D, 0x6D, 0x03,  // ...$.}m.
                /* 07D0 */  0xC7, 0xD9, 0xF3, 0xD4, 0x03, 0xBD, 0x78, 0x3C,  // ......x<
                /* 07D8 */  0x22, 0x03, 0xAC, 0xFD, 0xFF, 0x1F, 0x28, 0xC0,  // ".....(.
                /* 07E0 */  0xA0, 0xF1, 0x89, 0x5C, 0xE6, 0x81, 0x02, 0x64,  // ...\...d
                /* 07E8 */  0xAB, 0xA0, 0x67, 0x2D, 0x4B, 0x86, 0x41, 0x49,  // ..g-K.AI
                /* 07F0 */  0x80, 0x90, 0xA4, 0x21, 0xA0, 0x46, 0xE8, 0x39,  // ...!.F.9
                /* 07F8 */  0x37, 0x7F, 0x1A, 0x26, 0xD3, 0xF1, 0x05, 0xC2,  // 7..&....
                /* 0800 */  0x03, 0xB0, 0xB4, 0xB1, 0xA1, 0x4E, 0x44, 0x1E,  // .....ND.
                /* 0808 */  0xE4, 0xAB, 0x84, 0x6F, 0x44, 0xBE, 0x78, 0x19,  // ...oD.x.
                /* 0810 */  0x26, 0x81, 0xC7, 0xC6, 0xD0, 0xF8, 0x89, 0x00,  // &.......
                /* 0818 */  0x06, 0xE0, 0x21, 0xBE, 0xDB, 0x7B, 0x10, 0x9E,  // ..!..{..
                /* 0820 */  0xD9, 0x41, 0x60, 0x0E, 0x1D, 0xBE, 0x9C, 0xB6,  // .A`.....
                /* 0828 */  0x7A, 0x24, 0x40, 0xB8, 0xBF, 0x11, 0xE8, 0xC8,  // z$@.....
                /* 0830 */  0xFC, 0x22, 0xF0, 0x28, 0x6D, 0x10, 0x5B, 0x13,  // .".(m.[.
                /* 0838 */  0x60, 0x6B, 0xF2, 0x02, 0xF2, 0x69, 0x20, 0xCA,  // `k...i .
                /* 0840 */  0x29, 0x05, 0x8A, 0x13, 0x35, 0x4A, 0x73, 0x02,  // )...5Js.
                /* 0848 */  0x8C, 0x41, 0x21, 0x40, 0x62, 0xBD, 0x07, 0xD4,  // .A!@b...
                /* 0850 */  0x06, 0x26, 0xA8, 0x60, 0x61, 0x82, 0x18, 0xAA,  // .&.`a...
                /* 0858 */  0xFD, 0x41, 0x10, 0xF9, 0xCF, 0x00, 0x5D, 0x33,  // .A....]3
                /* 0860 */  0x1C, 0x69, 0x34, 0xA8, 0x83, 0x1A, 0x1F, 0xCD,  // .i4.....
                /* 0868 */  0xA9, 0x3E, 0x1C, 0xB1, 0xBB, 0x87, 0xA7, 0xF8,  // .>......
                /* 0870 */  0x50, 0x72, 0xB8, 0x3E, 0xF0, 0x9B, 0xE0, 0xE1,  // Pr.>....
                /* 0878 */  0xC1, 0x67, 0x08, 0x38, 0xAE, 0x01, 0x35, 0xF1,  // .g.8..5.
                /* 0880 */  0x43, 0x64, 0x9F, 0x14, 0xC3, 0xF1, 0x21, 0xFA,  // Cd....!.
                /* 0888 */  0x50, 0xE1, 0x09, 0xBC, 0x0D, 0x18, 0x90, 0x1D,  // P.......
                /* 0890 */  0x22, 0xE0, 0x8F, 0xC7, 0xD0, 0x4F, 0x11, 0xBE,  // "....O..
                /* 0898 */  0xA1, 0x7A, 0x6C, 0x1A, 0x04, 0xF9, 0xFF, 0x9F,  // .zl.....
                /* 08A0 */  0x34, 0xB0, 0xC3, 0x3C, 0xAD, 0x98, 0x21, 0x9F,  // 4..<..!.
                /* 08A8 */  0x02, 0x0E, 0x8B, 0x89, 0x3D, 0x3B, 0xD0, 0xF1,  // ....=;..
                /* 08B0 */  0x80, 0x5F, 0xF1, 0xD1, 0x40, 0x77, 0x17, 0x63,  // ._..@w.c
                /* 08B8 */  0xFB, 0xCC, 0xE2, 0x08, 0x07, 0x11, 0x28, 0xA0,  // ......(.
                /* 08C0 */  0x67, 0xE3, 0x33, 0x84, 0xEF, 0x05, 0xEC, 0x68,  // g.3....h
                /* 08C8 */  0xC1, 0x45, 0x1D, 0x2D, 0x50, 0x87, 0x06, 0x9F,  // .E.-P...
                /* 08D0 */  0x17, 0x18, 0xE2, 0xE3, 0x96, 0x21, 0x9E, 0x2C,  // .....!.,
                /* 08D8 */  0xD8, 0x21, 0x04, 0x9C, 0x23, 0xF1, 0x21, 0x04,  // .!..#.!.
                /* 08E0 */  0x3E, 0xC8, 0xCB, 0x8A, 0x21, 0x82, 0x04, 0x7F,  // >...!...
                /* 08E8 */  0x26, 0x38, 0x1D, 0x36, 0x34, 0x0C, 0x41, 0x91,  // &8.64.A.
                /* 08F0 */  0x23, 0x40, 0x1D, 0x3B, 0x3C, 0x02, 0x7E, 0x4E,  // #@.;<.~N
                /* 08F8 */  0x78, 0x20, 0x61, 0x23, 0x78, 0x27, 0xF1, 0x24,  // x a#x'.$
                /* 0900 */  0x0E, 0xC8, 0x67, 0x0B, 0x23, 0xC4, 0x2E, 0xF7,  // ..g.#...
                /* 0908 */  0x88, 0x41, 0x6E, 0x3F, 0xC7, 0xF7, 0x0C, 0x83,  // .An?....
                /* 0910 */  0x19, 0x13, 0xEE, 0xC4, 0xE0, 0x21, 0xF0, 0x01,  // .....!..
                /* 0918 */  0x3C, 0x5B, 0x9C, 0x9F, 0x4F, 0x28, 0x67, 0x85,  // <[..O(g.
                /* 0920 */  0x1B, 0x31, 0x9F, 0x12, 0x6E, 0x00, 0x18, 0x85,  // .1..n...
                /* 0928 */  0x36, 0x7D, 0x6A, 0x34, 0x6A, 0xD5, 0xA0, 0x4C,  // 6}j4j..L
                /* 0930 */  0x8D, 0x32, 0x0D, 0x6A, 0xF5, 0xA9, 0xD4, 0x98,  // .2.j....
                /* 0938 */  0x31, 0xA3, 0x50, 0x3A, 0xEE, 0xF9, 0x04, 0x60,  // 1.P:...`
                /* 0940 */  0x11, 0x8F, 0x00, 0x81, 0x58, 0x2C, 0x85, 0x8C,  // ....X,..
                /* 0948 */  0x8C, 0xCA, 0x0E, 0xFE, 0xFF, 0x40, 0x4C, 0xE5,  // .....@L.
                /* 0950 */  0xBB, 0x44, 0x40, 0xD6, 0x0C, 0x22, 0x20, 0xA7,  // .D@.." .
                /* 0958 */  0xB6, 0x00, 0xC4, 0x34, 0xBC, 0x31, 0x04, 0xE4,  // ...4.1..
                /* 0960 */  0x64, 0x1E, 0x80, 0x58, 0x4E, 0x10, 0x01, 0x59,  // d..XN..Y
                /* 0968 */  0xAA, 0x09, 0x20, 0xA6, 0x1B, 0x44, 0x40, 0xD6,  // .. ..D@.
                /* 0970 */  0xAA, 0x62, 0x10, 0x14, 0x44, 0x40, 0xD6, 0xF1,  // .b..D@..
                /* 0978 */  0x72, 0x10, 0x90, 0x55, 0x81, 0x08, 0xC8, 0xF9,  // r..U....
                /* 0980 */  0x6C, 0x00, 0xB1, 0xB0, 0x20, 0x02, 0xB2, 0x48,  // l... ..H
                /* 0988 */  0x1D, 0x40, 0x4C, 0x31, 0x88, 0x80, 0xAC, 0xCD,  // .@L1....
                /* 0990 */  0x07, 0x10, 0x53, 0x0A, 0xA2, 0x01, 0x91, 0x47,  // ..S....G
                /* 0998 */  0x81, 0x80, 0x2C, 0x81, 0x42, 0x40, 0x8E, 0x0B,  // ..,.B@..
                /* 09A0 */  0x22, 0x20, 0x87, 0x07, 0xA2, 0x39, 0xDE, 0x0F,  // " ...9..
                /* 09A8 */  0x02, 0x72, 0x28, 0x10, 0x01, 0x39, 0xC0, 0xB3,  // .r(..9..
                /* 09B0 */  0x41, 0x40, 0x8E, 0x03, 0x22, 0x20, 0x4B, 0xD2,  // A@.." K.
                /* 09B8 */  0x02, 0xC4, 0xF4, 0x81, 0x08, 0xC8, 0x21, 0x81,  // ......!.
                /* 09C0 */  0x68, 0x62, 0x20, 0x9A, 0xD8, 0x0B, 0x10, 0xCB,  // hb .....
                /* 09C8 */  0x0F, 0x22, 0x20, 0x87, 0x30, 0x03, 0xC4, 0x12,  // ." .0...
                /* 09D0 */  0x81, 0x08, 0xC8, 0xEA, 0xBF, 0x56, 0x02, 0x72,  // .....V.r
                /* 09D8 */  0x16, 0x10, 0x0D, 0x9F, 0xBC, 0x0A, 0x04, 0x64,  // .......d
                /* 09E0 */  0x45, 0x20, 0x02, 0x72, 0x7A, 0x20, 0xAA, 0xC5,  // E .rz ..
                /* 09E8 */  0xCE, 0xF9, 0x91, 0xBE, 0x0B, 0x05, 0xE4, 0x54,  // .......T
                /* 09F0 */  0x20, 0x02, 0x72, 0x02, 0x3F, 0x40, 0x2C, 0x0F,  //  .r.?@,.
                /* 09F8 */  0x88, 0x80, 0xAC, 0xC7, 0x10, 0x10, 0x53, 0x07,  // ......S.
                /* 0A00 */  0x22, 0x20, 0x47, 0x52, 0x04, 0xC4, 0xF2, 0x81,  // " GR....
                /* 0A08 */  0x08, 0xC8, 0x59, 0x1C, 0x01, 0xB1, 0x64, 0x20,  // ..Y...d 
                /* 0A10 */  0x02, 0xB2, 0x42, 0x4B, 0x40, 0x4C, 0x2E, 0x88,  // ..BK@L..
                /* 0A18 */  0x80, 0x2C, 0x4D, 0x13, 0x10, 0x13, 0x0A, 0x22,  // .,M...."
                /* 0A20 */  0x20, 0xC7, 0xF3, 0x04, 0xC4, 0xB2, 0x82, 0x08,  //  .......
                /* 0A28 */  0xC8, 0x4A, 0x5F, 0x1E, 0x02, 0xB2, 0x6C, 0x10,  // .J_...l.
                /* 0A30 */  0x01, 0x59, 0xA2, 0x29, 0x20, 0x26, 0x18, 0x44,  // .Y.) &.D
                /* 0A38 */  0x40, 0x8E, 0xA9, 0x0A, 0x88, 0x65, 0x06, 0x11,  // @....e..
                /* 0A40 */  0x90, 0x53, 0xBA, 0x02, 0xA2, 0xAE, 0xFE, 0xFF,  // .S......
                /* 0A48 */  0x03, 0xA0, 0xCF, 0x9C, 0x03, 0x60, 0x20, 0x02,  // .....` .
                /* 0A50 */  0x72, 0x6C, 0x20, 0xAA, 0xE1, 0x59, 0x26, 0x20,  // rl ..Y& 
                /* 0A58 */  0xE7, 0x05, 0x11, 0x90, 0xD3, 0x03, 0x51, 0xD9,  // ......Q.
                /* 0A60 */  0x6F, 0x11, 0x01, 0x39, 0x03, 0x88, 0x80, 0xAC,  // o..9....
                /* 0A68 */  0xF7, 0xC3, 0x13, 0x88, 0xA8, 0x07, 0xD1, 0x40,  // .......@
                /* 0A70 */  0xC8, 0x4B, 0x24, 0x08, 0xD1, 0xF8, 0x46, 0x12,  // .K$...F.
                /* 0A78 */  0x10, 0x01, 0xA1, 0xFF, 0x7F                     // .....
            })
            Method (IANE, 1, Serialized)
            {
                IANQ (Arg0)
                Notify (ATKD, 0xFF) // Hardware-Specific
            }

            Method (INIT, 1, NotSerialized)
            {
                ATKP = One
                Return (One)
            }

            Method (BSTS, 0, NotSerialized)
            {
                Local0 = Zero
                If (^^PCI0.SBRG.EC0.ACAP ())
                {
                    Local0 = Zero
                }
                Else
                {
                    Local0 = ^^PCI0.SBRG.EC0.ST8E (0x05, Zero)
                    If (((Local0 & 0xFF) == 0x34))
                    {
                        Local0 = 0x05
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Return (Local0)
            }

            Method (SFUN, 0, NotSerialized)
            {
                Local0 = 0x21
                Return (Local0)
            }

            Method (WDOG, 1, NotSerialized)
            {
                Return (Zero)
            }

            Method (KBNI, 0, NotSerialized)
            {
                Return (One)
            }

            Name (CA1M, Zero)
            Method (RMEM, 1, NotSerialized)
            {
                OperationRegion (VMEM, SystemMemory, Arg0, 0x04)
                Field (VMEM, ByteAcc, NoLock, Preserve)
                {
                    MEMI,   32
                }

                Local0 = MEMI /* \_SB_.ATKD.RMEM.MEMI */
                Return (Local0)
            }

            Method (WMEM, 2, NotSerialized)
            {
                OperationRegion (VMEM, SystemMemory, Arg0, 0x04)
                Field (VMEM, ByteAcc, NoLock, Preserve)
                {
                    MEMI,   32
                }

                MEMI = Arg1
            }

            Name (MEMD, Package (0x81)
            {
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF
            })
            Name (CALM, Package (0x81)
            {
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF
            })
            Method (SCDG, 2, NotSerialized)
            {
                MEMD [Zero] = Zero
                CA1M = CAL1 /* \_SB_.CAL1 */
                If ((ToInteger (CAL1) == Zero))
                {
                    Return (MEMD) /* \_SB_.ATKD.MEMD */
                }

                If ((Arg0 != One))
                {
                    MEMD [Zero] = Zero
                    Return (MEMD) /* \_SB_.ATKD.MEMD */
                }

                Local2 = Zero
                Local3 = One
                Local1 = CA1M /* \_SB_.ATKD.CA1M */
                MEMD [Zero] = 0x0200
                While ((Local3 < 0x81))
                {
                    MEMD [Local3] = RMEM ((Local1 + Local2))
                    Local2 += 0x04
                    Local3 += One
                }

                Return (MEMD) /* \_SB_.ATKD.MEMD */
            }

            Method (SPEC, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    Return (0x00090000)
                }
                ElseIf ((Arg0 == One))
                {
                    Return (One)
                }

                Return (0xFFFFFFFE)
            }

            Method (OSVR, 1, NotSerialized)
            {
                If ((OSFG == Zero))
                {
                    OSFG = Arg0
                }
            }

            Method (VERS, 2, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    Return (0x00090000)
                }

                Return (0xFFFFFFFE)
            }

            Method (SPBL, 1, NotSerialized)
            {
                If ((Arg0 == 0x80))
                {
                    If ((MSOS () >= OSVT))
                    {
                        Return (Zero)
                    }

                    Return (One)
                }

                If ((Arg0 > 0x0F))
                {
                    Return (Zero)
                }

                If ((Arg0 < Zero))
                {
                    Return (Zero)
                }
            }

            Method (SDSP, 1, NotSerialized)
            {
                If (NATK ())
                {
                    Return (SWHG (Arg0))
                }

                Return (Zero)
            }

            Method (GDSP, 1, NotSerialized)
            {
                If (NATK ())
                {
                    If ((Arg0 == 0x80))
                    {
                        Return (One)
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        Return (GCDM ())
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (Zero)
            }

            Method (GLCD, 0, NotSerialized)
            {
                Return (LCDV) /* \_SB_.LCDV */
            }

            Method (ANVI, 1, Serialized)
            {
                SMIF = 0x04
                Return (ASMI (Arg0))
            }

            Method (CBIF, 1, Serialized)
            {
                Return (Zero)
            }
        }
    }

    Scope (_SB)
    {
        Device (ASUP)
        {
            Name (_HID, "ASUS2018")  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }
    }

    Scope (\)
    {
        OperationRegion (DBIO, SystemIO, 0x03F8, 0x08)
        Field (DBIO, ByteAcc, NoLock, Preserve)
        {
            SOUT,   8, 
            Offset (0x05), 
            SSAT,   8
        }

        Method (GETC, 2, NotSerialized)
        {
            CreateByteField (Arg0, Arg1, TCHR)
            Return (TCHR) /* \GETC.TCHR */
        }

        Method (THRE, 0, NotSerialized)
        {
            Local0 = (SSAT & 0x20)
            While ((Local0 == Zero))
            {
                Local0 = (SSAT & 0x20)
            }
        }

        Method (OUTX, 1, NotSerialized)
        {
            THRE ()
            SOUT = Arg0
        }

        Method (OUTC, 1, NotSerialized)
        {
            If ((Arg0 == 0x0A))
            {
                OUTX (0x0D)
            }

            OUTX (Arg0)
        }

        Method (DBGN, 1, NotSerialized)
        {
            Local0 = (Arg0 & 0x0F)
            If ((Local0 < 0x0A))
            {
                Local0 += 0x30
            }
            Else
            {
                Local0 += 0x37
            }

            OUTC (Local0)
        }

        Method (DBGB, 1, NotSerialized)
        {
            Local0 = (Arg0 >> 0x04)
            DBGN (Local0)
            DBGN (Arg0)
        }

        Method (DBGW, 1, NotSerialized)
        {
            Local0 = (Arg0 >> 0x08)
            DBGB (Local0)
            DBGB (Arg0)
        }

        Method (DBGD, 1, NotSerialized)
        {
            Local0 = (Arg0 >> 0x10)
            DBGW (Local0)
            DBGW (Arg0)
        }

        Method (DBGQ, 1, NotSerialized)
        {
            Local0 = (Arg0 >> 0x30)
            DBGW (Local0)
            Local0 = (Arg0 >> 0x20)
            DBGW (Local0)
            Local0 = (Arg0 >> 0x10)
            DBGW (Local0)
            DBGW (Arg0)
        }

        Name (DBGZ, Buffer (0x50){})
        Method (AMLI, 1, NotSerialized)
        {
            If ((ObjectType (Arg0) == One))
            {
                If ((Arg0 > 0xFFFFFFFF))
                {
                    DBGQ (Arg0)
                }
                ElseIf ((Arg0 > 0xFFFF))
                {
                    DBGD (Arg0)
                }
                ElseIf ((Arg0 > 0xFF))
                {
                    DBGW (Arg0)
                }
                Else
                {
                    DBGB (Arg0)
                }

                Return (Zero)
            }

            If ((ObjectType (Arg0) == 0x02))
            {
                DBGZ = Arg0
                Local1 = Zero
                While (One)
                {
                    Local0 = GETC (DBGZ, Local1)
                    If ((Local0 == Zero))
                    {
                        Return (Zero)
                    }

                    OUTC (Local0)
                    Local1++
                }

                Return (Zero)
            }

            If ((ObjectType (Arg0) == 0x03))
            {
                Local0 = Zero
                While ((Local0 < SizeOf (Arg0)))
                {
                    Local1 = GETC (Arg0, Local0)
                    If ((Local0 > Zero))
                    {
                        OUTC (0x20)
                    }

                    DBGB (Local1)
                    Local0++
                }

                Return (Zero)
            }

            If ((ObjectType (Arg0) == 0x04))
            {
                Local0 = Zero
                While ((Local0 < SizeOf (Arg0)))
                {
                    OUTC (0x20)
                    OUTC (0x20)
                    AMLI (DerefOf (Arg0 [Local0]))
                    OUTC (0x0A)
                    Local0++
                }

                Return (Zero)
            }

            Return (One)
        }
    }

    Scope (_SB.PCI0.SBRG)
    {
        Device (EC0)
        {
            Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0062,             // Range Minimum
                    0x0062,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0066,             // Range Minimum
                    0x0066,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
            })
            Method (_GPE, 0, NotSerialized)  // _GPE: General Purpose Events
            {
                Local0 = 0x03
                Return (Local0)
            }

            Mutex (MUEC, 0x00)
            Mutex (MU4T, 0x00)
            Mutex (CMUT, 0x00)
            Name (ECFL, Ones)
            Method (ECAV, 0, NotSerialized)
            {
                If ((ECFL == Ones))
                {
                    If ((_REV >= 0x02))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }

                    Return (Zero)
                }

                Return (ECFL) /* \_SB_.PCI0.SBRG.EC0_.ECFL */
            }

            OperationRegion (BRIH, SystemIO, 0x0381, One)
            Field (BRIH, ByteAcc, Lock, Preserve)
            {
                BRAH,   8
            }

            OperationRegion (BRAM, SystemIO, 0x0382, 0x02)
            Field (BRAM, ByteAcc, Lock, Preserve)
            {
                BRAI,   8, 
                BRAD,   8
            }

            IndexField (BRAI, BRAD, ByteAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                CCI0,   8, 
                CCI1,   8, 
                CCI2,   8, 
                CCI3,   8, 
                CTL0,   8, 
                CTL1,   8, 
                CTL2,   8, 
                CTL3,   8, 
                CTL4,   8, 
                CTL5,   8, 
                CTL6,   8, 
                CTL7,   8, 
                MGI0,   8, 
                MGI1,   8, 
                MGI2,   8, 
                MGI3,   8, 
                MGI4,   8, 
                MGI5,   8, 
                MGI6,   8, 
                MGI7,   8, 
                MGI8,   8, 
                MGI9,   8, 
                MGIA,   8, 
                MGIB,   8, 
                MGIC,   8, 
                MGID,   8, 
                MGIE,   8, 
                MGIF,   8, 
                MGO0,   8, 
                MGO1,   8, 
                MGO2,   8, 
                MGO3,   8, 
                MGO4,   8, 
                MGO5,   8, 
                MGO6,   8, 
                MGO7,   8, 
                MGO8,   8, 
                MGO9,   8, 
                MGOA,   8, 
                MGOB,   8, 
                MGOC,   8, 
                MGOD,   8, 
                MGOE,   8, 
                MGOF,   8, 
                Offset (0x40), 
                BRD1,   8, 
                BRD2,   8, 
                BRD3,   8, 
                BRD4,   8, 
                Offset (0x6E), 
                BFLB,   8, 
                BCLB,   8, 
                Offset (0x8E), 
                CNTD,   8, 
                Offset (0x90), 
                EPWS,   8, 
                EB0S,   8, 
                EB1S,   8, 
                EB0T,   8, 
                EB1T,   8, 
                Offset (0x98), 
                ECPU,   8, 
                ECRT,   8, 
                EPSV,   8, 
                Offset (0x9C), 
                THL0,   8, 
                THH0,   8, 
                THL1,   8, 
                THH1,   8, 
                B0VL,   16, 
                B0RC,   16, 
                B0FC,   16, 
                B0MD,   16, 
                B0ST,   16, 
                B0CC,   16, 
                B0DC,   16, 
                B0DV,   16, 
                B1VL,   16, 
                B1RC,   16, 
                B1FC,   16, 
                B1MD,   16, 
                B1ST,   16, 
                B1CC,   16, 
                B1DC,   16, 
                B1DV,   16, 
                ETS0,   8, 
                EGPT,   8
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((MSOS () <= OSME))
                {
                    ECFL = One
                }

                KINI ()
            }

            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
                If ((Arg0 == 0x03))
                {
                    ECFL = Arg1
                }
            }
        }
    }

    Scope (_SB.PCI0.SBRG.EC0)
    {
        Device (AC0)
        {
            Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
            Name (XX00, Buffer (0x03){})
            Name (ACDC, 0xFF)
            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                ACPF = ACPS ()
                If (((ACPF != ACDC) || (ACDC == 0xFF)))
                {
                    CreateWordField (XX00, Zero, SSZE)
                    CreateByteField (XX00, 0x02, ACST)
                    SSZE = 0x03
                    If (ACPF)
                    {
                        AFN4 (One)
                        ACST = Zero
                    }
                    Else
                    {
                        AFN4 (0x02)
                        ACST = One
                    }

                    ALIB (One, XX00)
                    ACDC = ACPF /* \_SB_.ACPF */
                }

                Return (ACPF) /* \_SB_.ACPF */
            }

            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                PCI0
            })
        }

        Device (LID)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                Local0 = One
                Local0 = RPIN (One)
                If ((Local0 == Ones))
                {
                    Local0 = One
                }

                Return (Local0)
            }
        }
    }

    Scope (_SB.PCI0.SBRG.EC0)
    {
        OperationRegion (ECAD, SystemMemory, EGBF, 0x10)
        Field (ECAD, DWordAcc, NoLock, Preserve)
        {
            MFUN,   16, 
            SFUN,   16, 
            LEN,    16, 
            STAS,   8, 
            EROR,   8, 
            CMD,    8, 
            EDA1,   8, 
            EDA2,   8, 
            EDA3,   8, 
            EDA4,   8, 
            EDA5,   8, 
            Offset (0x10)
        }

        Name (CUNT, Zero)
        Method (ECAC, 0, NotSerialized)
        {
            MFUN = 0x30
            SFUN = One
            LEN = 0x10
            EROR = 0xFF
            CUNT = One
            While ((CUNT < 0x06))
            {
                ISMI (0x9C)
                If ((EROR != Zero))
                {
                    CUNT += One
                }
                Else
                {
                    Break
                }
            }
        }

        Method (ST83, 1, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = 0xFF
                EDA1 = 0x83
                EDA2 = Arg0
                ECAC ()
                Local0 = EDA1 /* \_SB_.PCI0.SBRG.EC0_.EDA1 */
                Release (MU4T)
                Return (Local0)
            }

            Return (Ones)
        }

        Method (ST84, 2, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = 0xFF
                EDA1 = 0x84
                EDA2 = Arg0
                EDA3 = Arg1
                ECAC ()
                Release (MU4T)
                Return (Zero)
            }

            Return (Ones)
        }

        Method (ST87, 2, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = 0xFF
                EDA1 = 0x87
                EDA2 = Arg0
                EDA3 = Arg1
                ECAC ()
                Local0 = EDA1 /* \_SB_.PCI0.SBRG.EC0_.EDA1 */
                Release (MU4T)
                If ((Arg0 == Zero))
                {
                    Return (Local0)
                }

                Return (Zero)
            }

            Return (Ones)
        }

        Method (ST8E, 2, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = 0xFF
                EDA1 = 0x8E
                EDA2 = Arg0
                EDA3 = Arg1
                ECAC ()
                Local0 = EDA1 /* \_SB_.PCI0.SBRG.EC0_.EDA1 */
                Release (MU4T)
                Return (Local0)
            }

            Return (Ones)
        }

        Method (ST95, 2, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = 0xFF
                EDA1 = 0x95
                EDA2 = Arg0
                EDA3 = Arg1
                ECAC ()
                Local0 = EDA1 /* \_SB_.PCI0.SBRG.EC0_.EDA1 */
                Release (MU4T)
                If ((Arg0 == Zero))
                {
                    Return (Local0)
                }

                Return (Zero)
            }

            Return (Ones)
        }

        Method (ST98, 1, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = 0xFF
                EDA1 = 0x98
                EDA2 = Arg0
                ECAC ()
                Release (MU4T)
                Return (Zero)
            }

            Return (Ones)
        }

        Method (ST9E, 3, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = 0xFF
                EDA1 = 0x9E
                EDA2 = Arg0
                EDA3 = Arg1
                EDA4 = Arg2
                ECAC ()
                Release (MU4T)
                Return (Zero)
            }

            Return (Ones)
        }

        Method (ST9F, 3, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = 0xFF
                EDA1 = 0x9F
                EDA2 = Arg0
                EDA3 = Arg1
                EDA4 = Arg2
                ECAC ()
                Release (MU4T)
                Return (Zero)
            }

            Return (Ones)
        }

        Method (STA8, 1, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = 0xFF
                EDA1 = 0xA8
                EDA2 = Arg0
                ECAC ()
                Local0 = EDA1 /* \_SB_.PCI0.SBRG.EC0_.EDA1 */
                Release (MU4T)
                Return (Local0)
            }

            Return (Ones)
        }

        Method (STA9, 2, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = 0xFF
                EDA1 = 0xA9
                EDA2 = Arg0
                EDA3 = Arg1
                ECAC ()
                Release (MU4T)
                Return (Zero)
            }

            Return (Ones)
        }

        Method (STB0, 1, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = 0xFF
                EDA1 = 0xB0
                EDA2 = Arg0
                ECAC ()
                Release (MU4T)
                Return (Zero)
            }

            Return (Ones)
        }

        Method (STB1, 1, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = 0xFF
                EDA1 = 0xB1
                EDA2 = Arg0
                ECAC ()
                Release (MU4T)
                Return (Zero)
            }

            Return (Ones)
        }

        Method (STB2, 1, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = 0xFF
                EDA1 = 0xB2
                EDA2 = Arg0
                ECAC ()
                Release (MU4T)
                Return (Zero)
            }

            Return (Ones)
        }

        Method (STC4, 1, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = 0xFF
                EDA1 = 0xC4
                EDA2 = Arg0
                ECAC ()
                Local0 = EDA1 /* \_SB_.PCI0.SBRG.EC0_.EDA1 */
                Release (MU4T)
                Return (Local0)
            }

            Return (Ones)
        }

        Method (STE0, 1, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = 0xFF
                EDA1 = 0xE0
                EDA2 = Arg0
                ECAC ()
                Local0 = EDA1 /* \_SB_.PCI0.SBRG.EC0_.EDA1 */
                Release (MU4T)
                Return (Local0)
            }

            Return (Ones)
        }

        Method (STE1, 2, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = 0xFF
                EDA1 = 0xE1
                EDA2 = Arg0
                EDA3 = Arg1
                ECAC ()
                Release (MU4T)
                Return (Zero)
            }

            Return (Ones)
        }

        Method (SPIN, 2, Serialized)
        {
            STE1 (Arg0, Arg1)
            Return (One)
        }

        Method (RPIN, 1, Serialized)
        {
            Local1 = STE0 (Arg0)
            Return (Local1)
        }

        Method (RRAM, 2, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                Local0 = Arg1
                Local1 = (Local0 & 0xFF)
                Local0 >>= 0x08
                Local0 &= 0xFF
                CMD = 0xFF
                EDA1 = Arg0
                EDA2 = Local0
                EDA3 = Local1
                ECAC ()
                Local0 = EDA1 /* \_SB_.PCI0.SBRG.EC0_.EDA1 */
                Release (MU4T)
                Return (Local0)
            }

            Return (Ones)
        }

        Method (WRAM, 3, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                Local0 = Arg1
                Local1 = (Local0 & 0xFF)
                Local0 >>= 0x08
                Local0 &= 0xFF
                CMD = 0xFF
                EDA1 = Arg0
                EDA2 = Local0
                EDA3 = Local1
                EDA4 = Arg2
                ECAC ()
                Release (MU4T)
                Return (One)
            }

            Return (Ones)
        }

        Method (RP2E, 1, NotSerialized)
        {
            If (((Arg0 > 0x3F) && (Arg0 < 0x70)))
            {
                Return (Zero)
            }

            Local1 = Acquire (CMUT, 0xFFFF)
            If ((Local1 == Zero))
            {
                BRAH = 0xC9
                BRAI = Arg0
                Local0 = BRAD /* \_SB_.PCI0.SBRG.EC0_.BRAD */
                Release (CMUT)
            }

            Return (Local0)
        }

        Method (WP2E, 2, NotSerialized)
        {
            If (((Arg0 > 0x3F) && (Arg0 < 0x70)))
            {
                Return (Zero)
            }

            Local1 = Acquire (CMUT, 0xFFFF)
            If ((Local1 == Zero))
            {
                BRAH = 0xC9
                BRAI = Arg0
                BRAD = Arg1
                Release (CMUT)
            }
        }

        Method (WEBC, 3, NotSerialized)
        {
            Local0 = Acquire (CMUT, 0xFFFF)
            If ((Local0 == Zero))
            {
                Local1 = 0xC8
                While (((BCLB > Zero) && (Local1 > Zero)))
                {
                    Stall (0x64)
                    Local1--
                }

                If (!Local1)
                {
                    Release (CMUT)
                    BCLB |= 0x40
                    Return (Zero)
                }

                BRAH = 0xC9
                Local0 = Zero
                While ((Local0 < Arg1))
                {
                    BRAI = (0x40 + Local0)
                    BRAD = DerefOf (Arg2 [Local0])
                    Local0++
                }

                BCLB |= 0x80
                BFLB = Arg0
                Release (CMUT)
                Return (One)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (REBC, 2, Serialized)
        {
            Name (TMBF, Buffer (Arg1)
            {
                 0x00                                             // .
            })
            Local0 = Acquire (CMUT, 0xFFFF)
            If ((Local0 == Zero))
            {
                BRAH = 0xC9
                Local1 = 0xC8
                While (((BCLB > Zero) && (Local1 > Zero)))
                {
                    Stall (0x64)
                    Local1--
                }

                If (!Local1)
                {
                    Release (CMUT)
                    BCLB |= 0x40
                    Return (TMBF) /* \_SB_.PCI0.SBRG.EC0_.REBC.TMBF */
                }

                BCLB |= 0x20
                BFLB = Arg0
                Local1 = 0x01F4
                While (((BCLB & 0x80) != 0x80))
                {
                    Stall (0x64)
                    Local1--
                    If (!Local1)
                    {
                        Release (CMUT)
                        Return (TMBF) /* \_SB_.PCI0.SBRG.EC0_.REBC.TMBF */
                    }
                }

                Local0 = Zero
                While ((Local0 < Arg1))
                {
                    BRAI = (0x40 + Local0)
                    TMBF [Local0] = BRAD /* \_SB_.PCI0.SBRG.EC0_.BRAD */
                    Local0++
                }

                BCLB |= 0x40
                Release (CMUT)
                Return (TMBF) /* \_SB_.PCI0.SBRG.EC0_.REBC.TMBF */
            }
            Else
            {
                Return (TMBF) /* \_SB_.PCI0.SBRG.EC0_.REBC.TMBF */
            }
        }

        Method (STCC, 2, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = 0xFF
                EDA1 = 0xCC
                EDA2 = Arg0
                EDA3 = Arg1
                ECAC ()
                Local0 = EDA1 /* \_SB_.PCI0.SBRG.EC0_.EDA1 */
                Release (MU4T)
                Return (Local0)
            }

            Return (Ones)
        }

        Method (STCD, 3, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = 0xFF
                EDA1 = 0xCD
                EDA2 = Arg0
                EDA3 = Arg1
                EDA4 = Arg2
                ECAC ()
                Release (MU4T)
                Return (Zero)
            }

            Return (Ones)
        }
    }

    Scope (_SB.PCI0.SBRG.EC0)
    {
        Method (GPWS, 0, Serialized)
        {
            Acquire (CMUT, 0xFFFF)
            Local0 = EPWS /* \_SB_.PCI0.SBRG.EC0_.EPWS */
            Release (CMUT)
            Return (Local0)
        }

        Method (ACPS, 0, Serialized)
        {
            Return ((GPWS () & One))
        }

        Method (ACAP, 0, Serialized)
        {
            Return (ACPF) /* \_SB_.ACPF */
        }

        Method (DCPS, 1, Serialized)
        {
            Local0 = GPWS ()
            If (Arg0)
            {
                Local0 &= 0x04
            }
            Else
            {
                Local0 &= 0x02
            }

            If (Local0)
            {
                Local0 = One
            }
            Else
            {
                Local0 = Zero
            }

            Return (Local0)
        }

        Method (BCHG, 1, Serialized)
        {
            Acquire (CMUT, 0xFFFF)
            If (Arg0)
            {
                BRAH = 0xC9
                Local0 = EB1S /* \_SB_.PCI0.SBRG.EC0_.EB1S */
                Release (CMUT)
                Local0 &= 0xFF
                If ((Local0 != 0xFF))
                {
                    Local0 &= 0x02
                }
                Else
                {
                    Local0 = Zero
                }

                Return (Local0)
            }
            Else
            {
                BRAH = 0xC9
                Local0 = EB0S /* \_SB_.PCI0.SBRG.EC0_.EB0S */
                Release (CMUT)
                Local0 &= 0xFF
                If ((Local0 != 0xFF))
                {
                    Local0 &= 0x02
                }
                Else
                {
                    Local0 = Zero
                }

                Return (Local0)
            }
        }

        Method (BCLE, 1, Serialized)
        {
            If (Arg0)
            {
                If (ECAV ())
                {
                    Local0 = Ones
                    Acquire (CMUT, 0xFFFF)
                    BRAH = 0xC9
                    Local1 = EB1S /* \_SB_.PCI0.SBRG.EC0_.EB1S */
                    Release (CMUT)
                    Local1 &= 0xFFFF
                    If ((Local1 != 0xFFFF))
                    {
                        Local1 &= 0x16
                        If ((Local1 == 0x04))
                        {
                            Local0 = Zero
                        }
                        ElseIf ((Local1 == 0x02))
                        {
                            Local0 = One
                        }
                        ElseIf ((Local1 == 0x10))
                        {
                            Local0 = One
                        }
                    }
                }
                Else
                {
                    Local0 = Ones
                }

                Return (Local0)
            }
            Else
            {
                If (ECAV ())
                {
                    Local0 = Ones
                    Acquire (CMUT, 0xFFFF)
                    BRAH = 0xC9
                    Local1 = EB0S /* \_SB_.PCI0.SBRG.EC0_.EB0S */
                    Release (CMUT)
                    Local1 &= 0xFFFF
                    If ((Local1 != 0xFFFF))
                    {
                        Local1 &= 0x16
                        If ((Local1 == 0x04))
                        {
                            Local0 = Zero
                        }
                        ElseIf ((Local1 == 0x02))
                        {
                            Local0 = One
                        }
                        ElseIf ((Local1 == 0x10))
                        {
                            Local0 = One
                        }
                    }
                }
                Else
                {
                    Local0 = Ones
                }

                Return (Local0)
            }
        }

        Method (GBTT, 1, Serialized)
        {
            Acquire (CMUT, 0xFFFF)
            If ((Arg0 == Zero))
            {
                BRAH = 0xC9
                Local0 = EB0T /* \_SB_.PCI0.SBRG.EC0_.EB0T */
            }
            Else
            {
                BRAH = 0xC9
                Local0 = EB1T /* \_SB_.PCI0.SBRG.EC0_.EB1T */
            }

            Release (CMUT)
            Return (Local0)
        }

        Method (SRSC, 1, NotSerialized)
        {
            Name (DUBF, Buffer (One)
            {
                 0x00                                             // .
            })
            DUBF [Zero] = Arg0
            Return (WEBC (0x06, One, DUBF))
        }

        Method (RTAH, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Local2 = Acquire (CMUT, 0xFFFF)
                If ((Local2 == Zero))
                {
                    BRAH = 0xC9
                    Local0 = THH0 /* \_SB_.PCI0.SBRG.EC0_.THH0 */
                    Local0 <<= 0x08
                    Local1 = THL0 /* \_SB_.PCI0.SBRG.EC0_.THL0 */
                    Local0 |= Local1
                    Release (CMUT)
                }
            }
            ElseIf ((Arg0 == One))
            {
                Local2 = Acquire (CMUT, 0xFFFF)
                If ((Local2 == Zero))
                {
                    BRAH = 0xC9
                    Local0 = THH1 /* \_SB_.PCI0.SBRG.EC0_.THH1 */
                    Local0 <<= 0x08
                    Local1 = THL1 /* \_SB_.PCI0.SBRG.EC0_.THL1 */
                    Local0 |= Local1
                    Release (CMUT)
                }
            }
            Else
            {
                Local0 = 0xFFFF
            }

            Return (Local0)
        }

        Method (TACH, 1, Serialized)
        {
            If (ECAV ())
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Local0 = RTAH (Zero)
                        Break
                    }
                    Case (One)
                    {
                        Local0 = RTAH (One)
                        Break
                    }
                    Default
                    {
                        Return (Ones)
                    }

                }

                Local0 *= 0x02
                If ((Local0 != Zero))
                {
                    Local0 = (0x0041CDB4 / Local0)
                    Return (Local0)
                }
                Else
                {
                    Return (Ones)
                }
            }
            Else
            {
                Return (Ones)
            }
        }

        Method (MPLI, 2, Serialized)
        {
            Name (DPTI, Buffer (0x07){})
            If ((FANF == 0x03))
            {
                Return (0x0F)
            }

            CreateWordField (DPTI, Zero, SSZE)
            CreateByteField (DPTI, 0x02, MSID)
            CreateDWordField (DPTI, 0x03, DECI)
            SSZE = 0x07
            Switch (ToInteger (Arg0))
            {
                Case (0x05)
                {
                    If ((Arg1 == Zero))
                    {
                        If ((RPIN (0x0E) != One))
                        {
                            If ((FANF == Zero))
                            {
                                DECI = 0x61A8
                            }
                            ElseIf ((FANF == One))
                            {
                                DECI = 0x3A98
                            }
                            ElseIf ((FANF == 0x02))
                            {
                                DECI = 0x61A8
                            }
                        }
                        Else
                        {
                            DECI = 0x61A8
                        }
                    }
                    ElseIf ((Arg1 == One))
                    {
                        If ((RPIN (0x0E) != One))
                        {
                            If ((FANF == Zero))
                            {
                                DECI = 0x2710
                            }
                            ElseIf ((FANF == One))
                            {
                                DECI = 0x2710
                            }
                            ElseIf ((FANF == 0x02))
                            {
                                DECI = 0x2710
                            }
                        }
                        Else
                        {
                            DECI = 0x2710
                        }
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        If ((RPIN (0x0E) != One))
                        {
                            If ((FANF == Zero))
                            {
                                DECI = 0x3A98
                            }
                            ElseIf ((FANF == One))
                            {
                                DECI = 0x2710
                            }
                            ElseIf ((FANF == 0x02))
                            {
                                DECI = 0x4650
                            }
                        }
                        Else
                        {
                            DECI = 0x3A98
                        }
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        If ((RPIN (0x0E) != One))
                        {
                            If ((FANF == Zero))
                            {
                                DECI = 0x2710
                            }
                            ElseIf ((FANF == One))
                            {
                                DECI = 0x2710
                            }
                            ElseIf ((FANF == 0x02))
                            {
                                DECI = 0x2EE0
                            }
                        }
                        Else
                        {
                            DECI = 0x2710
                        }
                    }

                    MSID = 0x05
                }
                Case (0x07)
                {
                    If ((Arg1 == Zero))
                    {
                        If ((RPIN (0x0E) != One))
                        {
                            If ((FANF == Zero))
                            {
                                DECI = 0x88B8
                            }
                            ElseIf ((FANF == One))
                            {
                                DECI = 0x61A8
                            }
                            ElseIf ((FANF == 0x02))
                            {
                                DECI = 0x927C
                            }
                        }
                        Else
                        {
                            DECI = 0x61A8
                        }
                    }
                    ElseIf ((Arg1 == One))
                    {
                        If ((RPIN (0x0E) != One))
                        {
                            If ((FANF == Zero))
                            {
                                DECI = 0x4E20
                            }
                            ElseIf ((FANF == One))
                            {
                                DECI = 0x3A98
                            }
                            ElseIf ((FANF == 0x02))
                            {
                                DECI = 0x4E20
                            }
                        }
                        Else
                        {
                            DECI = 0x4E20
                        }
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        If ((RPIN (0x0E) != One))
                        {
                            If ((FANF == Zero))
                            {
                                DECI = 0x61A8
                            }
                            ElseIf ((FANF == One))
                            {
                                DECI = 0x4E20
                            }
                            ElseIf ((FANF == 0x02))
                            {
                                DECI = 0x61A8
                            }
                        }
                        Else
                        {
                            DECI = 0x61A8
                        }
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        If ((RPIN (0x0E) != One))
                        {
                            If ((FANF == Zero))
                            {
                                DECI = 0x3A98
                            }
                            ElseIf ((FANF == One))
                            {
                                DECI = 0x2710
                            }
                            ElseIf ((FANF == 0x02))
                            {
                                DECI = 0x3A98
                            }
                        }
                        Else
                        {
                            DECI = 0x3A98
                        }
                    }

                    MSID = 0x07
                }
                Case (0x06)
                {
                    If ((RPIN (0x0E) != One))
                    {
                        If ((FANF == Zero))
                        {
                            DECI = 0x9C40
                        }
                        ElseIf ((FANF == One))
                        {
                            DECI = 0x7530
                        }
                        ElseIf ((FANF == 0x02))
                        {
                            DECI = 0xBB80
                        }
                    }
                    Else
                    {
                        DECI = 0x7530
                    }

                    MSID = 0x06
                }
                Case (0x03)
                {
                    If ((Arg1 == 0x04))
                    {
                        If ((RPIN (0x0E) != One))
                        {
                            If ((FANF == Zero))
                            {
                                DECI = 0x58
                            }
                            ElseIf ((FANF == One))
                            {
                                DECI = 0x46
                            }
                            ElseIf ((FANF == 0x02))
                            {
                                DECI = 0x58
                            }
                        }
                        Else
                        {
                            DECI = 0x58
                        }
                    }
                    ElseIf ((Arg1 == 0x05))
                    {
                        If ((RPIN (0x0E) != One))
                        {
                            If ((FANF == Zero))
                            {
                                DECI = 0x5C
                            }
                            ElseIf ((FANF == One))
                            {
                                DECI = 0x4B
                            }
                            ElseIf ((FANF == 0x02))
                            {
                                DECI = 0x5C
                            }
                        }
                        Else
                        {
                            DECI = 0x5C
                        }
                    }

                    MSID = 0x03
                }
                Case (0x08)
                {
                    If ((RPIN (0x0E) != One))
                    {
                        If ((FANF == Zero))
                        {
                            DECI = 0x05
                        }
                        ElseIf ((FANF == One))
                        {
                            DECI = 0x05
                        }
                        ElseIf ((FANF == 0x02))
                        {
                            DECI = 0x05
                        }
                    }
                    Else
                    {
                        DECI = 0x05
                    }

                    MSID = 0x08
                }
                Case (One)
                {
                    If ((RPIN (0x0E) != One))
                    {
                        If ((FANF == Zero))
                        {
                            DECI = 0x0113
                        }
                        ElseIf ((FANF == One))
                        {
                            DECI = 0x32
                        }
                        ElseIf ((FANF == 0x02))
                        {
                            DECI = 0x01F4
                        }
                    }
                    Else
                    {
                        DECI = 0x0113
                    }

                    MSID = One
                }

            }

            ALIB (0x0C, DPTI)
        }

        Method (STTM, 2, Serialized)
        {
            Name (DPTI, Buffer (0x07){})
            CreateWordField (DPTI, Zero, SSZE)
            CreateByteField (DPTI, 0x02, MSID)
            CreateDWordField (DPTI, 0x03, DECI)
            SSZE = 0x07
            MSID = Arg0
            DECI = Arg1
            ALIB (0x0C, DPTI)
        }

        Method (KINI, 0, Serialized)
        {
            FNIV = Zero
        }

        Name (KLDT, Zero)
        Name (PWKB, Buffer (0x04)
        {
             0x00, 0x55, 0xAA, 0xFF                           // .U..
        })
        Method (GLID, 0, Serialized)
        {
            Return (RPIN (One))
        }

        Method (GLKB, 1, NotSerialized)
        {
            If ((Arg0 == One))
            {
                Local0 = (KBLC & 0x80)
                If (Local0)
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }
            ElseIf ((Arg0 == 0x02))
            {
                Return (KBLV) /* \_SB_.KBLV */
            }
            ElseIf ((Arg0 == 0x03))
            {
                Return (0x80)
            }

            Return (Ones)
        }

        Method (SLKB, 1, NotSerialized)
        {
            KBLV = (Arg0 & 0x7F)
            If ((Arg0 & 0x80))
            {
                Local0 = DerefOf (PWKB [KBLV])
            }
            Else
            {
                Local0 = Zero
            }

            ST9E (0x1F, 0xFF, Local0)
            Return (One)
        }

        Method (CSEE, 1, Serialized)
        {
            If (ECAV ())
            {
                Acquire (MU4T, 0xFFFF)
                CMD = Arg0
                EDA1 = Arg0
                ECAC ()
                Release (MU4T)
                Return (Zero)
            }

            Return (Ones)
        }

        Method (EC0S, 1, NotSerialized)
        {
            If (((Arg0 == 0x03) || (Arg0 == 0x04)))
            {
                ST9E (0x1F, 0xFF, Zero)
            }

            If ((Arg0 == 0x05))
            {
                ST9E (0x1F, 0xFF, Zero)
            }
        }

        Method (EC0W, 1, NotSerialized)
        {
            KINI ()
            If ((Arg0 <= 0x04))
            {
                DCPF = DCPS (Zero)
                Local0 = ACPS ()
                If ((Local0 != ACPF))
                {
                    ACPF = ACPS ()
                }
            }

            If (((Arg0 == 0x03) || (Arg0 == 0x04))){}
            If ((WOLO & One))
            {
                ST9E (0x3B, 0x02, 0x02)
            }

            If ((DSYN & One))
            {
                ST9F (0x2B, 0x20, 0x20)
            }

            ^AC0.ACDC = 0xFF
        }
    }

    Scope (\)
    {
        Name (TEMF, One)
    }

    Scope (_SB.PCI0.SBRG.EC0)
    {
        Name (F8FG, Zero)
        Name (BLCT, Zero)
        Name (DSTI, One)
        Method (_Q0A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Notify (SLPB, 0x80) // Status Change
        }

        Method (_Q0B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((MSOS () >= OSW8)){}
        }

        Method (KBLD, 0, NotSerialized)
        {
            If (ATKP)
            {
                Local1 = (KBLC & 0x80)
                If (Local1)
                {
                    ^^^^ATKD.IANE (0xC5)
                }
            }
        }

        Method (KBLU, 0, NotSerialized)
        {
            If (ATKP)
            {
                Local1 = (KBLC & 0x80)
                If (Local1)
                {
                    ^^^^ATKD.IANE (0xC7)
                }
            }
        }

        Method (_Q0C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            KBLD ()
        }

        Method (_Q0D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            KBLU ()
        }

        Method (_Q0E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((MSOS () >= OSW8))
            {
                Notify (^^^GP17.VGA.LCD, 0x87) // Device-Specific
            }

            Return (Zero)
        }

        Method (_Q0F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((MSOS () >= OSW8))
            {
                Notify (^^^GP17.VGA.LCD, 0x86) // Device-Specific
            }

            Return (Zero)
        }

        Method (_Q10, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((BLCT == Zero))
            {
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x33)
                }
            }
            ElseIf ((BLCT == One))
            {
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x35)
                }
            }
        }

        Method (_Q11, 0, Serialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((MSOS () >= OSW8))
            {
                STB2 (0xE0)
                STB2 (0x5B)
                Sleep (0x05)
                STB2 (0x19)
                Sleep (0x05)
                STB2 (0x99)
                Sleep (0x05)
                STB2 (0xE0)
                STB2 (0xDB)
                Return (Zero)
            }
        }

        Method (_Q12, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (!(DSYN & One))
            {
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0x6B)
                }
            }
            ElseIf (ATKP)
            {
                ^^^^ATKD.IANE (0x6F)
            }
        }

        Method (_Q13, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((MSOS () >= OSW8))
            {
                STB2 (0xE0)
                STB2 (0x20)
                STB2 (0xE0)
                STB2 (0xA0)
                Return (Zero)
            }

            If (ATKP)
            {
                ^^^^ATKD.IANE (0x32)
            }

            Return (Zero)
        }

        Method (_Q14, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((MSOS () >= OSW8))
            {
                STB2 (0xE0)
                STB2 (0x2E)
                STB2 (0xE0)
                STB2 (0xAE)
                Return (Zero)
            }

            If (ATKP)
            {
                ^^^^ATKD.IANE (0x31)
            }

            Return (Zero)
        }

        Method (_Q15, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((MSOS () >= OSW8))
            {
                STB2 (0xE0)
                STB2 (0x30)
                STB2 (0xE0)
                STB2 (0xB0)
                Return (Zero)
            }

            If (ATKP)
            {
                ^^^^ATKD.IANE (0x30)
            }

            Return (Zero)
        }

        Method (_Q16, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x7C)
            }

            Return (Zero)
        }

        Method (_Q17, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x85)
            }

            Return (Zero)
        }

        Method (_Q78, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x85)
            }

            Return (Zero)
        }

        Method (_Q18, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x86)
            }

            Return (Zero)
        }

        Method (_Q6F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x45)
            }
        }

        Method (_Q6E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x43)
            }
        }

        Method (_Q6C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x40)
            }
        }

        Method (_Q6D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x41)
            }
        }

        Method (_Q73, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x9D)
            }
        }

        Method (_Q80, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (GLID ())
            {
                ST9E (0x1F, 0xFF, KLDT)
            }
            Else
            {
                KLDT = ST8E (0x1F, Zero)
                ST9E (0x1F, 0xFF, Zero)
            }

            Notify (LID, 0x80) // Status Change
        }

        Method (_QB0, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Notify (\_TZ.THRM, 0x80) // Thermal Status Change
        }

        Method (_QA0, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ACPS ())
            {
                ACPF = One
                Local0 = 0x58
                If (ATKP)
                {
                    ^^^^ATKD.IANE (0xCF)
                }

                MPLI (0x05, Zero)
                MPLI (One, Zero)
                MPLI (0x07, Zero)
                MPLI (0x06, Zero)
            }
            Else
            {
                ACPF = Zero
                Local0 = 0x57
            }

            Notify (AC0, 0x80) // Status Change
            If (ATKP)
            {
                ^^^^ATKD.IANE (Local0)
            }

            Sleep (0x64)
            Sleep (0x0A)
            NBAT (0x80)
        }

        Name (BLLO, Zero)
        Method (_QA1, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DCPF = DCPS (Zero)
            If (DCPF)
            {
                Sleep (0x07D0)
            }

            Notify (BAT0, 0x80) // Status Change
            Notify (BAT0, 0x81) // Information Change
        }

        Method (_QA5, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            BLLO = One
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x6E)
            }
            ElseIf (BATP (Zero))
            {
                Notify (BAT0, 0x80) // Status Change
            }
        }

        Method (_QA3, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (BATP (Zero))
            {
                Local0 = BCLE (Zero)
                If ((Local0 == Zero))
                {
                    Notify (BAT0, 0x80) // Status Change
                }
                Else
                {
                    Notify (BAT0, 0x81) // Information Change
                    Notify (AC0, 0x80) // Status Change
                }
            }
        }

        Method (_QAC, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Local0 = RP2E (0x95)
            If (((Local0 & One) == One))
            {
                Notify (BAT0, 0x80) // Status Change
            }
        }

        Method (_QEE, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
        }

        Method (_QED, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
        }

        Method (_QB3, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            ^^^^ATKD.IANE (0x6D)
        }

        Method (_QB4, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                ^^^^ATKD.IANE (0xE5)
            }
        }

        Method (_QD3, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
        }

        Method (_QD4, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
        }

        Method (_QD7, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DSTI = One
            DSSI = One
            If (((STDE == One) || (STXE == One)))
            {
                Notify (WFDE, 0xD0) // Hardware-Specific
            }

            TEMF = One
            MPLI (0x05, Zero)
            MPLI (One, Zero)
            MPLI (0x07, Zero)
            MPLI (0x06, Zero)
            MPLI (0x08, Zero)
            MPLI (0x03, 0x05)
            If ((FANF == One)){}
            ElseIf ((FANF == Zero)){}
            ElseIf ((FANF == 0x02)){}
            If ((GPUF == One))
            {
                Notify (^^^GPP0.PEGP, 0xD1) // Hardware-Specific
            }

            BRAH = 0xC9
            If ((FANF == One))
            {
                CNTD &= 0x18
                CNTD |= 0x40
            }
            ElseIf ((FANF == Zero))
            {
                CNTD &= 0x18
                CNTD |= 0x80
            }
            ElseIf ((FANF == 0x02))
            {
                CNTD &= 0x18
                CNTD |= 0x20
            }

            If ((FANF == Zero))
            {
                STCD (Zero, 0x13, One)
            }
            ElseIf ((FANF == 0x02))
            {
                STCD (Zero, 0x13, 0x04)
            }
            ElseIf ((FANF == One))
            {
                STCD (Zero, 0x13, 0x02)
            }

            If (ATKP)
            {
                ^^^^ATKD.IANE (0xFA)
            }
        }

        Method (_QD8, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            DSTI = 0x02
            DSSI = 0x02
            If (((STDE == One) || (STXE == One)))
            {
                Notify (WFDE, 0xD0) // Hardware-Specific
            }

            TEMF = One
            MPLI (0x05, Zero)
            MPLI (One, Zero)
            MPLI (0x07, Zero)
            MPLI (0x06, Zero)
            MPLI (0x08, Zero)
            MPLI (0x03, 0x05)
            If ((GPUF == One))
            {
                Notify (^^^GPP0.PEGP, 0xD1) // Hardware-Specific
            }

            BRAH = 0xC9
            If ((FANF == One))
            {
                CNTD &= 0x18
                CNTD |= 0x40
            }
            ElseIf ((FANF == Zero))
            {
                CNTD &= 0x18
                CNTD |= 0x80
            }
            ElseIf ((FANF == 0x02))
            {
                CNTD &= 0x18
                CNTD |= 0x20
            }

            STCD (Zero, 0x13, 0x08)
            If (ATKP)
            {
                ^^^^ATKD.IANE (0xFA)
            }
        }

        Method (_QDB, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x6D)
            }
        }

        Method (_QAA, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
        }

        Method (_QAB, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
        }

        Method (_QC7, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x6D)
            }
        }

        Method (_QDC, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x6D)
            }
        }

        Name (CNTB, Zero)
        Name (BOTP, Zero)
        Name (BDIN, Zero)
        Method (_QDD, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
        }

        Method (_QA8, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
        }

        Method (_QA9, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
        }

        Method (_QBA, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Acquire (CMUT, 0xFFFF)
            BRAH = 0xC9
            Local0 = (CNTD & 0x07)
            Release (CMUT)
            If (((Local0 > CNTB) && (BOTP == Zero)))
            {
                If ((Local0 == One))
                {
                    If ((RPIN (0x0E) != One))
                    {
                        If ((FANF == One))
                        {
                            Notify (^^^GPP0.PEGP, 0xD2) // Hardware-Specific
                        }
                        ElseIf ((FANF == Zero))
                        {
                            Notify (^^^GPP0.PEGP, 0xD1) // Hardware-Specific
                        }
                        ElseIf ((FANF == 0x02))
                        {
                            Notify (^^^GPP0.PEGP, 0xD1) // Hardware-Specific
                        }
                    }
                    Else
                    {
                        Notify (^^^GPP0.PEGP, 0xD2) // Hardware-Specific
                    }
                }
                ElseIf ((Local0 == 0x02))
                {
                    If ((RPIN (0x0E) != One))
                    {
                        If ((FANF == One))
                        {
                            Notify (^^^GPP0.PEGP, 0xD3) // Hardware-Specific
                        }
                        ElseIf ((FANF == Zero))
                        {
                            Notify (^^^GPP0.PEGP, 0xD1) // Hardware-Specific
                        }
                        ElseIf ((FANF == 0x02))
                        {
                            Notify (^^^GPP0.PEGP, 0xD1) // Hardware-Specific
                        }
                    }
                    Else
                    {
                        Notify (^^^GPP0.PEGP, 0xD3) // Hardware-Specific
                    }
                }
                ElseIf ((Local0 == 0x03))
                {
                    If ((RPIN (0x0E) != One))
                    {
                        If ((FANF == One))
                        {
                            Notify (^^^GPP0.PEGP, 0xD4) // Hardware-Specific
                        }
                        ElseIf ((FANF == Zero))
                        {
                            Notify (^^^GPP0.PEGP, 0xD2) // Hardware-Specific
                        }
                        ElseIf ((FANF == 0x02))
                        {
                            Notify (^^^GPP0.PEGP, 0xD2) // Hardware-Specific
                        }
                    }
                    Else
                    {
                        Notify (^^^GPP0.PEGP, 0xD4) // Hardware-Specific
                    }
                }
                ElseIf ((Local0 >= 0x04))
                {
                    If ((RPIN (0x0E) != One))
                    {
                        If ((FANF == One))
                        {
                            Notify (^^^GPP0.PEGP, 0xD5) // Hardware-Specific
                        }
                        ElseIf ((FANF == Zero))
                        {
                            Notify (^^^GPP0.PEGP, 0xD3) // Hardware-Specific
                        }
                        ElseIf ((FANF == 0x02))
                        {
                            Notify (^^^GPP0.PEGP, 0xD3) // Hardware-Specific
                        }
                    }
                    Else
                    {
                        Notify (^^^GPP0.PEGP, 0xD4) // Hardware-Specific
                    }
                }
            }
        }

        Method (_QBB, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Local1 = CNTB /* \_SB_.PCI0.SBRG.EC0_.CNTB */
            If ((BOTP == Zero))
            {
                If ((Local1 == Zero))
                {
                    If ((RPIN (0x0E) != One))
                    {
                        If ((FANF == One))
                        {
                            Notify (^^^GPP0.PEGP, 0xD1) // Hardware-Specific
                        }
                        ElseIf ((FANF == Zero))
                        {
                            Notify (^^^GPP0.PEGP, 0xD1) // Hardware-Specific
                        }
                        ElseIf ((FANF == 0x02))
                        {
                            Notify (^^^GPP0.PEGP, 0xD1) // Hardware-Specific
                        }
                    }
                    Else
                    {
                        Notify (^^^GPP0.PEGP, 0xD1) // Hardware-Specific
                    }
                }
                ElseIf ((Local1 == One))
                {
                    If ((RPIN (0x0E) != One))
                    {
                        If ((FANF == One))
                        {
                            Notify (^^^GPP0.PEGP, 0xD2) // Hardware-Specific
                        }
                        ElseIf ((FANF == Zero))
                        {
                            Notify (^^^GPP0.PEGP, 0xD1) // Hardware-Specific
                        }
                        ElseIf ((FANF == 0x02))
                        {
                            Notify (^^^GPP0.PEGP, 0xD1) // Hardware-Specific
                        }
                    }
                    Else
                    {
                        Notify (^^^GPP0.PEGP, 0xD2) // Hardware-Specific
                    }
                }
                ElseIf ((Local1 == 0x02))
                {
                    If ((RPIN (0x0E) != One))
                    {
                        If ((FANF == One))
                        {
                            Notify (^^^GPP0.PEGP, 0xD3) // Hardware-Specific
                        }
                        ElseIf ((FANF == Zero))
                        {
                            Notify (^^^GPP0.PEGP, 0xD1) // Hardware-Specific
                        }
                        ElseIf ((FANF == 0x02))
                        {
                            Notify (^^^GPP0.PEGP, 0xD1) // Hardware-Specific
                        }
                    }
                    Else
                    {
                        Notify (^^^GPP0.PEGP, 0xD3) // Hardware-Specific
                    }
                }
                ElseIf ((Local1 == 0x03))
                {
                    If ((RPIN (0x0E) != One))
                    {
                        If ((FANF == One))
                        {
                            Notify (^^^GPP0.PEGP, 0xD4) // Hardware-Specific
                        }
                        ElseIf ((FANF == Zero))
                        {
                            Notify (^^^GPP0.PEGP, 0xD2) // Hardware-Specific
                        }
                        ElseIf ((FANF == 0x02))
                        {
                            Notify (^^^GPP0.PEGP, 0xD2) // Hardware-Specific
                        }
                    }
                    Else
                    {
                        Notify (^^^GPP0.PEGP, 0xD4) // Hardware-Specific
                    }
                }
                ElseIf ((Local1 >= 0x04))
                {
                    If ((RPIN (0x0E) != One))
                    {
                        If ((FANF == One))
                        {
                            Notify (^^^GPP0.PEGP, 0xD5) // Hardware-Specific
                        }
                        ElseIf ((FANF == Zero))
                        {
                            Notify (^^^GPP0.PEGP, 0xD3) // Hardware-Specific
                        }
                        ElseIf ((FANF == 0x02))
                        {
                            Notify (^^^GPP0.PEGP, 0xD3) // Hardware-Specific
                        }
                    }
                    Else
                    {
                        Notify (^^^GPP0.PEGP, 0xD4) // Hardware-Specific
                    }
                }
            }

            Acquire (CMUT, 0xFFFF)
            BRAH = 0xC9
            CNTD &= 0xF8
            Release (CMUT)
        }

        Method (_QC0, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Local0 = ST8E (0x46, Zero)
            If (((Local0 & 0x03) == Zero))
            {
                If (((TEMF & 0x04) != 0x04))
                {
                    MPLI (0x05, Zero)
                    MPLI (0x07, Zero)
                    TEMF &= 0xF0
                    TEMF |= One
                }
            }

            If (((Local0 & 0x03) == One))
            {
                If (((TEMF & 0x04) != 0x04))
                {
                    MPLI (0x05, 0x02)
                    MPLI (0x07, 0x02)
                    TEMF &= 0xF0
                    TEMF |= 0x02
                }
            }

            If (((Local0 & 0x03) == 0x03))
            {
                MPLI (0x05, 0x03)
                MPLI (0x07, 0x03)
                TEMF &= 0xF0
                TEMF |= 0x08
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (((TEMF & 0x08) != 0x08))
                {
                    MPLI (0x05, One)
                    MPLI (0x07, One)
                    TEMF &= 0xF0
                    TEMF |= 0x04
                }
            }

            If (((Local0 & 0x08) == Zero))
            {
                If (((TEMF & 0x04) == 0x04))
                {
                    MPLI (0x05, Zero)
                    MPLI (0x07, Zero)
                    TEMF &= 0xFB
                    TEMF |= One
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (((TEMF & 0x10) == Zero))
                {
                    MPLI (0x03, 0x04)
                }

                TEMF |= 0x10
            }
            ElseIf (((Local0 & 0x04) == Zero))
            {
                If (((TEMF & 0x10) == 0x10))
                {
                    MPLI (0x03, 0x05)
                }

                TEMF &= 0xEF
            }
        }

        Method (_QEF, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                ^^^^ATKD.IANE (0xE8)
            }
        }

        Method (_QAF, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Local1 = Acquire (CMUT, 0xFFFF)
            If ((Local1 == Zero))
            {
                BRAH = 0xC9
                ^^^^UBTC.MGI0 = MGI0 /* \_SB_.PCI0.SBRG.EC0_.MGI0 */
                ^^^^UBTC.MGI1 = MGI1 /* \_SB_.PCI0.SBRG.EC0_.MGI1 */
                ^^^^UBTC.MGI2 = MGI2 /* \_SB_.PCI0.SBRG.EC0_.MGI2 */
                ^^^^UBTC.MGI3 = MGI3 /* \_SB_.PCI0.SBRG.EC0_.MGI3 */
                ^^^^UBTC.MGI4 = MGI4 /* \_SB_.PCI0.SBRG.EC0_.MGI4 */
                ^^^^UBTC.MGI5 = MGI5 /* \_SB_.PCI0.SBRG.EC0_.MGI5 */
                ^^^^UBTC.MGI6 = MGI6 /* \_SB_.PCI0.SBRG.EC0_.MGI6 */
                ^^^^UBTC.MGI7 = MGI7 /* \_SB_.PCI0.SBRG.EC0_.MGI7 */
                ^^^^UBTC.MGI8 = MGI8 /* \_SB_.PCI0.SBRG.EC0_.MGI8 */
                ^^^^UBTC.MGI9 = MGI9 /* \_SB_.PCI0.SBRG.EC0_.MGI9 */
                ^^^^UBTC.MGIA = MGIA /* \_SB_.PCI0.SBRG.EC0_.MGIA */
                ^^^^UBTC.MGIB = MGIB /* \_SB_.PCI0.SBRG.EC0_.MGIB */
                ^^^^UBTC.MGIC = MGIC /* \_SB_.PCI0.SBRG.EC0_.MGIC */
                ^^^^UBTC.MGID = MGID /* \_SB_.PCI0.SBRG.EC0_.MGID */
                ^^^^UBTC.MGIE = MGIE /* \_SB_.PCI0.SBRG.EC0_.MGIE */
                ^^^^UBTC.MGIF = MGIF /* \_SB_.PCI0.SBRG.EC0_.MGIF */
                ^^^^UBTC.CCI0 = CCI0 /* \_SB_.PCI0.SBRG.EC0_.CCI0 */
                ^^^^UBTC.CCI1 = CCI1 /* \_SB_.PCI0.SBRG.EC0_.CCI1 */
                ^^^^UBTC.CCI2 = CCI2 /* \_SB_.PCI0.SBRG.EC0_.CCI2 */
                ^^^^UBTC.CCI3 = CCI3 /* \_SB_.PCI0.SBRG.EC0_.CCI3 */
                BRAH = 0xC9
                Release (CMUT)
            }

            Notify (UBTC, 0x80) // Status Change
        }

        Method (_QD5, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                ^^^^ATKD.IANE (0x4E)
            }
        }

        Method (_Q40, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
        }

        Method (_Q41, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
        }
    }

    Scope (_SB.PCI0.SBRG.EC0)
    {
        Method (CHGS, 1, Serialized)
        {
            Local0 = BCHG (Arg0)
            Return (Local0)
        }

        Name (BSLF, Zero)
        Method (BATS, 1, Serialized)
        {
            If (Arg0)
            {
                BSLF = One
            }
            Else
            {
                BSLF = Zero
            }
        }

        Mutex (MMPX, 0x00)
        Method (BATO, 0, Serialized)
        {
            Acquire (MMPX, 0xFFFF)
        }

        Method (BATR, 0, Serialized)
        {
            Release (MMPX)
        }

        Method (BATP, 1, Serialized)
        {
            If (Arg0)
            {
                Return (DCP2) /* \_SB_.DCP2 */
            }
            Else
            {
                Return (DCPF) /* \_SB_.DCPF */
            }
        }

        Method (NBAT, 1, NotSerialized)
        {
            If (BATP (Zero))
            {
                Notify (BAT0, Arg0)
            }
        }
    }

    Scope (_SB.PCI0.SBRG.EC0)
    {
        Name (BADR, 0x0B)
        Name (CADR, 0x09)
        Name (SADR, 0x0A)
        Method (BIF0, 0, NotSerialized)
        {
            If (ECAV ())
            {
                Acquire (CMUT, 0xFFFF)
                If (BSLF)
                {
                    BRAH = 0xC9
                    Local0 = B1MD /* \_SB_.PCI0.SBRG.EC0_.B1MD */
                }
                Else
                {
                    BRAH = 0xC9
                    Local0 = B0MD /* \_SB_.PCI0.SBRG.EC0_.B0MD */
                }

                Release (CMUT)
                If ((Local0 != 0xFFFF))
                {
                    Local1 = (Local0 >> 0x0F)
                    Local1 &= One
                    Local0 = (Local1 ^ One)
                }
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BIF1, 0, NotSerialized)
        {
            If (ECAV ())
            {
                Acquire (CMUT, 0xFFFF)
                If (BSLF)
                {
                    BRAH = 0xC9
                    Local0 = B1DC /* \_SB_.PCI0.SBRG.EC0_.B1DC */
                }
                Else
                {
                    BRAH = 0xC9
                    Local0 = B0DC /* \_SB_.PCI0.SBRG.EC0_.B0DC */
                }

                Release (CMUT)
                Local0 &= 0xFFFF
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BIF2, 0, NotSerialized)
        {
            If (ECAV ())
            {
                Acquire (CMUT, 0xFFFF)
                If (BSLF)
                {
                    BRAH = 0xC9
                    Local0 = B1FC /* \_SB_.PCI0.SBRG.EC0_.B1FC */
                }
                Else
                {
                    BRAH = 0xC9
                    Local0 = B0FC /* \_SB_.PCI0.SBRG.EC0_.B0FC */
                }

                Release (CMUT)
                Local0 &= 0xFFFF
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BIF3, 0, NotSerialized)
        {
            If (ECAV ())
            {
                Acquire (CMUT, 0xFFFF)
                If (BSLF)
                {
                    BRAH = 0xC9
                    Local0 = B1MD /* \_SB_.PCI0.SBRG.EC0_.B1MD */
                }
                Else
                {
                    BRAH = 0xC9
                    Local0 = B0MD /* \_SB_.PCI0.SBRG.EC0_.B0MD */
                }

                Release (CMUT)
                If ((Local0 != 0xFFFF))
                {
                    Local0 >>= 0x09
                    Local0 &= One
                    Local0 ^= One
                }
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BIF4, 0, NotSerialized)
        {
            If (ECAV ())
            {
                Acquire (CMUT, 0xFFFF)
                If (BSLF)
                {
                    BRAH = 0xC9
                    Local0 = B1DV /* \_SB_.PCI0.SBRG.EC0_.B1DV */
                }
                Else
                {
                    BRAH = 0xC9
                    Local0 = B0DV /* \_SB_.PCI0.SBRG.EC0_.B0DV */
                }

                Release (CMUT)
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BIF9, 0, NotSerialized)
        {
            Name (BSTR, Buffer (0x20){})
            Name (DDDD, "ASUS Battery")
            BSTR = DDDD /* \_SB_.PCI0.SBRG.EC0_.BIF9.DDDD */
            Return (BSTR) /* \_SB_.PCI0.SBRG.EC0_.BIF9.BSTR */
        }

        Method (BSTS, 0, NotSerialized)
        {
            Acquire (CMUT, 0xFFFF)
            If (BSLF)
            {
                BRAH = 0xC9
                Local0 = B1ST /* \_SB_.PCI0.SBRG.EC0_.B1ST */
            }
            Else
            {
                BRAH = 0xC9
                Local0 = B0ST /* \_SB_.PCI0.SBRG.EC0_.B0ST */
            }

            Release (CMUT)
            Return (Local0)
        }

        Method (BCRT, 0, NotSerialized)
        {
            Acquire (CMUT, 0xFFFF)
            If (BSLF)
            {
                BRAH = 0xC9
                Local0 = B1CC /* \_SB_.PCI0.SBRG.EC0_.B1CC */
            }
            Else
            {
                BRAH = 0xC9
                Local0 = B0CC /* \_SB_.PCI0.SBRG.EC0_.B0CC */
            }

            Release (CMUT)
            Return (Local0)
        }

        Method (BRCP, 0, NotSerialized)
        {
            Acquire (CMUT, 0xFFFF)
            If (BSLF)
            {
                BRAH = 0xC9
                Local0 = B1RC /* \_SB_.PCI0.SBRG.EC0_.B1RC */
            }
            Else
            {
                BRAH = 0xC9
                Local0 = B0RC /* \_SB_.PCI0.SBRG.EC0_.B0RC */
            }

            Release (CMUT)
            If ((Local0 == 0xFFFF))
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (BVOT, 0, NotSerialized)
        {
            Acquire (CMUT, 0xFFFF)
            If (BSLF)
            {
                BRAH = 0xC9
                Local0 = B1VL /* \_SB_.PCI0.SBRG.EC0_.B1VL */
            }
            Else
            {
                BRAH = 0xC9
                Local0 = B0VL /* \_SB_.PCI0.SBRG.EC0_.B0VL */
            }

            Release (CMUT)
            Return (Local0)
        }
    }

    Scope (_SB.PCI0.SBRG.EC0)
    {
        Device (BAT0)
        {
            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                PCI0
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (BATP (Zero))
                {
                    Return (0x1F)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Name (LOW2, 0x012C)
            Name (PUNT, One)
            Name (LFCC, 0x1770)
            Name (NBIF, Package (0x0D)
            {
                Zero, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                One, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                "", 
                "", 
                "", 
                ""
            })
            Name (PBIF, Package (0x0D)
            {
                One, 
                0x1770, 
                0x1770, 
                One, 
                0x39D0, 
                0x0258, 
                0x012C, 
                0x3C, 
                0x3C, 
                "M3N", 
                " ", 
                "LIon", 
                "ASUSTeK"
            })
            Name (PBST, Package (0x04)
            {
                Zero, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF
            })
            Name (BIXT, Package (0x14)
            {
                Zero, 
                Zero, 
                0x1770, 
                0x1770, 
                One, 
                0x39D0, 
                0x0258, 
                0x012C, 
                Zero, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0x3C, 
                0x3C, 
                "M3N", 
                " ", 
                "LIon", 
                "ASUSTeK"
            })
            Name (NBIX, Package (0x14)
            {
                Zero, 
                Zero, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                One, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                Zero, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                "", 
                "", 
                "", 
                ""
            })
            Method (FBIF, 5, NotSerialized)
            {
                PUNT = Arg0
                Local1 = Arg1
                Local2 = Arg2
                If ((PUNT == Zero))
                {
                    Local1 *= 0x0A
                    Local2 *= 0x0A
                }

                PBIF [Zero] = Arg0
                PBIF [One] = Local1
                PBIF [0x02] = Local2
                LFCC = Local2
                PBIF [0x03] = Arg3
                PBIF [0x04] = Arg4
                Local5 = (Local1 / 0x0A)
                PBIF [0x05] = Local5
                Local6 = (Local1 / 0x64)
                PBIF [0x06] = Local6
                LOW2 = Local6
                Local7 = (Local1 / 0x64)
                PBIF [0x07] = Local7
                PBIF [0x08] = Local7
            }

            Method (CBIF, 0, NotSerialized)
            {
                If (PUNT)
                {
                    Local0 = DerefOf (PBIF [0x04])
                    PBIF [Zero] = Zero
                    PBIF [One] = (DerefOf (PBIF [One]) * Local0)
                    PBIF [0x02] = (DerefOf (PBIF [0x02]) * Local0)
                    PBIF [0x05] = (DerefOf (PBIF [0x05]) * Local0)
                    PBIF [0x06] = (DerefOf (PBIF [0x06]) * Local0)
                    PBIF [0x07] = (DerefOf (PBIF [0x07]) * Local0)
                    PBIF [0x08] = (DerefOf (PBIF [0x08]) * Local0)
                    PBIF [One] = (DerefOf (PBIF [One]) / 0x03E8)
                    PBIF [0x02] = (DerefOf (PBIF [0x02]) / 0x03E8)
                    PBIF [0x05] = (DerefOf (PBIF [0x05]) / 0x03E8)
                    PBIF [0x06] = (DerefOf (PBIF [0x06]) / 0x03E8)
                    PBIF [0x07] = (DerefOf (PBIF [0x07]) / 0x03E8)
                    PBIF [0x08] = (DerefOf (PBIF [0x08]) / 0x03E8)
                }
            }

            Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
            {
                If (!BATP (Zero))
                {
                    Return (NBIF) /* \_SB_.PCI0.SBRG.EC0_.BAT0.NBIF */
                }

                If ((GBTT (Zero) == 0xFF))
                {
                    Return (NBIF) /* \_SB_.PCI0.SBRG.EC0_.BAT0.NBIF */
                }

                BATO ()
                BATS (Zero)
                PBIF [0x09] = BIF9 ()
                Local0 = BIF0 ()
                Local1 = BIF1 ()
                Local2 = BIF2 ()
                Local3 = BIF3 ()
                Local4 = BIF4 ()
                If ((Local0 != Ones))
                {
                    If ((Local1 != Ones))
                    {
                        If ((Local2 != Ones))
                        {
                            If ((Local3 != Ones))
                            {
                                If ((Local4 != Ones))
                                {
                                    FBIF (Local0, Local1, Local2, Local3, Local4)
                                    CBIF ()
                                }
                            }
                        }
                    }
                }

                If ((PUNT == Zero))
                {
                    Local2 *= 0x0A
                }

                LFCC = Local2
                BATR ()
                Return (PBIF) /* \_SB_.PCI0.SBRG.EC0_.BAT0.PBIF */
            }

            Method (FBST, 4, NotSerialized)
            {
                Local1 = (Arg1 & 0xFFFF)
                Local0 = Zero
                If (ACAP ())
                {
                    Local0 = One
                }

                If (Local0)
                {
                    If (CHGS (Zero))
                    {
                        Local0 = 0x02
                    }
                    Else
                    {
                        Local0 = One
                    }
                }
                Else
                {
                    Local0 = One
                }

                If (BLLO)
                {
                    Local2 = 0x04
                    Local0 |= Local2
                }

                BRAH = 0xC9
                If ((EB0S & 0x08))
                {
                    Local2 = 0x04
                    Local0 |= Local2
                }

                If ((Local1 >= 0x8000))
                {
                    Local1 = (0xFFFF - Local1)
                }

                Local2 = Arg2
                If ((PUNT == Zero))
                {
                    Acquire (CMUT, 0xFFFF)
                    BRAH = 0xC9
                    Local1 *= B0DV /* \_SB_.PCI0.SBRG.EC0_.B0DV */
                    Release (CMUT)
                    Local2 *= 0x0A
                }

                Local3 = (Local0 & 0x02)
                If (!Local3)
                {
                    Local3 = (LFCC - Local2)
                    Divide (LFCC, 0xC8, Local4, Local5)
                    If ((Local3 < Local5))
                    {
                        Local2 = LFCC /* \_SB_.PCI0.SBRG.EC0_.BAT0.LFCC */
                    }
                }
                Else
                {
                    Divide (LFCC, 0xC8, Local4, Local5)
                    Local4 = (LFCC - Local5)
                    If ((Local2 > Local4))
                    {
                        Local2 = Local4
                    }
                }

                PBST [Zero] = Local0
                PBST [One] = Local1
                PBST [0x02] = Local2
                PBST [0x03] = Arg3
            }

            Method (CBST, 0, NotSerialized)
            {
                If (PUNT)
                {
                    Acquire (CMUT, 0xFFFF)
                    BRAH = 0xC9
                    PBST [0x03] = B0DV /* \_SB_.PCI0.SBRG.EC0_.B0DV */
                    Release (CMUT)
                    Local0 = DerefOf (PBST [0x03])
                    PBST [One] = (DerefOf (PBST [One]) * Local0)
                    PBST [One] = (DerefOf (PBST [One]) / 0x03E8)
                    PBST [0x02] = (DerefOf (PBST [0x02]) * Local0)
                    PBST [0x02] = (DerefOf (PBST [0x02]) / 0x03E8)
                }
            }

            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                PBST [Zero] = Zero
                PBST [One] = Ones
                PBST [0x02] = Ones
                PBST [0x03] = Ones
                If (!BATP (Zero))
                {
                    PBST [Zero] = One
                    Return (PBST) /* \_SB_.PCI0.SBRG.EC0_.BAT0.PBST */
                }

                If ((GBTT (Zero) == 0xFF))
                {
                    Return (PBST) /* \_SB_.PCI0.SBRG.EC0_.BAT0.PBST */
                }

                BATO ()
                BATS (Zero)
                Local0 = BSTS ()
                Local1 = BCRT ()
                Local2 = BRCP ()
                Local3 = BVOT ()
                If ((Local0 != Ones))
                {
                    If ((Local1 != Ones))
                    {
                        If ((Local2 != Ones))
                        {
                            If ((Local3 != Ones))
                            {
                                FBST (Local0, Local1, Local2, Local3)
                                CBST ()
                            }
                        }
                    }
                }

                BATR ()
                Return (PBST) /* \_SB_.PCI0.SBRG.EC0_.BAT0.PBST */
            }

            Method (_BIX, 0, NotSerialized)  // _BIX: Battery Information Extended
            {
                If (!BATP (Zero))
                {
                    Return (NBIX) /* \_SB_.PCI0.SBRG.EC0_.BAT0.NBIX */
                }

                If ((GBTT (Zero) == 0xFF))
                {
                    Return (NBIX) /* \_SB_.PCI0.SBRG.EC0_.BAT0.NBIX */
                }

                _BIF ()
                BIXT [One] = DerefOf (PBIF [Zero])
                BIXT [0x02] = DerefOf (PBIF [One])
                BIXT [0x03] = DerefOf (PBIF [0x02])
                BIXT [0x04] = DerefOf (PBIF [0x03])
                BIXT [0x05] = DerefOf (PBIF [0x04])
                BIXT [0x06] = DerefOf (PBIF [0x05])
                BIXT [0x07] = DerefOf (PBIF [0x06])
                BIXT [0x0E] = DerefOf (PBIF [0x07])
                BIXT [0x0F] = DerefOf (PBIF [0x08])
                BIXT [0x10] = DerefOf (PBIF [0x09])
                BIXT [0x11] = DerefOf (PBIF [0x0A])
                BIXT [0x12] = DerefOf (PBIF [0x0B])
                BIXT [0x13] = DerefOf (PBIF [0x0C])
                If ((DerefOf (BIXT [One]) == One))
                {
                    BIXT [One] = Zero
                    Local0 = DerefOf (BIXT [0x05])
                    BIXT [0x02] = (DerefOf (BIXT [0x02]) * Local0)
                    BIXT [0x03] = (DerefOf (BIXT [0x03]) * Local0)
                    BIXT [0x06] = (DerefOf (BIXT [0x06]) * Local0)
                    BIXT [0x07] = (DerefOf (BIXT [0x07]) * Local0)
                    BIXT [0x0E] = (DerefOf (BIXT [0x0E]) * Local0)
                    BIXT [0x0F] = (DerefOf (BIXT [0x0F]) * Local0)
                    Divide (DerefOf (BIXT [0x02]), 0x03E8, Local0, BIXT [0x02])
                    Divide (DerefOf (BIXT [0x03]), 0x03E8, Local0, BIXT [0x03])
                    Divide (DerefOf (BIXT [0x06]), 0x03E8, Local0, BIXT [0x06])
                    Divide (DerefOf (BIXT [0x07]), 0x03E8, Local0, BIXT [0x07])
                    Divide (DerefOf (BIXT [0x0E]), 0x03E8, Local0, BIXT [0x0E])
                    Divide (DerefOf (BIXT [0x0F]), 0x03E8, Local0, BIXT [0x0F])
                }

                Local0 = (STC4 (0x2F) << 0x08)
                Local0 += STC4 (0x2E)
                BIXT [0x08] = Local0
                BIXT [0x09] = 0x0001869F
                Return (BIXT) /* \_SB_.PCI0.SBRG.EC0_.BAT0.BIXT */
            }

            Method (_BTP, 1, NotSerialized)  // _BTP: Battery Trip Point
            {
                WP2E (0x96, Zero)
                WP2E (0x97, Zero)
                WP2E (0x95, Zero)
                If ((Arg0 != Zero))
                {
                    Local0 = DerefOf (PBIF [0x04])
                    Local1 = (Arg0 * 0x03E8)
                    Divide (Local1, Local0, Local2, Local3)
                    If (CHGS (Zero))
                    {
                        If ((Local2 != Zero))
                        {
                            Local3 += One
                        }
                    }

                    WP2E (0x96, (Local3 & 0xFF))
                    Local2 = (Local3 >> 0x08)
                    Local2 &= 0xFF
                    WP2E (0x97, Local2)
                    WP2E (0x95, Zero)
                }
            }
        }
    }

    Scope (\)
    {
        Name (TSP, 0x0A)
        Name (TC1, 0x02)
        Name (TC2, 0x0A)
    }

    Scope (_TZ)
    {
        Name (ETMD, One)
        Method (KELV, 1, NotSerialized)
        {
            Local0 = (Arg0 & 0xFF)
            If ((Local0 >= 0x80))
            {
                Local0 = (0x0100 - Local0)
                Local0 *= 0x0A
                Local0 = (0x0AAC - Local0)
                Return (Local0)
            }

            Local0 *= 0x0A
            Local0 += 0x0AAC
            Return (Local0)
        }

        Method (CELC, 1, NotSerialized)
        {
            Local0 = (Arg0 - 0x0AAC)
            Local0 /= 0x0A
            Return (Local0)
        }

        Name (PLCY, Zero)
        ThermalZone (THRM)
        {
            Method (_CRT, 0, NotSerialized)  // _CRT: Critical Temperature
            {
                RCRT ()
                Return (KELV (\_SB.TCRT))
            }

            Method (_TMP, 0, NotSerialized)  // _TMP: Temperature
            {
                Local1 = 0x05
                While (Local1)
                {
                    Local0 = RTMP ()
                    If ((Local0 > \_SB.TCRT))
                    {
                        Local1--
                    }
                    Else
                    {
                        Local1 = Zero
                    }
                }

                Return (KELV (Local0))
            }

            Name (_PSL, Package (0x10)  // _PSL: Passive List
            {
                \_SB.PLTF.P000, 
                \_SB.PLTF.P001, 
                \_SB.PLTF.P002, 
                \_SB.PLTF.P003, 
                \_SB.PLTF.P004, 
                \_SB.PLTF.P005, 
                \_SB.PLTF.P006, 
                \_SB.PLTF.P007, 
                \_SB.PLTF.P008, 
                \_SB.PLTF.P009, 
                \_SB.PLTF.P00A, 
                \_SB.PLTF.P00B, 
                \_SB.PLTF.P00C, 
                \_SB.PLTF.P00D, 
                \_SB.PLTF.P00E, 
                \_SB.PLTF.P00F
            })
            Method (_TSP, 0, NotSerialized)  // _TSP: Thermal Sampling Period
            {
                Local0 = (TSP * 0x0A)
                Return (Local0)
            }

            Method (_TC1, 0, NotSerialized)  // _TC1: Thermal Constant 1
            {
                Return (TC1) /* \TC1_ */
            }

            Method (_TC2, 0, NotSerialized)  // _TC2: Thermal Constant 2
            {
                Return (TC2) /* \TC2_ */
            }

            Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
            {
                RPSV ()
                If (PLCY)
                {
                    Return (KELV (\_SB.PPSV))
                }
                Else
                {
                    Return (KELV (\_SB.TPSV))
                }
            }

            Method (_SCP, 1, NotSerialized)  // _SCP: Set Cooling Policy
            {
                PLCY = Zero
                Notify (THRM, 0x81) // Thermal Trip Point Change
            }
        }
    }

    Scope (_TZ)
    {
        Name (ATMP, 0x3C)
        Name (LTMP, 0x3C)
        Name (FANS, Zero)
        Method (RTMP, 0, NotSerialized)
        {
            If (\_SB.PCI0.SBRG.EC0.ECAV ())
            {
                Acquire (\_SB.PCI0.SBRG.EC0.CMUT, 0xFFFF)
                \_SB.PCI0.SBRG.EC0.BRAH = 0xC9
                Local0 = \_SB.PCI0.SBRG.EC0.ECPU
                Release (\_SB.PCI0.SBRG.EC0.CMUT)
                If ((Local0 < 0x80))
                {
                    LTMP = Local0
                }
            }

            Return (LTMP) /* \_TZ_.LTMP */
        }

        Method (RCRT, 0, NotSerialized)
        {
            If (\_SB.PCI0.SBRG.EC0.ECAV ())
            {
                Acquire (\_SB.PCI0.SBRG.EC0.CMUT, 0xFFFF)
                \_SB.PCI0.SBRG.EC0.BRAH = 0xC9
                Local0 = \_SB.PCI0.SBRG.EC0.ECRT
                Release (\_SB.PCI0.SBRG.EC0.CMUT)
                If ((Local0 < 0x80))
                {
                    \_SB.TCRT = Local0
                }
            }
        }

        Method (RPSV, 0, NotSerialized)
        {
            If (\_SB.PCI0.SBRG.EC0.ECAV ())
            {
                Acquire (\_SB.PCI0.SBRG.EC0.CMUT, 0xFFFF)
                \_SB.PCI0.SBRG.EC0.BRAH = 0xC9
                Local0 = \_SB.PCI0.SBRG.EC0.EPSV
                Release (\_SB.PCI0.SBRG.EC0.CMUT)
                If ((Local0 < 0x80))
                {
                    \_SB.TPSV = Local0
                }
            }
        }

        Method (RFAN, 1, NotSerialized)
        {
            If (\_SB.PCI0.SBRG.EC0.ECAV ())
            {
                Local0 = \_SB.PCI0.SBRG.EC0.ST83 (Arg0)
                If ((Local0 == 0xFF))
                {
                    Return (Local0)
                }

                Local0 = \_SB.PCI0.SBRG.EC0.TACH (Arg0)
                Local0 /= 0x64
                Local0 += One
                If ((Local0 <= 0x3C))
                {
                    FANS = Local0
                }
                Else
                {
                    Local0 = FANS /* \_TZ_.FANS */
                }
            }
            Else
            {
                Local0 = Zero
            }

            Return (Local0)
        }

        Method (RFSE, 0, NotSerialized)
        {
            If (\_SB.PCI0.SBRG.EC0.ECAV ())
            {
                Local1 = \_SB.PCI0.SBRG.EC0.ST83 (Zero)
                If ((Local1 < 0x80))
                {
                    If ((Local1 < 0x0A))
                    {
                        Local0 = Zero
                    }
                    Else
                    {
                        Local0 = One
                    }
                }
                ElseIf ((Local1 < 0xF5))
                {
                    Local0 = 0x02
                }
                Else
                {
                    Local0 = 0x03
                }
            }
            Else
            {
                Local0 = Zero
            }

            Return (Local0)
        }
    }

    Scope (_SB.PCI0.GP17.XHC0)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Name (UPC1, Package (0x04)
                    {
                        0xFF, 
                        0x09, 
                        Zero, 
                        Zero
                    })
                    Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT1._UPC.UPC1 */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Name (PLD1, Package (0x01)
                    {
                        Buffer (0x14)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x61, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // a.......
                            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                        }
                    })
                    CreateField (DerefOf (PLD1 [Zero]), 0x40, One, VIS1)
                    VIS1 = One
                    CreateField (DerefOf (PLD1 [Zero]), 0x57, 0x08, GPO1)
                    GPO1 = One
                    Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT1._PLD.PLD1 */
                }
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Name (UPC1, Package (0x04)
                    {
                        0xFF, 
                        0x03, 
                        Zero, 
                        Zero
                    })
                    Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT2._UPC.UPC1 */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Name (PLD1, Package (0x01)
                    {
                        Buffer (0x14)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x61, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // a.......
                            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                        }
                    })
                    CreateField (DerefOf (PLD1 [Zero]), 0x40, One, VIS1)
                    VIS1 = One
                    CreateField (DerefOf (PLD1 [Zero]), 0x57, 0x08, GPO1)
                    GPO1 = 0x02
                    Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT2._PLD.PLD1 */
                }
            }

            Device (PRT3)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Name (UPC1, Package (0x04)
                    {
                        0xFF, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT3._UPC.UPC1 */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Name (PLD1, Package (0x01)
                    {
                        Buffer (0x14)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x61, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // a.......
                            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                        }
                    })
                    CreateField (DerefOf (PLD1 [Zero]), 0x40, One, VIS1)
                    VIS1 = One
                    CreateField (DerefOf (PLD1 [Zero]), 0x57, 0x08, GPO1)
                    GPO1 = 0x03
                    Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT3._PLD.PLD1 */
                }
            }

            Device (PRT4)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Name (UPC1, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT4._UPC.UPC1 */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Name (PLD1, Package (0x01)
                    {
                        Buffer (0x14)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x61, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // a.......
                            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                        }
                    })
                    CreateField (DerefOf (PLD1 [Zero]), 0x40, One, VIS1)
                    VIS1 = Zero
                    CreateField (DerefOf (PLD1 [Zero]), 0x57, 0x08, GPO1)
                    GPO1 = 0x04
                    Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT4._PLD.PLD1 */
                }
            }

            Device (PRT5)
            {
                Name (_ADR, 0x05)  // _ADR: Address
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Name (UPC1, Package (0x04)
                    {
                        0xFF, 
                        0x09, 
                        Zero, 
                        Zero
                    })
                    Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT5._UPC.UPC1 */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Name (PLD1, Package (0x01)
                    {
                        Buffer (0x14)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x61, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // a.......
                            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                        }
                    })
                    CreateField (DerefOf (PLD1 [Zero]), 0x40, One, VIS1)
                    VIS1 = One
                    CreateField (DerefOf (PLD1 [Zero]), 0x57, 0x08, GPO1)
                    GPO1 = One
                    Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT5._PLD.PLD1 */
                }
            }

            Device (PRT6)
            {
                Name (_ADR, 0x06)  // _ADR: Address
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Name (UPC1, Package (0x04)
                    {
                        0xFF, 
                        0x03, 
                        Zero, 
                        Zero
                    })
                    Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT6._UPC.UPC1 */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Name (PLD1, Package (0x01)
                    {
                        Buffer (0x14)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x61, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // a.......
                            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                        }
                    })
                    CreateField (DerefOf (PLD1 [Zero]), 0x40, One, VIS1)
                    VIS1 = One
                    CreateField (DerefOf (PLD1 [Zero]), 0x57, 0x08, GPO1)
                    GPO1 = 0x02
                    Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT6._PLD.PLD1 */
                }
            }
        }
    }

    Scope (_SB.PCI0.GP17.XHC1)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Name (UPC1, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT1._UPC.UPC1 */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Name (PLD1, Package (0x01)
                    {
                        Buffer (0x14)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x61, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // a.......
                            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                        }
                    })
                    CreateField (DerefOf (PLD1 [Zero]), 0x40, One, VIS1)
                    VIS1 = Zero
                    CreateField (DerefOf (PLD1 [Zero]), 0x57, 0x08, GPO1)
                    GPO1 = 0x05
                    Return (PLD1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT1._PLD.PLD1 */
                }
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Name (UPC1, Package (0x04)
                    {
                        0xFF, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT2._UPC.UPC1 */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Name (PLD1, Package (0x01)
                    {
                        Buffer (0x14)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x61, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // a.......
                            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                        }
                    })
                    CreateField (DerefOf (PLD1 [Zero]), 0x40, One, VIS1)
                    VIS1 = Zero
                    CreateField (DerefOf (PLD1 [Zero]), 0x57, 0x08, GPO1)
                    GPO1 = 0x06
                    Return (PLD1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT2._PLD.PLD1 */
                }
            }

            Device (PRT3)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Name (UPC1, Package (0x04)
                    {
                        0xFF, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT3._UPC.UPC1 */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Name (PLD1, Package (0x01)
                    {
                        Buffer (0x14)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x61, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // a.......
                            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                        }
                    })
                    CreateField (DerefOf (PLD1 [Zero]), 0x40, One, VIS1)
                    VIS1 = Zero
                    CreateField (DerefOf (PLD1 [Zero]), 0x57, 0x08, GPO1)
                    GPO1 = 0x07
                    Return (PLD1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT3._PLD.PLD1 */
                }
            }

            Device (PRT4)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Name (UPC1, Package (0x04)
                    {
                        0xFF, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT4._UPC.UPC1 */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Name (PLD1, Package (0x01)
                    {
                        Buffer (0x14)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x61, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // a.......
                            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                        }
                    })
                    CreateField (DerefOf (PLD1 [Zero]), 0x40, One, VIS1)
                    VIS1 = Zero
                    CreateField (DerefOf (PLD1 [Zero]), 0x57, 0x08, GPO1)
                    GPO1 = 0x08
                    Return (PLD1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT4._PLD.PLD1 */
                }
            }

            Device (PRT5)
            {
                Name (_ADR, 0x05)  // _ADR: Address
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Name (UPC1, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT5._UPC.UPC1 */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Name (PLD1, Package (0x01)
                    {
                        Buffer (0x14)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x61, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // a.......
                            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                        }
                    })
                    CreateField (DerefOf (PLD1 [Zero]), 0x40, One, VIS1)
                    VIS1 = Zero
                    CreateField (DerefOf (PLD1 [Zero]), 0x57, 0x08, GPO1)
                    GPO1 = 0x09
                    Return (PLD1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT5._PLD.PLD1 */
                }
            }

            Device (PRT6)
            {
                Name (_ADR, 0x06)  // _ADR: Address
                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Name (UPC1, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT6._UPC.UPC1 */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Name (PLD1, Package (0x01)
                    {
                        Buffer (0x14)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x61, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // a.......
                            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                        }
                    })
                    CreateField (DerefOf (PLD1 [Zero]), 0x40, One, VIS1)
                    VIS1 = Zero
                    CreateField (DerefOf (PLD1 [Zero]), 0x57, 0x08, GPO1)
                    GPO1 = 0x0A
                    Return (PLD1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT6._PLD.PLD1 */
                }
            }
        }
    }

    Scope (_SB.PCI0.GP17.XHC1.RHUB.PRT2)
    {
        Name (CAPD, Package (0x01)
        {
            Buffer (0x14)
            {
                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x14, 0x00, 0x14, 0x00,  // ........
                /* 0008 */  0x25, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // %.......
                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
            }
        })
        Device (DCAM)
        {
            Name (_ADR, 0x02)  // _ADR: Address
            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                Return (CAPD) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT2.CAPD */
            }
        }

        Device (DCAN)
        {
            Name (_ADR, 0x04)  // _ADR: Address
            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                Return (CAPD) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT2.CAPD */
            }
        }
    }

    OperationRegion (ASSM, SystemIO, 0xB2, 0x02)
    Field (ASSM, ByteAcc, Lock, Preserve)
    {
        XXB2,   8, 
        XXB3,   8
    }

    Method (ASFS, 1, NotSerialized)
    {
        If ((Arg0 == 0x03))
        {
            XXB2 = 0xE1
        }
    }

    Scope (_SB.PCI0.SBRG)
    {
        Device (PS2K)
        {
            Name (_HID, EisaId ("ATK3001"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((IOST & 0x0400))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0060,             // Range Minimum
                    0x0060,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0064,             // Range Minimum
                    0x0064,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IRQNoFlags ()
                    {1}
            })
            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                StartDependentFn (0x00, 0x00)
                {
                    IO (Decode16,
                        0x0060,             // Range Minimum
                        0x0060,             // Range Maximum
                        0x00,               // Alignment
                        0x01,               // Length
                        )
                    IO (Decode16,
                        0x0064,             // Range Minimum
                        0x0064,             // Range Maximum
                        0x00,               // Alignment
                        0x01,               // Length
                        )
                    IRQNoFlags ()
                        {1}
                }
                EndDependentFn ()
            })
        }
    }

    Scope (_SB.I2CD)
    {
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        Return (Buffer (0x04)
                        {
                             0xDB, 0x00, 0x73, 0x00                           // ..s.
                        })
                    }

                }
            }
            Else
            {
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (ETPD)
        {
            Name (_ADR, One)  // _ADR: Address
            Name (ETPH, Package (0x28)
            {
                "ELAN1200", 
                "ELAN1201", 
                "ELAN1203", 
                "ELAN1200", 
                "ELAN1201", 
                "ELAN1300", 
                "ELAN1301", 
                "ELAN1300", 
                "ELAN1301", 
                "ELAN1000", 
                "ELAN1200", 
                "ELAN1200", 
                "ELAN1200", 
                "ELAN1200", 
                "ELAN1200", 
                "ELAN1203", 
                "ELAN1203", 
                "ELAN1201", 
                "ELAN1300", 
                "ELAN1300", 
                "ELAN1200", 
                "ELAN1300", 
                "ELAN1201", 
                "ELAN1200", 
                "ELAN1201", 
                "ELAN1200", 
                "ELAN1401", 
                "ELAN1200", 
                "ELAN1401", 
                "ELAN1206", 
                "ELAN1301", 
                "ASUE1201", 
                "ELAN1300", 
                "ASUE1301", 
                "ASUE1407", 
                "ASUE140A", 
                "ASUE140C", 
                "ELAN1200", 
                "ELAN1300", 
                "ASUE1900"
            })
            Name (FTPH, Package (0x0C)
            {
                "FTE1001", 
                "FTE1200", 
                "FTE1200", 
                "FTE1300", 
                "FTE1300", 
                "FTE1201", 
                "FTE1200", 
                "FTE1200", 
                "FTE1201", 
                "FTE1201", 
                "FTE1200", 
                "FTE1200"
            })
            Name (GTPH, Package (0x05)
            {
                "GDX1505", 
                "GDX1300", 
                "GDX1200", 
                "GDX1301", 
                "GDX1515"
            })
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                If ((TPDI & 0x04))
                {
                    Return (DerefOf (ETPH [TPHI]))
                }

                If ((TPDI & 0x10))
                {
                    Return (DerefOf (FTPH [TPHI]))
                }

                If ((TPDI & 0x40))
                {
                    Return (DerefOf (GTPH [TPHI]))
                }

                Return ("ELAN1010")
            }

            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == One))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Return (One)
                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPIF != One) || (DSYN & One)))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (SBFI, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0010
                        }
                })
                Return (SBFI) /* \_SB_.I2CD.ETPD._CRS.SBFI */
            }
        }
    }

    Scope (_SB.I2CA)
    {
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        Return (Buffer (0x04)
                        {
                             0xDB, 0x00, 0x73, 0x00                           // ..s.
                        })
                    }

                }
            }
            Else
            {
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.I2CA)
    {
        Device (TPL0)
        {
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Name (SADR, Buffer (One)
            {
                 0x10                                             // .
            })
            Name (HIDS, Package (0x03)
            {
                "FTSC1000", 
                "04F35501", 
                "ATML1000"
            })
            Name (HIDA, Buffer (One)
            {
                 0x01                                             // .
            })
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return ("ELAN9008")
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == One))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Return (One)
                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBFI, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0010, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, Exclusive, PullNone, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0082
                        }
                })
                Return (SBFI) /* \_SB_.I2CA.TPL0._CRS.SBFI */
            }
        }
    }

    Scope (_SB.PCI0.GPP4.WLAN)
    {
        Method (RWRD, 0, Serialized)
        {
            Name (RWRY, Package (0x2C)
            {
                0x52, 
                0x54, 
                Zero, 
                0x04, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF, 
                0xFF
            })
            If ((STRE == One))
            {
                RWRY [0x02] = One
                RWRY [0x04] = STR0 /* \_SB_.STR0 */
                RWRY [0x05] = STR1 /* \_SB_.STR1 */
                RWRY [0x06] = STR2 /* \_SB_.STR2 */
                RWRY [0x07] = STR3 /* \_SB_.STR3 */
                RWRY [0x08] = STR4 /* \_SB_.STR4 */
                RWRY [0x09] = STR5 /* \_SB_.STR5 */
                RWRY [0x0A] = STR6 /* \_SB_.STR6 */
                RWRY [0x0B] = STR7 /* \_SB_.STR7 */
                RWRY [0x0C] = STR8 /* \_SB_.STR8 */
                RWRY [0x0D] = STR9 /* \_SB_.STR9 */
                RWRY [0x0E] = STK0 /* \_SB_.STK0 */
                RWRY [0x0F] = STK1 /* \_SB_.STK1 */
                RWRY [0x10] = STK2 /* \_SB_.STK2 */
                RWRY [0x11] = STK3 /* \_SB_.STK3 */
                RWRY [0x12] = STK4 /* \_SB_.STK4 */
                RWRY [0x13] = STK5 /* \_SB_.STK5 */
                RWRY [0x14] = STK6 /* \_SB_.STK6 */
                RWRY [0x15] = STK7 /* \_SB_.STK7 */
                RWRY [0x16] = STK8 /* \_SB_.STK8 */
                RWRY [0x17] = STK9 /* \_SB_.STK9 */
                RWRY [0x18] = STL0 /* \_SB_.STL0 */
                RWRY [0x19] = STL1 /* \_SB_.STL1 */
                RWRY [0x1A] = STL2 /* \_SB_.STL2 */
                RWRY [0x1B] = STL3 /* \_SB_.STL3 */
                RWRY [0x1C] = STL4 /* \_SB_.STL4 */
                RWRY [0x1D] = STL5 /* \_SB_.STL5 */
                RWRY [0x1E] = STL6 /* \_SB_.STL6 */
                RWRY [0x1F] = STL7 /* \_SB_.STL7 */
                RWRY [0x20] = STL8 /* \_SB_.STL8 */
                RWRY [0x21] = STL9 /* \_SB_.STL9 */
                RWRY [0x22] = STM0 /* \_SB_.STM0 */
                RWRY [0x23] = STM1 /* \_SB_.STM1 */
                RWRY [0x24] = STM2 /* \_SB_.STM2 */
                RWRY [0x25] = STM3 /* \_SB_.STM3 */
                RWRY [0x26] = STM4 /* \_SB_.STM4 */
                RWRY [0x27] = STM5 /* \_SB_.STM5 */
                RWRY [0x28] = STM6 /* \_SB_.STM6 */
                RWRY [0x29] = STM7 /* \_SB_.STM7 */
                RWRY [0x2A] = STM8 /* \_SB_.STM8 */
                RWRY [0x2B] = STM9 /* \_SB_.STM9 */
            }

            Return (RWRY) /* \_SB_.PCI0.GPP4.WLAN.RWRD.RWRY */
        }

        Method (RWSI, 0, Serialized)
        {
            Local0 = Package (0x01)
                {
                    One
                }
            If ((^^^SBRG.EC0.DSTI == 0x02))
            {
                Local0 = Package (0x01)
                    {
                        0x02
                    }
            }

            Return (Local0)
        }

        Method (RWGS, 0, Serialized)
        {
            Name (RWGY, Package (0x18)
            {
                0xFF, 
                Zero, 
                0xFF, 
                Zero, 
                0xFF, 
                Zero, 
                0xFF, 
                Zero, 
                0xFF, 
                Zero, 
                0xFF, 
                Zero, 
                0xFF, 
                Zero, 
                0xFF, 
                Zero, 
                0xFF, 
                Zero, 
                0xFF, 
                Zero, 
                0xFF, 
                Zero, 
                0xFF, 
                Zero
            })
            If ((STRF == One))
            {
                RWGY [Zero] = STG0 /* \_SB_.STG0 */
                RWGY [One] = SGD0 /* \_SB_.SGD0 */
                RWGY [0x02] = STG1 /* \_SB_.STG1 */
                RWGY [0x03] = SGD1 /* \_SB_.SGD1 */
                RWGY [0x04] = STG2 /* \_SB_.STG2 */
                RWGY [0x05] = SGD2 /* \_SB_.SGD2 */
                RWGY [0x06] = STG3 /* \_SB_.STG3 */
                RWGY [0x07] = SGD3 /* \_SB_.SGD3 */
                RWGY [0x08] = STG4 /* \_SB_.STG4 */
                RWGY [0x09] = SGD4 /* \_SB_.SGD4 */
                RWGY [0x0A] = STG5 /* \_SB_.STG5 */
                RWGY [0x0B] = SGD5 /* \_SB_.SGD5 */
                RWGY [0x0C] = STG6 /* \_SB_.STG6 */
                RWGY [0x0D] = SGD6 /* \_SB_.SGD6 */
                RWGY [0x0E] = STG7 /* \_SB_.STG7 */
                RWGY [0x0F] = SGD7 /* \_SB_.SGD7 */
                RWGY [0x10] = STG8 /* \_SB_.STG8 */
                RWGY [0x11] = SGD8 /* \_SB_.SGD8 */
                RWGY [0x12] = STG9 /* \_SB_.STG9 */
                RWGY [0x13] = SGD9 /* \_SB_.SGD9 */
                RWGY [0x14] = STGA /* \_SB_.STGA */
                RWGY [0x15] = SGDA /* \_SB_.SGDA */
                RWGY [0x16] = STGB /* \_SB_.STGB */
                RWGY [0x17] = SGDB /* \_SB_.SGDB */
            }

            Return (RWGY) /* \_SB_.PCI0.GPP4.WLAN.RWGS.RWGY */
        }
    }

    Scope (_SB.PCI0.GPP4.WLAN)
    {
        Name (WRDY, Package (0x03)
        {
            Zero, 
            Package (0x0C)
            {
                0x07, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80
            }, 

            Package (0x06)
            {
                0x10, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80
            }
        })
        Method (WRDS, 0, Serialized)
        {
            DerefOf (WRDY [One]) [One] = STXE /* \_SB_.STXE */
            DerefOf (WRDY [One]) [0x02] = ST10 /* \_SB_.ST10 */
            DerefOf (WRDY [One]) [0x03] = ST11 /* \_SB_.ST11 */
            DerefOf (WRDY [One]) [0x04] = ST12 /* \_SB_.ST12 */
            DerefOf (WRDY [One]) [0x05] = ST13 /* \_SB_.ST13 */
            DerefOf (WRDY [One]) [0x06] = ST14 /* \_SB_.ST14 */
            DerefOf (WRDY [One]) [0x07] = ST15 /* \_SB_.ST15 */
            DerefOf (WRDY [One]) [0x08] = ST16 /* \_SB_.ST16 */
            DerefOf (WRDY [One]) [0x09] = ST17 /* \_SB_.ST17 */
            DerefOf (WRDY [One]) [0x0A] = ST18 /* \_SB_.ST18 */
            DerefOf (WRDY [One]) [0x0B] = ST19 /* \_SB_.ST19 */
            Return (WRDY) /* \_SB_.PCI0.GPP4.WLAN.WRDY */
        }

        Name (EWRY, Package (0x02)
        {
            Zero, 
            Package (0x21)
            {
                0x07, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80
            }
        })
        Method (EWRD, 0, Serialized)
        {
            DerefOf (EWRY [One]) [One] = STDE /* \_SB_.STDE */
            DerefOf (EWRY [One]) [0x02] = STRS /* \_SB_.STRS */
            DerefOf (EWRY [One]) [0x03] = ST20 /* \_SB_.ST20 */
            DerefOf (EWRY [One]) [0x04] = ST21 /* \_SB_.ST21 */
            DerefOf (EWRY [One]) [0x05] = ST22 /* \_SB_.ST22 */
            DerefOf (EWRY [One]) [0x06] = ST23 /* \_SB_.ST23 */
            DerefOf (EWRY [One]) [0x07] = ST24 /* \_SB_.ST24 */
            DerefOf (EWRY [One]) [0x08] = ST25 /* \_SB_.ST25 */
            DerefOf (EWRY [One]) [0x09] = ST26 /* \_SB_.ST26 */
            DerefOf (EWRY [One]) [0x0A] = ST27 /* \_SB_.ST27 */
            DerefOf (EWRY [One]) [0x0B] = ST28 /* \_SB_.ST28 */
            DerefOf (EWRY [One]) [0x0C] = ST29 /* \_SB_.ST29 */
            DerefOf (EWRY [One]) [0x0D] = ST30 /* \_SB_.ST30 */
            DerefOf (EWRY [One]) [0x0E] = ST31 /* \_SB_.ST31 */
            DerefOf (EWRY [One]) [0x0F] = ST32 /* \_SB_.ST32 */
            DerefOf (EWRY [One]) [0x10] = ST33 /* \_SB_.ST33 */
            DerefOf (EWRY [One]) [0x11] = ST34 /* \_SB_.ST34 */
            DerefOf (EWRY [One]) [0x12] = ST35 /* \_SB_.ST35 */
            DerefOf (EWRY [One]) [0x13] = ST36 /* \_SB_.ST36 */
            DerefOf (EWRY [One]) [0x14] = ST37 /* \_SB_.ST37 */
            DerefOf (EWRY [One]) [0x15] = ST38 /* \_SB_.ST38 */
            DerefOf (EWRY [One]) [0x16] = ST39 /* \_SB_.ST39 */
            DerefOf (EWRY [One]) [0x17] = ST40 /* \_SB_.ST40 */
            DerefOf (EWRY [One]) [0x18] = ST41 /* \_SB_.ST41 */
            DerefOf (EWRY [One]) [0x19] = ST42 /* \_SB_.ST42 */
            DerefOf (EWRY [One]) [0x1A] = ST43 /* \_SB_.ST43 */
            DerefOf (EWRY [One]) [0x1B] = ST44 /* \_SB_.ST44 */
            DerefOf (EWRY [One]) [0x1C] = ST45 /* \_SB_.ST45 */
            DerefOf (EWRY [One]) [0x1D] = ST46 /* \_SB_.ST46 */
            DerefOf (EWRY [One]) [0x1E] = ST47 /* \_SB_.ST47 */
            DerefOf (EWRY [One]) [0x1F] = ST48 /* \_SB_.ST48 */
            DerefOf (EWRY [One]) [0x20] = ST49 /* \_SB_.ST49 */
            Return (EWRY) /* \_SB_.PCI0.GPP4.WLAN.EWRY */
        }

        Name (WGDY, Package (0x02)
        {
            Zero, 
            Package (0x13)
            {
                0x07, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80
            }
        })
        Method (WGDS, 0, Serialized)
        {
            DerefOf (WGDY [One]) [One] = SD11 /* \_SB_.SD11 */
            DerefOf (WGDY [One]) [0x02] = SD12 /* \_SB_.SD12 */
            DerefOf (WGDY [One]) [0x03] = SD13 /* \_SB_.SD13 */
            DerefOf (WGDY [One]) [0x04] = SD14 /* \_SB_.SD14 */
            DerefOf (WGDY [One]) [0x05] = SD15 /* \_SB_.SD15 */
            DerefOf (WGDY [One]) [0x06] = SD16 /* \_SB_.SD16 */
            DerefOf (WGDY [One]) [0x07] = SD21 /* \_SB_.SD21 */
            DerefOf (WGDY [One]) [0x08] = SD22 /* \_SB_.SD22 */
            DerefOf (WGDY [One]) [0x09] = SD23 /* \_SB_.SD23 */
            DerefOf (WGDY [One]) [0x0A] = SD24 /* \_SB_.SD24 */
            DerefOf (WGDY [One]) [0x0B] = SD25 /* \_SB_.SD25 */
            DerefOf (WGDY [One]) [0x0C] = SD26 /* \_SB_.SD26 */
            DerefOf (WGDY [One]) [0x0D] = SD31 /* \_SB_.SD31 */
            DerefOf (WGDY [One]) [0x0E] = SD32 /* \_SB_.SD32 */
            DerefOf (WGDY [One]) [0x0F] = SD33 /* \_SB_.SD33 */
            DerefOf (WGDY [One]) [0x10] = SD34 /* \_SB_.SD34 */
            DerefOf (WGDY [One]) [0x11] = SD35 /* \_SB_.SD35 */
            DerefOf (WGDY [One]) [0x12] = SD36 /* \_SB_.SD36 */
            Return (WGDY) /* \_SB_.PCI0.GPP4.WLAN.WGDY */
        }
    }

    Scope (_SB.PCI0.GP17.XHC1.RHUB.PRT4)
    {
        Name (BRDY, Package (0x02)
        {
            Zero, 
            Package (0x08)
            {
                0x12, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80
            }
        })
        Method (BRDS, 0, Serialized)
        {
            DerefOf (BRDY [One]) [One] = BTSE /* \_SB_.BTSE */
            DerefOf (BRDY [One]) [0x02] = BTBR /* \_SB_.BTBR */
            DerefOf (BRDY [One]) [0x03] = BED2 /* \_SB_.BED2 */
            DerefOf (BRDY [One]) [0x04] = BED3 /* \_SB_.BED3 */
            DerefOf (BRDY [One]) [0x05] = BTLE /* \_SB_.BTLE */
            DerefOf (BRDY [One]) [0x06] = BTL2 /* \_SB_.BTL2 */
            DerefOf (BRDY [One]) [0x07] = BTLL /* \_SB_.BTLL */
            Return (BRDY) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT4.BRDY */
        }

        Name (ECKY, Package (0x02)
        {
            Zero, 
            Package (0x02)
            {
                0x12, 
                Zero
            }
        })
        Method (ECKV, 0, Serialized)
        {
            Return (ECKY) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT4.ECKY */
        }
    }

    Scope (_SB)
    {
        Name (PDAZ, Zero)
        Name (DSSI, One)
        Name (DSSS, Zero)
        Method (DSSV, 0, Serialized)
        {
            PDAZ = SDAB /* \_SB_.SDAB */
            PDAZ <<= 0x10
            PDAZ |= SDAA /* \_SB_.PDAZ */
        }

        Device (WFDE)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "SampleDev")  // _UID: Unique ID
            Name (_WDG, Buffer (0x3C)
            {
                /* 0000 */  0xEF, 0x9D, 0xC4, 0x2B, 0x15, 0x7B, 0x05, 0x4F,  // ...+.{.O
                /* 0008 */  0x8B, 0xB7, 0xEE, 0x37, 0xB9, 0x54, 0x7C, 0x0B,  // ...7.T|.
                /* 0010 */  0x44, 0x45, 0x01, 0x02, 0x3E, 0xA3, 0xFE, 0xA6,  // DE..>...
                /* 0018 */  0xBF, 0xDA, 0xF5, 0x46, 0xBF, 0xC8, 0x46, 0x0D,  // ...F..F.
                /* 0020 */  0x96, 0x1B, 0xEC, 0x9F, 0xD0, 0x00, 0x01, 0x08,  // ........
                /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0038 */  0x43, 0x43, 0x01, 0x00                           // CC..
            })
            Method (WMDE, 3, NotSerialized)
            {
                If ((Arg1 == One))
                {
                    Return (One)
                }

                If ((Arg1 == 0x02))
                {
                    DSSS = Zero
                    If ((STXE == One))
                    {
                        DSSS = 0x00010001
                    }

                    If ((DSSI == One))
                    {
                        PDAZ = DSSS /* \_SB_.DSSS */
                    }
                    ElseIf ((STDE == One))
                    {
                        DSSV ()
                    }
                    Else
                    {
                        PDAZ = DSSS /* \_SB_.DSSS */
                    }

                    Return (One)
                }

                If ((Arg1 == 0x03))
                {
                    Return (PDAZ) /* \_SB_.PDAZ */
                }
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                If ((Arg0 == 0xD0))
                {
                    Return (PDAZ) /* \_SB_.PDAZ */
                }

                Return (Zero)
            }

            Name (WQCC, Buffer (0x043D)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x2D, 0x04, 0x00, 0x00, 0xB4, 0x0F, 0x00, 0x00,  // -.......
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x28, 0xCE, 0x87, 0x00, 0x01, 0x06, 0x18, 0x42,  // (......B
                /* 0020 */  0x10, 0x07, 0x10, 0x22, 0x21, 0x04, 0x12, 0x01,  // ..."!...
                /* 0028 */  0xA1, 0xC8, 0x2C, 0x0C, 0x86, 0x10, 0x38, 0x2E,  // ..,...8.
                /* 0030 */  0x24, 0x15, 0x07, 0x85, 0x12, 0x02, 0xA1, 0xFE,  // $.......
                /* 0038 */  0x04, 0xF2, 0x2B, 0x00, 0xA1, 0x43, 0x01, 0x32,  // ..+..C.2
                /* 0040 */  0x05, 0x18, 0x14, 0xE0, 0x14, 0x41, 0x04, 0xBD,  // .....A..
                /* 0048 */  0x0A, 0xB0, 0x29, 0xC0, 0xA4, 0x00, 0x8B, 0x02,  // ..).....
                /* 0050 */  0xB4, 0x0B, 0xB0, 0x2C, 0x40, 0xB7, 0x00, 0xE9,  // ...,@...
                /* 0058 */  0xB0, 0x44, 0x24, 0x38, 0x4A, 0x0C, 0x38, 0x4A,  // .D$8J.8J
                /* 0060 */  0x27, 0xB6, 0x70, 0xC3, 0x06, 0x2F, 0x14, 0x45,  // '.p../.E
                /* 0068 */  0x33, 0x88, 0x92, 0xA0, 0x72, 0x01, 0xBE, 0x11,  // 3...r...
                /* 0070 */  0x04, 0x5E, 0xAE, 0x00, 0xC9, 0x13, 0x90, 0x66,  // .^.....f
                /* 0078 */  0x01, 0x86, 0x05, 0x58, 0x17, 0x20, 0x7B, 0x08,  // ...X. {.
                /* 0080 */  0x54, 0xEA, 0x10, 0x50, 0x72, 0x86, 0x80, 0x1A,  // T..Pr...
                /* 0088 */  0x40, 0xAB, 0x13, 0x10, 0x7E, 0xA5, 0x53, 0x42,  // @...~.SB
                /* 0090 */  0x12, 0x84, 0x33, 0x56, 0xF1, 0xF8, 0x9A, 0x45,  // ..3V...E
                /* 0098 */  0xD3, 0x73, 0x92, 0x73, 0x0C, 0x39, 0x1E, 0x17,  // .s.s.9..
                /* 00A0 */  0x7A, 0x10, 0x3C, 0x84, 0x04, 0x10, 0x26, 0x7B,  // z.<...&{
                /* 00A8 */  0xC8, 0x92, 0x0D, 0x83, 0xD2, 0x30, 0x16, 0xEA,  // .....0..
                /* 00B0 */  0x62, 0xD4, 0xA8, 0x91, 0xB2, 0x01, 0x19, 0xA2,  // b.......
                /* 00B8 */  0x24, 0x38, 0xD4, 0xA8, 0x3D, 0xBB, 0xE6, 0xC7,  // $8..=...
                /* 00C0 */  0xA1, 0xD9, 0xB5, 0x3D, 0x16, 0x02, 0xC9, 0xA4,  // ...=....
                /* 00C8 */  0x0D, 0x05, 0x25, 0x05, 0x42, 0xC2, 0x67, 0x4A,  // ..%.B.gJ
                /* 00D0 */  0x66, 0x14, 0xF1, 0x48, 0x0D, 0x93, 0xC0, 0xA3,  // f..H....
                /* 00D8 */  0x88, 0xEC, 0x19, 0x46, 0x63, 0xD0, 0xD8, 0x61,  // ...Fc..a
                /* 00E0 */  0x78, 0x98, 0xC1, 0x0E, 0xE2, 0x30, 0x8E, 0x39,  // x....0.9
                /* 00E8 */  0x72, 0x02, 0x4F, 0xE8, 0x48, 0x8F, 0xBC, 0xB0,  // r.O.H...
                /* 00F0 */  0x79, 0x0A, 0x35, 0x46, 0x73, 0x50, 0x04, 0xFF,  // y.5FsP..
                /* 00F8 */  0x51, 0x00, 0x2B, 0x11, 0x56, 0xA3, 0x8D, 0x7D,  // Q.+.V..}
                /* 0100 */  0xBE, 0x1E, 0xCD, 0xC1, 0xC6, 0x38, 0x82, 0xE3,  // .....8..
                /* 0108 */  0x4A, 0xF0, 0xFF, 0x0F, 0x13, 0xA4, 0xF7, 0xE9,  // J.......
                /* 0110 */  0x10, 0x41, 0x78, 0x12, 0x3D, 0x0B, 0x61, 0xF5,  // .Ax.=.a.
                /* 0118 */  0x0C, 0x24, 0x9C, 0x10, 0xC7, 0xCD, 0x61, 0x0E,  // .$....a.
                /* 0120 */  0x58, 0x83, 0x40, 0xC9, 0x80, 0x10, 0xE4, 0x33,  // X.@....3
                /* 0128 */  0xC1, 0xD1, 0x99, 0xC0, 0xEE, 0x8F, 0x02, 0xD2,  // ........
                /* 0130 */  0x26, 0x40, 0xE3, 0x1D, 0x40, 0x20, 0x9D, 0x21,  // &@..@ .!
                /* 0138 */  0x08, 0xA4, 0xAD, 0xC1, 0x08, 0xA6, 0x42, 0x28,  // ......B(
                /* 0140 */  0xA1, 0x1C, 0x55, 0x38, 0x5B, 0x43, 0x11, 0x90,  // ..U8[C..
                /* 0148 */  0x6F, 0x05, 0xAF, 0x0F, 0xA1, 0xD8, 0xD4, 0x42,  // o......B
                /* 0150 */  0x1E, 0x5B, 0x90, 0xC6, 0xC0, 0x84, 0x1C, 0x2C,  // .[.....,
                /* 0158 */  0x4C, 0xBC, 0xF6, 0x17, 0xC2, 0x1E, 0x12, 0x3A,  // L......:
                /* 0160 */  0x0B, 0x38, 0xD2, 0x68, 0x50, 0x07, 0x05, 0x9F,  // .8.hP...
                /* 0168 */  0x07, 0x7C, 0x16, 0x78, 0x3E, 0xF0, 0xA8, 0x0E,  // .|.x>...
                /* 0170 */  0xCD, 0x83, 0x3B, 0xB0, 0xC7, 0x87, 0x07, 0x01,  // ..;.....
                /* 0178 */  0x0F, 0x99, 0xDD, 0x10, 0x7C, 0xAE, 0xF0, 0xC9,  // ....|...
                /* 0180 */  0x00, 0xEF, 0x1A, 0x50, 0x57, 0x82, 0x07, 0x02,  // ...PW...
                /* 0188 */  0x36, 0x46, 0xC3, 0xF1, 0x21, 0x7A, 0xB8, 0xE1,  // 6F..!z..
                /* 0190 */  0x4E, 0xE0, 0x10, 0x19, 0xA0, 0x67, 0xF5, 0x2C,  // N....g.,
                /* 0198 */  0x80, 0x1D, 0xD6, 0xC9, 0x3C, 0x08, 0xBC, 0x4B,  // ....<..K
                /* 01A0 */  0x34, 0x7B, 0x8B, 0x20, 0x04, 0xC7, 0xE3, 0x0B,  // 4{. ....
                /* 01A8 */  0x04, 0x9B, 0x70, 0x02, 0xCB, 0x1F, 0x04, 0x6A,  // ..p....j
                /* 01B0 */  0x64, 0x86, 0xF6, 0x74, 0x4F, 0xEB, 0x45, 0xC0,  // d..tO.E.
                /* 01B8 */  0x07, 0x00, 0x13, 0x58, 0x2C, 0x84, 0x14, 0x40,  // ...X,..@
                /* 01C0 */  0x68, 0x3C, 0xE0, 0x57, 0x7C, 0xE8, 0x20, 0xB7,  // h<.W|. .
                /* 01C8 */  0x05, 0xCF, 0xD7, 0x47, 0x13, 0xE6, 0x64, 0x3C,  // ...G..d<
                /* 01D0 */  0xA8, 0x51, 0xF8, 0x14, 0x10, 0xEE, 0xBC, 0x4D,  // .Q.....M
                /* 01D8 */  0xE0, 0xC0, 0x10, 0xFA, 0x5F, 0x58, 0xD4, 0x31,  // ...._X.1
                /* 01E0 */  0x85, 0x9F, 0x26, 0xE8, 0x41, 0x82, 0xA1, 0xB2,  // ..&.A...
                /* 01E8 */  0xFF, 0x3F, 0xC4, 0x91, 0x9C, 0x90, 0x3F, 0x2B,  // .?....?+
                /* 01F0 */  0x1E, 0x18, 0x7C, 0xC1, 0xA7, 0x08, 0x20, 0x03,  // ..|... .
                /* 01F8 */  0x83, 0xBB, 0x42, 0xB0, 0x01, 0xC3, 0xBF, 0x4C,  // ..B....L
                /* 0200 */  0x18, 0xD8, 0x17, 0x89, 0xCA, 0x20, 0xC9, 0x91,  // ..... ..
                /* 0208 */  0xE3, 0x89, 0x06, 0x0C, 0xE8, 0x7D, 0x0E, 0x56,  // .....}.V
                /* 0210 */  0x87, 0x16, 0x83, 0xF9, 0x3E, 0x13, 0xEC, 0xE5,  // ....>...
                /* 0218 */  0xA1, 0x47, 0x20, 0xDD, 0x59, 0xAC, 0x15, 0x42,  // .G .Y..B
                /* 0220 */  0x38, 0xAF, 0x30, 0x3E, 0xD6, 0x00, 0x93, 0x51,  // 8.0>...Q
                /* 0228 */  0x3F, 0xD6, 0x80, 0xED, 0xE4, 0x03, 0x67, 0x00,  // ?.....g.
                /* 0230 */  0x3C, 0x8E, 0x09, 0x10, 0x26, 0xFA, 0x5D, 0x20,  // <...&.] 
                /* 0238 */  0x29, 0x0F, 0x04, 0x0A, 0xE3, 0x23, 0x0D, 0x70,  // )....#.p
                /* 0240 */  0xF9, 0xFF, 0x1F, 0x69, 0x80, 0xDF, 0xC9, 0x00,  // ...i....
                /* 0248 */  0x77, 0x7A, 0x00, 0xCF, 0x84, 0x5E, 0x2B, 0xD8,  // wz...^+.
                /* 0250 */  0xFD, 0xC1, 0xE3, 0x08, 0x12, 0x38, 0xC2, 0x13,  // .....8..
                /* 0258 */  0x11, 0x39, 0xD1, 0x40, 0x3E, 0x35, 0x3C, 0xC2,  // .9.@>5<.
                /* 0260 */  0x3C, 0x07, 0x9C, 0xCE, 0xE1, 0x1C, 0xC9, 0x43,  // <......C
                /* 0268 */  0xC0, 0xEB, 0x8C, 0xBD, 0x21, 0xE9, 0x1E, 0xF3,  // ....!...
                /* 0270 */  0x3A, 0x63, 0xAC, 0x40, 0x27, 0x15, 0xC5, 0xF7,  // :c.@'...
                /* 0278 */  0x99, 0x50, 0x11, 0xA2, 0x45, 0x09, 0x19, 0xE1,  // .P..E...
                /* 0280 */  0x15, 0x22, 0xA4, 0x91, 0xA3, 0x45, 0x8C, 0x12,  // ."...E..
                /* 0288 */  0x3F, 0x64, 0x9C, 0x27, 0x1A, 0x16, 0xEB, 0x28,  // ?d.'...(
                /* 0290 */  0xA0, 0xF3, 0x87, 0x4F, 0x34, 0x80, 0xDF, 0xFF,  // ...O4...
                /* 0298 */  0xFF, 0x89, 0x06, 0xFC, 0xF2, 0x4E, 0x24, 0xA0,  // .....N$.
                /* 02A0 */  0x3B, 0x36, 0x79, 0x0E, 0x21, 0x9E, 0x46, 0x80,  // ;6y.!.F.
                /* 02A8 */  0x8B, 0xF4, 0x47, 0x87, 0x4E, 0x75, 0x64, 0xA1,  // ..G.Nud.
                /* 02B0 */  0xB2, 0xB1, 0x50, 0x0F, 0x82, 0x0A, 0x3F, 0x21,  // ..P...?!
                /* 02B8 */  0xE8, 0xAC, 0x12, 0x37, 0xE6, 0xAB, 0xCA, 0x6B,  // ...7...k
                /* 02C0 */  0x84, 0x4F, 0x6B, 0xBE, 0x4B, 0xB0, 0x41, 0x0B,  // .Ok.K.A.
                /* 02C8 */  0x4E, 0xA7, 0x3D, 0x2E, 0x93, 0x42, 0x22, 0x21,  // N.=..B"!
                /* 02D0 */  0x34, 0x20, 0xC3, 0x59, 0x16, 0x1C, 0x05, 0xF1,  // 4 .Y....
                /* 02D8 */  0xE8, 0x7D, 0xE2, 0xF3, 0x51, 0x08, 0x6E, 0xC4,  // .}..Q.n.
                /* 02E0 */  0xA3, 0x10, 0x3D, 0x2D, 0xE0, 0xC7, 0x72, 0x64,  // ..=-..rd
                /* 02E8 */  0x27, 0xE6, 0x59, 0xF8, 0x70, 0x87, 0x3B, 0x72,  // '.Y.p.;r
                /* 02F0 */  0xC0, 0x1D, 0x1C, 0x5B, 0xE1, 0xF1, 0xFB, 0x02,  // ...[....
                /* 02F8 */  0x10, 0xE4, 0x7C, 0x83, 0x9D, 0xAC, 0x51, 0x5E,  // ..|...Q^
                /* 0300 */  0x11, 0x3C, 0x42, 0xEC, 0x60, 0x7C, 0x4C, 0xE2,  // .<B.`|L.
                /* 0308 */  0xE3, 0xF0, 0xD5, 0xE0, 0x7D, 0xC6, 0x04, 0xEC,  // ....}...
                /* 0310 */  0x0C, 0x04, 0x9E, 0xFF, 0xFF, 0x19, 0x88, 0x0B,  // ........
                /* 0318 */  0x3C, 0x22, 0x80, 0x02, 0xC8, 0x97, 0x02, 0x1F,  // <"......
                /* 0320 */  0x11, 0x1E, 0x0C, 0xD8, 0x1C, 0x9E, 0x12, 0x7C,  // .......|
                /* 0328 */  0xC4, 0x61, 0xF0, 0x3C, 0xDA, 0xA8, 0xA8, 0xAC,  // .a.<....
                /* 0330 */  0x71, 0xA1, 0x06, 0xEB, 0x33, 0x0C, 0xC3, 0x3E,  // q...3..>
                /* 0338 */  0x4F, 0x5F, 0x9A, 0x8E, 0xD2, 0xC7, 0x29, 0x0C,  // O_....).
                /* 0340 */  0xAC, 0x87, 0xCF, 0x61, 0x8D, 0x16, 0xF6, 0xA8,  // ...a....
                /* 0348 */  0x9F, 0x24, 0x7C, 0x0B, 0xF1, 0xCC, 0x8C, 0x11,  // .$|.....
                /* 0350 */  0xD6, 0x47, 0x00, 0x20, 0x76, 0x7C, 0x40, 0x9D,  // .G. v|@.
                /* 0358 */  0x79, 0x7C, 0x6E, 0xF0, 0x88, 0x22, 0x9E, 0xE7,  // y|n.."..
                /* 0360 */  0xDB, 0x8F, 0x2F, 0x1B, 0xA7, 0xE4, 0x01, 0x59,  // ../....Y
                /* 0368 */  0xE2, 0xE9, 0x01, 0x25, 0x8E, 0x42, 0xD2, 0x4E,  // ...%.B.N
                /* 0370 */  0x0F, 0x28, 0x31, 0x70, 0x14, 0xC4, 0xA7, 0x07,  // .(1p....
                /* 0378 */  0x07, 0x3D, 0x3D, 0x40, 0x0F, 0x76, 0x7A, 0x00,  // .==@.vz.
                /* 0380 */  0xC5, 0xA9, 0x00, 0x37, 0x56, 0xB8, 0x63, 0xF3,  // ...7V.c.
                /* 0388 */  0x21, 0xCC, 0x73, 0xC3, 0x1E, 0x1C, 0xC0, 0xF2,  // !.s.....
                /* 0390 */  0xFF, 0x3F, 0x38, 0x00, 0xDF, 0xE1, 0xFA, 0xE0,  // .?8.....
                /* 0398 */  0x00, 0xAE, 0x33, 0x80, 0x0F, 0x0E, 0xE0, 0x3A,  // ..3....:
                /* 03A0 */  0x6E, 0x82, 0x67, 0xF4, 0xEC, 0x08, 0xF3, 0x88,  // n.g.....
                /* 03A8 */  0x63, 0xAC, 0x73, 0x7D, 0xE4, 0xF1, 0x09, 0x00,  // c.s}....
                /* 03B0 */  0x8E, 0x98, 0x73, 0x03, 0x6A, 0xB8, 0x96, 0x7B,  // ..s.j..{
                /* 03B8 */  0x8A, 0x41, 0xDC, 0x11, 0x30, 0x07, 0x18, 0x1F,  // .A..0...
                /* 03C0 */  0x1B, 0xB8, 0x40, 0x0A, 0xC9, 0x3B, 0x36, 0xA0,  // ..@..;6.
                /* 03C8 */  0x04, 0xC1, 0x51, 0x10, 0x8F, 0xD1, 0x61, 0x8F,  // ..Q...a.
                /* 03D0 */  0x0D, 0xD0, 0xC3, 0x1D, 0x1B, 0x40, 0x71, 0xFC,  // .....@q.
                /* 03D8 */  0xC1, 0x9F, 0x38, 0xE0, 0x9F, 0xC3, 0xE0, 0x1C,  // ..8.....
                /* 03E0 */  0x1C, 0xF8, 0xFF, 0xFF, 0xE0, 0x00, 0xF8, 0x08,  // ........
                /* 03E8 */  0x75, 0x70, 0x00, 0x1D, 0x2C, 0x3F, 0x38, 0x80,  // up..,?8.
                /* 03F0 */  0x67, 0xFC, 0xC0, 0x43, 0xA1, 0x4D, 0x9F, 0x1A,  // g..C.M..
                /* 03F8 */  0x8D, 0x5A, 0x35, 0x28, 0x53, 0xA3, 0x4C, 0x83,  // .Z5(S.L.
                /* 0400 */  0x5A, 0x7D, 0x2A, 0x35, 0x66, 0xCC, 0xC6, 0x91,  // Z}*5f...
                /* 0408 */  0x01, 0x25, 0x64, 0x55, 0x1A, 0x96, 0x63, 0x80,  // .%dU..c.
                /* 0410 */  0xF0, 0x47, 0x82, 0x40, 0x1C, 0xD5, 0x02, 0x20,  // .G.@... 
                /* 0418 */  0x8B, 0xE2, 0x01, 0x88, 0x09, 0x59, 0x92, 0x40,  // .....Y.@
                /* 0420 */  0x1C, 0xEF, 0xA8, 0x28, 0x23, 0xE7, 0x06, 0x83,  // ...(#...
                /* 0428 */  0x08, 0xC8, 0x71, 0xD7, 0x28, 0x20, 0x87, 0x07,  // ..q.( ..
                /* 0430 */  0x11, 0x90, 0xE3, 0xAF, 0x43, 0x40, 0x16, 0xA3,  // ....C@..
                /* 0438 */  0x03, 0x88, 0xFD, 0xFF, 0x01                     // .....
            })
        }

        Device (WFTE)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "TestDev")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x7F, 0xAB, 0x13, 0x1F, 0x20, 0x62, 0x10, 0x42,  // .... b.B
                /* 0008 */  0x8F, 0x8E, 0x8B, 0xB5, 0xE7, 0x1E, 0xE9, 0x69,  // .......i
                /* 0010 */  0x44, 0x45, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // DE..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x43, 0x43, 0x01, 0x00   // ..).CC..
            })
            Method (WMDE, 3, NotSerialized)
            {
                If ((Arg1 == One))
                {
                    PDAZ = Arg2
                    Notify (WFDE, 0xD0) // Hardware-Specific
                    Return (PDAZ) /* \_SB_.PDAZ */
                }
            }

            Name (WQCC, Buffer (0x02F1)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xE1, 0x02, 0x00, 0x00, 0xC2, 0x06, 0x00, 0x00,  // ........
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0xA8, 0x5D, 0x83, 0x00, 0x01, 0x06, 0x18, 0x42,  // .].....B
                /* 0020 */  0x20, 0x14, 0x03, 0x89, 0xC0, 0xA2, 0x69, 0x24,  //  .....i$
                /* 0028 */  0xC7, 0x01, 0x0C, 0x86, 0xCB, 0x72, 0x20, 0xE4,  // .....r .
                /* 0030 */  0x82, 0x89, 0x09, 0x10, 0x01, 0x21, 0xAF, 0x02,  // .....!..
                /* 0038 */  0x6C, 0x0A, 0x30, 0x09, 0xA2, 0xFE, 0xFD, 0x21,  // l.0....!
                /* 0040 */  0x4A, 0x82, 0x43, 0x09, 0x81, 0x90, 0x64, 0x01,  // J.C...d.
                /* 0048 */  0xE6, 0x05, 0xE8, 0x16, 0x60, 0x58, 0x80, 0x6D,  // ....`X.m
                /* 0050 */  0x01, 0xA6, 0x05, 0x38, 0x86, 0xA4, 0xD2, 0xC0,  // ...8....
                /* 0058 */  0x29, 0x81, 0xA5, 0x40, 0x48, 0xB8, 0x00, 0xE5,  // )..@H...
                /* 0060 */  0x02, 0x7C, 0x0B, 0xD0, 0x8E, 0x28, 0xDC, 0x96,  // .|...(..
                /* 0068 */  0x61, 0x44, 0xE0, 0x51, 0x44, 0xB6, 0x50, 0x34,  // aD.QD.P4
                /* 0070 */  0x0A, 0x8D, 0x1D, 0x86, 0x65, 0x82, 0x69, 0x10,  // ....e.i.
                /* 0078 */  0x87, 0x51, 0x36, 0xB2, 0x08, 0x3C, 0xA1, 0x4E,  // .Q6..<.N
                /* 0080 */  0x05, 0xC8, 0x15, 0x20, 0x4C, 0x80, 0x78, 0x54,  // ... L.xT
                /* 0088 */  0x61, 0x34, 0x07, 0x45, 0x20, 0x43, 0x63, 0xC4,  // a4.E Cc.
                /* 0090 */  0x40, 0x48, 0x22, 0xAC, 0x9C, 0x63, 0x6B, 0x14,  // @H"..ck.
                /* 0098 */  0xA7, 0x71, 0x34, 0xA5, 0x63, 0x68, 0x04, 0xC7,  // .q4.ch..
                /* 00A0 */  0x75, 0x40, 0x06, 0xE9, 0x7D, 0x3A, 0x44, 0xD0,  // u@..}:D.
                /* 00A8 */  0x84, 0x34, 0x8A, 0x68, 0x21, 0xA2, 0x04, 0x3D,  // .4.h!..=
                /* 00B0 */  0x8E, 0x20, 0x81, 0x23, 0x24, 0x30, 0xCC, 0x31,  // . .#$0.1
                /* 00B8 */  0x60, 0x64, 0x40, 0xC8, 0xB3, 0x00, 0xEB, 0x83,  // `d@.....
                /* 00C0 */  0x23, 0x04, 0x76, 0x2F, 0xC0, 0x98, 0x00, 0x8D,  // #.v/....
                /* 00C8 */  0x10, 0x72, 0x26, 0xC0, 0xA0, 0x00, 0x85, 0x02,  // .r&.....
                /* 00D0 */  0xBC, 0xC1, 0xC8, 0x96, 0x00, 0x6D, 0x02, 0x94,  // .....m..
                /* 00D8 */  0x21, 0x68, 0x4A, 0x51, 0x0E, 0x2A, 0x48, 0xB8,  // !hJQ.*H.
                /* 00E0 */  0x28, 0x16, 0x87, 0x26, 0x88, 0x16, 0x51, 0x08,  // (..&..Q.
                /* 00E8 */  0x68, 0x84, 0xD6, 0x60, 0x84, 0x1B, 0x2E, 0x46,  // h..`...F
                /* 00F0 */  0x84, 0x93, 0x8B, 0x1C, 0xA2, 0xFD, 0x41, 0x90,  // ......A.
                /* 00F8 */  0x68, 0x47, 0x01, 0x49, 0x00, 0x51, 0xA4, 0xD1,  // hG.I.Q..
                /* 0100 */  0xA0, 0x86, 0x9F, 0xE0, 0x71, 0xC0, 0x47, 0x81,  // ....q.G.
                /* 0108 */  0x93, 0x3B, 0xA9, 0x13, 0x33, 0xC8, 0x89, 0x1D,  // .;..3...
                /* 0110 */  0x5D, 0x9D, 0xE7, 0x00, 0x32, 0x62, 0x86, 0x95,  // ]...2b..
                /* 0118 */  0xE0, 0xD7, 0xC0, 0x07, 0x03, 0xBC, 0x6B, 0x40,  // ......k@
                /* 0120 */  0xDD, 0x08, 0x9E, 0x07, 0xD8, 0x30, 0xC3, 0x61,  // .....0.a
                /* 0128 */  0x86, 0xE8, 0xD1, 0x86, 0xFB, 0xFF, 0x9F, 0xC0,  // ........
                /* 0130 */  0x21, 0x32, 0x40, 0x0F, 0xED, 0x51, 0x00, 0xEB,  // !2@..Q..
                /* 0138 */  0x70, 0x32, 0x3A, 0x07, 0x94, 0x2A, 0xC0, 0xEC,  // p2:..*..
                /* 0140 */  0x99, 0x40, 0x33, 0x4B, 0x70, 0x3C, 0x3E, 0x00,  // .@3Kp<>.
                /* 0148 */  0x78, 0x3E, 0x27, 0x9C, 0xC0, 0xF2, 0x07, 0x81,  // x>'.....
                /* 0150 */  0x1A, 0x99, 0xA1, 0x3D, 0xE3, 0xD3, 0x7A, 0x0F,  // ...=..z.
                /* 0158 */  0xF0, 0xF1, 0xE0, 0xB0, 0x98, 0x58, 0x08, 0x29,  // .....X.)
                /* 0160 */  0x80, 0xD0, 0x78, 0xC0, 0xAF, 0xF8, 0x68, 0x20,  // ..x...h 
                /* 0168 */  0x84, 0x97, 0x05, 0xCF, 0xD7, 0x87, 0x04, 0x03,  // ........
                /* 0170 */  0x63, 0x07, 0x64, 0xBF, 0x02, 0x10, 0x82, 0xBF,  // c.d.....
                /* 0178 */  0x2E, 0x1C, 0xD1, 0x43, 0x43, 0x84, 0x04, 0x2F,  // ...CC../
                /* 0180 */  0x03, 0x47, 0x50, 0x29, 0xBE, 0xB0, 0x0E, 0x21,  // .GP)...!
                /* 0188 */  0x46, 0xA4, 0x18, 0x51, 0x82, 0xD4, 0x0A, 0xA1,  // F..Q....
                /* 0190 */  0xE9, 0x87, 0x49, 0x50, 0xE4, 0xC9, 0x01, 0x3D,  // ..IP...=
                /* 0198 */  0x02, 0x8E, 0x77, 0x02, 0xC7, 0x13, 0xD9, 0xE3,  // ..w.....
                /* 01A0 */  0x89, 0x72, 0x12, 0x07, 0xE4, 0x33, 0x85, 0x11,  // .r...3..
                /* 01A8 */  0x4E, 0xF3, 0x51, 0xE2, 0xD1, 0xC2, 0x9A, 0x67,  // N.Q....g
                /* 01B0 */  0xA4, 0x13, 0xC3, 0x39, 0xBD, 0x0D, 0x98, 0xA0,  // ...9....
                /* 01B8 */  0xB2, 0xE7, 0x80, 0x8E, 0x1F, 0x56, 0x05, 0x22,  // .....V."
                /* 01C0 */  0x1B, 0x4B, 0xF5, 0x39, 0x83, 0x6A, 0x5E, 0xAE,  // .K.9.j^.
                /* 01C8 */  0x46, 0x74, 0xCC, 0xC7, 0xEA, 0x11, 0x9C, 0xB4,  // Ft......
                /* 01D0 */  0xA7, 0x17, 0xD9, 0x4A, 0xC1, 0x04, 0xEC, 0x61,  // ...J...a
                /* 01D8 */  0x5B, 0x23, 0x85, 0xD4, 0xD0, 0x68, 0x3C, 0x06,  // [#...h<.
                /* 01E0 */  0x77, 0xFE, 0x13, 0x09, 0x05, 0x31, 0xA0, 0xC3,  // w....1..
                /* 01E8 */  0x41, 0xC8, 0xC9, 0x49, 0x00, 0xA5, 0x62, 0xBC,  // A..I..b.
                /* 01F0 */  0xE4, 0x68, 0xC1, 0x08, 0xA6, 0x81, 0xD0, 0xDD,  // .h......
                /* 01F8 */  0xC1, 0xF3, 0xF3, 0x3D, 0x80, 0xDF, 0x4C, 0x7C,  // ...=..L|
                /* 0200 */  0x32, 0x30, 0xB0, 0xEF, 0x13, 0x6F, 0x1C, 0xF0,  // 20...o..
                /* 0208 */  0xFF, 0xFF, 0x37, 0x0E, 0x36, 0x09, 0x8C, 0x9A,  // ..7.6...
                /* 0210 */  0x23, 0x04, 0x9D, 0x02, 0xBF, 0x00, 0xBC, 0x0A,  // #.......
                /* 0218 */  0x98, 0xC0, 0xBA, 0x2E, 0x06, 0xD0, 0x4F, 0x1D,  // ......O.
                /* 0220 */  0x1E, 0xA8, 0xAF, 0x1C, 0x67, 0x63, 0x7D, 0x07,  // ....gc}.
                /* 0228 */  0x03, 0x50, 0x00, 0xF9, 0x22, 0xE0, 0x93, 0xC1,  // .P.."...
                /* 0230 */  0xC3, 0x00, 0xBB, 0x19, 0x18, 0x26, 0x9A, 0xD1,  // .....&..
                /* 0238 */  0xB9, 0xA8, 0x69, 0xA3, 0x64, 0xC0, 0x68, 0xDA,  // ..i.d.h.
                /* 0240 */  0x06, 0xF1, 0xB4, 0x1D, 0x71, 0xDA, 0x68, 0x68,  // ....q.hh
                /* 0248 */  0x5F, 0x05, 0x7C, 0x11, 0x70, 0xA8, 0x61, 0xD3,  // _.|.p.a.
                /* 0250 */  0x3B, 0x07, 0x7E, 0xAE, 0x67, 0x16, 0xD0, 0x93,  // ;.~.g...
                /* 0258 */  0xF0, 0x91, 0xE4, 0xB8, 0xC1, 0x32, 0x0A, 0x06,  // .....2..
                /* 0260 */  0x1E, 0x24, 0x8E, 0x47, 0xC1, 0x26, 0xCE, 0x07,  // .$.G.&..
                /* 0268 */  0xE0, 0x89, 0xF3, 0x71, 0xF9, 0x86, 0x01, 0x7F,  // ...q....
                /* 0270 */  0xE4, 0x58, 0x82, 0x02, 0x67, 0x0E, 0x72, 0x78,  // .X..g.rx
                /* 0278 */  0x4C, 0xB0, 0x51, 0x51, 0x59, 0xE3, 0x42, 0x8D,  // L.QQY.B.
                /* 0280 */  0xD2, 0x57, 0x20, 0x86, 0x7D, 0x82, 0x16, 0x3D,  // .W .}..=
                /* 0288 */  0x48, 0x9D, 0x2F, 0x0E, 0xEA, 0x69, 0xC4, 0x63,  // H./..i.c
                /* 0290 */  0x33, 0xAC, 0xC7, 0xFD, 0xFF, 0x0F, 0x8B, 0x41,  // 3......A
                /* 0298 */  0x0B, 0x7B, 0xB8, 0x2F, 0x22, 0x3E, 0xC5, 0x78,  // .{./">.x
                /* 02A0 */  0x66, 0xC6, 0x08, 0xEB, 0xB1, 0x7B, 0x40, 0x8F,  // f....{@.
                /* 02A8 */  0x10, 0xE0, 0x01, 0x7B, 0x35, 0x39, 0xD3, 0x07,  // ...{59..
                /* 02B0 */  0x97, 0x3F, 0x8E, 0xEA, 0x20, 0x74, 0xDF, 0xE0,  // .?.. t..
                /* 02B8 */  0x28, 0x21, 0x1E, 0x38, 0x30, 0x04, 0x15, 0xDA,  // (!.80...
                /* 02C0 */  0xF4, 0xA9, 0xD1, 0xA8, 0x55, 0x83, 0x32, 0x35,  // ....U.25
                /* 02C8 */  0xCA, 0x34, 0xA8, 0xD5, 0xA7, 0x52, 0x63, 0xC6,  // .4...Rc.
                /* 02D0 */  0x3C, 0x5C, 0x8E, 0xE8, 0x41, 0x81, 0xBC, 0x13,  // <\..A...
                /* 02D8 */  0x34, 0x42, 0x87, 0x00, 0xA1, 0x42, 0x9E, 0x08,  // 4B...B..
                /* 02E0 */  0x32, 0x72, 0x0F, 0x31, 0x88, 0x80, 0xAC, 0xCC,  // 2r.1....
                /* 02E8 */  0x02, 0x10, 0xD3, 0x09, 0x22, 0x20, 0xFF, 0xFF,  // ...." ..
                /* 02F0 */  0x01                                             // .
            })
        }

        Method (USSV, 1, Serialized)
        {
            PDAZ = Arg0
        }

        Method (GSSV, 0, Serialized)
        {
            Return (PDAZ) /* \_SB_.PDAZ */
        }
    }

    Scope (_SB.PCI0.GP17.ACP)
    {
        Method (_WOV, 0, NotSerialized)
        {
            Return (WOVS) /* \WOVS */
        }
    }
}



ECDT
----
[000h 0000 004h]                   Signature : "ECDT"    [Embedded Controller Boot Resources Table]
[004h 0004 004h]                Table Length : 000000C1
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : FF
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "Notebook"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI."
[020h 0032 004h]       Asl Compiler Revision : 00000005


[024h 0036 00Ch]     Command/Status Register : [Generic Address Structure]
[024h 0036 001h]                    Space ID : 01 [SystemIO]
[025h 0037 001h]                   Bit Width : 08
[026h 0038 001h]                  Bit Offset : 00
[027h 0039 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[028h 0040 008h]                     Address : 0000000000000066

[030h 0048 00Ch]               Data Register : [Generic Address Structure]
[030h 0048 001h]                    Space ID : 01 [SystemIO]
[031h 0049 001h]                   Bit Width : 08
[032h 0050 001h]                  Bit Offset : 00
[033h 0051 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[034h 0052 008h]                     Address : 0000000000000062

[03Ch 0060 004h]                         UID : 00000000
[040h 0064 001h]                  GPE Number : 03
[041h 0065 013h]                    Namepath : "\_SB.PCI0.SBRG.EC0"

Raw Table Data: Length 193 (0xC1)

    0000: 45 43 44 54 C1 00 00 00 01 FF 5F 41 53 55 53 5F  // ECDT......_ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 2E  // Notebook. ..AMI.
    0020: 05 00 00 00 01 08 00 00 66 00 00 00 00 00 00 00  // ........f.......
    0030: 01 08 00 00 62 00 00 00 00 00 00 00 00 00 00 00  // ....b...........
    0040: 03 5C 5F 53 42 2E 50 43 49 30 2E 53 42 52 47 2E  // .\_SB.PCI0.SBRG.
    0050: 45 43 30 00 00 00 00 00 00 00 00 00 00 00 00 00  // EC0.............
    0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00                                               // .


FACP
----
[000h 0000 004h]                   Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004 004h]                Table Length : 00000114
[008h 0008 001h]                    Revision : 06
[009h 0009 001h]                    Checksum : F1
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "Notebook"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 004h]                FACS Address : AB90C000
[028h 0040 004h]                DSDT Address : AB382000
[02Ch 0044 001h]                       Model : 00
[02Dh 0045 001h]                  PM Profile : 02 [Mobile]
[02Eh 0046 002h]               SCI Interrupt : 0009
[030h 0048 004h]            SMI Command Port : 000000B2
[034h 0052 001h]           ACPI Enable Value : A0
[035h 0053 001h]          ACPI Disable Value : A1
[036h 0054 001h]              S4BIOS Command : 00
[037h 0055 001h]             P-State Control : 00
[038h 0056 004h]    PM1A Event Block Address : 00000800
[03Ch 0060 004h]    PM1B Event Block Address : 00000000
[040h 0064 004h]  PM1A Control Block Address : 00000804
[044h 0068 004h]  PM1B Control Block Address : 00000000
[048h 0072 004h]   PM2 Control Block Address : 000000B4
[04Ch 0076 004h]      PM Timer Block Address : 00000808
[050h 0080 004h]          GPE0 Block Address : 00000820
[054h 0084 004h]          GPE1 Block Address : 00000000
[058h 0088 001h]      PM1 Event Block Length : 04
[059h 0089 001h]    PM1 Control Block Length : 02
[05Ah 0090 001h]    PM2 Control Block Length : 01
[05Bh 0091 001h]       PM Timer Block Length : 04
[05Ch 0092 001h]           GPE0 Block Length : 08
[05Dh 0093 001h]           GPE1 Block Length : 00
[05Eh 0094 001h]            GPE1 Base Offset : 00
[05Fh 0095 001h]                _CST Support : 00
[060h 0096 002h]                  C2 Latency : 0065
[062h 0098 002h]                  C3 Latency : 03E9
[064h 0100 002h]              CPU Cache Size : 0400
[066h 0102 002h]          Cache Flush Stride : 0010
[068h 0104 001h]           Duty Cycle Offset : 01
[069h 0105 001h]            Duty Cycle Width : 03
[06Ah 0106 001h]         RTC Day Alarm Index : 0D
[06Bh 0107 001h]       RTC Month Alarm Index : 00
[06Ch 0108 001h]           RTC Century Index : 32
[06Dh 0109 002h]  Boot Flags (decoded below) : 0010
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 1
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111 001h]                    Reserved : 00
[070h 0112 004h]       Flags (decoded below) : 0000C5AD
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 1
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 1
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116 00Ch]              Reset Register : [Generic Address Structure]
[074h 0116 001h]                    Space ID : 01 [SystemIO]
[075h 0117 001h]                   Bit Width : 08
[076h 0118 001h]                  Bit Offset : 00
[077h 0119 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120 008h]                     Address : 00000000000000B2

[080h 0128 001h]        Value to cause reset : BE
[081h 0129 002h]   ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131 001h]         FADT Minor Revision : 00
[084h 0132 008h]                FACS Address : 0000000000000000
[08Ch 0140 008h]                DSDT Address : 00000000AB382000
[094h 0148 00Ch]            PM1A Event Block : [Generic Address Structure]
[094h 0148 001h]                    Space ID : 01 [SystemIO]
[095h 0149 001h]                   Bit Width : 20
[096h 0150 001h]                  Bit Offset : 00
[097h 0151 001h]        Encoded Access Width : 02 [Word Access:16]
[098h 0152 008h]                     Address : 0000000000000800

[0A0h 0160 00Ch]            PM1B Event Block : [Generic Address Structure]
[0A0h 0160 001h]                    Space ID : 01 [SystemIO]
[0A1h 0161 001h]                   Bit Width : 00
[0A2h 0162 001h]                  Bit Offset : 00
[0A3h 0163 001h]        Encoded Access Width : 02 [Word Access:16]
[0A4h 0164 008h]                     Address : 0000000000000000

[0ACh 0172 00Ch]          PM1A Control Block : [Generic Address Structure]
[0ACh 0172 001h]                    Space ID : 01 [SystemIO]
[0ADh 0173 001h]                   Bit Width : 10
[0AEh 0174 001h]                  Bit Offset : 00
[0AFh 0175 001h]        Encoded Access Width : 02 [Word Access:16]
[0B0h 0176 008h]                     Address : 0000000000000804

[0B8h 0184 00Ch]          PM1B Control Block : [Generic Address Structure]
[0B8h 0184 001h]                    Space ID : 01 [SystemIO]
[0B9h 0185 001h]                   Bit Width : 00
[0BAh 0186 001h]                  Bit Offset : 00
[0BBh 0187 001h]        Encoded Access Width : 02 [Word Access:16]
[0BCh 0188 008h]                     Address : 0000000000000000

[0C4h 0196 00Ch]           PM2 Control Block : [Generic Address Structure]
[0C4h 0196 001h]                    Space ID : 01 [SystemIO]
[0C5h 0197 001h]                   Bit Width : 08
[0C6h 0198 001h]                  Bit Offset : 00
[0C7h 0199 001h]        Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200 008h]                     Address : 00000000000000B4

[0D0h 0208 00Ch]              PM Timer Block : [Generic Address Structure]
[0D0h 0208 001h]                    Space ID : 01 [SystemIO]
[0D1h 0209 001h]                   Bit Width : 20
[0D2h 0210 001h]                  Bit Offset : 00
[0D3h 0211 001h]        Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212 008h]                     Address : 0000000000000808

[0DCh 0220 00Ch]                  GPE0 Block : [Generic Address Structure]
[0DCh 0220 001h]                    Space ID : 01 [SystemIO]
[0DDh 0221 001h]                   Bit Width : 40
[0DEh 0222 001h]                  Bit Offset : 00
[0DFh 0223 001h]        Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224 008h]                     Address : 0000000000000820

[0E8h 0232 00Ch]                  GPE1 Block : [Generic Address Structure]
[0E8h 0232 001h]                    Space ID : 01 [SystemIO]
[0E9h 0233 001h]                   Bit Width : 00
[0EAh 0234 001h]                  Bit Offset : 00
[0EBh 0235 001h]        Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236 008h]                     Address : 0000000000000000


[0F4h 0244 00Ch]      Sleep Control Register : [Generic Address Structure]
[0F4h 0244 001h]                    Space ID : 00 [SystemMemory]
[0F5h 0245 001h]                   Bit Width : 00
[0F6h 0246 001h]                  Bit Offset : 00
[0F7h 0247 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248 008h]                     Address : 0000000000000000

[100h 0256 00Ch]       Sleep Status Register : [Generic Address Structure]
[100h 0256 001h]                    Space ID : 00 [SystemMemory]
[101h 0257 001h]                   Bit Width : 00
[102h 0258 001h]                  Bit Offset : 00
[103h 0259 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260 008h]                     Address : 0000000000000000

[10Ch 0268 008h]               Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 F1 5F 41 53 55 53 5F  // FACP......_ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 20  // Notebook. ..AMI 
    0020: 13 00 01 00 00 C0 90 AB 00 20 38 AB 00 02 09 00  // ......... 8.....
    0030: B2 00 00 00 A0 A1 00 00 00 08 00 00 00 00 00 00  // ................
    0040: 04 08 00 00 00 00 00 00 B4 00 00 00 08 08 00 00  // ................
    0050: 20 08 00 00 00 00 00 00 04 02 01 04 08 00 00 00  //  ...............
    0060: 65 00 E9 03 00 04 10 00 01 03 0D 00 32 10 00 00  // e...........2...
    0070: AD C5 00 00 01 08 00 00 B2 00 00 00 00 00 00 00  // ................
    0080: BE 00 00 00 00 00 00 00 00 00 00 00 00 20 38 AB  // ............. 8.
    0090: 00 00 00 00 01 20 00 02 00 08 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 08 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 B4 00 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 08 00 00 00 00 00 00 01 40 00 01  // . ...........@..
    00E0: 20 08 00 00 00 00 00 00 01 00 00 01 00 00 00 00  //  ...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000 004h]                   Signature : "FACS"
[004h 0004 004h]                      Length : 00000040
[008h 0008 004h]          Hardware Signature : FEB2F501
[00Ch 0012 004h]   32 Firmware Waking Vector : 00000000
[010h 0016 004h]                 Global Lock : 00000000
[014h 0020 004h]       Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024 008h]   64 Firmware Waking Vector : 0000000000000000
[020h 0032 001h]                     Version : 02
[021h 0033 003h]                    Reserved : 000000
[024h 0036 004h]   OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 01 F5 B2 FE 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FIDT
----
[000h 0000 004h]                   Signature : "FIDT"    
[004h 0004 004h]                Table Length : 0000009C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 3B
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "Notebook"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013


**** Unknown ACPI table signature [FIDT]


Raw Table Data: Length 156 (0x9C)

    0000: 46 49 44 54 9C 00 00 00 01 3B 5F 41 53 55 53 5F  // FIDT.....;_ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 20  // Notebook. ..AMI 
    0020: 13 00 01 00 24 46 49 44 04 78 00 31 41 58 47 4B  // ....$FID.x.1AXGK
    0030: 30 31 36 00 49 73 44 A1 45 E6 4A FC 61 89 22 41  // 016.IsD.E.J.a."A
    0040: 7F 05 DD 5B 30 35 00 31 39 00 30 30 00 31 36 00  // ...[05.19.00.16.
    0050: E5 07 0A 0E 14 06 1C FF FF 5F 41 53 55 53 5F 4E  // ........._ASUS_N
    0060: 6F 74 65 62 6F 6F 6B 31 00 00 00 FF FF FF FF FF  // otebook1........
    0070: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0080: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0090: FF FF FF FF FF FF FF FF FF FF FF FF              // ............


FPDT
----
[000h 0000 004h]                   Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004 004h]                Table Length : 00000044
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : D7
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 01000013


[024h 0036 002h]               Subtable Type : 0000
[026h 0038 001h]                      Length : 10
[027h 0039 001h]                    Revision : 01
[028h 0040 004h]                    Reserved : 00000000
[02Ch 0044 008h]    FPDT Boot Record Address : 00000000AB2DA000

[034h 0052 002h]               Subtable Type : 0001
[036h 0054 001h]                      Length : 10
[037h 0055 001h]                    Revision : 01
[038h 0056 004h]                    Reserved : 00000000
[03Ch 0060 008h]         S3PT Record Address : 00000000AB33D000

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 D7 5F 41 53 55 53 5F  // FPDTD....._ASUS_
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 00 01 00 00 10 01 00 00 00 00 00 A0 2D AB  // ..............-.
    0030: 00 00 00 00 01 00 10 01 00 00 00 00 00 D0 33 AB  // ..............3.
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000 004h]                   Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 46
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "Notebook"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00000005

[024h 0036 004h]           Hardware Block ID : 10228201

[028h 0040 00Ch]        Timer Block Register : [Generic Address Structure]
[028h 0040 001h]                    Space ID : 00 [SystemMemory]
[029h 0041 001h]                   Bit Width : 40
[02Ah 0042 001h]                  Bit Offset : 00
[02Bh 0043 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044 008h]                     Address : 00000000FED00000

[034h 0052 001h]             Sequence Number : 00
[035h 0053 002h]         Minimum Clock Ticks : 37EE
[037h 0055 001h]       Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 46 5F 41 53 55 53 5F  // HPET8....F_ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 20  // Notebook. ..AMI 
    0020: 05 00 00 00 01 82 22 10 00 40 00 00 00 00 D0 FE  // ......"..@......
    0030: 00 00 00 00 00 EE 37 00                          // ......7.


IVRS
----
[000h 0000 004h]                   Signature : "IVRS"    [I/O Virtualization Reporting Structure]
[004h 0004 004h]                Table Length : 000001A4
[008h 0008 001h]                    Revision : 02
[009h 0009 001h]                    Checksum : 1F
[00Ah 0010 006h]                      Oem ID : "AMD  "
[010h 0016 008h]                Oem Table ID : "AmdTable"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMD "
[020h 0032 004h]       Asl Compiler Revision : 00000000

[024h 0036 004h]         Virtualization Info : 00203041
[028h 0040 008h]                    Reserved : 0000000000000000

[030h 0048 001h]               Subtable Type : 10 [Hardware Definition Block (IVHD)]
[031h 0049 001h]       Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[032h 0050 002h]                      Length : 0048
[034h 0052 002h]                    DeviceId : 0002
[036h 0054 002h]           Capability Offset : 0040
[038h 0056 008h]                Base Address : 00000000FD300000
[040h 0064 002h]           PCI Segment Group : 0000
[042h 0066 002h]         Virtualization Info : 0000
[044h 0068 004h]           Feature Reporting : 80048F6F

[048h 0072 001h]               Subtable Type : 03 [Device Entry: Start of Range]
[049h 0073 002h]                   Device ID : 0008
[04Bh 0075 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[04Ch 0076 001h]               Subtable Type : 04 [Device Entry: End of Range]
[04Dh 0077 002h]                   Device ID : FFFE
[04Fh 0079 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[050h 0080 001h]               Subtable Type : 43 [Device Entry: Alias Start of Range]
[051h 0081 002h]                   Device ID : FF00
[053h 0083 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[054h 0084 001h]                    Reserved : 00
[055h 0085 002h]       Source Used Device ID : 00A5
[057h 0087 001h]                    Reserved : 00

[058h 0088 001h]               Subtable Type : 04 [Device Entry: End of Range]
[059h 0089 002h]                   Device ID : FFFF
[05Bh 0091 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[05Ch 0092 001h]               Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[05Dh 0093 002h]                   Device ID : 0000
[05Fh 0095 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[060h 0096 001h]               Subtable Type : 48 [Device Entry: Special Device]
[061h 0097 002h]                   Device ID : 0000
[063h 0099 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[064h 0100 001h]                      Handle : 00
[065h 0101 002h]       Source Used Device ID : 00A0
[067h 0103 001h]                     Variety : 02

[068h 0104 001h]               Subtable Type : 48 [Device Entry: Special Device]
[069h 0105 002h]                   Device ID : 0000
[06Bh 0107 001h] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[06Ch 0108 001h]                      Handle : 21
[06Dh 0109 002h]       Source Used Device ID : 00A0
[06Fh 0111 001h]                     Variety : 01

[070h 0112 001h]               Subtable Type : 48 [Device Entry: Special Device]
[071h 0113 002h]                   Device ID : 0000
[073h 0115 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[074h 0116 001h]                      Handle : 22
[075h 0117 002h]       Source Used Device ID : 0001
[077h 0119 001h]                     Variety : 01

[078h 0120 001h]               Subtable Type : 11 [Hardware Definition Block (IVHD)]
[079h 0121 001h]       Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[07Ah 0122 002h]                      Length : 0058
[07Ch 0124 002h]                    DeviceId : 0002
[07Eh 0126 002h]           Capability Offset : 0040
[080h 0128 008h]                Base Address : 00000000FD300000
[088h 0136 002h]           PCI Segment Group : 0000
[08Ah 0138 002h]         Virtualization Info : 0000
[08Ch 0140 004h]                  Attributes : 00040200
[090h 0144 008h]                   EFR Image : 206D73EF22254ADE
[098h 0152 008h]                    Reserved : 0000000000000000

[0A0h 0160 001h]               Subtable Type : 03 [Device Entry: Start of Range]
[0A1h 0161 002h]                   Device ID : 0008
[0A3h 0163 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A4h 0164 001h]               Subtable Type : 04 [Device Entry: End of Range]
[0A5h 0165 002h]                   Device ID : FFFE
[0A7h 0167 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A8h 0168 001h]               Subtable Type : 43 [Device Entry: Alias Start of Range]
[0A9h 0169 002h]                   Device ID : FF00
[0ABh 0171 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0ACh 0172 001h]                    Reserved : 00
[0ADh 0173 002h]       Source Used Device ID : 00A5
[0AFh 0175 001h]                    Reserved : 00

[0B0h 0176 001h]               Subtable Type : 04 [Device Entry: End of Range]
[0B1h 0177 002h]                   Device ID : FFFF
[0B3h 0179 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B4h 0180 001h]               Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[0B5h 0181 002h]                   Device ID : 0000
[0B7h 0183 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B8h 0184 001h]               Subtable Type : 48 [Device Entry: Special Device]
[0B9h 0185 002h]                   Device ID : 0000
[0BBh 0187 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0BCh 0188 001h]                      Handle : 00
[0BDh 0189 002h]       Source Used Device ID : 00A0
[0BFh 0191 001h]                     Variety : 02

[0C0h 0192 001h]               Subtable Type : 48 [Device Entry: Special Device]
[0C1h 0193 002h]                   Device ID : 0000
[0C3h 0195 001h] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[0C4h 0196 001h]                      Handle : 21
[0C5h 0197 002h]       Source Used Device ID : 00A0
[0C7h 0199 001h]                     Variety : 01

[0C8h 0200 001h]               Subtable Type : 48 [Device Entry: Special Device]
[0C9h 0201 002h]                   Device ID : 0000
[0CBh 0203 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0CCh 0204 001h]                      Handle : 22
[0CDh 0205 002h]       Source Used Device ID : 0001
[0CFh 0207 001h]                     Variety : 01

[0D0h 0208 001h]               Subtable Type : 40 [Hardware Definition Block - Mixed Format (IVHD)]
[0D1h 0209 001h]       Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[0D2h 0210 002h]                      Length : 00D4
[0D4h 0212 002h]                    DeviceId : 0002
[0D6h 0214 002h]           Capability Offset : 0040
[0D8h 0216 008h]                Base Address : 00000000FD300000
[0E0h 0224 002h]           PCI Segment Group : 0000
[0E2h 0226 002h]         Virtualization Info : 0000
[0E4h 0228 004h]                  Attributes : 00040200
[0E8h 0232 008h]                   EFR Image : 206D73EF22254ADE
[0F0h 0240 008h]                    Reserved : 0000000000000000

[0F8h 0248 001h]               Subtable Type : 03 [Device Entry: Start of Range]
[0F9h 0249 002h]                   Device ID : 0008
[0FBh 0251 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0FCh 0252 001h]               Subtable Type : 04 [Device Entry: End of Range]
[0FDh 0253 002h]                   Device ID : FFFE
[0FFh 0255 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[100h 0256 001h]               Subtable Type : 43 [Device Entry: Alias Start of Range]
[101h 0257 002h]                   Device ID : FF00
[103h 0259 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[104h 0260 001h]                    Reserved : 00
[105h 0261 002h]       Source Used Device ID : 00A5
[107h 0263 001h]                    Reserved : 00

[108h 0264 001h]               Subtable Type : 04 [Device Entry: End of Range]
[109h 0265 002h]                   Device ID : FFFF
[10Bh 0267 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[10Ch 0268 001h]               Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[10Dh 0269 002h]                   Device ID : 0000
[10Fh 0271 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[110h 0272 001h]               Subtable Type : 48 [Device Entry: Special Device]
[111h 0273 002h]                   Device ID : 0000
[113h 0275 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[114h 0276 001h]                      Handle : 00
[115h 0277 002h]       Source Used Device ID : 00A0
[117h 0279 001h]                     Variety : 02

[118h 0280 001h]               Subtable Type : 48 [Device Entry: Special Device]
[119h 0281 002h]                   Device ID : 0000
[11Bh 0283 001h] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[11Ch 0284 001h]                      Handle : 21
[11Dh 0285 002h]       Source Used Device ID : 00A0
[11Fh 0287 001h]                     Variety : 01

[120h 0288 001h]               Subtable Type : 48 [Device Entry: Special Device]
[121h 0289 002h]                   Device ID : 0000
[123h 0291 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[124h 0292 001h]                      Handle : 22
[125h 0293 002h]       Source Used Device ID : 0001
[127h 0295 001h]                     Variety : 01

[128h 0296 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[129h 0297 002h]                   Device ID : 00A5
[12Bh 0299 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[12Ch 0300 008h]                    ACPI HID : "AMDI0020"
[134h 0308 008h]                    ACPI CID : 0000000000000000
[13Ch 0316 001h]                  UID Format : 02
[13Dh 0317 001h]                  UID Length : 09
[13Eh 0318 009h]                         UID : "\_SB.FUR0"

[147h 0327 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[148h 0328 002h]                   Device ID : 00A5
[14Ah 0330 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[14Bh 0331 008h]                    ACPI HID : "AMDI0020"
[153h 0339 008h]                    ACPI CID : 0000000000000000
[15Bh 0347 001h]                  UID Format : 02
[15Ch 0348 001h]                  UID Length : 09
[15Dh 0349 009h]                         UID : "\_SB.FUR1"

[166h 0358 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[167h 0359 002h]                   Device ID : 00A5
[169h 0361 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[16Ah 0362 008h]                    ACPI HID : "AMDI0020"
[172h 0370 008h]                    ACPI CID : 0000000000000000
[17Ah 0378 001h]                  UID Format : 02
[17Bh 0379 001h]                  UID Length : 09
[17Ch 0380 009h]                         UID : "\_SB.FUR2"

[185h 0389 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[186h 0390 002h]                   Device ID : 00A5
[188h 0392 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[189h 0393 008h]                    ACPI HID : "AMDI0020"
[191h 0401 008h]                    ACPI CID : 0000000000000000
[199h 0409 001h]                  UID Format : 02
[19Ah 0410 001h]                  UID Length : 09
[19Bh 0411 009h]                         UID : "\_SB.FUR3"

Raw Table Data: Length 420 (0x1A4)

    0000: 49 56 52 53 A4 01 00 00 02 1F 41 4D 44 20 20 00  // IVRS......AMD  .
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 00 00 00 00 41 30 20 00 00 00 00 00 00 00 00 00  // ....A0 .........
    0030: 10 B0 48 00 02 00 40 00 00 00 30 FD 00 00 00 00  // ..H...@...0.....
    0040: 00 00 00 00 6F 8F 04 80 03 08 00 00 04 FE FF 00  // ....o...........
    0050: 43 00 FF 00 00 A5 00 00 04 FF FF 00 00 00 00 00  // C...............
    0060: 48 00 00 00 00 A0 00 02 48 00 00 D7 21 A0 00 01  // H.......H...!...
    0070: 48 00 00 00 22 01 00 01 11 B0 58 00 02 00 40 00  // H...".....X...@.
    0080: 00 00 30 FD 00 00 00 00 00 00 00 00 00 02 04 00  // ..0.............
    0090: DE 4A 25 22 EF 73 6D 20 00 00 00 00 00 00 00 00  // .J%".sm ........
    00A0: 03 08 00 00 04 FE FF 00 43 00 FF 00 00 A5 00 00  // ........C.......
    00B0: 04 FF FF 00 00 00 00 00 48 00 00 00 00 A0 00 02  // ........H.......
    00C0: 48 00 00 D7 21 A0 00 01 48 00 00 00 22 01 00 01  // H...!...H..."...
    00D0: 40 B0 D4 00 02 00 40 00 00 00 30 FD 00 00 00 00  // @.....@...0.....
    00E0: 00 00 00 00 00 02 04 00 DE 4A 25 22 EF 73 6D 20  // .........J%".sm 
    00F0: 00 00 00 00 00 00 00 00 03 08 00 00 04 FE FF 00  // ................
    0100: 43 00 FF 00 00 A5 00 00 04 FF FF 00 00 00 00 00  // C...............
    0110: 48 00 00 00 00 A0 00 02 48 00 00 D7 21 A0 00 01  // H.......H...!...
    0120: 48 00 00 00 22 01 00 01 F0 A5 00 40 41 4D 44 49  // H..."......@AMDI
    0130: 30 30 32 30 00 00 00 00 00 00 00 00 02 09 5C 5F  // 0020..........\_
    0140: 53 42 2E 46 55 52 30 F0 A5 00 40 41 4D 44 49 30  // SB.FUR0...@AMDI0
    0150: 30 32 30 00 00 00 00 00 00 00 00 02 09 5C 5F 53  // 020..........\_S
    0160: 42 2E 46 55 52 31 F0 A5 00 40 41 4D 44 49 30 30  // B.FUR1...@AMDI00
    0170: 32 30 00 00 00 00 00 00 00 00 02 09 5C 5F 53 42  // 20..........\_SB
    0180: 2E 46 55 52 32 F0 A5 00 40 41 4D 44 49 30 30 32  // .FUR2...@AMDI002
    0190: 30 00 00 00 00 00 00 00 00 02 09 5C 5F 53 42 2E  // 0..........\_SB.
    01A0: 46 55 52 33                                      // FUR3


MCFG
----
[000h 0000 004h]                   Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004 004h]                Table Length : 0000003C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 7D
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "Notebook"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "MSFT"
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 008h]                    Reserved : 0000000000000000

[02Ch 0044 008h]                Base Address : 00000000F0000000
[034h 0052 002h]        Segment Group Number : 0000
[036h 0054 001h]            Start Bus Number : 00
[037h 0055 001h]              End Bus Number : 7F
[038h 0056 004h]                    Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 7D 5F 41 53 55 53 5F  // MCFG<....}_ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 4D 53 46 54  // Notebook. ..MSFT
    0020: 13 00 01 00 00 00 00 00 00 00 00 00 00 00 00 F0  // ................
    0030: 00 00 00 00 00 00 00 7F 00 00 00 00              // ............


MSDM
----
[000h 0000 004h]                   Signature : "MSDM"    [Microsoft Data Management Table]
[004h 0004 004h]                Table Length : 00000055
[008h 0008 001h]                    Revision : 03
[009h 0009 001h]                    Checksum : 14
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "Notebook"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "ASUS"
[020h 0032 004h]       Asl Compiler Revision : 00000001

[024h 0036 031h] Software Licensing Structure : 4D 53 44 4D 55 00 00 00 03 14 5F 41 53 55 53 5F /* MSDMU....._ASUS_ */\
/* 034h 0052  16 */                            4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 53 55 53 /* Notebook. ..ASUS */\
/* 044h 0068  16 */                            01 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 /* ................ */\
/* 054h 0084   1 */                            00                                              /* . */\

Raw Table Data: Length 85 (0x55)

    0000: 4D 53 44 4D 55 00 00 00 03 14 5F 41 53 55 53 5F  // MSDMU....._ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 53 55 53  // Notebook. ..ASUS
    0020: 01 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00  // ................
    0030: 00 00 00 00 1D 00 00 00 51 4E 36 56 36 2D 37 57  // ........QN6V6-7W
    0040: 4A 59 37 2D 32 58 48 39 4D 2D 59 43 47 32 47 2D  // JY7-2XH9M-YCG2G-
    0050: 56 36 44 50 4A                                   // V6DPJ


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AmdTable", 0x00000001)
{
    External (_SB_.PCI0, DeviceObj)

    Scope (\_SB.PCI0)
    {
        Device (P010)
        {
            Name (_ADR, 0x00010000)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P020)
        {
            Name (_ADR, 0x00020000)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P080)
        {
            Name (_ADR, 0x00080000)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P180)
        {
            Name (_ADR, 0x00180000)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P181)
        {
            Name (_ADR, 0x00180001)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P182)
        {
            Name (_ADR, 0x00180002)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P183)
        {
            Name (_ADR, 0x00180003)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P184)
        {
            Name (_ADR, 0x00180004)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P185)
        {
            Name (_ADR, 0x00180005)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P186)
        {
            Name (_ADR, 0x00180006)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P187)
        {
            Name (_ADR, 0x00180007)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }
    }
}



SSDT10
------
DefinitionBlock ("", "SSDT", 1, "AMD", "AmdTable", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.FANF, UnknownObj)
    External (_SB_.GGOV, MethodObj)    // 1 Arguments
    External (_SB_.MACO, BuffFieldObj)
    External (_SB_.PCI0.GPP0, DeviceObj)
    External (_SB_.PCI0.GPP0.SWUS, DeviceObj)
    External (_SB_.PCI0.GPP0.SWUS.SWDS, DeviceObj)
    External (_SB_.PCI0.SBRG.EC0_.BRAH, UnknownObj)
    External (_SB_.PCI0.SBRG.EC0_.CMUT, MutexObj)
    External (_SB_.PCI0.SBRG.EC0_.CNTD, UnknownObj)
    External (_SB_.PCI0.SBRG.EC0_.ECPU, UnknownObj)
    External (_SB_.PCI0.SBRG.EC0_.EGPT, UnknownObj)
    External (_SB_.PCI0.SBRG.EC0_.STCC, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.SBRG.EC0_.WEBC, MethodObj)    // 3 Arguments
    External (_SB_.PLTF.P000, DeviceObj)
    External (_SB_.PLTF.P001, DeviceObj)
    External (_SB_.PLTF.P002, DeviceObj)
    External (_SB_.PLTF.P003, DeviceObj)
    External (_SB_.PLTF.P004, DeviceObj)
    External (_SB_.PLTF.P005, DeviceObj)
    External (_SB_.PLTF.P006, DeviceObj)
    External (_SB_.PLTF.P007, DeviceObj)
    External (_SB_.PLTF.P008, DeviceObj)
    External (_SB_.PLTF.P009, DeviceObj)
    External (_SB_.PLTF.P00A, DeviceObj)
    External (_SB_.PLTF.P00B, DeviceObj)
    External (_SB_.PLTF.P00C, DeviceObj)
    External (_SB_.PLTF.P00D, DeviceObj)
    External (_SB_.PLTF.P00E, DeviceObj)
    External (_SB_.PLTF.P00F, DeviceObj)
    External (_SB_.SGOV, MethodObj)    // 2 Arguments
    External (IOBS, UnknownObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M009, MethodObj)    // 1 Arguments
    External (M010, MethodObj)    // 2 Arguments
    External (M013, MethodObj)    // 4 Arguments
    External (M014, MethodObj)    // 5 Arguments
    External (M017, MethodObj)    // 6 Arguments
    External (M018, MethodObj)    // 7 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M020, MethodObj)    // 5 Arguments
    External (M021, MethodObj)    // 4 Arguments
    External (M023, MethodObj)    // 3 Arguments
    External (M024, MethodObj)    // 3 Arguments
    External (M025, MethodObj)    // 4 Arguments
    External (M026, MethodObj)    // 3 Arguments
    External (M027, MethodObj)    // 3 Arguments
    External (M028, MethodObj)    // 4 Arguments
    External (M037, DeviceObj)
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M04A, MethodObj)    // 2 Arguments
    External (M04B, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M112, MethodObj)    // 2 Arguments
    External (M113, MethodObj)    // 1 Arguments
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M275, MethodObj)    // 2 Arguments
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M402, MethodObj)    // 2 Arguments
    External (M403, MethodObj)    // 3 Arguments
    External (M404, DeviceObj)
    External (M414, FieldUnitObj)
    External (M429, MethodObj)    // 7 Arguments
    External (M430, MethodObj)    // 3 Arguments
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)

    Scope (\)
    {
        Name (GPUF, One)
        Name (FINT, 0xFF)
    }

    Scope (\_SB.PCI0.GPP0)
    {
        Name (M236, Buffer (0x0C)
        {
            /* 0000 */  0x04, 0x01, 0x01, 0x01, 0x43, 0x10, 0xA2, 0x1B,  // ....C...
            /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (M266, Zero)
        Name (M267, Zero)
        Name (M268, Zero)
        Name (M269, Zero)
        Name (M270, Zero)
        Name (M271, Zero)
        Name (M407, One)
        Name (M442, 0x00010000)
        Name (M443, Zero)
        Name (M434, 0x2711)
        Name (M350, Buffer (0x18)
        {
            /* 0000 */  0x07, 0x00, 0x10, 0x00, 0x00, 0x01, 0x01, 0x00,  // ........
            /* 0008 */  0x00, 0xFB, 0x00, 0xFC, 0x01, 0xB0, 0xF1, 0xC1,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Name (M351, Buffer (0x18)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Name (M352, Buffer (0x18)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Name (M353, Buffer (0x18)
        {
            /* 0000 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x0C, 0x00, 0x00, 0xC0, 0x01, 0xF0, 0x00, 0x00,  // ........
            /* 0010 */  0xDE, 0x10, 0x97, 0x1F, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Name (M354, Buffer (0x18)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Name (M355, Buffer (0x18)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Name (M356, Buffer (0x18)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Name (M357, Buffer (0x18)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Name (M358, Buffer (0x18)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Method (M371, 5, NotSerialized)
        {
            CreateDWordField (Arg3, Zero, M365)
            CreateDWordField (Arg3, 0x04, M366)
            CreateDWordField (Arg3, 0x08, M367)
            CreateDWordField (Arg3, 0x0C, M368)
            CreateDWordField (Arg3, 0x10, M369)
            CreateDWordField (Arg3, 0x14, M370)
            If ((Arg4 < 0x02))
            {
                If ((Arg4 == Zero))
                {
                    M365 = M019 (Arg0, Arg1, Arg2, 0x04)
                    M366 = M019 (Arg0, Arg1, Arg2, 0x18)
                    M367 = M019 (Arg0, Arg1, Arg2, 0x20)
                    M368 = M019 (Arg0, Arg1, Arg2, 0x24)
                    M369 = M019 (Arg0, Arg1, Arg2, 0x28)
                    M370 = M019 (Arg0, Arg1, Arg2, 0x2C)
                }
                Else
                {
                    M365 = M019 (Arg0, Arg1, Arg2, 0x04)
                    M366 = M019 (Arg0, Arg1, Arg2, 0x18)
                    M367 = M019 (Arg0, Arg1, Arg2, 0x1C)
                    M368 = M019 (Arg0, Arg1, Arg2, 0x24)
                    M369 = M019 (Arg0, Arg1, Arg2, Zero)
                    M370 = Arg0
                }
            }
            Else
            {
                If (((Arg4 & One) == Zero))
                {
                    M020 (Arg0, Arg1, Arg2, 0x18, M366)
                    M020 (Arg0, Arg1, Arg2, 0x20, M367)
                    M020 (Arg0, Arg1, Arg2, 0x24, M368)
                    M020 (Arg0, Arg1, Arg2, 0x28, M369)
                    M020 (Arg0, Arg1, Arg2, 0x2C, M370)
                }
                Else
                {
                    M020 (Arg0, Arg1, Arg2, 0x18, M366)
                    M020 (Arg0, Arg1, Arg2, 0x1C, M367)
                    M020 (Arg0, Arg1, Arg2, 0x24, M368)
                }

                If (((Arg4 & 0x04) == 0x04))
                {
                    M020 (Arg0, Arg1, Arg2, 0x04, (M365 & 0x06FFFFFF))
                }
                Else
                {
                    Local0 = M019 (Arg0, Arg1, Arg2, 0x04)
                    M020 (Arg0, Arg1, Arg2, 0x04, ((Local0 & 0x06FFFFF8) | 0x02))
                }
            }
        }

        Method (M372, 0, NotSerialized)
        {
            CreateDWordField (M353, 0x10, M362)
            Local0 = Zero
            If (((M362 & 0xFFDF) == 0x1002))
            {
                Local1 = (M362 >> 0x10)
                Local1 &= 0xFFFF
                If (((Local1 >= 0x67C0) && (Local1 <= 0x67DF)))
                {
                    Local0 = 0x10
                }
                ElseIf (((Local1 >= 0x67E0) && (Local1 <= 0x67FF)))
                {
                    Local0 = 0x11
                }
                ElseIf (((Local1 >= 0x6900) && (Local1 <= 0x695F)))
                {
                    Local0 = 0x12
                }
                ElseIf (((Local1 >= 0x6980) && (Local1 <= 0x699F)))
                {
                    Local0 = 0x13
                }
                ElseIf (((Local1 >= 0x6860) && (Local1 <= 0x687F)))
                {
                    Local0 = 0x20
                }
                ElseIf (((Local1 >= 0x69A0) && (Local1 <= 0x69BF)))
                {
                    Local0 = 0x21
                }
                ElseIf (((Local1 >= 0x7310) && (Local1 <= 0x731F)))
                {
                    Local0 = 0x22
                }
                ElseIf ((Local1 == 0x7330))
                {
                    Local0 = 0x22
                }
                ElseIf (((Local1 >= 0x7340) && (Local1 <= 0x734F)))
                {
                    Local0 = 0x23
                }
                ElseIf (((Local1 >= 0x73A0) && (Local1 <= 0x73BF)))
                {
                    Local0 = 0x24
                }
                ElseIf (((Local1 >= 0x73C0) && (Local1 <= 0x73DF)))
                {
                    Local0 = 0x26
                }
                ElseIf (((Local1 >= 0x73E0) && (Local1 <= 0x73FF)))
                {
                    Local0 = 0x27
                }
                ElseIf (((Local1 >= 0x7420) && (Local1 <= 0x743F)))
                {
                    Local0 = 0x28
                }
                Else
                {
                    Local0 = Zero
                }
            }
            ElseIf (((M362 & 0xFFFF) == 0x10DE))
            {
                Local0 = 0xC0
            }

            Return (Local0)
        }

        Method (M373, 3, NotSerialized)
        {
            CreateDWordField (M350, 0x04, M359)
            CreateDWordField (M351, 0x04, M360)
            CreateDWordField (M352, 0x04, M361)
            M354 = M358 /* \_SB_.PCI0.GPP0.M358 */
            M355 = M358 /* \_SB_.PCI0.GPP0.M358 */
            M356 = M358 /* \_SB_.PCI0.GPP0.M358 */
            M357 = M358 /* \_SB_.PCI0.GPP0.M358 */
            M371 (Arg0, Arg1, Arg2, M354, Zero)
            M020 (Arg0, Arg1, Arg2, 0x18, M359)
            Local0 = (M359 >> 0x08)
            Local0 &= 0xFF
            If ((M360 != Zero))
            {
                M371 (Local0, Zero, Zero, M355, Zero)
                M020 (Local0, Zero, Zero, 0x18, M360)
                Local0 = (M360 >> 0x08)
                Local0 &= 0xFF
            }

            If (((M360 != Zero) && (M361 != Zero)))
            {
                M371 (Local0, Zero, Zero, M356, Zero)
                M020 (Local0, Zero, Zero, 0x18, M361)
                Local0 = (M361 >> 0x08)
                Local0 &= 0xFF
            }

            M371 (Local0, Zero, Zero, M357, One)
        }

        Method (M374, 3, NotSerialized)
        {
            CreateDWordField (M350, 0x04, M359)
            CreateDWordField (M351, 0x04, M360)
            CreateDWordField (M352, 0x04, M361)
            M371 (Arg0, Arg1, Arg2, M350, 0x02)
            Local0 = (M359 >> 0x08)
            Local0 &= 0xFF
            If ((M360 != Zero))
            {
                M371 (Local0, Zero, Zero, M351, 0x02)
                Local0 = (M360 >> 0x08)
                Local0 &= 0xFF
            }

            If (((M360 != Zero) && (M361 != Zero)))
            {
                M371 (Local0, Zero, Zero, M352, 0x02)
                Local0 = (M361 >> 0x08)
                Local0 &= 0xFF
            }

            M371 (Local0, Zero, Zero, M353, 0x03)
        }

        Method (M375, 0, Serialized)
        {
            CreateQWordField (M353, 0x04, M363)
            CreateDWordField (M353, 0x0C, M364)
            Local0 = M372 ()
            If (((Local0 >= Zero) && (Local0 <= 0x0F)))
            {
                M232 (M097, Zero, 0x10)
            }
            ElseIf (((Local0 >= 0x10) && (Local0 <= 0x1F)))
            {
                Local2 = M013 ((M364 & 0xFFFFFFF0), 0x5418, Zero, 0x20)
                M014 ((M364 & 0xFFFFFFF0), 0x5418, Zero, 0x20, (Local2 & 0xFFFFFFFD))
            }
            ElseIf (((Local0 >= 0x20) && (Local0 <= 0xBF)))
            {
                Local2 = M013 ((M364 & 0xFFFFFFF0), 0x34E0, Zero, 0x20)
                M014 ((M364 & 0xFFFFFFF0), 0x34E0, Zero, 0x20, (Local2 & 0xEFFFFFFF))
            }
        }

        Method (M424, 0, Serialized)
        {
            CreateDWordField (M353, 0x0C, M364)
            Local0 = M372 ()
            If (((Local0 >= 0x22) && (Local0 <= 0xBF)))
            {
                Local0 = (M364 & 0xFFFFFFF0)
                Local1 = M013 (Local0, 0x0005818C, Zero, 0x20)
                Local2 = 0x4EEA
                While (((Local2 > Zero) && ((Local1 & 0x80000000) != 0x80000000)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x63)
                    Local1 = M013 (Local0, 0x0005818C, Zero, 0x20)
                }

                M014 (Local0, 0x0005818C, Zero, 0x20, 0x01000000)
                Local1 = M013 (Local0, 0x0005818C, Zero, 0x20)
                Local2 = 0x4EEA
                While (((Local2 > Zero) && ((Local1 & 0x80000000) != 0x80000000)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x63)
                    Local1 = M013 (Local0, 0x0005818C, Zero, 0x20)
                }

                If (((Local2 > Zero) && ((Local1 & 0xFFFF) == Zero)))
                {
                    If ((M013 (Local0, 0x00058190, Zero, 0x20) == One))
                    {
                        M014 (Local0, 0x0005818C, Zero, 0x20, 0x00400000)
                        Local1 = M013 (Local0, 0x0005818C, Zero, 0x20)
                        Local2 = 0x4EEA
                        While (((Local2 > Zero) && ((Local1 & 0x80000000) != 0x80000000)))
                        {
                            Local2 = (Local2 - One)
                            Stall (0x63)
                            Local1 = M013 (Local0, 0x0005818C, Zero, 0x20)
                        }
                    }
                }
            }
        }

        Method (M376, 0, Serialized)
        {
            CreateByteField (M236, 0x03, M245)
            CreateDWordField (M236, 0x04, M246)
            CreateDWordField (M236, 0x08, M247)
            Local0 = M372 ()
            If (((Local0 >= Zero) && (Local0 <= 0xBF)))
            {
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                M020 (M245, Zero, Zero, 0x4C, M246)
                Local1 = M019 (M245, Zero, One, Zero)
                If (((Local1 != Local2) && (M247 != Local2)))
                {
                    M020 (M245, Zero, One, 0x4C, M247)
                }
            }

            If (((Local0 >= Zero) && (Local0 <= 0xC0)))
            {
                M020 (M245, Zero, Zero, 0x40, M246)
            }
        }

        Method (M377, 3, NotSerialized)
        {
            CreateByteField (M236, 0x03, M245)
            CreateDWordField (M350, 0x04, M359)
            CreateDWordField (M351, 0x04, M360)
            CreateDWordField (M352, 0x04, M361)
            M371 (M245, Zero, Zero, M357, 0x05)
            If (((M360 != Zero) && (M361 != Zero)))
            {
                Local0 = (M360 >> 0x08)
                Local0 &= 0xFF
                M371 (Local0, Zero, Zero, M356, 0x04)
            }

            If ((M360 != Zero))
            {
                Local0 = (M359 >> 0x08)
                Local0 &= 0xFF
                M371 (Local0, Zero, Zero, M355, 0x04)
            }

            M371 (Arg0, Arg1, Arg2, M354, 0x04)
        }

        Method (M439, 3, NotSerialized)
        {
            Local6 = 0x7FFFFFFF
            Local6 |= 0x80000000
            Local1 = M019 (Arg0, Arg1, Arg2, 0x54)
            M020 (Arg0, Arg1, Arg2, 0x54, (Local1 & 0xFFFF7FFC))
            Local2 = M017 (Arg0, Arg1, Arg2, 0x19, Zero, 0x08)
            Local4 = One
            Local5 = 0x28
            While ((Local4 && Local5))
            {
                Local0 = M019 (Local2, Zero, Zero, Zero)
                If ((Local0 != Local6))
                {
                    Local0 = M372 ()
                    If (((Local0 >= Zero) && (Local0 <= 0xBF)))
                    {
                        M373 (Arg0, Arg1, Arg2)
                        M374 (Arg0, Arg1, Arg2)
                        If ((M097 != Zero))
                        {
                            M375 ()
                        }

                        If ((M443 != Zero))
                        {
                            M376 ()
                        }

                        If ((((M049 (M128, 0x66) >> One) & One) == One))
                        {
                            M424 ()
                        }

                        M377 (Arg0, Arg1, Arg2)
                    }

                    If (((Local0 >= Zero) && (Local0 == 0xC0)))
                    {
                        M373 (Zero, Arg1, Arg2)
                        M374 (Zero, Arg1, Arg2)
                        M376 ()
                        M377 (Zero, Arg1, Arg2)
                    }

                    Local4 = Zero
                }
                Else
                {
                    Sleep (0x19)
                    Local5--
                }
            }

            \_SB.PCI0.GPP0.LREN = \_SB.PCI0.GPP0.PEGP.LTRE
            M020 (Arg0, Arg1, Arg2, 0x54, (Local1 & 0xFFFF7FFF))
        }

        Mutex (EEBC, 0x00)
        Method (M241, 1, NotSerialized)
        {
            Acquire (EEBC, 0xFFFF)
            CreateByteField (M236, Zero, M242)
            CreateByteField (M236, One, M243)
            CreateByteField (M236, 0x02, M244)
            CreateByteField (M236, 0x03, M245)
            CreateDWordField (M236, 0x04, M246)
            CreateDWordField (M236, 0x08, M247)
            Name (M272, Zero)
            Name (M273, Zero)
            Name (M274, Zero)
            Name (M400, Zero)
            Name (M427, Zero)
            Name (M431, Zero)
            If ((M085 >= 0x08))
            {
                M400 = ((M049 (M128, 0x66) >> Zero) & One)
            }

            M273 = ((M049 (M128, 0x65) >> 0x05) & One)
            M274 = ((M049 (M128, 0x65) >> 0x06) & One)
            M427 = ((M049 (M128, 0x66) >> 0x02) & One)
            M431 = ((M049 (M128, 0x66) >> 0x03) & One)
            If ((M273 != One))
            {
                Local7 = Buffer (0x05){}
                CreateWordField (Local7, Zero, M197)
                CreateField (Local7, 0x10, 0x03, M200)
                CreateField (Local7, 0x13, 0x05, M199)
                CreateByteField (Local7, 0x03, M198)
                CreateByteField (Local7, 0x04, M201)
                M197 = 0x05
                M198 = Zero
                Local0 = M243 /* \_SB_.PCI0.GPP0.M241.M243 */
                M199 = Local0
                Local0 = M244 /* \_SB_.PCI0.GPP0.M241.M244 */
                M200 = Local0
            }

            Name (M447, Zero)
            If (((M085 == 0x09) || (M085 == 0x0A)))
            {
                M447 = One
            }
            ElseIf (((M085 == 0x0D) || (M085 == 0x0E)))
            {
                M447 = One
            }
            ElseIf ((M085 == 0x0F))
            {
                M447 = One
            }

            Local3 = Buffer (0x08){}
            CreateWordField (Local3, Zero, M254)
            CreateByteField (Local3, 0x02, M255)
            CreateDWordField (Local3, 0x03, M256)
            M254 = 0x07
            M255 = 0x10
            M443 = M049 (M133, 0x01E0)
            M442 = M04B (M133, 0x01DC)
            If ((M442 == Zero))
            {
                If ((\_SB.PCI0.GPP0.M434 <= 0x2710))
                {
                    M442 = \_SB.PCI0.GPP0.M434
                    M256 = M442 /* \_SB_.PCI0.GPP0.M442 */
                    Local0 = M255 /* \_SB_.PCI0.GPP0.M241.M255 */
                    M255 = 0x12
                    \_SB.ALIB (0x0C, Local3)
                    M255 = Local0
                }
            }

            If ((M431 == One))
            {
                M439 (Zero, M243, M244)
                Release (EEBC)
                Return (Zero)
            }

            M266 = M04A (M133, 0x01D4)
            M267 = M04A (M133, 0x01D6)
            M268 = M049 (M133, 0x01D8)
            M269 = M049 (M133, 0x01D9)
            M270 = M049 (M133, 0x01DA)
            M271 = M049 (M133, 0x01DB)
            Local0 = ((M084 + 0x1502) + ((M266 & 0xFF) * 0x04
                ))
            OperationRegion (VAMM, SystemMemory, Local0, One)
            Field (VAMM, ByteAcc, NoLock, Preserve)
            {
                P011,   8
            }

            Local0 = ((M084 + 0x1502) + ((M267 & 0xFF) * 0x04
                ))
            OperationRegion (VANN, SystemMemory, Local0, One)
            Field (VANN, ByteAcc, NoLock, Preserve)
            {
                P141,   8
            }

            If ((M274 == One))
            {
                Local6 = One
            }
            Else
            {
                Local6 = M113 (M242)
            }

            Local6 = One
            M023 (Zero, M243, M244)
            If ((M275 (M242, Arg0) == Zero))
            {
                If ((Arg0 && Local6))
                {
                    M000 (0x9D)
                    If (CondRefOf (\_SB.MACO))
                    {
                        If ((\_SB.MACO == One))
                        {
                            If ((M267 < 0x0100))
                            {
                                P141 = 0xC4
                            }
                            Else
                            {
                                M010 (M267, One)
                            }

                            Sleep (M270)
                            M112 (M242, One)
                            Sleep (M271)
                            If ((M266 < 0x0100))
                            {
                                P011 = 0x84
                            }
                            Else
                            {
                                M010 (M266, Zero)
                            }

                            \_SB.MACO = Zero
                        }
                        Else
                        {
                            M010 (0x0C, Zero)
                            While ((M009 (0x54) != One)){}
                            Sleep (0x64)
                            M010 (0x45, One)
                            Sleep (0x64)
                        }
                    }
                    Else
                    {
                        M010 (0x45, Zero)
                        M010 (0x0C, Zero)
                        While ((M009 (0x54) != One)){}
                        Sleep (0x64)
                        M010 (0x45, One)
                        Sleep (0x64)
                    }

                    Local1 = M049 (M133, 0x01F1)
                    If ((Local1 == Zero))
                    {
                        Local1 = 0x0A
                    }

                    Sleep (Local1)
                    If ((M400 == One))
                    {
                        M403 (M243, M244, One)
                    }

                    M000 (0x9E)
                    M272 = One
                    If ((M273 == One))
                    {
                        If ((M400 == Zero))
                        {
                            Local1 = M017 (Zero, M243, M244, 0x68, Zero, 0x08)
                            M018 (Zero, M243, M244, 0x68, Zero, 0x08, (Local1 & 0xEF))
                            Sleep (0x18)
                            Local1 = M025 (Zero, M243, M244, Zero)
                        }

                        Local1 = Zero
                        Local2 = 0x13BB
                        While ((((Local1 & 0x28) != 0x20) && (Local2 > Zero)))
                        {
                            M000 (0xC0)
                            Local1 = M017 (Zero, M243, M244, 0x6B, Zero, 0x08)
                            Local2 = (Local2 - One)
                            Stall (0x63)
                        }
                    }
                    Else
                    {
                        Sleep (0x14)
                        M201 = One
                        Local6 = \_SB.ALIB (0x06, Local7)
                        If ((M085 < 0x08))
                        {
                            M272 = Zero
                            Local2 = Zero
                            While ((Local2 < 0x0F))
                            {
                                M023 (Zero, M243, M244)
                                Local4 = One
                                Local5 = 0xC8
                                While ((Local4 && Local5))
                                {
                                    Local0 = M021 (Zero, M243, M244, 0xA5)
                                    Local0 &= 0x7F
                                    If (((Local0 >= 0x10) && (Local0 != 0x7F)))
                                    {
                                        Local4 = Zero
                                    }
                                    Else
                                    {
                                        Sleep (0x05)
                                        Local5--
                                    }
                                }

                                If (!Local4)
                                {
                                    Local5 = M024 (Zero, M243, M244)
                                    If (Local5)
                                    {
                                        M026 (Zero, M243, M244)
                                        Sleep (0x05)
                                        Local2++
                                    }
                                    Else
                                    {
                                        Local0 = Zero
                                        If ((M025 (Zero, M243, M244, Zero) == Ones))
                                        {
                                            Local0 = One
                                        }

                                        If (Local0)
                                        {
                                            M272 = One
                                            Local2 = 0x10
                                        }
                                        Else
                                        {
                                            M272 = Zero
                                            Local2 = 0x10
                                        }
                                    }
                                }
                                Else
                                {
                                    Local2 = 0x10
                                }
                            }

                            If (!M272)
                            {
                                M000 (0x9F)
                                Local1 = M019 (M245, Zero, Zero, Zero)
                                Sleep (0x0A)
                                Local4 = One
                                Local5 = 0x05
                                While ((Local4 && Local5))
                                {
                                    Local0 = M021 (Zero, M243, M244, 0xA5)
                                    Local0 &= 0x7F
                                    If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                                    {
                                        Local4 = Zero
                                    }
                                    Else
                                    {
                                        Local0 = M019 (M245, Zero, Zero, Zero)
                                        Sleep (0x05)
                                        Local5--
                                    }
                                }

                                M201 = Zero
                                \_SB.ALIB (0x06, Local7)
                            }
                        }
                    }

                    If ((M400 == One))
                    {
                        M403 (M243, M244, Zero)
                    }

                    M000 (0xC1)
                    If ((M272 == One))
                    {
                        M439 (Zero, M243, M244)
                    }

                    If ((M447 == One))
                    {
                        Local0 = M372 ()
                        If (((Local0 >= Zero) && (Local0 <= 0xBF)))
                        {
                            M256 = One
                            \_SB.ALIB (0x0C, Local3)
                        }
                    }

                    \_SB.PCI0.GPP0.M407 = One
                    M000 (0xA0)
                }
                Else
                {
                    M000 (0xA1)
                    \_SB.PCI0.GPP0.M407 = ((M049 (M128, 0x65) >> 0x07) & One)
                    \_SB.PCI0.GPP0.PEGP.LTRE = \_SB.PCI0.GPP0.LREN
                    If ((M447 == One))
                    {
                        Local0 = M372 ()
                        If (((Local0 >= Zero) && (Local0 <= 0xBF)))
                        {
                            M256 = Zero
                            \_SB.ALIB (0x0C, Local3)
                        }
                    }

                    If ((M273 == One))
                    {
                        Local1 = M019 (Zero, M243, M244, 0x54)
                        M020 (Zero, M243, M244, 0x54, (Local1 & 0xFFFF7FFC))
                        Sleep (One)
                        Local2 = M017 (Zero, M243, M244, 0x19, Zero, 0x08)
                        M028 (Local2, Zero, Zero, Zero)
                        Local3 = M027 (Local2, Zero, Zero)
                        M020 (Zero, M243, M244, 0x54, (Local1 & 0xFFFF7FFF))
                        If ((M400 == Zero))
                        {
                            Local1 = M017 (Zero, M243, M244, 0x68, Zero, 0x08)
                            M018 (Zero, M243, M244, 0x68, Zero, 0x08, (Local1 | 0x10))
                            Sleep (0x18)
                        }
                    }
                    Else
                    {
                        Local1 = M019 (Zero, M243, M244, 0x54)
                        M020 (Zero, M243, M244, 0x54, (Local1 & 0xFFFF7FFC))
                        M201 = Zero
                        \_SB.ALIB (0x06, Local7)
                        M020 (Zero, M243, M244, 0x54, (Local1 & 0xFFFF7FFF))
                    }

                    If ((M427 == One))
                    {
                        Local1 = M430 (Zero, M243, M244)
                        Local1 &= 0x0F
                        If ((Local1 > One))
                        {
                            Local4 = M025 (Zero, M243, M244, One)
                        }
                    }

                    If ((M400 == One))
                    {
                        M402 (M243, M244)
                    }

                    If ((M442 > Zero))
                    {
                        Divide (M442, 0x03E8, Local5, Local4)
                        If ((Local4 >= One))
                        {
                            Sleep (Local4)
                        }

                        Divide (Local5, 0x63, Local5, Local4)
                        While ((Local4 >= One))
                        {
                            Local4--
                            Stall (0x63)
                        }

                        If ((Local5 >= One))
                        {
                            Stall (Local5)
                        }
                    }

                    M000 (0xA2)
                    If (CondRefOf (\_SB.MACO))
                    {
                        If ((\_SB.MACO == One))
                        {
                            If ((M266 < 0x0100))
                            {
                                P011 = 0xC4
                            }
                            Else
                            {
                                M010 (M266, One)
                            }

                            Stall (M268)
                            If ((M267 < 0x0100))
                            {
                                P141 = 0x84
                            }
                            Else
                            {
                                M010 (M267, Zero)
                            }

                            Sleep (M269)
                            M112 (M242, Zero)
                        }
                        Else
                        {
                            M010 (0x45, Zero)
                            M010 (0x0C, Ones)
                        }
                    }
                    Else
                    {
                        M010 (0x45, Zero)
                        M010 (0x0C, Ones)
                    }

                    If ((M427 == One))
                    {
                        If ((Local1 > One))
                        {
                            M429 (Zero, M243, M244, 0x88, Zero, 0x04, Local1)
                        }
                    }

                    M023 (Zero, M243, M244)
                    If ((M400 == Zero))
                    {
                        Local1 = M019 (M245, Zero, Zero, Zero)
                        Sleep (0x0A)
                    }

                    If ((M085 < 0x08))
                    {
                        Local4 = One
                        Local5 = 0x05
                        While ((Local4 && Local5))
                        {
                            Local0 = M021 (Zero, M243, M244, 0xA5)
                            Local0 &= 0x7F
                            If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                            {
                                Local4 = Zero
                            }
                            Else
                            {
                                Local1 = M019 (M245, Zero, Zero, Zero)
                                Sleep (0x05)
                                Local5--
                            }
                        }
                    }

                    M000 (0xA3)
                    M272 = 0x02
                }
            }

            Release (EEBC)
        }

        PowerResource (M237, 0x00, 0x0000)
        {
            Name (M239, One)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (M239) /* \_SB_.PCI0.GPP0.M237.M239 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                \GPUF = One
                \_SB.PCI0.SBRG.EC0.WEBC (0x07, Zero, Zero)
                If ((M239 == Zero))
                {
                    If ((\_SB.PCI0.GPP0.PEGP.TDGC == One))
                    {
                        If ((\_SB.PCI0.GPP0.PEGP.DGCX == 0x03))
                        {
                            \_SB.PCI0.GPP0.PEGP.GC6O ()
                        }
                        ElseIf ((\_SB.PCI0.GPP0.PEGP.DGCX == 0x04))
                        {
                            \_SB.PCI0.GPP0.PEGP.GC6O ()
                        }

                        \_SB.PCI0.GPP0.PEGP.TDGC = Zero
                        \_SB.PCI0.GPP0.PEGP.DGCX = Zero
                    }
                    Else
                    {
                        SGPC (One)
                        \_SB.PCI0.GPP0.CMDR = 0x06
                        \_SB.PCI0.GPP0.D0ST = Zero
                        \GPUF = One
                    }

                    \_SB.PCI0.SBRG.EC0.BRAH = 0xC9
                    If ((\_SB.FANF == One))
                    {
                        \_SB.PCI0.SBRG.EC0.CNTD &= 0x18
                        \_SB.PCI0.SBRG.EC0.CNTD |= 0x40
                    }
                    ElseIf ((\_SB.FANF == Zero))
                    {
                        \_SB.PCI0.SBRG.EC0.CNTD &= 0x18
                        \_SB.PCI0.SBRG.EC0.CNTD |= 0x80
                    }
                    ElseIf ((\_SB.FANF == 0x02))
                    {
                        \_SB.PCI0.SBRG.EC0.CNTD &= 0x18
                        \_SB.PCI0.SBRG.EC0.CNTD |= 0x20
                    }
                }

                M239 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                \GPUF = Zero
                If ((M239 == One))
                {
                    \_SB.PCI0.SBRG.EC0.BRAH = 0xC9
                    \_SB.PCI0.SBRG.EC0.CNTD &= 0x18
                    \_SB.PCI0.SBRG.EC0.WEBC (0x08, Zero, Zero)
                    If ((\_SB.PCI0.GPP0.PEGP.TDGC == One))
                    {
                        CreateField (\_SB.PCI0.GPP0.PEGP.TGPC, Zero, 0x03, GUPC)
                        If ((ToInteger (GUPC) == One))
                        {
                            \_SB.PCI0.GPP0.PEGP.GC6I ()
                        }
                        ElseIf ((ToInteger (GUPC) == 0x02))
                        {
                            \_SB.PCI0.GPP0.PEGP.GC6I ()
                        }
                    }
                    Else
                    {
                        SGPC (Zero)
                        \GPUF = Zero
                    }
                }

                M239 = Zero
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            M237
        })
        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
        {
            M237
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            M237
        })
        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
        OperationRegion (RPCX, SystemMemory, 0xF0009000, 0x1000)
        Field (RPCX, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            CMDR,   8, 
            Offset (0x19), 
            PRBN,   8, 
            Offset (0x52), 
                ,   13, 
            LASX,   1, 
            Offset (0x54), 
            D0ST,   2, 
            Offset (0x62), 
            CEDR,   1, 
            Offset (0x68), 
            ASPM,   2, 
                ,   2, 
            LNKD,   1, 
            Offset (0x80), 
                ,   10, 
            LREN,   1, 
            Offset (0xE2), 
                ,   2, 
            L23E,   1, 
            L23R,   1
        }

        Device (PEGP)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_STA, 0x0F)  // _STA: Status
            Name (LTRE, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
            }

            OperationRegion (PCIM, SystemMemory, (0xF0000000 + (\_SB.PCI0.GPP0.PRBN << 0x14)), 0x0600)
            Field (PCIM, DWordAcc, NoLock, Preserve)
            {
                NVID,   16, 
                NDID,   16, 
                CMDR,   8, 
                VGAR,   2000, 
                Offset (0x48B), 
                    ,   1, 
                NHDA,   1
            }

            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }
        }

        Device (HDAU)
        {
            Name (_ADR, One)  // _ADR: Address
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }

            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
                If ((Arg0 == 0x02))
                {
                    \FINT = Arg1
                }
            }
        }

        Name (VGAB, Buffer (0xFA)
        {
             0x00                                             // .
        })
        Method (SGPC, 1, Serialized)
        {
            CreateByteField (M236, One, M243)
            CreateByteField (M236, 0x02, M244)
            If ((Arg0 == One))
            {
                If ((\_SB.GGOV (0x54) == One))
                {
                    Return (Zero)
                }

                \_SB.SGOV (0x45, Zero)
                Sleep (One)
                \_SB.SGOV (0x0C, Zero)
                Local0 = 0x64
                While (Local0)
                {
                    If ((\_SB.GGOV (0x54) == One))
                    {
                        Break
                    }

                    Sleep (One)
                    Local0--
                }

                Sleep (0x14)
                \_SB.SGOV (0x45, One)
                Sleep (0x64)
                LNKD = Zero
                Sleep (One)
                Local6 = 0x7FFFFFFF
                Local6 |= 0x80000000
                Local2 = M017 (Zero, One, One, 0x19, Zero, 0x08)
                Local1 = M019 (Zero, One, One, 0x54)
                M020 (Zero, One, One, 0x54, (Local1 & 0xFFFF7FFC))
                Local4 = One
                Local5 = 0x28
                While ((Local4 && Local5))
                {
                    Local0 = M019 (Local2, Zero, Zero, Zero)
                    If ((Local0 != Local6))
                    {
                        Local4 = Zero
                    }
                    Else
                    {
                        Sleep (0x05)
                        Local5--
                    }
                }

                \_SB.PCI0.GPP0.LREN = \_SB.PCI0.GPP0.PEGP.LTRE
                \_SB.PCI0.GPP0.CEDR = One
                M020 (Zero, One, One, 0x54, (Local1 & 0xFFFF7FFF))
                If ((\GPUF == One))
                {
                    Notify (\_SB.PCI0.GPP0.PEGP, 0xD1) // Hardware-Specific
                }
            }
            Else
            {
                \_SB.PCI0.GPP0.PEGP.LTRE = \_SB.PCI0.GPP0.LREN
                LNKD = One
                \_SB.SGOV (0x45, Zero)
                Sleep (One)
                \_SB.SGOV (0x0C, One)
                Sleep (0x32)
            }
        }
    }

    Scope (\_SB.PCI0.GPP0.PEGP)
    {
        OperationRegion (PCIS, PCI_Config, Zero, 0x0100)
        Field (PCIS, AnyAcc, NoLock, Preserve)
        {
            PVID,   16, 
            PDID,   16
        }

        CreateByteField (M236, One, M243)
        CreateByteField (M236, 0x02, M244)
        Name (OPCE, 0x02)
        Name (DGPS, Zero)
        Name (_PSC, Zero)  // _PSC: Power State Current
        Name (GPRF, Zero)
        Name (INIA, Zero)
        Name (NLIM, Zero)
        Name (PSLS, Zero)
        Name (VPSC, One)
        Name (GPSP, Buffer (0x28){})
        CreateDWordField (GPSP, Zero, RETN)
        CreateDWordField (GPSP, 0x04, VRV1)
        CreateDWordField (GPSP, 0x08, TGPU)
        CreateDWordField (GPSP, 0x0C, PDTS)
        CreateDWordField (GPSP, 0x10, SFAN)
        CreateDWordField (GPSP, 0x14, SKNT)
        CreateDWordField (GPSP, 0x18, CPUE)
        CreateDWordField (GPSP, 0x1C, TMP1)
        CreateDWordField (GPSP, 0x20, TMP2)
        Name (TGPC, Buffer (0x04)
        {
             0x00                                             // .
        })
        Name (GC6S, Zero)
        Name (TDGC, Zero)
        Name (DGCX, Zero)
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            _PSC = Zero
            If ((DGPS != Zero))
            {
                \_SB.PCI0.GPP0.M237._ON ()
                DGPS = Zero
            }
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            If ((OPCE == 0x03))
            {
                If ((DGPS == Zero))
                {
                    \_SB.PCI0.GPP0.M237._OFF ()
                    DGPS = One
                }

                OPCE = 0x02
            }

            _PSC = 0x03
        }

        Method (SGST, 0, Serialized)
        {
            If ((PVID != 0xFFFF))
            {
                Return (0x0F)
            }

            Return (Zero)
        }

        Method (CMPB, 2, NotSerialized)
        {
            Local1 = SizeOf (Arg0)
            If ((Local1 != SizeOf (Arg1)))
            {
                Return (Zero)
            }

            Local0 = Zero
            While ((Local0 < Local1))
            {
                If ((DerefOf (Arg0 [Local0]) != DerefOf (Arg1 [Local0]
                    )))
                {
                    Return (Zero)
                }

                Local0++
            }

            Return (One)
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            CreateByteField (Arg0, 0x03, GUID)
            If (CMPB (Arg0, ToUUID ("d4a50b75-65c7-46f7-bfb7-41514cea0244") /* Unknown UUID */))
            {
                Return (NBCI (Arg0, Arg1, Arg2, Arg3))
            }
            ElseIf (CMPB (Arg0, ToUUID ("a486d8f8-0bda-471b-a72b-6042a6b5bee0") /* Unknown UUID */))
            {
                Return (\_SB.PCI0.GPP0.PEGP.NVOP (Arg0, Arg1, Arg2, Arg3))
            }
            ElseIf (CMPB (Arg0, ToUUID ("a3132d01-8cda-49ba-a52e-bc9d46df6b81") /* Unknown UUID */))
            {
                Return (\_SB.PCI0.GPP0.PEGP.GPS (Arg0, Arg1, Arg2, Arg3))
            }
            ElseIf (CMPB (Arg0, ToUUID ("cbeca351-067b-4924-9cbd-b46b00b86f34") /* Unknown UUID */))
            {
                Return (\_SB.PCI0.GPP0.PEGP.NVJT (Arg0, Arg1, Arg2, Arg3))
            }

            Return (0x80000002)
        }

        Method (GC6I, 0, Serialized)
        {
            Debug = "JT GC6I"
            GC6S = One
            \_SB.PCI0.GPP0.PEGP.LTRE = \_SB.PCI0.GPP0.LREN
            M402 (M243, M244)
            Debug = "SGPC(Zero).ConfigGPIO"
            Sleep (0x0A)
            \_SB.SGOV (0x45, Zero)
        }

        Method (GC6O, 0, Serialized)
        {
            Debug = "JT GC6O"
            GC6S = Zero
            \_SB.SGOV (0x45, One)
            Sleep (0x0A)
            M403 (M243, M244, One)
            Local1 = Zero
            Local2 = 0x13BB
            While ((((Local1 & 0x28) != 0x20) && (Local2 > Zero)))
            {
                M000 (0xC0)
                Local1 = M017 (Zero, M243, M244, 0x6B, Zero, 0x08)
                Local2 = (Local2 - One)
                Stall (0x63)
            }

            M403 (M243, M244, Zero)
            \_SB.PCI0.GPP0.CMDR |= 0x04
            \_SB.PCI0.GPP0.LREN = \_SB.PCI0.GPP0.PEGP.LTRE
            \_SB.PCI0.GPP0.CEDR = One
        }

        Method (NVJT, 4, Serialized)
        {
            Debug = "------- NV JT DSM --------"
            If ((Arg1 < 0x0100))
            {
                Return (0x80000001)
            }

            Switch (ToInteger (Arg2))
            {
                Case (Zero)
                {
                    Debug = "JT fun0 JT_FUNC_SUPPORT"
                    Return (Buffer (0x04)
                    {
                         0x1B, 0x00, 0x00, 0x00                           // ....
                    })
                }
                Case (One)
                {
                    Debug = "JT fun1 JT_FUNC_CAPS"
                    Name (JTCA, Buffer (0x04)
                    {
                         0x00                                             // .
                    })
                    CreateField (JTCA, Zero, One, JTEN)
                    CreateField (JTCA, One, 0x02, SREN)
                    CreateField (JTCA, 0x03, 0x02, PLPR)
                    CreateField (JTCA, 0x05, One, SRPR)
                    CreateField (JTCA, 0x06, 0x02, FBPR)
                    CreateField (JTCA, 0x08, 0x02, GUPR)
                    CreateField (JTCA, 0x0A, One, GC6R)
                    CreateField (JTCA, 0x0B, One, PTRH)
                    CreateField (JTCA, 0x0D, One, MHYB)
                    CreateField (JTCA, 0x0E, One, RPCL)
                    CreateField (JTCA, 0x0F, 0x02, GC6V)
                    CreateField (JTCA, 0x11, One, GEIS)
                    CreateField (JTCA, 0x12, One, GSWS)
                    CreateField (JTCA, 0x14, 0x0C, JTRV)
                    JTEN = One
                    GC6R = Zero
                    MHYB = One
                    RPCL = One
                    SREN = One
                    FBPR = Zero
                    MHYB = One
                    PLPR = 0x02
                    SRPR = Zero
                    GC6V = 0x02
                    JTRV = 0x0200
                    Return (JTCA) /* \_SB_.PCI0.GPP0.PEGP.NVJT.JTCA */
                }
                Case (0x02)
                {
                    Debug = "JT fun2 JT_FUNC_POLICYSELECT"
                    Return (0x80000002)
                }
                Case (0x03)
                {
                    Debug = "JT fun3 JT_FUNC_POWERCONTROL"
                    CreateField (Arg3, Zero, 0x03, GUPC)
                    CreateField (Arg3, 0x04, One, PLPC)
                    CreateField (Arg3, 0x07, One, ECOC)
                    CreateField (Arg3, 0x0E, 0x02, DFGC)
                    CreateField (Arg3, 0x10, 0x03, GPCX)
                    \_SB.PCI0.GPP0.PEGP.TGPC = Arg3
                    If (((ToInteger (GUPC) != Zero) || (ToInteger (DFGC
                        ) != Zero)))
                    {
                        TDGC = ToInteger (DFGC)
                        DGCX = ToInteger (GPCX)
                    }

                    Name (JTPC, Buffer (0x04)
                    {
                         0x00                                             // .
                    })
                    CreateField (JTPC, Zero, 0x03, GUPS)
                    CreateField (JTPC, 0x03, One, GPWO)
                    CreateField (JTPC, 0x07, One, PLST)
                    If ((ToInteger (DFGC) != Zero))
                    {
                        GPWO = One
                        GUPS = One
                        Return (JTPC) /* \_SB_.PCI0.GPP0.PEGP.NVJT.JTPC */
                    }

                    Debug = "   JT fun3 GUPC="
                    Debug = ToInteger (GUPC)
                    If ((ToInteger (GUPC) == One))
                    {
                        GC6I ()
                    }
                    ElseIf ((ToInteger (GUPC) == 0x02))
                    {
                        GC6I ()
                        If ((ToInteger (PLPC) == Zero))
                        {
                            PLST = Zero
                        }
                    }
                    ElseIf ((ToInteger (GUPC) == 0x03))
                    {
                        GC6O ()
                        If ((ToInteger (PLPC) == Zero))
                        {
                            PLST = Zero
                        }

                        GPWO = One
                        GUPS = One
                    }
                    ElseIf ((ToInteger (GUPC) == 0x04))
                    {
                        GC6O ()
                        If ((ToInteger (PLPC) != Zero))
                        {
                            PLST = Zero
                        }

                        GPWO = One
                        GUPS = One
                    }
                    Else
                    {
                        Debug = "<<< GUPC 5/6 >>>"
                        If ((GC6S == Zero))
                        {
                            Debug = "   JT GETS() return 0x1"
                            GPWO = One
                            GUPS = One
                        }
                        Else
                        {
                            Debug = "   JT GETS() return 0x3"
                            GPWO = Zero
                            GUPS = 0x03
                        }
                    }

                    Return (JTPC) /* \_SB_.PCI0.GPP0.PEGP.NVJT.JTPC */
                }
                Case (0x04)
                {
                    Debug = "   JT fun4 JT_FUNC_PLATPOLICY"
                    CreateField (Arg3, 0x02, One, PAUD)
                    CreateField (Arg3, 0x03, One, PADM)
                    CreateField (Arg3, 0x04, 0x04, PDGS)
                    Local0 = Zero
                    Local0 = (\_SB.PCI0.GPP0.PEGP.NHDA << 0x02)
                    Return (Local0)
                }

            }

            Return (0x80000002)
        }

        Method (NVOP, 4, Serialized)
        {
            Debug = "------- NVOP --------"
            If ((Arg2 == Zero))
            {
                Return (Buffer (0x04)
                {
                     0x01, 0x00, 0x00, 0x04                           // ....
                })
            }
            ElseIf ((Arg2 == 0x1A))
            {
                Debug = "------- NVOP 0x1A --------"
                CreateField (Arg3, 0x18, 0x02, OMPR)
                CreateField (Arg3, Zero, One, FLCH)
                CreateField (Arg3, One, One, DVSR)
                CreateField (Arg3, 0x02, One, DVSC)
                If (ToInteger (FLCH))
                {
                    \_SB.PCI0.GPP0.PEGP.OPCE = OMPR /* \_SB_.PCI0.GPP0.PEGP.NVOP.OMPR */
                }

                Local0 = Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    }
                CreateField (Local0, Zero, One, OPEN)
                CreateField (Local0, 0x03, 0x02, CGCS)
                CreateField (Local0, 0x06, One, SHPC)
                CreateField (Local0, 0x08, One, SNSR)
                CreateField (Local0, 0x18, 0x03, DGPC)
                CreateField (Local0, 0x1B, 0x02, HDAC)
                OPEN = One
                SHPC = One
                HDAC = 0x03
                DGPC = One
                If (ToInteger (DVSC))
                {
                    If (ToInteger (DVSR))
                    {
                        \_SB.PCI0.GPP0.PEGP.GPRF = One
                    }
                    Else
                    {
                        \_SB.PCI0.GPP0.PEGP.GPRF = Zero
                    }
                }

                SNSR = \_SB.PCI0.GPP0.PEGP.GPRF
                If ((SGST () != Zero))
                {
                    Debug = "GPU power is on  --------"
                    CGCS = 0x03
                }

                Return (Local0)
            }

            Return (0x80000002)
        }

        Name (GDRG, Buffer (0xA1)
        {
            /* 0000 */  0x57, 0x74, 0xDC, 0x86, 0x75, 0x84, 0xEC, 0xE7,  // Wt..u...
            /* 0008 */  0x52, 0x44, 0xA1, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
            /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
            /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
            /* 0038 */  0x51, 0x00, 0x00, 0x00, 0x04, 0x00, 0x4F, 0x00,  // Q.....O.
            /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x4D, 0x00, 0x00, 0x00,  // ....M...
            /* 0048 */  0x06, 0x00, 0x4B, 0x00, 0x00, 0x00, 0x07, 0x00,  // ..K.....
            /* 0050 */  0x49, 0x00, 0x00, 0x00, 0x08, 0x00, 0x47, 0x00,  // I.....G.
            /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
            /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
            /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x60, 0x68, 0x9E,  // .....`h.
            /* 0088 */  0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 5.......
            /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A0 */  0x00                                             // .
        })
        Method (NBCI, 4, Serialized)
        {
            Debug = "------- NBCI --------"
            If ((Arg1 != 0x0102))
            {
                Return (0x80000002)
            }

            If ((Arg2 == Zero))
            {
                Return (Buffer (0x04)
                {
                     0x01, 0x00, 0x01, 0x00                           // ....
                })
            }

            If ((Arg2 == One))
            {
                Name (TEMP, Buffer (0x04)
                {
                     0x00, 0x00, 0x00, 0x00                           // ....
                })
                CreateDWordField (TEMP, Zero, STS0)
                STS0 |= Zero
                Return (TEMP) /* \_SB_.PCI0.GPP0.PEGP.NBCI.TEMP */
            }

            If ((Arg2 == 0x10))
            {
                CreateWordField (Arg3, 0x02, BFF0)
                If ((BFF0 == 0x4452))
                {
                    Debug = "Get DR key"
                    Return (GDRG) /* \_SB_.PCI0.GPP0.PEGP.GDRG */
                }
            }
        }

        Method (GPS, 4, Serialized)
        {
            Debug = "<<< GPS >>>"
            If ((Arg1 != 0x0200))
            {
                Return (0x80000002)
            }

            Switch (ToInteger (Arg2))
            {
                Case (Zero)
                {
                    Debug = "GPS fun 0"
                    Return (Buffer (0x08)
                    {
                         0x01, 0x00, 0x08, 0x00, 0x01, 0x04, 0x00, 0x00   // ........
                    })
                }
                Case (0x13)
                {
                    Debug = "GPS fun 19"
                    CreateDWordField (Arg3, Zero, TEMP)
                    If ((TEMP == Zero))
                    {
                        Return (0x04)
                    }

                    TEMP &= 0x0F
                    If ((TEMP == 0x04))
                    {
                        Return (Arg3)
                    }
                }
                Case (0x1C)
                {
                    Debug = "   GPS fun 28"
                    CreateField (Arg3, Zero, 0x04, RTFS)
                    CreateField (Arg3, 0x08, 0x08, VPS0)
                    CreateField (Arg3, 0x24, 0x08, VPS1)
                    If ((ToInteger (RTFS) == Zero))
                    {
                        Local0 = 0x02
                        If ((VPSC == Zero))
                        {
                            Local0 |= 0x0600
                        }
                        Else
                        {
                            Local0 |= Zero
                        }

                        Return (Local0)
                    }
                    ElseIf ((ToInteger (RTFS) == 0x02))
                    {
                        Return (Zero)
                    }
                }
                Case (0x20)
                {
                    Debug = "GPS fun 32"
                    Name (RET1, Zero)
                    CreateBitField (Arg3, 0x02, SPBI)
                    If (NLIM)
                    {
                        RET1 |= One
                    }

                    If (PSLS)
                    {
                        RET1 |= 0x02
                    }

                    Return (RET1) /* \_SB_.PCI0.GPP0.PEGP.GPS_.RET1 */
                }
                Case (0x2A)
                {
                    Debug = "GPS fun 42"
                    CreateField (Arg3, Zero, 0x04, PSH0)
                    CreateBitField (Arg3, 0x08, GPUT)
                    VRV1 = 0x00010000
                    Switch (ToInteger (PSH0))
                    {
                        Case (Zero)
                        {
                            Acquire (\_SB.PCI0.SBRG.EC0.CMUT, 0xFFFF)
                            PDTS = \_SB.PCI0.SBRG.EC0.ECPU /* External reference */
                            Release (\_SB.PCI0.SBRG.EC0.CMUT)
                            Return (GPSP) /* \_SB_.PCI0.GPP0.PEGP.GPSP */
                        }
                        Case (One)
                        {
                            RETN = 0x0100
                            RETN |= ToInteger (PSH0)
                            Return (GPSP) /* \_SB_.PCI0.GPP0.PEGP.GPSP */
                        }
                        Case (0x02)
                        {
                            RETN = 0x0102
                            If ((TGPU == Zero))
                            {
                                TGPU = \_SB.PCI0.SBRG.EC0.STCC (Zero, 0x27)
                            }

                            Return (GPSP) /* \_SB_.PCI0.GPP0.PEGP.GPSP */
                        }

                    }

                    Return (0x80000002)
                }

            }

            Return (0x80000002)
        }
    }

    Scope (_GPE)
    {
    }
}



SSDT11
------
DefinitionBlock ("", "SSDT", 1, "AMD", "AmdTable", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (_SB_.PCI0.GP17.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (M037, DeviceObj)
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M113, MethodObj)    // 1 Arguments
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Name (M207, Buffer (0xFF){})
        Name (M208, Buffer (0x03){})
        Name (M204, One)
        Method (ATCS, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                ATC0 ()
            }

            If ((Arg0 == One))
            {
                ATC1 ()
            }

            If ((Arg0 == 0x02))
            {
                ATC2 (Arg1)
            }

            If ((Arg0 == 0x03))
            {
                ATC3 ()
            }

            If ((Arg0 == 0x04))
            {
                ATC4 (Arg1)
            }

            If ((Arg0 == 0x06))
            {
                ATC6 (Arg1)
            }

            If ((Arg0 == 0x07))
            {
                ATC7 (Arg1)
            }

            If ((Arg0 == 0x08))
            {
                ATC8 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x03]), DerefOf (
                    Arg1 [0x04]), DerefOf (Arg1 [0x05]))
            }

            If ((Arg0 == 0x09))
            {
                ATC9 ()
            }

            Return (M207) /* \_SB_.PCI0.GP17.VGA_.M207 */
        }

        Method (ATC0, 0, NotSerialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateWordField (M207, 0x02, M158)
            CreateDWordField (M207, 0x04, M160)
            M157 = 0x08
            M158 = One
            M160 = M100 /* External reference */
            M207 = \_SB.ALIB (Zero, M207)
        }

        Method (ATC1, 0, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateDWordField (M207, 0x02, M161)
            CreateDWordField (M207, 0x06, M162)
            CreateField (M207, 0x30, One, M203)
            M157 = 0x0A
            M161 = One
            M162 = M100 /* External reference */
            Local0 = M049 (M133, 0x15)
            If ((Local0 & 0x80))
            {
                M204 = (Local0 & One)
            }
            ElseIf ((Local0 & 0x7F))
            {
                M204 = M113 (Local0)
            }

            M203 = M204 /* \_SB_.PCI0.GP17.VGA_.M204 */
        }

        Method (ATC2, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M205)
            M157 = 0x03
            M205 = One
            M207 = \_SB.ALIB (0x02, Arg0)
        }

        Method (ATC3, 0, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M205)
            CreateWordField (M208, Zero, M197)
            CreateByteField (M208, 0x02, M206)
            M157 = 0x03
            M205 = One
            M197 = 0x03
            M206 = One
            M207 = \_SB.ALIB (0x03, M208)
        }

        Method (ATC4, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M209)
            M157 = 0x03
            M209 = One
            M207 = \_SB.ALIB (0x04, Arg0)
        }

        Method (ATC6, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateDWordField (M207, 0x02, M234)
            M157 = 0x06
            M234 = M233 /* External reference */
        }

        Method (ATC7, 1, Serialized)
        {
            M232 (M235, Zero, One)
        }

        Method (ATC8, 4, Serialized)
        {
            Local0 = Buffer (0x05){}
            CreateWordField (Local0, Zero, M157)
            CreateByteField (Local0, 0x02, M425)
            CreateWordField (Local0, 0x03, M426)
            M157 = 0x05
            Local1 = Arg0
            Local2 = Arg1
            M426 = ((Local2 << 0x08) + Local1)
            Local3 = Arg2
            Local4 = Arg3
            If (((Local3 == Zero) && (Local4 == Zero)))
            {
                M425 = One
                \_SB.ALIB (0xAA, Local0)
            }
            ElseIf (((Local3 == Zero) && (Local4 == One)))
            {
                M425 = Zero
                \_SB.ALIB (0xAA, Local0)
            }
            ElseIf (((Local3 == 0x03) && (Local4 == One)))
            {
                M425 = 0x03
                \_SB.ALIB (0xAA, Local0)
            }
        }

        Method (ATC9, 0, Serialized)
        {
            M207 = M444 /* External reference */
        }

        Method (XTRM, 2, Serialized)
        {
            If ((M105 == Zero))
            {
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Local4 = M105 /* External reference */
            If ((Local4 > 0x00010000))
            {
                Local4 = 0x00010000
            }

            Local5 = Arg0
            Local6 = Arg1
            If ((Local6 > 0x1000))
            {
                Local6 = 0x1000
            }

            If ((Local5 >= Local4))
            {
                Return (Buffer (Local6)
                {
                     0x00                                             // .
                })
            }

            If ((((Local5 & 0x0FFF) + Local6) > 0x1000))
            {
                Local6 = (0x1000 - (Local5 & 0x0FFF))
            }

            Name (M202, Buffer (0x1000)
            {
                 0x00                                             // .
            })
            If (((Local5 & 0xF000) == Zero))
            {
                M202 = M106 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x1000))
            {
                M202 = M378 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x2000))
            {
                M202 = M379 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x3000))
            {
                M202 = M380 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x4000))
            {
                M202 = M381 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x5000))
            {
                M202 = M382 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x6000))
            {
                M202 = M383 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x7000))
            {
                M202 = M384 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x8000))
            {
                M202 = M385 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x9000))
            {
                M202 = M386 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xA000))
            {
                M202 = M387 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xB000))
            {
                M202 = M388 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xC000))
            {
                M202 = M389 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xD000))
            {
                M202 = M390 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xE000))
            {
                M202 = M391 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xF000))
            {
                M202 = M392 /* External reference */
            }

            If (((Local5 + Local6) <= Local4))
            {
                If ((Local6 == 0x1000))
                {
                    Return (M202) /* \_SB_.PCI0.GP17.VGA_.XTRM.M202 */
                }
            }
            Else
            {
                Local6 = (Local4 - Local5)
            }

            Name (M393, Buffer (Local6)
            {
                 0x00                                             // .
            })
            CreateField (M202, ((Local5 & 0x0FFF) * 0x08), (Local6 * 0x08
                ), M394)
            M393 = M394 /* \_SB_.PCI0.GP17.VGA_.XTRM.M394 */
            Return (M393) /* \_SB_.PCI0.GP17.VGA_.XTRM.M393 */
        }
    }

    Method (AFN0, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN0))
            {
                \_SB.PCI0.GP17.VGA.AFN0 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN0))
            {
                \_SB.PCI0.GPP0.VGA.AFN0 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN0))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN0 ()
            }
        }
    }

    Method (AFN1, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN1))
            {
                \_SB.PCI0.GP17.VGA.AFN1 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN1))
            {
                \_SB.PCI0.GPP0.VGA.AFN1 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN1))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN1 (Arg0)
            }
        }
    }

    Method (AFN2, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN2))
            {
                \_SB.PCI0.GP17.VGA.AFN2 (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN2))
            {
                \_SB.PCI0.GPP0.VGA.AFN2 (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN2))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN2 (Arg0, Arg1)
            }
        }
    }

    Method (AFN3, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN3))
            {
                \_SB.PCI0.GP17.VGA.AFN3 (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN3))
            {
                \_SB.PCI0.GPP0.VGA.AFN3 (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN3))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN3 (Arg0, Arg1)
            }
        }
    }

    Method (AFN4, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN4))
            {
                \_SB.PCI0.GP17.VGA.AFN4 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN4))
            {
                \_SB.PCI0.GPP0.VGA.AFN4 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN4))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN4 (Arg0)
            }
        }
    }

    Method (AFN5, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN5))
            {
                \_SB.PCI0.GP17.VGA.AFN5 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN5))
            {
                \_SB.PCI0.GPP0.VGA.AFN5 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN5))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN5 ()
            }
        }
    }

    Method (AFN6, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN6))
            {
                \_SB.PCI0.GP17.VGA.AFN6 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN6))
            {
                \_SB.PCI0.GPP0.VGA.AFN6 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN6))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN6 ()
            }
        }
    }

    Method (AFN7, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN7))
            {
                \_SB.PCI0.GP17.VGA.AFN7 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN7))
            {
                \_SB.PCI0.GPP0.VGA.AFN7 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN7))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN7 (Arg0)
            }
        }
    }

    Method (AFN8, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN8))
            {
                \_SB.PCI0.GP17.VGA.AFN8 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN8))
            {
                \_SB.PCI0.GPP0.VGA.AFN8 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN8))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN8 ()
            }
        }
    }

    Method (AFNC, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFNC))
            {
                \_SB.PCI0.GP17.VGA.AFNC (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFNC))
            {
                \_SB.PCI0.GPP0.VGA.AFNC (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFNC))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFNC (Arg0, Arg1)
            }
        }
    }
}



SSDT12
------
DefinitionBlock ("", "SSDT", 1, "AMD", "AmdTable", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.ACP_, DeviceObj)
    External (_SB_.PCI0.GP17.AZAL, DeviceObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M017, MethodObj)    // 6 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M037, DeviceObj)
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M249, MethodObj)    // 4 Arguments
    External (M250, MethodObj)    // 5 Arguments
    External (M251, FieldUnitObj)
    External (M276, MethodObj)    // 0 Arguments
    External (M277, MethodObj)    // 0 Arguments
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)

    Name (M278, One)
    Name (M279, One)
    Name (M27A, One)
    Name (APGE, Zero)
    Name (ACGE, One)
    Method (M276, 0, NotSerialized)
    {
        If ((M27A == Zero))
        {
            M278 = Zero
        }

        If (((M278 == One) || (M279 == One)))
        {
            Local0 = M017 (Zero, 0x08, One, 0x19, Zero, 0x08)
            Local1 = M019 (Local0, Zero, 0x05, Zero)
            If ((M27A == Zero))
            {
                Local1 = 0x15E21022
            }

            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                If ((Local1 != Ones))
                {
                    M000 (0xB4)
                    If ((ACGE != Zero))
                    {
                        Local2 = \_SB.ALIB (0x12, 0xC8)
                    }

                    If ((APGE != Zero))
                    {
                        M250 (Zero, Zero, Zero, 0x0900E784, 0x0103)
                        Local4 = One
                        Local5 = 0x64
                        While (((Local4 != Zero) && Local5))
                        {
                            Local4 = M249 (Zero, Zero, Zero, 0x0900E784)
                            Local4 |= 0x06
                            Local4 &= 0xFFFFFF0F
                            M250 (Zero, Zero, Zero, 0x0900E784, Local4)
                            Local4 = M249 (Zero, Zero, Zero, 0x0900E78C)
                            Local4 &= 0x03
                            Local5--
                            Stall (0x63)
                        }

                        M250 (Zero, Zero, Zero, 0x0900E784, Zero)
                        M000 (0xB5)
                    }
                }
            }
        }
    }

    Method (M277, 0, NotSerialized)
    {
        If ((M27A == Zero))
        {
            M278 = Zero
        }

        If (((M278 == Zero) && (M279 == Zero)))
        {
            Local0 = M017 (Zero, 0x08, One, 0x19, Zero, 0x08)
            Local1 = M019 (Local0, Zero, 0x05, Zero)
            If ((M27A == Zero))
            {
                Local1 = 0x15E21022
            }

            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                If ((Local1 != Ones))
                {
                    M000 (0xB6)
                    If ((ACGE != Zero))
                    {
                        Local2 = \_SB.ALIB (0x12, Zero)
                    }

                    If ((APGE != Zero))
                    {
                        M250 (Zero, Zero, Zero, 0x0900E784, 0x0101)
                        Local4 = One
                        Local5 = 0x64
                        While (((Local4 != 0x02) && Local5))
                        {
                            Local4 = M249 (Zero, Zero, Zero, 0x0900E784)
                            Local4 |= 0x06
                            Local4 &= 0xFFFFFF0F
                            M250 (Zero, Zero, Zero, 0x0900E784, Local4)
                            Local4 = M249 (Zero, Zero, Zero, 0x0900E78C)
                            Local4 &= 0x03
                            Local5--
                            Stall (0x63)
                        }

                        M250 (Zero, Zero, Zero, 0x0900E784, Zero)
                        M000 (0xB7)
                    }
                }
            }
        }
    }

    Scope (\_SB.PCI0.GP17.ACP)
    {
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            M278 = One
            M276 ()
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            M278 = Zero
            M277 ()
        }

        Method (MSG0, 3, Serialized)
        {
            M000 (0x5511)
            OperationRegion (VARM, SystemIO, 0x80, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            If ((Arg2 != 0x09))
            {
                M000 (0x5518)
                M250 (Zero, Zero, Zero, 0x00058A74, Arg0)
                M250 (Zero, Zero, Zero, 0x00058A54, Arg1)
                M250 (Zero, Zero, Zero, 0x00058A14, Arg2)
                Local0 = M249 (Zero, Zero, Zero, 0x00058A74)
                While ((Local0 == Zero))
                {
                    Local0 = M249 (Zero, Zero, Zero, 0x00058A74)
                    If ((Local0 != Zero))
                    {
                        Break
                    }
                }

                M000 (0x5519)
                Local1 = M249 (Zero, Zero, Zero, 0x00058A54)
                Return (Local1)
            }

            Name (MBOX, Buffer (0x04){})
            Local0 = M249 (Zero, Zero, Zero, 0x03810570)
            VARR = Local0
            MBOX = Local0
            CreateWordField (MBOX, Zero, STAS)
            CreateByteField (MBOX, 0x02, CMDI)
            CreateField (MBOX, 0x18, 0x05, RESV)
            CreateBitField (MBOX, 0x1D, RSET)
            CreateBitField (MBOX, 0x1E, RCOV)
            CreateBitField (MBOX, 0x1F, REDY)
            VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            While (((REDY != One) || (CMDI != Zero)))
            {
                Local0 = M249 (Zero, Zero, Zero, 0x03810570)
                MBOX = Local0
                M000 (0x5516)
                VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            }

            Local0 = Zero
            MBOX = Local0
            REDY = Zero
            CMDI = 0x33
            M000 (0x5514)
            Local0 = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            VARR = Local0
            M250 (Zero, Zero, Zero, 0x03810570, Local0)
            Sleep (One)
            M000 (0x5515)
            Local0 = M249 (Zero, Zero, Zero, 0x03810570)
            MBOX = Local0
            VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            While ((CMDI != Zero))
            {
                Local0 = M249 (Zero, Zero, Zero, 0x03810570)
                MBOX = Local0
                M000 (0x5517)
                VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            }

            If ((STAS != Zero))
            {
                M000 (0x5513)
            }

            M000 (0x5512)
            Return (Local0)
        }
    }

    Scope (\_SB.PCI0.GP17.AZAL)
    {
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            M279 = One
            M276 ()
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            M279 = Zero
            M277 ()
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AMD AOD", 0x00000001)
{
    Scope (\)
    {
        Device (AOD)
        {
            Name (DBG, Zero)
            Name (GDBG, Zero)
            Name (CDBG, Zero)
            Name (VDBG, Zero)
            Name (RDBG, Zero)
            OperationRegion (PSMI, SystemIO, 0xB2, 0x02)
            Field (PSMI, ByteAcc, NoLock, Preserve)
            {
                APMC,   8, 
                APMD,   8
            }

            Method (ASMI, 1, NotSerialized)
            {
                APMC = Arg0
                Sleep (0x0A)
            }

            Name (OBID, Package (0xC1)
            {
                0x40, 
                0x00010001, 
                0x00010002, 
                0x00020001, 
                0x00020002, 
                0x00020003, 
                0x00020004, 
                0x00020005, 
                0x00020006, 
                0x00020007, 
                0x00020008, 
                0x00020009, 
                0x0002000A, 
                0x0002000B, 
                0x0002000C, 
                0x0002000D, 
                0x0002000E, 
                0x0002000F, 
                0x00020010, 
                0x00020011, 
                0x00020012, 
                0x00020013, 
                0x00020014, 
                0x00020015, 
                0x00020016, 
                0x00020017, 
                0x00020018, 
                0x00020019, 
                0x0002001A, 
                0x0002001B, 
                0x0002001C, 
                0x0002001D, 
                0x0002001E, 
                0x0002001F, 
                0x00020020, 
                0x00020021, 
                0x00020022, 
                0x00020023, 
                0x00020024, 
                0x00020025, 
                0x00020027, 
                0x00020028, 
                0x00020029, 
                0x0002002A, 
                0x0002002B, 
                0x0002002C, 
                0x0002002D, 
                0x0002002E, 
                0x0002002F, 
                0x00020030, 
                0x00020031, 
                0x00020032, 
                0x00020033, 
                0x00020035, 
                0x00020036, 
                0x00020037, 
                0x00030001, 
                0x00040001, 
                0x00040002, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                "Get APCB Config", 
                "Get memory voltages", 
                "Set memory clock frequency", 
                "Set Tcl", 
                "Set Trcdrd", 
                "Set Trcdwr", 
                "Set Tras", 
                "Set Trp", 
                "Set ProcODT", 
                "Set Trcpage", 
                "Set Trc", 
                "Set Trfc", 
                "Set Trfc2", 
                "Set Trfc4", 
                "Set Tfaw", 
                "Set TrrdS", 
                "Set TrrdL", 
                "Set Twr", 
                "Set TwtrS", 
                "Set TwtrL", 
                "Set TCke", 
                "Set Tcwl", 
                "Set Trtp", 
                "Set TrdrdSc", 
                "Set TrdrdScL", 
                "Set TrdrdSd", 
                "Set TrdrdDd", 
                "Set TwrwrSc", 
                "Set TwrwrScL", 
                "Set TwrwrSd", 
                "Set TwrwrDd", 
                "Set Trdwr", 
                "Set Twrrd", 
                "Set GearDownEn", 
                "Set Cmd2t", 
                "Set RttNom", 
                "Set RttWR", 
                "Set RttPark", 
                "Set PowerDownEn", 
                "Software Downcore Config", 
                "Set EDC Throttler Control", 
                "Set AddrCmdSetup", 
                "Set CsOdtSetup", 
                "Set CkeSetup", 
                "Set CadBusClkDrvStren", 
                "Set CadBusAddrCmdDrvStren", 
                "Set CadBusCsOdtCmdDrvStren", 
                "Set CadBusCkeDrvStren", 
                "Set CLDO_VDDP", 
                "Set Interleave Mode", 
                "Set Interleave Size", 
                "Set FCLK OC Mode", 
                "Set FCLK Frequency", 
                "Set CCLK Fmax", 
                "Set GFXCLK Fmax", 
                "Set VDDIO", 
                "Command Buffer Start", 
                "Command Buffer End", 
                "", 
                "", 
                "", 
                "", 
                "", 
                ""
            })
            Name (OBIE, Package (0xC1)
            {
                0x40, 
                0x00050001, 
                0x00050002, 
                0x00050003, 
                0x00050004, 
                0x00050005, 
                0x0005000A, 
                0x0005000B, 
                0x0005000C, 
                0x0005000D, 
                0x0005000E, 
                0x0005000F, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                "Set PPT Limit", 
                "Set TDC Limit", 
                "Set EDC Limit", 
                "Set Scalar", 
                "Set DRAM Map Inversion", 
                "Set Curve Optimizer", 
                "Set IOD VDDG", 
                "Set Soc TDC Limit", 
                "Set Soc EDC Limit", 
                "Set Dram Latency Enhance", 
                "Get Dram Latency Enhance", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                ""
            })
            Name (OBIT, Package (0xED)
            {
                0x00020001, 
                0x014D, 
                0x0FA0, 
                0x21, 
                0x00020002, 
                0x08, 
                0x21, 
                One, 
                0x00020003, 
                0x08, 
                0x3F, 
                One, 
                0x00020004, 
                0x08, 
                0x3F, 
                One, 
                0x00020005, 
                0x15, 
                0x3A, 
                One, 
                0x00020006, 
                0x08, 
                0x3F, 
                One, 
                0x00020007, 
                Zero, 
                0x3F, 
                One, 
                0x00020008, 
                Zero, 
                0x03FF, 
                One, 
                0x00020009, 
                0x1D, 
                0x87, 
                One, 
                0x0002000A, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000B, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000C, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000D, 
                0x06, 
                0x36, 
                One, 
                0x0002000E, 
                0x04, 
                0x0C, 
                One, 
                0x0002000F, 
                0x04, 
                0x0C, 
                One, 
                0x00020010, 
                0x0A, 
                0x51, 
                One, 
                0x00020011, 
                0x02, 
                0x0E, 
                One, 
                0x00020012, 
                0x02, 
                0x0E, 
                One, 
                0x00020013, 
                One, 
                0x1F, 
                One, 
                0x00020014, 
                0x09, 
                0x16, 
                One, 
                0x00020015, 
                0x05, 
                0x0E, 
                One, 
                0x00020016, 
                One, 
                0x0F, 
                One, 
                0x00020017, 
                One, 
                0x0F, 
                One, 
                0x00020018, 
                One, 
                0x0F, 
                One, 
                0x00020019, 
                One, 
                0x0F, 
                One, 
                0x0002001A, 
                One, 
                0x0F, 
                One, 
                0x0002001B, 
                One, 
                0x3F, 
                One, 
                0x0002001C, 
                One, 
                0x0F, 
                One, 
                0x0002001D, 
                One, 
                0x0F, 
                One, 
                0x0002001E, 
                One, 
                0x1F, 
                One, 
                0x0002001F, 
                Zero, 
                0x0F, 
                One, 
                0x00020020, 
                Zero, 
                One, 
                One, 
                0x00020021, 
                Zero, 
                One, 
                One, 
                0x00020022, 
                Zero, 
                0x07, 
                One, 
                0x00020023, 
                Zero, 
                0x04, 
                One, 
                0x00020024, 
                Zero, 
                0x07, 
                One, 
                0x00020025, 
                Zero, 
                One, 
                One, 
                0x00020027, 
                Zero, 
                Ones, 
                One, 
                0x00020028, 
                Zero, 
                0x0F, 
                One, 
                0x00020029, 
                Zero, 
                0x3F, 
                One, 
                0x0002002A, 
                Zero, 
                0x3F, 
                One, 
                0x0002002B, 
                Zero, 
                0x3F, 
                One, 
                0x0002002C, 
                Zero, 
                0x1F, 
                One, 
                0x0002002D, 
                Zero, 
                0x1F, 
                One, 
                0x0002002E, 
                Zero, 
                0x1F, 
                One, 
                0x0002002F, 
                Zero, 
                0x1F, 
                One, 
                0x00020030, 
                Zero, 
                0x05DC, 
                One, 
                0x00020031, 
                Zero, 
                Ones, 
                One, 
                0x00020032, 
                Zero, 
                0x07, 
                One, 
                0x00020033, 
                Zero, 
                One, 
                One, 
                0x00020035, 
                0x014D, 
                0x0FA0, 
                0x21, 
                0x00020036, 
                0x10FE, 
                0x11C6, 
                One, 
                0x00020037, 
                0x076C, 
                0x0834, 
                One, 
                0x00030001, 
                0x0230, 
                0x072B, 
                0x05, 
                0x00050001, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x00050002, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x00050003, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x00050004, 
                0x64, 
                0x03E8, 
                0x64, 
                0x00050005, 
                Zero, 
                0xFF, 
                One, 
                Zero
            })
            Name (OBIU, Package (0x11)
            {
                0x0005000A, 
                Zero, 
                0x1E, 
                One, 
                0x0005000B, 
                0x0258, 
                0x05DC, 
                One, 
                0x0005000C, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x0005000D, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                Zero
            })
            Name (OBD1, Package (0xCF)
            {
                0x00020001, 
                0x4A, 
                0x014D, 
                0x0190, 
                0x0215, 
                0x029B, 
                0x0320, 
                0x03A5, 
                0x042B, 
                0x04B0, 
                0x0535, 
                0x0557, 
                0x0578, 
                0x0599, 
                0x05BB, 
                0x05DC, 
                0x05FD, 
                0x061F, 
                0x0640, 
                0x0661, 
                0x0683, 
                0x06A4, 
                0x06C5, 
                0x06E7, 
                0x0708, 
                0x0729, 
                0x074B, 
                0x076C, 
                0x078D, 
                0x07AF, 
                0x07D0, 
                0x07F1, 
                0x0813, 
                0x0834, 
                0x0855, 
                0x0877, 
                0x0898, 
                0x08B9, 
                0x08DB, 
                0x08FC, 
                0x091D, 
                0x093F, 
                0x0960, 
                0x0981, 
                0x09A3, 
                0x09C4, 
                0x09F6, 
                0x0A28, 
                0x0A5A, 
                0x0A8C, 
                0x0ABE, 
                0x0AF0, 
                0x0B22, 
                0x0B54, 
                0x0B86, 
                0x0BB8, 
                0x0BEA, 
                0x0C1C, 
                0x0C4E, 
                0x0C80, 
                0x0CB2, 
                0x0CE4, 
                0x0D16, 
                0x0D48, 
                0x0D7A, 
                0x0DAC, 
                0x0DDE, 
                0x0E10, 
                0x0E42, 
                0x0E74, 
                0x0EA6, 
                0x0ED8, 
                0x0F0A, 
                0x0F3C, 
                0x0F6E, 
                0x0FA0, 
                0x00020002, 
                0x1A, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x1C, 
                0x1D, 
                0x1E, 
                0x1F, 
                0x20, 
                0x21, 
                0x00020005, 
                0x26, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x1C, 
                0x1D, 
                0x1E, 
                0x1F, 
                0x20, 
                0x21, 
                0x22, 
                0x23, 
                0x24, 
                0x25, 
                0x26, 
                0x27, 
                0x28, 
                0x29, 
                0x2A, 
                0x2B, 
                0x2C, 
                0x2D, 
                0x2E, 
                0x2F, 
                0x30, 
                0x31, 
                0x32, 
                0x33, 
                0x34, 
                0x35, 
                0x36, 
                0x37, 
                0x38, 
                0x39, 
                0x3A, 
                0x00020007, 
                0x12, 
                Zero, 
                One, 
                0x02, 
                0x03, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x38, 
                0x39, 
                0x3A, 
                0x3B, 
                0x3E, 
                0x3F, 
                0x00020014, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0E, 
                0x10, 
                0x12, 
                0x14, 
                0x0002002C, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002D, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002E, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002F, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                Zero
            })
            Name (OBD2, Package (0x4E)
            {
                0x00020035, 
                0x47, 
                0x029B, 
                0x0320, 
                0x03A5, 
                0x042B, 
                0x04B0, 
                0x0535, 
                0x0557, 
                0x0578, 
                0x0599, 
                0x05BB, 
                0x05DC, 
                0x05FD, 
                0x061F, 
                0x0640, 
                0x0661, 
                0x0683, 
                0x06A4, 
                0x06C5, 
                0x06E7, 
                0x0708, 
                0x0729, 
                0x074B, 
                0x076C, 
                0x078D, 
                0x07AF, 
                0x07D0, 
                0x07F1, 
                0x0813, 
                0x0834, 
                0x0855, 
                0x0877, 
                0x0898, 
                0x08B9, 
                0x08DB, 
                0x08FC, 
                0x091D, 
                0x093F, 
                0x0960, 
                0x0981, 
                0x09A3, 
                0x09C4, 
                0x09F6, 
                0x0A28, 
                0x0A5A, 
                0x0A8C, 
                0x0ABE, 
                0x0AF0, 
                0x0B22, 
                0x0B54, 
                0x0B86, 
                0x0BB8, 
                0x0BEA, 
                0x0C1C, 
                0x0C4E, 
                0x0C80, 
                0x0CB2, 
                0x0CE4, 
                0x0D16, 
                0x0D48, 
                0x0D7A, 
                0x0DAC, 
                0x0DDE, 
                0x0E10, 
                0x0E42, 
                0x0E74, 
                0x0EA6, 
                0x0ED8, 
                0x0F0A, 
                0x0F3C, 
                0x0F6E, 
                0x0FA0, 
                0x0005000E, 
                0x02, 
                Zero, 
                One, 
                Zero
            })
            Method (BM01, 0, NotSerialized)
            {
            }

            Method (XINI, 0, NotSerialized)
            {
            }

            Method (EM01, 0, NotSerialized)
            {
            }

            Method (BM05, 1, NotSerialized)
            {
            }

            Method (EM05, 1, NotSerialized)
            {
            }

            Method (HM06, 0, NotSerialized)
            {
            }

            Method (HM07, 1, NotSerialized)
            {
            }

            Method (SBSL, 1, NotSerialized)
            {
                OperationRegion (PMRG, SystemMemory, 0xFED80300, 0x0100)
                Field (PMRG, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x2E), 
                    SBSL,   8
                }

                Local0 = (Arg0 | One)
                SBSL = Local0
            }

            Method (SETV, 2, NotSerialized)
            {
            }

            Method (GETV, 1, NotSerialized)
            {
            }

            Method (CPTB, 2, NotSerialized)
            {
                Name (LOID, Zero)
                CreateDWordField (Arg1, Zero, BUF0)
                CreateDWordField (Arg1, 0x04, BUF1)
                CreateDWordField (Arg1, 0x08, BUF2)
                CreateDWordField (Arg1, 0x0C, BUF3)
                Local0 = Zero
                LOID = DerefOf (OBIT [Local0])
                While (LOID)
                {
                    If ((LOID == Arg0))
                    {
                        BUF0 = DerefOf (OBIT [(Local0 + Zero)])
                        BUF1 = DerefOf (OBIT [(Local0 + One)])
                        BUF2 = DerefOf (OBIT [(Local0 + 0x02)])
                        BUF3 = DerefOf (OBIT [(Local0 + 0x03)])
                        Break
                    }

                    Local0 += 0x04
                    LOID = DerefOf (OBIT [Local0])
                }

                If ((LOID == Zero))
                {
                    Local0 = Zero
                    LOID = DerefOf (OBIU [Local0])
                    While (LOID)
                    {
                        If ((LOID == Arg0))
                        {
                            BUF0 = DerefOf (OBIU [(Local0 + Zero)])
                            BUF1 = DerefOf (OBIU [(Local0 + One)])
                            BUF2 = DerefOf (OBIU [(Local0 + 0x02)])
                            BUF3 = DerefOf (OBIU [(Local0 + 0x03)])
                            Break
                        }

                        Local0 += 0x04
                        LOID = DerefOf (OBIU [Local0])
                    }
                }

                If ((LOID == Zero))
                {
                    Return (0xFF)
                }

                Return (Zero)
            }

            Name (GF01, Zero)
            Name (GVBF, Buffer (0x05)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
            })
            CreateDWordField (GVBF, Zero, GVB1)
            CreateByteField (GVBF, 0x04, GVB2)
            Method (AM01, 0, NotSerialized)
            {
                Return (CMDV) /* \AOD_.CMDV */
            }

            Method (AM02, 0, NotSerialized)
            {
                If (!GF01)
                {
                    BM01 ()
                    XINI ()
                    EM01 ()
                    GF01 = One
                }

                Return (Zero)
            }

            Method (AM03, 0, NotSerialized)
            {
                Return (OBID) /* \AOD_.OBID */
            }

            Method (AM04, 1, NotSerialized)
            {
                Name (LODT, Package (0x66)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (OBD1 [Local0]) == Arg0))
                    {
                        Local4 = Zero
                        Break
                    }

                    If ((DerefOf (OBD1 [Local0]) == Zero))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBD1 [(Local0 + One)])
                    Local0 += 0x02
                }

                If ((Local4 == Zero))
                {
                    Local1 = DerefOf (OBD1 [(Local0 + One)])
                    Local1 += 0x02
                    Local2 = Zero
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBD1 [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }

                    Return (LODT) /* \AOD_.AM04.LODT */
                }

                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (OBD2 [Local0]) == Arg0))
                    {
                        Local4 = Zero
                        Break
                    }

                    If ((DerefOf (OBD2 [Local0]) == Zero))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBD2 [(Local0 + One)])
                    Local0 += 0x02
                }

                If ((Local4 == Zero))
                {
                    Local1 = DerefOf (OBD2 [(Local0 + One)])
                    Local1 += 0x02
                    Local2 = Zero
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBD2 [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }

                    Return (LODT) /* \AOD_.AM04.LODT */
                }

                Return (LODT) /* \AOD_.AM04.LODT */
            }

            Method (AM05, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ACMD)
                CreateField (OBUF, Zero, (SizeOf (OBUF) * 0x08), TEMP)
                TEMP = Zero
                CreateWordField (OBUF, Zero, BSCD)
                CreateDWordField (OBUF, 0x02, BSTS)
                CreateWordField (OBUF, 0x06, BSD1)
                CreateDWordField (OBUF, 0x08, BBSN)
                CreateDWordField (OBUF, 0x0C, BBVS)
                CreateDWordField (OBUF, 0x10, BBCB)
                CreateWordField (OBUF, 0x14, BBMC)
                CreateByteField (OBUF, 0x16, BTCL)
                CreateByteField (OBUF, 0x17, BTRR)
                CreateByteField (OBUF, 0x18, BTRW)
                CreateByteField (OBUF, 0x19, BRAS)
                CreateByteField (OBUF, 0x1A, BTRP)
                CreateWordField (OBUF, 0x1B, BVIO)
                CreateWordField (OBUF, 0x1D, BVTT)
                CreateWordField (OBUF, 0x1F, BVPP)
                CreateWordField (OBUF, 0x21, BODT)
                CreateWordField (OBUF, 0x23, BRPG)
                CreateByteField (OBUF, 0x25, BTRC)
                CreateWordField (OBUF, 0x26, BRFC)
                CreateWordField (OBUF, 0x28, BRF2)
                CreateWordField (OBUF, 0x2A, BRF4)
                CreateByteField (OBUF, 0x2C, BFAW)
                CreateByteField (OBUF, 0x2D, BRRS)
                CreateByteField (OBUF, 0x2E, BRRL)
                CreateByteField (OBUF, 0x2F, BTWR)
                CreateByteField (OBUF, 0x30, BWTS)
                CreateByteField (OBUF, 0x31, BWTL)
                CreateByteField (OBUF, 0x32, BCKE)
                CreateByteField (OBUF, 0x33, BCWL)
                CreateByteField (OBUF, 0x34, BRTP)
                CreateByteField (OBUF, 0x35, BRSC)
                CreateByteField (OBUF, 0x36, BRSL)
                CreateByteField (OBUF, 0x37, BRSD)
                CreateByteField (OBUF, 0x38, BRDD)
                CreateByteField (OBUF, 0x39, BWSC)
                CreateByteField (OBUF, 0x3A, BWSL)
                CreateByteField (OBUF, 0x3B, BWSD)
                CreateByteField (OBUF, 0x3C, BWDD)
                CreateByteField (OBUF, 0x3D, BRWR)
                CreateByteField (OBUF, 0x3E, BWRD)
                CreateByteField (OBUF, 0x3F, BRDN)
                CreateByteField (OBUF, 0x40, BM2T)
                CreateByteField (OBUF, 0x41, RBNM)
                CreateByteField (OBUF, 0x42, RBWR)
                CreateByteField (OBUF, 0x43, RBPK)
                CreateByteField (OBUF, 0x44, BPWD)
                CreateByteField (OBUF, 0x45, BOCD)
                CreateDWordField (OBUF, 0x46, BOCV)
                CreateDWordField (OBUF, 0x4A, BOCF)
                CreateByteField (OBUF, 0x4E, BSMT)
                CreateDWordField (OBUF, 0x4F, BTOF)
                CreateByteField (OBUF, 0x53, BEDC)
                CreateWordField (OBUF, 0x54, BCNT)
                CreateByteField (OBUF, 0x56, BACS)
                CreateByteField (OBUF, 0x57, BCOS)
                CreateByteField (OBUF, 0x58, BCES)
                CreateByteField (OBUF, 0x59, BCBC)
                CreateByteField (OBUF, 0x5A, BCBA)
                CreateByteField (OBUF, 0x5B, BCBO)
                CreateByteField (OBUF, 0x5C, BCBE)
                CreateDWordField (OBUF, 0x5D, BCVP)
                CreateByteField (OBUF, 0x5F, BEDO)
                CreateDWordField (OBUF, 0x60, BNLC)
                CreateDWordField (OBUF, 0x64, BNLM)
                CreateDWordField (OBUF, 0x68, BNLS)
                CreateDWordField (OBUF, 0x6C, BPPL)
                CreateDWordField (OBUF, 0x70, BTDL)
                CreateDWordField (OBUF, 0x74, BEDL)
                CreateByteField (OBUF, 0x78, BFOC)
                CreateByteField (OBUF, 0x79, BSVD)
                CreateWordField (OBUF, 0x7A, BFCK)
                CreateByteField (OBUF, 0x7C, BDPC)
                CreateByteField (OBUF, 0x7D, BCPS)
                CreateWordField (OBUF, 0x7E, BFMX)
                CreateWordField (OBUF, 0x80, BGMX)
                CreateWordField (OBUF, 0x82, BVDG)
                CreateDWordField (OBUF, 0x84, BEOG)
                CreateDWordField (OBUF, 0x88, BEOS)
                CreateDWordField (OBUF, 0x8C, BPPT)
                CreateDWordField (OBUF, 0x90, BTDC)
                CreateDWordField (OBUF, 0x94, BEDM)
                CreateDWordField (OBUF, 0x98, BSCA)
                CreateByteField (OBUF, 0x9C, BDMI)
                CreateByteField (OBUF, 0x9D, BGAS)
                CreateByteField (OBUF, 0x9E, BGAG)
                CreateByteField (OBUF, 0x9F, BNPS)
                CreateByteField (OBUF, 0xA0, BNPG)
                CreateDWordField (OBUF, 0xA1, BPCS)
                CreateWordField (OBUF, 0xA5, BIOD)
                CreateWordField (OBUF, 0xA7, BGFV)
                CreateWordField (OBUF, 0xA9, BGFX)
                CreateDWordField (OBUF, 0xAB, BSTD)
                CreateDWordField (OBUF, 0xAF, BSED)
                CreateByteField (OBUF, 0xB3, BSLC)
                CreateByteField (OBUF, 0xB4, BGLC)
                If ((ACMD == 0x00010001))
                {
                    R101 (Arg0)
                }
                ElseIf ((ACMD == 0x00010002))
                {
                    R102 (Arg0)
                }
                ElseIf ((ACMD == 0x00020001))
                {
                    R201 (Arg0)
                }
                ElseIf ((ACMD == 0x00020002))
                {
                    R202 (Arg0)
                }
                ElseIf ((ACMD == 0x00020003))
                {
                    R203 (Arg0)
                }
                ElseIf ((ACMD == 0x00020004))
                {
                    R204 (Arg0)
                }
                ElseIf ((ACMD == 0x00020005))
                {
                    R205 (Arg0)
                }
                ElseIf ((ACMD == 0x00020006))
                {
                    R206 (Arg0)
                }
                ElseIf ((ACMD == 0x00020007))
                {
                    R207 (Arg0)
                }
                ElseIf ((ACMD == 0x00020008))
                {
                    R208 (Arg0)
                }
                ElseIf ((ACMD == 0x00020009))
                {
                    R209 (Arg0)
                }
                ElseIf ((ACMD == 0x0002000A))
                {
                    R20A (Arg0)
                }
                ElseIf ((ACMD == 0x0002000B))
                {
                    R20B (Arg0)
                }
                ElseIf ((ACMD == 0x0002000C))
                {
                    R20C (Arg0)
                }
                ElseIf ((ACMD == 0x0002000D))
                {
                    R20D (Arg0)
                }
                ElseIf ((ACMD == 0x0002000E))
                {
                    R20E (Arg0)
                }
                ElseIf ((ACMD == 0x0002000F))
                {
                    R20F (Arg0)
                }
                ElseIf ((ACMD == 0x00020010))
                {
                    R210 (Arg0)
                }
                ElseIf ((ACMD == 0x00020011))
                {
                    R211 (Arg0)
                }
                ElseIf ((ACMD == 0x00020012))
                {
                    R212 (Arg0)
                }
                ElseIf ((ACMD == 0x00020013))
                {
                    R213 (Arg0)
                }
                ElseIf ((ACMD == 0x00020014))
                {
                    R214 (Arg0)
                }
                ElseIf ((ACMD == 0x00020015))
                {
                    R215 (Arg0)
                }
                ElseIf ((ACMD == 0x00020016))
                {
                    R216 (Arg0)
                }
                ElseIf ((ACMD == 0x00020017))
                {
                    R217 (Arg0)
                }
                ElseIf ((ACMD == 0x00020018))
                {
                    R218 (Arg0)
                }
                ElseIf ((ACMD == 0x00020019))
                {
                    R219 (Arg0)
                }
                ElseIf ((ACMD == 0x0002001A))
                {
                    R21A (Arg0)
                }
                ElseIf ((ACMD == 0x0002001B))
                {
                    R21B (Arg0)
                }
                ElseIf ((ACMD == 0x0002001C))
                {
                    R21C (Arg0)
                }
                ElseIf ((ACMD == 0x0002001D))
                {
                    R21D (Arg0)
                }
                ElseIf ((ACMD == 0x0002001E))
                {
                    R21E (Arg0)
                }
                ElseIf ((ACMD == 0x0002001F))
                {
                    R21F (Arg0)
                }
                ElseIf ((ACMD == 0x00020020))
                {
                    R220 (Arg0)
                }
                ElseIf ((ACMD == 0x00020021))
                {
                    R221 (Arg0)
                }
                ElseIf ((ACMD == 0x00020022))
                {
                    R222 (Arg0)
                }
                ElseIf ((ACMD == 0x00020023))
                {
                    R223 (Arg0)
                }
                ElseIf ((ACMD == 0x00020024))
                {
                    R224 (Arg0)
                }
                ElseIf ((ACMD == 0x00020025))
                {
                    R225 (Arg0)
                }
                ElseIf ((ACMD == 0x00020026))
                {
                    R226 (Arg0)
                }
                ElseIf ((ACMD == 0x00020027))
                {
                    R227 (Arg0)
                }
                ElseIf ((ACMD == 0x00020028))
                {
                    R228 (Arg0)
                }
                ElseIf ((ACMD == 0x00020029))
                {
                    R229 (Arg0)
                }
                ElseIf ((ACMD == 0x0002002A))
                {
                    R22A (Arg0)
                }
                ElseIf ((ACMD == 0x0002002B))
                {
                    R22B (Arg0)
                }
                ElseIf ((ACMD == 0x0002002C))
                {
                    R22C (Arg0)
                }
                ElseIf ((ACMD == 0x0002002D))
                {
                    R22D (Arg0)
                }
                ElseIf ((ACMD == 0x0002002E))
                {
                    R22E (Arg0)
                }
                ElseIf ((ACMD == 0x0002002F))
                {
                    R22F (Arg0)
                }
                ElseIf ((ACMD == 0x00020030))
                {
                    R230 (Arg0)
                }
                ElseIf ((ACMD == 0x00020031))
                {
                    R231 (Arg0)
                }
                ElseIf ((ACMD == 0x00020032))
                {
                    R232 (Arg0)
                }
                ElseIf ((ACMD == 0x00020033))
                {
                    R233 (Arg0)
                }
                ElseIf ((ACMD == 0x00020034))
                {
                    R234 (Arg0)
                }
                ElseIf ((ACMD == 0x00020035))
                {
                    R235 (Arg0)
                }
                ElseIf ((ACMD == 0x00020036))
                {
                    R236 (Arg0)
                }
                ElseIf ((ACMD == 0x00020037))
                {
                    R237 (Arg0)
                }
                ElseIf ((ACMD == 0x00020038))
                {
                    R238 (Arg0)
                }
                ElseIf ((ACMD == 0x00020039))
                {
                    R239 (Arg0)
                }
                ElseIf ((ACMD == 0x0002003A))
                {
                    R23A (Arg0)
                }
                ElseIf ((ACMD == 0x00050001))
                {
                    R23B (Arg0)
                }
                ElseIf ((ACMD == 0x00050002))
                {
                    R23C (Arg0)
                }
                ElseIf ((ACMD == 0x00050003))
                {
                    R23D (Arg0)
                }
                ElseIf ((ACMD == 0x00050004))
                {
                    R23E (Arg0)
                }
                ElseIf ((ACMD == 0x00050005))
                {
                    R23F (Arg0)
                }
                ElseIf ((ACMD == 0x00030001))
                {
                    R301 (Arg0)
                }
                ElseIf ((ACMD == 0x00030002))
                {
                    R302 (Arg0)
                }
                ElseIf ((ACMD == 0x00030003))
                {
                    R303 (Arg0)
                }
                ElseIf ((ACMD == 0x00050006))
                {
                    R304 (Arg0)
                }
                ElseIf ((ACMD == 0x00050007))
                {
                    R305 (Arg0)
                }
                ElseIf ((ACMD == 0x00050008))
                {
                    R306 (Arg0)
                }
                ElseIf ((ACMD == 0x00050009))
                {
                    R307 (Arg0)
                }
                ElseIf ((ACMD == 0x0005000A))
                {
                    R308 (Arg0)
                }
                ElseIf ((ACMD == 0x0005000B))
                {
                    R309 (Arg0)
                }
                ElseIf ((ACMD == 0x0005000C))
                {
                    R30A (Arg0)
                }
                ElseIf ((ACMD == 0x0005000D))
                {
                    R30B (Arg0)
                }
                ElseIf ((ACMD == 0x0005000E))
                {
                    R30C (Arg0)
                }
                ElseIf ((ACMD == 0x0005000F))
                {
                    R30D (Arg0)
                }
                ElseIf ((ACMD == 0x00040001))
                {
                    R401 (Arg0)
                }
                ElseIf ((ACMD == 0x00040002))
                {
                    R402 (Arg0)
                }
                Else
                {
                }

                BSCD = ASCD /* \AOD_.ASCD */
                BSTS = ASTS /* \AOD_.ASTS */
                BSD1 = RSD1 /* \AOD_.RSD1 */
                BBSN = MBSN /* \AOD_.MBSN */
                BBVS = MBVS /* \AOD_.MBVS */
                BBCB = MBCB /* \AOD_.MBCB */
                BBMC = MBMC /* \AOD_.MBMC */
                BTCL = TTCL /* \AOD_.TTCL */
                BTRR = TRCR /* \AOD_.TRCR */
                BTRW = TRCW /* \AOD_.TRCW */
                BRAS = TRAS /* \AOD_.TRAS */
                BTRP = TTRP /* \AOD_.TTRP */
                BVIO = VDIO /* \AOD_.VDIO */
                BVTT = VMTT /* \AOD_.VMTT */
                BVPP = VMPP /* \AOD_.VMPP */
                BODT = PODT /* \AOD_.PODT */
                BRPG = TRPG /* \AOD_.TRPG */
                BTRC = TTRC /* \AOD_.TTRC */
                BRFC = TRFC /* \AOD_.TRFC */
                BRF2 = TRF2 /* \AOD_.TRF2 */
                BRF4 = TRF4 /* \AOD_.TRF4 */
                BFAW = TFAW /* \AOD_.TFAW */
                BRRS = TRRS /* \AOD_.TRRS */
                BRRL = TRRL /* \AOD_.TRRL */
                BTWR = TTWR /* \AOD_.TTWR */
                BWTS = TWTS /* \AOD_.TWTS */
                BWTL = TWTL /* \AOD_.TWTL */
                BCKE = TCKE /* \AOD_.TCKE */
                BCWL = TCWL /* \AOD_.TCWL */
                BRTP = TRTP /* \AOD_.TRTP */
                BRSC = TRSC /* \AOD_.TRSC */
                BRSL = TRSL /* \AOD_.TRSL */
                BRSD = TRSD /* \AOD_.TRSD */
                BRDD = TRDD /* \AOD_.TRDD */
                BWSC = TWSC /* \AOD_.TWSC */
                BWSL = TWSL /* \AOD_.TWSL */
                BWSD = TWSD /* \AOD_.TWSD */
                BWDD = TWDD /* \AOD_.TWDD */
                BRWR = TRWR /* \AOD_.TRWR */
                BWRD = TWRD /* \AOD_.TWRD */
                BRDN = GRDN /* \AOD_.GRDN */
                BM2T = CM2T /* \AOD_.CM2T */
                RBNM = RTNM /* \AOD_.RTNM */
                RBWR = RTWR /* \AOD_.RTWR */
                RBPK = RTPK /* \AOD_.RTPK */
                BPWD = PWDE /* \AOD_.PWDE */
                BOCD = OCDS /* \AOD_.OCDS */
                BOCV = OCVM /* \AOD_.OCVM */
                BOCF = OCFM /* \AOD_.OCFM */
                BSMT = SMTE /* \AOD_.SMTE */
                BTOF = TOFF /* \AOD_.TOFF */
                BEDC = EDCT /* \AOD_.EDCT */
                BCNT = ACNT /* \AOD_.ACNT */
                BACS = ACSP /* \AOD_.ACSP */
                BCOS = COSP /* \AOD_.COSP */
                BCES = CESP /* \AOD_.CESP */
                BCBC = CBCK /* \AOD_.CBCK */
                BCBA = CBAC /* \AOD_.CBAC */
                BCBO = CBCO /* \AOD_.CBCO */
                BCBE = CBCE /* \AOD_.CBCE */
                BCVP = CDVP /* \AOD_.CDVP */
                BEDO = EDCO /* \AOD_.EDCO */
                BNLC = INLC /* \AOD_.INLC */
                BNLM = INLM /* \AOD_.INLM */
                BNLS = INLS /* \AOD_.INLS */
                BPPL = PPTL /* \AOD_.PPTL */
                BTDL = TDCL /* \AOD_.TDCL */
                BEDL = EDCL /* \AOD_.EDCL */
                BFOC = FCOC /* \AOD_.FCOC */
                BSVD = SVID /* \AOD_.SVID */
                BFCK = FCLK /* \AOD_.FCLK */
                BDPC = MDPC /* \AOD_.MDPC */
                BCPS = MCPS /* \AOD_.MCPS */
                BFMX = FMAX /* \AOD_.FMAX */
                BGMX = GMAX /* \AOD_.GMAX */
                BVDG = CVDG /* \AOD_.CVDG */
                BEOG = ECOG /* \AOD_.ECOG */
                BEOS = ECOS /* \AOD_.ECOS */
                BPPT = PPTS /* \AOD_.PPTS */
                BTDC = TDCS /* \AOD_.TDCS */
                BEDM = EDCS /* \AOD_.EDCS */
                BSCA = SCAS /* \AOD_.SCAS */
                BDMI = DMIS /* \AOD_.DMIS */
                BGAS = GAMS /* \AOD_.GAMS */
                BGAG = GAMG /* \AOD_.GAMG */
                BNPS = NPSS /* \AOD_.NPSS */
                BNPG = NPSG /* \AOD_.NPSG */
                BPCS = COPS /* \AOD_.COPS */
                BIOD = IVDG /* \AOD_.IVDG */
                BGFV = OGFV /* \AOD_.OGFV */
                BGFX = OGFX /* \AOD_.OGFX */
                BSTD = OTDC /* \AOD_.OTDC */
                BSED = OEDC /* \AOD_.OEDC */
                BSLC = DMLC /* \AOD_.DMLC */
                BGLC = DMLG /* \AOD_.DMLG */
                Return (OBUF) /* \AOD_.OBUF */
            }

            Method (AM06, 1, NotSerialized)
            {
                Name (INFO, Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                CPTB (Arg0, INFO)
                Return (INFO) /* \AOD_.AM06.INFO */
            }

            Method (AM07, 1, NotSerialized)
            {
                Name (BSPD, Buffer (0x0214){})
                If ((Arg0 > 0x0F))
                {
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                If ((Arg0 == Zero))
                {
                    BSPD = DSPD /* \AOD_.DSPD */
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                Local0 = Zero
                Local0 += (Arg0 * 0x0214)
                Local1 = 0x0214
                Local2 = Zero
                While (Local1)
                {
                    BSPD [Local2] = DerefOf (DSPD [Local0])
                    Local1--
                    Local0++
                    Local2++
                }

                Return (BSPD) /* \AOD_.AM07.BSPD */
            }

            Method (AM08, 0, NotSerialized)
            {
                Return (OBIE) /* \AOD_.OBIE */
            }

            Name (CMDV, 0x05)
            Name (OBUF, Buffer (0xC8){})
            OperationRegion (AODT, SystemMemory, 0xAB93E018, 0x220C)
            Field (AODT, AnyAcc, NoLock, Preserve)
            {
                ASCD,   16, 
                ASTS,   32, 
                RSD1,   16, 
                MBSN,   32, 
                MBVS,   32, 
                MBCB,   32, 
                MBMC,   16, 
                TTCL,   8, 
                TRCR,   8, 
                TRCW,   8, 
                TRAS,   8, 
                TTRP,   8, 
                VDIO,   16, 
                VMTT,   16, 
                VMPP,   16, 
                PODT,   16, 
                TRPG,   16, 
                TTRC,   8, 
                TRFC,   16, 
                TRF2,   16, 
                TRF4,   16, 
                TFAW,   8, 
                TRRS,   8, 
                TRRL,   8, 
                TTWR,   8, 
                TWTS,   8, 
                TWTL,   8, 
                TCKE,   8, 
                TCWL,   8, 
                TRTP,   8, 
                TRSC,   8, 
                TRSL,   8, 
                TRSD,   8, 
                TRDD,   8, 
                TWSC,   8, 
                TWSL,   8, 
                TWSD,   8, 
                TWDD,   8, 
                TRWR,   8, 
                TWRD,   8, 
                GRDN,   8, 
                CM2T,   8, 
                RTNM,   8, 
                RTWR,   8, 
                RTPK,   8, 
                PWDE,   8, 
                OCDS,   8, 
                OCVM,   32, 
                OCFM,   32, 
                SMTE,   8, 
                TOFF,   32, 
                EDCT,   8, 
                ACNT,   16, 
                ACSP,   8, 
                COSP,   8, 
                CESP,   8, 
                CBCK,   8, 
                CBAC,   8, 
                CBCO,   8, 
                CBCE,   8, 
                CDVP,   16, 
                EDCO,   8, 
                INLC,   32, 
                INLM,   32, 
                INLS,   32, 
                PPTL,   32, 
                TDCL,   32, 
                EDCL,   32, 
                FCOC,   8, 
                SVID,   8, 
                FCLK,   16, 
                MDPC,   8, 
                MCPS,   8, 
                FMAX,   16, 
                GMAX,   16, 
                CVDG,   16, 
                ECOG,   32, 
                ECOS,   32, 
                PPTS,   32, 
                TDCS,   32, 
                EDCS,   32, 
                SCAS,   32, 
                DMIS,   8, 
                GAMS,   8, 
                GAMG,   8, 
                NPSS,   8, 
                NPSG,   8, 
                COPS,   32, 
                IVDG,   16, 
                OGFV,   16, 
                OGFX,   16, 
                OTDC,   32, 
                OEDC,   32, 
                DMLC,   8, 
                DMLG,   8, 
                MRSD,   88, 
                RSD2,   64, 
                NDPC,   8, 
                NCPS,   8, 
                RSD3,   16, 
                DSPD,   68096
            }

            Method (R101, 1, NotSerialized)
            {
                MBVS = 0x05
                MBCB = 0x80000000
                ASMI (0xB9)
            }

            Method (R102, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x40000000
                MBCB = Local0
                ASMI (0xBA)
            }

            Method (R201, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MCLK)
                MBVS = 0x05
                MBMC = MCLK /* \AOD_.R201.MCLK */
                MBCB = One
                ASMI (0xB9)
            }

            Method (R202, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTCL)
                MBVS = 0x05
                TTCL = MTCL /* \AOD_.R202.MTCL */
                MBCB = 0x02
                ASMI (0xB9)
            }

            Method (R203, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MRDD)
                MBVS = 0x05
                TRCR = MRDD /* \AOD_.R203.MRDD */
                MBCB = 0x04
                ASMI (0xB9)
            }

            Method (R204, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MRDW)
                MBVS = 0x05
                TRCW = MRDW /* \AOD_.R204.MRDW */
                MBCB = 0x08
                ASMI (0xB9)
            }

            Method (R205, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTRS)
                MBVS = 0x05
                TRAS = MTRS /* \AOD_.R205.MTRS */
                MBCB = 0x20
                ASMI (0xB9)
            }

            Method (R206, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTRP)
                MBVS = 0x05
                TTRP = MTRP /* \AOD_.R206.MTRP */
                MBCB = 0x10
                ASMI (0xB9)
            }

            Method (R207, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MPOT)
                MBVS = 0x05
                PODT = MPOT /* \AOD_.R207.MPOT */
                MBCB = 0x3000
                ASMI (0xB9)
            }

            Method (R208, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MRPG)
                MBVS = 0x05
                TRPG = MRPG /* \AOD_.R208.MRPG */
                MBCB = 0x4000
                ASMI (0xB9)
            }

            Method (R209, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TTRC = SVAL /* \AOD_.R209.SVAL */
                MBCB = 0x5000
                ASMI (0xB9)
            }

            Method (R20A, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRFC = SVAL /* \AOD_.R20A.SVAL */
                MBCB = 0x6000
                ASMI (0xB9)
            }

            Method (R20B, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRF2 = SVAL /* \AOD_.R20B.SVAL */
                MBCB = 0x7000
                ASMI (0xB9)
            }

            Method (R20C, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRF4 = SVAL /* \AOD_.R20C.SVAL */
                MBCB = 0x8000
                ASMI (0xB9)
            }

            Method (R20D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TFAW = SVAL /* \AOD_.R20D.SVAL */
                MBCB = 0x9000
                ASMI (0xB9)
            }

            Method (R20E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRRS = SVAL /* \AOD_.R20E.SVAL */
                MBCB = 0xA000
                ASMI (0xB9)
            }

            Method (R20F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRRL = SVAL /* \AOD_.R20F.SVAL */
                MBCB = 0xB000
                ASMI (0xB9)
            }

            Method (R210, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TTWR = SVAL /* \AOD_.R210.SVAL */
                MBCB = 0xC000
                ASMI (0xB9)
            }

            Method (R211, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWTS = SVAL /* \AOD_.R211.SVAL */
                MBCB = 0xD000
                ASMI (0xB9)
            }

            Method (R212, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWTL = SVAL /* \AOD_.R212.SVAL */
                MBCB = 0xE000
                ASMI (0xB9)
            }

            Method (R213, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TCKE = SVAL /* \AOD_.R213.SVAL */
                MBCB = 0xF000
                ASMI (0xB9)
            }

            Method (R214, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TCWL = SVAL /* \AOD_.R214.SVAL */
                MBCB = 0x00010000
                ASMI (0xB9)
            }

            Method (R215, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRTP = SVAL /* \AOD_.R215.SVAL */
                MBCB = 0x00020000
                ASMI (0xB9)
            }

            Method (R216, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSC = SVAL /* \AOD_.R216.SVAL */
                MBCB = 0x00030000
                ASMI (0xB9)
            }

            Method (R217, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSL = SVAL /* \AOD_.R217.SVAL */
                MBCB = 0x00040000
                ASMI (0xB9)
            }

            Method (R218, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSD = SVAL /* \AOD_.R218.SVAL */
                MBCB = 0x00050000
                ASMI (0xB9)
            }

            Method (R219, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRDD = SVAL /* \AOD_.R219.SVAL */
                MBCB = 0x00060000
                ASMI (0xB9)
            }

            Method (R21A, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSC = SVAL /* \AOD_.R21A.SVAL */
                MBCB = 0x00070000
                ASMI (0xB9)
            }

            Method (R21B, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSL = SVAL /* \AOD_.R21B.SVAL */
                MBCB = 0x00080000
                ASMI (0xB9)
            }

            Method (R21C, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSD = SVAL /* \AOD_.R21C.SVAL */
                MBCB = 0x00090000
                ASMI (0xB9)
            }

            Method (R21D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWDD = SVAL /* \AOD_.R21D.SVAL */
                MBCB = 0x000A0000
                ASMI (0xB9)
            }

            Method (R21E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRWR = SVAL /* \AOD_.R21E.SVAL */
                MBCB = 0x000B0000
                ASMI (0xB9)
            }

            Method (R21F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWRD = SVAL /* \AOD_.R21F.SVAL */
                MBCB = 0x000C0000
                ASMI (0xB9)
            }

            Method (R220, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GRDN = SVAL /* \AOD_.R220.SVAL */
                MBCB = 0x000D0000
                ASMI (0xB9)
            }

            Method (R221, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CM2T = SVAL /* \AOD_.R221.SVAL */
                MBCB = 0x000E0000
                ASMI (0xB9)
            }

            Method (R222, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTNM = SVAL /* \AOD_.R222.SVAL */
                MBCB = 0x000F0000
                ASMI (0xB9)
            }

            Method (R223, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTWR = SVAL /* \AOD_.R223.SVAL */
                MBCB = 0x00100000
                ASMI (0xB9)
            }

            Method (R224, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTPK = SVAL /* \AOD_.R224.SVAL */
                MBCB = 0x00200000
                ASMI (0xB9)
            }

            Method (R225, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                PWDE = SVAL /* \AOD_.R225.SVAL */
                MBCB = 0x00300000
                ASMI (0xB9)
            }

            Method (R226, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SMTE = SVAL /* \AOD_.R226.SVAL */
                MBCB = 0x00400000
                ASMI (0xB9)
            }

            Method (R227, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ACNT = SVAL /* \AOD_.R227.SVAL */
                MBCB = 0x00500000
                ASMI (0xB9)
            }

            Method (R228, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                EDCT = SVAL /* \AOD_.R228.SVAL */
                MBCB = 0x00600000
                ASMI (0xB9)
            }

            Method (R229, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ACSP = SVAL /* \AOD_.R229.SVAL */
                MBCB = 0x00800000
                ASMI (0xB9)
            }

            Method (R22A, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                COSP = SVAL /* \AOD_.R22A.SVAL */
                MBCB = 0x00900000
                ASMI (0xB9)
            }

            Method (R22B, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CESP = SVAL /* \AOD_.R22B.SVAL */
                MBCB = 0x00A00000
                ASMI (0xB9)
            }

            Method (R22C, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCK = SVAL /* \AOD_.R22C.SVAL */
                MBCB = 0x00B00000
                ASMI (0xB9)
            }

            Method (R22D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBAC = SVAL /* \AOD_.R22D.SVAL */
                MBCB = 0x00C00000
                ASMI (0xB9)
            }

            Method (R22E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCO = SVAL /* \AOD_.R22E.SVAL */
                MBCB = 0x00D00000
                ASMI (0xB9)
            }

            Method (R22F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCE = SVAL /* \AOD_.R22F.SVAL */
                MBCB = 0x00E00000
                ASMI (0xB9)
            }

            Method (R230, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CDVP = SVAL /* \AOD_.R230.SVAL */
                MBCB = 0x00700000
                ASMI (0xB9)
            }

            Method (R231, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                INLM = SVAL /* \AOD_.R231.SVAL */
                MBCB = 0x00100001
                ASMI (0xB9)
            }

            Method (R232, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                INLS = SVAL /* \AOD_.R232.SVAL */
                MBCB = 0x00100002
                ASMI (0xB9)
            }

            Method (R233, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FCOC = SVAL /* \AOD_.R233.SVAL */
                MBCB = 0x00100003
                ASMI (0xB9)
            }

            Method (R234, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SVID = SVAL /* \AOD_.R234.SVAL */
                MBCB = 0x00100004
                ASMI (0xB9)
            }

            Method (R235, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FCLK = SVAL /* \AOD_.R235.SVAL */
                MBCB = 0x00100005
                ASMI (0xB9)
            }

            Method (R236, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FMAX = SVAL /* \AOD_.R236.SVAL */
                MBCB = 0x00100006
                ASMI (0xB9)
            }

            Method (R237, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GMAX = SVAL /* \AOD_.R237.SVAL */
                MBCB = 0x00100007
                ASMI (0xB9)
            }

            Method (R238, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CVDG = SVAL /* \AOD_.R238.SVAL */
                MBCB = 0x00100008
                ASMI (0xB9)
            }

            Method (R239, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100009
                MBCB = Local0
                ASMI (0xB9)
            }

            Method (R23A, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ECOS = SVAL /* \AOD_.R23A.SVAL */
                MBCB = 0x0010000A
                ASMI (0xB9)
            }

            Method (R23B, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                PPTS = SVAL /* \AOD_.R23B.SVAL */
                MBCB = 0x0010000B
                ASMI (0xB9)
            }

            Method (R23C, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TDCS = SVAL /* \AOD_.R23C.SVAL */
                MBCB = 0x0010000C
                ASMI (0xB9)
            }

            Method (R23D, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                EDCS = SVAL /* \AOD_.R23D.SVAL */
                MBCB = 0x0010000D
                ASMI (0xB9)
            }

            Method (R23E, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SCAS = SVAL /* \AOD_.R23E.SVAL */
                MBCB = 0x0010000E
                ASMI (0xB9)
            }

            Method (R23F, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                DMIS = SVAL /* \AOD_.R23F.SVAL */
                MBCB = 0x0010000F
                ASMI (0xB9)
            }

            Method (R301, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVIO)
                MBVS = 0x05
                VDIO = MVIO /* \AOD_.R301.MVIO */
                MBCB = 0x0100
                ASMI (0xBA)
            }

            Method (R302, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVTT)
                MBVS = 0x05
                VMTT = MVTT /* \AOD_.R302.MVTT */
                MBCB = 0x0200
                ASMI (0xBA)
            }

            Method (R303, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                VMPP = MVPP /* \AOD_.R303.MVPP */
                MBCB = 0x2000
                ASMI (0xBA)
            }

            Method (R304, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GAMS = SVAL /* \AOD_.R304.SVAL */
                MBCB = 0x00100010
                ASMI (0xB9)
            }

            Method (R305, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100020
                MBCB = Local0
                ASMI (0xB9)
            }

            Method (R306, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                NPSS = SVAL /* \AOD_.R306.SVAL */
                MBCB = 0x00100030
                ASMI (0xB9)
            }

            Method (R307, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100031
                MBCB = Local0
                ASMI (0xB9)
            }

            Method (R308, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                COPS = SVAL /* \AOD_.R308.SVAL */
                MBCB = 0x00100032
                ASMI (0xB9)
            }

            Method (R309, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                IVDG = SVAL /* \AOD_.R309.SVAL */
                MBCB = 0x00100033
                ASMI (0xB9)
            }

            Method (R30A, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                OTDC = SVAL /* \AOD_.R30A.SVAL */
                MBCB = 0x00100034
                ASMI (0xB9)
            }

            Method (R30B, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                OEDC = SVAL /* \AOD_.R30B.SVAL */
                MBCB = 0x00100035
                ASMI (0xB9)
            }

            Method (R30C, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                DMLC = SVAL /* \AOD_.R30C.SVAL */
                MBCB = 0x00100036
                ASMI (0xB9)
            }

            Method (R30D, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100037
                MBCB = Local0
                ASMI (0xB9)
            }

            Method (R401, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                MBCB = 0x01000000
                ASMI (0xBA)
            }

            Method (R402, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                MBCB = 0x02000000
                ASMI (0xBA)
            }

            Method (R505, 1, NotSerialized)
            {
                MBVS = 0x05
            }

            Name (WQBA, Buffer (0x0A57)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x47, 0x0A, 0x00, 0x00, 0x38, 0x37, 0x00, 0x00,  // G...87..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xDB, 0x9A, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x0F, 0x10, 0x22, 0x21, 0x04, 0x12, 0x01,  // ..."!...
                /* 0028 */  0xA1, 0xC8, 0x2C, 0x0C, 0x86, 0x10, 0x38, 0x2E,  // ..,...8.
                /* 0030 */  0x84, 0x1C, 0x40, 0x48, 0x1C, 0x14, 0x4A, 0x08,  // ..@H..J.
                /* 0038 */  0x84, 0xFA, 0x13, 0xC8, 0xAF, 0x00, 0x84, 0x0E,  // ........
                /* 0040 */  0x05, 0xC8, 0x14, 0x60, 0x50, 0x80, 0x53, 0x04,  // ...`P.S.
                /* 0048 */  0x11, 0xF4, 0x2A, 0xC0, 0xA6, 0x00, 0x93, 0x02,  // ..*.....
                /* 0050 */  0x2C, 0x0A, 0xD0, 0x2E, 0xC0, 0xB2, 0x00, 0xDD,  // ,.......
                /* 0058 */  0x02, 0xA4, 0xC3, 0x12, 0x91, 0xE0, 0x28, 0x31,  // ......(1
                /* 0060 */  0xE0, 0x28, 0x9D, 0xD8, 0xC2, 0x0D, 0x1B, 0xBC,  // .(......
                /* 0068 */  0x50, 0x14, 0xCD, 0x20, 0x4A, 0x82, 0xCA, 0x05,  // P.. J...
                /* 0070 */  0xF8, 0x46, 0x10, 0x78, 0xB9, 0x02, 0x24, 0x4F,  // .F.x..$O
                /* 0078 */  0x40, 0x9A, 0x05, 0x18, 0x16, 0x60, 0x5D, 0x80,  // @....`].
                /* 0080 */  0xEC, 0x21, 0x50, 0xA9, 0x43, 0x40, 0xC9, 0x19,  // .!P.C@..
                /* 0088 */  0x02, 0x6A, 0x00, 0xAD, 0x4E, 0x40, 0xF8, 0x95,  // .j..N@..
                /* 0090 */  0x4E, 0x09, 0x49, 0x10, 0xCE, 0x58, 0xC5, 0xE3,  // N.I..X..
                /* 0098 */  0x6B, 0x16, 0x4D, 0xCF, 0x49, 0xCE, 0x31, 0xE4,  // k.M.I.1.
                /* 00A0 */  0x78, 0x5C, 0xE8, 0x41, 0xF0, 0x50, 0x1A, 0x40,  // x\.A.P.@
                /* 00A8 */  0x98, 0xFC, 0x21, 0x2B, 0x06, 0x0C, 0x4A, 0xC2,  // ..!+..J.
                /* 00B0 */  0x58, 0xA8, 0x8B, 0x51, 0xA3, 0x46, 0xCA, 0x06,  // X..Q.F..
                /* 00B8 */  0x64, 0x88, 0xD2, 0x46, 0x8D, 0x1E, 0xD0, 0xF9,  // d..F....
                /* 00C0 */  0x1D, 0xC9, 0xD9, 0x1D, 0xDD, 0x91, 0x24, 0x30,  // ......$0
                /* 00C8 */  0xEA, 0x31, 0x1D, 0x63, 0x61, 0x33, 0x12, 0x6A,  // .1.ca3.j
                /* 00D0 */  0x8C, 0xE6, 0xA0, 0x48, 0xB8, 0x41, 0xA3, 0x25,  // ...H.A.%
                /* 00D8 */  0xC2, 0x6A, 0x5C, 0xB1, 0xCF, 0xCC, 0xC2, 0x87,  // .j\.....
                /* 00E0 */  0x25, 0x8C, 0x23, 0x38, 0xB0, 0x83, 0xB5, 0x68,  // %.#8...h
                /* 00E8 */  0x18, 0xA1, 0x15, 0x04, 0xA7, 0x41, 0x1C, 0x45,  // .....A.E
                /* 00F0 */  0x94, 0x30, 0x0C, 0xCF, 0x98, 0x81, 0x8E, 0x92,  // .0......
                /* 00F8 */  0x21, 0x85, 0x09, 0x7A, 0x02, 0x41, 0x4E, 0x9E,  // !..z.AN.
                /* 0100 */  0x61, 0x19, 0xE2, 0x0C, 0x38, 0x56, 0x8C, 0x50,  // a...8V.P
                /* 0108 */  0x21, 0x31, 0x03, 0x09, 0xFE, 0xFF, 0x3F, 0x81,  // !1....?.
                /* 0110 */  0xAE, 0x31, 0xE4, 0x19, 0x88, 0xDC, 0x03, 0x4E,  // .1.....N
                /* 0118 */  0x20, 0x48, 0xF4, 0x28, 0xC1, 0x8D, 0x6B, 0x54,  //  H.(..kT
                /* 0120 */  0x36, 0xA6, 0xB3, 0xC1, 0x0D, 0xCC, 0x04, 0x71,  // 6......q
                /* 0128 */  0x0E, 0x0F, 0x23, 0x03, 0x42, 0x13, 0x88, 0x1F,  // ..#.B...
                /* 0130 */  0x3B, 0x7C, 0x02, 0xBB, 0x3F, 0x0E, 0x48, 0x21,  // ;|..?.H!
                /* 0138 */  0x82, 0x2E, 0x04, 0x67, 0x5A, 0xA3, 0x80, 0x77,  // ...gZ..w
                /* 0140 */  0xC4, 0xB3, 0x43, 0x5B, 0x10, 0x3A, 0x0B, 0xC4,  // ..C[.:..
                /* 0148 */  0x6A, 0x0C, 0x45, 0x10, 0x11, 0x82, 0x46, 0x31,  // j.E...F1
                /* 0150 */  0x5E, 0x84, 0x50, 0x21, 0xA2, 0x44, 0x3D, 0xE7,  // ^.P!.D=.
                /* 0158 */  0x20, 0xB5, 0x09, 0x50, 0x06, 0x22, 0xB4, 0x60,  //  ..P.".`
                /* 0160 */  0x46, 0x60, 0xF6, 0xCF, 0x00, 0xCC, 0x02, 0xC4,  // F`......
                /* 0168 */  0x1F, 0x81, 0x25, 0x9C, 0x08, 0x64, 0x64, 0x34,  // ..%..dd4
                /* 0170 */  0xF4, 0xB0, 0xE0, 0x93, 0x00, 0x3B, 0x20, 0x78,  // .....; x
                /* 0178 */  0x3E, 0xA7, 0x66, 0x02, 0x07, 0x86, 0x10, 0xAF,  // >.f.....
                /* 0180 */  0x04, 0x88, 0x3A, 0x5A, 0x50, 0x02, 0x4B, 0x39,  // ..:ZP.K9
                /* 0188 */  0x1A, 0x10, 0xDB, 0x03, 0xD3, 0x3D, 0xE0, 0x08,  // .....=..
                /* 0190 */  0xCF, 0xDD, 0x97, 0x83, 0x53, 0xF3, 0x4F, 0xC3,  // ....S.O.
                /* 0198 */  0xD3, 0x7C, 0x48, 0xC0, 0x0C, 0xD1, 0x63, 0x3D,  // .|H...c=
                /* 01A0 */  0x88, 0x80, 0x87, 0xC8, 0x4E, 0x09, 0x06, 0xC4,  // ....N...
                /* 01A8 */  0x7B, 0xBF, 0x16, 0x90, 0x11, 0xBC, 0x24, 0x18,  // {.....$.
                /* 01B0 */  0xD0, 0x93, 0x78, 0x40, 0x00, 0xCB, 0x41, 0xE3,  // ..x@..A.
                /* 01B8 */  0xC0, 0x4F, 0xA8, 0xE2, 0x3B, 0x00, 0x3D, 0x12,  // .O..;.=.
                /* 01C0 */  0xB0, 0x19, 0xC5, 0x37, 0x41, 0x59, 0xC7, 0x07,  // ...7AY..
                /* 01C8 */  0xF4, 0x9C, 0xA3, 0x3D, 0x3B, 0xBC, 0x2C, 0x34,  // ...=;.,4
                /* 01D0 */  0x7B, 0xC5, 0x20, 0x04, 0xAF, 0x01, 0xBE, 0x29,  // {. ....)
                /* 01D8 */  0xF8, 0x34, 0x62, 0x51, 0xAB, 0x93, 0x93, 0x55,  // .4bQ...U
                /* 01E0 */  0x79, 0xC4, 0x14, 0xDC, 0x43, 0xE0, 0x32, 0xE0,  // y...C.2.
                /* 01E8 */  0x34, 0x74, 0x8F, 0x17, 0x1C, 0x0A, 0xC6, 0x4B,  // 4t.....K
                /* 01F0 */  0xFF, 0xFF, 0xE3, 0x05, 0xF7, 0xBC, 0x8E, 0x17,  // ........
                /* 01F8 */  0x2C, 0xC7, 0x84, 0x87, 0x8D, 0xAA, 0x20, 0x34,  // ,..... 4
                /* 0200 */  0x88, 0x03, 0x6E, 0x7E, 0x00, 0xE4, 0x6A, 0xE1,  // ..n~..j.
                /* 0208 */  0x11, 0xB3, 0xB9, 0x9C, 0x15, 0x3B, 0xA2, 0xF0,  // .....;..
                /* 0210 */  0xE1, 0xF1, 0x61, 0x78, 0xC4, 0xEF, 0x0D, 0xC5,  // ..ax....
                /* 0218 */  0x82, 0x48, 0x20, 0x84, 0xCE, 0x0C, 0x47, 0x0E,  // .H ...G.
                /* 0220 */  0x16, 0x67, 0x27, 0x08, 0x11, 0x58, 0xDA, 0xD0,  // .g'..X..
                /* 0228 */  0xD1, 0x43, 0xF6, 0xA8, 0x5E, 0x62, 0x8C, 0xF1,  // .C..^b..
                /* 0230 */  0x44, 0x60, 0xD4, 0x53, 0x3A, 0x7A, 0xF0, 0x01,  // D`.S:z..
                /* 0238 */  0x7A, 0xF4, 0x80, 0xCF, 0xFF, 0xFF, 0xE8, 0x71,  // z......q
                /* 0240 */  0x92, 0xC6, 0x2C, 0x11, 0xA3, 0x47, 0x9F, 0x23,  // ..,..G.#
                /* 0248 */  0x3C, 0x9D, 0xB7, 0x1F, 0x7E, 0x14, 0x49, 0xE0,  // <...~.I.
                /* 0250 */  0xF8, 0x10, 0x1A, 0x3D, 0x78, 0x4E, 0x3F, 0x1E,  // ...=xN?.
                /* 0258 */  0x3D, 0xF8, 0xC7, 0xE8, 0xD1, 0x83, 0x67, 0x0C,  // =.....g.
                /* 0260 */  0xE7, 0x86, 0xBB, 0xDA, 0x78, 0xE4, 0x60, 0x1F,  // ....x.`.
                /* 0268 */  0x2F, 0x5E, 0xDE, 0x71, 0x0B, 0x14, 0x3E, 0x67,  // /^.q..>g
                /* 0270 */  0x4F, 0x06, 0xF0, 0x1E, 0x84, 0x3B, 0x6F, 0x01,  // O....;o.
                /* 0278 */  0x97, 0x11, 0x70, 0xC1, 0x4F, 0x1D, 0x9F, 0xAB,  // ..p.O...
                /* 0280 */  0xA8, 0x44, 0x18, 0xD4, 0xD1, 0x0A, 0x5C, 0xFF,  // .D....\.
                /* 0288 */  0xFF, 0xA3, 0x15, 0xC0, 0x84, 0xFB, 0xC3, 0xAB,  // ........
                /* 0290 */  0xD5, 0xA3, 0x15, 0xD8, 0x43, 0xBE, 0x24, 0xF4,  // ....C.$.
                /* 0298 */  0x23, 0x70, 0x6C, 0x08, 0x39, 0x39, 0x5A, 0xA1,  // #pl.99Z.
                /* 02A0 */  0x4E, 0x46, 0xB8, 0xA0, 0x07, 0x2B, 0xA0, 0x7B,  // NF...+.{
                /* 02A8 */  0xD0, 0xC0, 0x1D, 0x0F, 0xE0, 0xFC, 0xFF, 0x8F,  // ........
                /* 02B0 */  0x07, 0x7C, 0x60, 0xFC, 0xF4, 0x02, 0x3E, 0x11,  // .|`...>.
                /* 02B8 */  0x47, 0x21, 0x9F, 0xCA, 0xA0, 0x9F, 0x20, 0x3D,  // G!.... =
                /* 02C0 */  0x5A, 0xF0, 0x1C, 0xAB, 0x80, 0xC3, 0xA9, 0x0C,  // Z.......
                /* 02C8 */  0x38, 0x0C, 0x19, 0x7C, 0xF2, 0x0E, 0x53, 0xE8,  // 8..|..S.
                /* 02D0 */  0x03, 0x89, 0xA7, 0x50, 0xEB, 0x2D, 0x84, 0xC0,  // ...P.-..
                /* 02D8 */  0x1E, 0x90, 0x8F, 0x12, 0x41, 0x4E, 0x24, 0xC2,  // ....AN$.
                /* 02E0 */  0xB9, 0xF8, 0x38, 0x05, 0x98, 0xF8, 0xFF, 0x8F,  // ..8.....
                /* 02E8 */  0x1A, 0x7F, 0xCB, 0x60, 0xD7, 0x29, 0x30, 0x9C,  // ...`.)0.
                /* 02F0 */  0x82, 0xE0, 0x4D, 0xCA, 0xE3, 0x07, 0xDF, 0xB1,  // ..M.....
                /* 02F8 */  0x07, 0x77, 0x0A, 0x82, 0xE7, 0x71, 0x48, 0x42,  // .w...qHB
                /* 0300 */  0x3E, 0x8F, 0x97, 0x00, 0xDC, 0x45, 0x08, 0x7F,  // >....E..
                /* 0308 */  0x10, 0x02, 0x3E, 0xB2, 0x16, 0x4A, 0x4F, 0x41,  // ..>..JOA
                /* 0310 */  0x16, 0x02, 0x83, 0x3A, 0x08, 0x01, 0x2E, 0xFF,  // ...:....
                /* 0318 */  0xFF, 0x07, 0x21, 0x60, 0xE7, 0xED, 0xB6, 0xA1,  // ..!`....
                /* 0320 */  0x6B, 0x90, 0x6F, 0x03, 0x4F, 0x03, 0xAF, 0x11,  // k.o.O...
                /* 0328 */  0x51, 0x1E, 0x84, 0x7C, 0x13, 0x7A, 0x21, 0x88,  // Q..|.z!.
                /* 0330 */  0x10, 0xE5, 0x78, 0x4F, 0x20, 0xC2, 0xD3, 0x90,  // ..xO ...
                /* 0338 */  0x27, 0x1C, 0x26, 0xDC, 0xC9, 0x46, 0x79, 0x69,  // '.&..Fyi
                /* 0340 */  0x08, 0x63, 0xE8, 0x58, 0x81, 0x22, 0xC7, 0x0F,  // .c.X."..
                /* 0348 */  0xE1, 0x4B, 0x85, 0x0F, 0x42, 0x2C, 0xCA, 0x79,  // .K..B,.y
                /* 0350 */  0x40, 0x3F, 0x02, 0x9F, 0x3F, 0x6C, 0xE4, 0x2C,  // @?..?l.,
                /* 0358 */  0x82, 0x3A, 0x09, 0xF8, 0xD0, 0xE1, 0x41, 0x3D,  // .:....A=
                /* 0360 */  0x21, 0x60, 0x42, 0x9F, 0xEC, 0x40, 0x75, 0x14,  // !`B..@u.
                /* 0368 */  0x02, 0xCE, 0x07, 0x10, 0x78, 0x21, 0x0F, 0xAD,  // ....x!..
                /* 0370 */  0xA0, 0x3B, 0x92, 0x83, 0xE3, 0x50, 0x17, 0x39,  // .;...P.9
                /* 0378 */  0xEE, 0x03, 0x0D, 0xF6, 0xEC, 0xC1, 0xFF, 0xFF,  // ........
                /* 0380 */  0x67, 0x0F, 0xE0, 0x21, 0xED, 0xE0, 0x81, 0x12,  // g..!....
                /* 0388 */  0x73, 0xF6, 0x00, 0x48, 0x73, 0xD9, 0x78, 0xF7,  // s..Hs.x.
                /* 0390 */  0xF0, 0xA5, 0xE7, 0x4C, 0x9F, 0x3D, 0x3C, 0xD7,  // ...L.=<.
                /* 0398 */  0x77, 0x0E, 0x1F, 0xEB, 0x8C, 0x62, 0x88, 0xF7,  // w....b..
                /* 03A0 */  0x0F, 0x1F, 0x0A, 0xA2, 0x44, 0x3C, 0xD7, 0x28,  // ....D<.(
                /* 03A8 */  0x87, 0x1C, 0x25, 0x6E, 0x84, 0x30, 0xCF, 0x77,  // ..%n.0.w
                /* 03B0 */  0xC6, 0x89, 0x11, 0x2A, 0x02, 0x03, 0x7D, 0xF6,  // ...*..}.
                /* 03B8 */  0x60, 0x71, 0xCE, 0x1E, 0x50, 0xB1, 0xCF, 0xE6,  // `q..P...
                /* 03C0 */  0x8D, 0x23, 0xC2, 0x6B, 0xC0, 0x39, 0xFE, 0xFF,  // .#.k.9..
                /* 03C8 */  0xCF, 0xC7, 0x67, 0x0F, 0xC0, 0x9B, 0x94, 0xB7,  // ..g.....
                /* 03D0 */  0x9B, 0xCE, 0x1E, 0xE0, 0x3A, 0xC2, 0xE2, 0xCE,  // ....:...
                /* 03D8 */  0x1E, 0xF0, 0xC6, 0x8D, 0x3D, 0x7D, 0x00, 0x3B,  // ....=}.;
                /* 03E0 */  0x19, 0xAF, 0x01, 0x1F, 0x3D, 0x68, 0xF0, 0x03,  // ....=h..
                /* 03E8 */  0x2A, 0xD0, 0xFE, 0xFF, 0x1F, 0x50, 0x01, 0x97,  // *....P..
                /* 03F0 */  0x87, 0x8F, 0x07, 0x54, 0xB0, 0x4B, 0x7F, 0x0E,  // ...T.K..
                /* 03F8 */  0xE8, 0x53, 0xE0, 0xE0, 0x07, 0x54, 0xF4, 0x70,  // .S...T.p
                /* 0400 */  0x7C, 0x9C, 0xC3, 0x9C, 0x50, 0x01, 0x9B, 0xFF,  // |...P...
                /* 0408 */  0x7F, 0x02, 0x1F, 0x6E, 0xE1, 0x00, 0x87, 0xF4,  // ...n....
                /* 0410 */  0x58, 0xC1, 0x76, 0x3E, 0x05, 0x0E, 0x63, 0x05,  // X.v>..c.
                /* 0418 */  0xCF, 0xC0, 0xF8, 0x58, 0x81, 0xC5, 0xC4, 0x9E,  // ...X....
                /* 0420 */  0x3D, 0x8E, 0x15, 0x6C, 0xA7, 0x52, 0xE0, 0x30,  // =..l.R.0
                /* 0428 */  0x56, 0x30, 0x0D, 0x8C, 0x8D, 0x15, 0x7C, 0x12,  // V0....|.
                /* 0430 */  0xCE, 0xC5, 0xE8, 0x31, 0xFA, 0xDA, 0x72, 0x40,  // ...1..r@
                /* 0438 */  0x9E, 0x47, 0x84, 0xA7, 0x7C, 0xF6, 0xFF, 0x27,  // .G..|..'
                /* 0440 */  0x70, 0xDC, 0xE1, 0x82, 0xEA, 0x5C, 0xE3, 0xE1,  // p....\..
                /* 0448 */  0x82, 0x5F, 0xDE, 0x70, 0x41, 0x33, 0x36, 0x38,  // ._.pA368
                /* 0450 */  0x23, 0x06, 0xDF, 0xD1, 0xC9, 0xE7, 0x58, 0xB0,  // #.....X.
                /* 0458 */  0x5C, 0x22, 0xD8, 0x59, 0x80, 0x4D, 0x07, 0x7F,  // \".Y.M..
                /* 0460 */  0x95, 0xC5, 0x9F, 0x99, 0x80, 0x91, 0xE4, 0xC7,  // ........
                /* 0468 */  0x92, 0x09, 0x14, 0xE0, 0x74, 0x20, 0x51, 0x2F,  // ....t Q/
                /* 0470 */  0x02, 0x0A, 0xE3, 0x43, 0x8D, 0xCF, 0x4C, 0x70,  // ...C..Lp
                /* 0478 */  0x25, 0xC1, 0xA1, 0xCE, 0x69, 0xEC, 0x74, 0x7C,  // %...i.t|
                /* 0480 */  0x72, 0x27, 0xF2, 0x7A, 0xE0, 0xC9, 0x3D, 0x3C,  // r'.z..=<
                /* 0488 */  0xC1, 0x38, 0x26, 0x78, 0x5A, 0x27, 0x65, 0xED,  // .8&xZ'e.
                /* 0490 */  0x47, 0x20, 0xF2, 0xFF, 0xBF, 0x66, 0xB1, 0xB3,  // G ...f..
                /* 0498 */  0x02, 0x47, 0xE3, 0x27, 0x29, 0xB0, 0x5E, 0x18,  // .G.').^.
                /* 04A0 */  0x7C, 0x4C, 0x00, 0xC7, 0xAC, 0x5F, 0xA3, 0x30,  // |L..._.0
                /* 04A8 */  0x58, 0xA1, 0x62, 0x34, 0x7A, 0x0D, 0x22, 0xA0,  // X.b4z.".
                /* 04B0 */  0xC7, 0xD7, 0xD7, 0x30, 0x74, 0x27, 0x30, 0x54,  // ...0t'0T
                /* 04B8 */  0xC4, 0x10, 0x6F, 0x06, 0x76, 0x79, 0x1E, 0x42,  // ..o.vy.B
                /* 04C0 */  0x1E, 0x9A, 0xC0, 0x85, 0xFD, 0xD0, 0x04, 0xF6,  // ........
                /* 04C8 */  0x50, 0x67, 0x32, 0x1A, 0x69, 0x34, 0xA8, 0x73,  // Pg2.i4.s
                /* 04D0 */  0x3A, 0x3F, 0x10, 0x3C, 0x72, 0xF9, 0xD8, 0x61,  // :?.<r..a
                /* 04D8 */  0x90, 0x13, 0x3D, 0xAD, 0xC7, 0x85, 0xA7, 0x01,  // ..=.....
                /* 04E0 */  0x8F, 0x9B, 0x5D, 0x13, 0xFC, 0x41, 0xF0, 0xF1,  // ..]..A..
                /* 04E8 */  0x00, 0x7F, 0x80, 0x08, 0x78, 0xA2, 0x4F, 0x1E,  // ....x.O.
                /* 04F0 */  0xB0, 0x4E, 0x20, 0xF8, 0xA3, 0x06, 0xFC, 0xF1,  // .N .....
                /* 04F8 */  0xF8, 0x18, 0xE0, 0x63, 0x07, 0x97, 0x3F, 0x08,  // ...c..?.
                /* 0500 */  0xD4, 0x51, 0x91, 0x8F, 0xF4, 0xB4, 0xDE, 0x06,  // .Q......
                /* 0508 */  0x7C, 0x48, 0x38, 0x2C, 0x76, 0xE6, 0xF0, 0xC9,  // |H8,v...
                /* 0510 */  0x08, 0xFF, 0xFF, 0x1F, 0x0F, 0x38, 0x8F, 0xED,  // .....8..
                /* 0518 */  0x0F, 0x19, 0xBE, 0x32, 0x78, 0xBE, 0x3E, 0xD1,  // ...2x.>.
                /* 0520 */  0x82, 0xE5, 0xD6, 0xE1, 0x43, 0x43, 0xA8, 0xA7,  // ....CC..
                /* 0528 */  0x0E, 0xCF, 0xE0, 0xFD, 0xC2, 0x27, 0x10, 0x60,  // .....'.`
                /* 0530 */  0x22, 0xCA, 0xCC, 0x10, 0x98, 0xD0, 0x75, 0xCA,  // ".....u.
                /* 0538 */  0xC6, 0x59, 0x93, 0x9E, 0x07, 0x2C, 0xF7, 0x80,  // .Y...,..
                /* 0540 */  0xA0, 0x6B, 0x04, 0xE6, 0x06, 0x11, 0xC4, 0xC3,  // .k......
                /* 0548 */  0x7F, 0xA3, 0xE0, 0x87, 0x46, 0x01, 0xEA, 0x60,  // ....F..`
                /* 0550 */  0x66, 0x08, 0x4B, 0xA3, 0x90, 0x30, 0x08, 0x8D,  // f.K..0..
                /* 0558 */  0xC8, 0x47, 0x0F, 0x02, 0x47, 0x41, 0x3C, 0x7A,  // .G..GA<z
                /* 0560 */  0xC7, 0x3C, 0x3E, 0xA1, 0x87, 0xEA, 0x63, 0x80,  // .<>...c.
                /* 0568 */  0x27, 0x81, 0x0B, 0x75, 0xF0, 0xA1, 0xC7, 0x05,  // '..u....
                /* 0570 */  0x3C, 0xDE, 0x03, 0xB1, 0xCF, 0x01, 0x6C, 0xEC,  // <.....l.
                /* 0578 */  0xB8, 0x93, 0x07, 0xDC, 0x71, 0xE0, 0x4F, 0x9C,  // ....q.O.
                /* 0580 */  0xF8, 0xB3, 0x1A, 0x3F, 0xF5, 0x80, 0xF3, 0xC8,  // ...?....
                /* 0588 */  0x89, 0xFB, 0xFF, 0x1F, 0x0E, 0xE0, 0x01, 0xF9,  // ........
                /* 0590 */  0x3E, 0x60, 0xA5, 0x67, 0x02, 0x3A, 0x87, 0x10,  // >`.g.:..
                /* 0598 */  0x61, 0xA2, 0x19, 0x1E, 0x13, 0xF8, 0xF8, 0x44,  // a......D
                /* 05A0 */  0x4F, 0xA4, 0x1E, 0x17, 0x1F, 0xA5, 0xCF, 0x30,  // O......0
                /* 05A8 */  0x0C, 0xFB, 0x11, 0xC5, 0xC7, 0xC4, 0x03, 0x7C,  // .......|
                /* 05B0 */  0x39, 0x78, 0xE6, 0xC3, 0xC0, 0x7A, 0xDC, 0x1C,  // 9x...z..
                /* 05B8 */  0xD6, 0x68, 0x61, 0x0F, 0xF7, 0x19, 0xC2, 0xF7,  // .ha.....
                /* 05C0 */  0x0F, 0xCF, 0xCC, 0xD7, 0x46, 0x9F, 0x3C, 0xC0,  // ....F.<.
                /* 05C8 */  0x72, 0x94, 0x82, 0x3F, 0x54, 0xDC, 0x59, 0x00,  // r..?T.Y.
                /* 05D0 */  0xEE, 0x81, 0x89, 0xCD, 0xE1, 0x69, 0x00, 0x2F,  // .....i./
                /* 05D8 */  0xF3, 0x10, 0x81, 0x1A, 0x88, 0x45, 0x2E, 0x50,  // .....E.P
                /* 05E0 */  0xC7, 0x15, 0x8F, 0xC4, 0x04, 0x96, 0x77, 0x80,  // ......w.
                /* 05E8 */  0x40, 0x9D, 0x1F, 0x2C, 0xEB, 0x00, 0x81, 0x12,  // @..,....
                /* 05F0 */  0x02, 0x47, 0x41, 0x7C, 0x80, 0xF0, 0x31, 0xDD,  // .GA|..1.
                /* 05F8 */  0x46, 0x0E, 0x10, 0xE8, 0x03, 0x0C, 0x83, 0x78,  // F......x
                /* 0600 */  0xE8, 0x34, 0x81, 0x8F, 0x32, 0x3E, 0x40, 0x00,  // .4..2>@.
                /* 0608 */  0x8F, 0x71, 0xE0, 0x0F, 0x10, 0xF0, 0xFE, 0xFF,  // .q......
                /* 0610 */  0x04, 0x3E, 0x01, 0x03, 0x9F, 0xF3, 0x03, 0x38,  // .>.....8
                /* 0618 */  0x4E, 0xA2, 0x3E, 0x3F, 0x80, 0xEB, 0x04, 0xE0,  // N.>?....
                /* 0620 */  0xF3, 0x03, 0x70, 0x1D, 0xE0, 0xA3, 0x00, 0x58,  // ..p....X
                /* 0628 */  0xCE, 0x64, 0x6C, 0x0E, 0x2F, 0x35, 0x67, 0xFE,  // .dl./5g.
                /* 0630 */  0xCA, 0xE4, 0x13, 0x2F, 0xE6, 0xD4, 0xCB, 0x75,  // .../...u
                /* 0638 */  0x8D, 0x80, 0x44, 0x3C, 0x43, 0xA0, 0x06, 0xE1,  // ..D<C...
                /* 0640 */  0x83, 0xB9, 0x8F, 0x13, 0xCC, 0xE7, 0x21, 0x48,  // ......!H
                /* 0648 */  0xAA, 0x51, 0x04, 0xEF, 0x5B, 0x01, 0x8B, 0x70,  // .Q..[..p
                /* 0650 */  0x8C, 0x40, 0x89, 0xA7, 0x90, 0xF4, 0x63, 0x04,  // .@....c.
                /* 0658 */  0x4A, 0x2C, 0x1C, 0x05, 0xF1, 0xA8, 0x7D, 0x90,  // J,....}.
                /* 0660 */  0xB0, 0x8D, 0xB3, 0x2D, 0xFA, 0x30, 0xCC, 0x8F,  // ...-.0..
                /* 0668 */  0x02, 0xFC, 0x14, 0x01, 0xF7, 0xFF, 0x3F, 0x0B,  // ......?.
                /* 0670 */  0x9F, 0xC2, 0x70, 0x47, 0x0F, 0x70, 0x5C, 0xC4,  // ..pG.p\.
                /* 0678 */  0x0E, 0xED, 0xEC, 0x1E, 0x12, 0xA2, 0xC4, 0x3C,  // .......<
                /* 0680 */  0x83, 0x37, 0x3F, 0x03, 0x86, 0x8D, 0xE6, 0x31,  // .7?....1
                /* 0688 */  0xE2, 0x70, 0xCE, 0xD1, 0x17, 0x35, 0xCF, 0x29,  // .p...5.)
                /* 0690 */  0xD6, 0xE3, 0x1B, 0x3F, 0x52, 0xC0, 0x45, 0xF1,  // ...?R.E.
                /* 0698 */  0x91, 0x02, 0xEE, 0x4C, 0xCE, 0x03, 0xA3, 0x6E,  // ...L...n
                /* 06A0 */  0x2C, 0x82, 0xF7, 0xB5, 0x10, 0x7F, 0xB0, 0x00,  // ,.......
                /* 06A8 */  0x1E, 0xC7, 0x25, 0x1F, 0x2C, 0xC0, 0x05, 0xE9,  // ..%.,...
                /* 06B0 */  0x83, 0x05, 0x70, 0x3D, 0x1F, 0xF8, 0x74, 0x00,  // ..p=..t.
                /* 06B8 */  0xD6, 0x0B, 0x19, 0xBF, 0x1F, 0xB0, 0xFF, 0xFF,  // ........
                /* 06C0 */  0xFD, 0x00, 0x77, 0xC2, 0x80, 0x71, 0x3E, 0xC0,  // ..w..q>.
                /* 06C8 */  0xDC, 0x30, 0x1C, 0x6B, 0xA5, 0x3A, 0x61, 0xE0,  // .0.k.:a.
                /* 06D0 */  0x62, 0x3D, 0x28, 0x34, 0x10, 0x36, 0xBC, 0xE7,  // b=(4.6..
                /* 06D8 */  0x9F, 0x27, 0x43, 0x7E, 0x98, 0x61, 0x51, 0xE0,  // .'C~.aQ.
                /* 06E0 */  0x74, 0xB4, 0xF0, 0xC9, 0xC2, 0x21, 0x28, 0x74,  // t....!(t
                /* 06E8 */  0x10, 0xF3, 0x09, 0x83, 0x8B, 0x39, 0x61, 0x50,  // .....9aP
                /* 06F0 */  0x10, 0x03, 0x3A, 0xE9, 0x39, 0x0C, 0x7D, 0xDA,  // ..:.9.}.
                /* 06F8 */  0xF4, 0xB1, 0x81, 0xDD, 0xEE, 0x7D, 0xBF, 0xF0,  // .....}..
                /* 0700 */  0x5C, 0x3C, 0x67, 0x8E, 0xE7, 0xF3, 0x32, 0x43,  // \<g...2C
                /* 0708 */  0x7D, 0x33, 0x01, 0xCF, 0x95, 0x82, 0x1D, 0xE7,  // }3......
                /* 0710 */  0x31, 0xB7, 0x49, 0x76, 0xE0, 0x64, 0xC7, 0x02,  // 1.Iv.d..
                /* 0718 */  0xA3, 0x1C, 0xEF, 0x6B, 0xA1, 0xD5, 0xDC, 0x15,  // ...k....
                /* 0720 */  0x50, 0x33, 0xC2, 0x10, 0x78, 0xC0, 0x3E, 0x89,  // P3..x.>.
                /* 0728 */  0x81, 0x49, 0xDF, 0x8D, 0x02, 0xE4, 0xE8, 0x5C,  // .I.....\
                /* 0730 */  0xE8, 0xE8, 0x51, 0x07, 0x00, 0x1F, 0xED, 0xF8,  // ..Q.....
                /* 0738 */  0xE8, 0x7D, 0xC4, 0xF6, 0x71, 0x05, 0xEE, 0xE1,  // .}..q...
                /* 0740 */  0xCE, 0x67, 0x28, 0x70, 0xFC, 0xFF, 0xCF, 0x50,  // .g(p...P
                /* 0748 */  0xC0, 0x65, 0x60, 0x9E, 0xE1, 0x13, 0x0A, 0xB8,  // .e`.....
                /* 0750 */  0xEE, 0x0F, 0xFC, 0xA2, 0x8A, 0x99, 0xC8, 0xB3,  // ........
                /* 0758 */  0x30, 0x8C, 0x53, 0x0A, 0xF0, 0x18, 0xBD, 0x4F,  // 0.S....O
                /* 0760 */  0x29, 0xE0, 0x3A, 0x00, 0xF8, 0x94, 0x02, 0x5C,  // ).:....\
                /* 0768 */  0xE7, 0xF8, 0x50, 0x00, 0x96, 0x33, 0x4A, 0x14,  // ..P..3J.
                /* 0770 */  0xDF, 0x7F, 0x3D, 0x11, 0x1B, 0x1F, 0x3E, 0xBD,  // ..=...>.
                /* 0778 */  0xA0, 0x78, 0x2C, 0xCF, 0xE6, 0xEC, 0x4C, 0xA9,  // .x,...L.
                /* 0780 */  0xB3, 0x09, 0x3A, 0xDA, 0xEB, 0x41, 0x83, 0x7E,  // ..:..A.~
                /* 0788 */  0x50, 0xF1, 0xEC, 0xC3, 0x1F, 0x5F, 0x84, 0xE7,  // P...._..
                /* 0790 */  0x53, 0x03, 0xFF, 0xFF, 0x13, 0x38, 0xCE, 0xD9,  // S....8..
                /* 0798 */  0x04, 0x15, 0x84, 0x42, 0xC7, 0x4E, 0x1F, 0x27,  // ...B.N.'
                /* 07A0 */  0xB8, 0xA4, 0xE3, 0x04, 0x05, 0x31, 0xA0, 0xF3,  // .....1..
                /* 07A8 */  0x1E, 0xF1, 0x3C, 0x0C, 0x7A, 0x9C, 0xE0, 0xA7,  // ..<.z...
                /* 07B0 */  0x3E, 0xDF, 0x12, 0x8E, 0xE3, 0x09, 0x24, 0xC1,  // >.....$.
                /* 07B8 */  0x7C, 0x27, 0x01, 0x7A, 0x39, 0x81, 0x77, 0x5E,  // |'.z9.w^
                /* 07C0 */  0x07, 0xCF, 0x28, 0xBC, 0x93, 0xB3, 0x60, 0x08,  // ..(...`.
                /* 07C8 */  0x6F, 0xD6, 0xEC, 0x38, 0x81, 0xBF, 0x1C, 0x3C,  // o..8...<
                /* 07D0 */  0x2B, 0x3C, 0xA8, 0xF3, 0xEB, 0x09, 0xCC, 0x7B,  // +<.....{
                /* 07D8 */  0x1E, 0xB8, 0x8E, 0x27, 0xC0, 0x42, 0xE6, 0x01,  // ...'.B..
                /* 07E0 */  0x00, 0x75, 0x6C, 0xF4, 0xC1, 0x91, 0x1F, 0x00,  // .ul.....
                /* 07E8 */  0x1C, 0xFA, 0x78, 0x82, 0x9E, 0x89, 0x8F, 0x45,  // ..x....E
                /* 07F0 */  0x4F, 0x25, 0xBE, 0x00, 0xF0, 0xB3, 0x9B, 0xCE,  // O%......
                /* 07F8 */  0x27, 0xA0, 0x38, 0x67, 0x82, 0x67, 0x1C, 0xEC,  // '.8g.g..
                /* 0800 */  0x0A, 0x80, 0x3F, 0x03, 0x60, 0xFE, 0xFF, 0x27,  // ..?.`..'
                /* 0808 */  0x14, 0x38, 0x47, 0x32, 0xF0, 0x4D, 0xC4, 0xA7,  // .8G2.M..
                /* 0810 */  0x8A, 0x03, 0xC1, 0x9E, 0x64, 0x81, 0x37, 0x2C,  // ....d.7,
                /* 0818 */  0x3F, 0xC9, 0x02, 0x3E, 0x6E, 0x23, 0xD8, 0x59,  // ?..>n#.Y
                /* 0820 */  0x3C, 0x93, 0x30, 0x82, 0x91, 0x8F, 0x26, 0xA8,  // <.0...&.
                /* 0828 */  0x23, 0xB2, 0x83, 0x9E, 0xC2, 0x10, 0xE3, 0x7C,  // #......|
                /* 0830 */  0xAC, 0x30, 0x46, 0xE4, 0xE2, 0x47, 0xAD, 0xC9,  // .0F..G..
                /* 0838 */  0xF8, 0x6C, 0xE6, 0xCB, 0x3A, 0x3B, 0xFC, 0xE0,  // .l..:;..
                /* 0840 */  0x08, 0x06, 0x3A, 0xA0, 0xA0, 0x8E, 0x63, 0x3E,  // ..:...c>
                /* 0848 */  0x8B, 0x81, 0xEB, 0xFF, 0x7F, 0x16, 0x03, 0x78,  // .......x
                /* 0850 */  0x70, 0x76, 0xF7, 0xE8, 0xF9, 0xB1, 0x9D, 0x83,  // pv......
                /* 0858 */  0x78, 0xF4, 0x0E, 0x7F, 0x16, 0x83, 0x1E, 0xF6,  // x.......
                /* 0860 */  0x2C, 0x06, 0xB4, 0x05, 0x9F, 0xC5, 0x40, 0x79,  // ,.....@y
                /* 0868 */  0x8B, 0xC0, 0xFF, 0xFF, 0x6F, 0x11, 0xB8, 0x33,  // ....o..3
                /* 0870 */  0x28, 0xF0, 0x5A, 0x9B, 0x4F, 0x28, 0xE0, 0xBA,  // (.Z.O(..
                /* 0878 */  0x33, 0xF8, 0x84, 0x02, 0x5C, 0x8F, 0x00, 0xB8,  // 3...\...
                /* 0880 */  0x33, 0x28, 0x38, 0x4E, 0x00, 0xCC, 0xD7, 0x0D,  // 3(8N....
                /* 0888 */  0x80, 0x82, 0x3C, 0x02, 0xE0, 0xAF, 0xF0, 0x3E,  // ..<....>
                /* 0890 */  0x98, 0xE0, 0xE2, 0x9D, 0x54, 0x50, 0x1C, 0x8E,  // ....TP..
                /* 0898 */  0x77, 0x52, 0x41, 0x4C, 0x25, 0xF2, 0x5B, 0x8B,  // wRAL%.[.
                /* 08A0 */  0x27, 0x10, 0xFE, 0xE0, 0xE2, 0xBC, 0x9F, 0xF1,  // '.......
                /* 08A8 */  0x53, 0x19, 0x0C, 0x51, 0x07, 0x0B, 0x94, 0x8C,  // S..Q....
                /* 08B0 */  0x83, 0x05, 0x05, 0x31, 0xA0, 0x33, 0x9E, 0x52,  // ...1.3.R
                /* 08B8 */  0xD0, 0xA7, 0x32, 0x7E, 0x19, 0xF1, 0xC0, 0x12,  // ..2~....
                /* 08C0 */  0xCC, 0x74, 0x4D, 0x81, 0xFA, 0xFF, 0x47, 0xF6,  // .tM...G.
                /* 08C8 */  0x05, 0x04, 0x37, 0x60, 0xB8, 0x60, 0x0F, 0x12,  // ..7`.`..
                /* 08D0 */  0x46, 0x78, 0x4D, 0xF6, 0x3C, 0x30, 0x47, 0x14,  // FxM.<0G.
                /* 08D8 */  0xC0, 0x86, 0xE4, 0xA1, 0xA3, 0x44, 0x0E, 0x9D,  // .....D..
                /* 08E0 */  0x82, 0x78, 0xE8, 0xA6, 0xF1, 0x11, 0x05, 0x37,  // .x.....7
                /* 08E8 */  0x56, 0x76, 0x21, 0x80, 0x15, 0xF5, 0x94, 0x02,  // Vv!.....
                /* 08F0 */  0x0A, 0x91, 0xC3, 0x07, 0xCD, 0x38, 0x8E, 0xEE,  // .....8..
                /* 08F8 */  0xA9, 0xC7, 0xF3, 0xE0, 0x77, 0x62, 0x1F, 0xF3,  // ....wb..
                /* 0900 */  0xE0, 0x9E, 0x54, 0x70, 0xA7, 0x46, 0xDC, 0x49,  // ..Tp.F.I
                /* 0908 */  0x05, 0x0C, 0x73, 0xC4, 0x9E, 0xCA, 0xC0, 0xF1,  // ..s.....
                /* 0910 */  0xFF, 0x3F, 0x82, 0x02, 0x47, 0x0F, 0x47, 0x50,  // .?..G.GP
                /* 0918 */  0x40, 0xCB, 0x21, 0x85, 0x1F, 0x33, 0x30, 0x57,  // @.!..30W
                /* 0920 */  0x03, 0x7E, 0x04, 0xC5, 0xC4, 0x7C, 0x3E, 0xE8,  // .~...|>.
                /* 0928 */  0x7C, 0xC2, 0x8F, 0x06, 0x0E, 0xF4, 0x2A, 0x10,  // |.....*.
                /* 0930 */  0x38, 0x3B, 0xEB, 0xE3, 0x2E, 0x07, 0x3E, 0x61,  // 8;....>a
                /* 0938 */  0x98, 0x60, 0x84, 0xD3, 0x04, 0x85, 0xB0, 0x78,  // .`.....x
                /* 0940 */  0x0A, 0x49, 0x3F, 0x54, 0xA0, 0xC4, 0xC2, 0x51,  // .I?T...Q
                /* 0948 */  0x10, 0x1F, 0x2A, 0x2C, 0xE4, 0x50, 0x81, 0x3E,  // ..*,.P.>
                /* 0950 */  0x46, 0xE1, 0x83, 0x9F, 0x28, 0x40, 0x71, 0x01,  // F...(@q.
                /* 0958 */  0x78, 0x64, 0x07, 0xEF, 0x7D, 0x9D, 0xFD, 0xFF,  // xd..}...
                /* 0960 */  0xEF, 0xEB, 0x98, 0x41, 0xE2, 0x2E, 0x2A, 0x1E,  // ...A..*.
                /* 0968 */  0xB2, 0x0F, 0xEC, 0x98, 0x79, 0xFA, 0x68, 0x01,  // ....y.h.
                /* 0970 */  0x8F, 0xC0, 0xA7, 0x47, 0xF0, 0xC1, 0xFB, 0x30,  // ...G...0
                /* 0978 */  0x05, 0xBC, 0xCE, 0x7A, 0x3E, 0x58, 0x80, 0x0B,  // ...z>X..
                /* 0980 */  0xDC, 0x07, 0x0B, 0xE0, 0x7A, 0xFB, 0xF1, 0xE9,  // ....z...
                /* 0988 */  0x00, 0xAC, 0xA3, 0x3D, 0xE6, 0xF3, 0x8D, 0xF3,  // ...=....
                /* 0990 */  0x7E, 0x00, 0xE3, 0xA6, 0xF2, 0x10, 0xE9, 0x7B,  // ~......{
                /* 0998 */  0x80, 0xF1, 0xD9, 0xF9, 0x00, 0x7B, 0x25, 0xF2,  // .....{%.
                /* 09A0 */  0xF1, 0x59, 0x36, 0x7D, 0x6A, 0x34, 0x6A, 0xD5,  // .Y6}j4j.
                /* 09A8 */  0xA0, 0x4C, 0x8D, 0x32, 0x0D, 0x6A, 0xF5, 0xA9,  // .L.2.j..
                /* 09B0 */  0xD4, 0x98, 0x31, 0x4F, 0x50, 0xFA, 0xFF, 0x47,  // ..1OP..G
                /* 09B8 */  0x58, 0xB8, 0x46, 0xEE, 0x50, 0x4F, 0x09, 0x81,  // X.F.PO..
                /* 09C0 */  0x38, 0xEE, 0xF2, 0x35, 0x7A, 0xF2, 0x3A, 0x11,  // 8..5z.:.
                /* 09C8 */  0x88, 0x85, 0xA8, 0x00, 0x61, 0x62, 0x16, 0x29,  // ....ab.)
                /* 09D0 */  0x10, 0x4B, 0x5D, 0xA4, 0x40, 0x1C, 0xC5, 0x07,  // .K].@...
                /* 09D8 */  0x08, 0x0B, 0xA8, 0x04, 0x84, 0x45, 0xB5, 0x02,  // .....E..
                /* 09E0 */  0x44, 0xB5, 0x80, 0xB0, 0x58, 0x5E, 0x40, 0x58,  // D...X^@X
                /* 09E8 */  0xB0, 0x85, 0x0A, 0xC4, 0x61, 0xDC, 0x80, 0x30,  // ....a..0
                /* 09F0 */  0x29, 0x2F, 0x08, 0x0D, 0x86, 0xD8, 0x39, 0x42,  // )/....9B
                /* 09F8 */  0xEB, 0xAC, 0x6B, 0x10, 0x01, 0x39, 0xB4, 0x1F,  // ..k..9..
                /* 0A00 */  0x20, 0x26, 0x61, 0xFD, 0x02, 0xB2, 0x70, 0x45,  //  &a...pE
                /* 0A08 */  0x40, 0x2C, 0x06, 0x88, 0x80, 0xAC, 0xC3, 0x12,  // @,......
                /* 0A10 */  0x10, 0x13, 0x05, 0x22, 0x20, 0x4B, 0xD3, 0x04,  // ..." K..
                /* 0A18 */  0xC4, 0x84, 0x82, 0x08, 0xC8, 0x21, 0x45, 0x01,  // .....!E.
                /* 0A20 */  0xB1, 0xC4, 0x20, 0x02, 0x72, 0x78, 0x53, 0x40,  // .. .rxS@
                /* 0A28 */  0x4C, 0x8A, 0x2A, 0x20, 0xA6, 0xFE, 0xA1, 0x20,  // L.* ... 
                /* 0A30 */  0x20, 0x47, 0x01, 0x11, 0x90, 0x03, 0xD9, 0x02,  //  G......
                /* 0A38 */  0x62, 0xF1, 0x40, 0x04, 0x64, 0x85, 0xEF, 0x51,  // b.@.d..Q
                /* 0A40 */  0x01, 0x59, 0x2E, 0x88, 0x80, 0x1C, 0xC1, 0x18,  // .Y......
                /* 0A48 */  0x10, 0x0B, 0x04, 0x22, 0x20, 0xCB, 0x92, 0x06,  // ..." ...
                /* 0A50 */  0xC4, 0x44, 0x82, 0x08, 0xC8, 0xFF, 0x7F         // .D.....
            })
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AOD")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x6A, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // j.......
                /* 0008 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // AA..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x00   // ..).BA..
            })
            Method (WMAA, 3, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((((Arg1 != One) || (Arg1 != 0x02)) || 
                        (Arg1 != 0x06)))
                    {
                        CreateDWordField (Arg2, Zero, WIID)
                    }

                    If ((Arg1 == One))
                    {
                        Return (AM01 ())
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Return (AM02 ())
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Return (AM03 ())
                    }
                    ElseIf ((Arg1 == 0x04))
                    {
                        Return (AM04 (WIID))
                    }
                    ElseIf ((Arg1 == 0x05))
                    {
                        Return (AM05 (Arg2))
                    }
                    ElseIf ((Arg1 == 0x06))
                    {
                        Return (AM06 (WIID))
                    }
                    ElseIf ((Arg1 == 0x07))
                    {
                        Return (AM07 (WIID))
                    }
                    ElseIf ((Arg1 == 0x08))
                    {
                        Return (AM08 ())
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AmdTable", 0x00000001)
{
    External (_GPE, DeviceObj)
    External (_GPE.SP00, MethodObj)    // 0 Arguments
    External (_GPE.SP01, MethodObj)    // 0 Arguments
    External (_GPE.SP02, MethodObj)    // 0 Arguments
    External (_GPE.SP03, MethodObj)    // 0 Arguments
    External (_GPE.SP04, MethodObj)    // 0 Arguments
    External (_GPE.SP05, MethodObj)    // 0 Arguments
    External (_GPE.SP06, MethodObj)    // 0 Arguments
    External (_GPE.SP07, MethodObj)    // 0 Arguments
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.IPTS, MethodObj)    // 1 Arguments
    External (_SB_.IWAK, MethodObj)    // 1 Arguments
    External (_SB_.M263, MethodObj)    // 1 Arguments
    External (_SB_.M264, MethodObj)    // 1 Arguments
    External (_SB_.M284, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PTBR.PTST.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PTBR.PTST.TWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.GPXX.SAXX.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.GPXX.SAXX.TWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.SAXX.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.SAXX.TWAK, MethodObj)    // 1 Arguments
    External (M038, MethodObj)    // 1 Arguments
    External (M039, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M127, DeviceObj)
    External (MOEM, MethodObj)    // 3 Arguments

    OperationRegion (CPNV, SystemMemory, 0xAC943018, 0x000100E1)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M221,   8, 
        M086,   16, 
        M229,   8, 
        M231,   16, 
        M235,   8, 
        M233,   32, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x19), 
        M087,   1, 
            ,   1, 
        Offset (0x1C), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   32768, 
        M378,   32768, 
        M379,   32768, 
        M380,   32768, 
        M381,   32768, 
        M382,   32768, 
        M383,   32768, 
        M384,   32768, 
        M385,   32768, 
        M386,   32768, 
        M387,   32768, 
        M388,   32768, 
        M389,   32768, 
        M390,   32768, 
        M391,   32768, 
        M392,   32768, 
        M107,   64, 
        M320,   32, 
        M321,   32, 
        M322,   32, 
        M323,   32, 
        M324,   32, 
        M325,   32, 
        M326,   32, 
        M327,   16, 
        M328,   8, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32, 
        M220,   32, 
        M226,   32, 
        M251,   32, 
        M310,   32, 
        M280,   32, 
        M290,   32, 
        M331,   32, 
        M414,   16, 
        M444,   72, 
        M449,   72
    }

    Method (M000, 1, Serialized)
    {
        Name (M285, Buffer (0x04)
        {
             0x01, 0x03, 0x80, 0x00                           // ....
        })
        CreateByteField (M285, Zero, M286)
        CreateByteField (M285, One, M287)
        CreateWordField (M285, 0x02, M288)
        If ((ToInteger (M286) == One))
        {
            Local0 = (Arg0 + 0xB0000C00)
            Local1 = ToInteger (M288)
            If ((ToInteger (M287) == 0x03))
            {
                OperationRegion (VARM, SystemIO, Local1, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }
            ElseIf ((ToInteger (M287) == 0x02))
            {
                OperationRegion (VARN, SystemIO, Local1, 0x02)
                Field (VARN, WordAcc, NoLock, Preserve)
                {
                    VARS,   16
                }

                VARS = (Local0 & 0xFFFF)
            }
            ElseIf ((ToInteger (M287) == One))
            {
                OperationRegion (VARO, SystemIO, Local1, One)
                Field (VARO, ByteAcc, NoLock, Preserve)
                {
                    VART,   8
                }

                VART = (Local0 & 0xFF)
            }
        }
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20, Arg4)
    }

    Mutex (M421, 0x00)
    Method (M422, 4, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 == Zero))
        {
            Return (Ones)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xE0
        Acquire (M421, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M422.VAR1 */
        Local2 = VAR2 /* \M422.VAR2 */
        VAR1 = Local1
        Release (M421)
        Return (Local2)
    }

    Method (M423, 5, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 != Zero))
        {
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xE0
            Acquire (M421, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M423.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M421)
        }
    }

    Mutex (M253, 0x00)
    Method (M249, 4, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 == Ones))
        {
            Return (Ones)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xB8
        Acquire (M253, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M249.VAR1 */
        Local2 = VAR2 /* \M249.VAR2 */
        VAR1 = Local1
        Release (M253)
        Return (Local2)
    }

    Method (M250, 5, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 != Ones))
        {
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xB8
            Acquire (M253, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M250.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M253)
        }
    }

    Method (M021, 4, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M021.VAR2 */
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg4
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, One, Zero)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, One, One)
    }

    Method (M024, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x0128)
        If ((Local0 & 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Local0 = M021 (Arg0, Arg1, Arg2, 0xA2)
        Local0 &= 0xFFFFFFF8
        Local1 = (Local0 >> 0x04)
        Local1 &= 0x07
        Local0 |= Local1
        Local0 |= 0x0100
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 4, Serialized)
    {
        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (Arg3)
        {
            M429 (Arg0, Arg1, Arg2, 0x88, Zero, 0x04, Arg3)
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, One)
        Local1 = 0x64
        Local2 = One
        While ((Local1 && Local2))
        {
            Sleep (One)
            Local3 = M430 (Arg0, Arg1, Arg2)
            If ((Local3 & 0x0800))
            {
                Local1--
            }
            Else
            {
                Local2 = Zero
            }
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (!Local2)
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M430, 3, Serialized)
    {
        Local0 = M017 (Arg0, Arg1, Arg2, 0x68, 0x10, 0x10)
        Return (Local0)
    }

    Method (M412, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x07)
        Local0 &= One
        Local1 = (Arg0 >> 0x04)
        Local1 &= 0x07
        Local1 += \_GPE.M411
        Local2 = (Arg0 & 0x0F)
        Local3 = M409 (Local0, Local1, Zero)
        Local3 >>= Local2
        Local3 &= One
        Return (Local3)
    }

    Method (M413, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x07)
        Local0 &= One
        Local1 = (Arg0 >> 0x04)
        Local1 &= 0x07
        Local1 += \_GPE.M411
        Local2 = (Arg0 & 0x0F)
        Local3 = M409 (Local0, Local1, One)
        Local3 &= (Ones ^ (One << Local2))
        Local3 |= (Arg1 << Local2)
        M410 (Local0, Local1, One, Local3)
    }

    Method (M440, 1, Serialized)
    {
        M012 (0xFEC30000, Zero, Arg0, One, Zero)
        Local0 = M011 (0xFEC30000, 0x04, Arg0, One)
        Return (Local0)
    }

    Method (M441, 2, Serialized)
    {
        M012 (0xFEC30000, Zero, Arg0, One, One)
        M012 (0xFEC30000, 0x08, Arg0, One, Arg1)
    }

    Method (M009, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        Local2 = Zero
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                Local2 = (Arg0 & 0xF800)
                If ((Local2 == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        Local2 = M011 ((M084 + 0x1502), (Local1 * 0x04), Zero, 
                            One)
                    }
                    Else
                    {
                        Local2 = M011 ((M084 + 0x1202), (Local1 * 0x04), Zero, 
                            One)
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x0F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x0D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x0B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 >>= 0x10
                    Local2 &= One
                }
            }
            Else
            {
                Local2 = M011 ((M084 + 0x0100), Local1, 0x07, One)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x0F)
            Local3 &= One
            Local4 = (Arg0 >> 0x0D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x0B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 >>= 0x10
            Local2 &= One
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                Local2 = M038 ((Local1 + 0x08))
            }
            Else
            {
                Local2 = 0xFF
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            Local2 = M440 (Local1)
        }
        ElseIf ((Local0 == 0x06))
        {
            Local2 = M412 (Local1)
        }

        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                Local2 = (Arg0 & 0xF800)
                If ((Local2 == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                    Else
                    {
                        M012 ((M084 + 0x1202), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x0F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x0D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x0B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 &= 0xCF3FFFFF
                    Local2 |= 0x00800000
                    Local2 |= (Arg1 << 0x16)
                    M250 (Local3, Local4, Local5, Local6, Local2)
                }
            }
            Else
            {
                M012 ((M084 + 0x0100), Local1, 0x06, One, Arg1)
                M012 ((M084 + 0x0100), Local1, 0x05, One, Zero)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x0F)
            Local3 &= One
            Local4 = (Arg0 >> 0x0D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x0B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 &= 0xCF3FFFFF
            Local2 |= 0x00800000
            Local2 |= (Arg1 << 0x16)
            M423 (Local3, Local4, Local5, Local6, Local2)
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                M039 ((Local1 + 0x08), Arg1)
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            M441 (Local1, Arg1)
        }
        ElseIf ((Local0 == 0x06))
        {
            M413 (Local1, Arg1)
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */  0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // ~.......
        /* 0008 */  0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // . ......
        /* 0010 */  0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09         // .......
    })
    Name (M227, Buffer (0x18)
    {
        /* 0000 */  0x41, 0x42, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // AB......
        /* 0008 */  0x02, 0x44, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .D......
        /* 0010 */  0x17, 0x45, 0x0B, 0x01, 0x0F, 0x0D, 0x09, 0x08   // .E......
    })
    Name (M329, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x12, 0x18,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32A, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M330, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32B, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x0B, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x1D, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // ........
        /* 0010 */  0x17, 0x20, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // . T.(...
    })
    Method (M029, 1, Serialized)
    {
        If ((M085 == 0x02))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M037 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 < 0x02))
        {
            Return (M011 ((M084 + 0x0160), Arg0, 0x07, One))
        }
        ElseIf (((M085 > 0x02) && (M085 < 0x08)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M227 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x08))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M329 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x09) || (M085 == 0x0A)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0B) || (M085 == 0x0C)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32A [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0D) || (M085 == 0x0E)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x0F))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
    }

    Method (M031, 1, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        Return (M011 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 
            0x07), One))
    }

    Method (M032, 2, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        M012 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 0x07
            ), One, Arg1)
    }

    Method (M013, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M013.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
            ))
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M014.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M011, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M011.VARR */
        Local2 = ((Local1 >> Arg2) & (0xFF >> (0x08 - Arg3)
            ))
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M012.VARR */
        Local2 = (Arg2 + Arg3)
        Local2 = (0x08 - Local2)
        Local2 = (((0xFF << Local2) & 0xFF) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (0xFF ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M017, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x20 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M013 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M018, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M014 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M428, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0xFF
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x08 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M011 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M429, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M012 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M265, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local3 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x12, One)
                Local4 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x08, One)
                If (((Local3 == One) && (Local4 == One)))
                {
                    Local0 = One
                }

                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M033, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x0A, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While (((Local1 != Zero) && (Local1 < 0xFF)))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                M018 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02, Arg3)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0700), Arg0, Zero, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0400), Arg0, Zero, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 ((M084 + 0x0400), Arg0, Zero, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, Zero, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, Zero, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 == 0x15))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (M004, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M004.VAR2 */
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg1
    }

    Method (M006, 3, Serialized)
    {
        Local0 = (M004 (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, Zero)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, Zero)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, Zero)
            }

            Sleep (One)
        }

        If ((Arg0 == One))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (One)
        }

        If ((Arg0 == Zero))
        {
            M008 (Arg1)
            Local0 = M004 (M003 (0x03, Arg1, 0xA5))
            Local0 &= 0xFF
            Local1 = 0x01F4
            While (((Local1 > Zero) && (Local0 != 0x10)))
            {
                Local0 = M004 (M003 (0x03, Arg1, 0xA5))
                Local0 &= 0xFF
                Local1--
                Sleep (One)
            }

            If ((Local0 != 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x02)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, One)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (One)
    }

    Method (M007, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | One)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, Zero)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (One)
    }

    Method (M111, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local3 != Zero))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                While ((M009 (Local5) != Local6)){}
                            }

                            If ((Local4 == 0x02))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Sleep (((Local5 + 0x03E7) / 0x03E8))
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M228, 1, Serialized)
    {
        If ((Arg0 > 0x03))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                    If ((Local3 == Arg0))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        If ((Local4 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 (Local5, Local6)
                        }

                        If ((Local4 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 (Local5) != Local6)){}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M219, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M221 /* \M221 */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* \M220 */
                If (Local0)
                {
                    Local0 += 0x10
                    Local1 = Zero
                    Local2 = One
                    While ((Local2 != 0xFF))
                    {
                        Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                        Local5 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        Local7 = M013 ((Local0 + Local1), 0x08, Zero, 0x20)
                        If ((Local4 == Arg0))
                        {
                            If (((Local2 < 0x0A) && (Local5 & 0x80)))
                            {
                                If ((Arg1 == Zero))
                                {
                                    If ((M085 >= 0x04))
                                    {
                                        If (((Local7 >> 0x10) > Zero))
                                        {
                                            If (((Local7 >> 0x1C) == 0x02))
                                            {
                                                Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                    Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                            }
                                            Else
                                            {
                                                Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                    Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                            }

                                            Local6 &= (Ones ^ (0x03 << (Local2 << One)))
                                            If (((Local7 >> 0x1C) == 0x02))
                                            {
                                                M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                    ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                            }
                                            Else
                                            {
                                                M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                    ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                            }
                                        }
                                        ElseIf ((Local2 >= 0x04))
                                        {
                                            M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                ), 0x02, Zero)
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, Zero)
                                        }
                                    }
                                    Else
                                    {
                                        M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                            One) * 0x04), 0x04, Zero)
                                    }
                                }
                                ElseIf ((Local5 & 0x04))
                                {
                                    If ((Arg1 == One))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            If (((Local7 >> 0x10) > Zero))
                                            {
                                                If (((Local7 >> 0x1C) == 0x02))
                                                {
                                                    Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                        Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                                }
                                                Else
                                                {
                                                    Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                        Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                                }

                                                Local6 &= (Ones ^ (0x03 << (Local2 << One)))
                                                Local6 |= (0x03 << (Local2 << One))
                                                If (((Local7 >> 0x1C) == 0x02))
                                                {
                                                    M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                        ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                                }
                                                Else
                                                {
                                                    M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                        ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                                }
                                            }
                                            ElseIf ((Local2 >= 0x04))
                                            {
                                                M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                    ), 0x02, 0x03)
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                            }
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                One) * 0x04), 0x04, 0x0F)
                                        }
                                    }

                                    If ((Arg1 == 0x02))
                                    {
                                        Local6 = M017 (Zero, M013 ((Local0 + Local1), 0x05, Zero, 0x08), 
                                            M013 ((Local0 + Local1), 0x06, Zero, 0x08), 0x19, Zero, 0x08)
                                        If ((M265 (Local6, Zero, Zero) == One))
                                        {
                                            If ((M085 >= 0x04))
                                            {
                                                If (((Local7 >> 0x10) > Zero))
                                                {
                                                    If (((Local7 >> 0x1C) == 0x02))
                                                    {
                                                        Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                            Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                                    }
                                                    Else
                                                    {
                                                        Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                            Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                                    }

                                                    Local6 &= (Ones ^ (0x03 << (Local2 << One)))
                                                    Local6 |= (Local3 << (Local2 << One))
                                                    If (((Local7 >> 0x1C) == 0x02))
                                                    {
                                                        M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                            ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                                    }
                                                    Else
                                                    {
                                                        M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                            ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                                    }
                                                }
                                                ElseIf ((Local2 >= 0x04))
                                                {
                                                    M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                        ), 0x02, Local3)
                                                }
                                                Else
                                                {
                                                    M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, Local3)
                                                }
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                    One) * 0x04), 0x04, Local3)
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M085 >= 0x04))
                                {
                                    M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                }
                                Else
                                {
                                    M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                        One) * 0x04), 0x04, Local3)
                                }

                                Local2 = 0xFF
                            }
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }
    }

    Method (M112, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                                Local7 = M009 (Local5)
                                Local4 = 0x03F2
                                While (((Local4 > Zero) && (Local7 != Local6)))
                                {
                                    Local4 = (Local4 - One)
                                    Stall (0x63)
                                    Local7 = M009 (Local5)
                                }
                            }
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M275, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 (Local5) == Local6))
                            {
                                Local7 = One
                            }
                        }
                    }

                    Local1 += 0x08
                }
            }
        }

        Return (Local7)
    }

    Method (M113, 1, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M108 /* \M108 */
            Local7 = One
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    If ((Local2 == Arg0))
                    {
                        Local2 = 0xFF
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        If ((Local3 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                        }

                        If ((Local3 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x03))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x04))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }
                    }
                    Else
                    {
                        Local1 += 0x0B
                    }
                }
            }
        }
        Else
        {
            Local7 = Zero
        }

        If (Local7)
        {
            Local7 = One
        }

        Return (Local7)
    }

    Method (M114, 4, Serialized)
    {
        Local7 = Zero
        If (!M001 (Arg0, Arg1))
        {
            Name (M115, Buffer (0x05){})
            CreateWordField (M115, Zero, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            M116 = 0x05
            M119 = Zero
            M118 = Arg0
            M117 = Arg1
            If ((Arg2 == Zero))
            {
                If ((Arg3 != One))
                {
                    M120 = Zero
                    \_SB.ALIB (0x06, M115)
                }
            }
            Else
            {
                If ((Arg3 != One))
                {
                    M120 = One
                    \_SB.ALIB (0x06, M115)
                }

                Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    Local1 = M019 (Local0, Zero, Zero, Zero)
                    Local2 = 0x7FFFFFFF
                    Local2 |= 0x80000000
                    If (((Local1 != Zero) && (Local1 != Local2)))
                    {
                        Local7 = One
                    }
                }
            }
        }
        ElseIf ((Arg2 == Zero))
        {
            M002 (One, Arg1)
        }
        Else
        {
            M002 (Zero, Arg1)
            Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                Local1 = M019 (Local0, Zero, Zero, Zero)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If (((Local1 != Zero) && (Local1 != Local2)))
                {
                    Local7 = One
                }
            }
        }

        Return (Local7)
    }

    Method (M252, 3, Serialized)
    {
        If ((M085 >= 0x08))
        {
            Local0 = M251 /* \M251 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = Zero
                While ((Local2 != 0xFF))
                {
                    Local2 = M011 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M011 ((Local0 + Local1), One, Zero, 0x08)
                    Local4 = M011 ((Local0 + Local1), 0x02, Zero, 0x08)
                    Local5 = M011 ((Local0 + Local1), 0x03, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local4 == Arg2))
                        {
                            Return (Local5)
                        }
                    }

                    Local1 += 0x04
                }
            }
        }

        Return (Ones)
    }

    Name (M046, Zero)
    Name (M047, Ones)
    Method (M045, 0, Serialized)
    {
        Local0 = Zero
        If ((M047 == Ones))
        {
            M047 = Zero
            M046 = Zero
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("Windows 2012"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2013"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2015"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2016"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2017"))
                {
                    M046 = One
                }
            }
        }

        If ((M046 == One))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M049, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M04A, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
            Local1 = M011 (Arg0, (Arg1 + One), Zero, 0x08)
            Local0 |= (Local1 << 0x08)
        }

        Return (Local0)
    }

    Method (M04B, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
            Local1 = M011 (Arg0, (Arg1 + One), Zero, 0x08)
            Local2 = M011 (Arg0, (Arg1 + 0x02), Zero, 0x08)
            Local3 = M011 (Arg0, (Arg1 + 0x03), Zero, 0x08)
            Local0 |= (Local1 << 0x08)
            Local0 |= (Local2 << 0x10)
            Local0 |= (Local3 << 0x18)
        }

        Return (Local0)
    }

    Mutex (M230, 0x00)
    Method (M232, 3, Serialized)
    {
        Local0 = Arg0
        Local1 = Arg1
        Local2 = Arg2
        Acquire (M230, 0xFFFF)
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, M231, 0x02)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VAR1,   8, 
            VAR2,   8
        }

        VAR2 = Local1
        VAR1 = Local0
        If ((Local2 > Zero))
        {
            Sleep (Local2)
        }

        Release (M230)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM (Arg0, Arg1, Arg2))
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MLIB, 2, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = DerefOf (Arg1 [0x02])
                Switch (ToInteger (Local0))
                {
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x05)
                    }
                    Case (0x04)
                    {
                        M228 (0x04)
                        M228 (0x06)
                    }
                    Case (0x05)
                    {
                        M228 (0x04)
                        M228 (0x07)
                    }

                }
            }

        }
    }

    Method (M248, 1, Serialized)
    {
        If ((M085 == 0x08))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x0B))
        {
            If ((M085 >= 0x0D))
            {
                Return (M017 (Zero, 0x08, (Arg0 + One), 0x19, Zero, 0x08))
            }
            ElseIf ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, Arg0, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, 0x02, 0x19, Zero, 0x08))
            }
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M401, 2, NotSerialized)
    {
        Local0 = (Arg0 & 0x1F)
        Local0 = ((Local0 << 0x03) | (Arg1 & 0x07))
        Local1 = Zero
        If (((M085 >= 0x09) && (M085 <= 0x0A)))
        {
            Local2 = 0x07
        }
        Else
        {
            Local2 = 0x0A
        }

        Local3 = 0x14301000
        Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
            ))
        While (((Local1 < Local2) && (Local4 != Local0)))
        {
            Local1++
            Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
                ))
        }

        If ((Local1 <= Local2))
        {
            Return (Local1)
        }
        Else
        {
            Return (0xFF)
        }
    }

    Method (M402, 2, NotSerialized)
    {
        Local4 = M401 (Arg0, Arg1)
        If ((Local4 != 0xFF))
        {
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                Local0 = M249 (Zero, Zero, Zero, 0x11180188)
                Local0 &= 0xFFFFDFFF
                M250 (Zero, Zero, Zero, 0x11180188, (Local0 | 0x2000))
            }

            Local1 = (M019 (Zero, Zero, Zero, 0x84) & 0xFF00FCFF)
            Local2 = ((Arg0 << 0x13) | (Arg1 << 0x10))
            Local1 |= Local2
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0300))
            If ((M085 >= 0x0C))
            {
                Local3 = M019 (Zero, Zero, Zero, 0x84)
                Local5 = 0x4EEA
                While (((Local5 > Zero) && ((Local3 & 0x0400) != 0x0400)))
                {
                    Local5 = (Local5 - One)
                    Stall (0x63)
                    Local3 = M019 (Zero, Zero, Zero, 0x84)
                }
            }

            If (((M085 == 0x0D) && (Local4 >= 0x03)))
            {
                Local2 = (0x11240294 + ((Local4 - 0x03) << 0x0C))
            }
            Else
            {
                Local2 = (0x11140294 + (Local4 << 0x0C))
            }

            Local3 = M249 (Zero, Zero, Zero, Local2)
            Local5 = 0x4EEA
            While (((Local5 > Zero) && ((Local3 & 0x3F) != 0x1F)))
            {
                Local5 = (Local5 - One)
                Stall (0x63)
                Local3 = M249 (Zero, Zero, Zero, Local2)
            }

            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                M250 (Zero, Zero, Zero, 0x11180188, Local0)
            }
        }
    }

    Method (M403, 3, NotSerialized)
    {
        Local4 = M401 (Arg0, Arg1)
        If ((Local4 != 0xFF))
        {
            If (((M085 == 0x0D) && (Local4 >= 0x03)))
            {
                Local2 = (0x11240280 + ((Local4 - 0x03) << 0x0C))
            }
            Else
            {
                Local2 = (0x11140280 + (Local4 << 0x0C))
            }

            Local0 = M249 (Zero, Zero, Zero, Local2)
            Local0 &= 0xFFBFFFFF
            Local1 = Arg2
            Local0 |= (Local1 << 0x16)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }
    }

    Name (M404, Buffer (0x07)
    {
         0x00, 0x02, 0x06, 0x08, 0x04, 0x0A, 0x0C         // .......
    })
    Method (M405, 5, Serialized)
    {
        If ((M085 >= 0x04))
        {
            Local1 = DerefOf (M404 [Arg4])
            If ((((Arg0 > Zero) || (Arg1 > Zero)) || ((Arg2 > 
                Zero) || (Arg3 > Zero))))
            {
                If ((Arg3 == 0x02))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D02300)
                }
                Else
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                }

                Local0 <<= (Local1 * 0x02)
                Local0 &= 0x03
            }
            ElseIf ((Local1 >= 0x04))
            {
                Local0 = M011 ((M084 + 0x0E00), One, ((Local1 - 0x04
                    ) * 0x02), 0x02)
            }
            Else
            {
                Local0 = M011 ((M084 + 0x0E00), Zero, (Local1 * 0x02), 
                    0x02)
            }
        }
        Else
        {
            Local0 = M011 ((M084 + 0x0E00), (Arg4 / 0x02), (
                (Arg4 & One) * 0x04), 0x04)
        }

        Return (Local0)
    }

    Method (M406, 6, Serialized)
    {
        If ((M085 >= 0x04))
        {
            Local1 = DerefOf (M404 [Arg4])
            If ((((Arg0 > Zero) || (Arg1 > Zero)) || ((Arg2 > 
                Zero) || (Arg3 > Zero))))
            {
                If ((Arg3 == 0x02))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D02300)
                }
                Else
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                }

                Local0 &= (Ones ^ (0x03 << (Local1 << One)))
                Local0 |= (Arg5 << (Local1 << One))
                If ((Arg3 == 0x02))
                {
                    M250 (Arg0, Arg1, Arg2, 0x02D02300, Local0)
                }
                Else
                {
                    M250 (Arg0, Arg1, Arg2, 0x02D01E00, Local0)
                }
            }
            ElseIf ((Local1 >= 0x04))
            {
                M012 ((M084 + 0x0E00), One, ((Local1 - 0x04) * 0x02
                    ), 0x02, Arg5)
            }
            Else
            {
                M012 ((M084 + 0x0E00), Zero, (Local1 * 0x02), 0x02, Arg5)
            }
        }
        Else
        {
            M012 ((M084 + 0x0E00), (Arg4 / 0x02), ((Arg4 & 
                One) * 0x04), 0x04, Arg5)
        }
    }

    Mutex (M408, 0x00)
    Method (M409, 3, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M409.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M409.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M409.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg1 << One) | One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M409.SMB2 */
            SMB2 = 0x48
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M409.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    Release (M408)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = SMB5 /* \M409.SMB5 */
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        Release (M408)
        Return (Local4)
    }

    Method (M410, 4, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M410.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M410.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M410.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = (Arg1 << One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M410.SMB2 */
            SMB5 = Arg3
            SMB2 = 0x48
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M410.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    Release (M408)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = Zero
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        Release (M408)
        Return (Local4)
    }

    Method (MPTS, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TPTS))
                {
                    \_SB.PCXX.GPXX.SAXX.TPTS (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TPTS))
                {
                    \_SB.PCI0.PTBR.PTST.TPTS (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TPTS))
            {
                \_SB.PCXX.SAXX.TPTS (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M263))
            {
                \_SB.M263 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x1D)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IPTS))
                {
                    \_SB.IPTS (Arg0)
                }
            }
        }
    }

    Method (MWAK, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TWAK))
                {
                    \_SB.PCXX.GPXX.SAXX.TWAK (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TWAK))
                {
                    \_SB.PCI0.PTBR.PTST.TWAK (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TWAK))
            {
                \_SB.PCXX.SAXX.TWAK (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M264))
            {
                \_SB.M264 (Arg0)
            }
        }

        If ((M280 != Zero))
        {
            If (CondRefOf (\_SB.M284))
            {
                \_SB.M284 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x1D)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IWAK))
                {
                    \_SB.IWAK (Arg0)
                }
            }
        }
    }

    Scope (\_SB.GPIO)
    {
        Method (XINI, 0, NotSerialized)
        {
            If ((\_GPE.M420 != 0xFF))
            {
                Local0 = (\_GPE.M415 & One)
                Local1 = (\_GPE.M416 & 0x07)
                Local1 += \_GPE.M411
                \_GPE.M419 = M409 (Local0, Local1, Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Name (M411, 0x20)
        Name (M415, One)
        Name (M416, 0x04)
        Name (M417, 0x40)
        Name (M418, 0x40)
        Name (M419, 0xFF)
        Name (M420, 0xFF)
        Method (XL0A, 0, NotSerialized)
        {
            Local0 = (\_GPE.M415 & One)
            Local1 = (\_GPE.M416 & 0x07)
            Local1 += \_GPE.M411
            Local2 = \_GPE.M419
            Local3 = M409 (Local0, Local1, Zero)
            \_GPE.M419 = Local3
            Local3 ^= Local2
            Local3 |= \_GPE.M418
            Local3 &= \_GPE.M417
            If (((Local3 & One) == One))
            {
                If (CondRefOf (\_GPE.SP00))
                {
                    \_GPE.SP00 ()
                }
            }

            If (((Local3 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP01))
                {
                    \_GPE.SP01 ()
                }
            }

            If (((Local3 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP02))
                {
                    \_GPE.SP02 ()
                }
            }

            If (((Local3 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP03))
                {
                    \_GPE.SP03 ()
                }
            }

            If (((Local3 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP04))
                {
                    \_GPE.SP04 ()
                }
            }

            If (((Local3 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP05))
                {
                    \_GPE.SP05 ()
                }
            }

            If (((Local3 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP06))
                {
                    \_GPE.SP06 ()
                }
            }

            If (((Local3 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP07))
                {
                    \_GPE.SP07 ()
                }
            }
        }

        Method (XL0B, 0, NotSerialized)
        {
            Local0 = M049 (M128, 0x91)
            If (((Local0 & 0xC0) == 0xC0))
            {
                Local3 = Buffer (0x08){}
                CreateWordField (Local3, Zero, M254)
                CreateByteField (Local3, 0x02, M255)
                CreateDWordField (Local3, 0x03, M256)
                M256 = Zero
                M254 = 0x07
                M255 = 0x30
                Local4 = \_SB.ALIB (0x0C, Local3)
                If (CondRefOf (\_SB.APAD))
                {
                    \_SB.APAD.M446 [One] = Local4
                    Notify (\_SB.APAD, 0x80) // Status Change
                }
            }
        }
    }

    Scope (\_SB)
    {
        Device (APAD)
        {
            Name (_HID, "ACPI000C" /* Processor Aggregator Device */)  // _HID: Hardware ID
            Name (M446, Package (0x02)
            {
                One, 
                Zero
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (\_OSI ("Processor Aggregator Device"))
                {
                    Local0 = M049 (M128, 0x91)
                    If (((Local0 & 0x80) == 0x80))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PUR, 0, NotSerialized)  // _PUR: Processor Utilization Request
            {
                Return (M446) /* \_SB_.APAD.M446 */
            }
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AmdTable", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.LID_._LID, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M012, MethodObj)    // 5 Arguments
    External (M013, MethodObj)    // 4 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M020, MethodObj)    // 5 Arguments
    External (M021, MethodObj)    // 4 Arguments
    External (M023, MethodObj)    // 3 Arguments
    External (M024, MethodObj)    // 3 Arguments
    External (M025, MethodObj)    // 4 Arguments
    External (M026, MethodObj)    // 3 Arguments
    External (M037, DeviceObj)
    External (M043, MethodObj)    // 3 Arguments
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M111, MethodObj)    // 2 Arguments
    External (M112, MethodObj)    // 2 Arguments
    External (M113, MethodObj)    // 1 Arguments
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)

    Scope (\_SB)
    {
        Name (MACO, Zero)
    }

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Name (M189, Buffer (0x0100){})
        Name (M190, Ones)
        Name (M191, Ones)
        Method (ATPX, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (PX00 ())
            }

            If ((Arg0 == One))
            {
                Return (PX01 ())
            }

            If ((Arg0 == 0x02))
            {
                PX02 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x03))
            {
                PX03 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x04))
            {
                PX04 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x08))
            {
                Return (PX08 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (PX09 ())
            }

            If ((Arg0 == 0x0A))
            {
                PX10 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x0B))
            {
                PX11 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = Zero
            M158 = Zero
            M160 = Zero
            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX00, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = 0x08
            M158 = One
            M160 = M098 /* External reference */
            If (M098)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local0 = M019 (M095, M094, M093, 0x2C)
                Local1 = M019 (M095, M094, (M093 + One), 0x2C)
                If ((Local0 != Local5))
                {
                    M190 = Local0
                }

                If ((Local1 != Local5))
                {
                    M191 = Local1
                }
            }

            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX01, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateDWordField (M189, 0x02, M161)
            CreateDWordField (M189, 0x06, M162)
            M157 = 0x0A
            M161 = 0x0003FC80
            M162 = M099 /* External reference */
            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX02, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & One)
            Local7 = Buffer (0x05){}
            CreateWordField (Local7, Zero, M197)
            CreateField (Local7, 0x10, 0x03, M200)
            CreateField (Local7, 0x13, 0x05, M199)
            CreateByteField (Local7, 0x03, M198)
            CreateByteField (Local7, 0x04, M201)
            M197 = 0x05
            M198 = Zero
            M199 = M091 /* External reference */
            M200 = M090 /* External reference */
            Name (HPOK, Zero)
            Local0 = M049 (M133, 0x11)
            Local6 = M113 (Local0)
            M023 (Zero, M091, M090)
            If ((M192 && Local6))
            {
                M000 (0x86)
                M112 (Local0, Zero)
                M111 (Local0, One)
                Sleep (0x20)
                M112 (Local0, 0x02)
                M112 (Local0, One)
                M000 (0x87)
                HPOK = Zero
                Sleep (0x14)
                M201 = One
                Local6 = \_SB.ALIB (0x06, Local7)
                Local2 = Zero
                While ((Local2 < 0x0F))
                {
                    M023 (Zero, M091, M090)
                    Local4 = One
                    Local5 = 0xC8
                    While ((Local4 && Local5))
                    {
                        Local0 = M021 (Zero, M091, M090, 0xA5)
                        Local0 &= 0x7F
                        If (((Local0 >= 0x10) && (Local0 != 0x7F)))
                        {
                            Local4 = Zero
                        }
                        Else
                        {
                            Sleep (0x05)
                            Local5--
                        }
                    }

                    If (!Local4)
                    {
                        Local5 = M024 (Zero, M091, M090)
                        If (Local5)
                        {
                            M026 (Zero, M091, M090)
                            Sleep (0x05)
                            Local2++
                        }
                        Else
                        {
                            Local0 = Zero
                            If ((M025 (Zero, M091, M090, Zero) == Ones))
                            {
                                Local0 = One
                            }

                            If (Local0)
                            {
                                M111 (M049 (M133, 0x17), One)
                                M111 (M049 (M133, 0x18), One)
                                HPOK = One
                                Local2 = 0x10
                            }
                            Else
                            {
                                HPOK = Zero
                                Local2 = 0x10
                            }
                        }
                    }
                    Else
                    {
                        Local2 = 0x10
                    }
                }

                If (!HPOK)
                {
                    M000 (0x88)
                    Local1 = M019 (M095, M094, M093, Zero)
                    Sleep (0x0A)
                    Local4 = One
                    Local5 = 0x05
                    While ((Local4 && Local5))
                    {
                        Local0 = M021 (Zero, M091, M090, 0xA5)
                        Local0 &= 0x7F
                        If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                        {
                            Local4 = Zero
                        }
                        Else
                        {
                            Local0 = M019 (M095, M094, M093, Zero)
                            Sleep (0x05)
                            Local5--
                        }
                    }

                    M201 = Zero
                    \_SB.ALIB (0x06, Local7)
                }

                If ((M097 != Zero))
                {
                    Local0 = M019 (Zero, M091, M090, 0x54)
                    M020 (Zero, M091, M090, 0x54, (Local0 & 0xFFFF7FFC))
                    M232 (M097, Zero, 0x10)
                    M020 (Zero, M091, M090, 0x54, (Local0 & 0xFFFF7FFF))
                }

                M000 (0x89)
            }
            Else
            {
                M000 (0x8A)
                M201 = Zero
                \_SB.ALIB (0x06, Local7)
                M000 (0x8B)
                M111 (M049 (M133, 0x17), Zero)
                M111 (M049 (M133, 0x18), Zero)
                M112 (Local0, Zero)
                Sleep (0x0A)
                M111 (Local0, Zero)
                M023 (Zero, M091, M090)
                Local1 = M019 (M095, M094, M093, Zero)
                Sleep (0x0A)
                Local4 = One
                Local5 = 0x05
                While ((Local4 && Local5))
                {
                    Local0 = M021 (Zero, M091, M090, 0xA5)
                    Local0 &= 0x7F
                    If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                    {
                        Local4 = Zero
                    }
                    Else
                    {
                        Local1 = M019 (M095, M094, M093, Zero)
                        Sleep (0x05)
                        Local5--
                    }
                }

                HPOK = 0x02
                M000 (0x8C)
            }

            If (HPOK)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local1 = M019 (Zero, M091, M090, 0x54)
                M020 (Zero, M091, M090, 0x54, (Local1 & 0xFFFF7FFC))
                Local0 = M019 (M095, M094, M093, Zero)
                If (((HPOK == One) && (Local0 != Local5)))
                {
                    M020 (M095, M094, M093, 0x4C, M190)
                    Sleep (0x0A)
                    If ((M191 != Local5))
                    {
                        M020 (M095, M094, (M093 + One), 0x4C, M191)
                    }

                    Sleep (0x0A)
                }

                M020 (Zero, M091, M090, 0x54, (Local1 & 0xFFFF7FFF))
            }
        }

        Method (PX03, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M195)
            M157 = 0x04
            M195 = (Arg0 & One)
            If (M195)
            {
                M111 (M049 (M133, 0x17), One)
            }
            Else
            {
                M111 (M049 (M133, 0x17), Zero)
            }
        }

        Method (PX04, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M196)
            M157 = 0x04
            M196 = (Arg0 & One)
            If (M196)
            {
                M111 (M049 (M133, 0x18), One)
            }
            Else
            {
                M111 (M049 (M133, 0x18), Zero)
            }
        }

        Method (PX08, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M193)
            CreateWordField (M189, 0x02, M157)
            Local0 = M049 (M133, 0x19)
            M193 = Local0
            M157 = 0x05
            Local0 *= M157 /* \_SB_.PCI0.GP17.VGA_.PX08.M157 */
            Local1 = Zero
            While ((Local1 < Local0))
            {
                Local2 = M049 (M133, (0x1A + Local1))
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX09, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M193)
            CreateWordField (M189, 0x02, M157)
            Local0 = M049 (M133, 0x7E)
            M193 = Local0
            M157 = 0x03
            Local0 *= M157 /* \_SB_.PCI0.GP17.VGA_.PX09.M157 */
            Local1 = Zero
            While ((Local1 < Local0))
            {
                Local2 = M049 (M133, (0x7F + Local1))
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX10, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & One)
            \_SB.MACO = (Arg0 & One)
        }

        Method (PX11, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M162)
            M157 = 0x03
            M162 = (Arg0 & One)
            Local2 = M162 /* \_SB_.PCI0.GP17.VGA_.PX11.M162 */
            Local0 = M131 /* External reference */
            If (Local0)
            {
                Local0 = M049 (M131, 0x10)
                Local1 = M049 (M131, 0x11)
                Local1 = (M084 + ((Local0 * 0x0100) + Local1))
                M012 (Local1, 0x0E, Zero, One, Local2)
            }
        }

        Name (ATIB, Buffer (0x0100){})
        Method (ATIF, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (AF00 ())
            }

            If ((Arg0 == One))
            {
                Return (AF01 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (AF02 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (AF03 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x04])))
            }

            If ((Arg0 == 0x04))
            {
                Return (AF04 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (AF15 ())
            }

            If ((Arg0 == 0x10))
            {
                Return (AF16 (DerefOf (Arg1 [0x02])))
            }

            If ((Arg0 == 0x17))
            {
                Return (AF23 ())
            }
            Else
            {
                CreateWordField (ATIB, Zero, M157)
                CreateWordField (ATIB, 0x02, M158)
                CreateDWordField (ATIB, 0x04, M159)
                CreateDWordField (ATIB, 0x08, M160)
                M157 = Zero
                M158 = Zero
                M159 = Zero
                M160 = Zero
                Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
            }
        }

        Method (AF00, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M158)
            CreateDWordField (ATIB, 0x04, M159)
            CreateDWordField (ATIB, 0x08, M160)
            M157 = 0x0C
            M158 = One
            M159 = M101 /* External reference */
            If (!CondRefOf (\_SB.LID._LID))
            {
                M102 &= 0xFFFFFFF7
            }

            M160 = M102 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF01, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M161)
            CreateDWordField (ATIB, 0x06, M162)
            CreateByteField (ATIB, 0x0A, M163)
            Local0 = (M103 & 0xFF000000)
            Local1 = (M103 & 0x03)
            If ((Local1 == 0x02))
            {
                M157 = 0x0B
                M161 = 0x03
                M162 = Local1
                M163 = Local0
            }
            Else
            {
                M157 = 0x0A
                M161 = 0x03
                M162 = M103 /* External reference */
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Name (M164, Buffer (0x04)
        {
             0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (M210, Zero)
        Name (M211, Zero)
        Name (M212, Zero)
        Name (M213, Zero)
        Name (M214, Zero)
        Name (M215, Zero)
        Name (M303, Zero)
        Name (M304, Zero)
        Name (SSDM, 0x0A)
        Name (SCDY, Zero)
        Method (AF02, 0, NotSerialized)
        {
            CreateBitField (M164, Zero, M165)
            CreateBitField (M164, One, M166)
            CreateBitField (M164, 0x02, M167)
            CreateBitField (M164, 0x03, M168)
            CreateBitField (M164, 0x04, M169)
            CreateBitField (M164, 0x05, M170)
            CreateBitField (M164, 0x06, M171)
            CreateBitField (M164, 0x07, M172)
            CreateBitField (M164, 0x08, M173)
            CreateBitField (M164, 0x0C, M300)
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M174)
            CreateByteField (ATIB, 0x06, M175)
            CreateByteField (ATIB, 0x07, M176)
            CreateByteField (ATIB, 0x08, M177)
            CreateByteField (ATIB, 0x09, M178)
            CreateByteField (ATIB, 0x0A, M179)
            CreateByteField (ATIB, 0x0B, M180)
            CreateByteField (ATIB, 0x0C, M181)
            CreateByteField (ATIB, 0x0D, M301)
            CreateDWordField (ATIB, 0x0E, M302)
            M157 = 0x12
            M174 = M164 /* \_SB_.PCI0.GP17.VGA_.M164 */
            If (M165)
            {
                M165 = Zero
            }

            If (M166)
            {
                M175 = M210 /* \_SB_.PCI0.GP17.VGA_.M210 */
                M210 = Zero
                M166 = Zero
            }

            If (M167)
            {
                M176 = M211 /* \_SB_.PCI0.GP17.VGA_.M211 */
                M177 = M212 /* \_SB_.PCI0.GP17.VGA_.M212 */
                M211 = Zero
                M212 = Zero
                M167 = Zero
            }

            If (M168)
            {
                M178 = M213 /* \_SB_.PCI0.GP17.VGA_.M213 */
                M179 = M214 /* \_SB_.PCI0.GP17.VGA_.M214 */
                M213 = Zero
                M214 = Zero
                M168 = Zero
            }

            If (M169)
            {
                M180 = M215 /* \_SB_.PCI0.GP17.VGA_.M215 */
                M169 = Zero
            }

            If (M171)
            {
                M171 = Zero
            }

            If (M172)
            {
                M172 = Zero
            }

            If (M173)
            {
                M173 = Zero
            }

            If (M300)
            {
                M301 = M303 /* \_SB_.PCI0.GP17.VGA_.M303 */
                M302 = M304 /* \_SB_.PCI0.GP17.VGA_.M304 */
                M303 = Zero
                M304 = Zero
                M300 = Zero
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF03, 2, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M182)
            CreateWordField (ATIB, 0x04, M183)
            M182 = Arg0
            M183 = Arg1
            Name (M184, 0x06)
            Name (M185, 0x06)
            Name (M186, Buffer (0x14)
            {
                 0x00                                             // .
            })
            Name (M187, Zero)
            M187 = M049 (M133, 0xBF)
            Local1 = Zero
            While ((Local1 < M187))
            {
                Local2 = M049 (M133, (0xC0 + Local1))
                M186 [Local1] = Local2
                Local1++
            }

            Local1 = M182 /* \_SB_.PCI0.GP17.VGA_.AF03.M182 */
            Local1 &= 0x8B
            Local2 = M183 /* \_SB_.PCI0.GP17.VGA_.AF03.M183 */
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID ()
                Local2 &= 0xFFFFFFFE
                Local2 |= Local0
            }

            Local0 = Zero
            While ((Local0 < M187))
            {
                Local3 = DerefOf (M186 [Local0])
                If ((Local3 == Local1))
                {
                    M185 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GP17.VGA_.AF03.M187 */
                }
                Else
                {
                    Local0++
                }
            }

            Local0 = M185 /* \_SB_.PCI0.GP17.VGA_.AF03.M185 */
            While ((Local0 < M187))
            {
                Local0++
                If ((Local0 == M187))
                {
                    Local0 = Zero
                }

                Local3 = DerefOf (M186 [Local0])
                If (((Local3 & Local2) == Local3))
                {
                    M184 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GP17.VGA_.AF03.M187 */
                }
            }

            If ((M184 == M187))
            {
                M182 = Zero
            }
            Else
            {
                Local0 = M184 /* \_SB_.PCI0.GP17.VGA_.AF03.M184 */
                Local3 = DerefOf (M186 [Local0])
                M182 &= 0xFFFFFFF4
                M182 |= Local3
            }

            M157 = 0x04
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF04, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateByteField (ATIB, 0x02, M188)
            M157 = 0x03
            Local1 = Zero
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID ()
                Local1 = (Local0 ^ One)
            }

            M188 = Local1
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF15, 0, NotSerialized)
        {
            ATIB = M104 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF16, 1, NotSerialized)
        {
            Local0 = M013 (M133, 0xD4, Zero, 0x10)
            If (Local0)
            {
                Local1 = Zero
                While ((Local1 < Local0))
                {
                    Local2 = M049 (M133, (0xD4 + Local1))
                    ATIB [Local1] = Local2
                    Local1++
                }
            }
            Else
            {
                Local3 = M043 (Zero, Arg0, Zero)
                If ((ObjectType (Local3) == 0x03))
                {
                    ATIB = Local3
                }
                Else
                {
                    ATIB [Zero] = 0x05
                    ATIB [One] = Zero
                    ATIB [0x02] = Zero
                    ATIB [0x03] = Zero
                    ATIB [0x04] = 0x02
                }
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF23, 0, NotSerialized)
        {
            ATIB = M449 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AFN0, 0, Serialized)
        {
            If ((M101 & One))
            {
                CreateBitField (M164, Zero, M165)
                M165 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN1, 1, Serialized)
        {
            If ((M101 & 0x02))
            {
                Local0 = Arg0
                M210 = Local0
                CreateBitField (M164, One, M166)
                M166 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN2, 2, Serialized)
        {
            If ((M101 & 0x04))
            {
                Local0 = Arg0
                M212 = Local0
                Local0 = Arg1
                M211 = Local0 &= 0x03
                CreateBitField (M164, 0x02, M167)
                M167 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN3, 2, Serialized)
        {
            If ((M101 & 0x08))
            {
                Local0 = Arg0
                M214 = Local0
                Local0 = Arg1
                M213 = Local0 &= 0x03
                CreateBitField (M164, 0x03, M168)
                M168 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN4, 1, Serialized)
        {
            If ((M101 & 0x10))
            {
                Local0 = Arg0
                Local1 = M215 /* \_SB_.PCI0.GP17.VGA_.M215 */
                M215 = Local0
                If ((Local0 == Local1)){}
                Else
                {
                    CreateBitField (M164, 0x04, M169)
                    M169 = One
                    Notify (VGA, 0x81) // Information Change
                }
            }
        }

        Method (AFN5, 0, Serialized)
        {
            If ((M101 & 0x20))
            {
                CreateBitField (M164, 0x05, M170)
                M170 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN6, 0, Serialized)
        {
            If ((M101 & 0x40))
            {
                CreateBitField (M164, 0x06, M171)
                M171 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN7, 1, Serialized)
        {
            If ((M101 & 0x80))
            {
                CreateBitField (M164, 0x07, M172)
                M172 = One
                CreateByteField (ATIB, 0x0C, M181)
                M181 = Arg0
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN8, 0, Serialized)
        {
            If ((M101 & 0x0100))
            {
                CreateBitField (M164, 0x08, M173)
                M173 = One
            }
        }

        Method (AFNC, 2, Serialized)
        {
            If ((M101 & 0x1000))
            {
                Local0 = (Arg0 & 0x03)
                M303 = Local0
                Local0 = (Arg1 & Ones)
                M304 = Local0
                CreateBitField (M164, 0x0C, M300)
                M300 = One
                Notify (VGA, 0x81) // Information Change
            }
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AmdTable", 0x00000001)
{
    External (_SB_.PCI0.GP17.MP2C, DeviceObj)
    External (M037, DeviceObj)
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)

    Scope (\_SB)
    {
        Device (CIND)
        {
            Name (_HID, "AMDI0081")  // _HID: Hardware ID
            Name (_CID, "PNP0C60" /* Display Sensor Device */)  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((M049 (M128, 0x7A) == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (VGBI)
        {
            Name (_HID, "AMDI0080")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                \_SB.PCI0.GP17.MP2C
            })
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((M049 (M128, 0x7A) == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AmdTable", 0x00000001)
{
    External (_SB_.PCI0.GPP4.WLAN, DeviceObj)
    External (M017, MethodObj)    // 6 Arguments
    External (M018, MethodObj)    // 7 Arguments
    External (M037, DeviceObj)
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)

    Scope (_SB.PCI0.GPP4.WLAN)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Case (0x271B8086)
                    {
                        Return (One)
                    }
                    Case (0x27238086)
                    {
                        Return (One)
                    }
                    Case (0x0042168C)
                    {
                        Return (One)
                    }
                    Case (0x003E168C)
                    {
                        Return (One)
                    }
                    Case (0xC82110EC)
                    {
                        Return (One)
                    }
                    Case (0xB82210EC)
                    {
                        Return (One)
                    }
                    Case (0xC82210EC)
                    {
                        Return (One)
                    }
                    Case (0x766314C3)
                    {
                        Return (One)
                    }
                    Case (0x796114C3)
                    {
                        Return (One)
                    }
                    Case (0x27258086)
                    {
                        Return (One)
                    }
                    Case (0x766314C3)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
        {
            Return (Zero)
        }

        Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
        {
            If (WIST ())
            {
                If (CondRefOf (\_SB.PRWL))
                {
                    Return (Package (0x01)
                    {
                        \_SB.PRWL
                    })
                }
            }
        }
    }

    Scope (\_SB)
    {
        Name (WLPS, One)
        PowerResource (PRWL, 0x00, 0x0000)
        {
            Method (GDCP, 0, Serialized)
            {
                Name (WBUS, Zero)
                Local0 = M049 (M290, 0x10)
                Local1 = M049 (M290, 0x11)
                WBUS = M017 (Zero, Local0, Local1, 0x19, Zero, 0x08)
                Local0 = Zero
                Local1 = M017 (WBUS, Zero, Zero, 0x34, Zero, 0x08)
                While ((Local1 != Zero))
                {
                    Local2 = M017 (WBUS, Zero, Zero, Local1, Zero, 0x08)
                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                    {
                        Break
                    }

                    If ((Local2 == 0x10))
                    {
                        Local0 = M017 (WBUS, Zero, Zero, (Local1 + 0x04), Zero, 0x20)
                        Break
                    }

                    Local1 = M017 (WBUS, Zero, Zero, (Local1 + One), Zero, 0x08)
                }

                Return (Local0)
            }

            Method (SDCT, 0, Serialized)
            {
                Name (WBUS, Zero)
                Local0 = M049 (M290, 0x10)
                Local1 = M049 (M290, 0x11)
                WBUS = M017 (Zero, Local0, Local1, 0x19, Zero, 0x08)
                Local1 = M017 (WBUS, Zero, Zero, 0x34, Zero, 0x08)
                While (((Local1 != Zero) && (Local1 < 0xFF)))
                {
                    Local2 = M017 (WBUS, Zero, Zero, Local1, Zero, 0x08)
                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                    {
                        Break
                    }

                    If ((Local2 == 0x10))
                    {
                        M018 (WBUS, Zero, Zero, (Local1 + 0x08), 0x0F, One, One)
                        Break
                    }

                    Local1 = M017 (WBUS, Zero, Zero, (Local1 + One), Zero, 0x08)
                }
            }

            Method (_RST, 0, NotSerialized)  // _RST: Device Reset
            {
                Local0 = GDCP ()
                If ((Local0 & 0x10000000))
                {
                    SDCT ()
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (WLPS) /* \_SB_.WLPS */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                WLPS = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                WLPS = Zero
            }
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AmdTable", 0x00000001)
{
    External (_SB_.PLTF, DeviceObj)

    Scope (\_SB.PLTF)
    {
        Name (_LPI, Package (0x04)  // _LPI: Low Power Idle States
        {
            Zero, 
            Zero, 
            One, 
            Package (0x0A)
            {
                0x000F4240, 
                0xC350, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "S0i3"
            }
        })
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "AmdTable", 0x00000001)
{
    External (_SB_.PLTF.P000, DeviceObj)
    External (_SB_.PLTF.P001, DeviceObj)
    External (_SB_.PLTF.P002, DeviceObj)
    External (_SB_.PLTF.P003, DeviceObj)
    External (_SB_.PLTF.P004, DeviceObj)
    External (_SB_.PLTF.P005, DeviceObj)
    External (_SB_.PLTF.P006, DeviceObj)
    External (_SB_.PLTF.P007, DeviceObj)
    External (_SB_.PLTF.P008, DeviceObj)
    External (_SB_.PLTF.P009, DeviceObj)
    External (_SB_.PLTF.P00A, DeviceObj)
    External (_SB_.PLTF.P00B, DeviceObj)
    External (_SB_.PLTF.P00C, DeviceObj)
    External (_SB_.PLTF.P00D, DeviceObj)
    External (_SB_.PLTF.P00E, DeviceObj)
    External (_SB_.PLTF.P00F, DeviceObj)

    Scope (\_SB.PLTF.P000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.P000.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B2, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000709
        })
    }

    Scope (\_SB.PLTF.P001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.P001.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B2, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000709
        })
    }

    Scope (\_SB.PLTF.P002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.P002.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B2, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000709
        })
    }

    Scope (\_SB.PLTF.P003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.P003.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B2, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000709
        })
    }

    Scope (\_SB.PLTF.P004)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.P004.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B2, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000709
        })
    }

    Scope (\_SB.PLTF.P005)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.P005.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B2, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000709
        })
    }

    Scope (\_SB.PLTF.P006)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.P006.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B2, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000709
        })
    }

    Scope (\_SB.PLTF.P007)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.P007.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B2, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000709
        })
    }

    Scope (\_SB.PLTF.P008)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.P008.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B2, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000709
        })
    }

    Scope (\_SB.PLTF.P009)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.P009.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B2, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000709
        })
    }

    Scope (\_SB.PLTF.P00A)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.P00A.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B2, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000709
        })
    }

    Scope (\_SB.PLTF.P00B)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.P00B.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B2, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000709
        })
    }

    Scope (\_SB.PLTF.P00C)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.P00C.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B2, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000709
        })
    }

    Scope (\_SB.PLTF.P00D)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.P00D.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B2, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000709
        })
    }

    Scope (\_SB.PLTF.P00E)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.P00E.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B2, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000709
        })
    }

    Scope (\_SB.PLTF.P00F)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.P00F.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B2, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000709
        })
    }
}



SSDT9
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "AmdTable", 0x00000002)
{
    Scope (\_SB)
    {
        Name (AGRB, 0xF0000000)
        Name (ADBG, Buffer (0x0100){})
        Name (ADAT, Buffer (0x0520)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0038 */  0x00, 0x00, 0x00, 0x10, 0x13, 0xFF, 0xFF, 0x01,  // ........
            /* 0040 */  0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0060 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0088 */  0x00, 0x00, 0x00, 0x07, 0x07, 0xFF, 0xFF, 0x05,  // ........
            /* 0090 */  0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                CreateWordField (Arg1, 0x00, A013)
                CreateWordField (Arg1, 0x02, A014)
                CreateDWordField (Arg1, 0x04, A015)
                Local0 = Buffer (0x0100){}
                CreateWordField (Local0, 0x00, A016)
                A016 = A013 /* \_SB_.ALIB.A013 */
                CreateWordField (Local0, 0x02, A017)
                A017 = A014 /* \_SB_.ALIB.A014 */
                CreateDWordField (Local0, 0x04, A018)
                A018 = A015 /* \_SB_.ALIB.A015 */
                A018 &= ~0x0F
                If ((DerefOf (\_SB.ADAT [0x00]) > 0x00))
                {
                    Local1 = 0x0F
                }
                Else
                {
                    Local1 = 0x01
                }

                A018 |= Local1
                Return (Local0)
            }

            If ((Arg0 == 0x01))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A019 (Local0))
            }

            If ((Arg0 == 0x02))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x03))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x06))
            {
                Local0 = DerefOf (Arg1 [0x04])
                Local1 = DerefOf (Arg1 [0x02])
                Return (A022 (Local0, Local1))
            }

            If ((Arg0 == 0x0A))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A023 (Local0))
            }

            If ((Arg0 == 0x0B))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = DerefOf (Arg1 [0x03])
                Local2 = DerefOf (Arg1 [0x04])
                Local2 |= (DerefOf (Arg1 [0x05]) << 0x08)
                Local2 |= (DerefOf (Arg1 [0x06]) << 0x10)
                Local2 |= (DerefOf (Arg1 [0x07]) << 0x18)
                Local3 = DerefOf (Arg1 [0x08])
                Local3 |= (DerefOf (Arg1 [0x09]) << 0x08)
                Local3 |= (DerefOf (Arg1 [0x0A]) << 0x10)
                Local3 |= (DerefOf (Arg1 [0x0B]) << 0x18)
                Local4 = DerefOf (Arg1 [0x0C])
                Local4 |= (DerefOf (Arg1 [0x0D]) << 0x08)
                Local4 |= (DerefOf (Arg1 [0x0E]) << 0x10)
                Local4 |= (DerefOf (Arg1 [0x0F]) << 0x18)
                Return (A024 (Local0, Local1, Local2, Local3, Local4))
            }

            If ((Arg0 == 0x0C))
            {
                A025 (Arg1)
            }

            If ((Arg0 == 0x10))
            {
                Local7 = Buffer (0x18){}
                CreateDWordField (Local7, 0x00, A026)
                CreateDWordField (Local7, 0x04, A027)
                CreateDWordField (Local7, 0x08, A028)
                CreateDWordField (Local7, 0x0C, A029)
                CreateDWordField (Local7, 0x10, A030)
                CreateDWordField (Local7, 0x14, A031)
                A026 = 0x00
                A027 = 0x00
                A028 = 0x00
                A029 = 0x00
                A030 = 0x00
                A031 = 0x00
                A011 (0x26, Local7)
            }

            If ((Arg0 == 0x11))
            {
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A005)
                CreateDWordField (Local6, 0x04, A006)
                CreateDWordField (Local6, 0x08, A007)
                CreateDWordField (Local6, 0x0C, A008)
                CreateDWordField (Local6, 0x10, A009)
                CreateDWordField (Local6, 0x14, A010)
                A005 = 0x00
                A006 = 0x00
                A007 = 0x00
                A008 = 0x00
                A009 = 0x00
                A010 = 0x00
                A011 (0x25, Local6)
            }

            If ((Arg0 == 0x12))
            {
                Local7 = Buffer (0x18){}
                CreateDWordField (Local7, 0x00, A032)
                CreateDWordField (Local7, 0x04, A033)
                CreateDWordField (Local7, 0x08, A034)
                CreateDWordField (Local7, 0x0C, A035)
                CreateDWordField (Local7, 0x10, A036)
                CreateDWordField (Local7, 0x14, A037)
                A032 = 0x00
                A033 = 0x00
                A034 = 0x00
                A035 = 0x00
                A036 = 0x00
                A037 = 0x00
                A032 = Arg1
                A011 (0x59, Local7)
            }

            If ((Arg0 == 0xAA))
            {
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A038)
                CreateDWordField (Local6, 0x04, A039)
                CreateDWordField (Local6, 0x08, A040)
                CreateDWordField (Local6, 0x0C, A041)
                CreateDWordField (Local6, 0x10, A042)
                CreateDWordField (Local6, 0x14, A043)
                A038 = 0x00
                A039 = 0x00
                A040 = 0x00
                A041 = 0x00
                A042 = 0x00
                A043 = 0x00
                A044 (Arg1)
            }

            Return (0x00)
        }

        Method (A022, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A095 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    Local2 = A096 (Local0, Arg0)
                    Break
                }

                Local0++
            }

            Local7 = Buffer (0x0A){}
            CreateWordField (Local7, 0x00, A016)
            CreateByteField (Local7, 0x02, A046)
            CreateByteField (Local7, 0x03, A097)
            A016 = 0x04
            A046 = 0x00
            If ((Local2 == 0x00))
            {
                A097 = 0x00
            }
            Else
            {
                A097 = 0x01
            }

            Return (Local7)
        }

        Method (A095, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A090 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A090 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A090 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A090 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A090 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A090 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A090 (Arg1))
            }
        }

        Method (A096, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A091 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A091 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A091 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A091 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A091 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A091 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A091 (Arg1))
            }
        }

        Name (AD00, 0x00)
        Name (DK00, 0x00)
        Method (A019, 1, NotSerialized)
        {
            AD00 = Arg0
            A004 ()
        }

        Method (A023, 1, NotSerialized)
        {
            DK00 = Arg0
        }

        Method (A024, 5, NotSerialized)
        {
        }

        Name (AP01, 0x00)
        Name (AP02, 0x00)
        Name (AP03, 0x00)
        Name (AP05, 0x00)
        Name (AP0B, 0xFF)
        Name (AP10, 0x00)
        Method (A045, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100){}
            CreateWordField (Local7, 0x00, A016)
            A016 = 0x03
            CreateByteField (Local7, 0x02, A046)
            A046 = 0x01
            If ((DerefOf (\_SB.ADAT [0x00]) == 0x01))
            {
                A046 = 0x02
                Return (Local7)
            }

            If ((DerefOf (\_SB.ADAT [0x00]) == 0x00))
            {
                A046 = 0x01
                Return (Local7)
            }

            A047 (Arg0)
            If ((AP05 != 0x01))
            {
                Return (Local7)
            }

            A048 ()
            A046 = 0x02
            Return (Local7)
        }

        Method (A049, 0, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            If ((AP05 != 0x01))
            {
                Return (0x00)
            }

            A048 ()
        }

        Method (A050, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                AP01 = 0x00
            }
        }

        Method (A051, 1, NotSerialized)
        {
            AP10 = 0x01
        }

        Method (A052, 1, NotSerialized)
        {
            AP05 = Arg0
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            Local1 = AP0B /* \_SB_.AP0B */
            If ((AP05 == 0x00))
            {
                Local0 = 0x00
                While ((Local0 < 0x0A))
                {
                    A053 (Local0)
                    Local0++
                }

                AP0B = 0x00
            }

            A048 ()
            AP0B = Local1
            Local7 = Buffer (0x0100){}
            Local7 [0x00] = 0x03
            Local7 [0x01] = 0x00
            Local7 [0x02] = 0x00
            Return (Local7)
        }

        Method (A054, 0, NotSerialized)
        {
            If ((AP0B != 0xFF))
            {
                Return (AP0B) /* \_SB_.AP0B */
            }

            Return (AD00) /* \_SB_.AD00 */
        }

        Method (A047, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                If ((A055 (Local0, AP06) == 0x01))
                {
                    If (((AP07 & AP08) == 0x01))
                    {
                        Local1 = A056 (Local0)
                        A057 (Local0, Local1)
                    }
                    Else
                    {
                        A057 (Local0, AP0A)
                    }

                    Break
                }

                Local0++
            }
        }

        Method (A058, 0, NotSerialized)
        {
            AP02 = 0x01
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A059 (Local0)
                If ((Local1 > AP02))
                {
                    AP02 = Local1
                }

                Local0++
            }
        }

        Method (A060, 0, NotSerialized)
        {
            AP03 = 0x00
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A061 (Local0)
                If ((Local1 > AP03))
                {
                    AP03 = Local1
                }

                Local0++
            }
        }

        Method (A048, 0, NotSerialized)
        {
            A060 ()
            A058 ()
            If ((AP02 != AP01))
            {
                A012 (AP02, AP01)
            }

            If ((AP02 > AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A059 (Local0)
                Local2 = A062 (Local0)
                If ((Local1 != Local2))
                {
                    A063 (Local0, Local1)
                }
                ElseIf ((AP10 == 0x01))
                {
                    A063 (Local0, Local1)
                }

                Local0++
            }

            If ((AP02 < AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }
            ElseIf ((AP10 == 0x01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            AP10 = 0x00
        }

        Method (A063, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A064 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A064 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A064 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A064 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A064 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A064 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A064 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A064 (Arg1))
            }
        }

        Method (A062, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A065 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A065 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A065 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A065 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A065 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A065 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A065 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A065 ())
            }
        }

        Method (A059, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A066 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A066 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A066 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A066 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A066 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A066 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A066 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A066 ())
            }
        }

        Method (A061, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A067 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A067 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A067 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A067 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A067 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A067 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A067 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A067 ())
            }
        }

        Method (A056, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A068 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A068 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A068 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A068 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A068 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A068 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A068 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A068 ())
            }
        }

        Method (A057, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A069 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A069 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A069 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A069 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A069 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A069 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A069 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A069 (Arg1))
            }
        }

        Method (A055, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A070 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A070 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A070 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A070 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A070 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A070 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A070 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A070 (Arg1))
            }
        }

        Method (A053, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A071 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A071 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A071 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A071 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A071 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A071 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A071 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A071 ())
            }
        }

        OperationRegion (A126, SystemMemory, AGRB, 0x1000)
        Field (A126, DWordAcc, Lock, Preserve)
        {
            Offset (0xB8), 
            A127,   32
        }

        BankField (A126, A127, 0x03B10528, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A124,   32
        }

        BankField (A126, A127, 0x03B10564, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A117,   32
        }

        BankField (A126, A127, 0x03B10998, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A118,   32
        }

        BankField (A126, A127, 0x03B1099C, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A119,   32
        }

        BankField (A126, A127, 0x03B109A0, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A120,   32
        }

        BankField (A126, A127, 0x03B109A4, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A121,   32
        }

        BankField (A126, A127, 0x03B109A8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A122,   32
        }

        BankField (A126, A127, 0x03B109AC, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A123,   32
        }

        BankField (A126, A127, 0x13B00084, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A100,   32
        }

        BankField (A126, A127, 0x11140280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A108,   32
        }

        BankField (A126, A127, 0x11141280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A109,   32
        }

        BankField (A126, A127, 0x11142280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A110,   32
        }

        BankField (A126, A127, 0x11240280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A101,   32
        }

        BankField (A126, A127, 0x11241280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A102,   32
        }

        BankField (A126, A127, 0x11242280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A103,   32
        }

        BankField (A126, A127, 0x11243280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A104,   32
        }

        BankField (A126, A127, 0x11244280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A105,   32
        }

        BankField (A126, A127, 0x11245280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A106,   32
        }

        BankField (A126, A127, 0x11246280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A107,   32
        }

        Method (A098, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A079 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A079 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A079 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A079 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A079 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A079 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A079 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A079 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR0.ABR8.A079 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR0.ABR9.A079 (Arg1))
            }
        }

        Method (A099, 2, NotSerialized)
        {
            If ((Arg1 == 0x01))
            {
                If ((Arg0 == 0x00))
                {
                    Local0 = 0x00190300
                }

                If ((Arg0 == 0x01))
                {
                    Local0 = 0x001A0300
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = 0x001B0300
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = 0x001C0300
                }

                If ((Arg0 == 0x04))
                {
                    Local0 = 0x001D0300
                }

                If ((Arg0 == 0x05))
                {
                    Local0 = 0x001E0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x001F0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x00090300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x000A0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x000B0300
                }

                Local1 = A100 /* \_SB_.A100 */
                Local1 &= 0xFF00FCFF
                A100 = (Local0 | Local1)
                Local1 = A100 /* \_SB_.A100 */
                A100 = (0xFFFFFDFF & Local1)
            }
            ElseIf ((Arg1 == 0x00))
            {
                If ((Arg0 == 0x00))
                {
                    Local1 = A101 /* \_SB_.A101 */
                    A101 = (0x00400000 | Local1)
                    Local1 = A101 /* \_SB_.A101 */
                    A101 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x01))
                {
                    Local1 = A102 /* \_SB_.A102 */
                    A102 = (0x00400000 | Local1)
                    Local1 = A102 /* \_SB_.A102 */
                    A102 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x02))
                {
                    Local1 = A103 /* \_SB_.A103 */
                    A103 = (0x00400000 | Local1)
                    Local1 = A103 /* \_SB_.A103 */
                    A103 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x03))
                {
                    Local1 = A104 /* \_SB_.A104 */
                    A104 = (0x00400000 | Local1)
                    Local1 = A104 /* \_SB_.A104 */
                    A104 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x04))
                {
                    Local1 = A105 /* \_SB_.A105 */
                    A105 = (0x00400000 | Local1)
                    Local1 = A105 /* \_SB_.A105 */
                    A105 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x05))
                {
                    Local1 = A106 /* \_SB_.A106 */
                    A106 = (0x00400000 | Local1)
                    Local1 = A106 /* \_SB_.A106 */
                    A106 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x06))
                {
                    Local1 = A107 /* \_SB_.A107 */
                    A107 = (0x00400000 | Local1)
                    Local1 = A107 /* \_SB_.A107 */
                    A107 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x07))
                {
                    Local1 = A108 /* \_SB_.A108 */
                    A108 = (0x00400000 | Local1)
                    Local1 = A108 /* \_SB_.A108 */
                    A108 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x08))
                {
                    Local1 = A109 /* \_SB_.A109 */
                    A109 = (0x00400000 | Local1)
                    Local1 = A109 /* \_SB_.A109 */
                    A109 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x09))
                {
                    Local1 = A110 /* \_SB_.A110 */
                    A110 = (0x00400000 | Local1)
                    Local1 = A110 /* \_SB_.A110 */
                    A110 = (0xFFBFFFFF & Local1)
                }
            }
        }

        Method (A003, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A098 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    A099 (Local0, Arg1)
                    Break
                }

                Local0++
            }
        }

        Method (A011, 2, Serialized)
        {
            CreateDWordField (Arg1, 0x00, A111)
            CreateDWordField (Arg1, 0x04, A112)
            CreateDWordField (Arg1, 0x08, A113)
            CreateDWordField (Arg1, 0x0C, A114)
            CreateDWordField (Arg1, 0x10, A115)
            CreateDWordField (Arg1, 0x14, A116)
            A117 = 0x00
            While ((A117 != 0x00)){}
            A118 = A111 /* \_SB_.A011.A111 */
            A119 = A112 /* \_SB_.A011.A112 */
            A120 = A113 /* \_SB_.A011.A113 */
            A121 = A114 /* \_SB_.A011.A114 */
            A122 = A115 /* \_SB_.A011.A115 */
            A123 = A116 /* \_SB_.A011.A116 */
            A124 = Arg0
            While ((A117 == 0x00)){}
        }

        Method (A093, 5, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            A005 = Arg0
            A006 = Arg1
            A007 = Arg2
            A008 = Arg3
            A011 (0x09, Local7)
        }

        Method (A025, 1, Serialized)
        {
            CreateWordField (Arg0, 0x00, A125)
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            Local0 = 0x02
            While ((Local0 < A125))
            {
                Local1 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x10)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x18)
                Local0++
                A005 = 0x00
                A006 = 0x00
                A007 = 0x00
                A008 = 0x00
                A009 = 0x00
                A010 = 0x00
                If ((Local1 == 0x01))
                {
                    A005 = Local2
                    A011 (0x18, Local7)
                }

                If ((Local1 == 0x03))
                {
                    A005 = Local2
                    A011 (0x19, Local7)
                }

                If ((Local1 == 0x05))
                {
                    A005 = Local2
                    A011 (0x14, Local7)
                }

                If ((Local1 == 0x06))
                {
                    A005 = Local2
                    A011 (0x15, Local7)
                }

                If ((Local1 == 0x07))
                {
                    A005 = Local2
                    A011 (0x16, Local7)
                }

                If ((Local1 == 0x08))
                {
                    A005 = Local2
                    A011 (0x17, Local7)
                }

                If ((Local1 == 0x09))
                {
                    A005 = Local2
                    A011 (0x20, Local7)
                }

                If ((Local1 == 0x0B))
                {
                    A005 = Local2
                    A011 (0x1A, Local7)
                }

                If ((Local1 == 0x0C))
                {
                    A005 = Local2
                    A011 (0x1C, Local7)
                }

                If ((Local1 == 0x0D))
                {
                    A005 = Local2
                    A011 (0x1E, Local7)
                }

                If ((Local1 == 0x0E))
                {
                    A005 = Local2
                    A011 (0x1B, Local7)
                }

                If ((Local1 == 0x0F))
                {
                    A005 = Local2
                    A011 (0x1F, Local7)
                }

                If ((DerefOf (\_SB.ADAT [0x08]) == 0x01))
                {
                    If ((Local1 == 0x10))
                    {
                        If ((Local2 == 0x00))
                        {
                            A011 (0x26, Local7)
                        }
                        Else
                        {
                            A011 (0x25, Local7)
                        }
                    }
                }

                If ((Local1 == 0x11))
                {
                    A005 = Local2
                    A011 (0x1D, Local7)
                }

                If ((Local1 == 0x12))
                {
                    A005 = Local2
                    A011 (0x5E, Local7)
                }

                If ((Local1 == 0x13))
                {
                    A005 = Local2
                    A011 (0x21, Local7)
                }

                If ((Local1 == 0x20))
                {
                    A005 = Local2
                    A011 (0x36, Local7)
                }

                If ((Local1 == 0x21))
                {
                    A005 = Local2
                    A011 (0x37, Local7)
                }

                If ((Local1 == 0x22))
                {
                    A005 = Local2
                    A011 (0x38, Local7)
                }

                If ((Local1 == 0x23))
                {
                    A005 = Local2
                    A011 (0x39, Local7)
                }

                If ((Local1 == 0x24))
                {
                    A005 = Local2
                    A011 (0x3A, Local7)
                }

                If ((Local1 == 0x25))
                {
                    A005 = Local2
                    A011 (0x3B, Local7)
                }

                If ((Local1 == 0x26))
                {
                    A005 = Local2
                    A011 (0x3C, Local7)
                }

                If ((Local1 == 0x27))
                {
                    A005 = Local2
                    A011 (0x3D, Local7)
                }

                If ((Local1 == 0x28))
                {
                    A005 = Local2
                    A011 (0x3E, Local7)
                }

                If ((Local1 == 0x29))
                {
                    A005 = Local2
                    A011 (0x3F, Local7)
                }

                If ((Local1 == 0x2A))
                {
                    A005 = Local2
                    A011 (0x40, Local7)
                }

                If ((Local1 == 0x2B))
                {
                    A005 = Local2
                    A011 (0x41, Local7)
                }

                If ((Local1 == 0x2C))
                {
                    A005 = Local2
                    A011 (0x42, Local7)
                }

                If ((Local1 == 0x2D))
                {
                    A005 = Local2
                    A011 (0x43, Local7)
                }

                If ((Local1 == 0x2E))
                {
                    A005 = Local2
                    A011 (0x53, Local7)
                }
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x90)  // _UID: Unique ID
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A083, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A083, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A077,   8, 
                    A078,   8, 
                    Offset (0x68), 
                    A084,   2, 
                        ,   2, 
                    A085,   1, 
                    A086,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A087,   1, 
                    Offset (0x88), 
                    A088,   4, 
                        ,   1, 
                    A089,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A072, 0, NotSerialized)
                {
                    Local0 = A054 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR0.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A073, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A066, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }

                    Local0 = A073 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A072 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A065, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR0.AB02 */
                }

                Method (A068, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                }

                Method (A064, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A074 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A075 (0x00)
                    Name (A076, 0x00)
                    A075 (0x01)
                }

                Method (A069, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A070, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A077) && (Local0 <= A078)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A079, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A071, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A074, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A080, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A081 (Local0, 0x00)
                    Local2 = A081 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A081 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A081 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A082 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A082 (0x24, Local5, 0x00)
                                            A082 (0x26, 0x00, 0x00)
                                            A082 (0x05, 0x00, (0x01 << 0x0A))
                                            A082 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A082 (0x26, 0x00, 0x00)
                                            A082 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A094, 2, NotSerialized)
                {
                    If ((A081 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A081 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A081 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A075, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A081 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A081 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A094 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A081 (Local0, (Local1 + 0x10))
                                A092 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A092 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A092, 3, Serialized)
                {
                    Local0 = (AGRB + (A078 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A081, 2, Serialized)
                {
                    Local0 = (AGRB + (A078 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR0.A081.ADRR */
                }

                Method (A090, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A079 (Arg0))
                }

                Method (A091, 1, NotSerialized)
                {
                    Name (A076, 0x00)
                    Local2 = 0x00
                    A076 = A084 /* \_SB_.AWR0.ABR0.A084 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A085 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A075 (0x00)
                        Local0 = A081 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A092 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A081 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A092 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A085 = 0x01
                        Local0 = 0x05
                    }

                    A084 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A093 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A081 (0x00, 0x00)
                            A093 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A084 = A076 /* \_SB_.AWR0.ABR0.A091.A076 */
                    If ((A076 != 0x00))
                    {
                        A075 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A083, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A083, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A077,   8, 
                    A078,   8, 
                    Offset (0x68), 
                    A084,   2, 
                        ,   2, 
                    A085,   1, 
                    A086,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A087,   1, 
                    Offset (0x88), 
                    A088,   4, 
                        ,   1, 
                    A089,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A072, 0, NotSerialized)
                {
                    Local0 = A054 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR1.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A073, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A066, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }

                    Local0 = A073 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A072 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A065, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR1.AB02 */
                }

                Method (A068, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                }

                Method (A064, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A074 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A075 (0x00)
                    Name (A076, 0x00)
                    A075 (0x01)
                }

                Method (A069, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A070, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A077) && (Local0 <= A078)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A079, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A071, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A074, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A080, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A081 (Local0, 0x00)
                    Local2 = A081 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A081 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A081 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A082 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A082 (0x24, Local5, 0x00)
                                            A082 (0x26, 0x00, 0x00)
                                            A082 (0x05, 0x00, (0x01 << 0x0A))
                                            A082 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A082 (0x26, 0x00, 0x00)
                                            A082 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A094, 2, NotSerialized)
                {
                    If ((A081 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A081 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A081 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A075, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A081 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A081 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A094 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A081 (Local0, (Local1 + 0x10))
                                A092 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A092 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A092, 3, Serialized)
                {
                    Local0 = (AGRB + (A078 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A081, 2, Serialized)
                {
                    Local0 = (AGRB + (A078 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR1.A081.ADRR */
                }

                Method (A090, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A079 (Arg0))
                }

                Method (A091, 1, NotSerialized)
                {
                    Name (A076, 0x00)
                    Local2 = 0x00
                    A076 = A084 /* \_SB_.AWR0.ABR1.A084 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A085 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A075 (0x00)
                        Local0 = A081 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A092 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A081 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A092 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A085 = 0x01
                        Local0 = 0x05
                    }

                    A084 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A093 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A081 (0x00, 0x00)
                            A093 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A084 = A076 /* \_SB_.AWR0.ABR1.A091.A076 */
                    If ((A076 != 0x00))
                    {
                        A075 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A083, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A083, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A077,   8, 
                    A078,   8, 
                    Offset (0x68), 
                    A084,   2, 
                        ,   2, 
                    A085,   1, 
                    A086,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A087,   1, 
                    Offset (0x88), 
                    A088,   4, 
                        ,   1, 
                    A089,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A072, 0, NotSerialized)
                {
                    Local0 = A054 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR2.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A073, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A066, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }

                    Local0 = A073 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A072 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A065, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR2.AB02 */
                }

                Method (A068, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                }

                Method (A064, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A074 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A075 (0x00)
                    Name (A076, 0x00)
                    A075 (0x01)
                }

                Method (A069, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A070, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A077) && (Local0 <= A078)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A079, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A071, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A074, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A080, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A081 (Local0, 0x00)
                    Local2 = A081 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A081 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A081 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A082 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A082 (0x24, Local5, 0x00)
                                            A082 (0x26, 0x00, 0x00)
                                            A082 (0x05, 0x00, (0x01 << 0x0A))
                                            A082 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A082 (0x26, 0x00, 0x00)
                                            A082 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A094, 2, NotSerialized)
                {
                    If ((A081 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A081 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A081 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A075, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A081 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A081 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A094 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A081 (Local0, (Local1 + 0x10))
                                A092 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A092 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A092, 3, Serialized)
                {
                    Local0 = (AGRB + (A078 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A081, 2, Serialized)
                {
                    Local0 = (AGRB + (A078 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR2.A081.ADRR */
                }

                Method (A090, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A079 (Arg0))
                }

                Method (A091, 1, NotSerialized)
                {
                    Name (A076, 0x00)
                    Local2 = 0x00
                    A076 = A084 /* \_SB_.AWR0.ABR2.A084 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A085 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A075 (0x00)
                        Local0 = A081 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A092 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A081 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A092 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A085 = 0x01
                        Local0 = 0x05
                    }

                    A084 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A093 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A081 (0x00, 0x00)
                            A093 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A084 = A076 /* \_SB_.AWR0.ABR2.A091.A076 */
                    If ((A076 != 0x00))
                    {
                        A075 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A083, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A083, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A077,   8, 
                    A078,   8, 
                    Offset (0x68), 
                    A084,   2, 
                        ,   2, 
                    A085,   1, 
                    A086,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A087,   1, 
                    Offset (0x88), 
                    A088,   4, 
                        ,   1, 
                    A089,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A072, 0, NotSerialized)
                {
                    Local0 = A054 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR3.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A073, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A066, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }

                    Local0 = A073 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A072 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A065, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR3.AB02 */
                }

                Method (A068, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                }

                Method (A064, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A074 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A075 (0x00)
                    Name (A076, 0x00)
                    A075 (0x01)
                }

                Method (A069, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A070, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A077) && (Local0 <= A078)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A079, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A071, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A074, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A080, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A081 (Local0, 0x00)
                    Local2 = A081 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A081 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A081 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A082 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A082 (0x24, Local5, 0x00)
                                            A082 (0x26, 0x00, 0x00)
                                            A082 (0x05, 0x00, (0x01 << 0x0A))
                                            A082 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A082 (0x26, 0x00, 0x00)
                                            A082 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A094, 2, NotSerialized)
                {
                    If ((A081 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A081 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A081 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A075, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A081 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A081 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A094 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A081 (Local0, (Local1 + 0x10))
                                A092 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A092 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A092, 3, Serialized)
                {
                    Local0 = (AGRB + (A078 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A081, 2, Serialized)
                {
                    Local0 = (AGRB + (A078 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR3.A081.ADRR */
                }

                Method (A090, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A079 (Arg0))
                }

                Method (A091, 1, NotSerialized)
                {
                    Name (A076, 0x00)
                    Local2 = 0x00
                    A076 = A084 /* \_SB_.AWR0.ABR3.A084 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A085 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A075 (0x00)
                        Local0 = A081 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A092 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A081 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A092 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A085 = 0x01
                        Local0 = 0x05
                    }

                    A084 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A093 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A081 (0x00, 0x00)
                            A093 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A084 = A076 /* \_SB_.AWR0.ABR3.A091.A076 */
                    If ((A076 != 0x00))
                    {
                        A075 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A083, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A083, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A077,   8, 
                    A078,   8, 
                    Offset (0x68), 
                    A084,   2, 
                        ,   2, 
                    A085,   1, 
                    A086,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A087,   1, 
                    Offset (0x88), 
                    A088,   4, 
                        ,   1, 
                    A089,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A072, 0, NotSerialized)
                {
                    Local0 = A054 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR4.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A073, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A066, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }

                    Local0 = A073 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A072 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A065, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR4.AB02 */
                }

                Method (A068, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                }

                Method (A064, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A074 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A075 (0x00)
                    Name (A076, 0x00)
                    A075 (0x01)
                }

                Method (A069, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A070, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A077) && (Local0 <= A078)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A079, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A071, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A074, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A080, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A081 (Local0, 0x00)
                    Local2 = A081 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A081 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A081 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A082 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A082 (0x24, Local5, 0x00)
                                            A082 (0x26, 0x00, 0x00)
                                            A082 (0x05, 0x00, (0x01 << 0x0A))
                                            A082 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A082 (0x26, 0x00, 0x00)
                                            A082 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A094, 2, NotSerialized)
                {
                    If ((A081 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A081 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A081 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A075, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A081 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A081 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A094 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A081 (Local0, (Local1 + 0x10))
                                A092 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A092 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A092, 3, Serialized)
                {
                    Local0 = (AGRB + (A078 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A081, 2, Serialized)
                {
                    Local0 = (AGRB + (A078 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR4.A081.ADRR */
                }

                Method (A090, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A079 (Arg0))
                }

                Method (A091, 1, NotSerialized)
                {
                    Name (A076, 0x00)
                    Local2 = 0x00
                    A076 = A084 /* \_SB_.AWR0.ABR4.A084 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A085 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A075 (0x00)
                        Local0 = A081 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A092 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A081 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A092 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A085 = 0x01
                        Local0 = 0x05
                    }

                    A084 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A093 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A081 (0x00, 0x00)
                            A093 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A084 = A076 /* \_SB_.AWR0.ABR4.A091.A076 */
                    If ((A076 != 0x00))
                    {
                        A075 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR5)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x85)  // _UID: Unique ID
                Name (AB12, 0x84)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A083, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A083, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A077,   8, 
                    A078,   8, 
                    Offset (0x68), 
                    A084,   2, 
                        ,   2, 
                    A085,   1, 
                    A086,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A087,   1, 
                    Offset (0x88), 
                    A088,   4, 
                        ,   1, 
                    A089,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A072, 0, NotSerialized)
                {
                    Local0 = A054 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR5.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A073, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A066, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }

                    Local0 = A073 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A072 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A065, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR5.AB02 */
                }

                Method (A068, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                }

                Method (A064, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A074 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A075 (0x00)
                    Name (A076, 0x00)
                    A075 (0x01)
                }

                Method (A069, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A070, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A077) && (Local0 <= A078)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A079, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A071, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A074, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A080, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A081 (Local0, 0x00)
                    Local2 = A081 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A081 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A081 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A082 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A082 (0x24, Local5, 0x00)
                                            A082 (0x26, 0x00, 0x00)
                                            A082 (0x05, 0x00, (0x01 << 0x0A))
                                            A082 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A082 (0x26, 0x00, 0x00)
                                            A082 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A094, 2, NotSerialized)
                {
                    If ((A081 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A081 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A081 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A075, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A081 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A081 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A094 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A081 (Local0, (Local1 + 0x10))
                                A092 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A092 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A092, 3, Serialized)
                {
                    Local0 = (AGRB + (A078 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A081, 2, Serialized)
                {
                    Local0 = (AGRB + (A078 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR5.A081.ADRR */
                }

                Method (A090, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A079 (Arg0))
                }

                Method (A091, 1, NotSerialized)
                {
                    Name (A076, 0x00)
                    Local2 = 0x00
                    A076 = A084 /* \_SB_.AWR0.ABR5.A084 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A085 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A075 (0x00)
                        Local0 = A081 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A092 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A081 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A092 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A085 = 0x01
                        Local0 = 0x05
                    }

                    A084 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A093 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A081 (0x00, 0x00)
                            A093 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A084 = A076 /* \_SB_.AWR0.ABR5.A091.A076 */
                    If ((A076 != 0x00))
                    {
                        A075 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR6)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x86)  // _UID: Unique ID
                Name (AB12, 0x98)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A083, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A083, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A077,   8, 
                    A078,   8, 
                    Offset (0x68), 
                    A084,   2, 
                        ,   2, 
                    A085,   1, 
                    A086,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A087,   1, 
                    Offset (0x88), 
                    A088,   4, 
                        ,   1, 
                    A089,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A072, 0, NotSerialized)
                {
                    Local0 = A054 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR6.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A073, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A066, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }

                    Local0 = A073 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A072 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A065, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR6.AB02 */
                }

                Method (A068, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                }

                Method (A064, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A074 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A075 (0x00)
                    Name (A076, 0x00)
                    A075 (0x01)
                }

                Method (A069, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A070, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A077) && (Local0 <= A078)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A079, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A071, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A074, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A080, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A081 (Local0, 0x00)
                    Local2 = A081 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A081 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A081 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A082 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A082 (0x24, Local5, 0x00)
                                            A082 (0x26, 0x00, 0x00)
                                            A082 (0x05, 0x00, (0x01 << 0x0A))
                                            A082 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A082 (0x26, 0x00, 0x00)
                                            A082 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A094, 2, NotSerialized)
                {
                    If ((A081 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A081 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A081 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A075, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A081 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A081 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A094 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A081 (Local0, (Local1 + 0x10))
                                A092 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A092 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A092, 3, Serialized)
                {
                    Local0 = (AGRB + (A078 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A081, 2, Serialized)
                {
                    Local0 = (AGRB + (A078 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR6.A081.ADRR */
                }

                Method (A090, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A079 (Arg0))
                }

                Method (A091, 1, NotSerialized)
                {
                    Name (A076, 0x00)
                    Local2 = 0x00
                    A076 = A084 /* \_SB_.AWR0.ABR6.A084 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A085 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A075 (0x00)
                        Local0 = A081 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A092 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A081 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A092 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A085 = 0x01
                        Local0 = 0x05
                    }

                    A084 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A093 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A081 (0x00, 0x00)
                            A093 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A084 = A076 /* \_SB_.AWR0.ABR6.A091.A076 */
                    If ((A076 != 0x00))
                    {
                        A075 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR7)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x87)  // _UID: Unique ID
                Name (AB12, 0xAC)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A083, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A083, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A077,   8, 
                    A078,   8, 
                    Offset (0x68), 
                    A084,   2, 
                        ,   2, 
                    A085,   1, 
                    A086,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A087,   1, 
                    Offset (0x88), 
                    A088,   4, 
                        ,   1, 
                    A089,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A072, 0, NotSerialized)
                {
                    Local0 = A054 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR7.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A073, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A066, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }

                    Local0 = A073 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A072 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A065, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR7.AB02 */
                }

                Method (A068, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                }

                Method (A064, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A074 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A075 (0x00)
                    Name (A076, 0x00)
                    A075 (0x01)
                }

                Method (A069, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A070, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A077) && (Local0 <= A078)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A079, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A071, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A074, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A080, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A081 (Local0, 0x00)
                    Local2 = A081 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A081 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A081 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A082 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A082 (0x24, Local5, 0x00)
                                            A082 (0x26, 0x00, 0x00)
                                            A082 (0x05, 0x00, (0x01 << 0x0A))
                                            A082 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A082 (0x26, 0x00, 0x00)
                                            A082 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A094, 2, NotSerialized)
                {
                    If ((A081 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A081 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A081 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A075, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A081 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A081 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A094 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A081 (Local0, (Local1 + 0x10))
                                A092 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A092 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A092, 3, Serialized)
                {
                    Local0 = (AGRB + (A078 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A081, 2, Serialized)
                {
                    Local0 = (AGRB + (A078 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR7.A081.ADRR */
                }

                Method (A090, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A079 (Arg0))
                }

                Method (A091, 1, NotSerialized)
                {
                    Name (A076, 0x00)
                    Local2 = 0x00
                    A076 = A084 /* \_SB_.AWR0.ABR7.A084 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A085 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A075 (0x00)
                        Local0 = A081 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A092 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A081 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A092 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A085 = 0x01
                        Local0 = 0x05
                    }

                    A084 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A093 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A081 (0x00, 0x00)
                            A093 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A084 = A076 /* \_SB_.AWR0.ABR7.A091.A076 */
                    If ((A076 != 0x00))
                    {
                        A075 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR8)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x88)  // _UID: Unique ID
                Name (AB12, 0xC0)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A083, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A083, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A077,   8, 
                    A078,   8, 
                    Offset (0x68), 
                    A084,   2, 
                        ,   2, 
                    A085,   1, 
                    A086,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A087,   1, 
                    Offset (0x88), 
                    A088,   4, 
                        ,   1, 
                    A089,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A072, 0, NotSerialized)
                {
                    Local0 = A054 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR8.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR8.AB0E */
                    }
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A073, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR8.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A066, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR8.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR8.AB0E */
                    }

                    Local0 = A073 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR8.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A072 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A065, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR8.AB02 */
                }

                Method (A068, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR8.AB00 */
                }

                Method (A064, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A074 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A075 (0x00)
                    Name (A076, 0x00)
                    A075 (0x01)
                }

                Method (A069, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A070, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A077) && (Local0 <= A078)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A079, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A071, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A074, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A080, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A081 (Local0, 0x00)
                    Local2 = A081 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A081 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A081 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A082 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A082 (0x24, Local5, 0x00)
                                            A082 (0x26, 0x00, 0x00)
                                            A082 (0x05, 0x00, (0x01 << 0x0A))
                                            A082 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A082 (0x26, 0x00, 0x00)
                                            A082 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A094, 2, NotSerialized)
                {
                    If ((A081 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A081 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A081 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A075, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A081 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A081 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A094 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A081 (Local0, (Local1 + 0x10))
                                A092 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A092 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A092, 3, Serialized)
                {
                    Local0 = (AGRB + (A078 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A081, 2, Serialized)
                {
                    Local0 = (AGRB + (A078 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR8.A081.ADRR */
                }

                Method (A090, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A079 (Arg0))
                }

                Method (A091, 1, NotSerialized)
                {
                    Name (A076, 0x00)
                    Local2 = 0x00
                    A076 = A084 /* \_SB_.AWR0.ABR8.A084 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A085 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A075 (0x00)
                        Local0 = A081 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A092 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A081 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A092 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A085 = 0x01
                        Local0 = 0x05
                    }

                    A084 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A093 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A081 (0x00, 0x00)
                            A093 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A084 = A076 /* \_SB_.AWR0.ABR8.A091.A076 */
                    If ((A076 != 0x00))
                    {
                        A075 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR9)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x89)  // _UID: Unique ID
                Name (AB12, 0xD4)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A083, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A083, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A077,   8, 
                    A078,   8, 
                    Offset (0x68), 
                    A084,   2, 
                        ,   2, 
                    A085,   1, 
                    A086,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A087,   1, 
                    Offset (0x88), 
                    A088,   4, 
                        ,   1, 
                    A089,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A072, 0, NotSerialized)
                {
                    Local0 = A054 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR9.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR9.AB0E */
                    }
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A073, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR9.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A066, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR9.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR9.AB0E */
                    }

                    Local0 = A073 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR9.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A072 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A065, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR9.AB02 */
                }

                Method (A068, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR9.AB00 */
                }

                Method (A064, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A074 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A075 (0x00)
                    Name (A076, 0x00)
                    A075 (0x01)
                }

                Method (A069, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A070, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A077) && (Local0 <= A078)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A079, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A071, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A074, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A080, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A081 (Local0, 0x00)
                    Local2 = A081 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A081 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A081 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A082 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A082 (0x24, Local5, 0x00)
                                            A082 (0x26, 0x00, 0x00)
                                            A082 (0x05, 0x00, (0x01 << 0x0A))
                                            A082 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A082 (0x26, 0x00, 0x00)
                                            A082 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A094, 2, NotSerialized)
                {
                    If ((A081 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A081 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A081 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A075, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A081 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A081 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A094 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A081 (Local0, (Local1 + 0x10))
                                A092 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A092 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A092, 3, Serialized)
                {
                    Local0 = (AGRB + (A078 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A081, 2, Serialized)
                {
                    Local0 = (AGRB + (A078 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR9.A081.ADRR */
                }

                Method (A090, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A079 (Arg0))
                }

                Method (A091, 1, NotSerialized)
                {
                    Name (A076, 0x00)
                    Local2 = 0x00
                    A076 = A084 /* \_SB_.AWR0.ABR9.A084 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A085 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A075 (0x00)
                        Local0 = A081 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A092 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A081 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A092 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A085 = 0x01
                        Local0 = 0x05
                    }

                    A084 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A093 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A081 (0x00, 0x00)
                            A093 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A084 = A076 /* \_SB_.AWR0.ABR9.A091.A076 */
                    If ((A076 != 0x00))
                    {
                        A075 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Method (A128, 1, Serialized)
        {
            If ((DerefOf (\_SB.ADAT [0x08]) == 0x01))
            {
                Local0 = 0x00
                While ((Local0 < 0x0A))
                {
                    A129 (Local0, Arg0)
                    Local0++
                }
            }
        }

        Method (A082, 3, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            A005 = Arg1
            A006 = Arg2
            A011 (Arg0, Local7)
        }

        Method (A129, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A080 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A080 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A080 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A080 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A080 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A080 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A080 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A080 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR0.ABR8.A080 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR0.ABR9.A080 (Arg1))
            }
        }

        Method (A044, 1, Serialized)
        {
            Local0 = 0x00
            Local6 = DerefOf (Arg0 [Local0])
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            Local0 = 0x02
            Local1 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
            A005 = 0x00
            A006 = 0x00
            A007 = 0x00
            A008 = 0x00
            A009 = 0x00
            A010 = 0x00
            If ((Local1 == 0x00))
            {
                A005 = Local2
                A128 (0x00)
            }

            If ((Local1 == 0x01))
            {
                A005 = Local2
                A128 (0x01)
            }

            If ((Local1 == 0x02))
            {
                A005 = Local2
                A011 (0x25, Local7)
            }

            If ((Local1 == 0x03))
            {
                A005 = Local2
                A011 (0x26, Local7)
            }
        }

        Name (A001, 0x01)
        Name (A002, 0x00)
        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (AWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (APPM, 1, NotSerialized)
        {
            Local0 = DerefOf (Arg0 [0x04])
            Local1 = DerefOf (Arg0 [0x02])
            A003 (Local0, Local1)
        }

        Method (A004, 0, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            A005 = 0x00
            A006 = 0x00
            A007 = 0x00
            A008 = 0x00
            A009 = 0x00
            A010 = 0x00
            If ((AD00 == 0x00))
            {
                A011 (0x11, Local7)
            }
            Else
            {
                A011 (0x12, Local7)
            }
        }

        Method (A012, 2, NotSerialized)
        {
        }
    }
}



TPM2
----
[000h 0000 004h]                   Signature : "TPM2"    [Trusted Platform Module hardware interface Table]
[004h 0004 004h]                Table Length : 0000004C
[008h 0008 001h]                    Revision : 04
[009h 0009 001h]                    Checksum : 07
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "Notebook"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00000000

[024h 0036 002h]              Platform Class : 0000
[026h 0038 002h]                    Reserved : 0000
[028h 0040 008h]             Control Address : 00000000FD210510
[030h 0048 004h]                Start Method : 02 [ACPI Start Method]

[034h 0052 00Ch]           Method Parameters : 00 00 00 00 00 00 00 00 00 00 00 00
[040h 0064 004h]          Minimum Log Length : 00010000
[044h 0068 008h]                 Log Address : 00000000AB92E000

Raw Table Data: Length 76 (0x4C)

    0000: 54 50 4D 32 4C 00 00 00 04 07 5F 41 53 55 53 5F  // TPM2L....._ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 01 00 00 00 41 4D 49 20  // Notebook....AMI 
    0020: 00 00 00 00 00 00 00 00 10 05 21 FD 00 00 00 00  // ..........!.....
    0030: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0040: 00 00 01 00 00 E0 92 AB 00 00 00 00              // ............


VFCT
----
[000h 0000 004h]                   Signature : "VFCT"    
[004h 0004 004h]                Table Length : 0000D884
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 24
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "Notebook"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMD"
[020h 0032 004h]       Asl Compiler Revision : 31504F47


**** Unknown ACPI table signature [VFCT]


Raw Table Data: Length 55428 (0xD884)

    0000: 56 46 43 54 84 D8 00 00 01 24 5F 41 53 55 53 5F  // VFCT.....$_ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 01 00 00 00 41 4D 44 00  // Notebook....AMD.
    0020: 47 4F 50 31 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  // GOP12..]...I....
    0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  // ..y.L...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 02 10 4C 16 00 00 00 00  // ..........L.....
    0060: 01 00 00 00 00 D8 00 00 55 AA 6C E9 03 02 00 00  // ........U.l.....
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: B4 01 00 00 00 00 49 42 4D 3B B2 90 00 00 00 00  // ......IBM;......
    0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  // ........ 7612955
    00A0: 32 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // 20..............
    00B0: 8A 01 00 00 00 00 00 00 30 32 2F 32 38 2F 32 31  // ........02/28/21
    00C0: 2C 30 38 3A 35 39 3A 35 35 00 00 00 E9 33 03 00  // ,08:59:55....3..
    00D0: E9 3D 03 00 00 00 70 00 31 31 33 2D 4C 55 43 49  // .=....p.113-LUCI
    00E0: 45 4E 4E 45 2D 30 31 36 00 52 45 4E 4F 49 52 00  // ENNE-016.RENOIR.
    00F0: 50 43 49 5F 45 58 50 52 45 53 53 00 30 00 0D 0A  // PCI_EXPRESS.0...
    0100: 4C 75 63 69 65 6E 6E 65 20 47 65 6E 65 72 69 63  // Lucienne Generic
    0110: 20 56 42 49 4F 53 20 20 20 20 20 20 20 20 20 20  //  VBIOS          
    0120: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0130: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0140: 20 20 20 20 20 20 20 20 20 20 20 20 0D 0A 00 0D  //             ....
    0150: 0A 20 0D 0A 00 28 43 29 20 31 39 38 38 2D 32 30  // . ...(C) 1988-20
    0160: 31 38 2C 20 41 64 76 61 6E 63 65 64 20 4D 69 63  // 18, Advanced Mic
    0170: 72 6F 20 44 65 76 69 63 65 73 2C 20 49 6E 63 2E  // ro Devices, Inc.
    0180: 00 41 54 4F 4D 42 49 4F 53 42 4B 2D 41 4D 44 20  // .ATOMBIOSBK-AMD 
    0190: 56 45 52 30 31 37 2E 30 31 30 2E 30 30 30 2E 30  // VER017.010.000.0
    01A0: 32 39 2E 30 30 30 30 30 30 00 4C 43 4E 47 65 6E  // 29.000000.LCNGen
    01B0: 65 72 69 63 56 62 00 32 32 36 37 36 32 36 20 00  // ericVb.2267626 .
    01C0: 35 35 34 30 32 32 20 20 00 20 20 20 20 20 20 20  // 554022  .       
    01D0: 20 00 41 4D 44 5F 4C 55 43 49 45 4E 4E 45 5F 47  //  .AMD_LUCIENNE_G
    01E0: 45 4E 45 52 49 43 5C 63 6F 6E 66 69 67 2E 68 00  // ENERIC\config.h.
    01F0: 00 00 28 00 02 02 41 54 4F 4D 00 C0 06 03 42 01  // ..(...ATOM....B.
    0200: D9 01 96 00 78 03 00 00 00 00 02 10 02 10 B4 01  // ....x...........
    0210: FE 93 A4 94 00 00 00 00 00 00 00 00 50 43 49 52  // ............PCIR
    0220: 02 10 4C 16 00 00 18 00 00 00 00 03 6C 00 0A 11  // ..L.........l...
    0230: 00 80 00 00 41 4D 44 20 41 54 4F 4D 42 49 4F 53  // ....AMD ATOMBIOS
    0240: 00 A4 49 9B E5 00 00 00 00 00 00 00 00 00 00 00  // ..I.............
    0250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0270: 00 1E 06 66 50 66 51 66 52 66 53 66 55 66 56 66  // ...fPfQfRfSfUfVf
    0280: 57 0E 1F A3 14 00 8C 0E 08 00 B2 20 E8 AB 2F 0B  // W.......... ../.
    0290: C0 75 14 A2 02 00 66 5F 66 5E 66 5D 66 5B 66 5A  // .u....f_f^f]f[fZ
    02A0: 66 59 66 58 07 1F CB E8 C5 30 E8 F3 00 E8 94 2E  // fYfX.....0......
    02B0: 32 D2 8D 3E 8A 01 89 55 16 E8 81 11 E8 44 11 E8  // 2..>...U.....D..
    02C0: 9B 12 E8 EC 02 E8 C5 28 0B C0 74 0C E8 39 00 E8  // .......(..t..9..
    02D0: 9C 56 E8 40 11 E8 EB 56 E8 A9 00 B4 80 E8 8E 2E  // .V.@...V........
    02E0: 8A C7 66 C1 E0 10 8A E3 B0 20 66 A3 B2 90 E8 EB  // ..f...... f.....
    02F0: 02 E8 53 11 E8 BB 30 66 5F 66 5E 66 5D 66 5B 66  // ..S...0f_f^f]f[f
    0300: 5A 66 59 66 58 07 1F CB 2E 8B 1E 08 00 83 3E 18  // ZfYfX.........>.
    0310: 03 00 75 04 89 1E 16 03 1E 2E 8E 1E 0E 03 9C FA  // ..u.............
    0320: 66 C7 06 08 01 65 F0 00 F0 C7 06 40 00 78 03 89  // f....e.....@.x..
    0330: 1E 42 00 C7 06 B4 01 78 03 89 1E B6 01 C7 06 7C  // .B.....x.......|
    0340: 00 94 5E 89 1E 7E 00 C7 06 0C 01 A7 62 89 1E 0E  // ..^..~......b...
    0350: 01 C7 06 A8 04 CC 58 89 1E AA 04 2E 8E 1E 16 03  // ......X.........
    0360: 8B C3 A3 CE 58 A3 DE 58 A3 F0 58 9D 1F C3 50 4D  // ....X..X..X...PM
    0370: 49 44 78 03 FE 48 00 00 00 A0 00 B0 00 B8 00 C0  // IDx..H..........
    0380: 00 00 00 00 BB 00 00 E8 A6 10 66 C1 E8 10 A3 BA  // ..........f.....
    0390: 01 BB 0B 00 E8 99 10 8D 3E 8A 01 66 89 45 18 C3  // ........>..f.E..
    03A0: 66 50 66 52 51 56 66 B8 52 54 53 5F BA 80 00 66  // fPfRQVf.RTS_...f
    03B0: EF B0 56 EE B0 42 EE B0 49 EE B0 4F EE B0 53 EE  // ..V..B..I..O..S.
    03C0: B0 20 EE BE 28 01 B9 19 00 AC E6 80 E2 FB 66 B8  // . ..(.........f.
    03D0: 44 4E 45 5F BA 80 00 66 EF 5E 59 66 5A 66 58 C3  // DNE_...f.^YfZfX.
    03E0: E8 AA 2F 80 FC A0 75 05 E8 3D 00 EB 11 80 FC 4F  // ../...u..=.....O
    03F0: 75 05 E8 97 44 EB 07 E8 EC 49 EB 02 B4 01 E8 B1  // u...D....I......
    0400: 2F CF E8 88 2F E8 20 00 EB 02 B4 01 E8 A3 2F CB  // /.../. ......./.
    0410: E8 7A 2F 80 FC 4F 75 05 E8 71 44 EB 07 E8 C6 49  // .z/..Ou..qD....I
    0420: EB 02 B4 01 E8 8B 2F CB 1E 06 66 50 66 51 66 52  // ....../...fPfQfR
    0430: 66 53 66 55 66 56 66 57 0E 1F 3C 04 75 29 2E A1  // fSfUfVfW..<.u)..
    0440: 1A 00 66 C1 E0 10 2E A1 18 00 8D 36 97 00 8A 3C  // ..f........6...<
    0450: 80 EF 30 B3 02 8B EC 89 5E 0C 89 46 04 66 C1 E8  // ..0.....^..F.f..
    0460: 10 89 46 00 E9 28 01 3C 05 75 18 E8 00 2D E8 D3  // ..F..(.<.u...-..
    0470: 2C 2E A1 08 00 8B EC 89 56 10 89 46 00 89 5E 04  // ,.......V..F..^.
    0480: E9 0C 01 3C 06 75 32 E8 8E 0F 66 D1 E0 8B EC 89  // ...<.u2...f.....
    0490: 46 14 BB 02 00 E8 98 0F 88 46 18 E8 82 0F 66 89  // F........F....f.
    04A0: 46 0C BB 09 00 E8 88 0F 33 C0 66 89 46 00 2E 8B  // F.......3.f.F...
    04B0: 16 BA 01 89 56 10 E9 D6 00 3C 0B 75 24 0A DB 75  // ....V....<.u$..u
    04C0: 11 B9 80 00 BB 02 00 8B EC 89 5E 0C 89 4E 14 E9  // ..........^..N..
    04D0: BD 00 8A C7 E8 D0 00 E8 34 01 0F 84 A9 00 E9 AE  // ........4.......
    04E0: 00 3C 17 75 1D E8 37 12 74 06 E8 95 0D E8 1F 17  // .<.u..7.t.......
    04F0: E8 EE 09 E8 00 0F 33 C9 8B C8 8B EC 89 4E 14 E9  // ......3......N..
    0500: 8D 00 3C 18 75 45 0A FF 75 10 E8 BE 11 8B EC 89  // ..<.uE..u.......
    0510: 46 0C E8 3B 0A 89 4E 10 EB 75 E8 02 12 75 68 BB  // F..;..N..u...uh.
    0520: 00 1C E8 06 2E 66 0B C0 74 5D 23 C9 74 59 E8 D6  // .....f..t]#.tY..
    0530: 11 BE 00 1C E8 26 0F 74 4E BE 00 1C B0 40 E8 75  // .....&.tN....@.u
    0540: 0F E8 87 11 8B EC 89 46 0C EB 44 3C 82 75 1A 80  // .......F..D<.u..
    0550: FB 05 75 15 0A FF 75 0A E8 CB 10 8B EC 89 46 14  // ..u...u.......F.
    0560: EB 2D E8 98 10 74 18 EB 26 3C 8E 75 12 80 FF 01  // .-...t..&<.u....
    0570: 74 08 80 FF 02 75 08 80 C1 02 E8 F1 10 EB 10 8B  // t....u..........
    0580: EC C6 46 19 02 EB 0F 8B EC C6 46 19 01 EB 07 32  // ..F.......F....2
    0590: E4 8B EC 88 66 19 66 5F 66 5E 66 5D 66 5B 66 5A  // ....f.f_f^f]f[fZ
    05A0: 66 59 66 58 07 1F C3 51 8A C8 B8 01 00 D3 E0 59  // fYfX...Q.......Y
    05B0: C3 E8 24 2E C3 0C 01 C3 50 51 B0 B6 E6 43 B0 33  // ..$.....PQ...C.3
    05C0: E6 42 B0 05 E6 42 E4 61 8A E0 0C 03 E6 61 8A C4  // .B...B.a.....a..
    05D0: B9 C8 00 E8 33 29 E6 61 59 58 C3 00 1E 56 0E 1F  // ....3).aYX...V..
    05E0: 80 3E 02 00 80 76 05 C6 06 02 00 80 8A 0E 02 00  // .>...v..........
    05F0: C1 E1 09 FC C6 06 21 00 00 33 F6 32 E4 AC 02 E0  // ......!..3.2....
    0600: E2 FB F6 D4 FE C4 88 26 21 00 5E 1F C3 00 57 0B  // .......&!.^...W.
    0610: C0 75 0F E8 34 0C 74 25 E8 24 00 F6 C3 04 74 F3  // .u..4.t%.$....t.
    0620: EB 11 8B C8 E8 66 25 23 C1 74 12 E8 11 00 F6 C3  // .....f%#.t......
    0630: 04 74 0A 5F 8D 5C 28 E8 4C 06 0B F6 C3 5F C3 50  // .t._.\(.L...._.P
    0640: E8 E9 0B E8 B8 24 E8 C6 24 0A C9 74 69 0A ED 74  // .....$..$..ti..t
    0650: 10 8A CD B5 02 E8 34 28 B1 02 8D 9C 48 01 E8 6E  // ......4(....H..n
    0660: 2C E8 76 02 F6 C3 04 74 08 E8 FB 0C E8 29 23 74  // ,.v....t.....)#t
    0670: 45 8D 5C 28 E8 69 00 56 83 C6 08 E8 F5 22 5E 80  // E.\(.i.V....."^.
    0680: FD 02 75 11 51 E8 16 18 59 80 FB 00 75 4D 51 B5  // ..u.Q...Y...uMQ.
    0690: 08 E8 E8 05 59 8A DD 33 C9 E8 07 17 0A C0 75 3B  // ....Y..3......u;
    06A0: E8 37 02 8A EB 8D 5C 28 80 CD 02 E8 3B 00 74 03  // .7....\(....;.t.
    06B0: 80 CD 04 E8 C6 05 8D 9C A6 00 E8 6E 2C 0A C0 74  // ...........n,..t
    06C0: 1A 56 83 C6 08 E8 AB 22 5E 8A DD B9 80 00 E8 D2  // .V....."^.......
    06D0: 16 E8 D8 04 74 05 33 C9 E8 A1 05 E8 FC 01 58 C3  // ....t.3.......X.
    06E0: 51 B9 49 00 E8 D1 27 59 C3 51 E8 1A 00 75 14 E8  // Q.I...'Y.Q...u..
    06F0: B9 01 3C 01 75 0D B9 20 00 E8 27 00 75 05 80 C9  // ..<.u.. ..'.u...
    0700: 01 EB 02 33 C9 59 C3 53 E8 20 2C 66 3D 00 FF FF  // ...3.Y.S. ,f=...
    0710: FF 75 0E 83 C3 04 E8 12 2C 66 3D FF FF FF 00 75  // .u......,f=....u
    0720: 00 5B C3 50 52 32 D2 E8 01 2C 02 D0 02 D4 66 C1  // .[.PR2...,....f.
    0730: E8 10 02 D0 02 D4 83 C3 04 E2 EC 0A D2 5A 58 C3  // .............ZX.
    0740: E8 E9 0A 8D 9C 4C 01 E8 39 01 E8 8D 01 B5 13 F6  // .....L..9.......
    0750: C3 08 75 0C E8 10 0C 8A EA 80 FD 13 75 02 B5 03  // ..u.........u...
    0760: 66 50 8D 9C B8 02 66 33 C0 8A C5 E8 1D 2B 66 58  // fP....f3.....+fX
    0770: A9 C8 0E 74 55 E8 62 01 F6 C3 08 74 0F E8 0F 05  // ...tU.b....t....
    0780: 8D 5C 28 E8 04 01 75 04 E8 72 00 C3 B5 02 E8 23  // .\(...u..r.....#
    0790: 01 E8 46 01 F6 C3 04 74 21 8D 5C 28 E8 49 01 E8  // ..F....t!.\(.I..
    07A0: 94 03 74 05 B5 03 E8 0B 01 E8 68 04 E8 21 01 80  // ..t.......h..!..
    07B0: FD 00 75 48 B5 02 E8 0D 01 C3 8D 9C 68 01 B8 00  // ..uH........h...
    07C0: 55 E8 64 11 B5 02 E8 FD 00 C3 A9 02 00 74 2D B5  // U.d..........t-.
    07D0: 04 E8 E0 00 E8 03 01 F6 C3 08 74 03 E8 B0 04 8D  // ..........t.....
    07E0: 9C 68 01 56 E8 0B 29 8B F7 E8 68 04 5E E8 A8 28  // .h.V..)...h.^..(
    07F0: E8 D3 00 8D 5C 28 E8 C8 28 E8 18 04 C3 B5 01 E8  // ....\(..(.......
    0800: B2 00 B5 02 E8 BF 00 E8 D0 00 F6 C3 04 75 10 8D  // .............u..
    0810: 9C 68 01 B8 00 55 E8 0F 11 B5 02 E8 17 00 C3 E8  // .h...U..........
    0820: C6 00 B5 02 8D 5C 28 E8 6E 00 75 02 B5 01 E8 04  // .....\(.n.u.....
    0830: 00 E8 E0 03 C3 8D 9C B4 02 B1 02 E8 91 2A B5 02  // .............*..
    0840: E8 83 00 C3 8D 9C 4C 01 E8 38 00 E8 8C 00 F6 C3  // ......L..8......
    0850: 04 74 23 8D 5C 28 E8 8F 00 E8 96 28 8D 9C 68 01  // .t#.\(.....(..h.
    0860: 06 0E 07 B9 07 00 E8 89 26 07 E8 63 00 E8 F7 0A  // ........&..c....
    0870: 8D 5C 28 E8 87 28 8D 5C 28 E8 25 28 B8 02 00 E8  // .\(..(.\(.%(....
    0880: BE FE C3 B9 61 00 E8 2F 26 C3 53 81 C3 05 01 E8  // ....a../&.S.....
    0890: 99 2A 24 06 3C 02 5B C3 E8 10 00 3D 01 04 75 0A  // .*$.<.[....=..u.
    08A0: 53 83 C3 18 E8 84 2A 5B A8 01 C3 53 83 C3 12 E8  // S.....*[...S....
    08B0: 79 2A 5B C3 8D 9C B4 02 32 C9 E8 12 2A C3 8D 9C  // y*[.....2...*...
    08C0: B4 02 E8 66 2A C3 8D 9C B4 02 B1 01 E8 00 2A C3  // ...f*.........*.
    08D0: 8D 9C B4 02 B1 01 E8 0E 2A C3 66 50 8D 9C 48 01  // ........*.fP..H.
    08E0: E8 48 2A 8A D8 66 58 C3 55 57 51 B9 08 00 BD 00  // .H*..fX.UWQ.....
    08F0: 00 BB 08 00 2B D9 D1 E3 8D 58 4E E8 2D 2A E8 E3  // ....+....XN.-*..
    0900: 01 E2 EE 8D 5C 4B E8 22 2A B9 03 00 8B D0 BF 60  // ....\K."*......`
    0910: 09 85 55 06 74 17 66 8B 05 8D 9A F4 01 E8 6B 29  // ..U.t.f.......k)
    0920: 8B 45 04 8D 9A F8 01 E8 79 29 83 C5 08 83 C7 08  // .E......y)......
    0930: E2 DF 8D 7C 5E B9 04 00 33 ED 8B DF E8 EC 29 0B  // ...|^...3.....).
    0940: C0 74 09 E8 5D 01 E8 97 00 83 C5 1C 83 C7 12 E2  // .t..]...........
    0950: E9 55 32 ED E8 6F FF 8D 5C 28 E8 4E FF 3D 01 04  // .U2..o..\(.N.=..
    0960: 75 10 83 C3 14 E8 C3 29 24 70 C0 E8 04 8A E8 E8  // u......)$p......
    0970: 54 FF 5D 8D 9C A6 00 E8 B1 29 0A C0 74 46 8D 9C  // T.]......)..tF..
    0980: A8 00 E8 A6 29 3C 02 75 3B 66 C1 E8 10 3C 04 72  // ....)<.u;f...<.r
    0990: 33 8D 9C A8 00 32 E4 03 D8 8B FB B9 04 00 8B DF  // 3....2..........
    09A0: E8 88 29 0B C0 74 15 E8 F9 00 A9 80 00 75 0D E8  // ..)..t.......u..
    09B0: 2E 00 83 C5 1C 55 58 83 F8 70 73 08 83 C7 12 49  // .....UX..ps....I
    09C0: 0B C9 75 DA 59 5F 5D C3 20 03 58 02 3C 00 01 00  // ..u.Y_]. .X.<...
    09D0: 00 04 00 03 3C 00 00 08 80 02 E0 01 3C 00 20 00  // ....<.......<. .
    09E0: 51 8D 1D E8 45 29 8D 9A 68 01 E8 B6 28 8D 5D 02  // Q...E)..h...(.].
    09F0: E8 38 29 8D 9A 6A 01 E8 89 00 8D 5D 05 E8 2B 29  // .8)..j.....]..+)
    0A00: 8D 9A 6E 01 E8 7C 00 8D 5D 08 E8 1E 29 8B C8 8A  // ..n..|..]...)...
    0A10: DC 66 C1 C8 10 8A D0 80 E2 0F 8A F0 C0 EE 04 8A  // .f..............
    0A20: EC C0 ED 06 8A FC C0 EF 04 80 E7 03 80 E4 0F C0  // ................
    0A30: E4 04 0A D4 80 E2 3F 80 E4 C0 C0 EC 02 0A F4 8B  // ......?.........
    0A40: C3 8D 9A 74 01 E8 5B 28 8D 9A 72 01 8B C1 E8 52  // ...t..[(..r....R
    0A50: 28 8D 9A 76 01 33 C0 8A C6 E8 47 28 8D 9A 78 01  // (..v.3....G(..x.
    0A60: 33 C0 8A C2 E8 3C 28 8D 5D 0C E8 BE 28 8D 9A 7A  // 3....<(.]...(..z
    0A70: 01 E8 0F 00 8D 5D 0F E8 B1 28 8D 9A 7E 01 E8 22  // .....]...(..~.."
    0A80: 28 59 C3 8B C8 8A D4 66 C1 C8 10 8A F0 80 E6 0F  // (Y.....f........
    0A90: 8A E8 C0 ED 04 8B C1 E8 09 28 83 C3 02 8B C2 E8  // .........(......
    0AA0: 01 28 C3 8D 5D 11 E8 82 28 8A E0 BA 06 00 C0 E8  // .(..]...(.......
    0AB0: 07 74 03 80 CA 80 8A C4 C0 E8 03 24 03 3C 02 75  // .t.........$.<.u
    0AC0: 03 80 CA 40 3C 03 75 12 8A C4 D0 E8 A8 01 74 03  // ...@<.u.......t.
    0AD0: 80 E2 FD A8 02 74 03 80 E2 FB 8B C2 8D 9A 80 01  // .....t..........
    0AE0: E8 C0 27 C3 3C 01 74 3D 8B D0 0F B6 C6 24 3F 04  // ..'.<.t=.....$?.
    0AF0: 3C 8D 9A F8 01 E8 AB 27 0F B6 C2 83 C0 1F C1 E0  // <......'........
    0B00: 03 8D 9A F4 01 E8 9B 27 0F B6 DE C1 EB 06 C1 E3  // .......'........
    0B10: 02 2E F7 A7 C0 0A 2E F7 B7 BE 0A 8D 9A F6 01 E8  // ................
    0B20: 81 27 83 C5 08 C3 10 00 0A 00 04 00 03 00 05 00  // .'..............
    0B30: 04 00 10 00 09 00 8D 9C A6 00 E8 EE 27 0A C0 74  // ............'..t
    0B40: 1F 8D 9C A8 00 51 B1 03 E8 18 00 59 0B DB 74 10  // .....Q.....Y..t.
    0B50: E8 D8 27 32 C0 66 3D 00 03 0C 00 75 03 0B DB C3  // ..'2.f=....u....
    0B60: 33 DB C3 66 50 52 E8 C2 27 3C 02 75 39 80 FC 03  // 3..fPR..'<.u9...
    0B70: 72 34 66 C1 E8 10 32 E4 3C 04 76 2A 03 C3 8B D0  // r4f...2.<.v*....
    0B80: 83 C3 04 3B DA 73 1F E8 A1 27 8A E0 80 E4 E0 C0  // ...;.s...'......
    0B90: EC 05 24 1F 38 CC 74 08 32 E4 FE C0 03 D8 EB E3  // ..$.8.t.2.......
    0BA0: 0B DB 5A 66 58 C3 33 DB 5A 66 58 C3 51 8D 9C A6  // ..ZfX.3.ZfX.Q...
    0BB0: 00 E8 77 27 0A C0 74 1B 8D 9C A8 00 B1 12 E8 18  // ..w'..t.........
    0BC0: 00 74 10 E8 65 27 66 C1 E8 10 80 E4 07 75 04 B0  // .t..e'f......u..
    0BD0: 01 EB 02 32 C0 0A C0 59 C3 66 50 52 E8 4C 27 3C  // ...2...Y.fPR.L'<
    0BE0: 70 75 2B 66 C1 E8 10 32 E4 83 C3 05 03 C3 8B D0  // pu+f...2........
    0BF0: 3B DA 73 1A E8 34 27 38 C8 74 0D 66 C1 E8 10 32  // ;.s..4'8.t.f...2
    0C00: E4 83 C0 03 03 D8 EB E8 0B DB 5A 66 58 C3 33 DB  // ..........ZfX.3.
    0C10: 5A 66 58 C3 57 66 51 8D 9C 68 01 8B FB 8B DF E8  // ZfX.WfQ..h......
    0C20: 3D 00 0B C9 74 0B 66 8B D1 E8 AA 0F 83 C7 1C EB  // =...t.f.........
    0C30: EC 66 59 5F C3 50 53 51 B9 07 00 53 8B DA E8 EA  // .fY_.PSQ...S....
    0C40: 26 83 F8 00 5B 74 09 66 C1 E3 10 8B DA E8 7D 22  // &...[t.f......}"
    0C50: 59 5B 58 C3 51 53 B9 07 00 E8 8A 22 5B 59 C3 66  // Y[X.QS....."[Y.f
    0C60: 50 53 83 C3 06 E8 C3 26 5B 8B C8 66 C1 E1 10 53  // PS.....&[..f...S
    0C70: 83 C3 02 E8 B5 26 8B C8 5B 66 58 C3 8D 9C 48 01  // .....&..[fX...H.
    0C80: 32 C9 E8 4A 26 C3 57 B9 20 00 E8 65 22 5F C3 E8  // 2..J&.W. ..e"_..
    0C90: 83 01 66 8B CA 66 52 E8 CD 06 E8 FB 1C 66 5A 74  // ..f..fR......fZt
    0CA0: 10 E8 43 06 B3 00 E8 A8 19 66 3B CA 73 03 66 8B  // ..C......f;.s.f.
    0CB0: D1 8D 9C D0 03 E8 73 26 0B C0 75 44 8D 9C 54 02  // ......s&..uD..T.
    0CC0: 66 B8 48 3F 00 00 E8 C2 25 B5 01 66 81 FA 78 69  // f.H?....%..f..xi
    0CD0: 00 00 72 25 83 C3 04 66 B8 78 69 00 00 E8 AB 25  // ..r%...f.xi....%
    0CE0: B5 02 66 81 FA F0 D2 00 00 72 0E 83 C3 04 66 B8  // ..f......r....f.
    0CF0: F0 D2 00 00 E8 94 25 B5 03 B1 03 E8 CF 01 EB 45  // ......%........E
    0D00: 66 B9 08 00 00 00 66 33 D2 53 8D 9C 54 02 8B D3  // f.....f3.S..T...
    0D10: 5B E8 17 26 0B C0 74 22 66 25 FF FF 00 00 66 D1  // [..&..t"f%....f.
    0D20: E0 53 8B DA E8 64 25 5B 66 C1 CA 10 FE C2 66 C1  // .S...d%[f.....f.
    0D30: CA 10 83 C2 04 83 C3 02 E2 D7 66 C1 CA 10 8A EA  // ..........f.....
    0D40: B1 03 E8 88 01 E8 41 06 A8 01 74 3F 8D 9C AE 03  // ......A...t?....
    0D50: E8 D8 25 3C 00 74 34 E8 D8 05 8A EB E8 5C 01 32  // ..%<.t4......\.2
    0D60: ED E8 63 01 E8 AB 05 8D 9C BB 02 E8 BD 25 33 C9  // ..c..........%3.
    0D70: 8A C8 E8 28 01 66 3B C2 74 0E 51 E8 43 01 FE C5  // ...(.f;.t.Q.C...
    0D80: E8 44 01 59 E2 EC EB 03 B3 00 C3 8D 9C BB 02 E8  // .D.Y............
    0D90: 99 25 FE C8 8A E8 E8 2E 01 8D 9C 40 03 B9 00 00  // .%.........@....
    0DA0: E8 2C 25 E8 CC 02 E8 D2 00 E8 0F 01 66 52 E8 B6  // .,%.........fR..
    0DB0: 05 E8 E4 1B 66 5A 75 04 B3 00 EB 58 E8 F6 00 80  // ....fZu....X....
    0DC0: FD 01 77 07 E8 FA 00 0A ED 74 47 E8 28 03 E8 3A  // ..w......tG.(..:
    0DD0: 11 80 FB 00 75 1D E8 B0 05 A8 01 74 07 B1 0D E8  // ....u......t....
    0DE0: 51 19 EB 30 B5 01 E8 A7 05 E8 37 0F B5 00 E8 9F  // Q..0......7.....
    0DF0: 05 EB 21 E8 BF 00 80 FD 01 76 07 D0 ED E8 BB 00  // ..!......v......
    0E00: EB BA E8 76 00 E8 B3 00 E8 B6 00 FE CD E8 B7 00  // ...v............
    0E10: EB AA B3 08 C3 8D 9C 29 01 E8 0F 25 66 33 D2 8A  // .......)...%f3..
    0E20: D0 66 B8 8C 0A 00 00 66 F7 E2 E8 3A 05 E8 68 1B  // .f.....f...:..h.
    0E30: 75 3D 66 50 8D 9C 28 01 E8 F0 24 3C 14 66 58 72  // u=fP..(...$<.fXr
    0E40: 2E 66 50 8D 9C D0 03 E8 E1 24 0B C0 66 58 74 1F  // .fP......$..fXt.
    0E50: B9 07 00 8D 9C D0 03 8B C1 D1 E0 03 D8 E8 CB 24  // ...............$
    0E60: 0B C0 75 02 E2 ED 66 25 FF FF 00 00 66 D1 E0 66  // ..u...f%....f..f
    0E70: 0B C0 75 03 B8 48 3F 66 8B D0 C3 8D 9C 2A 01 E8  // ..u..H?f.....*..
    0E80: A9 24 24 0F 8A E8 0A ED 75 02 B5 01 C3 B5 00 8D  // .$$.....u.......
    0E90: 9C 31 01 E8 95 24 A8 01 74 02 B5 01 C3 53 51 E8  // .1...$..t....SQ.
    0EA0: 1F 00 32 E4 8A C5 C1 E0 02 59 8D 9C 54 02 03 D8  // ..2......Y..T...
    0EB0: E8 78 24 5B C3 B1 02 E8 1D 00 C3 B1 02 E8 0D 00  // .x$[............
    0EC0: C3 B1 01 E8 11 00 C3 B1 01 E8 01 00 C3 53 8D 9C  // .............S..
    0ED0: B8 02 E8 FA 23 5B C3 53 8D 9C B8 02 E8 08 24 5B  // ....#[.S......$[
    0EE0: C3 33 C9 E8 9C 20 75 3C 66 BA 37 F1 FF FF 66 33  // .3... u<f.7...f3
    0EF0: C0 E8 E9 04 33 C0 E8 51 03 74 1C A9 C8 0E 74 F6  // ....3..Q.t....t.
    0F00: E8 3C F7 F6 C3 04 75 05 F6 C3 18 74 E9 E8 30 00  // .<....u....t..0.
    0F10: 50 E8 2C F8 58 EB DF E8 1C 00 75 08 E8 31 00 8B  // P.,.X.....u..1..
    0F20: C1 E8 1C F8 C3 8D 5D 28 66 C1 E3 10 8D 5C 28 B9  // ......](f....\(.
    0F30: 49 00 E8 98 1F C3 66 50 E8 BB 04 8B C8 66 58 C3  // I.....fP.....fX.
    0F40: 66 52 66 BA FF FF FF FF 33 D0 E8 90 04 66 5A C3  // fRf.....3....fZ.
    0F50: 50 53 52 E8 E0 FF 75 13 B9 08 00 E8 2F 1C 23 C8  // PSR...u...../.#.
    0F60: 75 19 33 C0 E8 E3 02 8B C8 EB 10 83 F9 02 74 0B  // u.3...........t.
    0F70: E8 2B 08 80 FB 01 75 03 83 E1 FD 5A 5B 58 C3 56  // .+....u....Z[X.V
    0F80: 66 33 C0 66 BA 00 F0 FF FF E8 4E 07 66 C1 E6 10  // f3.f......N.f...
    0F90: E8 C4 02 0B C0 74 03 E8 1C 00 E8 2E 07 5E C3 66  // .....t.......^.f
    0FA0: 52 66 8B D0 E8 DA 15 8D 9C 1C 03 E8 7D 23 8A C2  // Rf..........}#..
    0FB0: E8 D8 22 66 5A C3 50 51 E8 71 02 50 32 C0 E8 FC  // .."fZ.PQ.q.P2...
    0FC0: 03 E8 CC 01 E8 98 00 8D 9C 40 03 E8 5D 23 38 E8  // .........@..]#8.
    0FD0: 74 0A 8A C5 E8 B4 22 B0 02 E8 E1 03 58 E8 CA 00  // t.....".....X...
    0FE0: E8 A8 00 E8 8C 00 8D 9C 4C 01 E8 3E 23 8B C8 8B  // ........L..>#...
    0FF0: D3 8D 9C 00 03 E8 33 23 3B C1 74 05 B0 02 E8 BC  // ......3#;.t.....
    1000: 03 E8 31 FC 8D 9C 00 03 E8 53 15 8D 9C D8 02 E8  // ..1......S......
    1010: 79 22 E8 8A FF 66 C1 CE 10 8B FE 66 C1 CE 10 E8  // y"...f.....f....
    1020: 95 00 E8 D1 00 E8 23 03 8A E9 8D 9C DC 02 32 C9  // ......#.......2.
    1030: E8 9C 22 E8 0C 03 66 25 FF 0F 00 00 59 58 66 BA  // .."...f%....YXf.
    1040: FF FF FF FF 33 D0 E8 91 06 33 D2 C3 53 66 50 8D  // ....3....3..SfP.
    1050: 9C D4 02 E8 D5 22 8A C4 E8 30 22 66 58 5B C3 53  // ....."...0"fX[.S
    1060: 66 50 8D 9C D4 02 E8 C2 22 8A E0 E8 1D 22 66 58  // fP......"...."fX
    1070: 5B C3 E8 72 02 E8 2E 02 8A DD E8 9B 16 8A E9 8D  // [..r............
    1080: 9C 3C 03 32 C9 E8 47 22 0B DB C3 83 EC 08 8B EC  // .<.2..G"........
    1090: E8 54 02 E8 10 02 E8 21 16 8D 9C 4C 03 E8 8B 22  // .T.....!...L..."
    10A0: 8A 46 00 E8 E5 21 83 C4 08 C3 8D 9C D4 02 E8 7A  // .F...!.........z
    10B0: 22 32 C0 E8 D5 21 C3 E8 0A 00 8D 9C D0 02 32 C9  // "2...!........2.
    10C0: E8 0C 22 C3 B5 00 8D 1D E8 60 22 66 8B D0 8D 9C  // .."......`"f....
    10D0: 02 03 E8 56 22 0B C0 74 1C 51 8B C8 8D 9C 06 03  // ...V"..t.Q......
    10E0: E8 48 22 66 C1 E0 10 8B C1 59 66 3B C2 75 04 B5  // .H"f.....Yf;.u..
    10F0: 00 EB 02 B5 02 C3 E8 2A 02 8D 9C 40 03 B1 03 E8  // .......*...@....
    1100: CD 21 E8 CB F7 8D 9C 40 03 B1 02 E8 C1 21 E8 95  // .!.....@.....!..
    1110: 01 80 FD 00 75 14 E8 9C FD E8 8A 02 E8 7E FD 66  // ....u........~.f
    1120: 8B D0 E8 76 02 E8 8A 02 EB 21 E8 49 02 E8 6B 02  // ...v.....!.I..k.
    1130: E8 73 01 80 FD 02 B5 04 75 0B 81 FA 74 40 76 05  // .s......u...t@v.
    1140: B5 08 66 D1 EA E8 6A 02 E8 5B 02 E8 2B 00 C3 66  // ..f...j..[..+..f
    1150: 52 52 32 ED 83 C1 02 B8 06 00 F7 E1 66 33 C9 8B  // RR2.........f3..
    1160: C8 5A 51 66 8B C2 8A CF 66 F7 E1 66 C1 E0 03 59  // .ZQf....f..f...Y
    1170: 66 F7 F1 66 8B C8 66 5A C3 B5 00 E8 E9 01 E8 13  // f..f..fZ........
    1180: 18 75 03 E8 07 FD 8D 9C 48 03 32 C9 E8 40 21 C3  // .u......H.2..@!.
    1190: 53 E8 5E 01 66 C1 E2 10 E8 4C 01 8D 9C B8 02 E8  // S.^.f....L......
    11A0: 89 21 8A E8 8D 9C B4 02 E8 80 21 8A C8 E8 C2 14  // .!........!.....
    11B0: 8A EB 5B C3 57 53 53 E8 D6 FF E8 2A 01 5B E8 27  // ..[.WSS....*.[.'
    11C0: 15 74 66 80 FD 00 75 29 53 E8 D1 FC 66 8B D0 E8  // .tf...u)S...f...
    11D0: FE F6 8A CD 51 E8 DD FC 8A FD 59 E8 71 FF 5B E8  // ....Q.....Y.q.[.
    11E0: 49 21 66 25 FF FF 00 00 66 3B C8 73 39 32 DB EB  // I!f%....f;.s92..
    11F0: 38 80 FD 02 75 16 E8 6E 01 E8 A9 17 74 28 8D 1F  // 8...u..n....t(..
    1200: E8 28 21 3D 74 40 76 1E 32 DB EB 1D 80 FD 03 75  // .(!=t@v.2......u
    1210: 15 53 E8 D2 00 B3 03 E8 37 14 5B E8 0D 21 3B C2  // .S......7.[..!;.
    1220: 76 04 32 DB EB 03 80 CB 01 5B 5F C3 53 8B F0 E8  // v.2......[_.S...
    1230: 5B 19 23 F0 74 09 8B C6 E8 FA 17 8B F3 0B DB 5B  // [.#.t..........[
    1240: C3 51 E8 0B FD E8 0F 00 59 C3 51 50 E8 3E 19 8B  // .Q......Y.QP.>..
    1250: C8 58 E8 02 00 59 C3 57 53 E8 32 1B 0B C0 74 09  // .X...Y.WS.2...t.
    1260: 8B 1D 83 C7 02 3B C3 75 F7 8B 1D 83 FB FF 74 0B  // .....;.u......t.
    1270: 83 C7 02 85 D9 74 F2 8B C3 EB 02 33 C0 0B C0 5B  // .....t.....3...[
    1280: 5F C3 33 C0 E8 C3 FF 74 13 E8 A0 FF 8B DE B9 FB  // _.3....t........
    1290: 00 E8 24 1C 83 C6 08 E8 A3 18 EB E8 BB F0 16 B8  // ..$.............
    12A0: 5A A5 E8 FE 1F C3 53 66 50 8D 9C 40 03 E8 7B 20  // Z.....SfP..@..{ 
    12B0: 8A E8 66 58 5B C3 8D 9C 69 03 E8 6E 20 C3 56 E8  // ..fX[...i..n .V.
    12C0: EA 1A 8B 44 18 5E C3 53 66 50 8D 9C D4 02 E8 5A  // ...D.^.SfP.....Z
    12D0: 20 8A C8 66 58 5B C3 53 66 50 8D 9C D5 02 E8 4A  //  ..fX[.SfP.....J
    12E0: 20 8A C8 66 58 5B C3 53 8D 5C 14 E8 3D 20 8B D0  //  ..fX[.S.\..= ..
    12F0: 5B C3 53 66 50 8D 5C 16 E8 30 20 8B D0 66 58 5B  // [.SfP.\..0 ..fX[
    1300: C3 53 66 50 8D 9C 50 03 E8 20 20 66 8B D0 66 58  // .SfP..P..  f..fX
    1310: 5B C3 53 66 50 8D 9C 54 03 E8 0F 20 66 8B D0 66  // [.SfP..T... f..f
    1320: 58 5B C3 53 66 50 8D 5C 10 E8 FF 1F 8B C8 66 58  // X[.SfP.\......fX
    1330: 5B C3 66 50 53 8D 9C 41 03 E8 EF 1F 5B 8A D8 66  // [.fPS..A....[..f
    1340: 58 C3 53 8D 5C 08 E8 E2 1F 5B C3 53 50 8D 9C 4C  // X.S.\....[.SP..L
    1350: 03 E8 D7 1F 8A C8 58 5B C3 53 50 8D 9C 4D 03 E8  // ......X[.SP..M..
    1360: C9 1F 8A C8 58 5B C3 53 66 50 8D 5C 0C E8 BB 1F  // ....X[.SfP.\....
    1370: 8B D0 66 58 5B C3 53 66 50 8D 9C 00 03 E8 AB 1F  // ..fX[.SfP.......
    1380: 66 33 D2 8B D0 66 58 5B C3 8D 5C 04 E8 9C 1F C3  // f3...fX[..\.....
    1390: 51 8D 5C 04 32 C9 E8 36 1F 59 C3 8D 9C 50 03 66  // Q.\.2..6.Y...P.f
    13A0: 8B C2 E8 E6 1E C3 53 8D 9C 40 03 B1 01 E8 1F 1F  // ......S..@......
    13B0: 5B C3 8D 9C 54 03 66 8B C2 E8 CF 1E C3 53 51 8A  // [...T.f......SQ.
    13C0: E8 E8 C5 FF 24 FD 0A E8 E8 C5 FF 59 5B C3 66 50  // ....$......Y[.fP
    13D0: 8D 9C D8 02 E8 54 1F 66 8B D0 66 58 C3 53 66 50  // .....T.f..fX.SfP
    13E0: 51 66 8B C8 BB 00 00 E8 2C 16 23 C2 0B C1 E8 2E  // Qf......,.#.....
    13F0: 16 59 66 58 5B C3 BB 00 00 E8 1A 16 66 25 CA 0E  // .YfX[.......f%..
    1400: 00 00 C3 E8 70 1A E8 FF 19 E8 DD 19 75 06 E8 8E  // ....p.......u...
    1410: 17 E8 E1 19 C3 B0 01 C3 55 B3 01 E8 00 1D 5D C3  // ........U.....].
    1420: 66 53 66 BB 04 00 00 00 E8 05 00 33 C0 66 5B C3  // fSf........3.f[.
    1430: 55 66 C1 E3 10 BB 00 00 E8 E3 1C 5D C3 E8 2F 1B  // Uf.........]../.
    1440: BB 0A 00 E8 D9 15 C3 BB 0A 00 E8 C9 15 66 8B C8  // .............f..
    1450: E8 1C 1B BB 0A 00 66 2B C1 E8 C3 15 C3 E8 29 00  // ......f+......).
    1460: 0B C9 74 22 E8 18 FB E8 31 07 66 51 66 8B C8 BB  // ..t"....1.fQf...
    1470: 07 00 E8 A1 15 66 25 00 FE 00 00 66 0B C1 E8 9E  // .....f%....f....
    1480: 15 66 59 0C 01 C3 32 C0 C3 E8 6B 02 0B C9 75 06  // .fY...2...k...u.
    1490: E8 BD FA E8 71 02 51 E8 B6 FA 66 C1 E6 10 33 C0  // ....q.Q...f...3.
    14A0: E8 9E FD 74 09 E8 16 03 75 F6 33 C8 EB F2 58 23  // ...t....u.3...X#
    14B0: C8 66 C1 EE 10 C3 A8 10 75 63 E8 F0 06 66 C1 E6  // .f......uc...f..
    14C0: 10 33 C0 E8 84 FD 74 35 E8 61 FD 50 51 8B C8 E8  // .3....t5.a.PQ...
    14D0: F9 01 85 C1 59 58 74 0D 50 E8 AD FE 24 03 3C 03  // ....YXt.P...$.<.
    14E0: 58 75 E0 EB 0C 50 E8 A0 FE A8 01 58 74 D5 E8 6E  // Xu...P.....Xt..n
    14F0: FB 50 E8 D9 07 58 B5 00 E8 95 FE EB C6 E8 CB 01  // .P...X..........
    1500: E8 29 FD E8 34 01 B1 00 E8 4D 07 66 C1 EE 10 E8  // .)..4....M.f....
    1510: 94 06 A8 20 75 42 A8 40 75 03 E8 1B 0E E8 7B 06  // ... uB.@u.....{.
    1520: 0A C0 75 07 32 C9 B5 01 E8 BE 0E E8 9D 01 E8 FB  // ..u.2...........
    1530: FC E8 33 FE E8 61 14 75 14 E8 62 02 0A DB 74 0D  // ..3..a.u..b...t.
    1540: E8 1C FB E8 88 07 B5 00 E8 45 FE EB 08 E8 65 07  // .........E....e.
    1550: B5 01 E8 3B FE E8 E6 00 C3 E8 31 16 C3 E8 22 FD  // ...;......1...".
    1560: E8 AC 06 33 C9 E8 9F 01 66 33 D2 66 33 C0 E8 6C  // ...3....f3.f3..l
    1570: FE E8 52 00 B1 FF E8 84 00 33 C0 E8 CC FC 74 0A  // ..R......3....t.
    1580: E8 A9 FC 50 E8 D1 07 58 EB F1 32 C9 E8 C4 01 E8  // ...P...X..2.....
    1590: FB 15 0B C0 C3 E8 EA FC E8 74 06 66 33 C0 66 BA  // .........t.f3.f.
    15A0: 00 F0 FF FF E8 33 01 51 B1 01 E8 8C 01 59 33 C0  // .....3.Q.....Y3.
    15B0: E8 97 FC 74 0A E8 74 FC 50 E8 67 07 58 EB F1 E8  // ...t..t.P.g.X...
    15C0: B3 0D E8 96 18 C3 B8 02 00 E8 60 FC 74 2E B1 07  // ..........`.t...
    15D0: E8 01 12 B8 02 00 E8 66 F0 F6 C3 04 75 12 E8 11  // .......f....u...
    15E0: 1B 83 3D 00 75 0A E8 A4 15 83 E0 FD E8 A7 15 C3  // ..=.u...........
    15F0: 66 B8 02 00 00 00 E8 E4 FD E8 48 F2 C3 E8 28 14  // f.........H...(.
    1600: 74 23 38 E1 76 04 8A CC EB 06 38 C1 73 02 8A C8  // t#8.v.....8.s...
    1610: BB 02 00 E8 00 14 8A E1 E8 04 14 B1 04 E8 B4 11  // ................
    1620: 0C 01 C3 0C 01 C3 51 E8 FE 13 74 0C 8A CC BB 02  // ......Q...t.....
    1630: 00 E8 E2 13 8A C4 8A E1 59 C3 E8 FD 05 C3 E8 08  // ........Y.......
    1640: 06 C3 E8 3D 19 75 18 E8 81 00 E8 DF FB 80 F9 01  // ...=.u..........
    1650: 75 0E 51 E8 5F 06 B5 01 E8 35 FD 59 E8 DF FF C3  // u.Q._....5.Y....
    1660: E8 D7 FF 51 E8 BC 06 B5 00 E8 24 FD 59 C3 B8 02  // ...Q......$.Y...
    1670: 00 E8 B8 FB 74 03 E8 5B 11 C3 E8 BD 04 3B C1 7C  // ....t..[.....;.|
    1680: 3A 8B C1 E8 FD 04 E8 C6 0E 8B C8 51 E8 2D 05 E8  // :..........Q.-..
    1690: F1 04 59 E8 B9 0E 3B C8 72 02 8B C1 8D 5C 04 E8  // ..Y...;.r....\..
    16A0: 01 1C 32 C9 B5 0F E8 04 0D E8 03 18 FE C1 38 C1  // ..2...........8.
    16B0: 72 F2 8D 5C 04 E8 73 1C 0B C0 C3 33 C0 C3 BB 00  // r..\..s....3....
    16C0: 18 33 C0 8A C2 C1 E0 02 03 D8 C3 53 BB 03 00 E8  // .3.........S....
    16D0: 44 13 66 25 FF 0F 00 00 5B C3 53 66 50 66 51 66  // D.f%....[.SfPfQf
    16E0: 8B C8 BB 03 00 E8 2E 13 66 23 C2 66 0B C1 E8 2E  // ........f#.f....
    16F0: 13 66 59 66 58 5B C3 66 50 BB 05 00 E8 17 13 25  // .fYfX[.fP......%
    1700: FF 0F 8B C8 66 58 C3 E8 83 14 23 C8 66 50 BB 05  // ....fX....#.fP..
    1710: 00 E8 02 13 25 00 F0 0B C1 E8 03 13 66 58 C3 66  // ....%.......fX.f
    1720: 50 53 BB 06 00 E8 EE 12 A8 10 75 09 BB F0 16 E8  // PS........u.....
    1730: F9 1B 3D 5A A5 5B 66 58 C3 66 50 53 BB 06 00 E8  // ..=Z.[fX.fPS....
    1740: D4 12 80 F1 01 C0 E1 04 24 EF 0A C1 E8 D0 12 5B  // ........$......[
    1750: 66 58 C3 53 66 50 BB F8 16 E8 CF 1B 8A C1 E8 2A  // fX.SfP.........*
    1760: 1B 66 58 5B C3 53 BB F8 16 E8 BF 1B 83 E0 01 5B  // .fX[.S.........[
    1770: C3 53 66 50 BB 07 00 E8 9C 12 F6 C4 01 66 58 B0  // .SfP.........fX.
    1780: 06 74 02 B0 08 5B C3 53 BB 07 00 E8 88 12 80 E4  // .t...[.S........
    1790: FE 80 FD 06 74 03 80 CC 01 E8 83 12 5B C3 66 50  // ....t.......[.fP
    17A0: BB 06 00 E8 70 12 24 40 C0 E8 06 8A D8 66 58 C3  // ....p.$@.....fX.
    17B0: B3 81 E8 5E 19 75 04 83 C8 01 C3 33 C0 C3 50 66  // ...^.u.....3..Pf
    17C0: 51 E8 68 FA 83 EC 04 8B EC 66 33 C0 66 89 46 00  // Q.h......f3.f.F.
    17D0: 33 D2 8D BC 68 01 8D 1D E8 50 1B 0B C0 74 22 8B  // 3...h....P...t".
    17E0: DF B0 00 E8 12 01 74 14 8B DF E8 72 F4 66 8B 46  // ......t....r.f.F
    17F0: 00 66 3B C8 72 06 8B D7 66 89 4E 00 83 C7 1C EB  // .f;.r...f.N.....
    1800: D5 0B D2 74 0A 8D 9C 4C 01 E8 29 F4 E9 88 00 66  // ...t...L..)....f
    1810: 33 C0 66 89 46 00 8D BC F4 01 33 D2 8D 1D E8 0A  // 3.f.F.....3.....
    1820: 1B 0B C0 74 58 66 50 E8 94 F0 3C 01 66 58 74 05  // ...tXfP...<.fXt.
    1830: 3D 40 06 73 43 66 52 66 8B D0 8D 5D 04 E8 EB 1A  // =@.sCfRf...]....
    1840: E8 5D 00 8B CA 66 5A 74 2F 56 8D 9C 4C 01 8B F1  // .]...fZt/V..L...
    1850: E8 01 F4 5E B0 00 E8 9F 00 74 1D 8D 1D E8 CB 1A  // ...^.....t......
    1860: 8B D9 8B 47 06 66 C1 E0 10 8B 47 02 66 3B 46 00  // ...G.f....G.f;F.
    1870: 72 06 8B D1 66 89 46 00 83 C7 08 EB 9F 0B D2 74  // r...f.F........t
    1880: 16 56 8D 9C 4C 01 8B F2 E8 C9 F3 5E 53 8D 9C 62  // .V..L......^S..b
    1890: 01 33 C0 E8 0D 1A 5B 83 C4 04 0B D2 66 59 58 C3  // .3....[.....fYX.
    18A0: 57 53 51 E8 0F 15 3B 55 02 75 18 66 C1 CA 10 8B  // WSQ...;U.u.f....
    18B0: DA 66 C1 CA 10 3B 5D 06 75 09 0A C0 74 0E 3A 45  // .f...;].u...t.:E
    18C0: 1B 74 09 83 C7 1C E2 DE 33 D2 EB 02 8B D7 0B D2  // .t......3.......
    18D0: 59 5B 5F C3 51 66 52 E8 DB 14 3A 65 1A 75 09 0A  // Y[_.QfR...:e.u..
    18E0: C0 74 0E 3A 45 1B 74 09 83 C7 1C E2 ED 33 FF EB  // .t.:E.t......3..
    18F0: 00 0B FF 66 5A 59 C3 C3 66 51 66 52 53 53 66 C1  // ...fZY..fQfRSSf.
    1900: CE 10 8B DE 66 C1 CE 10 E8 20 1A 5B 66 8B D0 E8  // ....f.... .[f...
    1910: 4D F3 3B CA 72 0A 66 3B CA 72 05 E8 96 F8 75 02  // M.;.r.f;.r....u.
    1920: 32 C0 5B 66 5A 66 59 C3 56 57 E8 A7 FF 8B F7 E8  // 2.[fZfY.VW......
    1930: 22 F3 5F 5E C3 66 50 53 66 51 52 57 56 51 8B DE  // "._^.fPSfQRWVQ..
    1940: B9 08 00 E8 72 15 59 8D 5C 08 8B C1 66 C1 E0 10  // ....r.Y.\...f...
    1950: 8A C2 E8 36 19 F6 C2 03 75 24 8B C1 24 7F BF 18  // ...6....u$..$...
    1960: 1A 80 3D FF 0F 84 0F 01 3A 05 75 0D 66 8B 45 01  // ..=.....:.u.f.E.
    1970: 66 B9 00 05 02 00 E9 96 00 83 C7 05 EB E3 F6 C2  // f...............
    1980: 01 74 25 8B C1 E8 70 01 0F 84 EB 00 33 C9 8A CC  // .t%...p.....3...
    1990: 8A D0 0A C0 75 12 8D 5C 08 66 25 FF FF 00 00 66  // ....u..\.f%....f
    19A0: C1 E0 08 E8 E5 18 EB B2 8A E1 8A CA 80 E1 0C C0  // ................
    19B0: E9 02 80 E2 F0 C0 EA 04 8A EA 80 FC 70 72 2A 80  // ............pr*.
    19C0: FC 75 73 25 80 EC 70 8A C4 32 E4 50 E8 30 02 8B  // .us%..p..2.P.0..
    19D0: D8 58 38 D8 72 05 33 C0 E9 9C 00 E8 28 02 E8 4A  // .X8.r.3.....(..J
    19E0: 19 0B C0 0F 84 90 00 EB 1B 32 C0 E8 E6 FE 0F 84  // .........2......
    19F0: 85 00 8D 5C 16 8B 05 E8 A9 18 8B 45 06 66 C1 E0  // ...\.......E.f..
    1A00: 10 8B 45 02 50 E8 47 0B 66 C1 E1 10 8B C8 58 8D  // ..E.P.G.f.....X.
    1A10: 1C E8 77 18 66 50 8D 5C 04 66 8B C1 E8 6C 18 66  // ..w.fP.\.f...l.f
    1A20: 58 66 C1 E8 10 66 81 E1 FF FF 00 00 66 F7 E1 66  // Xf...f......f..f
    1A30: 50 8D 5C 06 E8 F4 18 8B C8 66 58 66 D3 E0 66 C1  // P.\......fXf..f.
    1A40: E8 10 40 8D 5C 14 E8 5A 18 BF 78 1A 83 F9 01 74  // ..@.\..Z..x....t
    1A50: 11 BF 80 1A 81 F9 01 01 74 08 BF 88 1A 83 F9 02  // ........t.......
    1A60: 75 15 8D 5C 0C 66 8B 05 E8 20 18 8D 5C 10 66 8B  // u..\.f... ..\.f.
    1A70: 45 04 E8 16 18 0B DB 5E 5F 5A 66 59 5B 66 58 C3  // E......^_ZfY[fX.
    1A80: 00 40 01 90 01 01 40 01 90 01 02 80 02 90 01 03  // .@....@.........
    1A90: 80 02 90 01 04 40 01 90 01 05 40 01 90 01 06 80  // .....@....@.....
    1AA0: 02 90 01 07 D0 02 5E 01 0D 40 01 90 01 0E 80 02  // ......^..@......
    1AB0: 90 01 0F 80 02 5E 01 10 80 02 5E 01 11 80 02 E0  // .....^....^.....
    1AC0: 01 12 80 02 E0 01 13 80 02 90 01 23 20 04 90 01  // ...........# ...
    1AD0: 32 20 04 B0 02 33 20 04 C0 02 62 80 02 E0 01 FF  // 2 ...3 ...b.....
    1AE0: 05 0A 05 05 05 00 00 00 05 0B 06 05 05 00 00 00  // ................
    1AF0: 08 10 08 08 08 00 00 00 56 E8 8D 15 80 E4 01 3B  // ........V......;
    1B00: 04 74 09 83 C6 04 E2 F7 33 C0 EB 05 8B 44 02 0B  // .t......3....D..
    1B10: C0 5E C3 57 53 50 E8 70 15 83 E9 0A E8 E0 00 83  // .^.WSP.p........
    1B20: F8 05 76 03 B8 05 00 D1 E0 03 C8 FB A5 83 C6 02  // ..v.............
    1B30: E2 FA B8 FF FF AB 58 5B 5F C3 66 53 51 66 52 E8  // ......X[_.fSQfR.
    1B40: 41 00 E8 77 00 66 C1 E8 10 66 0F B7 D8 66 B8 00  // A..w.f...f...f..
    1B50: 00 00 03 66 D3 E8 66 33 D2 66 F7 F3 E8 F0 09 66  // ...f..f3.f.....f
    1B60: 5A 59 66 5B C3 53 66 50 BB 07 00 E8 A8 0E 0A C0  // ZYf[.SfP........
    1B70: 66 58 5B C3 53 66 50 BB 07 00 E8 99 0E A8 01 66  // fX[.SfP........f
    1B80: 58 5B C3 53 66 50 8D 5C 06 E8 9F 17 8A C8 66 58  // X[.SfP.\......fX
    1B90: 5B C3 51 B9 08 00 E8 34 13 59 C3 53 8D 5C 08 E8  // [.Q....4.Y.S.\..
    1BA0: 89 17 24 03 5B C3 8D 5C 09 E8 7F 17 C3 51 53 B1  // ..$.[..\.....QS.
    1BB0: 01 8A E8 8D 5C 08 E8 16 17 5B 59 C3 53 8D 1C E8  // ....\....[Y.S...
    1BC0: 69 17 5B C3 53 8D 5C 04 E8 60 17 5B C3 53 8D 5C  // i.[.S.\..`.[.S.\
    1BD0: 16 E8 57 17 5B C3 53 66 52 33 C0 E8 C2 FC 66 5A  // ..W.[.SfR3....fZ
    1BE0: 75 1B E8 34 00 74 16 E8 15 00 40 83 F8 05 73 0D  // u..4.t....@...s.
    1BF0: E8 98 16 48 E8 0F 00 66 8B C2 E8 8E 16 5B C3 BB  // ...H...f.....[..
    1C00: 00 1E E8 26 17 C3 BB 08 1E C1 E0 03 03 D8 C3 BB  // ...&............
    1C10: 00 1E B9 32 00 E8 A0 12 C3 51 E8 E2 FF 0B C0 74  // ...2.....Q.....t
    1C20: 12 8B C8 BB 08 1E E8 02 17 66 3B C2 74 07 83 C3  // .........f;.t...
    1C30: 08 E2 F3 0B DB 59 C3 C3 C3 00 BB 20 DF E8 AB 36  // .....Y..... ...6
    1C40: E8 84 F6 B5 01 E8 E5 07 C3 BB 00 DF E8 9C 36 E8  // ..............6.
    1C50: 75 F6 B5 00 E8 D6 07 C3 80 F9 00 75 0A E8 55 12  // u..........u..U.
    1C60: 8A C8 B5 02 E8 1D 09 0B F6 74 2E E8 59 F6 B5 01  // .........t..Y...
    1C70: 51 E8 C0 07 59 E8 C3 07 56 33 F6 B5 00 E8 2D 07  // Q...Y...V3....-.
    1C80: 5E B5 01 E8 C5 F6 E8 FB 08 E8 C4 09 E8 38 F6 8D  // ^............8..
    1C90: 9C 00 03 E8 AC 07 E8 F5 07 66 C1 CE 10 B5 01 E8  // .........f......
    1CA0: 0B 07 E8 01 FF A8 40 75 07 32 C0 B5 01 E8 7E 08  // ......@u.2....~.
    1CB0: 66 C1 CE 10 C3 E8 0F F6 B5 01 E8 4B 07 B5 00 E8  // f..........K....
    1CC0: 79 07 E8 DC 07 B1 0F E8 69 0A E8 26 00 C3 E8 52  // y.......i..&...R
    1CD0: 00 E8 03 F6 B5 00 E8 2F 07 B5 00 E8 5D 07 E8 78  // ......./....]..x
    1CE0: F6 E8 D1 11 38 C1 74 0A 80 F9 0B 74 05 B5 03 E8  // ....8.t....t....
    1CF0: 92 08 C3 B1 10 E8 3B 0A E8 AB F5 80 FD 00 74 06  // ......;.......t.
    1D00: B1 01 E8 CF 0A C3 E8 A6 05 80 FD 01 75 07 B5 02  // ............u...
    1D10: E8 D5 05 EB 03 E8 F3 01 B1 0D E8 16 0A B1 03 E8  // ................
    1D20: 54 00 C3 E8 CC F5 0B D2 74 05 B1 00 E8 42 0A B1  // T.......t....B..
    1D30: 02 E8 42 00 E8 52 F6 A8 01 74 12 E8 68 F5 80 FD  // ..B..R...t..h...
    1D40: 00 75 0A B1 0C E8 EB 09 B0 02 E8 91 04 B1 00 E8  // .u..............
    1D50: 82 0A B1 0D E8 1F 00 C3 B1 07 E8 77 0A E8 92 F5  // ...........w....
    1D60: 0B D2 75 0C E8 00 F6 E8 2A 0C 75 09 E8 1D 0B C3  // ..u.....*.u.....
    1D70: B1 07 E8 FC 09 C3 E8 EE F5 E8 18 0C 75 24 51 E8  // ............u$Q.
    1D80: 52 0A 59 80 F9 0C 75 1A 33 D2 56 83 C6 08 E8 41  // R.Y...u.3.V....A
    1D90: 0C 5E 0A C0 75 0C B9 0A 00 E8 6D 11 42 83 FA 1E  // .^..u.....m.B...
    1DA0: 75 E8 C3 80 FB 01 0F 84 C5 00 E8 A5 05 66 C1 E1  // u............f..
    1DB0: 10 8D 9C 35 01 E8 73 15 A8 01 74 05 51 E8 2B 04  // ...5..s...t.Q.+.
    1DC0: 59 E8 5F F5 B0 04 E8 9C 05 66 BA 50 01 40 50 E8  // Y._......f.P.@P.
    1DD0: 76 05 E8 F7 0A 75 7E 66 BA 50 01 50 4F 8D 9C 2D  // v....u~f.P.PO..-
    1DE0: 01 E8 47 15 24 06 3C 02 75 02 B6 02 B0 05 E8 74  // ..G.$.<.u......t
    1DF0: 05 E8 54 05 8D 5C 28 03 D8 E8 D0 0A 75 57 0A FF  // ..T..\(.....uW..
    1E00: 75 09 B0 0A E8 5E 05 32 DB EB 4A 51 33 C9 8A CF  // u....^.2..JQ3...
    1E10: E8 35 05 03 C8 E8 3A 05 59 B0 07 E8 47 05 66 BA  // .5....:.Y...G.f.
    1E20: 50 01 10 30 33 DB E8 A3 0A 74 0F 51 8A EB 8D 9C  // P..03....t.Q....
    1E30: 44 01 B1 02 E8 98 14 59 EB 61 E8 0B 05 66 C1 C9  // D......Y.a...f..
    1E40: 10 2B C1 66 C1 C1 10 3D 80 00 0F 82 76 FF B0 08  // .+.f...=....v...
    1E50: E8 12 05 EB 43 51 8A EB 8D 9C 44 01 B1 02 E8 6E  // ....CQ....D....n
    1E60: 14 59 66 BA 50 01 10 30 33 DB E8 5F 0A EB 2C 8D  // .Yf.P..03.._..,.
    1E70: 5C 28 03 D9 53 8A E9 B1 32 51 5F E8 A5 F4 8A E9  // \(..S...2Q_.....
    1E80: B1 A0 BA 00 80 E8 19 0A 80 FF 01 5B 74 0A B1 A2  // ...........[t...
    1E90: E8 0E 0A 80 FF 01 75 03 B0 00 C3 B0 01 C3 51 B1  // ......u.......Q.
    1EA0: 0C E8 D2 FE 59 B0 01 E8 BB 04 56 83 C6 08 E8 21  // ....Y.....V....!
    1EB0: 0B 5E 0A C0 75 04 B3 10 EB 3F B0 02 E8 A6 04 E8  // .^..u....?......
    1EC0: 38 00 74 11 B0 03 E8 9C 04 B0 01 E8 10 03 75 29  // 8.t...........u)
    1ED0: E8 27 00 75 24 66 BA 0C 00 90 43 8D 9C 30 01 E8  // .'.u$f....C..0..
    1EE0: EA 09 66 BA 20 00 90 41 8D 9C 34 01 E8 DD 09 E8  // ..f. ..A..4.....
    1EF0: BD 03 B0 09 E8 6E 04 33 DB C3 E8 26 F4 66 BA 00  // .....n.3...&.f..
    1F00: 00 90 47 8D 9C 28 01 E8 C2 09 C3 B1 0C E8 66 FE  // ..G..(........f.
    1F10: B1 00 E8 BF 08 B1 01 E8 BA 08 8D 9C AC 03 66 B8  // ..............f.
    1F20: 00 00 00 00 E8 64 13 B0 01 E8 B2 02 74 0A B5 04  // .....d......t...
    1F30: E8 CB 03 B3 08 E9 3F 01 B1 08 E8 F6 07 E8 D2 02  // ......?.........
    1F40: B1 09 E8 EE 07 E8 C5 01 8D 9C B8 03 66 33 C0 E8  // ............f3..
    1F50: 39 13 E8 60 01 B9 90 01 E8 A3 0F B0 01 E8 63 02  // 9..`..........c.
    1F60: B5 02 E8 8D 03 E8 74 01 E8 9F 03 E8 E0 01 B5 03  // ......t.........
    1F70: E8 7F 03 33 C9 E8 00 01 F6 C5 01 75 34 B5 02 E8  // ...3.......u4...
    1F80: 70 03 E8 20 01 F6 C5 04 74 08 B5 01 E8 6F 03 E9  // p.. ....t....o..
    1F90: CC 00 8A FD 80 E7 03 E8 E8 00 80 E3 03 38 FB 75  // .............8.u
    1FA0: 0D E8 4C 01 75 08 B5 02 E8 53 03 E9 B0 00 E8 67  // ..L.u....S.....g
    1FB0: 01 FE C1 E8 7C F3 38 D9 75 BB 8D 9C AC 03 E8 6A  // ....|.8.u......j
    1FC0: 13 3C 03 74 05 E8 ED 00 EB 9B 8D 9C B0 03 66 33  // .<.t..........f3
    1FD0: C0 E8 B7 12 8D 9C 2A 01 E8 50 13 A8 40 74 0C B1  // ......*..P..@t..
    1FE0: 13 E8 4F 07 B0 03 E8 DA 01 EB 0A B1 0A E8 43 07  // ..O...........C.
    1FF0: B0 02 E8 CE 01 B5 04 E8 F8 02 E8 DF 00 E8 0A 03  // ................
    2000: E8 4B 01 B5 05 E8 EA 02 33 C9 E8 6B 00 80 FD 07  // .K......3..k....
    2010: 75 05 E8 86 00 75 2E 51 B5 04 E8 D5 02 59 F6 C5  // u....u.Q.....Y..
    2020: 01 75 07 B5 03 E8 D6 02 EB 34 E8 78 00 8A D5 E8  // .u.......4.x....
    2030: E6 00 E8 70 00 38 EA 75 0C E8 B4 00 75 07 B5 02  // ...p.8.u....u...
    2040: E8 BB 02 EB 19 FE C1 E8 E8 F2 38 D9 75 BC 8D 9C  // ..........8.u...
    2050: AC 03 E8 D6 12 3C 04 75 05 E8 59 00 EB 9C B0 00  // .....<.u..Y.....
    2060: E8 60 01 B1 0B E8 CB 06 8D 9C AD 03 E8 BC 12 B3  // .`..............
    2070: 00 0A C0 74 02 B3 08 C3 8D 9C C0 03 E8 0F 00 8A  // ...t............
    2080: E8 C3 53 8D 9C C4 03 E8 04 00 5B 8A D8 C3 51 E8  // ..S.......[...Q.
    2090: 99 12 C0 E1 02 D3 E8 24 0F 59 C3 8D 9C C2 03 E8  // .......$.Y......
    20A0: 89 12 A8 01 C3 8D 9C B8 03 E8 3B 12 C3 8D 9C B8  // ..........;.....
    20B0: 03 E8 1B 12 C3 33 C9 33 D2 E8 E9 FF 38 D5 76 02  // .....3.3....8.v.
    20C0: 8A D5 FE C1 E8 6B F2 38 D9 72 EE 33 C9 8A EA 8D  // .....k.8.r.3....
    20D0: 9C 5C 03 E8 F9 11 B1 0B E8 F9 06 C3 E8 44 F2 8D  // .\...........D..
    20E0: 9C B8 03 E8 45 12 66 BA 03 01 80 83 E8 DD 07 C3  // ....E.f.........
    20F0: 51 53 8D 9C B0 03 E8 EE 11 FE C5 E8 D1 11 80 FD  // QS..............
    2100: 06 72 07 B5 02 E8 F6 01 33 C9 5B 59 C3 66 33 C0  // .r......3.[Y.f3.
    2110: 8D 9C B0 03 E8 74 11 C3 32 ED E8 65 FF 80 E3 0C  // .....t..2..e....
    2120: C0 EB 02 B7 03 2A FB C0 E3 03 8A EB 80 FB 18 72  // .....*.........r
    2130: 03 80 CD 20 E8 4B FF 80 E3 03 38 FB 72 02 8A DF  // ... .K....8.r...
    2140: 80 FB 03 75 03 80 CD 04 0A EB E8 60 FF C3 E8 D2  // ...u.......`....
    2150: F1 8D 9C C0 03 66 BA 02 02 90 45 E8 6E 07 C3 E8  // .....f....E.n...
    2160: C1 F1 66 BA 00 01 90 42 8D 9C B4 03 E8 5D 07 E8  // ..f....B.....]..
    2170: B1 F1 66 BA 03 01 90 45 8D 9C B8 03 E8 4D 07 E8  // ..f....E.....M..
    2180: E5 F1 E8 13 08 75 3B E8 99 F1 66 BA 0A 01 90 40  // .....u;...f....@
    2190: 8D 9C BF 03 E8 35 07 8D 9C 28 01 E8 8D 11 3C 14  // .....5...(....<.
    21A0: 72 20 E8 7E F1 66 BA 10 00 90 4F 8D 9C D0 03 E8  // r .~.f....O.....
    21B0: 1A 07 E8 6E F1 66 BA 15 01 90 40 8D 9C CC 03 E8  // ...n.f....@.....
    21C0: 0A 07 C3 E8 5D F1 66 BA 02 01 80 50 E8 FD 06 C3  // ....].f....P....
    21D0: E8 3F F1 8B C2 66 33 D2 B9 8C 0A F7 F1 C3 E8 42  // .?...f3........B
    21E0: F1 66 BA 00 06 80 50 E8 E2 06 C3 E8 35 F1 66 BA  // .f....P.....5.f.
    21F0: 11 01 80 50 B0 04 E8 D3 06 C3 E8 26 F1 66 BA 00  // ...P.......&.f..
    2200: 06 90 40 8D 9C C8 03 E8 C2 06 8D 9C C8 03 E8 1A  // ..@.............
    2210: 11 C3 E8 BB FF 3C 06 74 0E 3C 0A 74 0A 3C 14 74  // .....<.t.<.t.<.t
    2220: 06 3C 1E 74 02 33 C0 E8 08 F1 8A E3 80 CC 80 50  // .<.t.3.........P
    2230: E8 F0 F0 58 66 BA 00 01 80 61 E8 8F 06 33 C9 E8  // ...Xf....a...3..
    2240: 7C F0 0B C0 74 02 B5 10 8D 9C BC 03 E8 80 10 8A  // |...t...........
    2250: C5 E8 CF F0 66 BA 07 01 80 50 E8 6F 06 E8 07 F1  // ....f....P.o....
    2260: E8 35 07 75 49 8D 9C 48 03 E8 BF 10 0A C0 74 0E  // .5.uI..H......t.
    2270: E8 B0 F0 66 BA 0A 01 80 50 B0 01 E8 4E 06 8D 9C  // ...f....P...N...
    2280: 28 01 E8 A6 10 3C 14 72 25 8D 9C D0 03 E8 9B 10  // (....<.r%.......
    2290: 0B C0 74 1A E8 2A EC 32 C9 8D 9C CC 03 E8 2F 10  // ..t..*.2....../.
    22A0: 8A C5 E8 7E F0 66 BA 15 01 80 50 E8 1E 06 C3 8D  // ...~.f....P.....
    22B0: 9C B4 03 B9 0E 00 E8 FF 0B E8 A3 FE E8 8F FE E8  // ................
    22C0: 38 FF 3C 01 75 1C E8 D2 FD 74 17 33 C9 E8 A8 FD  // 8.<.u....t.3....
    22D0: 80 FD 07 75 0D FE C1 E8 58 F0 38 D9 75 EF B5 01  // ...u....X.8.u...
    22E0: EB 02 B5 00 E8 01 00 C3 8D 9C AC 03 B1 02 E8 DE  // ................
    22F0: 0F C3 51 8D 9C AC 03 32 C9 E8 D3 0F 59 C3 51 8D  // ..Q....2....Y.Q.
    2300: 9C AC 03 B1 01 E8 C7 0F 59 C3 8D 9C 32 01 E8 1A  // ........Y...2...
    2310: 10 24 07 75 15 B9 64 00 8D 9C AC 03 E8 0C 10 3C  // .$.u..d........<
    2320: 02 74 03 B9 90 01 E8 D5 0B C3 32 E4 B1 04 33 D2  // .t........2...3.
    2330: F6 E1 8B C8 E8 D2 0B C3 51 8D 5C 14 E8 EC 0F 66  // ........Q.\....f
    2340: C1 E0 10 E8 A4 01 59 C3 53 8D 9C 44 01 E8 DB 0F  // ......Y.S..D....
    2350: 5B C3 53 66 50 8D 9C 44 01 E8 CF 0F 8B C1 E8 2A  // [.SfP..D.......*
    2360: 0F 66 58 5B C3 53 51 8D 9C 44 01 8A E8 B1 03 E8  // .fX[.SQ..D......
    2370: 5D 0F 59 5B C3 33 C9 E8 38 0B 38 C1 73 05 B5 00  // ].Y[.3..8.8.s...
    2380: E8 8C 00 B5 00 E8 80 00 FE C1 E8 25 0B 38 C1 72  // ...........%.8.r
    2390: E6 B1 14 8A E9 E8 1D 0B 38 C1 74 05 B5 03 E8 E3  // ........8.t.....
    23A0: 01 FE C1 E8 06 0B 04 14 38 C1 76 E7 C3 83 EC 0C  // ........8.v.....
    23B0: 8B EC 0B F6 74 1E E8 03 F8 66 C1 C8 10 66 89 46  // ....t....f...f.F
    23C0: 00 8D 5C 04 E8 64 0F 66 89 46 04 8D 5C 08 E8 5A  // ..\..d.f.F..\..Z
    23D0: 0F 88 46 0A 89 4E 08 8C D0 66 C1 E0 10 8B C4 BB  // ..F..N...f......
    23E0: 2B 00 E8 E3 09 83 C4 0C C3 83 EC 04 8B EC B0 02  // +...............
    23F0: 88 46 01 88 4E 00 8C D0 66 C1 E0 10 8B C4 BB 25  // .F..N...f......%
    2400: 00 E8 C4 09 83 C4 04 C3 BB 23 00 E8 08 00 C3 BB  // .........#......
    2410: 17 00 E8 01 00 C3 83 EC 04 8B EC 89 4E 00 8C D0  // ............N...
    2420: 66 C1 E0 10 8B C4 E8 9F 09 83 C4 04 C3 BB 22 00  // f.............".
    2430: E8 E3 FF C3 BB 27 00 E8 DC FF C3 BB 2C 00 E8 D5  // .....'......,...
    2440: FF C3 E8 E6 0E 66 A9 00 00 FF FF 74 40 83 EC 18  // .....f.....t@...
    2450: 8B EC 55 51 B9 04 00 83 C3 02 E8 CE 0E 66 89 46  // ..UQ.........f.F
    2460: 00 83 C5 04 83 C3 04 E2 F1 83 C3 04 E8 BC 0E 66  // ...............f
    2470: C1 C8 10 66 89 46 00 59 5D 88 4E 14 8C D0 66 C1  // ...f.F.Y].N...f.
    2480: E0 10 8B C4 BB 31 00 E8 3E 09 83 C4 18 C3 E8 36  // .....1..>......6
    2490: EE 8D 9C D0 02 E8 93 0E 8A E8 BB 21 00 E8 76 FF  // ...........!..v.
    24A0: C3 8D 9C 3C 03 E8 83 0E 8A F8 E8 F9 ED 8A DD 53  // ...<...........S
    24B0: 8D 9C 42 03 E8 74 0E 8A E8 5B E8 0A EE E8 A7 EE  // ..B..t...[......
    24C0: E8 D5 04 75 02 B3 01 83 EC 04 8B EC 88 4E 00 88  // ...u.........N..
    24D0: 7E 01 88 5E 02 88 6E 03 8C D0 66 C1 E0 10 8B C4  // ~..^..n...f.....
    24E0: BB 2A 00 E8 E2 08 83 C4 04 C3 83 EC 10 8B EC 66  // .*.............f
    24F0: 3D F0 FF FF 03 76 06 66 B8 F0 FF FF 03 66 8B C8  // =....v.f.....f..
    2500: 66 33 C0 66 89 46 04 66 89 46 00 66 89 46 08 66  // f3.f.F.f.F.f.F.f
    2510: B8 00 00 00 D0 66 0B C1 66 89 46 0C 8C D0 66 C1  // .....f..f.F...f.
    2520: E0 10 8B C4 BB 35 00 E8 9E 08 83 C4 10 C3 83 EC  // .....5..........
    2530: 08 8B EC 89 4E 00 66 89 56 02 89 5E 06 8C D0 66  // ....N.f.V..^...f
    2540: C1 E0 10 8B C4 BB 2D 00 E8 7D 08 83 C4 08 C3 3D  // ......-..}.....=
    2550: C0 7F 76 04 B8 C0 7F C3 83 C0 3F 24 C0 C3 51 E8  // ..v.......?$..Q.
    2560: C9 0D 66 33 D2 B9 0A 00 F7 F1 8B C8 E8 BC 0D 03  // ..f3............
    2570: C1 66 25 FF FF 00 00 59 3D 10 27 73 03 B8 10 27  // .f%....Y=.'s...'
    2580: C3 32 D2 C3 80 FD 02 75 25 E8 42 EE 66 BB 00 08  // .2.....u%.B.f...
    2590: 00 00 E8 9A 00 E8 36 EE 66 BB 03 08 00 00 E8 8E  // ......6.f.......
    25A0: 00 66 33 D2 66 BB 01 08 00 00 E8 82 00 C3 80 FD  // .f3.f...........
    25B0: 03 75 10 66 33 C0 8A C1 66 33 D2 66 BB FF 00 00  // .u.f3...f3.f....
    25C0: 00 EB 36 51 33 D2 E8 DD EC 8A D5 66 C1 E2 10 E8  // ..6Q3......f....
    25D0: 15 ED 8A F2 8A D1 66 8B C2 66 0D 00 00 00 80 E8  // ......f..f......
    25E0: 50 ED 80 FB 04 76 06 66 0D 00 00 00 08 E8 86 ED  // P....v.f........
    25F0: E8 D4 EC 66 33 DB 8A D9 59 83 EC 10 8B EC 66 89  // ...f3...Y.....f.
    2600: 46 04 66 89 5E 08 66 8B C2 66 33 D2 66 BB 64 00  // F.f.^.f..f3.f.d.
    2610: 00 00 66 F7 E3 66 89 46 00 BB 0C 00 8C D0 66 C1  // ..f..f.F......f.
    2620: E0 10 8B C4 E8 A1 07 8B EC B3 01 83 C4 10 C3 83  // ................
    2630: EC 10 8B EC 66 89 56 00 66 89 5E 04 BB 2E 00 8C  // ....f.V.f.^.....
    2640: D0 66 C1 E0 10 8B C4 E8 7E 07 B3 01 83 C4 10 C3  // .f......~.......
    2650: C3 53 51 66 50 B9 68 74 80 FB 03 74 0B B9 A0 8C  // .SQfP.ht...t....
    2660: 80 FB 00 75 03 B9 78 69 66 33 D2 8B D1 66 58 59  // ...u..xif3...fXY
    2670: 5B C3 66 52 B3 00 66 F7 C2 00 00 FF FF 75 1A 80  // [.fR..f......u..
    2680: FD 13 74 15 80 FD 14 74 10 B3 01 80 FD 0E 74 09  // ..t....t......t.
    2690: B3 03 80 F9 03 74 02 B3 02 66 5A C3 B5 11 80 FA  // .....t...fZ.....
    26A0: 23 74 07 80 FA 22 74 02 B5 00 C3 B5 02 80 FA 23  // #t..."t........#
    26B0: 74 07 80 FA 22 74 02 B3 01 C3 32 C9 80 FD 00 75  // t..."t....2....u
    26C0: 08 C7 46 00 0B 01 B1 01 C3 50 33 C0 E8 9E 01 04  // ..F......P3.....
    26D0: 14 89 46 00 58 B1 01 C3 C3 8B DA B7 22 80 FE 21  // ..F.X......."..!
    26E0: 74 02 B7 21 C3 0C 01 C3 E8 40 0C 66 C1 E8 10 0B  // t..!.....@.f....
    26F0: C0 74 1C 53 83 C3 06 E8 31 0C 5B 3D E0 01 72 0F  // .t.S....1.[=..r.
    2700: 53 83 C3 18 E8 24 0C 5B A8 80 75 03 0C 01 C3 32  // S....$.[..u....2
    2710: C0 C3 B5 0C C3 B5 02 C3 50 E8 51 01 B1 03 0A C0  // ........P.Q.....
    2720: 74 04 B1 08 02 C8 58 C3 80 FA 22 75 05 C7 46 00  // t.....X..."u..F.
    2730: 78 69 C3 E8 1A 01 80 FD FF 74 35 83 EC 0C 8B EC  // xi.......t5.....
    2740: 88 4E 01 88 6E 00 80 F9 0F 75 05 E8 4F 00 EB 0F  // .N..n....u..O...
    2750: 80 F9 10 75 0A 8D 9C 48 03 E8 CF 0B 88 46 02 8C  // ...u...H.....F..
    2760: D0 66 C1 E0 10 8B C4 BB 04 00 E8 5B 06 83 C4 0C  // .f.........[....
    2770: C3 83 EC 10 8B EC 88 4E 01 E8 76 EB 81 E2 00 07  // .......N..v.....
    2780: FE CE C0 E6 04 88 76 00 E8 12 00 8C D0 66 C1 E0  // ......v......f..
    2790: 10 8B C4 BB 32 00 E8 2F 06 83 C4 10 C3 66 53 E8  // ....2../.....fS.
    27A0: 70 EB 66 8B C2 66 33 D2 66 BB 8C 0A 00 00 66 F7  // p.f..f3.f.....f.
    27B0: F3 66 5B 8A E8 88 6E 09 8D 9C 40 03 E8 6C 0B 88  // .f[...n...@..l..
    27C0: 46 02 88 66 03 66 C1 E8 10 88 46 08 E8 32 EB 66  // F..f.f....F..2.f
    27D0: 89 56 04 C3 83 EC 20 8B EC 80 F9 04 75 0A 88 4E  // .V.... .....u..N
    27E0: 01 32 C0 88 46 00 EB 56 E8 FC EA E8 7F 00 88 46  // .2..F..V.......F
    27F0: 00 88 4E 01 E8 70 EB 88 56 0A 80 F9 01 74 18 80  // ..N..p..V....t..
    2800: F9 0B 75 3A 8D 9C 5C 03 E8 20 0B 88 46 02 E8 F0  // ..u:..\.. ..F...
    2810: EA 66 89 56 04 EB 27 E8 09 EB 88 6E 08 E8 E1 EA  // .f.V..'....n....
    2820: 66 89 56 04 E8 0B EB 88 5E 03 E8 79 EA 88 6E 02  // f.V.....^..y..n.
    2830: 51 E8 1C 00 8A CD B0 01 D2 E0 59 88 46 09 8C D0  // Q.........Y.F...
    2840: 66 C1 E0 10 8B C4 BB 4C 00 E8 7C 05 83 C4 20 C3  // f......L..|... .
    2850: 8D 9C 3C 03 E8 D4 0A 32 ED 3C 03 74 0C 3C 09 72  // ..<....2.<.t.<.r
    2860: 09 3C 0E 77 05 2C 08 8A E8 C3 B5 FF C3 52 32 C0  // .<.w.,.......R2.
    2870: 80 EE 21 80 FA 1E 74 10 B0 02 80 FA 20 74 09 B0  // ..!...t..... t..
    2880: 04 80 FA 21 74 02 B0 06 02 C6 5A C3 83 EC 08 8C  // ...!t.....Z.....
    2890: D0 66 C1 E0 10 8B C4 BB 4B 00 E8 2B 05 83 C4 08  // .f......K..+....
    28A0: C3 83 EC 08 8B EC 89 7E 00 89 5E 02 89 56 04 89  // .......~..^..V..
    28B0: 4E 06 8C D0 66 C1 E0 10 8B C4 BB 36 00 E8 08 05  // N...f......6....
    28C0: 8B EC 8B 5E 02 8A 7E 01 83 C4 08 C3 56 33 F6 66  // ...^..~.....V3.f
    28D0: F7 C2 00 00 80 00 75 0A 50 33 C0 8A C6 8B F0 32  // ......u.P3.....2
    28E0: F6 58 53 BB 04 1F E8 A2 09 66 8B C2 BB 00 1F E8  // .XS......f......
    28F0: 99 09 5B 66 F7 C2 00 00 10 00 75 02 33 DB 8B D3  // ..[f......u.3...
    2900: 66 C1 E2 10 BA 00 1F 83 EC 08 8B EC 66 89 56 00  // f...........f.V.
    2910: 88 4E 04 8A C5 FE C8 88 46 07 C6 46 05 00 C6 46  // .N......F..F...F
    2920: 06 00 8C D0 66 C1 E0 10 8B C4 BB 4E 00 E8 98 04  // ....f......N....
    2930: 8B EC 8A 5E 05 8A 7E 06 83 C4 08 0A DB 74 32 51  // ...^..~......t2Q
    2940: B9 90 01 80 FB 20 74 05 80 FB 80 75 13 B9 0A 00  // ..... t....u....
    2950: 8B C6 0A C0 74 0A B9 90 01 3C 01 74 03 B9 E8 03  // ....t....<.t....
    2960: E8 9B 05 59 8B C6 FE C4 8B F0 80 FC 06 76 98 0A  // ...Y.........v..
    2970: DB 5E C3 8D 5C 04 E8 B2 09 8B D0 B5 02 E8 14 00  // .^..\...........
    2980: 74 11 B5 01 80 FA 13 75 0A E8 61 00 80 FA 13 75  // t......u..a....u
    2990: 02 B5 02 C3 80 FA 14 C3 E8 F9 FF 74 03 80 FA 0E  // ...........t....
    29A0: C3 80 FA 05 C3 80 FA 02 74 03 80 FA 04 C3 80 FA  // ........t.......
    29B0: 01 74 03 80 FA 02 C3 80 FA 02 75 03 B2 01 C3 80  // .t........u.....
    29C0: FA 04 75 03 B2 03 C3 C3 B5 08 E8 D8 FF 74 02 B5  // ..u..........t..
    29D0: 04 C3 8D 5C 09 E8 53 09 8A C8 0A C9 75 03 32 C0  // ...\..S.....u.2.
    29E0: C3 B5 02 E8 A6 04 8A C5 24 02 D0 E8 C3 8D 5C 08  // ........$.....\.
    29F0: E8 38 09 8A D0 B6 01 83 EC 10 8B EC 89 56 02 8C  // .8...........V..
    2A00: D0 66 C1 E0 10 8B C4 BB 4F 00 E8 BB 03 8B EC 8A  // .f......O.......
    2A10: 56 04 83 C4 10 C3 53 83 C3 4C E8 DC 08 5B C3 53  // V.....S..L...[.S
    2A20: 83 C3 4C E8 2E 08 5B C3 56 E8 59 03 8B 44 38 83  // ..L...[.V.Y..D8.
    2A30: 7D 20 00 5E C3 52 50 0F BC D8 32 FF 80 FB 01 75  // } .^.RP...2....u
    2A40: 05 BB 00 24 EB 0C FE CB B8 00 04 F7 E3 05 00 20  // ...$........... 
    2A50: 8B D8 58 5A C3 57 E8 56 00 74 0A 8B 5D 02 E8 08  // ..XZ.W.V.t..]...
    2A60: 00 0B DB 5F C3 33 DB 5F C3 52 51 0B DB 74 1B 56  // ..._.3._.RQ..t.V
    2A70: E8 F9 02 03 DE 5E 33 C9 8A 4F 01 80 3F FF 74 08  // .....^3..O..?.t.
    2A80: 3A 07 74 06 03 D9 EB F0 33 DB 0B DB 59 5A C3 56  // :.t.....3...YZ.V
    2A90: 51 E8 D8 02 32 C9 8D 7C 08 3B 5D 04 74 0C 83 C7  // Q...2..|.;].t...
    2AA0: 10 FE C1 3A 4C 06 72 F1 33 FF 0B FF 59 5E C3 56  // ...:L.r.3...Y^.V
    2AB0: 51 E8 B8 02 32 C9 8D 7C 08 3B 1D 74 0C 83 C7 10  // Q...2..|.;.t....
    2AC0: FE C1 3A 4C 06 72 F2 33 FF 0B FF 59 5E C3 56 51  // ..:L.r.3...Y^.VQ
    2AD0: E8 99 02 32 C9 8D 7C 08 3B 45 0C 74 0C 83 C7 10  // ...2..|.;E.t....
    2AE0: FE C1 3A 4C 06 72 F1 33 FF 0B FF 59 5E C3 57 50  // ..:L.r.3...Y^.WP
    2AF0: E8 DB FF 8A C3 8B 5D 02 E8 6E FF 58 5F C3 53 32  // ......]..n.X_.S2
    2B00: C9 B3 01 E8 E8 FF 74 03 8A 4F 02 0A C9 5B C3 53  // ......t..O...[.S
    2B10: 32 ED B3 02 E8 D7 FF 74 03 8A 6F 02 0A ED 5B C3  // 2......t..o...[.
    2B20: 50 57 8B DA E8 68 FF 75 04 33 DB EB 0D B0 14 8B  // PW...h.u.3......
    2B30: 5D 08 E8 34 FF 74 F2 8B 5F 02 5F 58 C3 66 50 53  // ]..4.t.._._X.fPS
    2B40: 51 57 8D 1C 66 25 FF FF 00 00 E8 3E 07 8B D8 E8  // QW..f%.....>....
    2B50: 3B 00 23 C3 74 31 E8 75 FF 0B FF 74 2A 66 50 66  // ;.#.t1.u...t*fPf
    2B60: 8B 45 04 8D 5C 0C E8 22 07 66 33 C0 8B 05 8D 5C  // .E..\..".f3....\
    2B70: 04 E8 17 07 66 58 E8 85 FF E8 93 FF 8D 5C 08 66  // ....fX.......\.f
    2B80: 33 C0 8B C1 E8 04 07 5F 59 5B 66 58 C3 56 E8 DB  // 3......_Y[fX.V..
    2B90: 01 8B 44 04 5E C3 56 E8 D2 01 89 44 04 5E C3 E8  // ..D.^.V....D.^..
    2BA0: F8 01 8B F7 83 C6 38 BB 00 2C B9 23 00 E8 36 03  // ......8..,.#..6.
    2BB0: E8 01 00 C3 51 66 57 56 E8 B1 01 66 33 FF 8D 7C  // ....QfWV...f3..|
    2BC0: 08 33 C0 E8 D0 FF 32 C9 8B 15 B8 00 70 23 C2 3D  // .3....2.....p#.=
    2BD0: 00 30 75 5A 80 FA 15 74 0B E8 B1 FF 0B 45 0C E8  // .0uZ...t.....E..
    2BE0: B4 FF EB 4A E8 64 00 89 45 0C 0B C0 75 04 89 05  // ...J.d..E...u...
    2BF0: EB 3C E8 98 FF 0B 45 0C E8 9B FF 83 7D 06 00 74  // .<....E.....}..t
    2C00: 16 E8 50 00 89 45 06 0B C0 74 0C 83 7D 06 00 74  // ..P..E...t..}..t
    2C10: 06 8B 5C 0A E8 C1 00 E8 46 00 89 05 8B 5D 02 E8  // ..\.....F....]..
    2C20: B6 00 8B 5D 02 E8 D1 00 8B 5D 08 E8 EF 00 83 C7  // ...].....]......
    2C30: 10 FE C1 3A 4C 06 72 90 5E 66 5F 59 C3 08 00 80  // ...:L.r.^f_Y....
    2C40: 00 00 02 00 04 00 08 40 00 00 00 53 E8 58 00 E8  // .......@...S.X..
    2C50: D9 06 5B C3 53 E8 4F 00 83 C3 08 E8 CD 06 5B C3  // ..[.S.O.......[.
    2C60: 53 57 52 E8 41 00 83 C3 04 E8 BF 06 8B D0 E8 34  // SWR.A..........4
    2C70: FD 75 16 8B 5D 04 8B D3 E8 5E FA 57 E8 10 FE 5F  // .u..]....^.W..._
    2C80: 75 07 8B D0 E8 30 FD 8B C2 5A 5F 5B C3 E8 D0 FF  // u....0...Z_[....
    2C90: 66 C1 E8 10 B4 11 E8 25 00 C3 E8 C3 FF 66 C1 E8  // f......%.....f..
    2CA0: 18 B4 10 E8 18 00 C3 51 52 33 C9 8A CE 80 E1 07  // .......QR3......
    2CB0: 49 B8 10 00 F7 E1 BB 14 2C 03 D8 5A 59 C3 57 53  // I.......,..ZY.WS
    2CC0: 51 33 C9 8A C8 8A C4 BB 03 71 E8 88 FD 83 C3 02  // Q3.......q......
    2CD0: 03 D9 8A 07 59 5B 5F C3 50 53 B0 01 E8 8A FD 74  // ....Y[_.PS.....t
    2CE0: 15 E8 A9 FF 88 47 02 5B 53 B0 02 E8 7B FD 74 06  // .....G.[S...{.t.
    2CF0: E8 A7 FF 88 47 02 5B 58 C3 51 50 B0 17 E8 69 FD  // ....G.[X.QP...i.
    2D00: 74 18 53 E8 A1 FF 83 C3 0C E8 1F 06 8B C8 5B F7  // t.S...........[.
    2D10: C1 00 04 74 05 66 83 4F 02 01 58 59 C3 51 50 B0  // ...t.f.O..XY.QP.
    2D20: 14 E8 45 FD 74 3A 53 E8 7D FF 83 C3 0C E8 FB 05  // ..E.t:S.}.......
    2D30: 8B C8 5B F6 C1 01 74 05 66 83 67 02 FD F6 C1 80  // ..[...t.f.g.....
    2D40: 74 05 66 83 67 02 F7 F7 C1 00 01 74 08 66 81 4F  // t.f.g......t.f.O
    2D50: 02 00 01 00 00 F7 C1 00 02 74 05 66 83 67 02 FB  // .........t.f.g..
    2D60: 58 59 C3 BF AA 01 8B 3D 8B 7D 0C C3 BE AA 01 8B  // XY.....=.}......
    2D70: 34 8B 74 30 C3 1E 0E 1F BF AA 01 8B 3D 8B 7D 0E  // 4.t0........=.}.
    2D80: 83 C7 04 1F C3 BE AA 01 8B 34 8B 74 10 C3 BF AA  // .........4.t....
    2D90: 01 8B 3D 8B 7D 26 83 C7 04 C3 BF AA 01 8B 3D 8B  // ..=.}&........=.
    2DA0: 7D 40 C3 BE AA 01 8B 34 8B 74 1A C3 BE AA 01 8B  // }@.....4.t......
    2DB0: 34 8B 74 3A C3 BF AA 01 8B 3D 8B 7D 0A 83 C7 04  // 4.t:.....=.}....
    2DC0: B9 0C 00 C3 E8 01 00 CB 83 EC 06 8B EC 89 46 00  // ..............F.
    2DD0: 66 33 C0 C6 46 04 00 89 46 02 06 52 8A D3 8B C5  // f3..F...F..R....
    2DE0: E8 8A 17 5A 07 83 C4 06 C3 E8 77 FF 66 F7 45 10  // ...Z......w.f.E.
    2DF0: 01 00 00 00 C3 50 E8 6A FF B8 01 00 09 45 10 58  // .....P.j.....E.X
    2E00: C3 E8 5F FF 88 45 10 C3 66 53 83 EC 48 8B EC 66  // .._..E..fS..H..f
    2E10: 89 5E 00 66 89 4E 04 8C D0 66 C1 E0 10 8B C4 BB  // .^.f.N...f......
    2E20: 00 00 E8 A3 FF 83 C4 48 66 5B E8 6A 01 E8 A4 01  // .......Hf[.j....
    2E30: 83 EC 1C 8B EC C6 46 01 07 8C D0 66 C1 E0 10 8B  // ......F....f....
    2E40: C4 BB 0D 00 E8 81 FF 83 C4 1C E8 0E 00 BB 04 00  // ................
    2E50: E8 C3 FB 66 C1 E8 10 E8 A7 FF C3 83 EC 1C 8B EC  // ...f............
    2E60: C6 46 01 08 8C D0 66 C1 E0 10 8B C4 BB 0D 00 E8  // .F....f.........
    2E70: 56 FF 83 C4 1C C3 E8 EA FE 66 8B 5D 08 66 8B 4D  // V........f.].f.M
    2E80: 0C C3 56 E8 26 FF 66 8B 44 08 5E C3 83 EC 04 8B  // ..V.&.f.D.^.....
    2E90: EC 89 4E 00 8C D0 66 C1 E0 10 8B C4 BB 38 00 E8  // ..N...f......8..
    2EA0: 26 FF 8B EC 8A 6E 02 83 C4 04 C3 C3 B0 05 C3 B0  // &....n..........
    2EB0: 01 C3 B0 04 C3 B0 08 C3 53 66 50 66 33 C0 E8 CA  // ........SfPf3...
    2EC0: 03 83 C3 04 E2 F8 66 58 5B C3 32 C0 C3 FC E8 5A  // ......fX[.2....Z
    2ED0: 04 66 C1 CB 10 E8 B3 03 66 C1 CB 10 66 81 C3 04  // .f......f...f...
    2EE0: 00 04 00 E2 E9 C3 FC 66 AD E8 9F 03 83 C3 04 E2  // .......f........
    2EF0: F6 C3 FC E8 35 04 66 AB 83 C3 04 E2 F6 C3 66 50  // ....5.f.......fP
    2F00: B8 30 00 E8 10 00 66 58 C3 66 50 B8 C0 5D D1 E1  // .0....fX.fP..]..
    2F10: E8 03 00 66 58 C3 52 F7 E1 8B CA E8 26 02 66 53  // ...fX.R.....&.fS
    2F20: 8B D9 66 C1 E3 10 8B D8 66 B8 04 B1 03 00 B2 00  // ..f.....f.......
    2F30: 66 EF B2 04 66 33 C0 66 EF 66 B8 08 B1 03 00 B2  // f...f3.f.f......
    2F40: 00 66 EF B2 04 66 ED 33 C9 66 03 D8 73 0A 66 ED  // .f...f.3.f..s.f.
    2F50: 66 A9 00 00 00 80 75 F6 66 ED 66 3B C3 73 0C 66  // f.....u.f.f;.s.f
    2F60: C1 E8 10 3B C1 72 04 8B C8 EB ED 66 5B 5A C3 BB  // ...;.r.....f[Z..
    2F70: 42 EC E8 84 03 66 33 D2 66 BB 30 00 00 00 66 F7  // B....f3.f.0...f.
    2F80: F3 C3 66 50 53 BB 07 00 E8 8B FA 25 00 02 35 00  // ..fPS......%..5.
    2F90: 02 0B C0 5B 66 58 C3 66 51 B3 01 E8 80 01 E8 02  // ...[fX.fQ.......
    2FA0: FE 66 33 C9 8B 4C 08 66 C1 E0 0A 0B C9 75 03 B9  // .f3..L.f.....u..
    2FB0: 20 00 66 2B C1 E8 EB FD 66 89 44 04 89 4C 08 66  //  .f+....f.D..L.f
    2FC0: 59 C3 56 1E 0E 1F E8 DA FD 66 8B 44 04 66 C1 E0  // Y.V......f.D.f..
    2FD0: 0A 1F 5E C3 E8 C0 FF 06 E8 BF FD 0E 07 BB 00 78  // ..^............x
    2FE0: E8 48 03 66 3B 05 75 07 B9 00 01 FC E8 03 FF E8  // .H.f;.u.........
    2FF0: A8 FD BE AA 01 8B 34 8B 74 14 8B 45 14 89 44 0C  // ......4.t..E..D.
    3000: E8 82 FD 0B F6 74 4F 8B 45 28 89 44 20 8A 45 33  // .....tO.E(.D .E3
    3010: 88 44 38 F6 45 26 08 74 17 8A 45 26 C0 E8 04 88  // .D8.E&.t..E&....
    3020: 44 24 80 64 24 FD F6 45 26 01 74 04 80 4C 24 02  // D$.d$..E&.t..L$.
    3030: 57 83 C7 38 8A 85 87 00 88 44 3B 5F 66 8B 45 18  // W..8.....D;_f.E.
    3040: 89 44 28 B9 07 00 8D 5D 2C 8A 07 0A C0 74 03 88  // .D(....],....t..
    3050: 44 2C 43 46 E2 F3 E8 53 FD 8B 45 20 89 44 10 8B  // D,CF...S..E .D..
    3060: 45 22 89 44 12 8B 45 1C 89 44 14 8B 45 1E 89 44  // E".D..E..D..E..D
    3070: 16 BB 04 71 B0 09 E8 DC F9 74 0C 57 83 C7 38 8A  // ...q.....t.W..8.
    3080: 85 85 00 88 47 04 5F 07 C3 BE AA 01 8B 34 8B 74  // ....G._......4.t
    3090: 1E 83 C6 04 B9 26 00 C3 56 E8 E9 FC 8A 6C 33 5E  // .....&..V....l3^
    30A0: C3 56 E8 E0 FC 53 81 C3 09 01 E8 7E 02 8A E8 5B  // .V...S.....~...[
    30B0: 53 81 C3 00 01 E8 73 02 5B 8A C5 66 89 44 34 5E  // S.....s.[..f.D4^
    30C0: C3 56 E8 C0 FC 66 8B 44 34 53 81 C3 08 01 B1 01  // .V...f.D4S......
    30D0: 8A E8 E8 FA 01 5B 53 81 C3 00 01 B1 01 8A EC E8  // .....[S.........
    30E0: ED 01 5B 53 81 C3 02 01 66 C1 E8 10 E8 B4 01 5B  // ..[S....f......[
    30F0: 5E C3 56 E8 8F FC 8B FE 83 C7 04 5E C3 56 E8 84  // ^.V........^.V..
    3100: FC 8A 44 24 80 FD 00 74 05 88 6C 33 0C 02 88 44  // ..D$...t..l3...D
    3110: 24 5E C3 32 C0 C3 E8 81 FC 66 8B 45 08 C3 66 53  // $^.2.....f.E..fS
    3120: 83 EC 04 8B EC 8C D0 66 C1 E0 10 8B C4 66 89 5E  // .......f.....f.^
    3130: 00 BB 06 00 E8 91 FC 8B EC 66 8B 46 00 83 C4 04  // .........f.F....
    3140: 66 5B C3 00 66 50 8C C8 3D 00 C0 75 0C BA C3 03  // f[..fP..=..u....
    3150: EC 8A F0 0A F6 74 02 EB 0E 53 2E 8B 1E 14 00 B2  // .....t...S......
    3160: 20 E8 D6 00 8A F4 5B 32 D2 66 ED 66 58 C3 2E 8B  //  .....[2.f.fX...
    3170: 1E 14 00 C3 0B C9 75 1A 4B 74 16 43 3B DA 77 09  // ......u.Kt.C;.w.
    3180: 8B C8 8B C2 2B D2 F7 F3 91 F7 F3 8B DA 8B D1 2B  // ....+..........+
    3190: C9 C3 3B CA 72 1A 75 10 3B D8 77 0C 2B C3 8B D8  // ..;.r.u.;.w.+...
    31A0: 2B C9 2B D2 B8 01 00 C3 2B C9 2B DB 93 87 CA C3  // +.+.....+.+.....
    31B0: 55 56 2B F6 8B EE 03 DB 13 C9 72 11 45 3B CA 72  // UV+.......r.E;.r
    31C0: F5 77 04 3B D8 76 EF F8 13 F6 4D 78 20 D1 D9 D1  // .w.;.v....Mx ...
    31D0: DB 2B C3 1B D1 F5 72 F0 03 F6 4D 78 0C D1 E9 D1  // .+....r...Mx....
    31E0: DB 03 C3 13 D1 73 F1 EB DF 03 C3 13 D1 8B D8 8B  // .....s..........
    31F0: CA 8B C6 33 D2 5E 5D C3 93 50 92 0B C0 74 02 F7  // ...3.^]..P...t..
    3200: E2 91 0B C0 74 04 F7 E3 03 C8 58 F7 E3 03 D1 C3  // ....t.....X.....
    3210: 52 66 50 B4 80 8A C7 66 C1 E0 10 8A E3 8A C2 24  // RfP....f.......$
    3220: FC BA F8 0C 66 EF 66 58 5A C3 52 BA FC 0C 66 ED  // ....f.fXZ.R...f.
    3230: 5A C3 52 BA FC 0C 66 EF 5A C3 E8 31 FF 9C FA E8  // Z.R...f.Z..1....
    3240: CE FF E8 E5 FF 9D C3 E8 24 FF 9C FA E8 C1 FF E8  // ........$.......
    3250: E0 FF 9D C3 52 66 53 66 50 E8 06 00 66 58 66 5B  // ....RfSfP...fXf[
    3260: 5A C3 66 C1 E3 10 66 C1 EB 0E E8 D7 FE E8 93 01  // Z.f...f.........
    3270: C3 66 50 66 C1 E3 10 66 C1 EB 10 E8 44 FD 66 03  // .fPf...f....D.f.
    3280: D8 66 81 CB 00 00 00 80 66 58 C3 52 66 53 E8 04  // .f......fX.RfS..
    3290: 00 66 5B 5A C3 66 50 E8 AA FE E8 D4 FF E8 63 01  // .f[Z.fP.......c.
    32A0: 66 58 C3 52 51 66 53 66 50 8A CB 80 E3 FC 80 E1  // fX.RQfSfP.......
    32B0: 03 C0 E1 03 E8 8D FE E8 B7 FF E8 2D 01 66 D3 C8  // ...........-.f..
    32C0: 58 50 66 D3 C0 E8 3B 01 66 58 66 5B 59 5A C3 66  // XPf...;.fXf[YZ.f
    32D0: 50 51 C0 E1 03 E8 53 00 66 D3 C8 8A C5 66 D3 C0  // PQ....S.f....f..
    32E0: E8 A8 FF 59 66 58 C3 66 50 51 C0 E1 03 E8 3B 00  // ...YfX.fPQ....;.
    32F0: 66 D3 C8 59 8A E8 66 58 C3 E8 5F 00 C3 E8 44 FE  // f..Y..fX.._...D.
    3300: 66 C1 E3 10 66 C1 EB 0E E8 DF 00 C3 E8 35 FE 66  // f...f........5.f
    3310: C1 E3 02 E8 D4 00 C3 52 66 53 E8 04 00 66 5B 5A  // .......RfS...f[Z
    3320: C3 E8 20 FE E8 4A FF E8 C0 00 C3 51 66 52 8A EB  // .. ..J.....QfR..
    3330: 8A CB 80 E1 03 C0 E1 03 80 E3 FC E8 D9 FF 80 F9  // ................
    3340: 00 74 14 66 8B D0 83 C3 04 E8 CB FF 83 EB 04 66  // .t.f...........f
    3350: 92 66 0F AD D0 8A DD 66 5A 59 C3 52 66 53 E8 9C  // .f.....fZY.RfS..
    3360: FF 66 5B 5A C3 52 66 53 E8 A1 FF 66 5B 5A C3 66  // .f[Z.RfS...f[Z.f
    3370: 50 55 52 66 50 8B EC 8B 56 0C 89 56 08 E8 C4 FD  // PURfP...V..V....
    3380: B2 00 66 ED 66 89 46 0A 66 58 5A 5D C3 66 50 55  // ..f.f.F.fXZ].fPU
    3390: 52 66 50 8B EC 8B 56 0C 89 56 08 E8 A6 FD 2E A1  // RfP...V..V......
    33A0: F9 01 B2 18 EF B2 00 66 ED 66 89 46 0A 66 58 5A  // .......f.f.F.fXZ
    33B0: 5D C3 66 50 55 52 8B EC E8 89 FD B2 00 66 8B 46  // ].fPUR.......f.F
    33C0: 0A 66 EF 8B 56 08 89 56 0C 66 8B 46 04 66 89 46  // .f..V..V.f.F.f.F
    33D0: 08 5A 5D 66 58 66 58 C3 66 50 52 E8 66 FD B2 18  // .Z]fXfX.fPR.f...
    33E0: 66 ED 2E A3 F9 01 5A 66 58 C3 66 81 FB FF 00 00  // f.....ZfX.f.....
    33F0: 00 77 04 8A D3 EB 09 66 8B C3 B2 00 66 EF B2 04  // .w.....f....f...
    3400: 66 ED C3 66 81 FB FF 00 00 00 77 04 8A D3 EB 0A  // f..f......w.....
    3410: 66 93 B2 00 66 EF 66 93 B2 04 66 EF C3 C3 C3 55  // f...f.f...f....U
    3420: 8B EC 53 51 8B F0 26 8B 5C 14 26 8B 4C 16 E8 28  // ..SQ..&.\.&.L..(
    3430: 00 8D 66 FC 59 5B 5D C3 53 51 8B F0 26 8B 5C 24  // ..f.Y[].SQ..&.\$
    3440: 33 C9 E8 14 00 59 5B C3 55 8B EC 53 51 8B F0 26  // 3....Y[.U..SQ..&
    3450: 8B 5C 08 26 8B 4C 0A EB D5 52 56 57 C8 06 00 00  // .\.&.L...RVW....
    3460: 8B F0 89 4E FE 8C D0 8E C0 26 8B 7C 26 8A 45 01  // ...N.....&.|&.E.
    3470: 32 E4 B9 20 00 2B C8 B8 FF FF 8B D0 E3 06 D1 EA  // 2.. .+..........
    3480: D1 D8 E2 FA 8A 4D 03 32 ED 8B FA E3 06 D1 E0 D1  // .....M.2........
    3490: D7 E2 FA F7 D0 F7 D7 26 21 44 1C 26 21 7C 1E 8C  // .......&!D.&!|..
    34A0: D0 8E C0 26 8B 7C 26 8A 4D 01 32 ED B8 20 00 2B  // ...&.|&.M.2.. .+
    34B0: C1 8B C8 66 C7 46 FA FF FF FF FF E3 08 D1 6E FC  // ...f.F........n.
    34C0: D1 5E FA E2 F8 8A 4D 02 32 ED 8B C3 8B 56 FE E3  // .^....M.2....V..
    34D0: 06 D1 EA D1 D8 E2 FA 23 46 FA 23 56 FC 8A 4D 03  // .......#F.#V..M.
    34E0: 32 ED E3 06 D1 E0 D1 D2 E2 FA 26 09 44 1C 26 09  // 2.........&.D.&.
    34F0: 54 1E C9 5F 5E 5A C3 55 8B EC 53 51 52 57 50 8B  // T.._^Z.U..SQRWP.
    3500: D8 26 8B 7F 26 8A 45 01 32 E4 B9 20 00 2B C8 B8  // .&..&.E.2.. .+..
    3510: FF FF 8B D0 E3 06 D1 EA D1 D8 E2 FA 8A 4D 02 88  // .............M..
    3520: 4E F6 C6 46 F7 00 8B FA 8B 4E F6 E3 06 D1 E0 D1  // N..F.....N......
    3530: D7 E2 FA 26 09 47 1C 26 09 7F 1E 8D 66 F8 5F 5A  // ...&.G.&....f._Z
    3540: E9 F1 FE 53 51 52 57 8B D8 8C D0 8E C0 26 8B 77  // ...SQRW......&.w
    3550: 26 8A 4C 01 32 ED B8 20 00 2B C1 8B C8 BE FF FF  // &.L.2.. .+......
    3560: 8B D6 E3 06 D1 EA D1 DE E2 FA 26 8B 7F 26 8A 4D  // ..........&..&.M
    3570: 02 32 ED 8B C6 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7  // .2..............
    3580: D2 26 21 47 1C 26 21 57 1E 5F E9 CC 05 53 56 8B  // .&!G.&!W._...SV.
    3590: D8 8C D2 8E C2 26 8B 77 26 80 3C 00 74 73 80 3C  // .....&.w&.<.ts.<
    35A0: 01 75 58 8A 44 01 32 E4 26 83 7F 1E 00 75 4C 26  // .uX.D.2.&....uL&
    35B0: 3B 47 1C 75 46 8A 04 6B F0 03 8A 84 E6 91 26 01  // ;G.uF..k......&.
    35C0: 47 26 8C D0 8E C0 26 8B 77 26 80 3C 09 74 17 8A  // G&....&.w&.<.t..
    35D0: 04 32 E4 6B F0 03 8B C3 FF 94 E4 91 26 8B 77 26  // .2.k........&.w&
    35E0: 8A 04 32 E4 EB D1 8B 44 01 26 29 47 26 26 FF 47  // ..2....D.&)G&&.G
    35F0: 26 26 8B 47 1C 26 8B 77 1E EB 1A 26 8B 77 26 8A  // &&.G.&.w...&.w&.
    3600: 04 32 E4 6B F0 03 8A 84 E6 91 26 01 47 26 E9 80  // .2.k......&.G&..
    3610: FF 33 C0 33 F6 8B D6 5E 5B C3 53 51 52 56 8B D8  // .3.3...^[.SQRV..
    3620: 8D 77 35 26 8B 54 02 26 89 57 14 26 C7 47 16 00  // .w5&.T.&.W.&.G..
    3630: 00 8B F0 26 8B 47 20 33 D2 26 01 47 14 26 11 54  // ...&.G 3.&.G.&.T
    3640: 16 8C D1 8E C1 26 F6 47 2F 06 0F 85 0A 05 26 80  // .....&.G/.....&.
    3650: 7F 34 00 75 22 26 8B 77 16 26 0B 77 14 75 10 26  // .4.u"&.w.&.w.u.&
    3660: D1 67 08 26 D1 57 0A 26 D1 67 08 26 D1 57 0A 8B  // .g.&.W.&.g.&.W..
    3670: C3 E8 79 11 E9 E1 04 26 8A 47 34 32 E4 05 80 00  // ..y....&.G42....
    3680: 99 26 89 47 1C 26 89 57 1E 8B C3 E8 FF FE E9 C7  // .&.G.&.W........
    3690: 04 53 56 8B D8 8D 77 35 26 8A 44 02 32 E4 C1 E0  // .SV...w5&.D.2...
    36A0: 02 26 8B 37 26 8B 34 03 F0 26 8B 47 08 26 8B 5F  // .&.7&.4..&.G.&._
    36B0: 0A 26 89 04 26 89 5C 02 5E 5B C3 53 52 56 8B D8  // .&..&.\.^[.SRV..
    36C0: 8C D0 8D 77 35 8E C0 26 8A 54 02 80 FA 40 73 21  // ...w5..&.T...@s!
    36D0: 26 8B 77 02 32 F6 C1 E2 02 26 8B 74 04 03 F2 26  // &.w.2....&.t...&
    36E0: 8B 57 08 26 8B 47 0A 26 89 14 26 89 44 02 E9 7F  // .W.&.G.&..&.D...
    36F0: 00 80 FA 41 75 12 26 8B 47 08 26 8B 57 0A 26 89  // ...Au.&.G.&.W.&.
    3700: 47 10 26 89 57 12 EB 68 80 FA 40 75 12 26 8B 47  // G.&.W..h..@u.&.G
    3710: 08 26 8B 57 0A 26 89 47 0C 26 89 57 0E EB 51 80  // .&.W.&.G.&.W..Q.
    3720: FA 42 75 0A 26 8B 47 08 26 89 47 22 EB 42 80 FA  // .Bu.&.G.&.G".B..
    3730: 43 75 0A 26 8A 47 08 26 88 47 33 EB 33 80 FA 46  // Cu.&.G.&.G3.3..F
    3740: 75 12 26 8B 57 08 26 8B 47 0A 26 89 57 18 26 89  // u.&.W.&.G.&.W.&.
    3750: 47 1A EB 1C 80 FA 47 75 0A 26 8B 47 08 26 89 47  // G.....Gu.&.G.&.G
    3760: 24 EB 0D 80 FA 48 75 08 26 8B 47 08 26 89 47 20  // $....Hu.&.G.&.G 
    3770: 5E 5A 5B C3 53 56 8B D8 8D 77 35 26 8A 44 02 32  // ^Z[.SV...w5&.D.2
    3780: E4 26 89 47 14 26 C7 47 16 00 00 5E 5B C3 53 56  // .&.G.&.G...^[.SV
    3790: 8B D8 26 8B 77 02 26 8B 74 02 8A 04 32 E4 26 89  // ..&.w.&.t...2.&.
    37A0: 47 14 26 C7 47 16 00 00 26 8B 5F 02 26 FF 47 02  // G.&.G...&._.&.G.
    37B0: 5E 5B C3 53 56 8B D8 26 8B 77 02 26 8B 74 02 8B  // ^[.SV..&.w.&.t..
    37C0: 34 26 89 77 14 26 C7 47 16 00 00 26 8B 5F 02 26  // 4&.w.&.G...&._.&
    37D0: 83 47 02 02 5E 5B C3 53 56 8B D8 26 8B 77 02 26  // .G..^[.SV..&.w.&
    37E0: 8B 74 02 8B 04 8B 74 02 26 89 47 14 26 89 77 16  // .t....t.&.G.&.w.
    37F0: 26 8B 5F 02 26 83 47 02 04 5E 5B C3 53 52 56 8B  // &._.&.G..^[.SRV.
    3800: D8 E8 70 FF 8B F3 26 8B 47 18 26 8B 57 1A D1 EA  // ..p...&.G.&.W...
    3810: D1 D8 D1 EA D1 D8 26 01 47 14 26 11 54 16 8B C3  // ......&.G.&.T...
    3820: E8 2B 10 E9 4A FF 53 8B D8 26 8B 5F 02 26 FF 47  // .+..J.S..&._.&.G
    3830: 02 5B C3 53 8B D8 26 8B 5F 02 26 83 47 02 02 5B  // .[.S..&._.&.G..[
    3840: C3 53 56 8B D8 E8 6B FF 8B F3 26 8B 57 20 33 C0  // .SV...k...&.W 3.
    3850: 26 01 57 14 26 11 44 16 8C D2 8E C2 26 8B 47 2E  // &.W.&.D.....&.G.
    3860: 32 C0 80 E4 06 3D 00 02 75 07 32 E4 33 D2 5E 5B  // 2....=..u.2.3.^[
    3870: C3 26 8B 47 2E 32 C0 80 E4 06 3D 00 04 74 EB 26  // .&.G.2....=..t.&
    3880: 80 7F 34 00 75 08 8B C3 E8 2F 0F 5E 5B C3 26 8A  // ..4.u..../.^[.&.
    3890: 47 34 32 E4 26 89 47 1C 26 C7 47 1E 00 00 8B C3  // G42.&.G.&.G.....
    38A0: E8 EA FC 5E 5B C3 53 8B D8 E8 E2 FE 26 8B 47 14  // ...^[.S.....&.G.
    38B0: C1 E0 02 26 8B 1F 26 8B 1F 03 D8 26 8B 07 26 8B  // ...&..&....&..&.
    38C0: 57 02 5B C3 CA 38 BF 38 D5 38 24 39 DB 38 F3 38  // W.[..8.8.8$9.8.8
    38D0: 0D 39 18 39 1E 39 53 51 56 8B D8 E8 B0 FE 8C D2  // .9.9.9SQV.......
    38E0: 8E C2 26 83 7F 16 00 75 22 26 83 7F 14 40 73 1B  // ..&....u"&...@s.
    38F0: 26 8B 77 02 26 8B 5F 14 C1 E3 02 26 8B 44 04 03  // &.w.&._....&.D..
    3900: D8 26 8B 07 26 8B 57 02 E9 7B 05 26 8B 77 14 26  // .&..&.W..{.&.w.&
    3910: 8B 47 16 83 C6 C0 83 D0 FF 75 71 83 FE 08 77 6C  // .G.......uq...wl
    3920: 03 F6 2E FF A4 5C 38 26 8B 47 10 26 8B 57 12 E9  // .....\8&.G.&.W..
    3930: 54 05 26 8B 47 0C 26 8B 57 0E E9 49 05 26 8B 47  // T.&.G.&.W..I.&.G
    3940: 22 EB 4B 26 8A 4F 33 32 ED BB 01 00 33 D2 E3 06  // ".K&.O32....3...
    3950: D1 E3 D1 D2 E2 FA 8B C3 E9 2B 05 26 8A 4F 33 32  // .........+.&.O32
    3960: ED B8 01 00 33 D2 E3 06 D1 E0 D1 D2 E2 FA F7 D0  // ....3...........
    3970: F7 D2 E9 11 05 26 8B 47 18 26 8B 57 1A E9 06 05  // .....&.G.&.W....
    3980: 26 8B 47 24 EB 08 26 8B 47 20 EB 02 33 C0 33 D2  // &.G$..&.G ..3.3.
    3990: E9 F3 04 53 56 8B D8 E8 F4 FD 8B F3 26 8B 47 18  // ...SV.......&.G.
    39A0: 26 8B 57 1A D1 EA D1 D8 D1 EA D1 D8 26 01 47 14  // &.W.........&.G.
    39B0: 26 11 54 16 8B C3 E8 16 0E 5E 5B C3 33 C0 33 D2  // &.T......^[.3.3.
    39C0: C3 53 56 8B D8 E8 EB FD 26 8B 77 14 26 03 77 22  // .SV.....&.w.&.w"
    39D0: 8B 04 8B 54 02 5E 5B C3 53 8B D8 26 C6 47 2B 04  // ...T.^[.S..&.G+.
    39E0: E8 AB FD 26 8B 47 14 26 8B 57 16 5B C3 53 8B D8  // ...&.G.&.W.[.S..
    39F0: 26 C6 47 2B 01 E8 BB FD EB E9 53 8B D8 26 C6 47  // &.G+......S..&.G
    3A00: 2B 00 E8 D2 FD EB DC 53 8B D8 83 C3 35 26 8A 5F  // +......S....5&._
    3A10: 01 C0 EB 03 80 E3 07 32 FF 03 DB FF 97 74 91 5B  // .......2.....t.[
    3A20: C3 53 52 56 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0  // .SRV..&.G,2.....
    3A30: 8B C3 FF 94 90 91 26 89 47 08 26 89 57 0A 26 8A  // ......&.G.&.W.&.
    3A40: 47 2D 32 E4 8B F0 03 F0 8B C3 FF 94 A8 91 26 89  // G-2...........&.
    3A50: 47 04 26 89 57 06 E9 17 FD 53 51 56 8B D8 26 8A  // G.&.W....SQV..&.
    3A60: 4F 2B 32 ED 8B F1 8A 8C D8 91 E3 0A 26 D1 6F 06  // O+2.........&.o.
    3A70: 26 D1 5F 04 E2 F6 26 8A 4F 2B 32 ED 8B F1 C1 E6  // &._...&.O+2.....
    3A80: 02 8B 8C B8 91 8B B4 BA 91 26 21 4F 04 26 21 77  // .........&!O.&!w
    3A90: 06 26 8A 4F 2A 32 ED 8B F1 8A 8C E0 91 E3 0A 26  // .&.O*2.........&
    3AA0: D1 67 04 26 D1 57 06 E2 F6 26 8B 4F 08 26 8B 77  // .g.&.W...&.O.&.w
    3AB0: 0A 26 89 4F 14 26 89 77 16 E9 CA 03 53 51 52 56  // .&.O.&.w....SQRV
    3AC0: 57 8B D8 8C D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1  // W......&.G+2....
    3AD0: E6 02 26 8A 47 2A 8B F8 8A 8D E0 91 32 ED 8B 84  // ..&.G*......2...
    3AE0: B8 91 8B 94 BA 91 E3 06 D1 E0 D1 D2 E2 FA F7 D0  // ................
    3AF0: F7 D2 26 21 47 14 26 21 57 16 26 8A 47 2A 32 E4  // ..&!G.&!W.&.G*2.
    3B00: 8B F0 8A 8C E0 91 32 ED E3 0A 26 D1 6F 0A 26 D1  // ......2...&.o.&.
    3B10: 5F 08 E2 F6 26 8A 47 2B 8B F0 C1 E6 02 8B 84 B8  // _...&.G+........
    3B20: 91 8B 94 BA 91 26 21 47 08 26 21 57 0A 26 8A 47  // .....&!G.&!W.&.G
    3B30: 2A 32 E4 8B F0 8A 8C E0 91 32 ED E3 0A 26 D1 67  // *2.......2...&.g
    3B40: 08 26 D1 57 0A E2 F6 26 8B 47 14 26 8B 57 16 26  // .&.W...&.G.&.W.&
    3B50: 09 47 08 26 09 57 0A 5F 5E 5A 59 5B C3 53 51 56  // .G.&.W._^ZY[.SQV
    3B60: 8B D8 26 8A 4F 2B 32 ED 8B F1 8A 8C D8 91 E3 0A  // ..&.O+2.........
    3B70: 26 D1 6F 06 26 D1 5F 04 E2 F6 26 8A 4F 2B 32 ED  // &.o.&._...&.O+2.
    3B80: 8B F1 C1 E6 02 8B 8C B8 91 8B B4 BA 91 26 21 4F  // .............&!O
    3B90: 04 26 21 77 06 26 8A 4F 2A 32 ED 8B F1 8A 8C E0  // .&!w.&.O*2......
    3BA0: 91 E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26 8A 4F  // ...&.o.&._...&.O
    3BB0: 2B 32 ED 8B F1 C1 E6 02 8B 8C B8 91 8B B4 BA 91  // +2..............
    3BC0: 26 21 4F 08 26 21 77 0A E9 BB 02 51 52 57 8B D8  // &!O.&!w....QRW..
    3BD0: 8C D0 8E C0 26 80 7F 2B 00 74 1A 26 8A 47 2C 32  // ....&..+.t.&.G,2
    3BE0: E4 8B F0 03 F0 8B C3 FF 94 90 91 26 89 47 08 26  // ...........&.G.&
    3BF0: 89 57 0A EB 10 26 8A 47 2C 32 E4 8B F0 03 F0 8B  // .W...&.G,2......
    3C00: C3 FF 94 9C 91 26 8A 47 2D 32 E4 8B F0 03 F0 8B  // .....&.G-2......
    3C10: C3 FF 94 A8 91 26 89 47 04 26 89 57 06 8C D2 8E  // .....&.G.&.W....
    3C20: C2 26 80 7F 2B 00 74 4A 26 8A 47 2B 32 E4 8B F0  // .&..+.tJ&.G+2...
    3C30: C1 E6 02 26 8A 47 2A 8B F8 8A 8D E0 91 32 ED 8B  // ...&.G*......2..
    3C40: 84 B8 91 8B 94 BA 91 E3 06 D1 E0 D1 D2 E2 FA F7  // ................
    3C50: D0 F7 D2 26 21 47 08 26 21 57 0A 8B C3 E8 F9 FD  // ...&!G.&!W......
    3C60: 26 8B 47 04 26 8B 57 06 26 09 47 08 26 09 57 0A  // &.G.&.W.&.G.&.W.
    3C70: EB 10 26 8B 57 04 26 8B 47 06 26 89 57 08 26 89  // ..&.W.&.G.&.W.&.
    3C80: 47 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94  // G.&.G,2.........
    3C90: 84 91 5F 5A 59 C3 53 51 52 56 57 8B D8 26 8A 47  // .._ZY.SQRVW..&.G
    3CA0: 2A 32 E4 8B F0 8A 8C E0 91 32 ED E3 0A 26 D1 67  // *2.......2...&.g
    3CB0: 04 26 D1 57 06 E2 F6 8C D0 8E C0 26 8A 47 2B 32  // .&.W.......&.G+2
    3CC0: E4 8B F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D E0 91  // ......&.G*......
    3CD0: 32 ED 8B 84 B8 91 8B 94 BA 91 E3 06 D1 E0 D1 D2  // 2...............
    3CE0: E2 FA F7 D0 F7 D2 26 09 47 04 26 09 57 06 26 8B  // ......&.G.&.W.&.
    3CF0: 47 04 26 8B 57 06 26 21 47 08 26 21 57 0A E9 56  // G.&.W.&!G.&!W..V
    3D00: FE 55 8B EC 51 52 50 8B D8 26 8A 47 2C 32 E4 8B  // .U..QRP..&.G,2..
    3D10: F0 03 F0 8B C3 FF 94 90 91 26 89 47 08 26 89 57  // .........&.G.&.W
    3D20: 0A 26 8A 47 2B 88 46 FA 8B C3 E8 DA FC 26 89 47  // .&.G+.F......&.G
    3D30: 04 26 89 57 06 26 8A 4F 2D 32 ED 8B F1 03 F1 8B  // .&.W.&.O-2......
    3D40: C3 FF 94 A8 91 26 89 47 14 26 89 57 16 8B C3 E8  // .....&.G.&.W....
    3D50: 44 FF 8A 46 FA 32 E4 8B F0 8A 8C D8 91 E3 0A 26  // D..F.2.........&
    3D60: D1 6F 16 26 D1 5F 14 E2 F6 26 8A 57 2B 32 F6 8B  // .o.&._...&.W+2..
    3D70: F2 C1 E6 02 8B 84 B8 91 8B 94 BA 91 26 21 47 14  // ............&!G.
    3D80: 26 21 57 16 26 8A 47 2A 32 E4 8B F0 8A 8C E0 91  // &!W.&.G*2.......
    3D90: 32 ED E3 0A 26 D1 67 14 26 D1 57 16 E2 F6 26 8B  // 2...&.g.&.W...&.
    3DA0: 47 14 26 8B 57 16 26 09 47 08 26 09 57 0A 26 8A  // G.&.W.&.G.&.W.&.
    3DB0: 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 84 91 8D 66  // G,2............f
    3DC0: FC 5A 59 5D C3 51 8B D8 E8 56 FC 26 8A 4F 2B 32  // .ZY].Q...V.&.O+2
    3DD0: ED 8B F1 8A 8C D8 91 E3 0A 26 D1 6F 06 26 D1 5F  // .........&.o.&._
    3DE0: 04 E2 F6 8B C3 E8 AE FE 26 8A 4F 2C 32 ED 8B F1  // ........&.O,2...
    3DF0: 03 F1 8B C3 FF 94 84 91 59 C3 8B D8 E8 22 FC 8B  // ........Y...."..
    3E00: C3 E8 55 FC 26 8B 47 04 26 8B 77 06 26 09 47 08  // ..U.&.G.&.w.&.G.
    3E10: 26 09 77 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3  // &.w.&.G,2.......
    3E20: FF 94 84 91 C3 53 56 8B D8 E8 F5 FB 8B C3 E8 28  // .....SV........(
    3E30: FC 26 8B 47 04 26 8B 77 06 26 31 47 08 26 31 77  // .&.G.&.w.&1G.&1w
    3E40: 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 84  // .&.G,2..........
    3E50: 91 5E 5B C3 53 51 56 8B D8 E8 C5 FB 8B C3 E8 F8  // .^[.SQV.........
    3E60: FB 26 8B 4F 04 E3 0A 26 D1 67 08 26 D1 57 0A E2  // .&.O...&.g.&.W..
    3E70: F6 8B C3 E8 46 FC 26 8A 4F 2C 32 ED 8B F1 03 F1  // ....F.&.O,2.....
    3E80: 8B C3 FF 94 84 91 5E 59 5B C3 53 51 56 8B D8 E8  // ......^Y[.SQV...
    3E90: 8F FB 8B C3 E8 C2 FB 26 8B 4F 04 E3 0A 26 D1 6F  // .......&.O...&.o
    3EA0: 0A 26 D1 5F 08 E2 F6 EB C8 52 8B D8 E8 72 FB 8B  // .&._.....R...r..
    3EB0: C3 E8 A5 FB 8B F3 26 8B 47 04 26 8B 57 06 26 01  // ......&.G.&.W.&.
    3EC0: 47 08 26 11 54 0A 8B C3 E8 F1 FB 26 8A 47 2C 32  // G.&.T......&.G,2
    3ED0: E4 8B F0 03 F0 8B C3 FF 94 84 91 5A C3 52 8B D8  // ...........Z.R..
    3EE0: E8 3E FB 8B C3 E8 71 FB 8B F3 26 8B 47 04 26 8B  // .>....q...&.G.&.
    3EF0: 57 06 26 29 47 08 26 19 54 0A EB CA 51 52 8B F0  // W.&)G.&.T...QR..
    3F00: E8 1E FB 8B C6 E8 55 FC 26 8B 44 08 26 8B 54 0A  // ......U.&.D.&.T.
    3F10: 26 8B 5C 04 26 8B 4C 06 E8 DD F2 26 89 44 0C 26  // &.\.&.L....&.D.&
    3F20: 89 54 0E 5A 59 C3 52 8B D0 E8 F5 FA 8B C2 E8 2C  // .T.ZY.R........,
    3F30: FC 8B C2 E8 5C 08 5A C3 51 52 57 8B F0 E8 E1 FA  // ....\.Z.QRW.....
    3F40: 8B C6 E8 18 FC 26 8B 44 08 26 8B 54 0A 26 8B 5C  // .....&.D.&.T.&.\
    3F50: 04 26 8B 4C 06 E8 1C F2 26 89 44 0C 26 89 54 0E  // .&.L....&.D.&.T.
    3F60: 8C D7 8E C7 26 8B 44 08 26 8B 54 0A 26 8B 5C 04  // ....&.D.&.T.&.\.
    3F70: 26 8B 4C 06 E8 FD F1 26 89 5C 10 26 89 4C 12 E9  // &.L....&.\.&.L..
    3F80: 10 FD 52 8B D0 E8 99 FA 8B C2 E8 D0 FB 8B C2 E8  // ..R.............
    3F90: D3 07 5A C3 51 52 8B D8 E8 86 FA 8B C3 E8 BD FB  // ..Z.QR..........
    3FA0: 8C D1 8E C1 26 8B 47 08 26 8B 57 0A 26 3B 57 06  // ....&.G.&.W.&;W.
    3FB0: 75 0E 26 3B 47 04 75 08 26 C6 47 30 01 5A 59 C3  // u.&;G.u.&.G0.ZY.
    3FC0: 8B D0 26 8B 47 0A 26 3B 47 06 72 08 75 0A 26 3B  // ..&.G.&;G.r.u.&;
    3FD0: 57 04 73 04 33 C0 EB 03 B8 02 00 26 88 47 30 5A  // W.s.3......&.G0Z
    3FE0: 59 C3 51 52 57 8B D8 26 8A 47 2C 32 E4 8B F0 03  // Y.QRW..&.G,2....
    3FF0: F0 8B C3 FF 94 90 91 26 89 47 08 26 89 57 0A 8C  // .......&.G.&.W..
    4000: D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02 8B F8  // ...&.G+2........
    4010: 8A 8D D8 91 32 ED 8B 84 B8 91 8B 94 BA 91 E3 06  // ....2...........
    4020: D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47 08 26 21  // ..........&!G.&!
    4030: 57 0A E9 4D FC 55 8B EC 51 52 57 83 EC 06 8B D8  // W..M.U..QRW.....
    4040: 26 8A 47 2B 32 E4 8B F0 C1 E6 02 8B F8 8A 8D D8  // &.G+2...........
    4050: 91 32 ED 8B 84 B8 91 89 46 F4 8B 84 BA 91 89 46  // .2......F......F
    4060: F6 E3 08 D1 66 F4 D1 56 F6 E2 F8 8B 7E F4 8B 46  // ....f..V....~..F
    4070: F6 89 46 F8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3  // ..F.&.G,2.......
    4080: FF 94 90 91 26 89 47 08 26 89 57 0A 8B C3 E8 47  // ....&.G.&.W....G
    4090: F9 26 89 47 04 26 89 57 06 8B C7 F7 D0 8B 56 F6  // .&.G.&.W......V.
    40A0: F7 D2 26 23 47 08 26 23 57 0A 26 89 47 14 26 89  // ..&#G.&#W.&.G.&.
    40B0: 57 16 26 21 7F 08 8B 46 F6 26 21 47 0A 8C D1 8D  // W.&!...F.&!G....
    40C0: 77 35 8E C1 26 80 3C 19 73 12 26 8B 4F 04 E3 0A  // w5..&.<.s.&.O...
    40D0: 26 D1 67 08 26 D1 57 0A E2 F6 EB 10 26 8B 4F 04  // &.g.&.W.....&.O.
    40E0: E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26 21 7F 08  // ..&.o.&._...&!..
    40F0: 8B 46 F8 26 21 47 0A 26 8B 57 14 26 8B 47 16 26  // .F.&!G.&.W.&.G.&
    4100: 09 57 08 26 09 47 0A 26 8A 47 2C 32 E4 8B F0 03  // .W.&.G.&.G,2....
    4110: F0 8B C3 FF 94 84 91 8D 66 FA 5F E9 A3 FC 52 8B  // ........f._...R.
    4120: D8 E8 FD F8 8B C3 E8 34 FA 26 8B 47 08 26 8B 57  // .......4.&.G.&.W
    4130: 0A 26 85 57 06 75 06 26 85 47 04 74 05 B8 03 00  // .&.W.u.&.G.t....
    4140: EB 03 B8 01 00 26 88 47 30 5A C3 53 51 52 56 8B  // .....&.G0Z.SQRV.
    4150: D8 26 8A 4F 2D 32 ED 8B F1 03 F1 FF 94 A8 91 26  // .&.O-2.........&
    4160: 89 47 04 26 89 57 06 26 8A 47 2B 32 E4 8B F0 8A  // .G.&.W.&.G+2....
    4170: 8C D8 91 E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 26  // .....&.o.&._...&
    4180: 8A 47 2B 8B F0 C1 E6 02 8B 84 B8 91 8B 94 BA 91  // .G+.............
    4190: 26 21 47 04 26 21 57 06 E9 BD F9 52 8B D8 E8 AA  // &!G.&!W....R....
    41A0: FF 26 8B 47 04 26 8B 57 06 26 89 47 18 26 89 57  // .&.G.&.W.&.G.&.W
    41B0: 1A 5A C3 51 52 8B D8 E8 91 FF 8C D0 8E C0 26 8B  // .Z.QR.........&.
    41C0: 77 02 26 8B 74 02 81 3C 5A 5A 74 5B 26 8B 77 02  // w.&.t..<ZZt[&.w.
    41D0: 26 8B 74 02 80 3C 63 75 E1 26 8B 77 02 26 FF 44  // &.t..<cu.&.w.&.D
    41E0: 02 8B C3 E8 21 F8 26 89 47 08 26 89 57 0A 8B C3  // ....!.&.G.&.W...
    41F0: E8 FA F7 26 89 47 14 26 89 57 16 8C D1 8E C1 26  // ...&.G.&.W.....&
    4200: 8B 57 04 26 8B 47 06 26 3B 47 0A 75 AD 26 3B 57  // .W.&.G.&;G.u.&;W
    4210: 08 75 A7 26 8B 77 02 26 8B 04 26 03 47 14 8B DE  // .u.&.w.&..&.G...
    4220: 26 89 47 02 5A 59 C3 26 8B 5F 02 26 83 47 02 02  // &.G.ZY.&._.&.G..
    4230: 5A 59 C3 52 57 8B D8 8C D0 8E C0 26 8B 77 02 26  // ZY.RW......&.w.&
    4240: 8B 74 02 8A 54 01 84 D2 75 08 26 C7 47 22 00 00  // .t..T...u.&.G"..
    4250: EB 2F 80 FA FF 75 14 26 8B 77 02 26 8B 3F 26 8B  // ./...u.&.w.&.?&.
    4260: 34 26 2B 75 02 26 89 77 22 EB 16 26 8B 07 E8 E3  // 4&+u.&.w"..&....
    4270: 02 8B F0 8A C2 32 E4 03 C0 03 F0 8B 04 26 89 47  // .....2.......&.G
    4280: 22 26 8B 5F 02 26 83 47 02 02 5F 5A C3 8B D8 26  // "&._.&.G.._Z...&
    4290: 80 67 2F F9 26 8B 77 02 26 8B 74 02 8A 44 01 26  // .g/.&.w.&.t..D.&
    42A0: 88 47 34 26 8B 5F 02 26 83 47 02 03 C3 8B D8 26  // .G4&._.&.G.....&
    42B0: 8B 77 02 26 8B 74 02 8B 74 01 26 89 77 20 EB E3  // .w.&.t..t.&.w ..
    42C0: 53 8B D8 26 8A 47 2C 32 E4 24 03 26 80 67 2F F9  // S..&.G,2.$.&.g/.
    42D0: C1 E0 09 26 09 47 2E E9 4F F5 8B D8 26 8B 77 02  // ...&.G..O...&.w.
    42E0: 26 8B 74 02 8A 44 01 32 E4 26 89 47 04 26 C7 47  // &.t..D.2.&.G.&.G
    42F0: 06 00 00 8B C3 E8 40 04 26 8B 5F 02 26 83 47 02  // ......@.&._.&.G.
    4300: 02 C3 8B D8 26 8B 77 02 26 8B 74 02 8A 44 01 32  // ....&.w.&.t..D.2
    4310: E4 26 89 47 04 26 C7 47 06 00 00 8B C3 E8 08 04  // .&.G.&.G........
    4320: EB D6 53 56 8B D8 26 8B 77 02 26 8B 74 02 8A 44  // ..SV..&.w.&.t..D
    4330: 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B C3 E8  // .2.&.G.&.G......
    4340: 06 04 E9 86 F4 53 56 8B D8 26 8B 77 02 26 8B 74  // .....SV..&.w.&.t
    4350: 02 8A 44 01 32 E4 26 89 47 04 26 C7 47 06 00 00  // ..D.2.&.G.&.G...
    4360: 8B C3 E8 F0 03 E9 63 F4 53 56 8B D8 26 8B 77 02  // ......c.SV..&.w.
    4370: 8B DE 26 8B 5F 02 8B 5F 01 83 C3 03 26 01 5C 02  // ..&._.._....&.\.
    4380: 5E 5B C3 51 52 8B D8 26 8B 77 02 26 83 44 02 02  // ^[.QR..&.w.&.D..
    4390: 26 8B 07 E8 A0 01 8B C8 26 8B 77 28 8A 44 01 32  // &.......&.w(.D.2
    43A0: E4 03 C0 8B F1 03 F0 83 3C 00 74 4F 26 8B 77 28  // ........<.tO&.w(
    43B0: 8A 54 01 32 F6 8B C3 E8 B0 01 26 88 47 31 26 8B  // .T.2......&.G1&.
    43C0: 77 02 26 8B 34 8B 44 04 C1 E8 08 32 E4 24 7F C1  // w.&.4.D....2.$..
    43D0: E8 02 32 E4 24 1F 26 80 67 2F 07 C1 E0 0B 26 09  // ..2.$.&.g/....&.
    43E0: 47 2E 26 8B 37 26 8B 47 2E C1 E8 0B C1 E0 02 26  // G.&.7&.G.......&
    43F0: 01 04 26 C6 47 32 01 26 89 4F 28 5A 59 C3 53 8B  // ..&.G2.&.O(ZY.S.
    4400: D8 26 C6 47 32 82 5B C3 57 8B D8 8C D6 8E C6 26  // .&.G2.[.W......&
    4410: 80 7F 2C 05 74 0A 26 8A 47 2C 26 3A 47 30 75 1E  // ..,.t.&.G,&:G0u.
    4420: 26 8B 77 02 26 8B 74 02 26 8B 7F 02 26 8B 3D 8B  // &.w.&.t.&...&.=.
    4430: 74 01 03 F7 26 8B 5F 02 26 89 77 02 5F C3 26 8B  // t...&._.&.w._.&.
    4440: 5F 02 26 83 47 02 03 5F C3 53 56 57 8B D8 8C D6  // _.&.G.._.SVW....
    4450: 8E C6 26 80 7F 30 01 74 0A 26 8A 47 30 26 3A 47  // ..&..0.t.&.G0&:G
    4460: 2C 75 20 26 8B 77 02 26 8B 74 02 26 8B 7F 02 26  // ,u &.w.&.t.&...&
    4470: 8B 3D 8B 74 01 03 F7 26 8B 5F 02 26 89 77 02 5F  // .=.t...&._.&.w._
    4480: 5E 5B C3 26 8B 5F 02 26 83 47 02 03 EB F1 53 56  // ^[.&._.&.G....SV
    4490: 57 8B D8 8C D0 8E C0 26 80 7F 30 01 74 E5 EB C3  // W......&..0.t...
    44A0: 55 8B EC 53 51 52 57 8B D8 26 8B 77 02 26 8B 74  // U..SQRW..&.w.&.t
    44B0: 02 8A 04 26 C6 47 3D 00 8C D1 8E C1 26 80 7F 3D  // ...&.G=.....&..=
    44C0: 08 73 20 26 8B 77 02 26 8A 57 3D 32 F6 26 8B 7C  // .s &.w.&.W=2.&.|
    44D0: 02 03 FA 8B F3 03 F2 8A 15 26 88 54 35 26 FE 47  // .........&.T5&.G
    44E0: 3D EB D5 26 8B 7F 02 8A D0 32 F6 8B F2 C1 E6 02  // =..&.....2......
    44F0: 8A 94 05 92 26 01 55 02 26 8B 7F 28 8A 55 01 80  // ....&.U.&..(.U..
    4500: E2 07 26 88 57 2D 26 8B 7F 28 8A 55 01 C0 EA 03  // ..&.W-&..(.U....
    4510: 80 E2 07 26 88 57 2B 26 8B 7F 28 8A 55 01 C0 EA  // ...&.W+&..(.U...
    4520: 06 26 88 57 2A 8A 94 04 92 26 88 57 2C 8D 66 F8  // .&.W*....&.W,.f.
    4530: 5F 5A 59 5B 5D C3 53 56 8B D8 26 8B 77 02 8B C6  // _ZY[].SV..&.w...
    4540: 8B 74 48 03 F0 8B D8 8B 74 1E 8B C6 03 C3 83 C0  // .tH.....t.......
    4550: 04 5E 5B C3 53 56 8B D8 26 8B 77 02 8B C6 8B 74  // .^[.SV..&.w....t
    4560: 48 03 F0 8B D8 8B 74 20 EB E0 8A C2 C3 16 07 55  // H.....t .......U
    4570: 8B EC 53 51 56 57 83 EC 40 8B F8 89 46 B8 E8 D3  // ..SQVW..@...F...
    4580: FF 8B D8 89 46 E0 26 8B 45 02 8B 5F 2E 03 D8 89  // ....F.&.E.._....
    4590: 5E DE 83 46 DE 04 8B C7 E8 9B FF 89 46 E0 32 F6  // ^..F........F.2.
    45A0: 8D 46 B8 E8 C4 FF 8A D0 32 F6 03 D2 8B 5E E0 03  // .F......2....^..
    45B0: DA 83 3F 00 0F 84 65 01 88 46 E9 80 66 E7 F9 C6  // ..?...e..F..f...
    45C0: 46 EC 00 C7 46 D8 00 00 66 C7 46 D0 00 00 00 00  // F...F...f.F.....
    45D0: C7 46 F6 00 00 C6 46 EA 01 EB 06 3C 01 0F 85 8C  // .F....F....<....
    45E0: 00 8A 56 E9 8A C2 32 E4 03 C0 8B 5E E0 03 D8 83  // ..V...2....^....
    45F0: 3F 00 74 75 26 8B 45 02 8B 1F 03 D8 8B 47 04 32  // ?.tu&.E......G.2
    4600: E4 8B C8 83 C1 09 32 ED 80 E1 FE 83 F9 00 74 07  // ......2.......t.
    4610: D1 E9 33 C0 50 E2 FD 8B C4 8B D8 89 46 BA 85 C0  // ..3.P.......F...
    4620: 74 41 83 C0 08 26 89 47 04 8A C2 32 E4 03 C0 8B  // tA...&.G...2....
    4630: 5E E0 03 D8 26 8B 45 02 03 07 8B 5E BA 26 89 07  // ^...&.E....^.&..
    4640: 8B 5E BA 26 8B 07 83 C0 06 26 89 47 02 8B 5E BA  // .^.&.....&.G..^.
    4650: 8B 76 F6 26 89 77 06 8B 5E BA 89 5E F6 C6 46 EA  // .v.&.w..^..^..F.
    4660: 00 EB 0A C6 46 EA 87 EB 04 C6 46 EA 83 8A 46 EA  // ....F.....F...F.
    4670: 32 E4 83 F8 10 0F 8F 99 00 88 66 EA 8A 46 EA 32  // 2.........f..F.2
    4680: E4 85 C0 0F 8F 83 00 8C D0 8B 5E BA 8E C0 26 8B  // ..........^...&.
    4690: 5F 02 89 5E E0 8B 5E BA 26 8B 5F 02 80 3F 5B 75  // _..^..^.&._..?[u
    46A0: 4A C6 46 EA 10 8B 5E BA 26 8B 5F 06 89 5E F6 8B  // J.F...^.&._..^..
    46B0: 5E BA 26 8B 1F 8B 47 04 32 E4 8B C8 83 C1 09 32  // ^.&...G.2......2
    46C0: ED 80 E1 FE 03 E1 8B 5E F6 89 5E BA 85 DB 74 AC  // .......^..^...t.
    46D0: 26 8B 1F 8B 47 04 C1 E8 08 32 E4 24 7F C1 E8 02  // &...G....2.$....
    46E0: C1 E0 02 8B 5E B8 26 29 07 EB 91 8D 46 B8 E8 AF  // ....^.&)....F...
    46F0: FD 8A D0 8D 46 B8 E8 2E 00 8A DA 32 FF C1 E3 02  // ....F......2....
    4700: 8D 46 B8 FF 97 02 92 E9 72 FF 83 7E F6 00 0F 85  // .F......r..~....
    4710: C9 FE 80 7E EA 10 74 05 8A 46 EA EB 02 32 C0 8D  // ...~..t..F...2..
    4720: 66 F8 5F 5E E9 0B FE C3 53 51 8B D8 26 8A 4F 04  // f._^....SQ..&.O.
    4730: 32 ED E8 C9 E7 59 5B C3 53 51 8B D8 26 8A 4F 04  // 2....Y[.SQ..&.O.
    4740: 32 ED E8 C4 E7 59 5B C3 53 8B D8 26 8A 47 04 32  // 2....Y[.S..&.G.2
    4750: E4 E6 80 5B C3 53 51 8B D8 26 8A 4F 04 32 ED E8  // ...[.SQ..&.O.2..
    4760: D6 D4 59 5B C3 53 8B D8 66 50 66 52 66 51 66 26  // ..Y[.S..fPfRfQf&
    4770: 8B 47 08 66 26 8B 57 10 66 26 8B 4F 04 66 F7 F1  // .G.f&.W.f&.O.f..
    4780: 66 26 89 47 0C 66 26 89 57 10 66 59 66 5A 66 58  // f&.G.f&.W.fYfZfX
    4790: 5B C3 53 8B D8 66 50 66 52 66 51 66 26 8B 47 08  // [.S..fPfRfQf&.G.
    47A0: 66 26 8B 4F 04 66 F7 E1 66 26 89 47 0C 66 26 89  // f&.O.f..f&.G.f&.
    47B0: 57 10 66 59 66 5A 66 58 5B C3 53 57 8B D8 26 8B  // W.fYfZfX[.SW..&.
    47C0: 5F 14 E8 38 EB 8B D0 66 C1 E8 10 92 5F 5B C3 53  // _..8...f...._[.S
    47D0: 57 8B D8 26 8B 47 14 26 8B 57 16 8B D8 87 D3 66  // W..&.G.&.W.....f
    47E0: C1 E3 10 8B DA C1 E3 02 E8 36 EB EB D8 53 52 57  // .........6...SRW
    47F0: 8B D8 26 8B 47 08 26 8B 57 0A 92 66 C1 E0 10 8B  // ..&.G.&.W..f....
    4800: C2 26 8B 5F 14 E8 5A EA 5F 5A 5B C3 53 52 8B D8  // .&._..Z._Z[.SR..
    4810: 26 8B 47 1C 26 8B 57 1E 92 66 C1 E0 10 8B C2 26  // &.G.&.W..f.....&
    4820: 8B 5F 26 8B 5F 01 E8 39 EA 5A 5B C3 53 52 56 8B  // ._&._..9.Z[.SRV.
    4830: F0 26 8B 5C 26 8B 5F 01 E8 C2 EA 8B D0 66 C1 E8  // .&.\&._......f..
    4840: 10 92 26 89 44 1C 26 89 54 1E 5E 5A 5B C3 53 51  // ..&.D.&.T.^Z[.SQ
    4850: 52 57 8B D8 26 8B 47 08 26 8B 57 0A 92 66 C1 E0  // RW..&.G.&.W..f..
    4860: 10 8B C2 8B C8 26 8B 47 14 26 8B 57 16 8B D8 87  // .....&.G.&.W....
    4870: D3 66 C1 E3 10 8B DA C1 E3 02 8B C1 E8 16 EA 5F  // .f............._
    4880: 5A 59 5B C3 8B D0 66 C1 E8 10 92 C3 1E 06 66 50  // ZY[...f.......fP
    4890: 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F 0A C0  // fQfRfSfUfVfW....
    48A0: 75 06 E8 07 01 E9 A8 00 3C 01 75 06 E8 37 01 E9  // u.......<.u..7..
    48B0: 9E 00 3C 02 75 06 E8 5F 02 E9 94 00 3C 03 75 0B  // ..<.u.._....<.u.
    48C0: E8 91 03 8B EC 89 5E 0C E9 85 00 3C 04 75 02 EB  // ......^....<.u..
    48D0: 7D 3C 05 75 0A E8 0E 04 8B EC 89 56 10 EB 71 3C  // }<.u.......V..q<
    48E0: 06 75 10 E8 8C 03 8B EC 89 5E 0C 89 4E 14 89 56  // .u.......^..N..V
    48F0: 10 EB 5D 3C 07 75 02 EB 55 3C 08 75 0A E8 D0 03  // ..]<.u..U<.u....
    4900: 8B EC 88 7E 0D EB 49 3C 09 75 02 EB 41 3C 0A 75  // ...~..I<.u..A<.u
    4910: 10 E8 65 04 8B EC 89 4E 14 89 7E 00 8C 46 1C EB  // ..e....N..~..F..
    4920: 2F 3C 0B 75 02 EB 27 3C 10 75 0A E8 5A 04 8B EC  // /<.u..'<.u..Z...
    4930: 89 5E 0C EB 1B 3C 11 75 02 EB 13 3C 15 75 0F E8  // .^...<.u...<.u..
    4940: 80 04 8B EC 89 5E 0C EB 07 B8 4F 01 EB 02 32 C0  // .....^....O...2.
    4950: 8B EC 89 46 18 66 5F 66 5E 66 5D 66 5B 66 5A 66  // ...F.f_f^f]f[fZf
    4960: 59 66 58 07 1F C3 50 1E 2E 8E 1E 16 03 8C D8 A3  // YfX...P.........
    4970: CE 58 A3 DE 58 A3 F0 58 2E 8E 1E 0E 03 A3 AA 04  // .X..X..X........
    4980: 1F 58 CB 00 30 31 2E 30 30 00 56 45 53 41 00 03  // .X..01.00.VESA..
    4990: CC 01 00 00 01 00 00 00 00 00 00 00 00 03 0A 11  // ................
    49A0: ED 00 00 00 81 00 00 00 1C 49 00 00 B9 3F 00 8B  // .........I...?..
    49B0: DF 83 C7 04 FC 66 33 C0 F3 66 AB 8B FB BE 22 49  // .....f3..f...."I
    49C0: B9 22 00 F3 A4 06 1F 8C 4F 08 8C 47 10 8C 4F 18  // ."......O..G..O.
    49D0: 8C 4F 1C 8C 4F 20 83 C7 22 89 7F 0E 0E 1F E8 32  // .O..O .."......2
    49E0: D1 B0 4F 32 E4 C3 56 51 57 B9 10 00 66 33 C0 F3  // ..O2..VQW...f3..
    49F0: 66 AB 5F 59 8C DB 06 1F C7 05 BB 00 C6 45 02 07  // f._Y.........E..
    4A00: C7 45 04 40 00 C7 45 06 40 00 C6 45 1B 06 C6 45  // .E.@..E.@..E...E
    4A10: 18 01 C6 45 1A 01 C6 45 1E 01 66 C7 45 3E 00 84  // ...E...E..f.E>..
    4A20: D7 17 8E DB E8 F9 C9 66 0B C0 0F 84 E1 00 06 1F  // .......f........
    4A30: 66 89 45 28 8C C8 66 C1 E0 10 B8 DB 4C 66 89 45  // f.E(..f.....Lf.E
    4A40: 0C 81 F9 FF 81 0F 84 C2 00 80 E5 03 B2 01 53 8E  // ..............S.
    4A50: DB BE 80 1C E8 DE CE 5B 06 1F 0F 84 B1 00 53 E8  // .......[......S.
    4A60: 5A D1 66 89 45 12 C7 45 16 08 10 8D 5C 0C E8 BA  // Z.f.E..E....\...
    4A70: E8 66 89 45 1F 66 89 45 36 8D 5C 10 E8 AC E8 66  // .f.E.f.E6.\....f
    4A80: 89 45 23 66 89 45 3A 8D 5C 08 E8 9E E8 0A C0 75  // .E#f.E:.\......u
    4A90: 03 5B EB 7B E8 25 D1 66 C1 E8 10 3D 58 02 74 0D  // .[.{.%.f...=X.t.
    4AA0: 3D 5E 01 74 08 77 0A C6 45 17 08 EB 04 C6 45 17  // =^.t.w..E.....E.
    4AB0: 0E 2E A1 10 03 89 45 08 8D 5C 04 E8 6D E8 66 8B  // ......E..\..m.f.
    4AC0: C8 66 C1 E9 10 D3 E0 89 45 10 89 45 32 B0 08 D2  // .f......E..E2...
    4AD0: E0 88 45 19 8D 5C 14 E8 51 E8 5B 3D 00 03 77 2F  // ..E..\..Q.[=..w/
    4AE0: 53 8B D8 B8 00 03 33 D2 F7 F3 5B FE C8 88 45 1D  // S.....3...[...E.
    4AF0: 88 45 35 88 45 34 8E DB 57 53 BE 80 1C E8 89 C9  // .E5.E4..WS......
    4B00: 5B 5F 0B C9 75 05 06 1F 83 25 FE 32 E4 EB 02 B4  // [_..u....%.2....
    4B10: 03 B0 4F 8E DB 5E C3 00 81 FB FF 81 74 68 0A FF  // ..O..^......th..
    4B20: 75 04 8B C3 EB 21 F6 C7 08 75 61 8B CB B2 01 BE  // u....!...ua.....
    4B30: 20 1C E8 00 CE 74 55 E8 61 D0 0A C0 75 0E 66 C1  //  ....tU.a...u.f.
    4B40: E8 10 80 E7 80 0A C7 E8 D5 02 EB 3A E8 D0 CB 74  // ...........:...t
    4B50: 06 E8 41 CA E8 8A C3 BE 20 1C E8 00 C9 74 2D E8  // ..A..... ....t-.
    4B60: A5 00 E8 2C 00 66 BB 20 1C 00 1C E8 24 D0 BE 00  // ...,.f. ....$...
    4B70: 1C E8 27 D0 66 C1 E8 10 8B D8 32 C0 F6 C7 80 74  // ..'.f.....2....t
    4B80: 02 B0 40 E8 30 C9 B0 4F 32 E4 EB 04 B0 4F B4 03  // ..@.0..O2....O..
    4B90: C3 56 06 33 C0 8E C0 BE 20 1C E8 1F D0 8B C8 66  // .V.3.... ......f
    4BA0: C1 E8 10 8B D0 C1 E9 03 26 89 0E 4A 04 C1 EA 04  // ........&..J....
    4BB0: FE CA 26 88 16 84 04 26 C6 06 51 04 00 26 C6 06  // ..&....&..Q..&..
    4BC0: 50 04 00 26 C6 06 49 04 62 26 C7 06 4C 04 00 A0  // P..&..I.b&..L...
    4BD0: 26 C6 06 85 04 10 26 C7 06 0C 01 A7 62 8C C8 26  // &.....&.....b..&
    4BE0: A3 0E 01 07 5E C3 01 0F 00 0A 00 00 00 00 00 40  // ....^..........@
    4BF0: 05 0F FF 00 01 02 03 04 05 06 07 08 09 0A 0B 0C  // ................
    4C00: 0D 0E 0F 01 00 0F 00 FC BA C4 03 B8 00 01 EF B9  // ................
    4C10: 04 00 B4 01 BE 7E 4B AC 86 E0 EF 8A E0 FE C4 E2  // .....~K.........
    4C20: F6 B8 00 03 EF B9 09 00 BA CE 03 32 E4 BE 82 4B  // ...........2...K
    4C30: 8A C4 EE AC 42 EE 4A FE C4 E2 F5 BA DA 03 EC B9  // ....B.J.........
    4C40: 14 00 BA C0 03 32 E4 BE 8B 4B 8A C4 EE AC EE FE  // .....2...K......
    4C50: C4 E2 F7 C3 BE 00 1C E8 41 CF 66 C1 E8 10 8B D8  // ........A.f.....
    4C60: E8 11 CF 75 05 E8 FD CE 75 04 B8 4F 00 C3 B8 4F  // ...u....u..O...O
    4C70: 03 C3 E8 FF CE 74 53 BE 00 1C 80 FB 00 74 18 80  // .....tS......t..
    4C80: FB 01 75 05 E8 3D CF EB 1D 80 FB 02 75 10 8B C1  // ..u..=......u...
    4C90: E8 F0 CE D3 E8 8B C8 E8 E0 C9 74 2E EB 08 80 FB  // ..........t.....
    4CA0: 03 75 24 E8 94 CE E8 DA CE 8B D8 D3 E3 50 33 C0  // .u$..........P3.
    4CB0: BA 00 03 3B DA 77 05 BA FF FF EB 04 F7 F3 8B D0  // ...;.w..........
    4CC0: 58 8B C8 B8 4F 00 C3 32 C0 C3 B0 4F B4 03 C3 00  // X...O..2...O....
    4CD0: 0A DB 75 07 8A EF E8 AE CA EB 05 E8 93 CA 8A F8  // ..u.............
    4CE0: B0 4F 32 E4 C3 00 E8 8B CE 74 2C BE 00 1C E8 AA  // .O2......t,.....
    4CF0: CE 66 C1 E8 10 F6 C4 40 75 1D 0A FF 75 05 E8 1E  // .f.....@u...u...
    4D00: 00 EB 0F 80 FF 01 75 14 BB 13 00 E8 EB E5 D1 E8  // ......u.........
    4D10: 8B D0 B0 4F 32 E4 C3 B0 4F B4 03 C3 32 C0 C3 52  // ...O2...O...2..R
    4D20: 53 66 50 81 E2 FF 02 D1 E2 8B C2 40 66 C1 E0 10  // SfP........@f...
    4D30: 8B C2 BB 13 00 E8 1C E5 BB 12 00 E8 16 E5 66 58  // ..............fX
    4D40: 5B 5A C3 9C 1E 06 66 50 66 51 66 52 66 53 66 55  // [Z....fPfQfRfSfU
    4D50: 66 56 66 57 0E 1F E8 34 E6 E8 8A FF E8 53 E6 8B  // fVfW...4.....S..
    4D60: EC 89 56 10 89 46 18 66 5F 66 5E 66 5D 66 5B 66  // ..V..F.f_f^f]f[f
    4D70: 5A 66 59 66 58 07 1F 9D CB 0E 07 BF AA 90 2E 8B  // ZfYfX...........
    4D80: 0E A8 90 B8 4F 00 C3 00 0A DB 75 06 B7 04 B3 10  // ....O.....u.....
    4D90: EB 26 80 FB 01 75 14 E8 85 C9 75 21 53 B1 01 0A  // .&...u....u!S...
    4DA0: FF 74 02 B1 00 E8 9A C8 5B EB 0D 80 FB 02 75 0D  // .t......[.....u.
    4DB0: E8 B2 C9 8A F8 C0 E7 02 B0 4F 32 E4 C3 B8 4F 03  // .........O2...O.
    4DC0: C3 00 80 E3 01 0A DB 75 05 BB 02 01 EB 0E E8 4E  // .......u.......N
    4DD0: C9 75 0E 33 C0 53 E8 35 B8 5B 74 05 B0 4F 32 E4  // .u.3.S.5.[t..O2.
    4DE0: C3 B0 4F B4 03 C3 80 FC 1D 72 03 CD 42 C3 1E 06  // ..O......r..B...
    4DF0: 66 50 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F  // fPfQfRfSfUfVfW..
    4E00: 50 0F B6 C4 D1 E0 8B F0 58 2E FF 94 C8 4D 66 5F  // P.......X....Mf_
    4E10: 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F C3 0E  // f^f]f[fZfYfX....
    4E20: 1F 50 0F B6 C4 D1 E0 8B F0 58 2E FF 94 C8 4D C3  // .P.......X....M.
    4E30: 02 4E 12 87 2B 87 48 87 F5 4E 4B 7E 7D 7E F0 7E  // .N..+.H..NK~}~.~
    4E40: 73 7F 01 81 05 81 0E 84 DF 84 62 85 C9 85 64 87  // s.........b...d.
    4E50: C6 87 6F 8A 0E 51 B6 8E B6 4D B6 4D B6 4D B6 4D  // ..o..Q...M.M.M.M
    4E60: B6 4D B6 4D 86 8F 89 73 DD 74 2E 8E 1E 0E 03 80  // .M.M...s.t......
    4E70: 26 87 04 F3 50 8A E0 80 E4 7F E8 C4 01 3B D3 75  // &...P........;.u
    4E80: 02 58 C3 BA CC 03 EC B2 B4 B1 30 26 F6 47 09 01  // .X........0&.G..
    4E90: 74 0C B2 D4 B1 20 A8 01 75 49 B5 09 EB 06 A8 01  // t.... ..uI......
    4EA0: 74 41 B5 0B 53 E8 6A 41 0A FF 5B 75 0B 80 26 88  // tA..S.jA..[u..&.
    4EB0: 04 F0 08 2E 88 04 EB 2B 58 80 0E 87 04 08 80 26  // .......+X......&
    4EC0: 10 04 CF 08 0E 10 04 89 16 63 04 C7 06 85 04 08  // .........c......
    4ED0: 00 C6 06 84 04 18 C7 06 0C 01 94 5A 8C 0E 0E 01  // ...........Z....
    4EE0: CD 42 C3 80 26 10 04 CF 08 0E 10 04 58 53 50 0E  // .B..&.......XSP.
    4EF0: 1F 33 C9 8A C8 E8 27 C8 74 06 E8 98 C6 E8 E1 BF  // .3....'.t.......
    4F00: B2 08 BE 40 1C E8 2D CA BE 40 1C E8 4F C5 58 5B  // ...@..-..@..O.X[
    4F10: 0F 84 6E FF 2E 8E 1E 0E 03 0E 07 E8 13 29 0E 1F  // ..n..........)..
    4F20: 53 66 BB 40 1C 00 1C E8 68 CC BE 00 1C B0 20 E8  // Sf.@....h..... .
    4F30: 84 C5 5B 2E 8E 1E 0E 03 0E 07 E8 1C 2E E8 24 00  // ..[...........$.
    4F40: E8 28 3D E8 D1 01 E8 8E 01 E8 AE 3E 0E 1F BE 00  // .(=........>....
    4F50: 1C B0 10 E8 60 C5 E8 F7 2D E8 EF 2D C3 8B EC C6  // ....`...-..-....
    4F60: 46 1B 00 C3 E8 2F 00 E8 0A 00 E8 BD 00 E8 52 00  // F..../........R.
    4F70: E8 5C 0A C3 53 83 C3 0A 8B 16 63 04 B9 19 00 B8  // .\..S.....c.....
    4F80: 11 30 EF 32 C0 26 8A 27 EF 43 FE C0 E2 F7 5B 80  // .0.2.&.'.C....[.
    4F90: C2 06 32 C0 EE C3 53 BA C4 03 83 C3 05 B9 04 00  // ..2...S.........
    4FA0: B0 01 26 8A 27 3C 01 75 03 80 CC 20 EF 43 FE C0  // ..&.'<.u... .C..
    4FB0: E2 F0 5B 26 8A 47 09 BA C2 03 EE B2 C4 B8 00 03  // ..[&.G..........
    4FC0: EF C3 8B F3 83 C6 23 BA DA 03 26 F6 47 09 01 75  // ......#...&.G..u
    4FD0: 02 B2 BA F6 06 89 04 08 74 1D 83 C6 10 EC B9 04  // ........t.......
    4FE0: 00 B4 10 B2 C0 80 FC 11 74 07 8A C4 EE 26 8A 04  // ........t....&..
    4FF0: EE 46 FE C4 E2 EF C3 53 EC 8B DE B9 14 00 32 E4  // .F.....S......2.
    5000: B2 C0 8A C4 EE FE C4 26 8A 07 EE 43 E2 F4 8A C4  // .......&...C....
    5010: EE 32 C0 EE 1E 06 E8 49 2D 0B ED 74 09 1F 1E B9  // .2.....I-..t....
    5020: 10 00 F3 A4 46 A4 07 1F 5B C3 53 83 C3 37 B9 09  // ....F...[.S..7..
    5030: 00 32 C0 BA CE 03 26 8A 27 EF 43 FE C0 E2 F7 5B  // .2....&.'.C....[
    5040: C3 BB CC 52 0E 07 8B D3 0A E4 7D 01 C3 E8 01 00  // ...R......}.....
    5050: C3 33 F6 80 FC 03 7F 3C 4A F6 06 89 04 10 75 20  // .3.....<J.....u 
    5060: A0 88 04 24 0F 3C 02 7E 24 3C 08 74 20 3C 06 74  // ...$.<.~$<.t <.t
    5070: 1C 3C 07 74 18 B0 40 F6 E4 03 D8 81 C3 00 04 C3  // .<.t..@.........
    5080: B0 40 D0 EC F6 E4 03 D8 81 C3 80 04 C3 B0 40 F6  // .@............@.
    5090: E4 03 D8 C3 80 FC 07 75 11 F6 06 89 04 10 75 05  // .......u......u.
    50A0: 81 C3 00 01 C3 81 C3 00 05 C3 BF 4E 50 BE 6F 50  // ...........NP.oP
    50B0: 33 C9 E8 4E 00 C3 04 80 00 05 80 00 06 C0 00 0D  // 3..N............
    50C0: 80 02 0E C0 02 0F 80 03 10 C0 03 11 40 05 12 80  // ............@...
    50D0: 05 13 C0 05 62 40 01 53 8A 1E 49 04 80 FB 07 7F  // ....b@.S..I.....
    50E0: 10 32 FF D1 E3 2E 8B 87 8B 50 A2 65 04 88 26 66  // .2.......P.e..&f
    50F0: 04 5B C3 2C 30 28 30 2D 30 29 30 2A 30 2E 30 1E  // .[.,0(0-0)0*0.0.
    5100: 3F 29 30 2E 38 25 75 07 2E 03 5D 01 33 F6 C3 83  // ?)0.8%u...].3...
    5110: C7 03 3B FE 75 ED C3 1E 06 2E 8E 1E 0E 03 F6 06  // ..;.u...........
    5120: 87 04 80 75 49 83 3E 4C 04 00 74 42 A0 49 04 B9  // ...uI.>L..tB.I..
    5130: 00 20 2E 8B 3E 14 03 26 F6 47 33 01 75 0E 26 F6  // . ..>..&.G3.u.&.
    5140: 47 09 01 75 1B 2E 8B 3E 12 03 EB 14 3C 06 7E 0B  // G..u...>....<.~.
    5150: 2E 8B 3E 10 03 26 8A 67 37 B5 40 66 33 C0 EB 06  // ..>..&.g7.@f3...
    5160: 66 B8 20 07 20 07 8E C7 66 33 FF F3 66 AB 80 26  // f. . ...f3..f..&
    5170: 87 04 7F 07 1F C3 2E 8E 1E 0E 03 80 FB 10 75 03  // ..............u.
    5180: E9 7A 01 80 FB 20 75 03 E9 9B 01 80 FB 32 75 1F  // .z... u......2u.
    5190: BA CC 03 0A C0 75 09 EC 0C 02 B2 C2 EE E9 F3 00  // .....u..........
    51A0: FE C8 0F 85 F3 00 EC 24 FD B2 C2 EE E9 E4 00 80  // .......$........
    51B0: FB 35 75 28 3C 80 75 08 80 0E 89 04 40 E9 D3 00  // .5u(<.u.....@...
    51C0: F6 06 89 04 40 0F 84 D0 00 0A C0 0F 84 CA 00 FE  // ....@...........
    51D0: C8 75 06 E8 98 07 E9 BA 00 E9 BD 00 80 FB 30 74  // .u............0t
    51E0: 03 E9 96 00 50 E8 2A 3E 8A EF BA CC 03 EC 8A C8  // ....P.*>........
    51F0: 58 0A C0 75 30 B7 08 F6 C1 01 75 12 0A ED 75 0B  // X..u0.....u...u.
    5200: A0 10 04 24 30 3C 30 75 10 B7 02 E9 8B 00 A0 10  // ...$0<0u........
    5210: 04 24 30 3C 30 75 02 B7 02 80 26 89 04 6F 80 0E  // .$0<0u....&..o..
    5220: 89 04 80 EB 36 3C 01 75 41 80 26 89 04 6F B7 09  // ....6<.uA.&..o..
    5230: F6 C1 01 75 15 B7 0B A0 10 04 24 30 3C 30 74 1B  // ...u......$0<0t.
    5240: B7 09 0A ED 74 15 B7 05 EB 11 A0 10 04 24 30 3C  // ....t........$0<
    5250: 30 75 08 B7 0B 0A ED 74 02 B7 03 8A 1E 88 04 80  // 0u.....t........
    5260: E3 F0 0A DF 88 1E 88 04 EB 29 3C 02 75 2B 80 26  // .........)<.u+.&
    5270: 89 04 6F 80 0E 89 04 10 EB B4 80 FB 31 75 1B 0A  // ..o.........1u..
    5280: C0 74 0B 3C 01 75 0C 80 0E 89 04 08 EB 05 80 26  // .t.<.u.........&
    5290: 89 04 F7 8B EC C6 46 1A 12 C3 80 FB 33 75 16 3C  // ......F.....3u.<
    52A0: 00 74 0B 3C 01 75 EC 80 26 89 04 FD EB E5 80 0E  // .t.<.u..&.......
    52B0: 89 04 02 EB DE 80 FB 34 75 17 3C 00 75 07 80 26  // .......4u.<.u..&
    52C0: 87 04 FE EB CE 3C 01 75 07 80 0E 87 04 01 EB C3  // .....<.u........
    52D0: C3 80 FB 36 75 26 BB 20 FF 3C 01 74 09 BB 00 DF  // ...6u&. .<.t....
    52E0: 3C 00 74 02 EB AD E8 02 00 EB A8 9C FA BA C4 03  // <.t.............
    52F0: B0 01 EE 42 EC 22 C7 0A C3 EE 9D C3 C3 B3 03 B7  // ...B."..........
    5300: 00 BA CC 03 EC A8 01 75 02 B7 01 A0 88 04 8A E0  // .......u........
    5310: B1 04 D2 EC 25 0F 0F 8B C8 8B EC 89 5E 0E 89 4E  // ....%.......^..N
    5320: 16 C6 46 1A 12 C3 9C FA C7 06 14 00 76 78 8C 0E  // ..F.........vx..
    5330: 16 00 9D C3 28 18 08 00 08 09 03 00 02 63 2D 27  // ....(........c-'
    5340: 28 90 2B A0 BF 1F 00 C7 06 07 00 00 00 00 9C 8E  // (.+.............
    5350: 8F 14 1F 96 B9 A3 FF 00 01 02 03 04 05 06 07 10  // ................
    5360: 11 12 13 14 15 16 17 08 00 0F 00 00 00 00 00 00  // ................
    5370: 10 0E 00 FF 50 18 08 00 10 01 03 00 02 63 5F 4F  // ....P........c_O
    5380: 50 82 55 81 BF 1F 00 C7 06 07 00 00 00 00 9C 8E  // P.U.............
    5390: 8F 28 1F 96 B9 A3 FF 00 01 02 03 04 05 06 07 10  // .(..............
    53A0: 11 12 13 14 15 16 17 08 00 0F 00 00 00 00 00 00  // ................
    53B0: 10 0E 00 FF 28 18 08 00 40 09 03 00 02 63 2D 27  // ....(...@....c-'
    53C0: 28 90 2B 80 BF 1F 00 C1 00 00 00 00 00 00 9C 8E  // (.+.............
    53D0: 8F 14 00 96 B9 A2 FF 00 13 15 17 02 04 06 07 10  // ................
    53E0: 11 12 13 14 15 16 17 01 00 03 00 00 00 00 00 00  // ................
    53F0: 30 0F 00 FF 50 18 08 00 40 01 01 00 06 63 5F 4F  // 0...P...@....c_O
    5400: 50 82 54 80 BF 1F 00 C1 00 00 00 00 00 00 9C 8E  // P.T.............
    5410: 8F 28 00 96 B9 C2 FF 00 17 17 17 17 17 17 17 17  // .(..............
    5420: 17 17 17 17 17 17 17 01 00 01 00 00 00 00 00 00  // ................
    5430: 00 0D 00 FF 50 18 0E 00 10 00 03 00 03 A6 5F 4F  // ....P........._O
    5440: 50 82 55 81 BF 1F 00 4D 0B 0C 00 00 00 00 83 85  // P.U....M........
    5450: 5D 28 0D 63 BA A3 FF 00 08 08 08 08 08 08 08 10  // ](.c............
    5460: 18 18 18 18 18 18 18 0E 00 0F 08 00 00 00 00 00  // ................
    5470: 10 0A 00 FF 50 1D 10 00 A0 01 0F 00 0A E3 5F 4F  // ....P........._O
    5480: 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00 EA 8C  // P.T..>.@........
    5490: DF 50 00 E7 04 E3 FF 00 01 02 03 04 05 06 07 08  // .P..............
    54A0: 09 0A 0B 0C 0D 0E 0F 01 00 0F 00 10 00 00 00 00  // ................
    54B0: 40 05 0F FF 00 05 11 1C 08 0B 14 28 0E 18 2D 32  // @..........(..-2
    54C0: 20 24 38 3F 00 05 08 0B 0E 11 14 18 1C 20 24 28  //  $8?......... $(
    54D0: 2D 32 38 3F 07 0C 10 15 1A 18 16 15 13 1C 25 2F  // -28?..........%/
    54E0: 38 33 2E 2A 25 27 29 2A 2C 23 19 10 23 25 27 2A  // 83.*%')*,#..#%'*
    54F0: 2C 2B 2A 29 29 2D 32 37 3B 39 37 34 32 33 34 35  // ,+*))-27;9742345
    5500: 35 31 2C 27 2F 30 32 33 34 34 33 33 32 35 38 3A  // 51,'/0234433258:
    5510: 3D 3C 3A 39 38 38 39 39 3A 37 34 31 03 05 07 09  // =<:98899:741....
    5520: 0B 0B 0A 09 08 0D 11 15 19 17 15 13 11 11 12 13  // ................
    5530: 14 0F 0B 07 10 10 12 13 14 13 13 13 12 14 16 18  // ................
    5540: 1A 19 18 17 16 17 17 17 18 15 14 11 15 15 16 17  // ................
    5550: 17 17 17 17 16 18 19 1A 1B 1B 1A 19 19 19 19 19  // ................
    5560: 1A 18 17 16 02 03 04 05 07 06 06 05 05 07 0A 0C  // ................
    5570: 0E 0D 0C 0B 09 0A 0A 0B 0B 09 06 04 09 09 0A 0B  // ................
    5580: 0B 0B 0B 0B 0A 0C 0D 0E 0F 0F 0E 0D 0D 0D 0D 0D  // ................
    5590: 0E 0C 0B 0A 0C 0C 0C 0D 0D 0D 0D 0D 0C 0D 0E 0F  // ................
    55A0: 0F 0F 0F 0E 0E 0E 0E 0E 0E 0E 0D 0C 00 00 00 00  // ................
    55B0: 00 00 00 00 28 18 08 00 20 09 0F 00 06 63 2D 27  // ....(... ....c-'
    55C0: 28 90 2B 80 BF 1F 00 C0 00 00 00 00 00 00 9C 8E  // (.+.............
    55D0: 8F 14 00 96 B9 E3 FF 00 01 02 03 04 05 06 07 10  // ................
    55E0: 11 12 13 14 15 16 17 01 00 0F 00 00 00 00 00 00  // ................
    55F0: 00 05 0F FF 50 18 08 00 40 01 0F 00 06 63 5F 4F  // ....P...@....c_O
    5600: 50 82 54 80 BF 1F 00 C0 00 00 00 00 00 00 9C 8E  // P.T.............
    5610: 8F 28 00 96 B9 E3 FF 00 01 02 03 04 05 06 07 10  // .(..............
    5620: 11 12 13 14 15 16 17 01 00 0F 00 00 00 00 00 00  // ................
    5630: 00 05 0F FF 00 05 11 1C 08 0B 25 28 02 07 1B 20  // ..........%(... 
    5640: 0F 14 28 2C 0C 11 25 2A 14 1E 32 36 0F 13 27 2C  // ..(,..%*..26..',
    5650: 1B 20 34 39 06 0B 1F 24 13 18 2C 30 09 0D 21 26  // . 49...$..,0..!&
    5660: 15 1A 2E 33 13 17 2B 30 1F 24 38 3D 0E 18 2D 32  // ...3..+0.$8=..-2
    5670: 20 24 38 3F 00 05 11 1C 08 0B 14 18 00 05 11 1C  //  $8?............
    5680: 08 0B 14 18 0E 18 2D 32 20 24 38 3F 0E 18 2D 32  // ......-2 $8?..-2
    5690: 20 24 38 3F 00 05 11 1C 08 0B 14 18 00 05 11 1C  //  $8?............
    56A0: 08 0B 14 18 0E 18 2D 32 20 24 38 3F 0E 18 2D 32  // ......-2 $8?..-2
    56B0: 20 24 38 3F 50 18 0E 00 80 01 0F 00 06 A2 5F 4F  //  $8?P........._O
    56C0: 50 82 54 80 BF 1F 00 40 00 00 00 00 00 00 83 85  // P.T....@........
    56D0: 5D 28 0F 63 BA E3 FF 00 08 00 00 18 18 00 00 00  // ](.c............
    56E0: 08 00 00 00 18 00 00 0B 00 05 00 00 00 00 00 00  // ................
    56F0: 00 05 05 FF 50 18 0E 00 80 01 0F 00 06 A3 5F 4F  // ....P........._O
    5700: 50 82 54 80 BF 1F 00 40 00 00 00 00 00 00 83 85  // P.T....@........
    5710: 5D 28 0F 63 BA E3 FF 00 01 02 03 04 05 14 07 38  // ](.c...........8
    5720: 39 3A 3B 3C 3D 3E 3F 01 00 0F 00 00 00 00 00 00  // 9:;<=>?.........
    5730: 00 05 0F FF 28 18 0E 00 08 09 03 00 02 A3 2D 27  // ....(.........-'
    5740: 28 90 2B A0 BF 1F 00 4D 0B 0C 00 00 00 00 83 85  // (.+....M........
    5750: 5D 14 1F 63 BA A3 FF 00 01 02 03 04 05 14 07 38  // ]..c...........8
    5760: 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00 00 00  // 9:;<=>?.........
    5770: 10 0E 00 FF 50 18 0E 00 10 01 03 00 02 A3 5F 4F  // ....P........._O
    5780: 50 82 55 81 BF 1F 00 4D 0B 0C 00 00 00 00 83 85  // P.U....M........
    5790: 5D 28 1F 63 BA A3 FF 00 01 02 03 04 05 14 07 38  // ](.c...........8
    57A0: 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00 00 00  // 9:;<=>?.........
    57B0: 10 0E 00 FF 28 18 10 00 08 08 03 00 02 67 2D 27  // ....(........g-'
    57C0: 28 90 2B A0 BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E  // (.+....O........
    57D0: 8F 14 1F 96 B9 A3 FF 00 01 02 03 04 05 14 07 38  // ...............8
    57E0: 39 3A 3B 3C 3D 3E 3F 0C 00 0F 08 00 00 00 00 00  // 9:;<=>?.........
    57F0: 10 0E 00 FF 50 18 10 00 10 00 03 00 02 67 5F 4F  // ....P........g_O
    5800: 50 82 55 81 BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E  // P.U....O........
    5810: 8F 28 1F 96 B9 A3 FF 00 01 02 03 04 05 14 07 38  // .(.............8
    5820: 39 3A 3B 3C 3D 3E 3F 0C 00 0F 08 00 00 00 00 00  // 9:;<=>?.........
    5830: 10 0E 00 FF 50 18 10 00 10 00 03 00 02 66 5F 4F  // ....P........f_O
    5840: 50 82 55 81 BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E  // P.U....O........
    5850: 8F 28 0F 96 B9 A3 FF 00 08 08 08 08 08 08 08 10  // .(..............
    5860: 18 18 18 18 18 18 18 0E 00 0F 08 00 00 00 00 00  // ................
    5870: 10 0A 00 FF 50 1D 10 00 A0 01 0F 00 06 E3 5F 4F  // ....P........._O
    5880: 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00 EA 8C  // P.T..>.@........
    5890: DF 28 00 E7 04 C3 FF 00 3F 3F 3F 3F 3F 3F 3F 3F  // .(......????????
    58A0: 3F 3F 3F 3F 3F 3F 3F 01 00 0F 00 00 00 00 00 00  // ???????.........
    58B0: 00 05 01 FF 50 1D 10 00 A0 01 0F 00 06 E3 5F 4F  // ....P........._O
    58C0: 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00 EA 8C  // P.T..>.@........
    58D0: DF 28 00 E7 04 E3 FF 00 01 02 03 04 05 14 07 38  // .(.............8
    58E0: 39 3A 3B 3C 3D 3E 3F 01 00 0F 00 00 00 00 00 00  // 9:;<=>?.........
    58F0: 00 05 0F FF 28 18 08 00 20 01 0F 00 0E 63 5F 4F  // ....(... ....c_O
    5900: 50 82 54 80 BF 1F 00 41 00 00 00 00 00 00 9C 8E  // P.T....A........
    5910: 8F 28 40 96 B9 A3 FF 00 01 02 03 04 05 06 07 08  // .(@.............
    5920: 09 0A 0B 0C 0D 0E 0F 41 00 0F 00 00 00 00 00 00  // .......A........
    5930: 40 05 0F FF CC 52 00 C0 00 00 00 00 00 00 00 00  // @....R..........
    5940: 00 00 00 00 EC 58 00 C0 00 00 00 00 00 00 00 00  // .....X..........
    5950: 00 00 00 00 1A 00 84 90 00 C0 00 00 00 00 00 00  // ................
    5960: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1E E8  // ................
    5970: 10 00 2E 8E 1E 0E 03 E8 F8 36 E8 CF 36 E8 70 1A  // .........6..6.p.
    5980: 1F C3 2E 8E 1E 0E 03 C7 06 87 04 60 F9 C6 06 8A  // ...........`....
    5990: 04 0B A0 89 04 0C 11 24 17 A2 89 04 B4 01 E8 6D  // .......$.......m
    59A0: 1E A0 89 04 80 26 10 04 CF 80 0E 10 04 20 C7 06  // .....&....... ..
    59B0: 63 04 D4 03 0E 1F E8 97 B5 F7 C1 02 00 75 03 E8  // c............u..
    59C0: 1F B5 C3 1E 2E 8E 1E 0E 03 0E 07 EB 00 1F C3 F6  // ................
    59D0: 06 89 04 08 74 01 C3 53 BA C8 03 EC B0 FF B2 C6  // ....t..S........
    59E0: EE B2 C8 80 3E 63 04 B4 75 2F BE 48 5A B9 40 00  // ....>c..u/.HZ.@.
    59F0: 33 DB 9C FA 8A C3 EE 8B FB C1 EF 03 83 E7 03 03  // 3...............
    5A00: FE 2E 8A 05 42 EE 2E 8A 45 04 EE 2E 8A 45 08 EE  // ....B...E....E..
    5A10: FE C3 4A E2 DF 9D E9 85 00 26 8A 47 2B F6 06 89  // ..J......&.G+...
    5A20: 04 06 74 31 B9 F8 00 BF 4C 54 3C 08 74 11 B9 40  // ..t1....LT<.t..@
    5A30: 00 BF CC 55 3C 38 74 07 3C 3F 74 03 BF 0C 56 33  // ...U<8t.<?t...V3
    5A40: DB 9C FA 8A C3 EE 2E 8A 01 42 EE EE EE FE C3 4A  // .........B.....J
    5A50: E2 F1 9D EB 49 3C 08 74 25 3C 38 74 2E 3C 3F 74  // ....I<.t%<8t.<?t
    5A60: 2A B9 08 00 33 DB 51 E8 0B D3 B9 08 00 F7 C3 10  // *...3.Q.........
    5A70: 00 74 03 83 C7 18 E8 67 00 59 E2 EA EB 20 E8 F4  // .t.....g.Y... ..
    5A80: D2 B9 00 01 33 DB E8 57 00 EB 13 B9 40 00 33 DB  // ....3..W....@.3.
    5A90: 51 E8 28 00 8A C3 E8 B7 2F FE C3 59 E2 F2 5B C3  // Q.(...../..Y..[.
    5AA0: 00 2A 00 2A 00 2A 00 2A 15 3F 15 3F 15 3F 15 3F  // .*.*.*.*.?.?.?.?
    5AB0: 00 2A 00 3F 00 2A 00 3F 00 2A 00 3F 8B FB C1 EF  // .*.?.*.?.*.?....
    5AC0: 02 83 E7 0F 2E 8A B5 38 5A 8B FB D1 EF 83 E7 0F  // .......8Z.......
    5AD0: 2E 8A AD 38 5A 8B FB 83 E7 0F 2E 8A 8D 38 5A C3  // ...8Z........8Z.
    5AE0: 9C 8A C3 FA EE 2E 8A 05 42 EE 47 2E 8A 05 EE 47  // ........B.G....G
    5AF0: 2E 8A 05 EE 47 FE C3 4A E2 E7 9D C3 00 00 00 00  // ....G..J........
    5B00: 00 00 00 00 7E 81 A5 81 BD 99 81 7E 7C FE D6 BA  // ....~......~|...
    5B10: C6 FE 7C 00 C6 EE FE FE 7C 38 10 00 10 38 7C FE  // ..|.....|8...8|.
    5B20: 7C 38 10 00 10 38 10 EE EE 10 38 00 38 7C FE FE  // |8...8....8.8|..
    5B30: 6C 10 38 00 00 18 3C 7E 3C 18 00 00 FF E7 C3 81  // l.8...<~<.......
    5B40: C3 E7 FF FF 00 18 3C 66 66 3C 18 00 FF E7 C3 99  // ......<ff<......
    5B50: 99 C3 E7 FF 1E 0E 1E 36 78 CC CC 78 7E C3 C3 7E  // .......6x..x~..~
    5B60: 18 7E 18 18 1E 1A 1E 18 18 70 F0 60 3E 3E 36 36  // .~.......p.`>>66
    5B70: F6 66 1E 0C DB 3C 66 E7 66 3C DB 00 80 C0 F0 F8  // .f...<f.f<......
    5B80: F0 C0 80 00 02 06 1E 3E 1E 06 02 00 18 3C 7E 18  // .......>.....<~.
    5B90: 7E 3C 18 00 66 66 66 66 66 00 66 00 7F DB 7B 3B  // ~<..fffff.f...{;
    5BA0: 1B 1B 1B 00 3C 66 38 6C 6C 38 CC 78 00 00 00 00  // ....<f8ll8.x....
    5BB0: FE FE FE 00 18 3C 7E 18 7E 3C 18 7E 18 3C 7E 18  // .....<~.~<.~.<~.
    5BC0: 18 18 18 00 18 18 18 18 7E 3C 18 00 00 18 1C FE  // ........~<......
    5BD0: 1C 18 00 00 00 30 70 FE 70 30 00 00 00 00 C0 C0  // .....0p.p0......
    5BE0: C0 FE 00 00 00 24 66 FF 66 24 00 00 00 10 38 7C  // .....$f.f$....8|
    5BF0: 7C FE 00 00 00 FE 7C 7C 38 10 00 00 00 00 00 00  // |.....||8.......
    5C00: 00 00 00 00 18 3C 3C 18 18 00 18 00 6C 6C 6C 00  // .....<<.....lll.
    5C10: 00 00 00 00 6C 6C FE 6C FE 6C 6C 00 18 7E C0 7C  // ....ll.l.ll..~.|
    5C20: 06 FC 18 00 00 C6 0C 18 30 60 C6 00 38 6C 38 76  // ........0`..8l8v
    5C30: CC CC 76 00 18 18 30 00 00 00 00 00 18 30 60 60  // ..v...0......0``
    5C40: 60 30 18 00 60 30 18 18 18 30 60 00 00 EE 7C FE  // `0..`0...0`...|.
    5C50: 7C EE 00 00 00 18 18 7E 18 18 00 00 00 00 00 00  // |......~........
    5C60: 18 18 30 00 00 00 00 FE 00 00 00 00 00 00 00 00  // ..0.............
    5C70: 00 38 38 00 06 0C 18 30 60 C0 80 00 7C C6 CE DE  // .88....0`...|...
    5C80: F6 E6 7C 00 18 78 18 18 18 18 7E 00 7C C6 0C 18  // ..|..x....~.|...
    5C90: 30 66 FE 00 7C C6 06 3C 06 C6 7C 00 0C 1C 3C 6C  // 0f..|..<..|...<l
    5CA0: FE 0C 0C 00 FE C0 FC 06 06 C6 7C 00 7C C6 C0 FC  // ..........|.|...
    5CB0: C6 C6 7C 00 FE C6 06 0C 18 18 18 00 7C C6 C6 7C  // ..|.........|..|
    5CC0: C6 C6 7C 00 7C C6 C6 7E 06 C6 7C 00 00 1C 1C 00  // ..|.|..~..|.....
    5CD0: 00 1C 1C 00 00 18 18 00 00 18 18 30 0C 18 30 60  // ...........0..0`
    5CE0: 30 18 0C 00 00 00 FE 00 00 FE 00 00 60 30 18 0C  // 0...........`0..
    5CF0: 18 30 60 00 7C C6 06 0C 18 00 18 00 7C C6 C6 DE  // .0`.|.......|...
    5D00: DC C0 7E 00 38 6C C6 C6 FE C6 C6 00 FC 66 66 7C  // ..~.8l.......ff|
    5D10: 66 66 FC 00 3C 66 C0 C0 C0 66 3C 00 F8 6C 66 66  // ff..<f...f<..lff
    5D20: 66 6C F8 00 FE C2 C0 F8 C0 C2 FE 00 FE 62 60 7C  // fl...........b`|
    5D30: 60 60 F0 00 7C C6 C0 C0 DE C6 7C 00 C6 C6 C6 FE  // ``..|.....|.....
    5D40: C6 C6 C6 00 3C 18 18 18 18 18 3C 00 3C 18 18 18  // ....<.....<.<...
    5D50: D8 D8 70 00 C6 CC D8 F0 D8 CC C6 00 F0 60 60 60  // ..p..........```
    5D60: 60 62 FE 00 C6 EE FE D6 D6 C6 C6 00 C6 E6 E6 F6  // `b..............
    5D70: DE CE C6 00 7C C6 C6 C6 C6 C6 7C 00 FC 66 66 7C  // ....|.....|..ff|
    5D80: 60 60 F0 00 7C C6 C6 C6 C6 D6 7C 06 FC C6 C6 FC  // ``..|.....|.....
    5D90: D8 CC C6 00 7C C6 C0 7C 06 C6 7C 00 7E 5A 18 18  // ....|..|..|.~Z..
    5DA0: 18 18 3C 00 C6 C6 C6 C6 C6 C6 7C 00 C6 C6 C6 C6  // ..<.......|.....
    5DB0: 6C 38 10 00 C6 C6 D6 D6 FE EE C6 00 C6 6C 38 38  // l8...........l88
    5DC0: 38 6C C6 00 66 66 66 3C 18 18 3C 00 FE 86 0C 18  // 8l..fff<..<.....
    5DD0: 30 62 FE 00 7C 60 60 60 60 60 7C 00 C0 60 30 18  // 0b..|`````|..`0.
    5DE0: 0C 06 02 00 7C 0C 0C 0C 0C 0C 7C 00 10 38 6C C6  // ....|.....|..8l.
    5DF0: 00 00 00 00 00 00 00 00 00 00 00 FF 30 30 18 00  // ............00..
    5E00: 00 00 00 00 00 00 78 0C 7C CC 7E 00 E0 60 7C 66  // ......x.|.~..`|f
    5E10: 66 66 FC 00 00 00 7C C6 C0 C6 7C 00 1C 0C 7C CC  // ff....|...|...|.
    5E20: CC CC 7E 00 00 00 7C C6 FE C0 7C 00 1C 36 30 FC  // ..~...|...|..60.
    5E30: 30 30 78 00 00 00 76 CE C6 7E 06 7C E0 60 7C 66  // 00x...v..~.|.`|f
    5E40: 66 66 E6 00 18 00 38 18 18 18 3C 00 0C 00 1C 0C  // ff....8...<.....
    5E50: 0C 0C CC 78 E0 60 66 6C 78 6C E6 00 18 18 18 18  // ...x.`flxl......
    5E60: 18 18 1C 00 00 00 6C FE D6 D6 C6 00 00 00 DC 66  // ......l........f
    5E70: 66 66 66 00 00 00 7C C6 C6 C6 7C 00 00 00 DC 66  // fff...|...|....f
    5E80: 66 7C 60 F0 00 00 76 CC CC 7C 0C 1E 00 00 DC 66  // f|`...v..|.....f
    5E90: 60 60 F0 00 00 00 7C C0 7C 06 7C 00 30 30 FC 30  // ``....|.|.|.00.0
    5EA0: 30 36 1C 00 00 00 CC CC CC CC 76 00 00 00 C6 C6  // 06........v.....
    5EB0: 6C 38 10 00 00 00 C6 C6 D6 FE 6C 00 00 00 C6 6C  // l8........l....l
    5EC0: 38 6C C6 00 00 00 C6 C6 CE 76 06 7C 00 00 FC 98  // 8l.......v.|....
    5ED0: 30 64 FC 00 0E 18 18 70 18 18 0E 00 18 18 18 00  // 0d.....p........
    5EE0: 18 18 18 00 70 18 18 0E 18 18 70 00 76 DC 00 00  // ....p.....p.v...
    5EF0: 00 00 00 00 00 10 38 38 6C 6C FE 00 3C 66 C0 66  // ......88ll..<f.f
    5F00: 3C 18 CC 78 00 C6 00 C6 C6 CE 76 00 0E 00 7C C6  // <..x......v...|.
    5F10: FE C0 7C 00 7C C6 78 0C 7C CC 7E 00 C6 00 78 0C  // ..|.|.x.|.~...x.
    5F20: 7C CC 7E 00 E0 00 78 0C 7C CC 7E 00 38 38 78 0C  // |.~...x.|.~.88x.
    5F30: 7C CC 7E 00 00 00 7C C0 7C 18 6C 38 7C C6 7C C6  // |.~...|.|.l8|.|.
    5F40: FE C0 7C 00 C6 00 7C C6 FE C0 7C 00 E0 00 7C C6  // ..|...|...|...|.
    5F50: FE C0 7C 00 66 00 38 18 18 18 3C 00 7C C6 38 18  // ..|.f.8...<.|.8.
    5F60: 18 18 3C 00 00 00 38 18 18 18 3C 00 C6 38 6C C6  // ..<...8...<..8l.
    5F70: FE C6 C6 00 38 38 00 7C C6 FE C6 00 0E 00 FE C0  // ....88.|........
    5F80: F8 C0 FE 00 00 00 6C 9A 7E D8 6E 00 7E D8 D8 FE  // ......l.~.n.~...
    5F90: D8 D8 DE 00 7C C6 00 7C C6 C6 7C 00 00 C6 00 7C  // ....|..|..|....|
    5FA0: C6 C6 7C 00 00 E0 00 7C C6 C6 7C 00 7C C6 00 C6  // ..|....|..|.|...
    5FB0: C6 CE 76 00 00 E0 00 C6 C6 CE 76 00 18 00 3C 18  // ..v.......v...<.
    5FC0: 18 18 3C 00 C6 38 6C C6 C6 6C 38 00 C6 00 C6 C6  // ..<..8l..l8.....
    5FD0: C6 C6 7C 00 00 18 7E D8 D8 7E 18 00 38 6C 60 F0  // ..|...~..~..8l`.
    5FE0: 66 F6 6C 00 C3 66 3C 7E 18 3C 18 00 3E 63 38 0E  // f.l..f<~.<..>c8.
    5FF0: 63 3E 00 1C 00 3E 61 3C 86 7C 00 1C 0E 00 78 0C  // c>...>a<.|....x.
    6000: 7C CC 7E 00 1C 00 38 18 18 18 3C 00 00 0E 00 7C  // |.~...8...<....|
    6010: C6 C6 7C 00 00 0E 00 CC CC DC 76 00 00 FC 00 BC  // ..|.......v.....
    6020: 66 66 E6 00 FE 00 C6 E6 F6 CE C6 00 3E 00 3E 60  // ff..........>.>`
    6030: 67 63 3D 00 3E 00 76 CE C6 7E 06 7C 18 00 18 30  // gc=.>.v..~.|...0
    6040: 60 66 3C 00 00 00 00 7C 60 60 00 00 00 00 00 7C  // `f<....|``.....|
    6050: 0C 0C 00 00 C0 CC D8 30 7C 36 0C 3E C0 CC D8 30  // .......0|6.>...0
    6060: 6C 3C 7E 0C 18 00 18 18 3C 3C 18 00 00 36 6C D8  // l<~.....<<...6l.
    6070: 6C 36 00 00 00 D8 6C 36 6C D8 00 00 22 88 22 88  // l6....l6l...".".
    6080: 22 88 22 88 55 AA 55 AA 55 AA 55 AA DD 77 DD 77  // ".".U.U.U.U..w.w
    6090: DD 77 DD 77 18 18 18 18 18 18 18 18 18 18 18 18  // .w.w............
    60A0: F8 18 18 18 18 18 F8 18 F8 18 18 18 36 36 36 36  // ............6666
    60B0: F6 36 36 36 00 00 00 00 FE 36 36 36 00 00 F8 18  // .666.....666....
    60C0: F8 18 18 18 36 36 F6 06 F6 36 36 36 36 36 36 36  // ....66...6666666
    60D0: 36 36 36 36 00 00 FE 06 F6 36 36 36 36 36 F6 06  // 6666.....66666..
    60E0: FE 00 00 00 36 36 36 36 FE 00 00 00 18 18 F8 18  // ....6666........
    60F0: F8 00 00 00 00 00 00 00 F8 18 18 18 18 18 18 18  // ................
    6100: 1F 00 00 00 18 18 18 18 FF 00 00 00 00 00 00 00  // ................
    6110: FF 18 18 18 18 18 18 18 1F 18 18 18 00 00 00 00  // ................
    6120: FF 00 00 00 18 18 18 18 FF 18 18 18 18 18 1F 18  // ................
    6130: 1F 18 18 18 36 36 36 36 37 36 36 36 36 36 37 30  // ....666676666670
    6140: 3F 00 00 00 00 00 3F 30 37 36 36 36 36 36 F7 00  // ?.....?0766666..
    6150: FF 00 00 00 00 00 FF 00 F7 36 36 36 36 36 37 30  // .........6666670
    6160: 37 36 36 36 00 00 FF 00 FF 00 00 00 36 36 F7 00  // 7666........66..
    6170: F7 36 36 36 18 18 FF 00 FF 00 00 00 36 36 36 36  // .666........6666
    6180: FF 00 00 00 00 00 FF 00 FF 18 18 18 00 00 00 00  // ................
    6190: FF 36 36 36 36 36 36 36 3F 00 00 00 18 18 1F 18  // .6666666?.......
    61A0: 1F 00 00 00 00 00 1F 18 1F 18 18 18 00 00 00 00  // ................
    61B0: 3F 36 36 36 36 36 36 36 FF 36 36 36 18 18 FF 18  // ?6666666.666....
    61C0: FF 18 18 18 18 18 18 18 F8 00 00 00 00 00 00 00  // ................
    61D0: 1F 18 18 18 FF FF FF FF FF FF FF FF 00 00 00 00  // ................
    61E0: FF FF FF FF F0 F0 F0 F0 F0 F0 F0 F0 0F 0F 0F 0F  // ................
    61F0: 0F 0F 0F 0F FF FF FF FF 00 00 00 00 00 00 66 DC  // ..............f.
    6200: D8 DC 66 00 00 78 CC F8 CC C6 CC 00 00 FE 62 60  // ..f..x........b`
    6210: 60 60 E0 00 00 FE 6C 6C 6C 6C 6C 00 FE C6 60 30  // ``....lllll...`0
    6220: 60 C6 FE 00 00 7E D8 CC CC D8 70 00 00 66 66 66  // `....~....p..fff
    6230: 66 7C C0 00 00 76 DC 18 18 18 38 00 FE 38 6C C6  // f|...v....8..8l.
    6240: 6C 38 FE 00 38 6C C6 FE C6 6C 38 00 38 6C C6 C6  // l8..8l...l8.8l..
    6250: 6C 6C EE 00 3E 60 38 66 C6 CC 78 00 00 00 7E DB  // ll..>`8f..x...~.
    6260: DB 7E 00 00 06 7C DE F6 E6 7C C0 00 38 60 C0 F8  // .~...|...|..8`..
    6270: C0 60 38 00 7C C6 C6 C6 C6 C6 C6 00 00 FE 00 FE  // .`8.|...........
    6280: 00 FE 00 00 18 18 7E 18 18 00 7E 00 30 18 0C 18  // ......~...~.0...
    6290: 30 00 7E 00 0C 18 30 18 0C 00 7E 00 0C 1E 18 18  // 0.~...0...~.....
    62A0: 18 18 18 18 18 18 18 18 18 78 30 00 00 00 18 00  // .........x0.....
    62B0: 7E 00 18 00 00 76 DC 00 76 DC 00 00 7C C6 C6 7C  // ~....v..v...|..|
    62C0: 00 00 00 00 00 00 00 18 18 00 00 00 00 00 00 00  // ................
    62D0: 18 00 00 00 1F 18 18 18 F8 38 18 00 D8 6C 6C 6C  // .........8...lll
    62E0: 00 00 00 00 70 D8 30 F8 00 00 00 00 00 00 7C 7C  // ....p.0.......||
    62F0: 7C 7C 00 00 00 00 00 00 00 00 00 00 1D 00 00 00  // ||..............
    6300: 00 24 66 FF 66 24 00 00 00 00 00 00 00 10 00 00  // .$f.f$..........
    6310: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6320: 00 7E 81 A5 81 81 BD 99 81 81 7E 00 00 00 00 00  // .~........~.....
    6330: 00 7C FE FE D6 FE FE BA C6 FE 7C 00 00 00 00 00  // .|........|.....
    6340: 00 00 6C EE FE FE FE FE 7C 38 10 00 00 00 00 00  // ..l.....|8......
    6350: 00 00 10 38 7C FE 7C 38 10 00 00 00 00 00 00 00  // ...8|.|8........
    6360: 00 00 10 38 38 10 6C EE 6C 10 38 00 00 00 00 00  // ...88.l.l.8.....
    6370: 00 10 38 7C 7C FE FE FE 6C 10 38 00 00 00 00 00  // ..8||...l.8.....
    6380: 00 00 00 00 18 3C 3C 3C 18 00 00 00 00 00 00 FF  // .....<<<........
    6390: FF FF FF FF E7 C3 C3 C3 E7 FF FF FF FF FF FF 00  // ................
    63A0: 00 00 00 18 3C 66 66 66 3C 18 00 00 00 00 00 FF  // ....<fff<.......
    63B0: FF FF FF E7 C3 99 99 99 C3 E7 FF FF FF FF FF 00  // ................
    63C0: 00 1E 0E 1E 36 78 CC CC CC CC 78 00 00 00 00 00  // ....6x....x.....
    63D0: 00 3C 66 66 66 3C 18 7E 18 18 18 00 00 00 00 00  // .<fff<.~........
    63E0: 00 1E 1A 1E 18 18 18 18 78 F8 70 00 00 00 00 00  // ........x.p.....
    63F0: 00 3E 36 3E 36 36 76 F6 66 0E 1E 0C 00 00 00 00  // .>6>66v.f.......
    6400: 00 18 DB 7E 3C 66 66 3C 7E DB 18 00 00 00 00 00  // ...~<ff<~.......
    6410: 00 00 80 E0 F0 FC FE FC F0 E0 80 00 00 00 00 00  // ................
    6420: 00 00 02 0E 3E 7E FE 7E 3E 0E 02 00 00 00 00 00  // ....>~.~>.......
    6430: 00 18 3C 7E 18 18 18 18 7E 3C 18 00 00 00 00 00  // ..<~....~<......
    6440: 00 66 66 66 66 66 66 66 00 66 66 00 00 00 00 00  // .fffffff.ff.....
    6450: 00 7F DB DB DB DB 7B 1B 1B 1B 1B 00 00 00 00 00  // ......{.........
    6460: 00 7C C6 C6 60 7C F6 DE 7C 0C C6 C6 7C 00 00 00  // .|..`|..|...|...
    6470: 00 00 00 00 00 00 00 FE FE FE FE 00 00 00 00 00  // ................
    6480: 00 18 3C 7E 18 18 18 7E 3C 18 7E 00 00 00 00 00  // ..<~...~<.~.....
    6490: 00 18 3C 7E 18 18 18 18 18 18 18 00 00 00 00 00  // ..<~............
    64A0: 00 18 18 18 18 18 18 18 7E 3C 18 00 00 00 00 00  // ........~<......
    64B0: 00 00 00 00 0C 0E FF 0E 0C 00 00 00 00 00 00 00  // ................
    64C0: 00 00 00 00 30 70 FE 70 30 00 00 00 00 00 00 00  // ....0p.p0.......
    64D0: 00 00 00 00 00 C0 C0 C0 FE 00 00 00 00 00 00 00  // ................
    64E0: 00 00 00 00 24 66 FF 66 24 00 00 00 00 00 00 00  // ....$f.f$.......
    64F0: 00 00 10 38 38 38 7C 7C FE FE 00 00 00 00 00 00  // ...888||........
    6500: 00 00 FE FE 7C 7C 7C 38 38 10 00 00 00 00 00 00  // ....|||88.......
    6510: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6520: 00 18 3C 3C 3C 3C 18 18 00 18 18 00 00 00 00 00  // ..<<<<..........
    6530: 36 36 36 36 14 00 00 00 00 00 00 00 00 00 00 00  // 6666............
    6540: 00 6C 6C 6C FE 6C 6C FE 6C 6C 6C 00 00 00 00 00  // .lll.ll.lll.....
    6550: 00 18 18 7C C6 C0 78 3C 06 C6 7C 18 18 00 00 00  // ...|..x<..|.....
    6560: 00 00 00 00 62 66 0C 18 30 66 C6 00 00 00 00 00  // ....bf..0f......
    6570: 00 38 6C 38 30 76 7E CC CC CC 76 00 00 00 00 00  // .8l80v~...v.....
    6580: 0C 0C 0C 18 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6590: 00 0C 18 30 30 30 30 30 30 18 0C 00 00 00 00 00  // ...000000.......
    65A0: 00 30 18 0C 0C 0C 0C 0C 0C 18 30 00 00 00 00 00  // .0........0.....
    65B0: 00 00 00 00 6C 38 FE 38 6C 00 00 00 00 00 00 00  // ....l8.8l.......
    65C0: 00 00 00 00 18 18 7E 18 18 00 00 00 00 00 00 00  // ......~.........
    65D0: 00 00 00 00 00 00 00 00 0C 0C 0C 18 00 00 00 00  // ................
    65E0: 00 00 00 00 00 00 FE 00 00 00 00 00 00 00 00 00  // ................
    65F0: 00 00 00 00 00 00 00 00 00 18 18 00 00 00 00 00  // ................
    6600: 00 00 00 02 06 0C 18 30 60 C0 80 00 00 00 00 00  // .......0`.......
    6610: 00 7C C6 C6 CE DE F6 E6 C6 C6 7C 00 00 00 00 00  // .|........|.....
    6620: 00 18 78 18 18 18 18 18 18 18 7E 00 00 00 00 00  // ..x.......~.....
    6630: 00 7C C6 C6 06 0C 18 30 60 C6 FE 00 00 00 00 00  // .|.....0`.......
    6640: 00 7C C6 06 06 3C 06 06 06 C6 7C 00 00 00 00 00  // .|...<....|.....
    6650: 00 0C 1C 3C 6C CC CC FE 0C 0C 1E 00 00 00 00 00  // ...<l...........
    6660: 00 FE C0 C0 C0 FC 06 06 06 C6 7C 00 00 00 00 00  // ..........|.....
    6670: 00 7C C6 C0 C0 FC C6 C6 C6 C6 7C 00 00 00 00 00  // .|........|.....
    6680: 00 FE C6 06 0C 18 30 30 30 30 30 00 00 00 00 00  // ......00000.....
    6690: 00 7C C6 C6 C6 7C C6 C6 C6 C6 7C 00 00 00 00 00  // .|...|....|.....
    66A0: 00 7C C6 C6 C6 C6 7E 06 06 C6 7C 00 00 00 00 00  // .|....~...|.....
    66B0: 00 00 00 00 0C 0C 00 00 0C 0C 00 00 00 00 00 00  // ................
    66C0: 00 00 00 00 0C 0C 00 00 0C 0C 0C 18 00 00 00 00  // ................
    66D0: 00 00 0C 18 30 60 C0 60 30 18 0C 00 00 00 00 00  // ....0`.`0.......
    66E0: 00 00 00 00 00 FE 00 FE 00 00 00 00 00 00 00 00  // ................
    66F0: 00 00 60 30 18 0C 06 0C 18 30 60 00 00 00 00 00  // ..`0.....0`.....
    6700: 00 7C C6 C6 0C 18 18 18 00 18 18 00 00 00 00 00  // .|..............
    6710: 00 7C C6 C6 C6 DE DE DE DC C0 7E 00 00 00 00 00  // .|........~.....
    6720: 00 38 6C C6 C6 C6 FE C6 C6 C6 C6 00 00 00 00 00  // .8l.............
    6730: 00 FC 66 66 66 7C 66 66 66 66 FC 00 00 00 00 00  // ..fff|ffff......
    6740: 00 3C 66 C2 C0 C0 C0 C0 C2 66 3C 00 00 00 00 00  // .<f......f<.....
    6750: 00 F8 6C 66 66 66 66 66 66 6C F8 00 00 00 00 00  // ..lffffffl......
    6760: 00 FE 66 60 64 7C 64 60 60 66 FE 00 00 00 00 00  // ..f`d|d``f......
    6770: 00 FE 66 60 64 7C 64 60 60 60 F0 00 00 00 00 00  // ..f`d|d```......
    6780: 00 7C C6 C6 C0 C0 C0 CE C6 C6 7C 00 00 00 00 00  // .|........|.....
    6790: 00 C6 C6 C6 C6 FE C6 C6 C6 C6 C6 00 00 00 00 00  // ................
    67A0: 00 3C 18 18 18 18 18 18 18 18 3C 00 00 00 00 00  // .<........<.....
    67B0: 00 3C 18 18 18 18 18 18 D8 D8 70 00 00 00 00 00  // .<........p.....
    67C0: 00 C6 C6 CC D8 F0 F0 D8 CC C6 C6 00 00 00 00 00  // ................
    67D0: 00 F0 60 60 60 60 60 60 62 66 FE 00 00 00 00 00  // ..``````bf......
    67E0: 00 C6 C6 EE EE FE D6 D6 D6 C6 C6 00 00 00 00 00  // ................
    67F0: 00 C6 C6 E6 E6 F6 DE CE CE C6 C6 00 00 00 00 00  // ................
    6800: 00 7C C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00  // .|........|.....
    6810: 00 FC 66 66 66 66 7C 60 60 60 F0 00 00 00 00 00  // ..ffff|```......
    6820: 00 7C C6 C6 C6 C6 C6 C6 D6 D6 7C 06 00 00 00 00  // .|........|.....
    6830: 00 FC 66 66 66 7C 78 6C 66 66 E6 00 00 00 00 00  // ..fff|xlff......
    6840: 00 7C C6 C0 C0 70 1C 06 06 C6 7C 00 00 00 00 00  // .|...p....|.....
    6850: 00 7E 5A 18 18 18 18 18 18 18 3C 00 00 00 00 00  // .~Z.......<.....
    6860: 00 C6 C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00  // ..........|.....
    6870: 00 C6 C6 C6 C6 C6 C6 C6 6C 38 10 00 00 00 00 00  // ........l8......
    6880: 00 C6 C6 C6 D6 D6 D6 FE EE C6 C6 00 00 00 00 00  // ................
    6890: 00 C6 C6 C6 6C 38 38 6C C6 C6 C6 00 00 00 00 00  // ....l88l........
    68A0: 00 66 66 66 66 66 3C 18 18 18 3C 00 00 00 00 00  // .fffff<...<.....
    68B0: 00 FE C6 86 0C 18 30 60 C2 C6 FE 00 00 00 00 00  // ......0`........
    68C0: 00 7C 60 60 60 60 60 60 60 60 7C 00 00 00 00 00  // .|````````|.....
    68D0: 00 00 00 80 C0 60 30 18 0C 06 02 00 00 00 00 00  // .....`0.........
    68E0: 00 7C 0C 0C 0C 0C 0C 0C 0C 0C 7C 00 00 00 00 00  // .|........|.....
    68F0: 10 38 6C C6 00 00 00 00 00 00 00 00 00 00 00 00  // .8l.............
    6900: 00 00 00 00 00 00 00 00 00 00 00 00 FF 00 00 00  // ................
    6910: 18 18 18 0C 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6920: 00 00 00 00 78 0C 7C CC CC DC 76 00 00 00 00 00  // ....x.|...v.....
    6930: 00 E0 60 60 7C 66 66 66 66 66 FC 00 00 00 00 00  // ..``|fffff......
    6940: 00 00 00 00 7C C6 C0 C0 C0 C6 7C 00 00 00 00 00  // ....|.....|.....
    6950: 00 1C 0C 0C 7C CC CC CC CC CC 7E 00 00 00 00 00  // ....|.....~.....
    6960: 00 00 00 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00  // ....|.....|.....
    6970: 00 1C 36 30 30 FC 30 30 30 30 78 00 00 00 00 00  // ..600.0000x.....
    6980: 00 00 00 00 76 CE C6 C6 CE 76 06 C6 7C 00 00 00  // ....v....v..|...
    6990: 00 E0 60 60 7C 66 66 66 66 66 E6 00 00 00 00 00  // ..``|fffff......
    69A0: 00 18 18 00 38 18 18 18 18 18 3C 00 00 00 00 00  // ....8.....<.....
    69B0: 00 0C 0C 00 1C 0C 0C 0C 0C 0C CC CC 78 00 00 00  // ............x...
    69C0: 00 E0 60 60 66 66 6C 78 6C 66 E6 00 00 00 00 00  // ..``fflxlf......
    69D0: 00 18 18 18 18 18 18 18 18 18 1C 00 00 00 00 00  // ................
    69E0: 00 00 00 00 6C FE D6 D6 C6 C6 C6 00 00 00 00 00  // ....l...........
    69F0: 00 00 00 00 DC 66 66 66 66 66 66 00 00 00 00 00  // .....ffffff.....
    6A00: 00 00 00 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00  // ....|.....|.....
    6A10: 00 00 00 00 DC 66 66 66 66 7C 60 60 F0 00 00 00  // .....ffff|``....
    6A20: 00 00 00 00 76 CC CC CC CC 7C 0C 0C 1E 00 00 00  // ....v....|......
    6A30: 00 00 00 00 DC 66 60 60 60 60 F0 00 00 00 00 00  // .....f````......
    6A40: 00 00 00 00 7C C6 C0 7C 06 C6 7C 00 00 00 00 00  // ....|..|..|.....
    6A50: 00 30 30 30 FC 30 30 30 30 36 1C 00 00 00 00 00  // .000.00006......
    6A60: 00 00 00 00 CC CC CC CC CC CC 76 00 00 00 00 00  // ..........v.....
    6A70: 00 00 00 00 C6 C6 C6 C6 6C 38 10 00 00 00 00 00  // ........l8......
    6A80: 00 00 00 00 C6 C6 D6 D6 D6 FE 6C 00 00 00 00 00  // ..........l.....
    6A90: 00 00 00 00 C6 C6 6C 38 6C C6 C6 00 00 00 00 00  // ......l8l.......
    6AA0: 00 00 00 00 C6 C6 C6 C6 CE 76 06 C6 7C 00 00 00  // .........v..|...
    6AB0: 00 00 00 00 FE 86 0C 18 30 62 FE 00 00 00 00 00  // ........0b......
    6AC0: 00 0E 18 18 18 70 18 18 18 18 0E 00 00 00 00 00  // .....p..........
    6AD0: 00 18 18 18 18 00 18 18 18 18 18 00 00 00 00 00  // ................
    6AE0: 00 70 18 18 18 0E 18 18 18 18 70 00 00 00 00 00  // .p........p.....
    6AF0: 00 76 DC 00 00 00 00 00 00 00 00 00 00 00 00 00  // .v..............
    6B00: 00 00 00 00 10 38 38 6C 6C FE 00 00 00 00 00 00  // .....88ll.......
    6B10: 00 3C 66 C0 C0 C0 C6 66 3C 18 0C CC 38 00 00 00  // .<f....f<...8...
    6B20: 00 C6 00 00 C6 C6 C6 C6 C6 CE 76 00 00 00 00 00  // ..........v.....
    6B30: 0C 18 30 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00  // ..0.|.....|.....
    6B40: 30 78 CC 00 78 0C 7C CC CC DC 76 00 00 00 00 00  // 0x..x.|...v.....
    6B50: 00 CC 00 00 78 0C 7C CC CC DC 76 00 00 00 00 00  // ....x.|...v.....
    6B60: 60 30 18 00 78 0C 7C CC CC DC 76 00 00 00 00 00  // `0..x.|...v.....
    6B70: 38 6C 38 00 78 0C 7C CC CC DC 76 00 00 00 00 00  // 8l8.x.|...v.....
    6B80: 00 00 00 7C C6 C0 C0 C6 7C 18 0C 6C 38 00 00 00  // ...|....|..l8...
    6B90: 30 78 CC 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00  // 0x..|.....|.....
    6BA0: 00 CC 00 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00  // ....|.....|.....
    6BB0: 30 18 0C 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00  // 0...|.....|.....
    6BC0: 00 66 00 00 38 18 18 18 18 18 3C 00 00 00 00 00  // .f..8.....<.....
    6BD0: 18 3C 66 00 38 18 18 18 18 18 3C 00 00 00 00 00  // .<f.8.....<.....
    6BE0: 00 00 00 00 38 18 18 18 18 18 3C 00 00 00 00 00  // ....8.....<.....
    6BF0: C6 00 38 6C C6 C6 C6 FE C6 C6 C6 00 00 00 00 38  // ..8l...........8
    6C00: 6C 38 00 38 6C C6 C6 FE C6 C6 C6 00 00 00 00 0C  // l8.8l...........
    6C10: 18 30 00 FE 60 60 7C 60 60 60 FE 00 00 00 00 00  // .0..``|```......
    6C20: 00 00 00 66 DB 1B 7F D8 D8 DF 76 00 00 00 00 00  // ...f......v.....
    6C30: 00 7E D8 D8 D8 D8 FE D8 D8 D8 DE 00 00 00 00 00  // .~..............
    6C40: 30 78 CC 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00  // 0x..|.....|.....
    6C50: 00 C6 00 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00  // ....|.....|.....
    6C60: 30 18 0C 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00  // 0...|.....|.....
    6C70: 30 78 CC 00 C6 C6 C6 C6 C6 CE 76 00 00 00 00 00  // 0x........v.....
    6C80: 60 30 18 00 C6 C6 C6 C6 C6 CE 76 00 00 00 00 00  // `0........v.....
    6C90: 18 00 3C 18 18 18 18 18 18 18 3C 00 00 00 00 00  // ..<.......<.....
    6CA0: C6 00 7C C6 C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00  // ..|.......|.....
    6CB0: C6 00 C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00  // ..........|.....
    6CC0: 00 18 18 7C C6 C0 C0 C6 7C 18 18 00 00 00 00 00  // ...|....|.......
    6CD0: 38 6C 60 60 F0 60 60 60 66 F6 6C 00 00 00 00 00  // 8l``.```f.l.....
    6CE0: 66 66 66 66 3C 18 7E 18 3C 18 18 00 00 00 00 00  // ffff<.~.<.......
    6CF0: 00 3E 63 63 30 1C 06 63 63 3E 00 1C 00 00 00 00  // .>cc0..cc>......
    6D00: 00 00 00 00 3E 63 38 0E 63 3E 00 1C 00 00 00 00  // ....>c8.c>......
    6D10: 0C 18 30 00 78 0C 7C CC CC DC 76 00 00 00 00 00  // ..0.x.|...v.....
    6D20: 0C 18 30 00 38 18 18 18 18 18 3C 00 00 00 00 00  // ..0.8.....<.....
    6D30: 0C 18 30 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00  // ..0.|.....|.....
    6D40: 18 30 60 00 CC CC CC CC CC DC 76 00 00 00 00 00  // .0`.......v.....
    6D50: 00 76 DC 00 BC 66 66 66 66 66 E6 00 00 00 00 00  // .v...fffff......
    6D60: 76 DC 00 C6 C6 E6 F6 DE CE C6 C6 00 00 00 00 00  // v...............
    6D70: 21 1E 00 1E 33 60 60 67 63 33 1D 00 00 00 00 00  // !...3``gc3......
    6D80: 42 3C 00 3B 66 66 66 3E 06 66 3C 00 00 00 00 00  // B<.;fff>.f<.....
    6D90: 00 30 30 00 30 30 30 60 C6 C6 7C 00 00 00 00 00  // .00.000`..|.....
    6DA0: 00 00 00 00 00 00 7E 60 60 60 00 00 00 00 00 00  // ......~```......
    6DB0: 00 00 00 00 00 00 7E 06 06 06 00 00 00 00 00 00  // ......~.........
    6DC0: 60 60 62 66 6C 18 30 60 DC 36 0C 18 3E 00 00 00  // ``bfl.0`.6..>...
    6DD0: 60 60 62 66 6C 18 36 6E DE 36 7E 06 06 00 00 00  // ``bfl.6n.6~.....
    6DE0: 00 18 18 00 18 18 3C 3C 3C 3C 18 00 00 00 00 00  // ......<<<<......
    6DF0: 00 00 00 00 36 6C D8 6C 36 00 00 00 00 00 00 00  // ....6l.l6.......
    6E00: 00 00 00 00 D8 6C 36 6C D8 00 00 00 00 00 00 11  // .....l6l........
    6E10: 44 11 44 11 44 11 44 11 44 11 44 11 44 11 44 AA  // D.D.D.D.D.D.D.D.
    6E20: 55 AA 55 AA 55 AA 55 AA 55 AA 55 AA 55 AA 55 DD  // U.U.U.U.U.U.U.U.
    6E30: 77 DD 77 DD 77 DD 77 DD 77 DD 77 DD 77 DD 77 18  // w.w.w.w.w.w.w.w.
    6E40: 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    6E50: 18 18 18 18 18 18 F8 18 18 18 18 18 18 18 18 18  // ................
    6E60: 18 18 18 18 F8 18 F8 18 18 18 18 18 18 18 18 36  // ...............6
    6E70: 36 36 36 36 36 36 F6 36 36 36 36 36 36 36 36 00  // 666666.66666666.
    6E80: 00 00 00 00 00 00 FE 36 36 36 36 36 36 36 36 00  // .......66666666.
    6E90: 00 00 00 00 F8 18 F8 18 18 18 18 18 18 18 18 36  // ...............6
    6EA0: 36 36 36 36 F6 06 F6 36 36 36 36 36 36 36 36 36  // 6666...666666666
    6EB0: 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 00  // 666666666666666.
    6EC0: 00 00 00 00 FE 06 F6 36 36 36 36 36 36 36 36 36  // .......666666666
    6ED0: 36 36 36 36 F6 06 FE 00 00 00 00 00 00 00 00 36  // 6666...........6
    6EE0: 36 36 36 36 36 36 FE 00 00 00 00 00 00 00 00 18  // 666666..........
    6EF0: 18 18 18 18 F8 18 F8 00 00 00 00 00 00 00 00 00  // ................
    6F00: 00 00 00 00 00 00 F8 18 18 18 18 18 18 18 18 18  // ................
    6F10: 18 18 18 18 18 18 1F 00 00 00 00 00 00 00 00 18  // ................
    6F20: 18 18 18 18 18 18 FF 00 00 00 00 00 00 00 00 00  // ................
    6F30: 00 00 00 00 00 00 FF 18 18 18 18 18 18 18 18 18  // ................
    6F40: 18 18 18 18 18 18 1F 18 18 18 18 18 18 18 18 00  // ................
    6F50: 00 00 00 00 00 00 FF 00 00 00 00 00 00 00 00 18  // ................
    6F60: 18 18 18 18 18 18 FF 18 18 18 18 18 18 18 18 18  // ................
    6F70: 18 18 18 18 1F 18 1F 18 18 18 18 18 18 18 18 36  // ...............6
    6F80: 36 36 36 36 36 36 37 36 36 36 36 36 36 36 36 36  // 6666667666666666
    6F90: 36 36 36 36 37 30 3F 00 00 00 00 00 00 00 00 00  // 666670?.........
    6FA0: 00 00 00 00 3F 30 37 36 36 36 36 36 36 36 36 36  // ....?07666666666
    6FB0: 36 36 36 36 F7 00 FF 00 00 00 00 00 00 00 00 00  // 6666............
    6FC0: 00 00 00 00 FF 00 F7 36 36 36 36 36 36 36 36 36  // .......666666666
    6FD0: 36 36 36 36 37 30 37 36 36 36 36 36 36 36 36 00  // 666670766666666.
    6FE0: 00 00 00 00 FF 00 FF 00 00 00 00 00 00 00 00 36  // ...............6
    6FF0: 36 36 36 36 F7 00 F7 36 36 36 36 36 36 36 36 18  // 6666...66666666.
    7000: 18 18 18 18 FF 00 FF 00 00 00 00 00 00 00 00 36  // ...............6
    7010: 36 36 36 36 36 36 FF 00 00 00 00 00 00 00 00 00  // 666666..........
    7020: 00 00 00 00 FF 00 FF 18 18 18 18 18 18 18 18 00  // ................
    7030: 00 00 00 00 00 00 FF 36 36 36 36 36 36 36 36 36  // .......666666666
    7040: 36 36 36 36 36 36 3F 00 00 00 00 00 00 00 00 18  // 666666?.........
    7050: 18 18 18 18 1F 18 1F 00 00 00 00 00 00 00 00 00  // ................
    7060: 00 00 00 00 1F 18 1F 18 18 18 18 18 18 18 18 00  // ................
    7070: 00 00 00 00 00 00 3F 36 36 36 36 36 36 36 36 36  // ......?666666666
    7080: 36 36 36 36 36 36 FF 36 36 36 36 36 36 36 36 18  // 666666.66666666.
    7090: 18 18 18 18 FF 18 FF 18 18 18 18 18 18 18 18 18  // ................
    70A0: 18 18 18 18 18 18 F8 00 00 00 00 00 00 00 00 00  // ................
    70B0: 00 00 00 00 00 00 1F 18 18 18 18 18 18 18 18 FF  // ................
    70C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF 00  // ................
    70D0: 00 00 00 00 00 00 00 FF FF FF FF FF FF FF FF F0  // ................
    70E0: F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 0F  // ................
    70F0: 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F FF  // ................
    7100: FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00 00  // ................
    7110: 00 00 00 76 DC D8 D8 D8 D8 DC 76 00 00 00 00 00  // ...v......v.....
    7120: 00 78 CC CC D8 FC C6 C6 C6 C6 CC 00 00 00 00 00  // .x..............
    7130: 00 FE 66 62 60 60 60 60 60 60 60 00 00 00 00 00  // ..fb```````.....
    7140: 00 00 00 00 FE 6C 6C 6C 6C 6C 6C 00 00 00 00 00  // .....llllll.....
    7150: 00 FE C6 62 30 18 18 30 62 C6 FE 00 00 00 00 00  // ...b0..0b.......
    7160: 00 00 00 00 7E D8 CC CC CC D8 70 00 00 00 00 00  // ....~.....p.....
    7170: 00 00 00 66 66 66 66 66 7C 60 C0 80 00 00 00 00  // ...fffff|`......
    7180: 00 00 00 00 76 DC 18 18 18 18 18 00 00 00 00 00  // ....v...........
    7190: 00 FE 38 38 6C C6 C6 6C 38 38 FE 00 00 00 00 00  // ..88l..l88......
    71A0: 00 00 38 6C C6 C6 FE C6 C6 6C 38 00 00 00 00 00  // ..8l.....l8.....
    71B0: 00 38 6C C6 C6 C6 C6 6C 6C 6C EE 00 00 00 00 00  // .8l....lll......
    71C0: 00 3E 60 60 3C 66 C6 C6 C6 CC 78 00 00 00 00 00  // .>``<f....x.....
    71D0: 00 00 00 00 7E DB DB DB 7E 00 00 00 00 00 00 00  // ....~...~.......
    71E0: 00 02 06 7C CE DE F6 F6 7C 60 C0 00 00 00 00 00  // ...|....|`......
    71F0: 00 00 1C 30 60 60 7C 60 60 30 1C 00 00 00 00 00  // ...0``|``0......
    7200: 00 7C C6 C6 C6 C6 C6 C6 C6 C6 C6 00 00 00 00 00  // .|..............
    7210: 00 00 00 FE 00 00 FE 00 00 FE 00 00 00 00 00 00  // ................
    7220: 00 00 00 18 18 7E 18 18 00 00 7E 00 00 00 00 00  // .....~....~.....
    7230: 00 30 18 0C 06 0C 18 30 00 00 7E 00 00 00 00 00  // .0.....0..~.....
    7240: 00 0C 18 30 60 30 18 0C 00 00 7E 00 00 00 00 00  // ...0`0....~.....
    7250: 00 00 00 0C 1E 1A 18 18 18 18 18 18 18 18 18 18  // ................
    7260: 18 18 18 18 18 18 18 18 18 58 78 30 00 00 00 00  // .........Xx0....
    7270: 00 00 00 18 18 00 7E 00 18 18 00 00 00 00 00 00  // ......~.........
    7280: 00 00 00 00 00 76 DC 00 76 DC 00 00 00 00 00 00  // .....v..v.......
    7290: 00 78 CC CC 78 00 00 00 00 00 00 00 00 00 00 00  // .x..x...........
    72A0: 00 00 00 00 00 00 18 18 00 00 00 00 00 00 00 00  // ................
    72B0: 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 00  // ................
    72C0: 00 1F 18 18 18 18 18 D8 D8 78 38 18 00 00 00 00  // .........x8.....
    72D0: 00 D8 6C 6C 6C 6C 6C 00 00 00 00 00 00 00 00 00  // ..lllll.........
    72E0: 00 70 D8 18 30 60 F8 00 00 00 00 00 00 00 00 00  // .p..0`..........
    72F0: 00 00 00 00 7E 7E 7E 7E 7E 7E 00 00 00 00 00 00  // ....~~~~~~......
    7300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1D  // ................
    7310: 00 00 00 00 00 24 66 FF 66 24 00 00 00 00 00 00  // .....$f.f$......
    7320: 2F 00 00 00 01 03 06 0C 18 30 60 C0 80 00 00 00  // /........0`.....
    7330: 00 30 00 00 7E C3 C3 C3 DB DB C3 C3 C3 7E 00 00  // .0..~........~..
    7340: 00 00 4D 00 00 C3 C3 E7 FF FF DB DB C3 C3 C3 00  // ..M.............
    7350: 00 00 00 54 00 00 FF 99 18 18 18 18 18 18 18 3C  // ...T...........<
    7360: 00 00 00 00 56 00 00 C3 C3 C3 C3 C3 C3 C3 66 3C  // ....V.........f<
    7370: 18 00 00 00 00 57 00 00 C3 C3 C3 C3 DB DB DB DB  // .....W..........
    7380: FF 66 00 00 00 00 58 00 00 C3 C3 C3 66 3C 3C 66  // .f....X.....f<<f
    7390: C3 C3 C3 00 00 00 00 59 00 00 C3 C3 C3 C3 66 3C  // .......Y......f<
    73A0: 18 18 18 3C 00 00 00 00 5C 00 00 00 80 C0 60 30  // ...<....\.....`0
    73B0: 18 0C 06 03 01 00 00 00 00 6D 00 00 00 00 00 66  // .........m.....f
    73C0: FF DB DB DB C3 C3 00 00 00 00 76 00 00 00 00 00  // ..........v.....
    73D0: C3 C3 C3 C3 66 3C 18 00 00 00 00 77 00 00 00 00  // ....f<.....w....
    73E0: 00 C3 C3 DB DB DB FF 66 00 00 00 00 00 00 A7 62  // .......f.......b
    73F0: C3 0B DB 74 03 E9 46 01 57 32 C0 B9 40 00 F3 AA  // ...t..F.W2..@...
    7400: 5F BB 74 90 26 89 1D 26 8C 4D 02 2E 8E 1E 0E 03  // _.t.&..&.M......
    7410: 57 BE 49 04 B9 1E 00 83 C7 04 FC 8A 04 26 88 05  // W.I..........&..
    7420: 46 47 E2 F7 5F A0 84 04 FE C0 26 88 45 22 A1 85  // FG.._.....&.E"..
    7430: 04 26 89 45 23 57 E8 D9 1B 5F 26 88 5D 25 26 88  // .&.E#W..._&.]%&.
    7440: 7D 26 8A 1E 49 04 E8 FC 05 74 05 80 FB 13 7F 1D  // }&..I....t......
    7450: 32 FF D1 E3 2E 8A 87 4C 90 32 E4 0A C0 74 01 40  // 2......L.2...t.@
    7460: 26 89 45 27 2E 8A 87 4D 90 26 88 45 29 A1 85 04  // &.E'...M.&.E)...
    7470: 8A 16 84 04 FE C2 F6 E2 B2 00 3D C8 00 7E 15 B2  // ..........=..~..
    7480: 01 3D 5E 01 7E 0E B2 02 3D 90 01 7E 07 B2 03 3D  // .=^.~...=..~...=
    7490: E0 01 7E 00 26 88 55 2A 8A 26 87 04 8A C4 24 01  // ..~.&.U*.&....$.
    74A0: C0 E0 04 80 E4 02 D0 E4 0A E0 80 F4 10 A0 89 04  // ................
    74B0: 24 0A 0A E0 E8 94 08 B2 C0 B0 30 EE 42 EC 24 08  // $.........0.B.$.
    74C0: C0 E0 02 0A C4 0C 01 26 88 45 2D B0 03 26 88 45  // .......&.E-..&.E
    74D0: 31 E8 77 08 1E 06 32 D2 C4 1E A8 04 8C C1 8C CE  // 1.w...2.........
    74E0: 3B CE 74 34 26 C5 77 04 8C D9 0B F1 74 03 80 CA  // ;.t4&.w.....t...
    74F0: 10 26 C5 77 0C 8C D9 0B F1 74 03 80 CA 08 26 C5  // .&.w.....t....&.
    7500: 77 08 8C D9 0B F1 74 03 80 CA 04 26 C5 77 10 8C  // w.....t....&.w..
    7510: D9 0B F1 74 03 80 CA 01 07 1F 26 88 55 32 B0 03  // ...t......&.U2..
    7520: BA C4 03 E8 E4 04 8A E0 C0 EC 02 8A D4 8A F2 D0  // ................
    7530: EE 81 E2 04 04 25 03 03 0B C2 26 89 45 2B 8B EC  // .....%....&.E+..
    7540: C6 46 1A 1B C3 0A C0 74 0F FE C8 74 36 FE C8 74  // .F.....t...t6..t
    7550: 56 8B EC C6 46 1A 00 C3 B8 20 00 F6 C1 01 74 03  // V...F.... ....t.
    7560: 83 C0 60 F6 C1 02 74 03 83 C0 3A F6 C1 04 74 03  // ..`...t...:...t.
    7570: 05 03 03 83 C0 3F C1 E8 06 8B EC 89 46 0E C6 46  // .....?......F..F
    7580: 1A 1C C3 8B FB 83 C7 20 F6 C1 01 74 03 E8 85 00  // ....... ...t....
    7590: F6 C1 02 74 03 E8 EF 00 F6 C1 04 74 03 E8 F8 01  // ...t.......t....
    75A0: 8B EC C6 46 1A 1C C3 F6 C1 01 74 06 E8 16 15 E8  // ...F......t.....
    75B0: 25 01 F6 C1 02 74 03 E8 85 01 F6 C1 04 74 03 E8  // %....t.......t..
    75C0: 12 02 EB DC 8A C4 EE 42 EC AA FE C4 4A E2 F5 C3  // .......B....J...
    75D0: E8 6B 04 BD C0 03 B9 15 00 32 E4 EC 87 EA 8A C4  // .k.......2......
    75E0: EE 42 EC AA FE C4 4A 87 EA E2 F0 EC 87 EA B0 20  // .B....J........ 
    75F0: EE C3 26 8A 05 88 04 47 46 E2 F7 C3 26 8A 25 EF  // ..&....GF...&.%.
    7600: 47 FE C0 E2 F7 C3 B2 C0 8A C4 EE 26 8A 05 47 FE  // G..........&..G.
    7610: C4 EE E2 F4 C3 9C FA 51 57 8B C7 2B C3 26 89 07  // .......QW..+.&..
    7620: 8B F7 E8 0A 04 EC 26 88 44 01 26 89 54 41 B2 CE  // ......&.D.&.TA..
    7630: EC 26 88 44 02 B2 CC EC 26 88 44 09 B2 CA EC 26  // .&.D....&.D....&
    7640: 88 44 04 B2 C4 EC 26 88 04 83 C7 05 B9 04 00 B4  // .D....&.........
    7650: 01 E8 70 FF 26 8A 04 EE 8B FE 83 C7 0A 26 8B 54  // ..p.&........&.T
    7660: 41 32 E4 B9 19 00 E8 5B FF 26 8A 44 01 EE E8 5F  // A2.....[.&.D..._
    7670: FF B2 CE 32 E4 B9 09 00 E8 49 FF 26 8A 44 02 EE  // ...2.....I.&.D..
    7680: 5F 59 83 C7 60 9D C3 9C FA 8B C7 2B C3 26 89 47  // _Y..`......+.&.G
    7690: 02 51 57 2E 8E 1E 0E 03 A0 10 04 24 30 AA BE 49  // .QW........$0..I
    76A0: 04 B9 1E 00 F3 A4 BE 84 04 B1 07 F3 A4 BE A8 04  // ................
    76B0: B1 04 F3 A4 BE 14 00 B1 04 F3 A4 BE 74 00 B1 04  // ............t...
    76C0: F3 A4 BE 7C 00 B1 04 F3 A4 BE 0C 01 B1 04 F3 A4  // ...|............
    76D0: 5F 59 83 C7 3A 9D C3 9C FA 26 8B 3F 03 FB 8B F7  // _Y..:....&.?....
    76E0: 51 8B FE 83 C7 05 BA C4 03 B8 00 01 EF B0 01 B9  // Q...............
    76F0: 04 00 E8 07 FF 47 B2 C2 26 8A 44 09 EE B2 C4 B8  // .....G..&.D.....
    7700: 00 03 EF 26 8A 04 EE 26 8B 54 41 B8 11 00 EF B1  // ...&...&.TA.....
    7710: 19 32 C0 E8 E6 FE 26 8A 44 01 EE 80 C2 06 26 8A  // .2....&.D.....&.
    7720: 44 04 EE EC B1 15 32 E4 E8 DB FE B0 20 EE B1 09  // D.....2..... ...
    7730: 32 C0 B2 CE E8 C5 FE 26 8A 44 02 EE 59 9D C3 9C  // 2......&.D..Y...
    7740: FA 26 8B 7F 02 03 FB 06 51 2E 8E 1E 0E 03 26 8A  // .&......Q.....&.
    7750: 05 80 26 10 04 CF 08 06 10 04 47 BE 49 04 B9 1E  // ..&.......G.I...
    7760: 00 E8 8E FE BE 84 04 B1 07 E8 86 FE BE A8 04 B1  // ................
    7770: 04 E8 7E FE BE 14 00 B1 04 E8 76 FE BE 74 00 B1  // ..~.......v..t..
    7780: 04 E8 6E FE BE 7C 00 B1 04 E8 66 FE BE 0C 01 B1  // ..n..|....f.....
    7790: 04 E8 5E FE 59 07 9D C3 9C FA 8B C7 2B C3 26 89  // ..^.Y.......+.&.
    77A0: 47 04 E8 A6 05 B2 C0 B0 34 EE 42 EC 26 88 05 BA  // G.......4.B.&...
    77B0: C8 03 EC 26 88 45 01 50 4A 4A EC 26 88 45 02 83  // ...&.E.PJJ.&.E..
    77C0: C7 03 B9 00 03 42 32 C0 EE 42 42 EC AA E2 FC 58  // .....B2..BB....X
    77D0: 4A EE 9D C3 9C FA 26 8B 77 04 03 F3 E8 6C 05 B2  // J.....&.w....l..
    77E0: C0 B0 34 EE 26 8A 04 EE BA C6 03 26 8A 44 02 EE  // ..4.&......&.D..
    77F0: 56 42 42 83 C6 03 32 C0 EE 42 B9 00 03 26 8A 04  // VBB...2..B...&..
    7800: EE 46 E2 F9 5E FE CA 26 8A 44 01 EE 9D C3 BA CC  // .F..^..&.D......
    7810: 03 EC 24 FE 0A C4 B2 C2 EE C3 E8 A8 12 B2 C0 86  // ..$.............
    7820: C4 EE EB 00 EB 00 86 C4 EE EB 00 EB 00 B0 20 EE  // .............. .
    7830: C3 50 8A E0 80 E4 80 80 26 87 04 7F 08 26 87 04  // .P......&....&..
    7840: 24 7F 8A E0 3C 07 7E 1E 26 F6 47 33 01 75 17 3C  // $...<.~.&.G3.u.<
    7850: 23 74 13 3C 32 74 0F 3C 33 74 0B B4 03 26 F6 47  // #t.<2t.<3t...&.G
    7860: 09 01 75 02 B4 07 88 26 49 04 BA B4 03 80 0E 87  // ..u....&I.......
    7870: 04 02 26 F6 47 09 01 74 07 B2 D4 80 26 87 04 FD  // ..&.G..t....&...
    7880: 89 16 63 04 C7 06 4E 04 00 00 C6 06 62 04 00 B9  // ..c...N.....b...
    7890: 08 00 BF 50 04 FC 06 1E 07 33 C0 F3 AB 07 26 8A  // ...P.....3....&.
    78A0: 07 32 E4 A3 4A 04 26 8A 47 01 A2 84 04 26 8A 47  // .2..J.&.G....&.G
    78B0: 02 A3 85 04 26 8B 47 03 A3 4C 04 26 8B 47 14 86  // ....&.G..L.&.G..
    78C0: C4 A3 60 04 58 C3 52 32 E4 33 D2 B0 0D CD 17 F6  // ..`.X.R2.3......
    78D0: C4 29 75 08 32 E4 33 D2 B0 0A CD 17 5A C3 06 1E  // .)u.2.3.....Z...
    78E0: 60 2E 8E 1E 0E 03 2E 83 0E 18 03 00 75 6E 80 3E  // `...........un.>
    78F0: 00 05 01 74 67 C6 06 00 05 01 8A 1E 62 04 32 FF  // ...tg.......b.2.
    7900: D1 E3 8B FB 8B 85 50 04 8A 3E 62 04 50 32 F6 8A  // ......P..>b.P2..
    7910: 0E 84 04 32 ED 41 51 8B 0E 4A 04 32 D2 E8 A6 FF  // ...2.AQ..J.2....
    7920: F6 C4 29 75 3D 51 52 89 95 50 04 B4 08 E8 B6 D4  // ..)u=QR..P......
    7930: 0A C0 75 02 B0 20 33 D2 32 E4 CD 17 F6 C4 29 75  // ..u.. 3.2.....)u
    7940: 1F 5A FE C2 59 E2 DE FE C6 59 E2 CA E8 77 FF 32  // .Z..Y....Y...w.2
    7950: C0 A2 00 05 58 89 85 50 04 E8 AF 03 61 1F 07 CF  // ....X..P....a...
    7960: 5A 59 59 B0 FF EB EA 52 2A F5 38 C6 7D 02 32 C0  // ZYY....R*.8.}.2.
    7970: 2E 8E 06 10 03 5A C3 A0 85 04 F6 E3 8A F7 8B D8  // .....Z..........
    7980: 8B CA BA C4 03 B8 02 0F EF B4 02 E8 6D 00 8B D1  // ............m...
    7990: 32 ED 8A E6 8A C6 F3 AA 03 FD 8A CA 4B 75 F7 32  // 2...........Ku.2
    79A0: E4 E8 57 00 C3 53 8A 1E 62 04 0B C0 75 04 0A DB  // ..W..S..b...u...
    79B0: 74 03 E8 35 03 5B 8B F8 2B D1 81 C2 01 01 8A C3  // t..5.[..+.......
    79C0: 32 E4 C3 8A C6 32 F6 2B EA 0A DB 74 2A 2A C3 F6  // 2....2.+...t**..
    79D0: 26 85 04 8B C8 52 B4 01 E8 20 00 B2 C4 B8 02 0F  // &....R... ......
    79E0: EF 5A 1E 06 1F 8B C1 8B CA F3 A4 03 F5 03 FD 48  // .Z.............H
    79F0: 75 F5 1F E8 81 FF C3 8A D8 EB F8 BA CE 03 B0 05  // u...............
    7A00: EE 42 EC 24 FC 0A C4 EE 4A C3 9C FA EE 42 EB 00  // .B.$....J....B..
    7A10: EC 4A 9D C3 1E 2E 8E 1E 0E 03 8B 16 63 04 80 C2  // .J..........c...
    7A20: 06 1F C3 1E 2E 8E 1E 0E 03 8B 16 63 04 1F C3 50  // ...........c...P
    7A30: BA CC 03 EC B2 D4 A8 01 75 02 B2 B4 58 C3 E8 EE  // ........u...X...
    7A40: FF 80 C2 06 C3 1E 2E 8E 1E 0E 03 80 3E 49 04 03  // ............>I..
    7A50: 74 13 80 3E 49 04 02 74 0C 80 3E 49 04 01 74 05  // t..>I..t..>I..t.
    7A60: 80 3E 49 04 00 1F C3 50 2E 8E 06 12 03 A0 10 04  // .>I....P........
    7A70: 24 30 3C 30 74 05 2E 8E 06 14 03 58 0B C0 74 03  // $0<0t......X..t.
    7A80: E8 E1 01 03 06 4E 04 81 C2 01 01 2B D1 32 ED 8B  // .....N.....+.2..
    7A90: 2E 4A 04 8B F8 8B F0 8B C5 F6 E3 D1 E0 D1 E5 0A  // .J..............
    7AA0: DB 75 02 8A DE 38 F3 7E 02 8A DE C3 FC 8A D8 8B  // .u...8.~........
    7AB0: C1 E8 B3 FF 03 F0 3A 16 4A 04 74 06 06 1F E8 1B  // ......:.J.t.....
    7AC0: 00 C3 06 1F E8 40 00 C3 FC 8A D8 8A C1 8A E6 E8  // .....@..........
    7AD0: 95 FF F7 DD 2B F0 06 1F E8 01 00 C3 53 8A CE 2A  // ....+.......S..*
    7AE0: CB 32 ED 32 F6 2B EA 2B EA E3 0E 8A E1 8B CA F3  // .2.2.+.+........
    7AF0: A5 03 F5 03 FD FE CC 75 F4 58 B0 20 8A CA F3 AB  // .......u.X. ....
    7B00: 03 FD FE CB 75 F6 C3 53 8A C6 2A C3 74 06 F6 E2  // ....u..S..*.t...
    7B10: 8B C8 F3 A5 58 8B C8 F6 E2 91 B0 20 F3 AB C3 8B  // ....X...... ....
    7B20: D8 E8 2E 00 2E 8E 1E 14 03 8A C3 22 DF D3 E3 A8  // ..........."....
    7B30: 80 74 03 30 1C C3 F6 D7 8A 34 22 F7 0A DE 88 1C  // .t.0.....4".....
    7B40: C3 8A FC E8 0C 00 2E 8E 1E 14 03 8A 04 D2 E8 22  // ..............."
    7B50: C7 C3 B0 28 F6 E2 F6 C2 01 74 03 05 D8 1F 8B F1  // ...(.....t......
    7B60: C1 EE 02 80 FF 05 7F 0C 03 F0 F6 D1 80 E1 03 D0  // ................
    7B70: E1 B7 03 C3 D1 EE 03 F0 F6 D1 80 E1 07 B7 01 C3  // ................
    7B80: FC 8A D8 2E 8E 06 14 03 8B C1 E8 86 00 75 02 8A  // .............u..
    7B90: DE 03 F0 E8 24 00 C3 FC 8A D8 2E 8E 06 14 03 8A  // ....$...........
    7BA0: C1 8A E6 E8 6D 00 75 02 8A DE F7 DD 81 C6 F0 00  // ....m.u.........
    7BB0: 81 C7 F0 00 2B F0 E8 01 00 C3 8A CE 2A CB E3 2C  // ....+.......*..,
    7BC0: 51 8A CA 56 57 D1 E9 F3 A5 13 C9 F3 A4 8A CA 2B  // Q..VW..........+
    7BD0: F1 2B F9 81 C6 00 20 81 C7 00 20 D1 E9 F3 A5 13  // .+.... ... .....
    7BE0: C9 F3 A4 5F 5E 03 F5 03 FD 59 E2 D4 8A C7 8A E7  // ..._^....Y......
    7BF0: 8A CA 57 D1 E9 F3 AB 13 C9 F3 AA 8A CA 2B F9 81  // ..W..........+..
    7C00: C7 00 20 D1 E9 F3 AB 13 C9 F3 AA 5F 03 FD FE CB  // .. ........_....
    7C10: 75 DE C3 E8 B0 00 81 C2 01 01 2B D1 38 F3 76 02  // u.........+.8.v.
    7C20: 32 DB 51 B1 02 D2 E6 D2 E3 59 32 ED BD 50 00 80  // 2.Q......Y2..P..
    7C30: 3E 49 04 06 74 04 D0 E2 D1 E0 06 1F 8B F8 8B F0  // >I..t...........
    7C40: B0 50 F6 E3 0A DB C3 52 53 8A DF 32 FF D1 E3 8B  // .P.....RS..2....
    7C50: 87 50 04 E8 0E 00 50 D1 EB A1 4C 04 F7 E3 5B 03  // .P....P...L...[.
    7C60: C3 5B 5A C3 52 8B D0 A0 4A 04 F6 E4 32 F6 03 C2  // .[Z.R...J...2...
    7C70: D1 E0 5A C3 8B E8 83 E5 0F 2E 8A A6 24 7C 8B E8  // ..Z.........$|..
    7C80: C1 ED 04 83 E5 0F 2E 8A 86 24 7C C3 00 03 0C 0F  // .........$|.....
    7C90: 30 33 3C 3F C0 C3 CC CF F0 F3 FC FF 26 8B 04 86  // 03<?........&...
    7CA0: E0 BA 00 80 F6 C4 C0 74 02 0A D6 D0 EE C1 E0 02  // .......t........
    7CB0: 75 F2 88 56 00 45 C3 8B 16 63 04 8A C5 86 E0 EF  // u..V.E...c......
    7CC0: 8A E1 FE C0 EF C3 52 8B D0 8A C4 F6 26 4A 04 C1  // ......R.....&J..
    7CD0: E0 02 32 F6 03 C2 5A C3 53 8A DF 32 FF D1 E3 8B  // ..2...Z.S..2....
    7CE0: 87 50 04 D1 EB E8 02 00 5B C3 52 8B D0 32 F6 52  // .P......[.R..2.R
    7CF0: 8A C4 F6 26 85 04 F7 26 4A 04 5A 03 C2 0A DB 74  // ...&...&J.Z....t
    7D00: 08 03 06 4C 04 FE CB 75 F8 5A C3 52 8B D0 A0 4A  // ...L...u.Z.R...J
    7D10: 04 F6 E4 32 F6 03 C2 D1 E0 03 06 4E 04 D1 F8 8B  // ...2.......N....
    7D20: C8 B4 0E E8 91 FF 5A C3 8B C2 F7 26 4A 04 8B F9  // ......Z....&J...
    7D30: C1 EF 03 03 F8 0A FF 74 0A 8A C7 32 E4 F7 26 4C  // .......t...2..&L
    7D40: 04 03 F8 80 E1 07 B4 80 D2 EC C3 E8 F0 FC EC C3  // ................
    7D50: E8 F8 FF B2 C0 B0 20 EE C3 E8 EF FF B2 C0 32 C0  // ...... .......2.
    7D60: EE C3 C4 3E A8 04 26 C4 7D 04 8C C5 0B EF C3 53  // ...>..&.}......S
    7D70: B0 0E E8 95 FC 8A E0 B0 0F E8 8E FC 8B D8 B8 0E  // ................
    7D80: AA EF B8 0F 55 EF B0 0E E8 7F FC 3C AA 74 0D B0  // ....U......<.t..
    7D90: 0F E8 76 FC 3C 55 74 04 32 C0 5B C3 B0 0E 8A E7  // ..v.<Ut.2.[.....
    7DA0: EF FE C0 8A E3 EF B0 01 0A C0 5B C3 8A EE 8A 36  // ..........[....6
    7DB0: 85 04 06 1F 0A DB 74 25 8A C5 2A C3 F6 E6 8B C8  // ......t%..*.....
    7DC0: 52 32 F6 C1 E2 02 8B C2 D1 E2 2B D5 51 8B C8 F3  // R2........+.Q...
    7DD0: A5 2B FA 2B F2 59 E2 F4 5A E8 05 00 C3 8A DD EB  // .+.+.Y..Z.......
    7DE0: F8 8A C6 F6 E3 8B C8 8A C7 8A E0 32 F6 C1 E2 02  // ...........2....
    7DF0: 8B DA D1 E2 8B F1 2B D5 8B CB F3 AB 2B FA 4E 75  // ......+.....+.Nu
    7E00: F7 C3 2E 8E 1E 0E 03 89 0E 60 04 8A C5 24 60 A8  // .........`...$`.
    7E10: 20 74 06 B9 00 1E E9 94 00 F6 06 87 04 01 0F 85  //  t..............
    7E20: 8B 00 80 3E 49 04 07 74 06 E8 19 FC 74 01 C3 F6  // ...>I..t....t...
    7E30: 06 87 04 08 74 03 CD 42 C3 8A 36 85 04 8A D6 FE  // ....t..B..6.....
    7E40: CA 38 CD 7E 1F 0A C9 74 64 8A E9 8A CE FE C9 EB  // .8.~...td.......
    7E50: 5C 38 D1 74 58 8A CE 80 FD 03 7C 04 8A E9 D0 ED  // \8.tX.....|.....
    7E60: FE C9 EB 49 80 F9 03 7E 44 8A E1 2A E5 0A E4 75  // ...I...~D..*...u
    7E70: 0A 38 CA 74 38 FE CA 38 CA 74 32 8A C5 0A C1 38  // .8.t8..8.t2....8
    7E80: F0 7E 0A 80 FC 02 7E 12 80 FD 02 7F C8 80 FC 03  // .~....~.........
    7E90: 7D BF 8A D6 FE CA 38 D1 74 13 8A CE FE C9 FE C9  // }.....8.t.......
    7EA0: 8A E9 2A EC 80 FE 08 7F 04 FE C1 FE C5 B4 0A E8  // ..*.............
    7EB0: 05 FE C3 2E 8E 1E 0E 03 A2 62 04 32 E4 8B F0 F7  // .........b.2....
    7EC0: 26 4C 04 A3 4E 04 8B C8 E8 7A FB 74 07 80 3E 49  // &L..N....z.t..>I
    7ED0: 04 07 77 02 D1 F9 B4 0C E8 DC FD D1 E6 8B 84 50  // ..w............P
    7EE0: 04 E8 27 FE C3 2E 8E 1E 0E 03 8A 26 49 04 E8 74  // ..'........&I..t
    7EF0: 9C 74 07 C7 06 50 04 00 00 C3 E8 48 FB 74 0B 80  // .t...P.....H.t..
    7F00: FC 07 74 06 77 08 E8 77 FC C3 E8 9F FB C3 80 FC  // ..t.w..w........
    7F10: 13 7C 03 74 1F C3 E8 4E FA 8A D8 8B C1 E8 85 FA  // .|.t...N........
    7F20: 8B 2E 4A 04 52 F6 26 85 04 F7 E5 8B F7 03 F0 5A  // ..J.R.&........Z
    7F30: E8 90 FA C3 E8 30 FA 8A D8 8B C1 E8 67 FA C1 E7  // .....0......g...
    7F40: 03 52 8B 2E 4A 04 C1 E5 03 F7 26 85 04 F7 E5 8B  // .R..J.....&.....
    7F50: F7 03 F0 5A E8 55 FE C3 2E 8E 1E 0E 03 8A 26 49  // ...Z.U........&I
    7F60: 04 E8 E1 FA 74 0C 80 FC 07 74 07 77 40 80 FC 03  // ....t....t.w@...
    7F70: 7F 04 E8 53 FB C3 E8 1E FC C3 E8 EA F9 8A D8 8A  // ...S............
    7F80: C1 8A E6 FE C4 E8 1D FA 2B 3E 4A 04 C1 E7 03 52  // ........+>J....R
    7F90: F7 26 85 04 F7 26 4A 04 C1 E0 03 8B F7 2B F0 5A  // .&...&J......+.Z
    7FA0: 8B 2E 4A 04 C1 E5 03 F7 DD E8 00 FE C3 80 FC 13  // ..J.............
    7FB0: 7C 03 74 C6 C3 E8 AF F9 8A D8 8A C1 8A E6 FE C4  // |.t.............
    7FC0: E8 E2 F9 52 8B 2E 4A 04 F7 26 85 04 F7 E5 2B FD  // ...R..J..&....+.
    7FD0: 8B F7 2B F0 5A F7 DD E8 E9 F9 C3 2E 8E 1E 0E 03  // ..+.Z...........
    7FE0: 2E 8E 06 14 03 E8 5D FA 74 11 80 3E 49 04 07 7C  // ......].t..>I..|
    7FF0: 18 2E 8E 06 12 03 74 03 E9 B1 00 E8 49 FC 8B D8  // ......t.....I...
    8000: 26 8B 07 8B EC 89 46 1A C3 A1 50 04 E8 B7 FC 8B  // &.....F...P.....
    8010: F0 BB 08 00 2B E3 8B EC 80 3E 49 04 06 75 1F B9  // ....+....>I..u..
    8020: 04 00 26 8A 04 88 46 00 45 26 8A 84 00 20 88 46  // ..&...F.E&... .F
    8030: 00 45 83 C6 50 E2 EB B8 00 02 B2 80 EB 17 D1 E6  // .E..P...........
    8040: B9 04 00 E8 56 FC 81 C6 00 20 E8 4F FC 81 EE B0  // ....V.... .O....
    8050: 1F E2 F0 EB E2 2B EB C4 3E 0C 01 32 F6 80 FB 0E  // .....+..>..2....
    8060: 75 09 26 83 7D FE 10 75 02 B6 80 16 1F 8B F5 8B  // u.&.}..u........
    8070: CB F6 C6 80 74 01 47 56 57 F3 A6 5F 5E 74 23 FE  // ....t.GVW.._^t#.
    8080: C0 03 FB F6 C6 80 74 01 47 FE CA 75 E2 FE CC 74  // ......t.G..u...t
    8090: 0F 2E 8E 1E 0E 03 C4 3E 7C 00 B0 80 B2 80 EB CB  // .......>|.......
    80A0: 32 C0 8B E5 03 E3 8B EC 89 46 1A C3 80 3E 49 04  // 2........F...>I.
    80B0: 13 7C 05 75 02 EB 5A C3 2E 8E 06 10 03 E8 18 FC  // .|.u..Z.........
    80C0: 8B F0 8B 1E 85 04 2B E3 8B EC B8 05 08 B9 05 00  // ......+.........
    80D0: BA CE 03 80 3E 49 04 0F 72 1A F6 06 87 04 60 75  // ....>I..r.....`u
    80E0: 13 B4 0A F7 C6 01 00 75 02 B4 05 B0 07 EF B8 05  // .......u........
    80F0: 18 B9 05 01 EF 51 8B CB 26 8A 04 F6 D0 88 46 00  // .....Q..&.....F.
    8100: 45 03 36 4A 04 E2 F1 58 EF B8 00 01 32 D2 E9 44  // E.6J...X....2..D
    8110: FF 2E 8E 06 10 03 A1 50 04 8B D0 32 F6 52 8A C4  // .......P...2.R..
    8120: 32 E4 F7 26 4A 04 F7 26 85 04 5A 03 C2 8B F0 8B  // 2..&J..&..Z.....
    8130: 1E 85 04 2B E3 8B EC 53 8B 3E 4A 04 4F C1 E7 03  // ...+...S.>J.O...
    8140: C1 E6 03 B9 08 00 32 E4 26 8A 04 D0 E4 0A C0 74  // ......2.&......t
    8150: 03 80 CC 01 46 E2 F1 88 66 00 45 03 F7 4B 75 E3  // ....F...f.E..Ku.
    8160: 5B B8 00 01 32 D2 E9 EC FE 33 ED EB 03 BD 01 00  // [...2....3......
    8170: 2E 8E 1E 0E 03 2E 8E 06 14 03 8A 26 49 04 E8 C4  // ...........&I...
    8180: F8 74 0F 2E 8E 06 12 03 80 FC 07 74 05 7C 3D E9  // .t.........t.|=.
    8190: 0B 02 8A E3 8B F0 8A DF 32 FF D1 E3 8B 87 50 04  // ........2.....P.
    81A0: 8B D0 A0 4A 04 F6 E4 32 F6 03 C2 8B F8 D1 E7 0A  // ...J...2........
    81B0: DB 74 0B D0 EB A1 4C 04 03 F8 FE CB 75 FA 8B C6  // .t....L.....u...
    81C0: 0B ED 75 03 F3 AB C3 AA 47 E2 FC C3 50 2E 8E 06  // ..u.....G...P...
    81D0: 14 03 A1 50 04 E8 EE FA 8B F8 A0 50 04 8A 26 4A  // ...P.......P..&J
    81E0: 04 8B E8 58 A8 80 74 08 24 7F C5 36 7C 00 EB 04  // ...X..t.$..6|...
    81F0: C5 36 0C 01 8A FC 32 E4 C1 E0 03 03 F0 80 FF 06  // .6....2.........
    8200: 74 69 D1 E7 8A F3 B0 55 80 E3 03 F6 E3 8A D8 8A  // ti.....U........
    8210: F8 8B C5 50 B2 04 F6 C6 80 75 27 AC E8 55 FA 23  // ...P.....u'..U.#
    8220: C3 AB AC E8 4E FA 23 C3 26 89 85 FE 1F 83 C7 4E  // ....N.#.&......N
    8230: FE CA 75 E7 83 EE 08 81 EF 3E 01 58 E8 72 00 E2  // ..u......>.X.r..
    8240: D2 C3 AC E8 2E FA 23 C3 26 31 05 AC E8 25 FA 23  // ......#.&1...%.#
    8250: C3 26 31 85 00 20 83 C7 50 FE CA 75 E5 83 EE 08  // .&1.. ..P..u....
    8260: 81 EF 3E 01 58 E8 49 00 E2 A9 C3 8B C5 50 B2 04  // ..>.X.I......P..
    8270: F6 C3 80 74 1F AC 26 30 05 AC 26 30 85 00 20 83  // ...t..&0..&0.. .
    8280: C7 50 FE CA 7F EF 83 EE 08 81 EF 3F 01 58 E8 20  // .P.........?.X. 
    8290: 00 E2 DA C3 AC AA AC 26 88 85 FF 1F 83 C7 4F FE  // .......&......O.
    82A0: CA 7F F1 83 EE 08 81 EF 3F 01 58 E8 03 00 E2 BD  // ........?.X.....
    82B0: C3 FE C0 38 E0 72 06 32 C0 81 C7 F0 00 C3 8A 16  // ...8.r.2........
    82C0: 85 04 F6 E2 8B F0 32 F6 8B EA 66 0F B6 06 51 04  // ......2...f...Q.
    82D0: F6 E2 66 0F B7 16 4A 04 83 FA 64 75 03 BA 68 00  // ..f...J...du..h.
    82E0: 83 FA 5A 75 03 BA 60 00 81 FA AF 00 75 03 BA B0  // ..Zu..`.....u...
    82F0: 00 52 F7 E2 66 0F B7 F8 66 0F B6 06 50 04 66 03  // .R..f...f...P.f.
    8300: F8 66 C1 CF 10 03 FA 66 C1 C7 03 81 CF 00 FF 66  // .f.....f.......f
    8310: C1 C7 10 5A 8A E2 4A C1 E2 03 A0 50 04 50 C5 06  // ...Z..J....P.P..
    8320: 0C 01 03 F0 2E 8E 06 10 03 58 57 51 50 9C FC 8B  // .........XWQP...
    8330: CD E8 3B 00 B5 08 AC 8A E0 8A C7 D0 E4 73 02 8A  // ..;..........s..
    8340: C3 26 88 05 66 47 FE CD 75 EF 66 03 FA E2 E2 9D  // .&..fG..u.f.....
    8350: 58 59 5F 83 C7 08 FE C0 38 E0 72 0E 51 32 C0 8B  // XY_.....8.r.Q2..
    8360: CD 49 03 FA 83 C7 08 E2 F9 59 2B F5 E2 BC C3 06  // .I.......Y+.....
    8370: 52 33 C0 8E C0 66 C1 C7 10 8B C7 66 C1 C7 10 E8  // R3...f.....f....
    8380: E3 97 74 16 38 E0 74 12 0F B6 D0 E8 91 C9 8A E0  // ..t.8.t.........
    8390: 66 C1 C7 10 8B F8 66 C1 C7 10 5A 07 C3 80 FC 13  // f.....f...Z.....
    83A0: 7C 0B 0F 84 18 FF 80 FC 62 0F 84 11 FF E8 01 00  // |.......b.......
    83B0: C3 80 FC 11 75 06 80 E3 80 80 CB 0F 50 53 8A DF  // ....u.......PS..
    83C0: 32 FF D1 E3 8B 97 50 04 5B 2E 8E 06 10 03 E8 07  // 2.....P.[.......
    83D0: F9 8B F8 8B 2E 85 04 58 32 F6 52 8B 36 4A 04 56  // .......X2.R.6J.V
    83E0: 8A 26 85 04 C5 36 0C 01 80 FC 0E 75 09 83 7C FE  // .&...6.....u..|.
    83F0: 10 75 03 B4 10 46 F6 E4 03 F0 B6 03 F6 C3 80 75  // .u...F.........u
    8400: 6D B2 C4 B8 02 0F EF 5A 58 50 52 4A 8A E0 57 51  // m......ZXPRJ..WQ
    8410: 51 57 8B CD 32 C0 AA 03 FA E2 FB 5F 47 FE C4 38  // QW..2......_G..8
    8420: D4 76 0A 32 E4 8B CD 49 03 FA 47 E2 FB 59 E2 E0  // .v.2...I..G..Y..
    8430: 59 5F BA C4 03 B0 02 8A E3 EF 5B 4B 5A 51 57 8B  // Y_........[KZQW.
    8440: CD AC 26 8A 25 AA 03 FB E2 F7 5F 47 2B F5 42 3B  // ..&.%....._G+.B;
    8450: D3 76 0A 33 D2 8B CD 49 03 FB 47 E2 FB 59 E2 DD  // .v.3...I..G..Y..
    8460: BA CE 03 B8 03 00 EF B2 C4 B8 02 0F EF C3 B2 CE  // ................
    8470: B8 03 18 EF EB BC 2E 8E 1E 0E 03 80 3E 63 04 B4  // ............>c..
    8480: 74 0B BA CC 03 EC A8 01 75 04 CD 42 C3 C3 E8 D1  // t.......u..B....
    8490: F8 0A FF 75 1C 8A E3 80 E4 1F 80 26 66 04 E0 08  // ...u.......&f...
    84A0: 26 66 04 E8 2D 00 8A 1E 66 04 80 E3 20 B1 05 D2  // &f..-...f... ...
    84B0: EB E8 91 F5 74 19 A0 66 04 24 DF 80 E3 01 74 02  // ....t..f.$....t.
    84C0: 0C 20 A2 66 04 24 10 0C 02 0A D8 E8 53 00 C3 E8  // . .f.$......S...
    84D0: 7E F8 C3 53 50 80 E3 0F 8A FB D0 E3 81 E3 10 07  // ~..SP...........
    84E0: 0A DF E8 60 F5 74 0E B4 00 8A C3 E8 2C F3 0B ED  // ...`.t......,...
    84F0: 74 03 26 88 1D 8A C3 E8 0B 00 0B ED 74 04 26 88  // t.&.........t.&.
    8500: 5D 10 58 5B C3 8A E0 1E 2E 8E 1E 0E 03 80 3E 49  // ].X[..........>I
    8510: 04 33 1F 7F 08 8A C4 B4 11 E8 FE F2 C3 E8 30 F8  // .3............0.
    8520: C3 9C FA E8 9F 05 B2 C0 B9 03 00 B4 01 8A C4 EE  // ................
    8530: 8A C3 EE 0B ED 74 04 47 26 88 1D FE C4 80 C3 02  // .....t.G&.......
    8540: E2 EB B0 20 EE 9D C3 2E 8E 1E 0E 03 8A 26 49 04  // ... .........&I.
    8550: E8 F2 F4 74 0A 80 FC 07 77 06 74 03 E8 C0 F5 C3  // ...t....w.t.....
    8560: 80 FC 13 7C 03 74 4C C3 8A D8 E8 BB F7 BA CE 03  // ...|.tL.........
    8570: B0 08 EF 2E 8E 1E 10 03 F6 C3 80 75 1C B2 C4 B8  // ...........u....
    8580: 02 FF EF 8A 25 C6 05 00 8A E3 EF 8A 25 B4 FF 88  // ....%.......%...
    8590: 25 EF B2 CE B8 08 FF EF C3 B8 03 18 EF B2 C4 B0  // %...............
    85A0: 02 8A E3 EF 8A 25 B4 FF 88 25 EF B2 CE B8 03 00  // .....%...%......
    85B0: EF EB E1 50 2E 8E 06 10 03 A1 4A 04 C1 E0 03 F7  // ...P......J.....
    85C0: E2 03 C1 8B F8 58 26 88 05 C3 2E 8E 1E 0E 03 8A  // .....X&.........
    85D0: 26 49 04 E8 6F F4 74 0F 80 FC 07 77 0B 74 08 E8  // &I..o.t....w.t..
    85E0: 5F F5 8B EC 89 46 1A C3 80 FC 13 7C 03 74 29 C3  // _....F.....|.t).
    85F0: E8 35 F7 8A CC 2E 8E 1E 10 03 BA CE 03 32 FF B8  // .5...........2..
    8600: 04 03 EF D0 E7 8A 1D 22 D9 74 03 80 CF 01 FE CC  // .......".t......
    8610: 7D F0 8B EC 88 7E 1A C3 A1 4A 04 C1 E0 03 F7 E2  // }....~...J......
    8620: 03 C1 8B F8 2E 8E 1E 10 03 8A 05 8B EC 88 46 1A  // ..............F.
    8630: C3 2E 8E 1E 0E 03 8A 3E 62 04 8A CF D0 E1 32 ED  // .......>b.....2.
    8640: BE 50 04 03 F1 8B 14 8A 0E 49 04 3C 0D 76 4A 2E  // .P.......I.<.vJ.
    8650: 8E 06 14 03 E8 EE F3 75 33 8A 1E 4A 04 8A F8 8A  // .......u3..J....
    8660: C6 F6 E3 8A CA 03 C8 D1 E1 03 0E 4E 04 8B F9 8A  // ...........N....
    8670: C7 AA D1 E9 41 FE C2 38 DA 73 59 89 14 8B 16 63  // ....A..8.sY....c
    8680: 04 B0 0E 8A E5 EF 8A E1 FE C0 EF C3 2E 8E 06 12  // ................
    8690: 03 80 F9 07 74 C3 E9 83 00 75 04 32 D2 EB 0F 3C  // ....t....u.2...<
    86A0: 0A 75 1D 3A 36 84 04 75 03 E9 93 00 FE C6 89 14  // .u.:6..u........
    86B0: E8 92 F3 75 05 80 F9 07 7F 05 8B C2 E8 4C F6 C3  // ...u.........L..
    86C0: 3C 07 75 04 E8 F1 7E C3 3C 08 75 83 0A D2 74 DE  // <.u...~.<.u...t.
    86D0: FE CA EB DA 32 FF 32 D2 2B CB 3A 36 84 04 74 06  // ....2.2.+.:6..t.
    86E0: FE C6 03 CB EB 95 89 14 8B 16 63 04 B0 0E 8A E5  // ..........c.....
    86F0: EF 8A E1 FE C0 EF 2B FB 2B FB 26 8A 65 02 50 8B  // ......+.+.&.e.P.
    8700: 3E 4E 04 8B F3 D1 E6 03 F7 A0 84 04 F6 E3 8B C8  // >N..............
    8710: 06 1F F3 A5 8B CB 58 B0 20 F3 AB C3 B9 01 00 B4  // ......X. .......
    8720: 0A E8 C2 C6 FE C2 3A 16 4A 04 74 03 89 14 C3 32  // ......:.J.t....2
    8730: FF 32 D2 89 14 3A 36 84 04 74 2E FE C6 EB ED 89  // .2...:6..t......
    8740: 14 2E 8E 06 14 03 E8 FC F2 74 0E 2E 8E 06 12 03  // .........t......
    8750: 80 F9 07 74 04 32 FF EB 10 8B C2 E8 AD F5 8B F9  // ...t.2..........
    8760: D1 E7 4F 8B 1E 4A 04 EB 91 33 C9 8A 36 84 04 8A  // ..O..J...3..6...
    8770: 16 4A 04 FE CA B0 01 E9 70 F7 2E 8E 1E 0E 03 F6  // .J......p.......
    8780: 06 87 04 08 74 03 CD 42 C3 E8 76 F6 8B EC C6 46  // ....t..B..v....F
    8790: 1B 00 C3 2E 8E 1E 0E 03 8A DF 32 FF D1 E3 89 97  // ..........2.....
    87A0: 50 04 D0 EB 38 1E 62 04 75 05 8B C2 E8 5C F5 C3  // P...8.b.u....\..
    87B0: 2E 8E 1E 0E 03 8A DF 32 FF D1 E3 8B 97 50 04 8B  // .......2.....P..
    87C0: 0E 60 04 8B EC 89 4E 16 89 56 12 C3 2E 8E 1E 0E  // .`....N..V......
    87D0: 03 A0 87 04 24 80 0A 06 49 04 8A 26 4A 04 F6 06  // ....$...I..&J...
    87E0: 87 04 08 75 2D E8 5D F2 74 07 80 3E 49 04 07 7F  // ...u-.].t..>I...
    87F0: 21 51 8A CC 8A 2E 84 04 BE BD 87 81 FE C6 87 74  // !Q.............t
    8800: 10 2E 3B 0C 74 05 83 C6 03 EB F0 24 80 2E 0A 44  // ..;.t......$...D
    8810: 02 59 8A 3E 62 04 8B EC 89 46 1A 89 5E 0E 89 4E  // .Y.>b....F..^..N
    8820: 16 89 56 12 C3 84 18 23 84 2B 33 84 2A 32 2E 8E  // ..V....#.+3.*2..
    8830: 1E 0E 03 3C 04 7F 1B 50 52 BA CC 03 EC A8 01 5A  // ...<...PR......Z
    8840: 58 74 08 80 3E 63 04 D4 74 08 C3 80 3E 63 04 B4  // Xt..>c..t...>c..
    8850: 75 F8 3C 1C 73 F4 32 E4 8B E8 D1 E5 2E FF A6 F9  // u.<.s.2.........
    8860: 87 31 88 51 88 63 88 98 88 E2 87 E2 87 E2 87 BD  // .1.Q.c..........
    8870: 88 D5 88 D9 88 E2 87 E2 87 E2 87 E2 87 E2 87 E2  // ................
    8880: 87 07 89 E2 87 0B 89 26 89 E2 87 65 89 E2 87 73  // .......&...e...s
    8890: 89 8E 89 95 89 A1 89 C5 89 80 3E 49 04 13 74 15  // ..........>I..t.
    88A0: E8 BF F4 8B C3 86 E0 E8 70 EF 0B ED 74 07 8A C7  // ........p...t...
    88B0: 32 FF 26 88 01 E8 93 F4 C3 E8 A6 F4 8A C7 E8 44  // 2.&............D
    88C0: FC 0B ED 74 F0 26 88 7D 11 EB EA 80 3E 49 04 13  // ...t.&.}....>I..
    88D0: 74 E3 06 E8 8C F4 1F 0B ED 74 07 8B F2 B9 11 00  // t........t......
    88E0: F3 A4 8B F2 E8 DE 01 32 E4 B9 10 00 B2 C0 9C FA  // .......2........
    88F0: 8A C4 EE AC EE 9D FE C4 E2 F4 AC E8 07 FC EB B5  // ................
    8900: 80 FB 01 77 B0 E8 43 F4 B2 C0 B0 30 E8 FB F0 24  // ...w..C....0...$
    8910: F7 80 26 65 04 DF 80 FB 00 74 07 0C 08 80 0E 65  // ..&e.....t.....e
    8920: 04 20 EE EB 90 E8 9D 01 8A C3 B2 C0 E8 DB F0 8B  // . ..............
    8930: C8 EE B0 20 EE 8B EC 88 4E 0F E9 78 FF B3 11 EB  // ... ....N..x....
    8940: E4 8B FA E8 05 F4 B9 10 00 32 E4 B2 C0 8A C4 9C  // .........2......
    8950: FA EE 42 EC 26 88 05 FE C4 4A EE 9D 47 E2 EE 9C  // ..B.&....J..G...
    8960: FA B0 11 EE 42 EC 9D 26 88 05 E8 E3 F3 EB 5A E8  // ....B..&......Z.
    8970: CE 00 C3 8B FA 51 8B C3 26 8A 35 26 8A 6D 01 26  // .....Q..&.5&.m.&
    8980: 8A 4D 02 E8 CA 00 83 C7 03 43 59 E2 E8 C3 0A DB  // .M.......CY.....
    8990: 75 1A E8 B6 F3 B2 C0 B0 30 E8 6E F0 24 7F F6 C7  // u.......0.n.$...
    89A0: 01 74 02 0C 80 B4 30 E8 70 EE EB 1D FE CB 75 1C  // .t....0.p.....u.
    89B0: E8 98 F3 B2 C0 B0 30 E8 50 F0 EE A8 80 75 03 C0  // ......0.P....u..
    89C0: E7 02 B4 34 8A C7 E8 51 EE E8 7F F3 C3 8A C3 E8  // ...4...Q........
    89D0: D1 00 8B EC 89 4E 16 88 76 13 C3 8B FA 51 8B C3  // .....N..v....Q..
    89E0: E8 C3 00 26 88 35 26 88 6D 01 26 88 4D 02 83 C7  // ...&.5&.m.&.M...
    89F0: 03 43 59 E2 E8 C3 BA C6 03 8A C3 EE C3 BA C6 03  // .CY.............
    8A00: EC 32 E4 8B EC 89 46 0E C3 E8 3F F3 B2 C0 B0 34  // .2....F...?....4
    8A10: E8 F7 EF 8A F8 EE B0 30 E8 EF EF B3 01 A8 80 75  // .......0.......u
    8A20: 05 B3 00 C0 EF 02 8B EC 89 5E 0E EB 9C 51 8B C3  // .........^...Q..
    8A30: E8 73 00 E8 2A 00 8A C3 E8 52 00 43 59 E2 EE C3  // .s..*....R.CY...
    8A40: F6 06 89 04 02 74 03 E8 16 00 8A C3 E8 39 00 C3  // .....t.......9..
    8A50: F6 06 89 04 02 74 03 E8 06 00 8A C3 E8 2E 00 C3  // .....t..........
    8A60: 50 B0 1E F6 E6 50 B0 3B F6 E5 50 B0 0B F6 E1 59  // P....P.;..P....Y
    8A70: 03 C1 59 03 C1 B1 64 F6 F1 80 FC 32 7C 02 FE C0  // ..Y...d....2|...
    8A80: 8A F0 8A E8 8A C8 58 C3 52 E8 39 00 5A 53 8B DA  // ......X.R.9.ZS..
    8A90: BA C8 03 9C FA EE 42 8A C7 EE 8A C5 EE 8A C1 EE  // ......B.........
    8AA0: 9D 5B C3 E8 1F 00 53 9C FA BA C7 03 EE 42 42 EC  // .[....S......BB.
    8AB0: 8A F8 EB 00 EB 00 EC 8A E8 EB 00 EB 00 EC 8A C8  // ................
    8AC0: 8A F7 9D 5B C3 50 51 E8 81 F2 B9 FF 7F EC A8 08  // ...[.PQ.........
    8AD0: 75 02 E2 F9 59 58 C3 2E 8E 1E 0E 03 8B F8 24 0F  // u...YX........$.
    8AE0: 81 E7 F0 00 C1 EF 03 83 FF 06 7F 18 2E FF A5 89  // ................
    8AF0: 8A 91 8A A6 8A 44 8B A0 8B 3C 03 74 08 3C 04 7F  // .....D...<.t.<..
    8B00: 03 E8 CF 01 C3 BA C4 03 B0 03 8A E3 EF C3 3C 04  // ..............<.
    8B10: 77 F2 50 53 50 52 8B 16 63 04 B0 07 E8 EB EE 8A  // w.PSPR..c.......
    8B20: E0 D0 EC 80 E4 01 A8 40 74 03 80 CC 02 B0 12 E8  // .......@t.......
    8B30: D8 EE 40 A3 85 04 B0 09 E8 CF EE A8 80 74 04 D1  // ..@..........t..
    8B40: 2E 85 04 A1 85 04 8B D0 3D F4 01 73 1B BA E0 01  // ........=..s....
    8B50: 3D C2 01 73 13 BA 90 01 3D 7C 01 73 0B BA 5E 01  // =..s....=|.s..^.
    8B60: 3D 4A 01 73 03 BA C8 00 89 16 85 04 5A 58 C6 06  // =J.s........ZX..
    8B70: 84 04 FF E8 5D 01 5B 58 8A DF 32 FF 0A C0 74 0E  // ....].[X..2...t.
    8B80: B3 0E 3C 01 74 08 B3 08 3C 02 74 02 B3 10 8A CB  // ..<.t...<.t.....
    8B90: 8A E9 81 E9 01 02 80 F9 08 7E 04 81 E9 01 01 87  // .........~......
    8BA0: 1E 85 04 53 E8 5B F2 5B E8 85 02 C3 0A C0 74 11  // ...S.[.[......t.
    8BB0: FE C8 74 1A FE C8 74 38 FE C8 74 3C FE C8 74 40  // ..t...t8..t<..t@
    8BC0: C3 89 2E 7C 00 8C 06 7E 00 C3 8C C8 8E C0 FE CA  // ...|...~........
    8BD0: 0A DB 74 07 32 FF 2E 8A 97 84 8B 89 0E 85 04 88  // ..t.2...........
    8BE0: 16 84 04 89 2E 0C 01 8C 06 0E 01 C3 00 0D 18 2A  // ...............*
    8BF0: E8 09 03 B9 0E 00 EB D6 BD 94 5A B9 08 00 EB CA  // ..........Z.....
    8C00: BD A7 62 B9 10 00 EB C2 0A C0 75 BD 8B 0E 85 04  // ..b.......u.....
    8C10: 8A 16 84 04 80 FF 07 77 35 80 FF 01 77 10 0A FF  // .......w5...w...
    8C20: 75 06 C4 2E 7C 00 EB 26 C4 2E 0C 01 EB 20 80 FF  // u...|..&..... ..
    8C30: 02 75 0B 8C CD 8E C5 2E 8B 2E 86 73 EB 10 0E 07  // .u.........s....
    8C40: 8A DF 32 FF 80 EB 02 D1 E3 2E 8B AF F7 8B 8B C5  // ..2.............
    8C50: 8B EC 89 4E 16 89 56 12 89 46 0A 8C 46 1E C3 A7  // ...N..V..F..F...
    8C60: 62 94 5A 94 5E 94 62 A7 62 A7 72 53 06 8A 26 49  // b.Z.^.b.b.rS..&I
    8C70: 04 E8 CD C3 26 8A 47 02 26 8A 67 33 F6 C4 01 74  // ....&.G.&.g3...t
    8C80: 22 BD A7 62 3C 10 7D 0E E8 71 02 8C 06 0E 01 3C  // "..b<.}..q.....<
    8C90: 0E 7D 07 BD 94 5A 8C 0E 0E 01 89 2E 0C 01 E8 10  // .}...Z..........
    8CA0: 01 EB 2D B4 84 3C 10 7D 13 B4 81 3C 0E 74 0D 7F  // ..-..<.}...<.t..
    8CB0: 15 B4 02 3C 08 74 05 80 CC 80 EB 0A 26 F6 47 05  // ...<.t......&.G.
    8CC0: 01 74 03 80 E4 7F 86 C4 32 DB E8 06 00 E8 C9 01  // .t......2.......
    8CD0: 07 5B C3 8B F8 8B F2 BA CE 03 EC B8 05 00 EF B8  // .[..............
    8CE0: 06 04 EF B2 C4 EC B8 02 04 EF B8 04 07 EF 8B D6  // ................
    8CF0: 8B C7 50 24 7F 0A C0 74 22 0E 07 33 D2 B9 00 01  // ..P$...t"..3....
    8D00: 3C 04 75 07 B7 10 BD A7 62 EB 10 FE C8 75 07 B7  // <.u.....b....u..
    8D10: 0E E8 E8 01 EB 05 B7 08 BD 94 5A E8 2D 00 58 A8  // ..........Z.-.X.
    8D20: 80 74 00 BA C4 03 B8 02 03 EF B8 04 02 EF B2 CC  // .t..............
    8D30: EC A8 01 B8 06 0E 75 02 B4 0A B2 CE 50 EC 58 EF  // ......u.....P.X.
    8D40: B0 04 EE 32 C0 EE B8 05 10 EF C3 FC 0B C9 75 01  // ...2..........u.
    8D50: C3 80 FF 0E 75 0A 26 83 7E FE 10 75 03 80 CD 80  // ....u.&.~..u....
    8D60: 1E 06 1F 2E 8E 06 10 03 8B FA C1 E7 05 B0 40 53  // ..............@S
    8D70: 80 E3 03 F6 E3 5B F6 C3 04 74 02 04 20 86 E0 8B  // .....[...t.. ...
    8D80: D0 03 FA 8B F5 E3 28 32 C0 86 FB 32 FF 51 F6 C5  // ......(2...2.Q..
    8D90: 80 74 01 46 8B CB F3 A4 83 FB 20 74 07 B9 20 00  // .t.F...... t.. .
    8DA0: 2B CB F3 AA 59 F6 C5 80 74 01 46 FE C9 75 DE 1F  // +...Y...t.F..u..
    8DB0: C3 8A 26 49 04 50 06 57 C4 3E A8 04 26 C4 7D 0C  // ..&I.P.W.>..&.}.
    8DC0: 8C C5 0B EF 74 30 8B EF 83 C7 07 26 8A 05 3C FF  // ....t0.....&..<.
    8DD0: 74 24 38 E0 74 03 47 EB F2 8B FD 26 8A 05 FE C8  // t$8.t.G....&....
    8DE0: A2 84 04 26 8B 45 01 A3 85 04 26 C4 7D 03 89 3E  // ...&.E....&.}..>
    8DF0: 0C 01 8C 06 0E 01 5F 07 58 C3 26 F6 47 33 01 74  // ......_.X.&.G3.t
    8E00: 01 C3 C4 1E A8 04 26 C4 5F 08 8C C0 0B C3 74 1F  // ......&._.....t.
    8E10: BF 0B 00 26 8A 01 3C FF 74 15 47 38 06 49 04 75  // ...&..<.t.G8.I.u
    8E20: F2 26 8A 07 32 E4 87 06 85 04 8B D8 E8 01 00 C3  // .&..2...........
    8E30: 8B 16 63 04 8A 26 85 04 FE CC 80 E4 1F 9C FA 80  // ..c..&..........
    8E40: FA D4 74 0B B0 14 EE 42 EC 24 E0 0A C4 EE 4A B0  // ..t....B.$....J.
    8E50: 09 EE 42 EC 24 E0 0A C4 EE 9D 8A C8 8B C3 8A 16  // ..B.$...........
    8E60: 85 04 F6 F2 80 3E 84 04 FF 75 07 A2 84 04 FE 0E  // .....>...u......
    8E70: 84 04 F6 E2 F6 C1 80 74 02 D1 E0 48 8A E0 B0 12  // .......t...H....
    8E80: 8B 16 63 04 EF A0 4A 04 8A 26 84 04 FE C4 F6 E4  // ..c...J..&......
    8E90: D1 E0 05 00 01 A3 4C 04 C3 8A 26 49 04 50 06 57  // ......L...&I.P.W
    8EA0: C4 3E A8 04 26 C4 7D 08 8C C5 0B EF 74 4A 8B EF  // .>..&.}.....tJ..
    8EB0: 83 C7 0B 26 8A 05 3C FF 74 3E 38 E0 74 03 47 EB  // ...&..<.t>8.t.G.
    8EC0: F2 8B FD 26 8A 3D 26 8A 5D 01 26 8B 4D 02 26 8B  // ...&.=&.].&.M.&.
    8ED0: 55 04 26 8A 45 0A 3C FF 74 02 FE C8 50 A0 84 04  // U.&.E.<.t...P...
    8EE0: FE C0 F6 26 85 04 A3 85 04 58 A2 84 04 26 C4 7D  // ...&.....X...&.}
    8EF0: 06 8B EF 32 C0 E8 DB FD 5F 07 58 C3 50 53 51 52  // ...2...._.X.PSQR
    8F00: 2E A1 18 03 0B C0 74 09 2E 8B 2E 86 73 0E 07 EB  // ......t.....s...
    8F10: 08 B8 30 11 B7 02 E8 CD BE 5A 59 5B 58 C3 3C 04  // ..0......ZY[X.<.
    8F20: 7C 01 C3 E3 FD 53 2E 8E 1E 0E 03 86 FB 32 FF D1  // |....S.......2..
    8F30: E3 8B FB 81 C7 50 04 8B 35 5B 89 15 56 8B F0 51  // .....P..5[..V..Q
    8F40: 53 26 8A 46 00 45 3C 0D 7F 1F 75 04 32 D2 EB 40  // S&.F.E<...u.2..@
    8F50: 3C 0A 74 32 3C 07 75 05 E8 5D 76 EB 62 3C 08 75  // <.t2<.u..]v.b<.u
    8F60: 08 0A D2 74 5A FE CA EB 27 F7 C6 02 00 74 05 26  // ...tZ...'....t.&
    8F70: 8A 5E 00 45 B9 01 00 B4 09 E8 6A BE FE C2 3A 16  // .^.E......j...:.
    8F80: 4A 04 72 0C 32 D2 89 15 3A 36 84 04 73 06 FE C6  // J.r.2...:6..s...
    8F90: 89 15 EB 2B 50 E8 AD EA 75 08 B8 00 08 E8 46 BE  // ...+P...u.....F.
    8FA0: EB 09 80 3E 49 04 07 74 F1 32 E4 86 3E 62 04 53  // ...>I..t.2..>b.S
    8FB0: 8A FC 55 E8 25 00 5D 5B 86 3E 62 04 58 8B 15 5B  // ..U.%.][.>b.X..[
    8FC0: 59 E2 15 5A F7 C6 01 00 75 02 89 15 8B 05 3A 3E  // Y..Z....u.....:>
    8FD0: 62 04 75 03 E8 34 ED C3 E9 64 FF 33 C9 8A 36 84  // b.u..4...d.3..6.
    8FE0: 04 8A 16 4A 04 FE CA B8 01 06 E8 F9 BD C3 2E 8E  // ...J............
    8FF0: 1E 0E 03 0A C0 75 0D E8 18 00 8B EC 89 5E 0E C6  // .....u.......^..
    9000: 46 1A 1A C3 3C 01 75 09 E8 41 00 8B EC C6 46 1A  // F...<.u..A....F.
    9010: 1A C3 A0 8A 04 BF 84 90 2E 3A 05 72 04 BB FF FF  // .........:.r....
    9020: C3 32 E4 D1 E0 03 F8 2E 8B 5D 04 0A DB 74 05 0A  // .2.......]...t..
    9030: FF 75 04 C3 86 FB C3 A0 10 04 24 30 3C 30 74 06  // .u........$0<0t.
    9040: F6 C3 01 75 EF C3 F6 C3 01 74 E9 C3 BF 84 90 2E  // ...u.....t......
    9050: 8A 0D 32 C0 83 C7 04 2E 3B 1D 74 12 86 FB 2E 3B  // ..2.....;.t....;
    9060: 1D 74 0B 83 C7 02 FE C0 38 C8 7E EB B0 FF A2 8A  // .t......8.~.....
    9070: 04 C3 BB 08 00 F6 06 89 04 02 74 0E BB 07 00 BA  // ..........t.....
    9080: CC 03 EC A8 01 74 18 BB 08 00 BA B4 03 E8 DF EC  // .....t..........
    9090: 74 21 B7 01 E8 8C E9 80 FA D4 74 17 86 FB C3 BA  // t!........t.....
    90A0: D4 03 E8 CA EC 74 0C B7 02 E8 77 E9 80 FA B4 74  // .....t....w....t
    90B0: 02 86 FB C3 0F 08 0F 08 0F 08 0F 08 03 01 03 01  // ................
    90C0: 01 01 00 08 01 01 01 01 01 01 01 01 0F 01 0F 08  // ................
    90D0: 0F 04 00 02 0F 02 01 01 0F 01 FF 01 FF E0 0F 00  // ................
    90E0: 00 00 00 07 02 08 FF 0E 00 00 3F 00 10 01 08 00  // ..........?.....
    90F0: 00 00 00 01 00 02 02 01 00 04 04 01 00 05 02 05  // ................
    9100: 00 06 01 06 05 06 00 08 01 08 00 07 02 07 06 07  // ................
    9110: CA 00 34 00 90 00 96 00 00 00 00 00 00 00 5F 57  // ..4..........._W
    9120: C3 90 50 66 52 E8 F4 FF FF FF 81 EF 10 00 00 00  // ..PfR...........
    9130: 2E 8B 07 66 BA F8 0C EF 66 BA FC 0C ED 32 C0 66  // ...f....f....2.f
    9140: 8B F8 66 5A 58 C3 66 B8 4F 03 66 52 66 56 53 57  // ..fZX.f.O.fRfVSW
    9150: 50 0A FF 75 44 E8 C8 FF FF FF 66 33 F6 66 BB 53  // P..uD.....f3.f.S
    9160: 00 E8 48 00 00 00 C1 E8 10 F6 C4 40 75 2B 66 81  // ..H........@u+f.
    9170: E2 FF 02 66 D1 E2 66 8B C2 66 40 C1 E0 10 66 8B  // ...f..f..f@...f.
    9180: C2 66 BB 13 00 E8 30 00 00 00 66 BB 12 00 E8 27  // .f....0...f....'
    9190: 00 00 00 66 58 32 E4 66 50 58 5F 5B 66 5E 66 5A  // ...fX2.fPX_[f^fZ
    91A0: C3 90 66 B8 4F 03 C3 90 66 B8 4F 03 C3 90 66 52  // ..f.O...f.O...fR
    91B0: E8 11 00 00 00 ED 66 5A C3 90 66 52 E8 05 00 00  // ......fZ..fR....
    91C0: 00 EF 66 5A C3 90 66 8B D7 50 33 C0 66 8B C3 66  // ..fZ..f..P3.f..f
    91D0: 03 C6 C1 E0 02 EF 66 83 C2 04 58 C3 92 39 85 39  // ......f...X..9.9
    91E0: 85 39 85 39 70 39 70 39 70 39 70 39 B2 35 29 36  // .9.9p9p9p9p9.5)6
    91F0: 53 36 94 37 93 37 93 37 D9 37 3E 38 6E 38 2B 39  // S6.7.7.7.7>8n8+9
    9200: 54 39 54 39 CB 37 BE 37 BE 37 BE 37 BE 37 BE 37  // T9T9.7.7.7.7.7.7
    9210: D9 37 3E 38 6E 38 2B 39 59 39 9F 39 54 39 54 39  // .7>8n8+9Y9.9T9T9
    9220: FF FF FF FF FF FF 00 00 FF FF 00 00 FF FF 00 00  // ................
    9230: FF 00 00 00 FF 00 00 00 FF 00 00 00 FF 00 00 00  // ................
    9240: 00 00 08 10 00 08 10 18 00 08 10 18 B6 33 01 B6  // .............3..
    9250: 33 02 C4 47 03 A4 47 03 DB 34 03 8F 34 03 B7 33  // 3..G..G..4..4..3
    9260: 04 D0 33 04 E0 33 04 B6 33 03 00 00 00 00 63 3B  // ..3..3..3.....c;
    9270: 00 02 63 3B 01 02 63 3B 02 02 63 3B 03 02 63 3B  // ..c;..c;..c;..c;
    9280: 04 02 63 3B 05 02 5D 3D 00 02 5D 3D 01 02 5D 3D  // ..c;..]=..]=..]=
    9290: 02 02 5D 3D 03 02 5D 3D 04 02 5D 3D 05 02 92 3D  // ..]=..]=..]=...=
    92A0: 00 02 92 3D 01 02 92 3D 02 02 92 3D 03 02 92 3D  // ...=...=...=...=
    92B0: 04 02 92 3D 05 02 CD 3F 00 02 CD 3F 01 02 CD 3F  // ...=...?...?...?
    92C0: 02 02 CD 3F 03 02 CD 3F 04 02 CD 3F 05 02 CD 3F  // ...?...?...?...?
    92D0: 00 02 CD 3F 01 02 CD 3F 02 02 CD 3F 03 02 CD 3F  // ...?...?...?...?
    92E0: 04 02 CD 3F 05 02 94 3E 00 02 94 3E 01 02 94 3E  // ...?...>...>...>
    92F0: 02 02 94 3E 03 02 94 3E 04 02 94 3E 05 02 D0 3E  // ...>...>...>...>
    9300: 00 02 D0 3E 01 02 D0 3E 02 02 D0 3E 03 02 D0 3E  // ...>...>...>...>
    9310: 04 02 D0 3E 05 02 41 3E 00 02 41 3E 01 02 41 3E  // ...>..A>..A>..A>
    9320: 02 02 41 3E 03 02 41 3E 04 02 41 3E 05 02 75 3E  // ..A>..A>..A>..u>
    9330: 00 02 75 3E 01 02 75 3E 02 02 75 3E 03 02 75 3E  // ..u>..u>..u>..u>
    9340: 04 02 75 3E 05 02 25 42 00 00 58 42 01 00 58 42  // ..u>..%B..XB..XB
    9350: 02 00 45 42 00 00 33 41 00 02 2C 3F 00 02 2C 3F  // ..EB..3A..,?..,?
    9360: 01 02 2C 3F 02 02 2C 3F 03 02 2C 3F 04 02 2C 3F  // ..,?..,?..,?..,?
    9370: 05 02 4B 41 00 02 A0 43 05 00 A0 43 01 00 A0 43  // ..KA...C...C...C
    9380: 00 00 A0 43 02 00 E1 43 00 00 E1 43 02 00 26 44  // ...C...C...C..&D
    9390: 00 00 B6 40 00 02 B6 40 01 02 B6 40 02 02 B6 40  // ...@...@...@...@
    93A0: 03 02 B6 40 04 02 B6 40 05 02 72 42 00 00 9A 42  // ...@...@..rB...B
    93B0: 00 00 1B 43 00 00 96 43 00 00 7A 3F 00 02 7A 3F  // ...C...C..z?..z?
    93C0: 01 02 7A 3F 02 02 7A 3F 03 02 7A 3F 04 02 7A 3F  // ..z?..z?..z?..z?
    93D0: 05 02 95 43 00 01 95 43 00 01 99 3C 00 02 99 3C  // ...C...C...<...<
    93E0: 01 02 99 3C 02 02 99 3C 03 02 99 3C 04 02 99 3C  // ...<...<...<...<
    93F0: 05 02 BA 42 00 00 96 43 00 00 96 43 00 00 96 43  // ...B...C...C...C
    9400: 00 00 CB 41 00 00 BD 3D 00 02 BD 3D 01 02 BD 3D  // ...A...=...=...=
    9410: 02 02 BD 3D 03 02 BD 3D 04 02 BD 3D 05 02 EC 3D  // ...=...=...=...=
    9420: 00 02 EC 3D 01 02 EC 3D 02 02 EC 3D 03 02 EC 3D  // ...=...=...=...=
    9430: 04 02 EC 3D 05 02 22 3E 00 02 22 3E 01 02 22 3E  // ...=..">..">..">
    9440: 02 02 22 3E 03 02 22 3E 04 02 22 3E 05 02 DD 42  // ..">..">..">...B
    9450: 00 00 00 43 00 00 BE 3E 01 02 BE 3E 02 02 1A 3F  // ...C...>...>...?
    9460: 01 02 1A 3F 02 02 A6 00 02 01 EE 94 00 00 00 00  // ...?............
    9470: 00 00 56 AE 00 00 BA 96 00 00 00 00 28 98 00 00  // ..V.........(...
    9480: 00 00 F2 98 0A 9D 00 00 00 00 00 00 00 00 00 00  // ................
    9490: 06 97 E0 A1 5A 97 00 00 AC 97 00 00 00 00 00 00  // ....Z...........
    94A0: 00 00 00 00 00 00 00 00 00 00 00 00 8C A2 FE A2  // ................
    94B0: 72 A3 00 00 B6 A3 00 00 04 A7 00 00 86 A4 44 A6  // r.............D.
    94C0: D0 A7 2E A9 70 A9 E2 C6 00 00 00 00 84 A9 4A AB  // ....p.........J.
    94D0: E2 C4 00 00 44 C6 54 AB 00 00 20 AD 00 00 00 00  // ....D.T... .....
    94E0: 00 00 66 AD 4E AE 00 00 00 00 00 00 00 00 00 00  // ..f.N...........
    94F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9500: 86 C8 6A B1 76 B2 6C C2 88 C4 00 00 4A 00 02 01  // ..j.v.l.....J...
    9510: 00 00 00 00 00 00 6C C9 C0 CA 08 CB 0C CE A6 D4  // ......l.........
    9520: AC D6 00 00 00 00 68 CE 74 D2 C8 D2 C8 D6 64 D3  // ......h.t.....d.
    9530: 00 00 68 D3 00 00 00 00 00 00 00 00 7C D3 68 D4  // ..h.........|.h.
    9540: 00 00 00 00 00 00 6E D4 00 00 00 00 74 CE 00 00  // ......n.....t...
    9550: 00 00 00 00 00 00 CC 01 02 01 00 08 37 00 00 02  // ............7...
    9560: 00 00 E3 0D 01 05 80 29 00 F4 00 00 01 05 53 39  // .......)......S9
    9570: 00 F4 00 00 01 05 00 00 2C A8 01 00 01 05 01 00  // ........,.......
    9580: 00 F4 00 00 1A 05 00 04 2C 05 00 FF F3 00 00 01  // ........,.......
    9590: 01 81 29 00 01 01 54 39 00 01 05 00 00 2D A8 01  // ..)...T9.....-..
    95A0: 00 01 01 01 00 00 01 05 85 29 00 00 3D 00 01 05  // .........)..=...
    95B0: F7 3A 00 00 3D 00 01 05 00 00 31 A8 01 00 01 05  // .:..=.....1.....
    95C0: 01 00 00 00 3D 00 14 05 00 06 0E 0D 00 3F 00 2C  // ....=........?.,
    95D0: 05 00 01 00 00 00 01 01 86 29 00 01 01 F8 3A 00  // .........)....:.
    95E0: 01 05 00 00 32 A8 01 00 01 01 01 00 00 01 05 50  // ....2..........P
    95F0: 28 EB 0F E4 60 01 05 00 00 90 A6 01 00 01 05 01  // (...`...........
    9600: 00 EB 0F E4 60 01 05 6E 29 00 00 00 00 01 05 00  // ....`..n).......
    9610: 00 1A A8 01 00 01 05 01 00 00 00 00 00 01 05 72  // ...............r
    9620: 29 FF FF 0F 00 01 05 00 00 1E A8 01 00 01 05 01  // )...............
    9630: 00 FF FF 0F 00 01 05 00 00 10 A8 01 00 01 00 64  // ...............d
    9640: 29 01 00 01 05 00 00 11 A8 01 00 01 00 65 29 01  // )............e).
    9650: 00 01 05 00 00 12 A8 01 00 01 00 66 29 01 00 01  // ...........f)...
    9660: 05 00 00 13 A8 01 00 01 00 67 29 01 00 01 05 00  // .........g).....
    9670: 00 14 A8 01 00 01 00 68 29 01 00 01 05 00 00 15  // .......h).......
    9680: A8 01 00 01 00 69 29 01 00 01 05 00 00 16 A8 01  // .....i).........
    9690: 00 01 00 6A 29 01 00 01 05 00 00 17 A8 01 00 01  // ...j)...........
    96A0: 00 6B 29 01 00 01 00 55 39 01 00 03 00 40 01 00  // .k)....U9....@..
    96B0: 01 02 74 29 40 01 02 59 39 40 01 05 00 00 20 A8  // ..t)@..Y9@.... .
    96C0: 01 00 01 02 01 00 40 03 00 41 81 29 33 00 41 80  // ......@..A.)3.A.
    96D0: 29 2D 02 40 41 01 02 75 29 40 01 02 5A 39 40 01  // )-.@A..u)@..Z9@.
    96E0: 05 00 00 21 A8 01 00 01 02 01 00 40 01 05 00 00  // ...!.......@....
    96F0: 1F A8 01 00 01 00 73 29 01 00 03 00 41 E3 0D 33  // ......s)....A..3
    9700: 05 41 01 00 00 00 1B 05 41 0B 01 02 06 00 41 0D  // .A......A.....A.
    9710: 25 1F 0E 03 0D 25 22 0C 02 0D 05 53 00 00 02 00  // %....%"....S....
    9720: 00 5B 4B 00 01 01 00 00 37 00 00 42 21 00 63 00  // .[K.....7..B!.c.
    9730: 1F 00 63 01 39 00 63 03 3F 00 63 02 45 00 5A 5A  // ..c.9.c.?.c.E.ZZ
    9740: 5B 03 05 40 00 00 05 04 2D 19 40 00 15 05 40 02  // [..@....-.@...@.
    9750: 01 02 0C 00 40 02 00 00 0D 00 5B 02 00 00 E3 0D  // ....@.....[.....
    9760: 5B 02 00 00 E7 0D 5B 02 00 00 E8 0D 5B 00 54 00  // [.....[.....[.T.
    9770: 01 02 00 00 37 00 00 01 05 00 00 9B 62 01 00 54  // ....7.......b..T
    9780: 00 01 00 01 05 00 00 93 62 01 00 01 01 01 00 01  // ........b.......
    9790: 56 00 41 03 09 41 00 01 05 00 00 83 62 01 00 01  // V.A..A......b...
    97A0: 02 01 00 41 01 05 00 00 9B 62 01 00 3C 25 01 00  // ...A.....b..<%..
    97B0: 00 44 36 00 01 05 00 00 93 62 01 00 02 00 01 01  // .D6......b......
    97C0: 00 5B 52 00 02 01 08 08 37 00 00 3D 25 00 00 44  // .[R.....7..=%..D
    97D0: 14 00 55 38 00 5B 01 05 00 00 61 60 01 00 3C E5  // ..U8.[....a`..<.
    97E0: 01 00 FF 44 10 00 4A E5 01 00 80 44 24 00 01 05  // ...D..J....D$...
    97F0: 00 00 62 60 01 00 01 01 01 00 01 56 00 40 03 A9  // ..b`.......V.@..
    9800: 40 00 01 05 00 00 61 60 01 00 01 02 01 00 40 02  // @.....a`......@.
    9810: E5 00 01 5B 7B 00 02 01 00 00 37 00 00 3D 65 00  // ...[{.....7..=e.
    9820: 01 44 7A 00 56 00 40 03 21 40 00 21 25 40 DC 03  // .Dz.V.@.!@.!%@..
    9830: 0A 48 40 01 05 B6 3A 00 01 00 00 5C 05 2D 3B CF  // .H@...:....\.-;.
    9840: FF CF FF 20 00 10 00 5C 05 40 3B CF FF FF FF 20  // ... ...\.@;.... 
    9850: 00 00 00 01 05 B7 3A 00 00 00 04 56 00 40 03 21  // ......:....V.@.!
    9860: 40 00 21 25 40 80 03 0A 48 40 5C 05 01 50 FF FC  // @.!%@...H@\..P..
    9870: FF FF 00 03 00 00 56 00 40 03 21 40 00 15 05 40  // ......V.@.!@...@
    9880: 19 5C 02 50 50 FF FF FF F1 40 3A 00 00 5B 5B 00  // .\.PP....@:..[[.
    9890: CA 00 02 01 04 04 37 00 00 66 0C 03 0C 41 00 00  // ......7..f...A..
    98A0: 2D 0A 41 42 2D 0D 42 04 00 3D 24 00 06 00 44 31  // -.AB-.B..=$...D1
    98B0: 00 2D 0D 42 08 00 3E 0A 42 41 45 19 00 55 20 00  // .-.B..>.BAE..U .
    98C0: 5B 56 00 43 03 24 43 05 00 03 04 46 00 00 33 05  // [V.C.$C....F..3.
    98D0: 46 01 00 00 00 01 02 00 00 46 03 00 00 01 00 0D  // F........F......
    98E0: 02 01 00 44 2D 05 46 02 00 00 00 01 02 00 00 46  // ...D-.F........F
    98F0: 03 24 43 04 00 4B E5 00 01 49 AA 00 07 02 01 00  // .$C..K...I......
    9900: 45 2D 05 46 01 00 00 00 01 02 00 00 46 4A 02 01  // E-.F........FJ..
    9910: 00 44 44 90 00 03 29 43 00 0E A2 00 44 43 98 00  // .DD...)C....DC..
    9920: 03 29 43 00 08 A2 00 45 33 05 46 03 00 00 00 01  // .)C....E3.F.....
    9930: 02 00 00 46 01 02 01 00 00 5B 0D 02 01 00 44 01  // ...F.....[....D.
    9940: 04 00 00 00 00 3D A5 00 01 44 C4 00 07 02 01 00  // .....=...D......
    9950: 45 43 C9 00 0D 02 01 00 44 5B 17 04 01 07 10 08  // EC......D[......
    9960: 37 00 00 4A 25 48 00 01 44 12 00 5B 3D 25 01 FF  // 7..J%H..D..[=%..
    9970: 44 F9 03 3D 25 01 18 46 F5 03 3D 25 01 02 47 F5  // D..=%..F..=%..G.
    9980: 03 3D 25 01 14 45 F9 03 3D 05 00 00 00 00 00 44  // .=%..E..=......D
    9990: 06 02 66 1B 56 00 02 3D A5 01 02 49 4A 00 56 08  // ..f.V..=...IJ.V.
    99A0: 40 43 5C 00 3D A5 01 03 49 57 00 56 08 40 43 5C  // @C\.=...IW.V.@C\
    99B0: 00 03 0C 40 18 00 3E 0D 40 00 00 44 6B 00 03 0A  // ...@..>.@..Dk...
    99C0: 02 40 43 6F 00 0E E5 01 80 4B E5 01 02 49 7D 00  // .@Co.....K...I}.
    99D0: 02 A9 02 02 55 28 02 03 01 00 00 03 05 46 C0 5D  // ....U(.......F.]
    99E0: 00 00 3D A5 01 00 44 96 00 03 05 46 80 BB 00 00  // ..=...D....F....
    99F0: 5C A5 0F 5E F3 08 55 28 01 3E 05 00 40 4B 4C 00  // \..^..U(.>..@KL.
    9A00: 47 B0 00 1B 05 00 01 43 C5 00 2C 65 01 01 3E 05  // G......C..,e..>.
    9A10: 00 A0 25 26 00 48 C5 00 15 05 00 01 43 B0 00 14  // ..%&.H......C...
    9A20: 2D 01 04 4B E5 01 80 49 F4 00 21 05 02 80 00 00  // -..K...I..!.....
    9A30: 00 7C 02 40 00 7E 02 40 46 7C 05 40 10 00 00 00  // .|.@.~.@F|.@....
    9A40: 7E 05 40 35 0C 00 00 03 02 02 40 43 F7 00 56 00  // ~.@5......@C..V.
    9A50: 02 27 02 00 46 21 05 41 00 00 01 00 27 02 40 46  // .'..F!.A....'.@F
    9A60: 03 0A 42 40 3E 05 41 00 00 00 00 49 1F 01 03 0D  // ..B@>.A....I....
    9A70: 40 01 00 56 08 01 43 49 01 03 02 40 46 03 02 01  // @..V..CI...@F...
    9A80: 41 03 02 03 41 27 02 40 41 03 02 40 03 3E 05 41  // A...A'.@A..@.>.A
    9A90: 00 00 00 00 49 27 01 27 02 01 03 03 0A 01 40 27  // ....I'.'......@'
    9AA0: 02 46 03 03 0A 03 01 03 0A 01 40 03 8A 01 42 27  // .F........@...B'
    9AB0: 02 00 46 33 05 40 10 00 00 00 15 05 40 05 03 8A  // ..F3.@......@...
    9AC0: 03 40 66 FF 2D 0D 42 03 04 56 00 40 03 21 40 01  // .@f.-.B..V.@.!@.
    9AD0: 33 25 40 14 15 25 40 01 2D 0A 42 40 03 0C 48 00  // 3%@..%@.-.B@..H.
    9AE0: 00 4A 25 06 5E 04 44 2C 02 56 00 40 4B E5 01 30  // .J%.^.D,.V.@K..0
    9AF0: 44 A4 01 4A 25 F1 5D 01 44 E5 01 43 AC 01 4A 25  // D..J%.].D..C..J%
    9B00: F1 5D 01 49 E5 01 03 00 40 0B 5E 09 0D 40 F0 FF  // .].I....@.^..@..
    9B10: 3E 1A 40 03 49 E5 01 3C 02 07 5E 01 49 E5 01 3C  // >.@.I..<..^.I..<
    9B20: 0A 0A 5E 03 49 E5 01 03 00 40 0C 5E 09 25 40 70  // ..^.I....@.^.%@p
    9B30: 3E 29 40 01 49 E5 01 3C 02 08 5E 02 44 E9 01 0E  // >)@.I..<..^.D...
    9B40: E5 01 01 3A 00 00 4B E5 01 01 44 CD 03 4B E5 01  // ...:..K...D..K..
    9B50: 02 49 06 02 3D 25 02 03 46 06 02 55 28 02 52 23  // .I..=%..F..U(.R#
    9B60: 3A 00 00 02 01 03 02 02 05 02 00 00 03 04 02 21  // :..............!
    9B70: 02 01 32 25 02 14 52 4D 02 01 02 03 3D 05 00 00  // ..2%..RM....=...
    9B80: 00 00 00 44 F5 03 3D A5 01 00 44 57 02 02 01 03  // ...D..=...DW....
    9B90: 02 02 05 02 00 0F 03 00 02 21 02 01 32 25 02 14  // .........!..2%..
    9BA0: 4B E5 01 30 44 51 02 0E E5 02 01 52 4D 02 01 02  // K..0DQ.....RM...
    9BB0: 03 66 FF 2D 0D 42 03 04 56 00 40 03 21 40 01 33  // .f.-.B..V.@.!@.3
    9BC0: 25 40 14 15 25 40 01 2D 0A 42 40 03 0C 48 00 00  // %@..%@.-.B@..H..
    9BD0: 03 05 40 00 00 38 00 3E 05 00 C0 C6 2D 00 47 A9  // ..@..8.>....-.G.
    9BE0: 02 5E A5 40 CF 20 3E 05 00 E0 67 35 00 47 A9 02  // .^.@. >...g5.G..
    9BF0: 5E A5 40 CF 10 3E 05 00 00 09 3D 00 47 A9 02 09  // ^.@..>....=.G...
    9C00: A5 40 CF 5C B2 0F 5E C3 40 3D A5 01 00 49 D1 02  // .@.\..^.@=...I..
    9C10: 5C 05 0F 5E FF FF 3F E0 00 00 40 10 5C 05 11 5E  // \..^..?...@.\..^
    9C20: FF FF 7F C0 00 00 80 3F 43 E9 02 5C 05 0F 5E 3F  // .......?C..\..^?
    9C30: E0 FF FF 00 00 00 10 5C 05 11 5E 7F C0 FF FF 00  // .......\..^.....
    9C40: 00 00 3E 03 05 40 00 00 14 1E 3D A5 01 00 49 0C  // ..>..@....=...I.
    9C50: 03 03 05 40 10 00 1C 24 3D 25 01 17 45 0C 03 03  // ...@...$=%..E...
    9C60: 05 40 00 00 1C 24 3D A5 01 00 44 1A 03 5C 9A 10  // .@...$=...D..\..
    9C70: 5E 03 00 40 5C 1A 0B 5E 0F 00 03 5C A2 0B 5E 8F  // ^..@\..^...\..^.
    9C80: 40 56 00 40 03 29 40 01 0F 25 40 01 4B E5 01 80  // @V.@.)@..%@.K...
    9C90: 49 3D 03 0F 65 40 01 5C 0A 0C 5E 8B FE 40 07 8D  // I=..e@.\..^..@..
    9CA0: 0D 5E 0F E0 3E 8D 01 00 00 49 62 03 3E 0D 03 00  // .^..>....Ib.>...
    9CB0: 00 49 62 03 07 E5 0E 5E FE 43 67 03 0D E5 0E 5E  // .Ib....^.Cg....^
    9CC0: 01 4A E5 0E 5E 01 49 7F 03 4A 65 0C 5E 01 49 7F  // .J..^.I..Je.^.I.
    9CD0: 03 07 E5 0E 5E EF 43 84 03 0D E5 0E 5E 10 01 02  // ....^.C.....^...
    9CE0: 07 5E 01 01 02 08 5E 02 7C 05 02 00 EC 04 00 7E  // .^....^.|......~
    9CF0: 02 40 46 27 05 40 0A 00 00 00 01 02 09 5E 40 01  // .@F'.@.......^@.
    9D00: 0A 0A 5E 03 3A 00 00 3D A5 01 00 44 F5 03 03 01  // ..^.:..=...D....
    9D10: 00 02 02 05 02 00 01 03 04 02 21 02 01 32 25 02  // ..........!..2%.
    9D20: 14 52 4D 02 02 02 00 3A 00 00 3D 25 02 03 46 F5  // .RM....:..=%..F.
    9D30: 03 02 25 03 02 02 E1 03 02 02 61 03 01 02 B9 03  // ..%.......a.....
    9D40: 01 08 A5 03 04 0E B1 03 02 02 01 02 00 52 2E 3A  // .............R.:
    9D50: 00 00 5B 02 25 01 0B 43 CD 03 7A 14 00 00 00 D8  // ..[.%..C..z.....
    9D60: 00 B0 01 88 02 60 03 00 00 00 01 00 02 00 03 00  // .....`..........
    9D70: 04 00 D6 04 02 01 04 04 37 00 00 42 29 00 63 07  // ........7..B).c.
    9D80: 1D 00 63 08 17 00 5A 5A 5B 0D 25 C8 39 02 5B 01  // ..c...ZZ[.%.9.[.
    9D90: 05 1F 35 FF FF FF FF 01 05 20 35 3F 00 00 00 01  // ..5...... 5?....
    9DA0: 05 3B 01 30 02 12 00 01 05 30 01 80 BB 10 00 01  // .;.0.....0......
    9DB0: 05 31 01 3C 00 01 08 01 05 34 01 00 00 00 00 01  // .1.<.....4......
    9DC0: 05 3C 01 00 00 00 00 01 8D 83 38 30 00 01 25 82  // .<........80..%.
    9DD0: 38 01 01 25 32 01 00 01 05 42 35 00 00 00 00 01  // 8..%2....B5.....
    9DE0: 05 40 35 00 00 00 00 01 05 46 35 00 00 00 00 01  // .@5......F5.....
    9DF0: 05 44 35 00 00 00 00 01 05 4A 35 00 00 00 00 01  // .D5......J5.....
    9E00: 05 48 35 00 00 00 00 01 05 4E 35 00 00 00 00 01  // .H5......N5.....
    9E10: 05 4C 35 00 00 00 00 01 05 61 35 00 00 00 00 01  // .L5......a5.....
    9E20: 05 63 35 00 00 00 00 01 05 65 35 00 00 00 00 01  // .c5......e5.....
    9E30: 05 72 35 01 00 00 00 01 05 DF 39 01 10 00 00 01  // .r5.......9.....
    9E40: 05 F4 39 01 00 02 00 07 05 F0 39 FF FF FF 7F 07  // ..9.......9.....
    9E50: 05 EF 39 9F FF FF FF 54 20 6D 91 01 05 B3 3A 01  // ..9....T m....:.
    9E60: 00 00 00 01 05 8F 3B 11 00 00 00 01 05 6B 3C 21  // ......;......k<!
    9E70: 00 00 00 01 05 47 3D 31 00 00 00 55 00 01 20 0D  // .....G=1...U.. .
    9E80: 01 DC 00 03 0A 48 40 01 05 B1 3A 00 1B 5D 05 01  // .....H@...:..]..
    9E90: 05 06 3B 35 00 13 00 01 05 07 3B 36 11 00 00 01  // ..;5......;6....
    9EA0: 05 08 3B 41 E6 01 00 01 05 09 3B 00 00 00 00 01  // ..;A......;.....
    9EB0: 05 0A 3B 00 00 08 2C 01 05 0C 3B 02 04 00 00 01  // ..;...,...;.....
    9EC0: 05 1F 3B 5E 4E 01 00 01 05 0A 3B 00 00 08 2C 01  // ..;^N.....;...,.
    9ED0: 05 0D 3B A4 01 00 00 01 05 0F 3B A4 01 00 00 01  // ..;.......;.....
    9EE0: 05 14 3B 00 02 00 00 01 05 15 3B 49 D2 00 00 01  // ..;.......;I....
    9EF0: 05 18 3B 20 00 00 00 01 05 19 3B 24 0D 00 00 01  // ..; ......;$....
    9F00: 05 1C 3B 00 00 00 00 01 05 1D 3B 00 00 00 00 01  // ..;.......;.....
    9F10: 05 ED 3A 00 00 92 06 01 05 EE 3A AA 08 00 E0 2C  // ..:.......:....,
    9F20: 05 01 01 00 00 00 3D 0D 01 04 00 45 0C 01 56 08  // ......=....E..V.
    9F30: 48 01 05 C9 39 FE 01 00 00 01 05 CB 39 BA 04 00  // H...9.......9...
    9F40: 00 01 05 CC 39 24 04 00 00 01 05 CD 39 A2 08 00  // ....9$......9...
    9F50: 00 01 05 CE 39 FE 01 00 00 01 05 D0 39 BA 04 00  // ....9.......9...
    9F60: 00 01 05 D1 39 24 04 00 00 01 05 D2 39 A2 08 00  // ....9$......9...
    9F70: 00 01 05 D3 39 FE 01 00 00 01 05 D5 39 BA 04 00  // ....9.......9...
    9F80: 00 01 05 D6 39 24 04 00 00 01 05 D7 39 A2 08 00  // ....9$......9...
    9F90: 00 01 05 D8 39 FE 01 00 00 01 05 DA 39 BA 04 00  // ....9.......9...
    9FA0: 00 01 05 DB 39 24 04 00 00 01 05 DC 39 A2 08 00  // ....9$......9...
    9FB0: 00 0D 25 C8 39 02 55 00 01 66 FF 2D 0D 42 CE 04  // ..%.9.U..f.-.B..
    9FC0: 03 0C 48 00 00 0D 25 DA 41 01 20 0D 01 1B 00 03  // ..H...%.A. .....
    9FD0: 0A 48 40 01 21 33 47 01 01 21 31 47 01 01 21 32  // .H@.!3G..!1G..!2
    9FE0: 47 01 20 0D 01 04 00 03 0A 48 40 01 21 45 48 01  // G. ......H@.!EH.
    9FF0: 20 0D 01 10 00 03 0A 48 40 03 0D 40 00 F0 0F 61  //  ......H@..@...a
    A000: 40 01 01 6A 8B 4F 40 2C 0D 01 01 00 2D 0D 42 02  // @..j.O@,....-.B.
    A010: 00 3D 25 01 04 45 4E 02 56 08 48 55 00 01 52 17  // .=%..EN.V.HU..R.
    A020: 2C 25 01 01 3D 25 01 04 45 AC 02 02 05 01 01 02  // ,%..=%..E.......
    A030: 00 00 52 29 56 00 46 66 08 03 0C 46 0C 00 26 05  // ..R)V.Ff...F..&.
    A040: 01 40 0D 03 00 21 02 40 46 32 02 01 40 01 01 42  // .@...!.@F2..@..B
    A050: 01 01 01 01 46 01 01 01 01 4A 01 01 01 01 4E 01  // ....F....J....N.
    A060: 01 55 00 01 52 4E 5C 05 63 53 FF FF FF 00 00 00  // .U..RN\.cS......
    A070: 00 30 5C 05 65 53 FF FF FF 00 00 00 00 30 5C 05  // .0\.eS.......0\.
    A080: 67 53 FF FF FF 00 00 00 00 30 5C 05 69 53 FF FF  // gS.......0\.iS..
    A090: FF 00 00 00 00 30 5C 05 6B 53 FF FF FF 00 00 00  // .....0\.kS......
    A0A0: 00 30 01 05 DC 5D 22 22 02 00 01 05 DD 5D AA F2  // .0...]"".....]..
    A0B0: 01 00 01 05 31 55 11 00 01 00 01 05 31 56 11 00  // ....1U......1V..
    A0C0: 01 00 01 05 31 57 11 00 01 00 01 05 31 58 11 00  // ....1W......1X..
    A0D0: 01 00 01 05 31 59 11 00 01 00 01 05 9A 55 01 00  // ....1Y.......U..
    A0E0: 00 00 01 05 9A 56 01 00 00 00 01 05 9A 57 01 00  // .....V.......W..
    A0F0: 00 00 01 05 9A 58 01 00 00 00 01 05 9A 59 01 00  // .....X.......Y..
    A100: 00 00 02 25 01 07 52 33 02 05 01 00 07 00 00 55  // ...%..R3.......U
    A110: 00 02 52 4D 2C 25 01 01 3D 25 01 05 45 A0 03 66  // ..RM,%..=%..E..f
    A120: 16 03 A4 00 06 00 2D 0D 42 08 00 03 0A 00 42 3E  // ......-.B.....B>
    A130: A5 00 00 44 33 04 03 0A 42 00 03 0C 40 04 00 3E  // ...D3...B...@..>
    A140: 0D 40 20 22 44 DD 03 3E 0D 40 21 21 49 27 04 03  // .@ "D..>.@!!I'..
    A150: 0C 40 08 00 66 16 2D 0A 42 40 03 24 40 00 00 3E  // .@..f.-.B@.$@..>
    A160: 25 40 FF 44 27 04 3E 25 40 14 49 1F 04 03 04 40  // %@.D'.>%@.I....@
    A170: 02 00 4C 05 40 00 01 00 00 44 27 04 4A 25 48 00  // ..L.@....D'.J%H.
    A180: 01 49 33 04 01 A5 7F 60 01 01 A5 57 61 01 43 33  // .I3....`...Wa.C3
    A190: 04 2D 0C 42 01 00 43 E8 03 2D 0D 00 10 00 33 A5  // .-.B..C..-....3.
    A1A0: 00 01 43 BD 03 66 16 03 0C 41 04 00 4C 0D 41 02  // ..C..f...A..L.A.
    A1B0: 00 44 47 04 0D A5 4C 00 02 01 05 00 00 2C A8 01  // .DG...L......,..
    A1C0: 00 01 00 53 39 01 00 01 05 00 00 2D A8 01 00 01  // ...S9......-....
    A1D0: 00 54 39 01 00 01 05 00 00 17 A8 01 00 01 00 55  // .T9............U
    A1E0: 39 01 00 01 05 00 00 31 A8 01 00 01 00 F7 3A 01  // 9......1......:.
    A1F0: 00 01 05 00 00 32 A8 01 00 01 00 F8 3A 01 00 01  // .....2......:...
    A200: 05 00 00 20 A8 01 00 01 00 59 39 01 00 01 05 00  // ... .....Y9.....
    A210: 00 21 A8 01 00 01 00 5A 39 01 00 02 00 01 53 39  // .!.....Z9.....S9
    A220: 03 01 41 01 15 05 41 18 01 02 C4 00 41 03 01 41  // ..A...A.....A..A
    A230: 01 1B 05 41 08 01 02 C9 00 41 52 4B 5B 7A 08 00  // ...A.....ARK[z..
    A240: 00 00 6B 01 D6 02 41 04 AC 00 02 01 00 04 66 FF  // ..k...A.......f.
    A250: 56 08 47 2D 0D 42 74 00 03 21 47 00 09 25 47 F0  // V.G-.Bt..!G..%G.
    A260: 42 22 47 63 00 5B 00 63 60 56 00 63 20 36 00 63  // B"Gc.[.c`V.c 6.c
    A270: 90 4E 00 63 A0 3E 00 63 B0 46 00 5A 5A 5B 2D 0D  // .N.c.>.c.F.ZZ[-.
    A280: 42 26 00 43 5B 00 2D 0D 42 1E 00 43 5B 00 2D 0D  // B&.C[.-.B..C[.-.
    A290: 42 30 00 43 5B 00 2D 0D 42 16 00 43 5B 00 2D 0D  // B0.C[.-.B..C[.-.
    A2A0: 42 0C 00 03 21 47 00 09 25 47 07 2D 0A 42 47 2D  // B...!G..%G.-.BG-
    A2B0: 0A 42 47 03 0C 48 00 00 5B 7A AC 00 00 00 80 00  // .BG..H..[z......
    A2C0: 00 01 80 01 00 02 80 02 00 00 00 01 00 02 00 03  // ................
    A2D0: 00 04 00 00 DC 00 B8 01 94 02 00 00 6B 01 D6 02  // ............k...
    A2E0: 41 04 00 00 D8 00 B0 01 88 02 60 03 00 00 5A 00  // A.........`...Z.
    A2F0: B4 00 0E 01 72 00 01 01 00 00 37 00 00 56 00 40  // ....r.....7..V.@
    A300: 03 21 40 00 21 0D 40 6B 01 03 02 48 40 01 25 AC  // .!@.!.@k...H@.%.
    A310: 41 01 3D 65 00 02 49 4C 00 01 0D BD 41 01 00 54  // A.=e..IL....A..T
    A320: 00 BB 41 0D 25 AE 41 01 01 05 AD 41 11 00 00 00  // ..A.%.A....A....
    A330: 07 A5 AC 41 FE 01 05 AF 41 11 01 11 01 43 6E 00  // ...A....A....Cn.
    A340: 01 05 B1 41 00 00 00 01 01 05 B5 41 00 00 00 01  // ...A.......A....
    A350: 01 05 AF 41 11 01 11 01 54 00 AD 41 01 0D BD 41  // ...A....T..A...A
    A360: 00 01 3A 00 00 5B 73 00 01 01 00 00 37 00 00 52  // ..:..[s.....7..R
    A370: 14 03 00 41 C0 41 33 1A 41 41 03 8A 40 41 03 00  // ...A.A3.AA..@A..
    A380: 41 C1 41 33 1A 41 41 03 0A 40 41 3E 05 40 00 00  // A.A3.AA..@A>.@..
    A390: 00 00 49 36 00 03 05 40 70 08 00 0F 0E 25 00 B0  // ..I6...@p....%..
    A3A0: 52 14 3D 65 00 00 44 6D 00 01 02 16 4D 40 01 05  // R.=e..Dm....M@..
    A3B0: 17 4D 00 00 00 00 01 05 18 4D 00 00 00 00 01 05  // .M.......M......
    A3C0: 19 4D 00 00 00 00 5C 05 14 4D 8F FF 0F FF 31 00  // .M....\..M....1.
    A3D0: 00 00 5B 07 25 14 4D FE 5B 00 43 00 01 01 00 00  // ..[.%.M.[.C.....
    A3E0: 37 00 00 52 14 3D 65 00 01 44 3A 00 0D 65 01 50  // 7..R.=e..D:..e.P
    A3F0: 03 54 20 01 50 4A A5 01 50 01 49 1B 00 54 20 0F  // .T .PJ..P.I..T .
    A400: 50 56 00 40 20 25 00 01 03 0A 48 40 07 E5 E8 39  // PV.@ %....H@...9
    A410: 7F 43 3F 00 0D 25 01 50 01 3A 00 00 5B 00 CF 00  // .C?..%.P.:..[...
    A420: 02 01 00 00 37 00 00 42 29 00 63 00 1B 00 63 01  // ....7..B).c...c.
    A430: 1B 00 63 02 AA 00 5A 5A 5B 66 FF 56 08 40 2D 0D  // ..c...ZZ[f.V.@-.
    A440: 42 C3 00 03 21 40 00 15 25 40 01 2D 0A 42 40 03  // B...!@..%@.-.B@.
    A450: 0C 48 00 00 3D 65 00 00 44 72 00 0D 25 CC 00 01  // .H..=e..Dr..%...
    A460: 3A 00 00 01 8D C0 00 00 02 51 02 01 05 C6 00 00  // :........Q......
    A470: 00 10 00 01 05 C8 00 00 00 50 00 01 0D C3 00 02  // .........P......
    A480: 00 54 20 CA 00 01 05 C2 00 00 01 00 00 43 1A 00  // .T ..........C..
    A490: 07 25 CC 00 FE 3A 00 00 0D 25 CA 00 01 01 25 C2  // .%...:...%....%.
    A4A0: 00 01 07 A5 C1 00 FE 0D 25 D5 00 01 0D 65 D5 00  // ........%....e..
    A4B0: 01 4A 65 D5 00 01 44 93 00 54 08 D5 00 54 00 C6  // .Je...D..T...T..
    A4C0: 00 54 00 C8 00 43 1A 00 5C 65 D4 00 FC 02 01 A1  // .T...C..\e......
    A4D0: C0 00 00 2B A5 C0 00 01 0D A5 C1 00 01 5B 7A 0C  // ...+.........[z.
    A4E0: 00 00 00 02 00 2C 00 2D 00 2E 00 2F 00 00 BD 01  // .....,.-.../....
    A4F0: 03 01 04 00 37 00 00 66 08 03 05 46 C0 12 00 00  // ....7..f...F....
    A500: 3D A5 00 02 49 1E 00 02 02 00 46 5B 03 05 40 0C  // =...I.....F[..@.
    A510: 00 00 00 21 21 40 00 66 FF 2D 0D 42 81 01 2D 0A  // ...!!@.f.-.B..-.
    A520: 42 40 03 04 40 00 00 03 04 41 04 00 03 04 00 08  // B@..@....A......
    A530: 00 01 02 00 00 40 03 88 40 01 00 03 18 40 01 00  // .....@..@....@..
    A540: 09 8D 40 FF 01 3E 8D 40 00 00 49 99 00 01 02 00  // ..@..>.@..I.....
    A550: 00 41 03 00 40 01 00 09 05 40 FF 01 00 00 3E 0D  // .A..@....@....>.
    A560: 40 00 00 49 82 00 03 05 46 00 71 02 00 43 BC 00  // @..I....F.q..C..
    A570: 21 02 40 46 03 00 41 01 00 09 05 41 00 1E 00 00  // !.@F..A....A....
    A580: 1B 05 41 09 43 B4 00 7C 02 40 46 7E 05 40 00 00  // ..A.C..|.@F~.@..
    A590: 01 00 03 00 41 01 00 09 05 41 00 F0 00 00 1B 05  // ....A....A......
    A5A0: 41 0C 75 02 40 41 03 02 46 40 3D A5 00 01 49 C8  // A.u.@A..F@=...I.
    A5B0: 00 02 02 00 46 5B 3D E5 00 00 49 0B 01 56 00 40  // ....F[=...I..V.@
    A5C0: 03 29 40 00 21 0D 40 0A 00 03 02 41 00 2D 02 40  // .)@.!.@....A.-.@
    A5D0: 41 01 02 00 00 40 03 00 41 01 00 09 05 41 00 00  // A....@..A....A..
    A5E0: F0 07 1B 05 41 14 02 E2 00 41 3D E5 00 00 49 0B  // ....A....A=...I.
    A5F0: 01 02 05 00 00 46 C3 23 5B 56 00 40 03 39 40 00  // .....F.#[V.@.9@.
    A600: 55 38 00 66 FF 2D 0D 42 59 01 3E 0C 40 02 00 47  // U8.f.-.BY.>.@..G
    A610: 2C 01 2D 0D 42 08 00 43 1C 01 33 0C 40 04 00 21  // ,.-.B..C..3.@..!
    A620: 0C 40 06 00 2D 0C 40 00 00 03 09 42 00 55 00 00  // .@..-.@....B.U..
    A630: 02 0A 00 40 7C 05 46 40 42 0F 00 7E 01 40 00 02  // ...@|.F@B..~.@..
    A640: 02 00 40 5B 7A 64 00 FF FF 07 00 00 00 00 00 C8  // ..@[zd..........
    A650: 00 3F 00 08 00 19 00 40 06 5F 00 40 00 32 00 80  // .?.....@._.@.2..
    A660: 0C 7E 00 60 00 64 00 00 32 7F 00 7F 00 64 00 16  // .~.`.d..2....d..
    A670: 6C 01 00 00 6C 01 00 51 6C 01 00 0F 6E 01 00 00  // l...l..Ql...n...
    A680: 6E 01 00 4A 6E 01 00 0C 7E 01 00 00 7E 01 00 47  // n..Jn...~...~..G
    A690: 7E 01 00 0C 70 01 00 00 70 01 00 47 70 01 00 0C  // ~...p...p..Gp...
    A6A0: 72 01 00 00 72 01 00 47 72 01 00 00 BF 00 02 03  // r...r..Gr.......
    A6B0: 04 00 37 00 00 56 00 46 56 00 00 03 21 00 00 55  // ..7..V.FV...!..U
    A6C0: 20 00 3D 65 00 03 44 2C 00 3D 65 00 0B 46 B4 00  //  .=e..D,.=e..F..
    A6D0: 02 29 00 00 32 25 00 08 0E 25 00 60 52 14 5C 22  // .)..2%...%.`R.\"
    A6E0: 28 55 F8 00 02 22 00 00 03 0D 41 01 00 66 FF 2D  // (U..."....A..f.-
    A6F0: 0D 42 BB 00 2D 0A 42 41 03 24 00 00 00 3D E2 00  // .B..-.BA.$...=..
    A700: 00 48 A0 00 3E 25 00 04 44 6F 00 03 22 46 00 33  // .H..>%..Do.."F.3
    A710: 25 46 01 15 25 46 04 0F 25 46 01 33 39 00 00 3E  // %F..%F..%F.39..>
    A720: 25 00 01 44 8C 00 3E 25 00 02 44 85 00 03 25 46  // %..D..>%..D...%F
    A730: 21 03 65 00 2F 43 90 00 03 65 00 13 03 79 46 00  // !.e./C...e...yF.
    A740: 33 65 46 01 15 2D 46 03 0F 65 46 01 52 14 01 02  // 3eF..-F..eF.R...
    A750: 01 4D 46 01 52 00 4D 00 54 00 05 4D 54 00 FF 4C  // .MF.R.M.T..MT..L
    A760: 3A 00 00 5B 7A 04 00 03 02 01 04 00 CB 00 01 01  // :..[z...........
    A770: 00 00 37 00 00 3D 65 00 01 44 61 00 56 00 40 20  // ..7..=e..Da.V.@ 
    A780: 25 00 10 03 0A 48 40 07 25 8F 4F FD 4A 25 8F 4F  // %....H@.%.O.J%.O
    A790: 04 49 20 00 52 14 07 25 46 50 FE 4A 65 46 50 01  // .I .R..%FP.JeFP.
    A7A0: 49 2F 00 03 21 40 00 21 0D 40 DC 00 03 0A 48 40  // I/..!@.!.@....H@
    A7B0: 07 25 B4 3A FE 56 00 40 03 21 40 00 21 0D 40 6B  // .%.:.V.@.!@.!.@k
    A7C0: 01 03 0A 48 40 07 25 85 41 EF 43 C7 00 56 00 40  // ...H@.%.A.C..V.@
    A7D0: 20 25 00 10 03 0A 48 40 0D 25 8F 4F 02 4A 25 8F  //  %....H@.%.O.J%.
    A7E0: 4F 04 44 71 00 52 14 0D 25 46 50 01 4A 65 46 50  // O.Dq.R..%FP.JeFP
    A7F0: 01 44 80 00 56 00 40 03 21 40 00 21 0D 40 DC 00  // .D..V.@.!@.!.@..
    A800: 03 0A 48 40 0D 25 B4 3A 01 56 00 40 03 21 40 00  // ..H@.%.:.V.@.!@.
    A810: 21 0D 40 6B 01 03 0A 48 40 0D 25 85 41 10 56 00  // !.@k...H@.%.A.V.
    A820: 40 03 21 40 00 21 0D 40 5A 00 03 0A 48 40 0D 25  // @.!@.!.@Z...H@.%
    A830: 4C 4D 01 3A 00 00 5B 00 5E 01 01 04 04 08 37 00  // LM.:..[.^.....7.
    A840: 00 3D 65 02 01 49 27 01 4B A5 02 03 49 2A 00 52  // .=e..I'.K...I*.R
    A850: 25 02 05 00 00 00 00 00 02 05 01 00 05 02 00 43  // %..............C
    A860: 2F 00 55 28 02 52 25 03 38 00 C4 00 03 48 00 C9  // /.U(.R%.8....H..
    A870: 00 0E 25 02 90 52 14 08 25 02 07 0D 05 B4 3A 11  // ..%..R..%.....:.
    A880: 11 01 00 5C 25 B3 3A 0B 01 03 21 41 02 15 25 41  // ...\%.:...!A..%A
    A890: 04 0D 22 B3 3A 41 0D 65 B6 3A 01 5C 25 DB 3A FD  // ..".:A.e.:.\%.:.
    A8A0: 01 03 02 41 00 1B 05 41 08 01 0A CB 3A 41 01 0A  // ...A...A....:A..
    A8B0: CF 3A 41 15 05 00 18 01 02 CA 3A 00 01 02 CE 3A  // .:A.......:....:
    A8C0: 00 4B A5 02 03 49 A0 00 2B 05 CA 3A 00 00 10 00  // .K...I..+..:....
    A8D0: 2B 05 CE 3A 00 00 50 00 01 0D A7 3A 80 00 01 0D  // +..:..P....:....
    A8E0: B1 3A 00 03 01 0D 0C 3B 01 03 01 05 0A 3B 00 00  // .:.....;.....;..
    A8F0: 08 28 01 05 0B 3B 00 00 08 00 01 E5 EF 3A 08 01  // .(...;.......:..
    A900: E5 EE 3A E0 54 00 A9 3A 01 19 AA 3A 00 01 89 AA  // ..:.T..:...:....
    A910: 3A 00 01 19 AE 3A 00 01 89 AE 3A 00 07 0D A5 3A  // :....:....:....:
    A920: FF F8 66 FF 2D 0D 42 4F 01 03 0C 40 00 00 3E 0D  // ..f.-.BO...@..>.
    A930: 40 FF FF 44 0E 01 3D 8C 01 00 00 44 0E 01 2D 0D  // @..D..=....D..-.
    A940: 42 03 00 43 F1 00 01 24 A5 3A 02 00 01 09 C7 3A  // B..C...$.:.....:
    A950: 01 07 25 B3 3A FE 07 25 DB 3A FE 3A 00 00 5B 0E  // ..%.:..%.:.:..[.
    A960: 25 02 90 52 14 3D 65 02 00 49 3C 01 0D 25 B3 3A  // %..R.=e..I<..%.:
    A970: 01 43 48 01 3D 65 02 10 44 48 01 01 09 C7 3A 01  // .CH.=e..DH....:.
    A980: 3A 00 00 5B 7A 0F 00 01 00 01 01 01 03 01 05 02  // :..[z...........
    A990: 02 00 08 FF FF 08 42 00 01 01 00 00 37 00 00 52  // ......B.....7..R
    A9A0: 14 3D 65 00 01 44 21 00 54 20 4B 50 4A 65 4B 50  // .=e..D!.T KPJeKP
    A9B0: 01 49 16 00 43 3E 00 5C 4D 1B 50 FE FF 00 01 4A  // .I..C>.\M.P....J
    A9C0: A5 01 50 01 44 3E 00 0D 25 4B 50 01 4A 65 4B 50  // ..P.D>..%KP.JeKP
    A9D0: 01 44 36 00 3A 00 00 5B 13 00 01 03 00 00 37 00  // .D6.:..[......7.
    A9E0: 00 0E 25 00 A0 52 14 3A 00 00 5B 00 C6 01 01 01  // ..%..R.:..[.....
    A9F0: 00 18 56 00 40 03 21 40 05 21 0D 40 80 00 03 0A  // ..V.@.!@.!.@....
    AA00: 48 40 37 00 00 01 0D 47 50 0D 00 3D 8D 01 0D 00  // H@7....GP..=....
    AA10: 46 2C 00 01 19 47 50 01 01 8D 48 50 40 01 01 0D  // F,...GP...HP@...
    AA20: 49 50 2C 01 03 09 41 00 2D 19 41 00 03 8A 41 41  // IP,...A.-.A...AA
    AA30: 2D 8D 41 01 00 1B 1D 41 02 01 1A 48 50 41 33 0D  // -.A....A...HPA3.
    AA40: 41 01 00 01 0A EA 4F 41 54 08 EC 4F 01 99 EC 4F  // A.....OAT..O...O
    AA50: 02 03 19 41 00 33 09 41 02 56 18 41 03 B1 41 04  // ...A.3.A.V.A..A.
    AA60: 33 1A 41 41 01 8A EB 4F 41 03 19 41 00 33 09 41  // 3.AA...OA..A.3.A
    AA70: 02 2D 1A 41 41 2D 09 41 00 4B 25 04 10 44 98 00  // .-.AA-.A.K%..D..
    AA80: 2D 09 41 00 01 0A EB 4F 41 03 21 41 04 09 25 41  // -.A....OA.!A..%A
    AA90: 02 1B 25 41 01 01 22 ED 4F 41 03 09 41 01 2D 19  // ..%A..".OA..A.-.
    AAA0: 41 01 33 0D 41 01 00 01 0A EF 4F 41 54 08 F7 4F  // A.3.A.....OAT..O
    AAB0: 01 99 F7 4F 03 03 19 41 01 33 09 41 03 56 18 41  // ...O...A.3.A.V.A
    AAC0: 03 B9 41 04 33 1A 41 41 01 8A F6 4F 41 03 19 41  // ..A.3.AA...OA..A
    AAD0: 01 33 09 41 03 2D 1A 41 41 2D 09 41 01 4B 25 04  // .3.A.-.AA-.A.K%.
    AAE0: 20 44 FC 00 2D 09 41 01 01 0A F6 4F 41 03 21 41  //  D..-.A....OA.!A
    AAF0: 04 09 25 41 04 1B 25 41 02 01 22 F8 4F 41 3D 65  // ..%A..%A..".OA=e
    AB00: 05 00 44 21 01 07 65 01 50 EF 43 26 01 0D 65 01  // ..D!..e.P.C&..e.
    AB10: 50 10 03 00 46 EB 4F 02 00 02 F6 4F 56 00 40 03  // P...F.O....OV.@.
    AB20: 21 40 05 21 0D 40 01 00 03 0A 48 40 56 00 40 03  // !@.!.@....H@V.@.
    AB30: 09 40 02 3D 65 05 00 49 53 01 33 0D 40 02 00 15  // .@.=e..IS.3.@...
    AB40: 05 40 10 56 00 41 3D 8D 02 0D 00 48 6B 01 03 0D  // .@.V.A=....Hk...
    AB50: 41 0D 00 33 19 41 02 0F 02 40 41 0F E5 40 80 01  // A..3.A...@A..@..
    AB60: 02 E8 39 40 56 00 40 03 21 40 05 21 0D 40 6B 01  // ..9@V.@.!@.!.@k.
    AB70: 03 0A 48 40 01 09 C3 41 00 01 89 C3 41 01 01 09  // ..H@...A....A...
    AB80: C4 41 00 01 89 C4 41 01 01 02 C0 41 46 01 01 C1  // .A....A....AF...
    AB90: 41 02 54 00 BE 41 01 31 BE 41 04 01 B1 BE 41 04  // A.T..A.1.A....A.
    ABA0: 54 00 BF 41 01 39 BF 41 04 01 B9 BF 41 04 3A 00  // T..A.9.A....A.:.
    ABB0: 00 5B 0A 00 02 03 08 00 37 00 00 5B CC 01 01 01  // .[......7..[....
    ABC0: 00 00 37 00 00 56 00 41 03 39 41 01 09 25 41 0F  // ..7..V.A.9A..%A.
    ABD0: 56 00 40 03 62 40 41 01 02 58 53 40 03 0A 46 42  // V.@.b@A..XS@..FB
    ABE0: 66 FF 2D 0D 42 B8 01 15 25 41 02 2D 0A 42 41 03  // f.-.B...%A.-.BA.
    ABF0: 0C 48 00 00 07 05 90 5D 00 00 01 00 03 0C 48 02  // .H.....]......H.
    AC00: 00 03 05 40 C0 5D 00 00 56 00 41 03 21 41 00 27  // ...@.]..V.A.!A.'
    AC10: 02 40 41 15 05 40 10 03 25 40 02 01 02 62 53 40  // .@A..@..%@...bS@
    AC20: 01 05 63 53 40 00 00 30 03 0A 42 46 56 08 48 0D  // ..cS@..0..BFV.H.
    AC30: 25 5A 53 01 54 00 59 53 56 00 41 03 71 41 01 0F  // %ZS.T.YSV.A.qA..
    AC40: E5 41 80 01 02 72 53 41 03 69 41 00 03 A5 41 01  // .A...rSA.iA...A.
    AC50: 01 02 72 53 41 4B 25 01 01 44 CD 00 03 71 41 00  // ..rSAK%..D...qA.
    AC60: 03 A5 41 02 01 02 72 53 41 03 79 41 00 03 A5 41  // ..A...rSA.yA...A
    AC70: 03 01 02 72 53 41 03 05 40 00 31 01 00 2D A9 40  // ...rSA..@.1..-.@
    AC80: 01 01 02 6E 53 40 43 00 01 03 71 41 01 0F 65 41  // ...nS@C...qA..eA
    AC90: 01 03 A5 41 02 01 02 72 53 41 03 05 40 00 11 01  // ...A...rSA..@...
    ACA0: 00 01 02 6E 53 40 03 05 40 01 30 00 00 03 A9 40  // ...nS@..@.0....@
    ACB0: 01 01 02 6F 53 40 5C A5 58 53 CF 10 0D 25 58 53  // ...oS@\.XS...%XS
    ACC0: 01 02 65 00 02 56 00 40 03 29 40 01 2D 25 40 04  // ..e..V.@.)@.-%@.
    ACD0: 21 05 40 C8 00 00 00 56 00 41 03 21 41 00 27 02  // !.@....V.A.!A.'.
    ACE0: 40 41 03 0A 41 40 33 0D 41 01 00 3E 0D 41 00 00  // @A..A@3.A..>.A..
    ACF0: 44 A4 01 51 64 4A 25 5B 53 04 44 2A 01 4A 65 5B  // D..QdJ%[S.D*.Je[
    AD00: 53 31 49 A4 01 02 65 00 01 4B 25 01 01 49 A4 01  // S1I...e..K%..I..
    AD10: 01 05 72 53 01 00 03 80 3D 65 01 01 49 6B 01 02  // ..rS....=e..Ik..
    AD20: A8 00 72 53 43 A4 01 56 00 41 03 19 41 00 56 00  // ..rSC..V.A..A.V.
    AD30: 40 03 0A 40 41 3B 02 40 03 28 40 72 53 03 68 40  // @..@A;.@.(@rS.h@
    AD40: 72 53 03 A8 40 72 53 03 E8 40 72 53 04 02 00 40  // rS..@rS..@rS...@
    AD50: 2D A5 41 04 2D 0D 41 04 00 3E A9 41 01 45 72 01  // -.A.-.A..>.A.Er.
    AD60: 0D 25 5A 53 02 01 25 58 53 02 51 01 54 00 58 53  // .%ZS..%XS.Q.T.XS
    AD70: 5B 7A 14 00 00 00 00 00 04 00 02 00 08 00 04 00  // [z..............
    AD80: 0C 00 06 00 10 00 08 00 46 00 02 02 00 04 37 00  // ........F.....7.
    AD90: 00 55 30 00 32 25 00 01 20 25 00 08 56 08 48 03  // .U0.2%.. %..V.H.
    ADA0: 22 48 40 0D A5 D5 53 01 02 A0 00 D4 53 08 A5 00  // "H@...S.....S...
    ADB0: 03 4A 25 D4 53 02 44 3C 00 5C 0D D5 53 FF FE 01  // .J%.S.D<.\..S...
    ADC0: 00 43 42 00 0D 0D D5 53 01 01 3A 00 00 5B E7 00  // .CB....S..:..[..
    ADD0: 01 08 08 00 03 01 00 00 02 05 00 01 00 01 00 52  // ...............R
    ADE0: 29 20 05 00 64 00 00 00 03 02 46 40 02 02 00 00  // ) ..d.....F@....
    ADF0: 03 01 00 00 55 38 00 03 05 40 00 32 00 00 3D 05  // ....U8...@.2..=.
    AE00: 00 00 00 00 00 44 64 00 03 02 40 46 27 01 40 00  // .....Dd...@F'.@.
    AE10: 3E 05 40 9C 18 00 00 47 53 00 03 05 40 00 32 00  // >.@....GS...@.2.
    AE20: 00 3E 05 40 C8 00 00 00 46 64 00 03 05 40 C8 00  // .>.@....Fd...@..
    AE30: 00 00 66 FF 2D 0D 42 C7 00 3E 0C 40 02 00 47 7B  // ..f.-.B..>.@..G{
    AE40: 00 2D 0D 42 08 00 43 6B 00 33 0C 40 00 00 03 0C  // .-.B..Ck.3.@....
    AE50: 01 06 00 3E 0D 01 19 00 49 9A 00 27 0D 40 32 00  // ...>....I..'.@2.
    AE60: 21 0D 40 02 00 43 9F 00 27 0C 40 06 00 2D 0C 40  // !.@..C..'.@..-.@
    AE70: 04 00 02 E2 00 40 33 0C 40 04 00 21 0C 40 06 00  // .....@3.@..!.@..
    AE80: 2D 0C 40 00 00 27 02 46 40 02 0A 00 40 02 B2 00  // -.@..'.F@...@...
    AE90: 40 5B 7A 20 00 C8 00 40 06 08 00 19 00 40 06 80  // @[z ...@.....@..
    AEA0: 0C 40 00 32 00 80 0C 38 18 60 00 64 00 00 32 00  // .@.2...8.`.d..2.
    AEB0: 32 7F 00 64 00 00 07 00 02 01 00 00 5B 00 14 03  // 2..d........[...
    AEC0: 01 05 00 00 37 00 00 0E 25 00 60 52 14 08 25 00  // ....7...%.`R..%.
    AED0: 0F 42 29 00 63 0F 53 00 63 11 09 02 63 12 66 02  // .B).c.S.c...c.f.
    AEE0: 63 01 CC 02 63 00 F5 02 63 08 D8 01 63 09 B9 01  // c...c...c...c...
    AEF0: 63 0A C0 01 63 13 C8 01 63 14 D0 01 63 0B E0 01  // c...c...c...c...
    AF00: 63 0C BC 02 63 0D E8 01 63 10 01 02 5A 5A 43 B5  // c...c...c...ZZC.
    AF10: 01 54 00 9A 55 01 0D 2B 55 1F 00 3D A5 00 00 44  // .T..U..+U..=...D
    AF20: 72 00 3D A5 00 02 44 A2 01 3D A5 00 05 49 A2 01  // r.=...D..=...I..
    AF30: 54 00 C9 55 3D 25 02 00 49 81 00 02 25 02 02 32  // T..U=%..I...%..2
    AF40: 25 02 01 01 E1 C9 55 02 4A 25 CC 55 01 49 B5 01  // %.....U.J%.U.I..
    AF50: 7B 05 01 00 80 00 00 7E 05 40 8C 0A 00 00 56 00  // {......~.@....V.
    AF60: 46 03 29 46 02 27 02 40 46 07 65 D0 55 FE 01 05  // F.)F.'.@F.e.U...
    AF70: D1 55 00 80 00 00 01 02 D2 55 40 0D E5 D3 55 10  // .U.......U@...U.
    AF80: 0D 65 28 55 04 51 01 07 65 28 55 FB 51 01 03 21  // .e(U.Q..e(U.Q..!
    AF90: 40 02 15 25 40 05 01 E2 CA 55 40 54 20 CE 55 02  // @..%@....U@T .U.
    AFA0: A0 02 28 55 03 0A 46 48 08 A5 02 07 56 00 40 03  // ..(U..FH....V.@.
    AFB0: 31 40 02 21 0D 40 80 00 03 8A 46 40 03 0A 48 40  // 1@.!.@....F@..H@
    AFC0: 03 88 40 EA 4F 03 08 40 EF 4F 2D 05 40 01 00 01  // ..@.O..@.O-.@...
    AFD0: 00 03 98 41 EB 4F 03 18 41 F6 4F 03 0A 48 46 01  // ...A.O..A.O..HF.
    AFE0: 02 0C 56 40 01 02 0D 56 41 03 1A 48 46 03 00 40  // ..V@...VA..HF..@
    AFF0: EB 4F 33 1A 40 40 33 08 40 BE 41 33 08 40 BE 41  // .O3.@@3.@.A3.@.A
    B000: 03 00 41 F6 4F 33 1A 41 41 33 08 41 BF 41 33 08  // ..A.O3.AA3.A.A3.
    B010: 41 BF 41 03 0A 48 46 01 0A 0F 56 41 01 8A 0F 56  // A.A..HF...VA...V
    B020: 40 03 1A 48 46 03 00 40 EC 4F 33 8A 40 40 03 00  // @..HF..@.O3.@@..
    B030: 41 F7 4F 33 8A 41 41 4A 25 ED 4F 01 44 85 01 0F  // A.O3.AAJ%.O.D...
    B040: E5 40 80 4A 25 F8 4F 01 44 91 01 0F E5 41 80 03  // .@.J%.O.D....A..
    B050: 0A 48 46 01 1A 0E 56 41 01 9A 0E 56 40 43 B5 01  // .HF...VA...V@C..
    B060: 07 E5 28 55 2F 0D 65 28 55 04 51 01 07 65 28 55  // ..(U/.e(U.Q..e(U
    B070: FB 51 01 3A 00 00 5B 54 20 D8 55 43 B5 01 01 25  // .Q.:..[T .UC...%
    B080: D8 55 01 43 B5 01 01 25 D8 55 02 43 B5 01 01 25  // .U.C...%.U.C...%
    B090: D8 55 03 43 B5 01 07 25 C8 55 EF 43 B5 01 0D 25  // .U.C...%.U.C...%
    B0A0: C8 55 10 43 B5 01 0D 65 D0 55 01 51 0A 07 25 CD  // .U.C...e.U.Q..%.
    B0B0: 55 FE 51 0A 01 0D CC 55 01 02 51 C8 43 B5 01 0D  // U.Q....U..Q.C...
    B0C0: 25 DE 55 10 43 B5 01 01 69 6F 55 02 3D A5 00 03  // %.U.C...ioU.=...
    B0D0: 49 25 02 4A 25 35 55 10 49 25 02 01 A5 6F 55 02  // I%.J%5U.I%...oU.
    B0E0: 43 2A 02 01 B1 6F 55 00 3D 25 02 00 44 3F 02 32  // C*...oU.=%..D?.2
    B0F0: 25 02 01 14 25 02 04 5C E1 6F 55 8F 02 3D A5 00  // %...%..\.oU..=..
    B100: 05 44 4D 02 3D A5 00 00 49 5E 02 02 A5 00 00 03  // .DM.=...I^......
    B110: 39 40 00 33 25 40 01 01 22 CB 55 40 02 E0 02 70  // 9@.3%@..".U@...p
    B120: 55 43 B5 01 02 E0 02 70 55 4B E5 02 01 44 B5 01  // UC.....pUK...D..
    B130: 02 B0 00 6F 55 3D A5 00 00 44 8C 02 3D A5 00 05  // ...oU=...D..=...
    B140: 44 8C 02 02 E5 00 04 43 95 02 02 E0 00 CB 55 2C  // D......C......U,
    B150: E5 00 01 3D A5 00 02 44 A3 02 3D A5 00 03 49 AC  // ...=...D..=...I.
    B160: 02 54 00 70 55 50 02 43 B5 01 02 A5 00 00 03 31  // .T.pUP.C.......1
    B170: 43 00 4A 62 6F 55 44 44 B5 01 54 08 CC 55 51 C8  // C.JboUDD..T..UQ.
    B180: 0D 25 CD 55 01 51 32 43 B5 01 0D 25 70 55 01 3D  // .%.U.Q2C...%pU.=
    B190: A5 00 00 44 E1 02 01 0D A1 55 0F 01 43 B5 01 03  // ...D.....U..C...
    B1A0: 39 43 00 03 02 40 44 33 25 40 01 01 0A A1 55 40  // 9C...@D3%@....U@
    B1B0: 43 B5 01 54 00 A1 55 07 25 70 55 FE 07 0D 6F 55  // C..T..U.%pU...oU
    B1C0: FF 80 07 25 35 55 EF 54 20 C8 55 54 20 D8 55 43  // ...%5U.T .UT .UC
    B1D0: B5 01 0C 01 01 06 04 00 37 00 00 42 29 00 63 07  // ........7..B).c.
    B1E0: EA 00 63 01 25 00 63 00 C0 00 63 0B ED 00 63 04  // ..c.%.c...c...c.
    B1F0: F2 00 5A 5A 43 05 01 02 65 00 10 52 4D 3D 65 00  // ..ZZC...e..RM=e.
    B200: 00 44 E6 00 02 65 00 11 52 04 4B E5 02 01 49 E6  // .D...e..R.K...I.
    B210: 00 3D A5 00 00 49 57 00 03 01 00 00 02 65 00 0F  // .=...IW......e..
    B220: 55 38 00 52 4D 02 02 00 00 02 65 00 0A 55 08 02  // U8.RM.....e..U..
    B230: 52 4D 3D A5 00 00 49 70 00 02 65 00 0B 52 4D 43  // RM=...Ip..e..RMC
    B240: 79 00 02 65 00 0E 52 4D 43 AD 00 20 05 01 64 00  // y..e..RMC.. ..d.
    B250: 00 00 02 05 01 14 1E 00 02 2C 21 01 00 03 01 00  // .........,!.....
    B260: 00 02 02 00 40 52 0C 26 05 00 64 00 00 00 02 02  // ....@R.&..d.....
    B270: 01 40 02 02 00 00 02 65 00 01 55 08 02 52 4D 51  // .@.....e..U..RMQ
    B280: 05 02 65 00 01 52 04 51 0A 02 65 00 09 52 4D 43  // ..e..R.Q..e..RMC
    B290: E6 00 02 65 00 12 52 04 4B E5 02 01 44 E6 00 02  // ...e..R.K...D...
    B2A0: 65 00 08 52 4D 02 65 00 00 52 04 3D A5 00 00 49  // e..RM.e..R.=...I
    B2B0: E6 00 02 65 00 00 52 4D 3A 00 00 5B 43 E6 00 52  // ...e..RM:..[C..R
    B2C0: 4D 43 E6 00 66 06 02 29 00 00 02 68 00 4E 00 02  // MC..f..)...h.N..
    B2D0: 8C 00 20 00 52 33 5B 02 29 00 00 52 33 5B F6 0F  // .. .R3[.)..R3[..
    B2E0: 02 02 08 00 37 00 00 4A 25 48 00 01 44 12 00 5B  // ....7..J%H..D..[
    B2F0: 66 FF 2D 0D 42 A1 0F 56 00 40 03 21 40 00 15 25  // f.-.B..V.@.!@..%
    B300: 40 01 2D 0A 42 40 03 0C 48 00 00 3D 65 00 10 49  // @.-.B@..H..=e..I
    B310: 76 00 02 65 00 01 3D 25 00 03 45 9A 0F 4A A5 F7  // v..e..=%..E..J..
    B320: 5D 01 44 9A 0F 02 65 00 00 4A A5 15 5E 02 49 9A  // ].D...e..J..^.I.
    B330: 0F 0D 25 16 5E 01 07 05 15 5E FF FF FB FF 3D E5  // ..%.^....^....=.
    B340: 00 04 45 6F 00 4A A5 15 5E 01 44 9A 0F 02 65 00  // ..Eo.J..^.D...e.
    B350: 01 43 9A 0F 3D 25 00 03 48 87 00 03 05 00 01 01  // .C..=%..H.......
    B360: 01 01 43 C7 00 4A A5 F7 5D 01 44 7D 00 4A A5 15  // ..C..J..].D}.J..
    B370: 5E 02 49 9A 0F 0D 25 16 5E 01 07 05 15 5E FF FF  // ^.I...%.^....^..
    B380: FB FF 03 05 00 01 00 00 00 3D E5 00 01 44 C7 00  // .........=...D..
    B390: 03 05 00 01 01 00 00 3D E5 00 02 44 C7 00 03 05  // .......=...D....
    B3A0: 00 01 01 01 01 42 29 00 63 07 F1 00 63 0A 51 06  // .....B).c...c.Q.
    B3B0: 63 01 5E 07 63 00 EB 08 63 09 94 0A 63 08 04 0C  // c.^.c...c...c...
    B3C0: 63 0B 51 0E 63 0E 6D 0D 63 0F 59 01 5A 5A 5B 01  // c.Q.c.m.c.Y.ZZ[.
    B3D0: 05 FD 5D 00 00 00 00 01 05 EE 5D 00 40 00 00 5C  // ..].......].@..\
    B3E0: 05 F0 5D FF FF 0F FE 00 00 D0 00 56 00 40 3D 25  // ..]........V.@=%
    B3F0: 00 03 45 56 01 0D A5 00 5E 20 01 05 F4 5D 5A 00  // ..EV....^ ...]Z.
    B400: 00 00 01 05 F5 5D 05 00 00 00 03 05 40 EB 10 00  // .....]......@...
    B410: 00 01 02 F4 5D 40 01 05 F5 5D 07 00 00 00 2D 05  // ....]@...]....-.
    B420: 40 00 01 00 00 3E 05 40 EB 13 00 00 47 33 01 07  // @....>.@....G3..
    B430: A5 00 5E DF 43 9A 0F 4A A5 F7 5D 01 49 9A 0F 4A  // ..^.C..J..].I..J
    B440: 25 00 5E 01 49 8D 01 3C 25 F7 5D 00 49 8D 01 3C  // %.^.I..<%.].I..<
    B450: 71 F7 5D 00 49 8D 01 08 E5 00 01 03 00 40 F1 5D  // q.].I........@.]
    B460: 09 25 40 01 3E 39 40 00 44 9A 0F 54 20 F7 5D 07  // .%@.>9@.D..T .].
    B470: 4D F1 5D DF FE 4A 65 F1 5D 40 49 97 01 0D 05 03  // M.]..Je.]@I.....
    B480: 5E 01 01 01 01 0D 25 00 5E 01 0D A5 00 5E 20 0D  // ^.....%.^....^ .
    B490: 25 00 5E 01 0D 05 03 5E 01 01 01 01 03 39 40 00  // %.^....^.....9@.
    B4A0: 09 25 40 01 5C 22 F1 5D FE 40 5C 65 00 5E C1 02  // .%@.\".].@\e.^..
    B4B0: 0D 25 02 5E 08 3D 65 00 07 49 E6 01 07 E5 00 5E  // .%.^.=e..I.....^
    B4C0: 5F 43 EB 01 0D E5 00 5E A0 5C 05 06 5E BB BB FF  // _C.....^.\..^...
    B4D0: FF 33 33 00 00 5C 05 03 5E F7 F7 F7 F7 02 02 02  // .33..\..^.......
    B4E0: 02 66 1E 2D 0D 42 0C 03 03 21 43 00 03 A2 46 44  // .f.-.B...!C...FD
    B4F0: 4C A4 46 00 00 44 3A 02 56 00 40 2D 0D 42 01 00  // L.F..D:.V.@-.B..
    B500: 03 21 40 00 2D 0A 42 40 03 24 40 00 00 03 62 40  // .!@.-.B@.$@...b@
    B510: 40 03 8A 40 40 43 59 02 66 07 2D 0C 42 0A 00 56  // @..@@CY.f.-.B..V
    B520: 00 40 20 25 00 0C 2D 0A 42 40 03 24 40 09 00 03  // .@ %..-.B@.$@...
    B530: 62 40 40 03 8A 40 40 5C 02 04 5E F8 F8 F8 F8 40  // b@@..@@\..^....@
    B540: 03 21 43 00 03 A2 46 44 3D A5 00 00 44 FD 02 03  // .!C...FD=...D...
    B550: 05 40 04 00 00 00 66 1E 2D 0D 42 C4 00 3D A5 00  // .@....f.-.B..=..
    B560: 02 44 AC 02 2D 0D 42 0C 00 3D 05 01 30 75 00 00  // .D..-.B..=..0u..
    B570: 47 AC 02 3D 05 01 40 9C 00 00 46 A7 02 2D 0D 42  // G..=..@...F..-.B
    B580: 28 02 43 AC 02 2D 0D 42 0C 00 4C A4 46 05 00 44  // (.C..-.B..L.F..D
    B590: CF 02 03 04 40 00 00 3E 05 40 00 00 00 00 44 CF  // ....@..>.@....D.
    B5A0: 02 03 24 40 0A 00 09 25 40 1C 43 BE 03 66 07 2D  // ..$@...%@.C..f.-
    B5B0: 0C 42 04 00 03 04 41 00 00 3E 05 41 00 00 00 00  // .B....A..>.A....
    B5C0: 44 BE 03 4C A4 46 06 00 49 F5 02 2D 0D 42 0C 00  // D..L.F..I..-.B..
    B5D0: 43 D6 02 03 24 40 07 00 43 BE 03 03 05 40 05 00  // C...$@..C....@..
    B5E0: 00 00 66 1E 2D 0D 42 C0 02 03 0C 46 02 00 4C A4  // ..f.-.B....F..L.
    B5F0: 46 00 00 49 5F 03 66 1E 2D 0D 42 E8 00 3D 05 01  // F..I_.f.-.B..=..
    B600: 48 3F 00 00 47 52 03 66 1E 2D 0D 42 50 02 3D 05  // H?..GR.f.-.BP.=.
    B610: 01 78 69 00 00 47 52 03 66 1E 2D 0D 42 88 02 3D  // .xi..GR.f.-.B..=
    B620: 05 01 F0 D2 00 00 47 52 03 66 1E 2D 0D 42 20 01  // ......GR.f.-.B .
    B630: 03 0C 46 02 00 4C A4 46 00 00 44 8E 03 2D 0D 42  // ..F..L.F..D..-.B
    B640: 06 00 56 20 41 3D A4 00 00 00 44 82 03 2D 25 41  // ..V A=....D..-%A
    B650: 01 3E 25 41 0A 44 8E 03 2D 0D 42 05 00 43 67 03  // .>%A.D..-.B..Cg.
    B660: 03 24 40 04 00 09 25 40 1C 43 BE 03 66 07 2D 0C  // .$@...%@.C..f.-.
    B670: 42 08 00 03 04 41 00 00 3E 05 41 00 00 00 00 44  // B....A..>.A....D
    B680: BE 03 4C A4 46 04 00 49 B4 03 2D 0D 42 44 00 43  // ..L.F..I..-.BD.C
    B690: 95 03 2D 0D 42 08 00 03 24 40 05 00 15 05 40 1A  // ..-.B...$@....@.
    B6A0: 5C 02 12 5E FF FF FF E3 40 07 65 00 5E FE 3D A5  // \..^....@.e.^.=.
    B6B0: 00 00 49 76 04 5C 05 0B 5E FF FF 8F FF 00 00 10  // ..Iv.\..^.......
    B6C0: 00 0D 05 0C 5E 01 01 00 00 5C 05 0B 5E 0F 00 FF  // ....^....\..^...
    B6D0: FF 40 17 00 00 0D 05 0E 5E 00 00 00 01 01 05 07  // .@......^.......
    B6E0: 5E 01 00 00 80 01 05 0A 5E 00 00 00 00 01 05 09  // ^.......^.......
    B6F0: 5E 87 39 01 00 01 05 08 5E 48 E9 00 00 01 05 0D  // ^.9.....^H......
    B700: 5E 00 00 00 00 5C 05 0B 5E FF FF F8 FF 00 00 00  // ^....\..^.......
    B710: 00 5C 05 0C 5E 8F FF FF FF 20 00 00 00 0D 05 0E  // .\..^.... ......
    B720: 5E 00 00 00 10 07 05 0C 5E FB FF FF FF 01 05 0F  // ^.......^.......
    B730: 5E 3E 00 48 B0 01 05 10 5E 3E 00 18 26 01 05 11  // ^>.H....^>..&...
    B740: 5E 3E 00 80 3F 5C 05 12 5E 00 00 00 1C 3E 00 44  // ^>..?\..^....>.D
    B750: 00 43 0A 05 5C 05 0B 5E FF FF 8F FF 00 00 00 00  // .C..\..^........
    B760: 0D 05 0C 5E 01 01 00 00 5C 05 0B 5E 0F 00 FF FF  // ...^....\..^....
    B770: 00 0B 00 00 0D 05 0E 5E 00 00 00 01 01 05 07 5E  // .......^.......^
    B780: 03 00 AA 22 54 00 0A 5E 01 05 09 5E C1 0A 00 00  // ..."T..^...^....
    B790: 01 05 08 5E 00 10 00 00 01 05 0D 5E 00 00 00 00  // ...^.......^....
    B7A0: 5C 05 0B 5E FF FF F8 FF 00 00 04 00 07 05 0C 5E  // \..^...........^
    B7B0: 8F FF FF FF 0D 05 0E 5E 00 00 00 10 0D 05 0C 5E  // .......^.......^
    B7C0: 04 00 00 00 01 05 0F 5E 3E 00 08 B0 01 05 10 5E  // .......^>......^
    B7D0: 3E 00 1C 12 01 05 11 5E 3E 00 00 3E 5C 05 12 5E  // >......^>..>\..^
    B7E0: 00 00 00 1C 3E 00 44 00 0D A5 06 5E 08 0D 25 F3  // ....>.D....^..%.
    B7F0: 5D 01 0D 65 F1 5D 20 4A 65 F1 5D 40 49 19 05 0D  // ]..e.] Je.]@I...
    B800: A5 F1 5D 01 07 25 00 5E FE 07 05 03 5E FE FE FE  // ..]..%.^....^...
    B810: FE 4A E5 00 5E 10 44 33 05 66 07 2D 0C 42 0C 00  // .J..^.D3.f.-.B..
    B820: 03 04 40 00 00 3E 05 40 FF FF FF FF 44 65 05 01  // ..@..>.@....De..
    B830: 04 F4 5D 00 00 01 04 F5 5D 04 00 2D 0D 42 08 00  // ..].....]..-.B..
    B840: 43 42 05 01 05 F4 5D 38 20 00 00 01 05 F5 5D 0C  // CB....]8 .....].
    B850: 00 00 00 56 00 01 4A 05 03 5E 20 20 20 20 44 9E  // ...V..J..^    D.
    B860: 05 51 02 2D 05 01 01 00 00 00 3E 05 01 A0 86 01  // .Q.-......>.....
    B870: 00 49 78 05 01 25 F7 5D 03 43 9A 0F 03 00 40 04  // .Ix..%.].C....@.
    B880: 5E 09 05 40 07 00 00 00 21 05 40 03 00 00 00 03  // ^..@....!.@.....
    B890: 05 41 21 20 00 00 2D 02 41 40 01 02 F4 5D 41 03  // .A! ..-.A@...]A.
    B8A0: 00 41 F5 5D 01 05 F4 5D 84 00 00 00 01 02 F5 5D  // .A.]...].......]
    B8B0: 41 03 05 41 22 20 00 00 2D 02 41 40 01 02 F4 5D  // A..A" ..-.A@...]
    B8C0: 41 03 00 41 F5 5D 01 05 F4 5D 85 00 00 00 01 02  // A..A.]...]......
    B8D0: F5 5D 41 03 00 40 12 5E 09 05 40 00 00 00 1C 1B  // .]A..@.^..@.....
    B8E0: 05 40 16 01 05 F4 5D 22 00 00 00 03 00 41 F5 5D  // .@....]".....A.]
    B8F0: 09 25 41 0F 0F 22 41 40 0F 25 41 80 01 05 F4 5D  // .%A.."A@.%A....]
    B900: 22 00 00 00 01 02 F5 5D 41 56 00 41 3D A5 00 00  // "......]AV.A=...
    B910: 49 43 06 5C A5 0B 5E F8 00 07 65 00 5E FE 43 9A  // IC.\..^...e.^.C.
    B920: 0F 5C A5 0B 5E F8 01 0D 65 00 5E 01 43 9A 0F 03  // .\..^...e.^.C...
    B930: 0A 46 48 66 07 2D 0C 42 0A 00 56 00 40 20 25 00  // .FHf.-.B..V.@ %.
    B940: 0C 2D 0A 42 40 20 25 00 02 03 0A 48 40 01 04 2E  // .-.B@ %....H@...
    B950: 5D 00 00 07 E5 2D 5D FC 03 0A 48 46 66 1E 2D 0D  // ]....-]...HFf.-.
    B960: 42 04 03 03 21 43 00 03 A2 46 44 4C A4 46 00 00  // B...!C...FDL.F..
    B970: 44 E7 06 56 00 40 56 00 41 2D 0D 42 01 00 03 21  // D..V.@V.A-.B...!
    B980: 40 00 2D 0A 42 40 3D 25 00 03 45 B4 06 0D A5 00  // @.-.B@=%..E.....
    B990: 5E 20 03 24 41 00 00 03 05 40 EB 10 00 00 01 02  // ^ .$A....@......
    B9A0: F4 5D 40 01 02 F5 5D 41 2D 05 40 00 01 00 00 3E  // .]@...]A-.@....>
    B9B0: 05 40 EB 13 00 00 47 C0 06 3D 25 00 03 45 E7 06  // .@....G..=%..E..
    B9C0: 07 A5 00 5E DF 3D A5 00 00 49 22 07 66 FF 2D 0D  // ...^.=...I".f.-.
    B9D0: 42 AE 0F 03 04 40 04 00 3D 04 01 00 00 44 1B 07  // B....@..=....D..
    B9E0: 2D 0D 42 08 00 03 04 40 00 00 3E 05 40 00 00 00  // -.B....@..>.@...
    B9F0: 00 49 F5 06 03 04 40 04 00 5C 9A 10 5E 03 00 40  // .I....@..\..^..@
    BA00: 03 05 40 01 01 01 01 4A A5 F7 5D 01 44 40 07 4A  // ..@....J..].D@.J
    BA10: A5 06 5E 01 49 40 07 09 05 40 FF FF FE FE 0D 02  // ..^.I@...@......
    BA20: 03 5E 40 51 05 03 02 40 00 69 05 40 FF FF FF FF  // .^@Q...@.i.@....
    BA30: 07 02 03 5E 40 51 C8 51 C8 43 9A 0F 4A 25 FC 5D  // ...^@Q.Q.C..J%.]
    BA40: 01 49 9A 0F 3C 25 F7 5D 00 49 9A 0F 4C 25 00 01  // .I..<%.].I..L%..
    BA50: 44 7D 07 0D 05 06 5E 04 00 00 00 4C 65 00 01 44  // D}....^....Le..D
    BA60: 8C 07 0D 05 06 5E 40 00 00 00 4C A5 00 01 44 9B  // .....^@...L...D.
    BA70: 07 0D 05 06 5E 00 04 00 00 4C E5 00 01 44 AA 07  // ....^....L...D..
    BA80: 0D 05 06 5E 00 40 00 00 03 02 40 00 15 05 40 04  // ...^.@....@...@.
    BA90: 0D 02 03 5E 40 56 00 01 4A 25 FC 5D 01 49 9A 0F  // ...^@V..J%.].I..
    BAA0: 03 02 40 00 15 05 40 05 03 00 41 03 5E 09 02 41  // ..@...@...A.^..A
    BAB0: 40 09 05 40 20 20 20 20 3E 02 41 40 44 FC 07 51  // @..@    >.A@D..Q
    BAC0: 02 2D 05 01 01 00 00 00 3E 05 01 A0 86 01 00 49  // .-......>......I
    BAD0: BA 07 01 25 F7 5D 04 43 9A 0F 03 02 40 00 15 05  // ...%.].C....@...
    BAE0: 40 04 69 05 40 FF FF FF FF 07 02 03 5E 40 56 00  // @.i.@.......^@V.
    BAF0: 01 4A 25 FC 5D 01 49 9A 0F 03 02 40 00 15 05 40  // .J%.].I....@...@
    BB00: 05 03 00 41 03 5E 09 02 41 40 3E 05 41 00 00 00  // ...A.^..A@>.A...
    BB10: 00 44 51 08 51 02 2D 05 01 01 00 00 00 3E 05 01  // .DQ.Q.-......>..
    BB20: A0 86 01 00 49 13 08 01 25 F7 5D 05 43 9A 0F 56  // ....I...%.].C..V
    BB30: 00 01 4A 25 FC 5D 01 49 9A 0F 4A 25 0C 5E 80 49  // ..J%.].I..J%.^.I
    BB40: 7F 08 51 02 2D 05 01 01 00 00 00 3E 05 01 A0 86  // ..Q.-......>....
    BB50: 01 00 49 54 08 01 25 F7 5D 06 43 9A 0F 03 0A 41  // ..IT..%.].C....A
    BB60: 48 56 00 40 03 21 40 00 03 0A 48 40 0D 25 60 01  // HV.@.!@...H@.%`.
    BB70: 01 51 0A 03 0A 48 41 0D 25 E8 5D 03 4A 25 E8 5D  // .Q...HA.%.].J%.]
    BB80: 04 44 9E 08 0D 65 F1 5D 12 4A 65 F1 5D 04 44 AB  // .D...e.].Je.].D.
    BB90: 08 4C 25 00 01 44 BF 08 0D 65 F0 5D 10 4C 65 00  // .L%..D...e.].Le.
    BBA0: 01 44 CB 08 0D 65 F0 5D 20 4C A5 00 01 44 D7 08  // .D...e.] L...D..
    BBB0: 0D 65 F0 5D 40 4C E5 00 01 44 E3 08 0D 65 F0 5D  // .e.]@L...D...e.]
    BBC0: 80 01 71 F7 5D 00 43 9A 0F 4A 05 06 5E 44 44 00  // ..q.].C..J..^DD.
    BBD0: 00 44 9A 0F 07 65 F1 5D FD 07 25 E8 5D FD 03 0A  // .D...e.]..%.]...
    BBE0: 41 48 56 00 40 03 21 40 00 03 0A 48 40 07 25 60  // AHV.@.!@...H@.%`
    BBF0: 01 FE 03 0A 48 41 4C 25 00 01 44 27 09 07 05 06  // ....HAL%..D'....
    BC00: 5E FB FF FF FF 4C 65 00 01 44 36 09 07 05 06 5E  // ^....Le..D6....^
    BC10: BF FF FF FF 4C A5 00 01 44 45 09 07 05 06 5E FF  // ....L...DE....^.
    BC20: FB FF FF 4C E5 00 01 44 54 09 07 05 06 5E FF BF  // ...L...DT....^..
    BC30: FF FF 07 65 0C 5E FE 54 00 08 5E 54 00 09 5E 3D  // ...e.^.T..^T..^=
    BC40: 25 00 03 45 C2 09 03 00 40 06 5E 4C 25 00 01 44  // %..E....@.^L%..D
    BC50: 7F 09 5E 05 40 FC FF FF FF 03 00 00 00 4C 65 00  // ..^.@........Le.
    BC60: 01 44 91 09 5E 05 40 CF FF FF FF 30 00 00 00 4C  // .D..^.@....0...L
    BC70: A5 00 01 44 A3 09 5E 05 40 FF FC FF FF 00 03 00  // ...D..^.@.......
    BC80: 00 4C E5 00 01 44 B5 09 5E 05 40 FF CF FF FF 00  // .L...D..^.@.....
    BC90: 30 00 00 3C 02 06 5E 40 44 69 0A 01 02 06 5E 40  // 0..<..^@Di....^@
    BCA0: 03 02 40 00 15 05 40 04 0D 02 03 5E 40 56 00 01  // ..@...@....^@V..
    BCB0: 4A 25 FC 5D 01 49 14 0A 03 02 40 00 15 05 40 05  // J%.].I....@...@.
    BCC0: 03 00 41 03 5E 09 02 41 40 09 05 40 20 20 20 20  // ..A.^..A@..@    
    BCD0: 3E 02 41 40 44 14 0A 51 02 2D 05 01 01 00 00 00  // >.A@D..Q.-......
    BCE0: 3E 05 01 A0 86 01 00 49 D2 09 01 25 F7 5D 07 43  // >......I...%.].C
    BCF0: 9A 0F 03 02 40 00 15 05 40 04 69 05 40 FF FF FF  // ....@...@.i.@...
    BD00: FF 07 02 03 5E 40 56 00 01 4A 25 FC 5D 01 49 69  // ....^@V..J%.].Ii
    BD10: 0A 03 02 40 00 15 05 40 05 03 00 41 03 5E 09 02  // ...@...@...A.^..
    BD20: 41 40 3E 05 41 00 00 00 00 44 69 0A 51 02 2D 05  // A@>.A....Di.Q.-.
    BD30: 01 01 00 00 00 3E 05 01 A0 86 01 00 49 2B 0A 01  // .....>......I+..
    BD40: 25 F7 5D 08 43 9A 0F 03 02 40 00 15 05 40 02 69  // %.].C....@...@.i
    BD50: 05 40 FF FF FF FF 07 02 03 5E 40 03 02 40 00 15  // .@.......^@..@..
    BD60: 05 40 01 09 05 40 02 02 02 02 0D 02 03 5E 40 43  // .@...@.......^@C
    BD70: 9A 0F 4A 25 FC 5D 01 49 9A 0F 56 00 40 20 25 00  // ..J%.].I..V.@ %.
    BD80: 02 03 0A 41 48 03 02 48 40 0D E5 2E 5D 10 03 0A  // ...AH..H@...]...
    BD90: 48 41 3D A5 00 00 44 C0 0A 0D 65 F0 5D F0 0D A5  // HA=...D...e.]...
    BDA0: F0 5D 01 0D A5 E9 5D 01 3D A5 00 00 44 DC 0A 4A  // .]....].=...D..J
    BDB0: 05 06 5E 33 33 00 00 44 ED 0B 03 02 40 00 15 05  // ..^33..D....@...
    BDC0: 40 01 69 05 40 FF FF FF FF 07 02 03 5E 40 03 02  // @.i.@.......^@..
    BDD0: 40 00 15 05 40 02 09 05 40 04 04 04 04 0D 02 03  // @...@...@.......
    BDE0: 5E 40 03 00 40 06 5E 4C 25 00 01 44 17 0B 09 05  // ^@..@.^L%..D....
    BDF0: 40 FC FF FF FF 4C 65 00 01 44 25 0B 09 05 40 CF  // @....Le..D%...@.
    BE00: FF FF FF 4C A5 00 01 44 33 0B 09 05 40 FF FC FF  // ...L...D3...@...
    BE10: FF 4C E5 00 01 44 41 0B 09 05 40 FF CF FF FF 01  // .L...DA...@.....
    BE20: 02 06 5E 40 03 02 40 00 15 05 40 04 0D 02 03 5E  // ..^@..@...@....^
    BE30: 40 56 00 01 4A 25 FC 5D 01 49 9A 0F 03 02 40 00  // @V..J%.].I....@.
    BE40: 15 05 40 05 03 00 41 03 5E 09 02 41 40 09 05 40  // ..@...A.^..A@..@
    BE50: 20 20 20 20 3E 02 41 40 44 98 0B 51 02 2D 05 01  //     >.A@D..Q.-..
    BE60: 01 00 00 00 3E 05 01 A0 86 01 00 49 56 0B 01 25  // ....>......IV..%
    BE70: F7 5D 09 43 9A 0F 03 02 40 00 15 05 40 04 69 05  // .].C....@...@.i.
    BE80: 40 FF FF FF FF 07 02 03 5E 40 56 00 01 4A 25 FC  // @.......^@V..J%.
    BE90: 5D 01 49 9A 0F 03 02 40 00 15 05 40 05 03 00 41  // ].I....@...@...A
    BEA0: 03 5E 09 02 41 40 3E 05 41 00 00 00 00 44 ED 0B  // .^..A@>.A....D..
    BEB0: 51 02 2D 05 01 01 00 00 00 3E 05 01 A0 86 01 00  // Q.-......>......
    BEC0: 49 AF 0B 01 25 F7 5D 0A 43 9A 0F 03 02 40 00 15  // I...%.].C....@..
    BED0: 05 40 03 09 05 40 08 08 08 08 0D 02 03 5E 40 43  // .@...@.......^@C
    BEE0: 9A 0F 03 02 40 00 15 05 40 03 69 05 40 FF FF FF  // ....@...@.i.@...
    BEF0: FF 07 02 03 5E 40 3D 25 00 03 48 20 0D 03 00 40  // ....^@=%..H ...@
    BF00: 06 5E 4C 25 00 01 44 36 0C 5E 05 40 FC FF FF FF  // .^L%..D6.^.@....
    BF10: 03 00 00 00 4C 65 00 01 44 48 0C 5E 05 40 CF FF  // ....Le..DH.^.@..
    BF20: FF FF 30 00 00 00 4C A5 00 01 44 5A 0C 5E 05 40  // ..0...L...DZ.^.@
    BF30: FF FC FF FF 00 03 00 00 4C E5 00 01 44 6C 0C 5E  // ........L...Dl.^
    BF40: 05 40 FF CF FF FF 00 30 00 00 3C 02 06 5E 40 44  // .@.....0..<..^@D
    BF50: 20 0D 01 02 06 5E 40 03 02 40 00 15 05 40 04 0D  //  ....^@..@...@..
    BF60: 02 03 5E 40 56 00 01 4A 25 FC 5D 01 49 CB 0C 03  // ..^@V..J%.].I...
    BF70: 02 40 00 15 05 40 05 03 00 41 03 5E 09 02 41 40  // .@...@...A.^..A@
    BF80: 09 05 40 20 20 20 20 3E 02 41 40 44 CB 0C 51 02  // ..@    >.A@D..Q.
    BF90: 2D 05 01 01 00 00 00 3E 05 01 A0 86 01 00 49 89  // -......>......I.
    BFA0: 0C 01 25 F7 5D 07 43 9A 0F 03 02 40 00 15 05 40  // ..%.].C....@...@
    BFB0: 04 69 05 40 FF FF FF FF 07 02 03 5E 40 56 00 01  // .i.@.......^@V..
    BFC0: 4A 25 FC 5D 01 49 20 0D 03 02 40 00 15 05 40 05  // J%.].I ...@...@.
    BFD0: 03 00 41 03 5E 09 02 41 40 3E 05 41 00 00 00 00  // ..A.^..A@>.A....
    BFE0: 44 20 0D 51 02 2D 05 01 01 00 00 00 3E 05 01 A0  // D .Q.-......>...
    BFF0: 86 01 00 49 E2 0C 01 25 F7 5D 08 43 9A 0F 07 A5  // ...I...%.].C....
    C000: F0 5D FE 4C 25 00 01 44 31 0D 07 65 F0 5D EF 4C  // .].L%..D1..e.].L
    C010: 65 00 01 44 3D 0D 07 65 F0 5D DF 4C A5 00 01 44  // e..D=..e.].L...D
    C020: 49 0D 07 65 F0 5D BF 4C E5 00 01 44 55 0D 07 65  // I..e.].L...DU..e
    C030: F0 5D 7F 07 A5 E9 5D FE 56 00 40 20 25 00 02 03  // .]....].V.@ %...
    C040: 0A 48 40 07 E5 2E 5D EF 43 9A 0F 66 1E 2D 0D 42  // .H@...].C..f.-.B
    C050: C4 00 3D A5 00 02 44 A8 0D 2D 0D 42 0C 00 3D A5  // ..=...D..-.B..=.
    C060: 00 03 49 9A 0F 3D 05 01 30 75 00 00 47 A8 0D 3D  // ..I..=..0u..G..=
    C070: 05 01 40 9C 00 00 46 A3 0D 2D 0D 42 28 02 43 A8  // ..@...F..-.B(.C.
    C080: 0D 2D 0D 42 0C 00 03 21 43 00 03 A2 46 44 4C A4  // .-.B...!C...FDL.
    C090: 46 05 00 44 FF 0D 03 04 40 00 00 3E 05 40 00 00  // F..D....@..>.@..
    C0A0: 00 00 44 FF 0D 56 00 41 56 00 40 03 24 40 06 00  // ..D..V.AV.@.$@..
    C0B0: 09 25 40 3F 03 22 41 40 03 24 40 07 00 09 25 40  // .%@?."A@.$@...%@
    C0C0: 3F 15 0D 40 06 0F 0A 41 40 03 64 40 08 00 09 65  // ?..@...A@.d@...e
    C0D0: 40 3F 15 15 40 04 0F 52 41 40 43 76 0F 03 21 43  // @?..@..RA@Cv..!C
    C0E0: 00 03 A2 46 44 66 07 2D 0C 42 04 00 3D A5 00 03  // ...FDf.-.B..=...
    C0F0: 44 23 0E 66 07 2D 0C 42 06 00 3D A5 00 02 49 9A  // D#.f.-.B..=...I.
    C100: 0F 03 04 41 00 00 3E 05 41 00 00 00 00 44 9A 0F  // ...A..>.A....D..
    C110: 3D 02 01 41 46 41 0E 4C A4 46 06 00 49 49 0E 2D  // =..AFA.L.F..II.-
    C120: 0D 42 0C 00 43 23 0E 03 04 41 08 00 43 76 0F 08  // .B..C#...A..Cv..
    C130: A5 00 1B 66 1E 2D 0D 42 C0 02 03 21 43 00 03 A2  // ...f.-.B...!C...
    C140: 46 44 03 0C 46 02 00 4C A4 46 00 00 49 C0 0E 66  // FD..F..L.F..I..f
    C150: 1E 2D 0D 42 E8 00 3D 05 01 48 3F 00 00 47 AB 0E  // .-.B..=..H?..G..
    C160: 66 1E 2D 0D 42 50 02 3D 05 01 78 69 00 00 47 AB  // f.-.BP.=..xi..G.
    C170: 0E 66 1E 2D 0D 42 88 02 3D 05 01 F0 D2 00 00 47  // .f.-.B..=......G
    C180: AB 0E 66 1E 2D 0D 42 20 01 03 21 43 00 03 A2 46  // ..f.-.B ..!C...F
    C190: 44 03 0C 46 02 00 4C A4 46 00 00 44 1B 0F 2D 0D  // D..F..L.F..D..-.
    C1A0: 42 06 00 56 20 41 3D A4 00 00 00 44 E3 0E 2D 25  // B..V A=....D..-%
    C1B0: 41 01 3E 25 41 0A 44 1B 0F 2D 0D 42 05 00 43 C8  // A.>%A.D..-.B..C.
    C1C0: 0E 56 00 41 56 00 40 03 24 40 01 00 09 25 40 3F  // .V.AV.@.$@...%@?
    C1D0: 03 22 41 40 03 24 40 02 00 09 25 40 3F 15 0D 40  // ."A@.$@...%@?..@
    C1E0: 06 0F 0A 41 40 03 64 40 03 00 09 65 40 3F 15 15  // ...A@.d@...e@?..
    C1F0: 40 04 0F 52 41 40 43 76 0F 66 07 2D 0C 42 08 00  // @..RA@Cv.f.-.B..
    C200: 03 21 43 00 03 A2 46 44 03 04 41 00 00 3E 05 41  // .!C...FD..A..>.A
    C210: 00 00 00 00 44 9A 0F 3D 02 01 41 46 48 0F 4C A4  // ....D..=..AFH.L.
    C220: 46 04 00 49 50 0F 2D 0D 42 44 00 43 2A 0F 2D 0D  // F..IP.-.BD.C*.-.
    C230: 42 08 00 3D A4 00 00 00 44 71 0F 03 24 41 00 00  // B..=....Dq..$A..
    C240: 3E 25 41 18 44 71 0F 2D 0D 42 06 00 43 55 0F 03  // >%A.Dq.-.B..CU..
    C250: 04 41 01 00 5C 02 0F 5E 00 00 FC FF 41 5C 02 10  // .A..\..^....A\..
    C260: 5E 00 00 FC FF 41 5C 02 11 5E 00 00 FC FF 41 5C  // ^....A\..^....A\
    C270: 02 12 5E 00 00 FC FF 41 3A 00 00 5B 7A 0A 00 00  // ..^....A:..[z...
    C280: 00 D8 00 B0 01 88 02 60 03 7A 48 00 48 3F 00 00  // .......`.zH.H?..
    C290: 00 00 10 28 78 69 00 00 00 00 10 28 F0 D2 00 00  // ...(xi.....(....
    C2A0: 00 00 10 26 68 3C 01 00 00 00 10 26 60 54 00 00  // ...&h<.....&`T..
    C2B0: 00 00 10 26 EC 5E 00 00 00 00 10 2A 90 7E 00 00  // ...&.^.....*.~..
    C2C0: 00 00 10 28 C0 A8 00 00 00 00 10 26 00 00 00 00  // ...(.......&....
    C2D0: 00 00 10 28 1B 02 01 02 00 00 37 00 00 3D 0D 00  // ...(......7..=..
    C2E0: 00 00 44 CE 01 56 00 41 03 21 41 01 09 25 41 0F  // ..D..V.A.!A..%A.
    C2F0: 15 0D 41 02 03 0A 40 42 66 FF 2D 0D 42 07 02 2D  // ..A...@Bf.-.B..-
    C300: 0A 42 41 03 0C 48 02 00 0D A5 90 5D 01 54 08 90  // .BA..H.....].T..
    C310: 5D 03 0C 48 00 00 03 F9 41 01 15 3D 41 04 5C BA  // ]..H....A..=A.\.
    C320: 10 54 8F 41 03 0A 42 40 4A 25 10 54 01 49 81 00  // .T.A..B@J%.T.I..
    C330: 0D 0D 10 54 01 01 0D 25 10 54 10 4A 25 10 54 20  // ...T...%.T.J%.T 
    C340: 44 67 00 07 25 10 54 EF 4A 25 10 54 20 49 74 00  // Dg..%.T.J%.T It.
    C350: 0D 25 13 54 40 56 00 41 03 09 41 00 3B 02 41 03  // .%.T@V.A..A.;.A.
    C360: 3B 41 00 1B 25 41 04 01 A2 11 54 41 03 69 41 01  // ;A..%A....TA.iA.
    C370: 15 2D 41 04 01 2A 11 54 41 56 00 40 0F E5 40 80  // .-A..*.TAV.@..@.
    C380: 03 73 40 00 01 02 16 54 40 56 00 40 03 6B 40 00  // .s@....T@V.@.k@.
    C390: 01 02 16 54 40 03 63 40 00 01 02 16 54 40 03 7B  // ...T@.c@....T@.{
    C3A0: 40 00 09 65 40 0F 01 02 16 54 40 3E 25 41 04 47  // @..e@....T@>%A.G
    C3B0: 10 01 33 25 41 04 2D 05 46 04 00 00 00 03 63 40  // ..3%A.-.F.....c@
    C3C0: 00 01 02 16 54 40 03 6B 40 00 01 02 16 54 40 03  // ....T@.k@....T@.
    C3D0: 73 40 00 01 02 16 54 40 03 7B 40 00 01 02 16 54  // s@....T@.{@....T
    C3E0: 40 43 D7 00 0D 25 13 54 02 0D 25 11 54 01 03 29  // @C...%.T..%.T..)
    C3F0: 40 01 21 25 40 0A 2D 25 40 96 4A 25 14 54 01 49  // @.!%@.-%@.J%.T.I
    C400: 42 01 51 14 33 25 40 01 3E 25 40 00 49 26 01 02  // B.Q.3%@.>%@.I&..
    C410: 65 01 01 43 CA 01 4A 05 14 54 F0 8F FF 00 44 54  // e..C..J..T....DT
    C420: 01 02 65 01 02 43 CA 01 01 05 16 54 01 00 00 80  // ..e..C.....T....
    C430: 03 00 40 16 54 02 6A 01 40 02 B8 01 14 54 08 A5  // ..@.T.j.@....T..
    C440: 01 1F 3D A5 01 00 46 7C 01 02 65 01 03 43 CA 01  // ..=...F|..e..C..
    C450: 32 A5 01 01 3D 8D 00 00 00 44 CA 01 3D A5 01 00  // 2...=....D..=...
    C460: 44 CA 01 03 31 41 01 03 19 40 00 56 18 40 3B 02  // D...1A...@.V.@;.
    C470: 40 03 28 40 16 54 03 68 40 16 54 03 A8 40 16 54  // @.(@.T.h@.T..@.T
    C480: 03 E8 40 16 54 04 02 00 40 3E 25 41 04 47 CA 01  // ..@.T...@>%A.G..
    C490: 33 25 41 04 2D 05 46 04 00 00 00 43 9D 01 3A 00  // 3%A.-.F....C..:.
    C4A0: 00 5B 66 FF 2D 0D 42 07 02 03 0C 48 00 00 01 8D  // .[f.-.B....H....
    C4B0: 18 54 18 00 01 05 19 54 4D 1C 02 00 01 05 1A 54  // .T.....TM......T
    C4C0: 10 11 3D 10 2D 0D 42 04 00 2C 25 00 01 3D 25 00  // ..=.-.B..,%..=%.
    C4D0: 05 49 D5 01 56 08 48 5B 7A 14 00 00 00 00 00 1C  // .I..V.H[z.......
    C4E0: 00 04 00 38 00 08 00 54 00 0C 00 70 00 10 00 00  // ...8...T...p....
    C4F0: 5A 00 01 02 00 04 02 25 01 04 03 31 41 00 09 0D  // Z......%...1A...
    C500: 41 0F 00 15 0D 41 01 66 FF 2D 0D 42 50 00 2D 0A  // A....A.f.-.BP.-.
    C510: 42 41 03 0C 48 00 00 07 A5 90 5D FE 01 0D 90 5D  // BA..H.....]....]
    C520: 11 11 50 02 4A 0D 93 5D 01 00 49 41 00 02 25 01  // ..P.J..]..IA..%.
    C530: 13 54 08 90 5D 54 00 92 5D 3A 00 00 5B 7A 0A 00  // .T..]T..]:..[z..
    C540: 00 00 04 00 08 00 0C 00 10 00 62 01 02 01 04 04  // ..........b.....
    C550: 37 00 00 42 21 00 63 07 29 00 63 03 4E 00 63 02  // 7..B!.c.).c.N.c.
    C560: 60 00 63 04 84 00 63 0C 19 01 63 0D 22 01 5A 5A  // `.c...c...c.".ZZ
    C570: 43 61 01 01 0D 45 5D 9F 0F 66 06 01 24 47 5D 30  // Ca...E]..f..$G]0
    C580: 00 01 4C 47 5D 31 00 03 24 46 3B 00 3E 25 46 00  // ..LG]1..$F;.>%F.
    C590: 44 61 01 54 20 47 5D 5B 0D E5 47 5D 01 5C 05 43  // Da.T G][..G].\.C
    C5A0: 5D FF FF FF FD 11 00 03 00 5B 0D E5 47 5D 01 4A  // ]........[..G].J
    C5B0: 25 44 5D 02 44 72 00 0D A5 43 5D 01 0D A5 43 5D  // %D].Dr...C]...C]
    C5C0: 02 5C 05 43 5D EF FF FF FD 01 00 00 00 5B 4A 05  // .\.C]........[J.
    C5D0: 53 00 00 02 00 00 44 94 00 0D 25 4B 5D 01 3D 8D  // S.....D...%K].=.
    C5E0: 00 00 00 44 18 01 03 05 46 00 36 6E 01 56 00 41  // ...D....F.6n.V.A
    C5F0: 03 19 41 00 21 05 41 FF 0F 00 00 27 02 46 40 3E  // ..A.!.A....'.F@>
    C600: 05 41 00 00 00 00 44 C4 00 2D 0D 40 01 00 01 8A  // .A....D..-.@....
    C610: 45 5D 40 56 00 41 03 19 41 00 21 02 40 41 27 02  // E]@V.A..A.!.@A'.
    C620: 46 40 01 A5 4A 5D 0C 01 0A 4A 5D 40 15 05 40 04  // F@..J]...J]@..@.
    C630: 56 00 41 03 29 41 00 3E 25 41 FF 49 F9 00 2D 0D  // V.A.)A.>%A.I..-.
    C640: 41 01 00 21 02 40 41 1B 05 40 08 01 0A 48 5D 40  // A..!.@A..@...H]@
    C650: 0D E5 48 5D C0 07 25 4B 5D FE 4A 65 4B 5D 01 49  // ..H]..%K].JeK].I
    C660: 10 01 5B 01 05 43 5D 00 00 03 00 5B 0D E5 47 5D  // ..[..C]....[..G]
    C670: 01 4A 05 43 5D 01 00 00 00 44 48 01 4A 05 43 5D  // .J.C]....DH.J.C]
    C680: 10 00 00 00 49 55 01 4A 05 44 5D 01 00 00 00 49  // ....IU.J.D]....I
    C690: 3D 01 5C 05 43 5D FF FF FE FF 00 00 02 00 5B 5C  // =.\.C]........[\
    C6A0: 05 43 5D EF FF FD FD 01 00 00 00 5B 9E 00 03 02  // .C]........[....
    C6B0: 00 10 37 00 00 01 05 00 00 2C A8 01 00 03 00 46  // ..7......,.....F
    C6C0: 01 00 1B 05 46 08 3D 65 02 00 49 25 00 2C 22 02  // ....F.=e..I%.,".
    C6D0: 46 3D E5 02 00 49 30 00 2C A2 02 46 3D 65 02 02  // F=...I0.,..F=e..
    C6E0: 49 37 00 03 01 40 03 09 05 40 00 00 00 FC 3E 05  // I7...@...@....>.
    C6F0: 40 00 00 00 D0 49 5D 00 01 05 63 C0 00 00 00 40  // @....I]...c....@
    C700: 55 00 00 55 20 02 43 61 00 54 00 63 C0 01 01 64  // U..U .Ca.T.c...d
    C710: C0 00 56 00 40 03 21 40 02 01 02 65 C0 40 01 01  // ..V.@.!@...e.@..
    C720: 66 C0 01 03 31 40 02 01 02 67 C0 40 01 01 E8 C0  // f...1@...g.@....
    C730: 03 3D 65 02 01 44 95 00 3D E5 02 01 44 95 00 51  // .=e..D..=...D..Q
    C740: 02 4A E5 A0 21 80 49 95 00 5B A4 01 02 02 00 00  // .J..!.I..[......
    C750: 37 00 00 3D 25 01 01 44 93 00 3D 25 01 02 44 94  // 7..=%..D..=%..D.
    C760: 00 3D 25 01 03 44 33 00 3D 25 01 00 49 8D 01 3D  // .=%..D3.=%..I..=
    C770: 05 00 00 00 00 00 49 61 00 3A 00 00 5B 3C 01 4A  // ......Ia.:..[<.J
    C780: 00 00 49 3C 00 5B 01 01 4A 00 00 26 05 00 64 00  // ..I<.[..J..&..d.
    C790: 00 00 02 02 01 40 02 05 00 07 00 00 00 52 13 20  // .....@.......R. 
    C7A0: 05 01 64 00 00 00 02 02 00 40 5B 3C 01 4B 00 00  // ..d......@[<.K..
    C7B0: 49 6A 00 5B 01 01 4B 00 00 54 20 A4 53 26 05 00  // Ij.[..K..T .S&..
    C7C0: 64 00 00 00 02 02 01 40 02 05 00 04 00 00 00 52  // d......@.......R
    C7D0: 13 20 05 01 64 00 00 00 02 02 00 40 5B 5B 66 FF  // . ..d......@[[f.
    C7E0: 2D 0D 42 94 01 56 00 41 03 39 41 01 15 25 41 02  // -.B..V.A.9A..%A.
    C7F0: 2D 0A 42 41 3D 65 01 0B 49 07 01 20 05 00 64 00  // -.BA=e..I.. ..d.
    C800: 00 00 03 0C 48 02 00 03 00 41 40 01 0F 25 41 10  // ....H....A@..%A.
    C810: 09 0D 41 DF FF 03 0C 48 00 00 4A 05 01 50 01 00  // ..A....H..J..P..
    C820: 00 00 44 F0 00 03 0C 48 02 00 3C 02 41 01 40 49  // ..D....H..<.A.@I
    C830: F0 00 3C 02 40 01 41 44 8D 01 03 0C 48 02 00 07  // ..<.@.AD....H...
    C840: 25 40 01 EF 01 02 41 01 40 01 0A 40 01 41 43 8D  // %@....A.@..@.AC.
    C850: 01 56 00 40 03 8D 40 0C 00 3D 65 01 18 44 1E 01  // .V.@..@..=e..D..
    C860: 03 A9 40 01 33 A5 40 14 03 31 40 01 09 25 40 03  // ..@.3.@..1@..%@.
    C870: 15 25 40 04 0F 0D 40 01 01 56 00 41 03 29 41 01  // .%@...@..V.A.)A.
    C880: 33 25 41 14 03 0C 48 00 00 4A 05 01 50 01 00 00  // 3%A...H..J..P...
    C890: 00 44 6B 01 03 0C 48 02 00 4A 25 40 01 10 49 6B  // .Dk...H..J%@..Ik
    C8A0: 01 3C 22 43 01 41 49 6B 01 03 1A 48 40 3C 0A 00  // .<"C.AIk...H@<..
    C8B0: 01 40 44 8D 01 03 1A 48 40 07 25 00 01 FE 03 0C  // .@D....H@.%.....
    C8C0: 48 02 00 01 22 43 01 41 07 0D 40 01 EF FF 03 1A  // H..."C.A..@.....
    C8D0: 48 40 01 0A 00 01 40 3A 00 00 5B 7A 10 00 00 00  // H@....@:..[z....
    C8E0: 00 00 80 00 04 00 00 01 08 00 80 01 0C 00 E6 00  // ................
    C8F0: 01 01 04 00 37 00 00 56 00 00 66 1E 2D 0D 42 4C  // ....7..V..f.-.BL
    C900: 00 56 00 40 21 25 00 10 2D 0A 42 40 03 24 41 0C  // .V.@!%..-.B@.$A.
    C910: 00 4C 25 41 08 44 DA 00 02 25 00 64 02 0D 01 01  // .L%A.D...%.d....
    C920: 01 02 E4 01 06 00 0E E5 01 90 66 1E 43 58 00 2D  // ..........f.CX.-
    C930: 0D 42 35 02 02 A4 01 00 00 03 64 00 01 00 2D 0D  // .B5.......d...-.
    C940: 42 03 00 43 C0 00 3E 0D 00 00 00 44 7B 00 3E 0D  // B..C..>....D{.>.
    C950: 00 01 00 44 92 00 3E 0D 00 02 00 44 A9 00 3E 0D  // ...D..>....D..>.
    C960: 00 03 00 44 41 00 43 DA 00 2D 0D 42 E4 01 02 A4  // ...DA.C..-.B....
    C970: 01 00 00 03 64 00 01 00 2D 0D 42 03 00 43 C0 00  // ....d...-.B..C..
    C980: 2D 0D 42 FF 01 02 A4 01 00 00 03 64 00 01 00 2D  // -.B........d...-
    C990: 0D 42 03 00 43 C0 00 2D 0D 42 1A 02 02 A4 01 00  // .B..C..-.B......
    C9A0: 00 03 64 00 01 00 2D 0D 42 03 00 43 C0 00 3E 65  // ..d...-.B..C..>e
    C9B0: 00 00 44 DA 00 33 65 00 01 02 4C 00 00 00 52 36  // ..D..3e...L...R6
    C9C0: 2D 0D 42 02 00 43 C0 00 2D 25 00 01 3E 25 00 04  // -.B..C..-%..>%..
    C9D0: 45 0C 00 5B 54 01 02 01 D6 09 80 02 A0 00 E0 01  // E..[T...........
    C9E0: 2D 00 10 00 60 00 0A 00 02 00 00 00 00 00 08 08  // -...`...........
    C9F0: 06 00 12 3C A0 0F 20 03 00 01 58 02 1C 00 28 00  // ...<.. ...X...(.
    CA00: 80 00 01 00 04 00 00 00 00 00 00 00 00 00 6A 3C  // ..............j<
    CA10: 64 19 00 04 40 01 00 03 26 00 18 00 88 00 03 00  // d...@...&.......
    CA20: 06 00 00 00 00 00 00 00 06 00 55 3C 01 1D 00 05  // ..........U<....
    CA30: 72 01 D0 02 1E 00 6E 00 28 00 05 00 05 00 00 00  // r.....n.(.......
    CA40: 00 00 00 00 00 00 E8 3C 30 2A 00 05 08 02 C0 03  // .......<0*......
    CA50: 28 00 60 00 70 00 01 00 03 00 00 00 00 00 00 00  // (.`.p...........
    CA60: 00 00 E9 3C 30 2A 00 05 98 01 00 04 2A 00 30 00  // ...<0*......*.0.
    CA70: 70 00 01 00 03 00 00 00 00 00 00 00 00 00 EA 3C  // p..............<
    CA80: 66 21 56 05 AA 01 00 03 1E 00 46 00 8F 00 03 00  // f!V.......F.....
    CA90: 03 00 00 00 00 00 00 00 02 00 ED 3C 8F 2F 78 05  // ...........<./x.
    CAA0: D0 01 1A 04 27 00 58 00 90 00 03 00 04 00 00 00  // ....'.X.........
    CAB0: 00 00 00 00 02 00 EB 3C 48 3F 40 06 30 02 B0 04  // .......<H?@.0...
    CAC0: 32 00 40 00 C0 00 01 00 03 00 00 00 00 00 00 00  // 2.@.............
    CAD0: 00 00 EC 3C 02 3A 80 07 18 01 38 04 2D 00 58 00  // ...<.:....8.-.X.
    CAE0: 2C 00 04 00 05 00 00 00 00 00 00 00 02 00 F3 3C  // ,..............<
    CAF0: 7D 4B 80 07 A0 02 B0 04 2D 00 88 00 C8 00 03 00  // }K......-.......
    CB00: 06 00 00 00 00 00 00 00 02 00 F0 3C 68 5B 80 07  // ...........<h[..
    CB10: A8 02 A0 05 3C 00 80 00 D0 00 01 00 03 00 00 00  // ....<...........
    CB20: 00 00 00 00 02 00 F1 3C 48 00 03 02 1D 00 0A 11  // .......<H.......
    CB30: 20 4E 00 00 20 4E 00 00 01 00 00 00 5C 2D 00 00  //  N.. N......\-..
    CB40: 4C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // L...............
    CB50: F4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CB60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CB70: 04 03 02 01 00 00 00 00 00 2A 00 2A 00 00 2A 2A  // .........*.*..**
    CB80: 2A 00 00 2A 00 2A 2A 15 00 2A 2A 2A 15 15 15 15  // *..*.**..***....
    CB90: 15 3F 15 3F 15 15 3F 3F 3F 15 15 3F 15 3F 3F 3F  // .?.?..???..?.???
    CBA0: 15 3F 3F 3F 00 00 00 05 05 05 08 08 08 0B 0B 0B  // .???............
    CBB0: 0E 0E 0E 11 11 11 14 14 14 18 18 18 1C 1C 1C 20  // ............... 
    CBC0: 20 20 24 24 24 28 28 28 2D 2D 2D 32 32 32 38 38  //   $$$(((---22288
    CBD0: 38 3F 3F 3F 00 00 3F 10 00 3F 1F 00 3F 2F 00 3F  // 8???..?..?..?/.?
    CBE0: 3F 00 3F 3F 00 2F 3F 00 1F 3F 00 10 3F 00 00 3F  // ?.??./?..?..?..?
    CBF0: 10 00 3F 1F 00 3F 2F 00 3F 3F 00 2F 3F 00 1F 3F  // ..?..?/.??./?..?
    CC00: 00 10 3F 00 00 3F 00 00 3F 10 00 3F 1F 00 3F 2F  // ..?..?..?..?..?/
    CC10: 00 3F 3F 00 2F 3F 00 1F 3F 00 10 3F 1F 1F 3F 27  // .??./?..?..?..?'
    CC20: 1F 3F 2F 1F 3F 37 1F 3F 3F 1F 3F 3F 1F 37 3F 1F  // .?/.?7.??.??.7?.
    CC30: 2F 3F 1F 27 3F 1F 1F 3F 27 1F 3F 2F 1F 3F 37 1F  // /?.'?..?'.?/.?7.
    CC40: 3F 3F 1F 37 3F 1F 2F 3F 1F 27 3F 1F 1F 3F 1F 1F  // ??.7?./?.'?..?..
    CC50: 3F 27 1F 3F 2F 1F 3F 37 1F 3F 3F 1F 37 3F 1F 2F  // ?'.?/.?7.??.7?./
    CC60: 3F 1F 27 3F 2D 2D 3F 31 2D 3F 36 2D 3F 3A 2D 3F  // ?.'?--?1-?6-?:-?
    CC70: 3F 2D 3F 3F 2D 3A 3F 2D 36 3F 2D 31 3F 2D 2D 3F  // ?-??-:?-6?-1?--?
    CC80: 31 2D 3F 36 2D 3F 3A 2D 3F 3F 2D 3A 3F 2D 36 3F  // 1-?6-?:-??-:?-6?
    CC90: 2D 31 3F 2D 2D 3F 2D 2D 3F 31 2D 3F 36 2D 3F 3A  // -1?--?--?1-?6-?:
    CCA0: 2D 3F 3F 2D 3A 3F 2D 36 3F 2D 31 3F 00 00 1C 07  // -??-:?-6?-1?....
    CCB0: 00 1C 0E 00 1C 15 00 1C 1C 00 1C 1C 00 15 1C 00  // ................
    CCC0: 0E 1C 00 07 1C 00 00 1C 07 00 1C 0E 00 1C 15 00  // ................
    CCD0: 1C 1C 00 15 1C 00 0E 1C 00 07 1C 00 00 1C 00 00  // ................
    CCE0: 1C 07 00 1C 0E 00 1C 15 00 1C 1C 00 15 1C 00 0E  // ................
    CCF0: 1C 00 07 1C 0E 0E 1C 11 0E 1C 15 0E 1C 18 0E 1C  // ................
    CD00: 1C 0E 1C 1C 0E 18 1C 0E 15 1C 0E 11 1C 0E 0E 1C  // ................
    CD10: 11 0E 1C 15 0E 1C 18 0E 1C 1C 0E 18 1C 0E 15 1C  // ................
    CD20: 0E 11 1C 0E 0E 1C 0E 0E 1C 11 0E 1C 15 0E 1C 18  // ................
    CD30: 0E 1C 1C 0E 18 1C 0E 15 1C 0E 11 1C 14 14 1C 16  // ................
    CD40: 14 1C 18 14 1C 1A 14 1C 1C 14 1C 1C 14 1A 1C 14  // ................
    CD50: 18 1C 14 16 1C 14 14 1C 16 14 1C 18 14 1C 1A 14  // ................
    CD60: 1C 1C 14 1A 1C 14 18 1C 14 16 1C 14 14 1C 14 14  // ................
    CD70: 1C 16 14 1C 18 14 1C 1A 14 1C 1C 14 1A 1C 14 18  // ................
    CD80: 1C 14 16 1C 00 00 10 04 00 10 08 00 10 0C 00 10  // ................
    CD90: 10 00 10 10 00 0C 10 00 08 10 00 04 10 00 00 10  // ................
    CDA0: 04 00 10 08 00 10 0C 00 10 10 00 0C 10 00 08 10  // ................
    CDB0: 00 04 10 00 00 10 00 00 10 04 00 10 08 00 10 0C  // ................
    CDC0: 00 10 10 00 0C 10 00 08 10 00 04 10 08 08 10 0A  // ................
    CDD0: 08 10 0C 08 10 0E 08 10 10 08 10 10 08 0E 10 08  // ................
    CDE0: 0C 10 08 0A 10 08 08 10 0A 08 10 0C 08 10 0E 08  // ................
    CDF0: 10 10 08 0E 10 08 0C 10 08 0A 10 08 08 10 08 08  // ................
    CE00: 10 0A 08 10 0C 08 10 0E 08 10 10 08 0E 10 08 0C  // ................
    CE10: 10 08 0A 10 0B 0B 10 0C 0B 10 0D 0B 10 0F 0B 10  // ................
    CE20: 10 0B 10 10 0B 0F 10 0B 0D 10 0B 0C 10 0B 0B 10  // ................
    CE30: 0C 0B 10 0D 0B 10 0F 0B 10 10 0B 0F 10 0B 0D 10  // ................
    CE40: 0B 0C 10 0B 0B 10 0B 0B 10 0C 0B 10 0D 0B 10 0F  // ................
    CE50: 0B 10 10 0B 0F 10 0B 0D 10 0B 0C 10 00 00 00 00  // ................
    CE60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CE70: 00 00 00 00 5C 00 02 01 95 3B 80 07 36 01 38 04  // ....\....;..6.8.
    CE80: 3C 00 30 00 20 00 03 00 06 00 58 01 C2 00 00 00  // <.0. .....X.....
    CE90: 04 00 00 3B C8 00 00 00 00 00 34 21 00 00 B8 0B  // ...;......4!....
    CEA0: 00 00 00 00 7D 00 00 01 0B 0A 82 41 00 FF FF 00  // ....}......A....
    CEB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CEC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CED0: 0C 00 02 01 00 00 00 00 00 00 00 00 00 04 01 0C  // ................
    CEE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CEF0: 77 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // w...............
    CF00: 00 00 00 00 C8 00 1E 02 00 00 00 00 00 00 00 00  // ................
    CF10: 00 00 00 00 8C 00 01 01 00 00 00 00 00 00 00 00  // ................
    CF20: 00 00 00 00 00 00 00 00 02 00 10 01 14 31 00 00  // .............1..
    CF30: 00 00 E4 00 00 00 00 00 08 00 10 02 0C 31 01 01  // .............1..
    CF40: 00 00 E4 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CF50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CF60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CF70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CF80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CF90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CFA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CFB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CFC0: 00 00 00 00 00 00 00 00 00 00 FF FF FF FF FF FF  // ................
    CFD0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    CFE0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    CFF0: FF FF FF FF FF FF FF FF FF FF FF FF 00 00 00 00  // ................
    D000: 00 00 FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D010: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D020: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D030: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D0A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D0B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D0C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D0D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D0E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D0F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D130: 00 00 FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D140: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D150: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D160: FF FF FF FF 00 00 00 00 00 00 FF FF FF FF FF FF  // ................
    D170: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D180: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D190: FF FF FF FF FF FF FF FF FF FF FF FF FF FB D3 2F  // .............../
    D1A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D1B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D1C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D1D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D1E0: 01 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D1F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D210: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D220: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D230: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D240: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D270: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D290: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D2A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D2B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D2C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D2D0: 00 00 00 00 00 00 00 00 00 00 00 00 54 00 02 01  // ............T...
    D2E0: B5 5D 00 00 00 00 01 00 B5 5D 00 00 08 08 02 00  // .].......]......
    D2F0: B5 5D 00 00 10 10 03 00 B5 5D 00 00 18 14 04 00  // .].......]......
    D300: B5 5D 00 00 1A 18 05 00 91 5D 00 00 08 08 90 00  // .].......]......
    D310: 95 5D 00 00 08 08 91 00 99 5D 00 00 08 08 92 00  // .].......]......
    D320: 9D 5D 00 00 08 08 93 00 A1 5D 00 00 08 08 94 00  // .].......]......
    D330: 9C 00 01 01 10 01 06 12 11 01 16 12 21 01 0A 12  // ............!...
    D340: 13 01 06 6A 14 01 16 6A 22 01 0A 6A 16 01 06 55  // ...j...j"..j...U
    D350: 17 01 16 55 23 01 0A 55 63 01 16 E8 64 01 0A E8  // ...U#..Uc...d...
    D360: 65 01 16 E9 66 01 0A E9 19 01 06 EA 1A 01 16 EA  // e...f...........
    D370: 24 01 0A EA 47 01 16 ED 48 01 0A ED 45 01 16 EB  // $...G...H...E...
    D380: 46 01 0A EB 75 01 16 EC 76 01 0A EC A5 01 16 F3  // F...u...v.......
    D390: A6 01 0A F3 A0 01 16 F0 A1 01 0A F0 A2 01 16 F1  // ................
    D3A0: A3 01 0A F1 D2 01 16 70 D4 01 0A 70 D8 01 16 71  // .......p...p...q
    D3B0: D9 01 0A 71 E2 01 16 72 E4 01 0A 72 E8 01 16 73  // ...q...r...r...s
    D3C0: E9 01 0A 73 F5 01 16 74 F6 01 0A 74 00 04 09 01  // ...s...t...t....
    D3D0: 14 00 02 01 02 00 08 00 80 00 00 02 00 04 00 08  // ................
    D3E0: 40 00 FF FF EB 00 01 04 0A 00 06 00 14 31 68 00  // @............1h.
    D3F0: 1E 21 00 00 B3 00 00 00 02 00 00 00 0C 31 77 00  // .!...........1w.
    D400: 1E 22 00 00 BA 00 00 00 08 00 00 00 00 00 86 00  // ."..............
    D410: 20 21 00 00 C1 00 00 00 00 00 00 00 00 00 95 00  //  !..............
    D420: 20 22 00 00 C8 00 00 00 00 00 00 00 00 00 A4 00  //  "..............
    D430: 21 21 00 00 CF 00 00 00 00 00 00 00 03 71 D6 00  // !!...........q..
    D440: 00 00 00 00 00 00 00 00 00 00 00 00 01 04 90 00  // ................
    D450: 02 04 01 00 17 06 00 00 00 00 FF 01 04 91 00 02  // ................
    D460: 04 02 00 17 06 00 00 00 00 FF 01 04 90 00 02 04  // ................
    D470: 00 00 17 06 00 00 00 00 FF 01 04 90 00 02 04 00  // ................
    D480: 00 17 06 00 00 00 00 FF 01 04 90 00 02 04 00 00  // ................
    D490: 17 06 00 00 00 00 FF 14 06 0F 00 00 00 FF 14 06  // ................
    D4A0: 0F 00 00 00 FF 14 06 0F 00 00 00 FF 14 06 0F 01  // ................
    D4B0: 00 00 FF 14 06 0F 01 00 00 FF 10 0A 01 02 03 04  // ................
    D4C0: 05 00 00 00 11 0A 90 91 92 93 94 00 00 00 FF 00  // ................
    D4D0: 05 00 01 01 00 00 38 00 04 03 04 00 00 00 70 11  // ......8.......p.
    D4E0: 01 00 C0 12 60 09 00 00 00 00 00 00 00 00 7C 01  // ....`.........|.
    D4F0: 4E 0C 01 01 00 00 55 00 00 00 C0 12 00 00 01 02  // N.....U.........
    D500: 04 01 00 05 05 00 00 00 00 00 00 00 00 00 06 02  // ................
    D510: 05 03 0E 00 36 00 46 00 5A 01 96 01 30 75 00 00  // ....6.F.Z...0u..
    D520: 0C 00 3F 05 3A 40 00 00 40 9C 00 00 0C 00 3F 05  // ..?.:@..@.....?.
    D530: 3E 00 00 00 FF FF FF 00 0C 00 3F 05 77 21 00 00  // >.........?.w!..
    D540: 00 00 00 00 FF FF FF 00 0C 00 3F 05 34 A0 00 00  // ..........?.4...
    D550: 00 00 00 00 48 3F 00 00 3F 00 44 00 00 16 00 00  // ....H?..?.D.....
    D560: 00 05 01 1F 00 00 00 05 02 2C 00 00 00 05 03 3E  // .........,.....>
    D570: 00 00 00 05 08 1B 50 00 00 05 09 25 60 00 00 05  // ......P....%`...
    D580: 0A 35 90 00 00 05 10 21 B0 00 00 05 11 2F F0 00  // .5.....!...../..
    D590: 00 05 18 2A 40 01 00 05 78 69 00 00 3F 00 44 00  // ...*@...xi..?.D.
    D5A0: 00 16 00 00 00 05 01 1F 00 00 00 05 02 2C 00 00  // .............,..
    D5B0: 00 05 03 3E 00 00 00 05 08 1B 50 00 00 05 09 25  // ...>......P....%
    D5C0: 60 00 00 05 0A 35 90 00 00 05 10 21 B0 00 00 05  // `....5.....!....
    D5D0: 11 2F F0 00 00 05 18 2A 40 01 00 05 F0 D2 00 00  // ./.....*@.......
    D5E0: 3F 00 44 00 00 1E 00 00 00 05 01 26 00 00 00 05  // ?.D........&....
    D5F0: 02 30 00 00 00 05 03 3E 00 00 00 05 08 22 40 00  // .0.....>....."@.
    D600: 00 05 09 2C 60 00 00 05 0A 37 70 00 00 05 10 27  // ...,`....7p....'
    D610: 90 00 00 05 11 32 C0 00 00 05 18 2E 00 01 00 05  // .....2..........
    D620: 68 3C 01 00 3F 00 44 00 00 1E 00 00 00 05 01 26  // h<..?.D........&
    D630: 00 00 00 05 02 30 00 00 00 05 03 3E 00 00 00 05  // .....0.....>....
    D640: 08 22 40 00 00 05 09 2C 60 00 00 05 0A 37 70 00  // ."@....,`....7p.
    D650: 00 05 10 27 90 00 00 05 11 32 C0 00 00 05 18 2E  // ...'.....2......
    D660: 00 01 00 05 00 00 00 00 02 03 00 01 00 01 02 03  // ................
    D670: 00 07 03 00 02 03 00 01 00 01 02 03 00 07 03 00  // ................
    D680: 02 03 00 01 00 01 02 03 00 07 03 00 00 01 02 03  // ................
    D690: 00 01 02 03 00 07 03 00 00 01 02 03 00 01 02 03  // ................
    D6A0: 00 07 03 00 08 30 00 00 8D 00 00 00 07 30 00 00  // .....0.......0..
    D6B0: 4A 25 00 00 08 31 00 00 8D 00 00 00 07 31 00 00  // J%...1.......1..
    D6C0: 4A 25 00 00 08 32 00 00 8D 00 00 00 07 32 00 00  // J%...2.......2..
    D6D0: 4A 25 00 00 08 33 00 00 8D 00 00 00 07 33 00 00  // J%...3.......3..
    D6E0: 4A 25 00 00 5A 00 00 00 05 00 00 00 EB 10 00 00  // J%..Z...........
    D6F0: 07 00 00 00 EB 11 00 00 07 00 00 00 EB 12 00 00  // ................
    D700: 07 00 00 00 EB 13 00 00 07 00 00 00 FF FF FF FF  // ................
    D710: 00 00 00 00 1C 00 03 01 00 0C 00 00 00 00 00 00  // ................
    D720: 77 01 35 0C C0 12 00 00 FF 00 FF 00 FF 00 00 00  // w.5.............
    D730: 34 00 02 03 00 09 01 02 08 01 02 02 64 C0 00 00  // 4...........d...
    D740: 65 C0 00 00 66 C0 00 00 67 C0 00 00 E8 C0 00 00  // e...f...g.......
    D750: A0 21 00 00 42 EC 00 00 10 27 00 00 08 02 00 00  // .!..B....'......
    D760: 25 00 00 00 FF FF FF FF FF FF FF FF FF FF FF FF  // %...............
    D770: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D780: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D790: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D7A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D7B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D7C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D7D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D7E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D7F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D800: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D810: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D820: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D830: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D840: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D850: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D860: FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00  // ................
    D870: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D880: 00 00 00 00                                      // ....


WSMT
----
[000h 0000 004h]                   Signature : "WSMT"    [Windows SMM Security Mitigations Table]
[004h 0004 004h]                Table Length : 00000028
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 11
[00Ah 0010 006h]                      Oem ID : "_ASUS_"
[010h 0016 008h]                Oem Table ID : "Notebook"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 004h]            Protection Flags : 00000004
                          FIXED_COMM_BUFFERS : 0
           COMM_BUFFER_NESTED_PTR_PROTECTION : 0
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 11 5F 41 53 55 53 5F  // WSMT(....._ASUS_
    0010: 4E 6F 74 65 62 6F 6F 6B 09 20 07 01 41 4D 49 20  // Notebook. ..AMI 
    0020: 13 00 01 00 04 00 00 00                          // ........


