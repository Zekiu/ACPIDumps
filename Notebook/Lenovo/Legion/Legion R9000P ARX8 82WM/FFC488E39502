
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20230628
Copyright (c) 2000 - 2023 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x0000352F  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 02)  MCFG  0x0000003C  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 03)  ASF!  0x000000A5  0x20  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 04)  APIC  0x00000218  0x03  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 05)  CRAT  0x00001D50  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 06)  SLIC  0x00000176  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 07)  SSDT  0x000083EA  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 08)  TPM2  0x00000034  0x04  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 09)  VFCT  0x0000AE84  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 10)  BOOT  0x00000028  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 11)  SSDT  0x000012FC  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 12)  SSDT  0x00000777  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 13)  SSDT  0x00000946  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 14)  CDIT  0x00000029  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 15)  UEFI  0x00000236  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 16)  IVRS  0x000001A4  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 17)  DSDT  0x00021DE0  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 18)  SSDT  0x000015B8  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 19)  WSMT  0x00000028  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 20)  SSDT  0x000006DA  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 21)  WDRT  0x00000047  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 22)  SSDT  0x000000F8  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 23)  WDAT  0x0000017C  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 24)  SSDT  0x000095FD  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 25)  SSDT  0x0000044B  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 26)  FACP  0x0000010C  0x05  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 27)  FPDT  0x00000044  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 28)  SSDT  0x000007E0  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 29)  MSDM  0x00000055  0x03  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 30)  SSDT  0x00000464  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 31)  SSDT  0x000029DC  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 32)  SSDT  0x000005B6  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 33)  HPET  0x00000038  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 34)  SSDT  0x00009BAE  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 35)  FACS  0x00000040  0x02
 36)  BGRT  0x00000038  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 37)  SSDT  0x000022AD  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000

Found 37 ACPI tables in acpidump

APIC
----
[000h 0000 004h]                   Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004 004h]                Table Length : 00000218
[008h 0008 001h]                    Revision : 03
[009h 0009 001h]                    Checksum : 55
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]          Local Apic Address : FEE00000
[028h 0040 004h]       Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044 001h]               Subtable Type : 00 [Processor Local APIC]
[02Dh 0045 001h]                      Length : 08
[02Eh 0046 001h]                Processor ID : 00
[02Fh 0047 001h]               Local Apic ID : 00
[030h 0048 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052 001h]               Subtable Type : 00 [Processor Local APIC]
[035h 0053 001h]                      Length : 08
[036h 0054 001h]                Processor ID : 01
[037h 0055 001h]               Local Apic ID : 01
[038h 0056 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060 001h]               Subtable Type : 00 [Processor Local APIC]
[03Dh 0061 001h]                      Length : 08
[03Eh 0062 001h]                Processor ID : 02
[03Fh 0063 001h]               Local Apic ID : 02
[040h 0064 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068 001h]               Subtable Type : 00 [Processor Local APIC]
[045h 0069 001h]                      Length : 08
[046h 0070 001h]                Processor ID : 03
[047h 0071 001h]               Local Apic ID : 03
[048h 0072 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076 001h]               Subtable Type : 00 [Processor Local APIC]
[04Dh 0077 001h]                      Length : 08
[04Eh 0078 001h]                Processor ID : 04
[04Fh 0079 001h]               Local Apic ID : 04
[050h 0080 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084 001h]               Subtable Type : 00 [Processor Local APIC]
[055h 0085 001h]                      Length : 08
[056h 0086 001h]                Processor ID : 05
[057h 0087 001h]               Local Apic ID : 05
[058h 0088 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092 001h]               Subtable Type : 00 [Processor Local APIC]
[05Dh 0093 001h]                      Length : 08
[05Eh 0094 001h]                Processor ID : 06
[05Fh 0095 001h]               Local Apic ID : 06
[060h 0096 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100 001h]               Subtable Type : 00 [Processor Local APIC]
[065h 0101 001h]                      Length : 08
[066h 0102 001h]                Processor ID : 07
[067h 0103 001h]               Local Apic ID : 07
[068h 0104 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108 001h]               Subtable Type : 00 [Processor Local APIC]
[06Dh 0109 001h]                      Length : 08
[06Eh 0110 001h]                Processor ID : 08
[06Fh 0111 001h]               Local Apic ID : 08
[070h 0112 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[074h 0116 001h]               Subtable Type : 00 [Processor Local APIC]
[075h 0117 001h]                      Length : 08
[076h 0118 001h]                Processor ID : 09
[077h 0119 001h]               Local Apic ID : 09
[078h 0120 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[07Ch 0124 001h]               Subtable Type : 00 [Processor Local APIC]
[07Dh 0125 001h]                      Length : 08
[07Eh 0126 001h]                Processor ID : 0A
[07Fh 0127 001h]               Local Apic ID : 0A
[080h 0128 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[084h 0132 001h]               Subtable Type : 00 [Processor Local APIC]
[085h 0133 001h]                      Length : 08
[086h 0134 001h]                Processor ID : 0B
[087h 0135 001h]               Local Apic ID : 0B
[088h 0136 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[08Ch 0140 001h]               Subtable Type : 00 [Processor Local APIC]
[08Dh 0141 001h]                      Length : 08
[08Eh 0142 001h]                Processor ID : 0C
[08Fh 0143 001h]               Local Apic ID : 0C
[090h 0144 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[094h 0148 001h]               Subtable Type : 00 [Processor Local APIC]
[095h 0149 001h]                      Length : 08
[096h 0150 001h]                Processor ID : 0D
[097h 0151 001h]               Local Apic ID : 0D
[098h 0152 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[09Ch 0156 001h]               Subtable Type : 00 [Processor Local APIC]
[09Dh 0157 001h]                      Length : 08
[09Eh 0158 001h]                Processor ID : 0E
[09Fh 0159 001h]               Local Apic ID : 0E
[0A0h 0160 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0A4h 0164 001h]               Subtable Type : 00 [Processor Local APIC]
[0A5h 0165 001h]                      Length : 08
[0A6h 0166 001h]                Processor ID : 0F
[0A7h 0167 001h]               Local Apic ID : 0F
[0A8h 0168 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0ACh 0172 001h]               Subtable Type : 00 [Processor Local APIC]
[0ADh 0173 001h]                      Length : 08
[0AEh 0174 001h]                Processor ID : 10
[0AFh 0175 001h]               Local Apic ID : 10
[0B0h 0176 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0B4h 0180 001h]               Subtable Type : 00 [Processor Local APIC]
[0B5h 0181 001h]                      Length : 08
[0B6h 0182 001h]                Processor ID : 11
[0B7h 0183 001h]               Local Apic ID : 11
[0B8h 0184 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0BCh 0188 001h]               Subtable Type : 00 [Processor Local APIC]
[0BDh 0189 001h]                      Length : 08
[0BEh 0190 001h]                Processor ID : 12
[0BFh 0191 001h]               Local Apic ID : 12
[0C0h 0192 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0C4h 0196 001h]               Subtable Type : 00 [Processor Local APIC]
[0C5h 0197 001h]                      Length : 08
[0C6h 0198 001h]                Processor ID : 13
[0C7h 0199 001h]               Local Apic ID : 13
[0C8h 0200 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0CCh 0204 001h]               Subtable Type : 00 [Processor Local APIC]
[0CDh 0205 001h]                      Length : 08
[0CEh 0206 001h]                Processor ID : 14
[0CFh 0207 001h]               Local Apic ID : 14
[0D0h 0208 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0D4h 0212 001h]               Subtable Type : 00 [Processor Local APIC]
[0D5h 0213 001h]                      Length : 08
[0D6h 0214 001h]                Processor ID : 15
[0D7h 0215 001h]               Local Apic ID : 15
[0D8h 0216 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0DCh 0220 001h]               Subtable Type : 00 [Processor Local APIC]
[0DDh 0221 001h]                      Length : 08
[0DEh 0222 001h]                Processor ID : 16
[0DFh 0223 001h]               Local Apic ID : 16
[0E0h 0224 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0E4h 0228 001h]               Subtable Type : 00 [Processor Local APIC]
[0E5h 0229 001h]                      Length : 08
[0E6h 0230 001h]                Processor ID : 17
[0E7h 0231 001h]               Local Apic ID : 17
[0E8h 0232 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0ECh 0236 001h]               Subtable Type : 00 [Processor Local APIC]
[0EDh 0237 001h]                      Length : 08
[0EEh 0238 001h]                Processor ID : 18
[0EFh 0239 001h]               Local Apic ID : 18
[0F0h 0240 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0F4h 0244 001h]               Subtable Type : 00 [Processor Local APIC]
[0F5h 0245 001h]                      Length : 08
[0F6h 0246 001h]                Processor ID : 19
[0F7h 0247 001h]               Local Apic ID : 19
[0F8h 0248 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0FCh 0252 001h]               Subtable Type : 00 [Processor Local APIC]
[0FDh 0253 001h]                      Length : 08
[0FEh 0254 001h]                Processor ID : 1A
[0FFh 0255 001h]               Local Apic ID : 1A
[100h 0256 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[104h 0260 001h]               Subtable Type : 00 [Processor Local APIC]
[105h 0261 001h]                      Length : 08
[106h 0262 001h]                Processor ID : 1B
[107h 0263 001h]               Local Apic ID : 1B
[108h 0264 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[10Ch 0268 001h]               Subtable Type : 00 [Processor Local APIC]
[10Dh 0269 001h]                      Length : 08
[10Eh 0270 001h]                Processor ID : 1C
[10Fh 0271 001h]               Local Apic ID : 1C
[110h 0272 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[114h 0276 001h]               Subtable Type : 00 [Processor Local APIC]
[115h 0277 001h]                      Length : 08
[116h 0278 001h]                Processor ID : 1D
[117h 0279 001h]               Local Apic ID : 1D
[118h 0280 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[11Ch 0284 001h]               Subtable Type : 00 [Processor Local APIC]
[11Dh 0285 001h]                      Length : 08
[11Eh 0286 001h]                Processor ID : 1E
[11Fh 0287 001h]               Local Apic ID : 1E
[120h 0288 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[124h 0292 001h]               Subtable Type : 00 [Processor Local APIC]
[125h 0293 001h]                      Length : 08
[126h 0294 001h]                Processor ID : 1F
[127h 0295 001h]               Local Apic ID : 1F
[128h 0296 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[12Ch 0300 001h]               Subtable Type : 01 [I/O APIC]
[12Dh 0301 001h]                      Length : 0C
[12Eh 0302 001h]                 I/O Apic ID : 20
[12Fh 0303 001h]                    Reserved : 00
[130h 0304 004h]                     Address : FEC00000
[134h 0308 004h]                   Interrupt : 00000000

[138h 0312 001h]               Subtable Type : 01 [I/O APIC]
[139h 0313 001h]                      Length : 0C
[13Ah 0314 001h]                 I/O Apic ID : 21
[13Bh 0315 001h]                    Reserved : 00
[13Ch 0316 004h]                     Address : FEC01000
[140h 0320 004h]                   Interrupt : 00000018

[144h 0324 001h]               Subtable Type : 02 [Interrupt Source Override]
[145h 0325 001h]                      Length : 0A
[146h 0326 001h]                         Bus : 00
[147h 0327 001h]                      Source : 00
[148h 0328 004h]                   Interrupt : 00000002
[14Ch 0332 002h]       Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[14Eh 0334 001h]               Subtable Type : 02 [Interrupt Source Override]
[14Fh 0335 001h]                      Length : 0A
[150h 0336 001h]                         Bus : 00
[151h 0337 001h]                      Source : 09
[152h 0338 004h]                   Interrupt : 00000009
[156h 0342 002h]       Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

[158h 0344 001h]               Subtable Type : 04 [Local APIC NMI]
[159h 0345 001h]                      Length : 06
[15Ah 0346 001h]                Processor ID : 00
[15Bh 0347 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[15Dh 0349 001h]        Interrupt Input LINT : 01

[15Eh 0350 001h]               Subtable Type : 04 [Local APIC NMI]
[15Fh 0351 001h]                      Length : 06
[160h 0352 001h]                Processor ID : 01
[161h 0353 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[163h 0355 001h]        Interrupt Input LINT : 01

[164h 0356 001h]               Subtable Type : 04 [Local APIC NMI]
[165h 0357 001h]                      Length : 06
[166h 0358 001h]                Processor ID : 02
[167h 0359 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[169h 0361 001h]        Interrupt Input LINT : 01

[16Ah 0362 001h]               Subtable Type : 04 [Local APIC NMI]
[16Bh 0363 001h]                      Length : 06
[16Ch 0364 001h]                Processor ID : 03
[16Dh 0365 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[16Fh 0367 001h]        Interrupt Input LINT : 01

[170h 0368 001h]               Subtable Type : 04 [Local APIC NMI]
[171h 0369 001h]                      Length : 06
[172h 0370 001h]                Processor ID : 04
[173h 0371 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[175h 0373 001h]        Interrupt Input LINT : 01

[176h 0374 001h]               Subtable Type : 04 [Local APIC NMI]
[177h 0375 001h]                      Length : 06
[178h 0376 001h]                Processor ID : 05
[179h 0377 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[17Bh 0379 001h]        Interrupt Input LINT : 01

[17Ch 0380 001h]               Subtable Type : 04 [Local APIC NMI]
[17Dh 0381 001h]                      Length : 06
[17Eh 0382 001h]                Processor ID : 06
[17Fh 0383 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[181h 0385 001h]        Interrupt Input LINT : 01

[182h 0386 001h]               Subtable Type : 04 [Local APIC NMI]
[183h 0387 001h]                      Length : 06
[184h 0388 001h]                Processor ID : 07
[185h 0389 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[187h 0391 001h]        Interrupt Input LINT : 01

[188h 0392 001h]               Subtable Type : 04 [Local APIC NMI]
[189h 0393 001h]                      Length : 06
[18Ah 0394 001h]                Processor ID : 08
[18Bh 0395 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[18Dh 0397 001h]        Interrupt Input LINT : 01

[18Eh 0398 001h]               Subtable Type : 04 [Local APIC NMI]
[18Fh 0399 001h]                      Length : 06
[190h 0400 001h]                Processor ID : 09
[191h 0401 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[193h 0403 001h]        Interrupt Input LINT : 01

[194h 0404 001h]               Subtable Type : 04 [Local APIC NMI]
[195h 0405 001h]                      Length : 06
[196h 0406 001h]                Processor ID : 0A
[197h 0407 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[199h 0409 001h]        Interrupt Input LINT : 01

[19Ah 0410 001h]               Subtable Type : 04 [Local APIC NMI]
[19Bh 0411 001h]                      Length : 06
[19Ch 0412 001h]                Processor ID : 0B
[19Dh 0413 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[19Fh 0415 001h]        Interrupt Input LINT : 01

[1A0h 0416 001h]               Subtable Type : 04 [Local APIC NMI]
[1A1h 0417 001h]                      Length : 06
[1A2h 0418 001h]                Processor ID : 0C
[1A3h 0419 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1A5h 0421 001h]        Interrupt Input LINT : 01

[1A6h 0422 001h]               Subtable Type : 04 [Local APIC NMI]
[1A7h 0423 001h]                      Length : 06
[1A8h 0424 001h]                Processor ID : 0D
[1A9h 0425 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1ABh 0427 001h]        Interrupt Input LINT : 01

[1ACh 0428 001h]               Subtable Type : 04 [Local APIC NMI]
[1ADh 0429 001h]                      Length : 06
[1AEh 0430 001h]                Processor ID : 0E
[1AFh 0431 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1B1h 0433 001h]        Interrupt Input LINT : 01

[1B2h 0434 001h]               Subtable Type : 04 [Local APIC NMI]
[1B3h 0435 001h]                      Length : 06
[1B4h 0436 001h]                Processor ID : 0F
[1B5h 0437 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1B7h 0439 001h]        Interrupt Input LINT : 01

[1B8h 0440 001h]               Subtable Type : 04 [Local APIC NMI]
[1B9h 0441 001h]                      Length : 06
[1BAh 0442 001h]                Processor ID : 10
[1BBh 0443 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1BDh 0445 001h]        Interrupt Input LINT : 01

[1BEh 0446 001h]               Subtable Type : 04 [Local APIC NMI]
[1BFh 0447 001h]                      Length : 06
[1C0h 0448 001h]                Processor ID : 11
[1C1h 0449 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1C3h 0451 001h]        Interrupt Input LINT : 01

[1C4h 0452 001h]               Subtable Type : 04 [Local APIC NMI]
[1C5h 0453 001h]                      Length : 06
[1C6h 0454 001h]                Processor ID : 12
[1C7h 0455 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1C9h 0457 001h]        Interrupt Input LINT : 01

[1CAh 0458 001h]               Subtable Type : 04 [Local APIC NMI]
[1CBh 0459 001h]                      Length : 06
[1CCh 0460 001h]                Processor ID : 13
[1CDh 0461 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1CFh 0463 001h]        Interrupt Input LINT : 01

[1D0h 0464 001h]               Subtable Type : 04 [Local APIC NMI]
[1D1h 0465 001h]                      Length : 06
[1D2h 0466 001h]                Processor ID : 14
[1D3h 0467 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1D5h 0469 001h]        Interrupt Input LINT : 01

[1D6h 0470 001h]               Subtable Type : 04 [Local APIC NMI]
[1D7h 0471 001h]                      Length : 06
[1D8h 0472 001h]                Processor ID : 15
[1D9h 0473 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1DBh 0475 001h]        Interrupt Input LINT : 01

[1DCh 0476 001h]               Subtable Type : 04 [Local APIC NMI]
[1DDh 0477 001h]                      Length : 06
[1DEh 0478 001h]                Processor ID : 16
[1DFh 0479 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1E1h 0481 001h]        Interrupt Input LINT : 01

[1E2h 0482 001h]               Subtable Type : 04 [Local APIC NMI]
[1E3h 0483 001h]                      Length : 06
[1E4h 0484 001h]                Processor ID : 17
[1E5h 0485 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1E7h 0487 001h]        Interrupt Input LINT : 01

[1E8h 0488 001h]               Subtable Type : 04 [Local APIC NMI]
[1E9h 0489 001h]                      Length : 06
[1EAh 0490 001h]                Processor ID : 18
[1EBh 0491 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1EDh 0493 001h]        Interrupt Input LINT : 01

[1EEh 0494 001h]               Subtable Type : 04 [Local APIC NMI]
[1EFh 0495 001h]                      Length : 06
[1F0h 0496 001h]                Processor ID : 19
[1F1h 0497 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1F3h 0499 001h]        Interrupt Input LINT : 01

[1F4h 0500 001h]               Subtable Type : 04 [Local APIC NMI]
[1F5h 0501 001h]                      Length : 06
[1F6h 0502 001h]                Processor ID : 1A
[1F7h 0503 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1F9h 0505 001h]        Interrupt Input LINT : 01

[1FAh 0506 001h]               Subtable Type : 04 [Local APIC NMI]
[1FBh 0507 001h]                      Length : 06
[1FCh 0508 001h]                Processor ID : 1B
[1FDh 0509 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[1FFh 0511 001h]        Interrupt Input LINT : 01

[200h 0512 001h]               Subtable Type : 04 [Local APIC NMI]
[201h 0513 001h]                      Length : 06
[202h 0514 001h]                Processor ID : 1C
[203h 0515 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[205h 0517 001h]        Interrupt Input LINT : 01

[206h 0518 001h]               Subtable Type : 04 [Local APIC NMI]
[207h 0519 001h]                      Length : 06
[208h 0520 001h]                Processor ID : 1D
[209h 0521 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[20Bh 0523 001h]        Interrupt Input LINT : 01

[20Ch 0524 001h]               Subtable Type : 04 [Local APIC NMI]
[20Dh 0525 001h]                      Length : 06
[20Eh 0526 001h]                Processor ID : 1E
[20Fh 0527 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[211h 0529 001h]        Interrupt Input LINT : 01

[212h 0530 001h]               Subtable Type : 04 [Local APIC NMI]
[213h 0531 001h]                      Length : 06
[214h 0532 001h]                Processor ID : 1F
[215h 0533 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[217h 0535 001h]        Interrupt Input LINT : 01

Raw Table Data: Length 536 (0x218)

    0000: 41 50 49 43 18 02 00 00 03 55 4C 45 4E 4F 56 4F  // APIC.....ULENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 01 01 01 00 00 00 00 08 02 02  // ................
    0040: 01 00 00 00 00 08 03 03 01 00 00 00 00 08 04 04  // ................
    0050: 01 00 00 00 00 08 05 05 01 00 00 00 00 08 06 06  // ................
    0060: 01 00 00 00 00 08 07 07 01 00 00 00 00 08 08 08  // ................
    0070: 01 00 00 00 00 08 09 09 01 00 00 00 00 08 0A 0A  // ................
    0080: 01 00 00 00 00 08 0B 0B 01 00 00 00 00 08 0C 0C  // ................
    0090: 01 00 00 00 00 08 0D 0D 01 00 00 00 00 08 0E 0E  // ................
    00A0: 01 00 00 00 00 08 0F 0F 01 00 00 00 00 08 10 10  // ................
    00B0: 01 00 00 00 00 08 11 11 01 00 00 00 00 08 12 12  // ................
    00C0: 01 00 00 00 00 08 13 13 01 00 00 00 00 08 14 14  // ................
    00D0: 01 00 00 00 00 08 15 15 01 00 00 00 00 08 16 16  // ................
    00E0: 01 00 00 00 00 08 17 17 01 00 00 00 00 08 18 18  // ................
    00F0: 01 00 00 00 00 08 19 19 01 00 00 00 00 08 1A 1A  // ................
    0100: 01 00 00 00 00 08 1B 1B 01 00 00 00 00 08 1C 1C  // ................
    0110: 01 00 00 00 00 08 1D 1D 01 00 00 00 00 08 1E 1E  // ................
    0120: 01 00 00 00 00 08 1F 1F 01 00 00 00 01 0C 20 00  // .............. .
    0130: 00 00 C0 FE 00 00 00 00 01 0C 21 00 00 10 C0 FE  // ..........!.....
    0140: 18 00 00 00 02 0A 00 00 02 00 00 00 00 00 02 0A  // ................
    0150: 00 09 09 00 00 00 0F 00 04 06 00 05 00 01 04 06  // ................
    0160: 01 05 00 01 04 06 02 05 00 01 04 06 03 05 00 01  // ................
    0170: 04 06 04 05 00 01 04 06 05 05 00 01 04 06 06 05  // ................
    0180: 00 01 04 06 07 05 00 01 04 06 08 05 00 01 04 06  // ................
    0190: 09 05 00 01 04 06 0A 05 00 01 04 06 0B 05 00 01  // ................
    01A0: 04 06 0C 05 00 01 04 06 0D 05 00 01 04 06 0E 05  // ................
    01B0: 00 01 04 06 0F 05 00 01 04 06 10 05 00 01 04 06  // ................
    01C0: 11 05 00 01 04 06 12 05 00 01 04 06 13 05 00 01  // ................
    01D0: 04 06 14 05 00 01 04 06 15 05 00 01 04 06 16 05  // ................
    01E0: 00 01 04 06 17 05 00 01 04 06 18 05 00 01 04 06  // ................
    01F0: 19 05 00 01 04 06 1A 05 00 01 04 06 1B 05 00 01  // ................
    0200: 04 06 1C 05 00 01 04 06 1D 05 00 01 04 06 1E 05  // ................
    0210: 00 01 04 06 1F 05 00 01                          // ........


ASF!
----
[000h 0000 004h]                   Signature : "ASF!"    [Alert Standard Format Table]
[004h 0004 004h]                Table Length : 000000A5
[008h 0008 001h]                    Revision : 20
[009h 0009 001h]                    Checksum : 8B
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 001h]               Subtable Type : 00 [ASF Information]
[025h 0037 001h]                    Reserved : 00
[026h 0038 002h]                      Length : 0010
[028h 0040 001h]         Minimum Reset Value : 00
[029h 0041 001h]    Minimum Polling Interval : FF
[02Ah 0042 002h]                   System ID : 0001
[02Ch 0044 004h]             Manufacturer ID : 57010000
[030h 0048 001h]                       Flags : 00
[031h 0049 003h]                    Reserved : 000000

[034h 0052 001h]               Subtable Type : 01 [ASF Alerts]
[035h 0053 001h]                    Reserved : 00
[036h 0054 002h]                      Length : 002C
[038h 0056 001h]                  AssertMask : 00
[039h 0057 001h]                DeassertMask : 00
[03Ah 0058 001h]                 Alert Count : 03
[03Bh 0059 001h]           Alert Data Length : 0C

[03Ch 0060 001h]                     Address : 80
[03Dh 0061 001h]                     Command : 23
[03Eh 0062 001h]                        Mask : 01
[03Fh 0063 001h]                       Value : 01
[040h 0064 001h]                  SensorType : 01
[041h 0065 001h]                        Type : 01
[042h 0066 001h]                      Offset : 00
[043h 0067 001h]                  SourceType : 39
[044h 0068 001h]                    Severity : 10
[045h 0069 001h]                SensorNumber : 00
[046h 0070 001h]                      Entity : 07
[047h 0071 001h]                    Instance : 00

[048h 0072 001h]                     Address : 80
[049h 0073 001h]                     Command : 23
[04Ah 0074 001h]                        Mask : 02
[04Bh 0075 001h]                       Value : 02
[04Ch 0076 001h]                  SensorType : 01
[04Dh 0077 001h]                        Type : 01
[04Eh 0078 001h]                      Offset : 00
[04Fh 0079 001h]                  SourceType : 39
[050h 0080 001h]                    Severity : 10
[051h 0081 001h]                SensorNumber : 01
[052h 0082 001h]                      Entity : 07
[053h 0083 001h]                    Instance : 00

[054h 0084 001h]                     Address : 80
[055h 0085 001h]                     Command : 23
[056h 0086 001h]                        Mask : 04
[057h 0087 001h]                       Value : 04
[058h 0088 001h]                  SensorType : 01
[059h 0089 001h]                        Type : 01
[05Ah 0090 001h]                      Offset : 00
[05Bh 0091 001h]                  SourceType : 39
[05Ch 0092 001h]                    Severity : 10
[05Dh 0093 001h]                SensorNumber : 02
[05Eh 0094 001h]                      Entity : 07
[05Fh 0095 001h]                    Instance : 00

[060h 0096 001h]               Subtable Type : 02 [ASF Remote Control]
[061h 0097 001h]                    Reserved : 00
[062h 0098 002h]                      Length : 0018
[064h 0100 001h]               Control Count : 04
[065h 0101 001h]         Control Data Length : 04
[066h 0102 002h]                    Reserved : 0000

[068h 0104 001h]                    Function : 00
[069h 0105 001h]                     Address : A9
[06Ah 0106 001h]                     Command : 50
[06Bh 0107 001h]                       Value : 00

[06Ch 0108 001h]                    Function : 01
[06Dh 0109 001h]                     Address : A9
[06Eh 0110 001h]                     Command : 52
[06Fh 0111 001h]                       Value : 00

[070h 0112 001h]                    Function : 02
[071h 0113 001h]                     Address : A9
[072h 0114 001h]                     Command : 51
[073h 0115 001h]                       Value : 00

[074h 0116 001h]                    Function : 03
[075h 0117 001h]                     Address : A9
[076h 0118 001h]                     Command : 53
[077h 0119 001h]                       Value : 00

[078h 0120 001h]               Subtable Type : 03 [ASF RMCP Boot Options]
[079h 0121 001h]                    Reserved : 00
[07Ah 0122 002h]                      Length : 0017
[07Ch 0124 007h]                Capabilities : 21 F8 00 00 00 1B F0
[083h 0131 001h]             Completion Code : 00
[084h 0132 004h]               Enterprise ID : 57010000
[088h 0136 001h]                     Command : 00
[089h 0137 002h]                   Parameter : 0000
[08Bh 0139 002h]                Boot Options : 0001
[08Dh 0141 002h]              Oem Parameters : 0000

[08Fh 0143 001h]               Subtable Type : 04 [ASF Address]
[090h 0144 001h]                    Reserved : 00
[091h 0145 002h]                      Length : 0016
[093h 0147 001h]               Eprom Address : 00
[094h 0148 001h]                Device Count : 10
[095h 0149 001h]                   Addresses : A0 A2 A4 00 00 00 00 00 00 00 00 00 00 00 00 00 


Raw Table Data: Length 165 (0xA5)

    0000: 41 53 46 21 A5 00 00 00 20 8B 4C 45 4E 4F 56 4F  // ASF!.... .LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 00 00 10 00 00 FF 01 00 00 00 01 57  // ...............W
    0030: 00 00 00 00 01 00 2C 00 00 00 03 0C 80 23 01 01  // ......,......#..
    0040: 01 01 00 39 10 00 07 00 80 23 02 02 01 01 00 39  // ...9.....#.....9
    0050: 10 01 07 00 80 23 04 04 01 01 00 39 10 02 07 00  // .....#.....9....
    0060: 02 00 18 00 04 04 00 00 00 A9 50 00 01 A9 52 00  // ..........P...R.
    0070: 02 A9 51 00 03 A9 53 00 03 00 17 00 21 F8 00 00  // ..Q...S.....!...
    0080: 00 1B F0 00 00 00 01 57 00 00 00 01 00 00 00 04  // .......W........
    0090: 00 16 00 00 10 A0 A2 A4 00 00 00 00 00 00 00 00  // ................
    00A0: 00 00 00 00 00                                   // .....


BGRT
----
[000h 0000 004h]                   Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 5D
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 002h]                     Version : 0001
[026h 0038 001h]      Status (decoded below) : 00
                                   Displayed : 0
                          Orientation Offset : 0
[027h 0039 001h]                  Image Type : 00
[028h 0040 008h]               Image Address : 00000000ABD65018
[030h 0048 004h]               Image OffsetX : 0000032D
[034h 0052 004h]               Image OffsetY : 000001B8

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 5D 4C 45 4E 4F 56 4F  // BGRT8....]LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 01 00 00 00 18 50 D6 AB 00 00 00 00  // .........P......
    0030: 2D 03 00 00 B8 01 00 00                          // -.......


BOOT
----
[000h 0000 004h]                   Signature : "BOOT"    [Simple Boot Flag Table]
[004h 0004 004h]                Table Length : 00000028
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : F7
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 001h]         Boot Register Index : 44
[025h 0037 003h]                    Reserved : 000000

Raw Table Data: Length 40 (0x28)

    0000: 42 4F 4F 54 28 00 00 00 01 F7 4C 45 4E 4F 56 4F  // BOOT(.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 44 00 00 00                          // ....D...


CDIT
----
[000h 0000 004h]                   Signature : "CDIT"    
[004h 0004 004h]                Table Length : 00000029
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 3F
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000


**** Unknown ACPI table signature [CDIT]


Raw Table Data: Length 41 (0x29)

    0000: 43 44 49 54 29 00 00 00 01 3F 4C 45 4E 4F 56 4F  // CDIT)....?LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 01 00 00 00 0A                       // .........


CRAT
----
[000h 0000 004h]                   Signature : "CRAT"    
[004h 0004 004h]                Table Length : 00001D50
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 2F
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000


**** Unknown ACPI table signature [CRAT]


Raw Table Data: Length 7504 (0x1D50)

    0000: 43 52 41 54 50 1D 00 00 01 2F 4C 45 4E 4F 56 4F  // CRATP..../LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 76 00 00 00 01 00 00 00 00 00 00 00  // ....v...........
    0030: 00 28 00 00 05 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0040: 20 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00  //  ...............
    0050: 00 00 00 00 00 00 00 00 01 28 00 00 01 00 00 00  // .........(......
    0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0A 00  // ................
    0070: 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00  // ....@...........
    0080: 01 28 00 00 01 00 00 00 00 00 00 00 00 00 0C 00  // .(..............
    0090: 00 00 00 00 00 00 F4 BF 00 00 00 00 40 00 00 00  // ............@...
    00A0: 00 00 00 00 00 00 00 00 01 28 00 00 01 00 00 00  // .........(......
    00B0: 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 40  // ...............@
    00C0: 03 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00  // ....@...........
    00D0: 02 40 00 00 0B 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    00E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0100: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0110: 02 40 00 00 0D 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0130: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0140: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0150: 02 40 00 00 0F 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0170: 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00  // ................
    0180: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0190: 02 40 00 00 0F 00 00 00 00 00 00 00 FF 00 00 00  // .@..............
    01A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 00  // ................
    01C0: 03 01 40 00 10 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    01D0: 02 40 00 00 0B 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    01E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0200: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0210: 02 40 00 00 0D 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0220: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0230: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0240: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0250: 02 40 00 00 0F 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0270: 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00  // ................
    0280: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0290: 02 40 00 00 0B 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    02A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02B0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    02C0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    02D0: 02 40 00 00 0D 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    02E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0300: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0310: 02 40 00 00 0F 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0320: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0330: 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00  // ................
    0340: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0350: 02 40 00 00 0B 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0360: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0370: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0380: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0390: 02 40 00 00 0D 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    03A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03B0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    03C0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    03D0: 02 40 00 00 0F 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    03E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00  // ................
    0400: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0410: 02 40 00 00 0B 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0420: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0430: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0440: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0450: 02 40 00 00 0D 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0460: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0470: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0480: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0490: 02 40 00 00 0F 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    04A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00  // ................
    04C0: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    04D0: 02 40 00 00 0B 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    04E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0500: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0510: 02 40 00 00 0D 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0520: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0530: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0540: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0550: 02 40 00 00 0F 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0560: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0570: 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00  // ................
    0580: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0590: 02 40 00 00 0B 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    05A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05B0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    05C0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    05D0: 02 40 00 00 0D 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    05E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0600: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0610: 02 40 00 00 0F 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0620: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0630: 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00  // ................
    0640: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0650: 02 40 00 00 0B 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0660: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0670: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0680: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0690: 02 40 00 00 0D 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    06A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06B0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    06C0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    06D0: 02 40 00 00 0F 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    06E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00  // ................
    0700: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0710: 02 40 00 00 0B 00 00 00 10 00 00 00 00 00 03 00  // .@..............
    0720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0730: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0740: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0750: 02 40 00 00 0D 00 00 00 10 00 00 00 00 00 03 00  // .@..............
    0760: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0770: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0780: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0790: 02 40 00 00 0F 00 00 00 10 00 00 00 00 00 03 00  // .@..............
    07A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00  // ................
    07C0: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    07D0: 02 40 00 00 0F 00 00 00 10 00 00 00 00 00 FF 00  // .@..............
    07E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 00  // ................
    0800: 03 01 40 00 10 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0810: 02 40 00 00 0B 00 00 00 12 00 00 00 00 00 0C 00  // .@..............
    0820: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0830: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0840: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0850: 02 40 00 00 0D 00 00 00 12 00 00 00 00 00 0C 00  // .@..............
    0860: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0870: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0880: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0890: 02 40 00 00 0F 00 00 00 12 00 00 00 00 00 0C 00  // .@..............
    08A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00  // ................
    08C0: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    08D0: 02 40 00 00 0B 00 00 00 14 00 00 00 00 00 30 00  // .@............0.
    08E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0900: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0910: 02 40 00 00 0D 00 00 00 14 00 00 00 00 00 30 00  // .@............0.
    0920: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0930: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0940: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0950: 02 40 00 00 0F 00 00 00 14 00 00 00 00 00 30 00  // .@............0.
    0960: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0970: 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00  // ................
    0980: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0990: 02 40 00 00 0B 00 00 00 16 00 00 00 00 00 C0 00  // .@..............
    09A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09B0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    09C0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    09D0: 02 40 00 00 0D 00 00 00 16 00 00 00 00 00 C0 00  // .@..............
    09E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0A00: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0A10: 02 40 00 00 0F 00 00 00 16 00 00 00 00 00 C0 00  // .@..............
    0A20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A30: 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00  // ................
    0A40: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0A50: 02 40 00 00 0B 00 00 00 18 00 00 00 00 00 00 03  // .@..............
    0A60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A70: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0A80: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0A90: 02 40 00 00 0D 00 00 00 18 00 00 00 00 00 00 03  // .@..............
    0AA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AB0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0AC0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0AD0: 02 40 00 00 0F 00 00 00 18 00 00 00 00 00 00 03  // .@..............
    0AE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00  // ................
    0B00: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0B10: 02 40 00 00 0B 00 00 00 1A 00 00 00 00 00 00 0C  // .@..............
    0B20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B30: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0B40: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0B50: 02 40 00 00 0D 00 00 00 1A 00 00 00 00 00 00 0C  // .@..............
    0B60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B70: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0B80: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0B90: 02 40 00 00 0F 00 00 00 1A 00 00 00 00 00 00 0C  // .@..............
    0BA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00  // ................
    0BC0: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0BD0: 02 40 00 00 0B 00 00 00 1C 00 00 00 00 00 00 30  // .@.............0
    0BE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BF0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0C00: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0C10: 02 40 00 00 0D 00 00 00 1C 00 00 00 00 00 00 30  // .@.............0
    0C20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C30: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0C40: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0C50: 02 40 00 00 0F 00 00 00 1C 00 00 00 00 00 00 30  // .@.............0
    0C60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C70: 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00  // ................
    0C80: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0C90: 02 40 00 00 0B 00 00 00 1E 00 00 00 00 00 00 C0  // .@..............
    0CA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CB0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0CC0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0CD0: 02 40 00 00 0D 00 00 00 1E 00 00 00 00 00 00 C0  // .@..............
    0CE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CF0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0D00: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0D10: 02 40 00 00 0F 00 00 00 1E 00 00 00 00 00 00 C0  // .@..............
    0D20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D30: 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00  // ................
    0D40: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0D50: 03 40 00 00 0B 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0D60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D70: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0D80: FF 48 00 00 FF 48 00 00 0F 48 00 00 00 00 00 00  // .H...H...H......
    0D90: 03 40 00 00 0D 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0DA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DB0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0DC0: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0DD0: 03 40 00 00 AB 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0DE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DF0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0E00: 05 0C 00 00 08 0C 00 00 FF 48 00 00 00 00 00 00  // .........H......
    0E10: 03 40 00 00 AD 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0E20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E30: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0E40: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    0E50: 03 40 00 00 0B 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0E60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E70: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0E80: FF 48 00 00 FF 48 00 00 0F 48 00 00 00 00 00 00  // .H...H...H......
    0E90: 03 40 00 00 0D 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0EA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EB0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0EC0: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0ED0: 03 40 00 00 AB 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0EE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EF0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0F00: 05 0C 00 00 08 0C 00 00 FF 48 00 00 00 00 00 00  // .........H......
    0F10: 03 40 00 00 AD 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0F20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F30: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0F40: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    0F50: 03 40 00 00 0B 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0F60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F70: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0F80: FF 48 00 00 FF 48 00 00 0F 48 00 00 00 00 00 00  // .H...H...H......
    0F90: 03 40 00 00 0D 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0FA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0FB0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0FC0: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0FD0: 03 40 00 00 AB 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0FE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0FF0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    1000: 05 0C 00 00 08 0C 00 00 FF 48 00 00 00 00 00 00  // .........H......
    1010: 03 40 00 00 AD 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    1020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1030: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    1040: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    1050: 03 40 00 00 0B 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    1060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1070: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    1080: FF 48 00 00 FF 48 00 00 0F 48 00 00 00 00 00 00  // .H...H...H......
    1090: 03 40 00 00 0D 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    10A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    10B0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    10C0: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    10D0: 03 40 00 00 AB 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    10E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    10F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    1100: 05 0C 00 00 08 0C 00 00 FF 48 00 00 00 00 00 00  // .........H......
    1110: 03 40 00 00 AD 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    1120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1130: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    1140: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    1150: 03 40 00 00 0B 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    1160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1170: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    1180: FF 48 00 00 FF 48 00 00 0F 48 00 00 00 00 00 00  // .H...H...H......
    1190: 03 40 00 00 0D 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    11A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    11B0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    11C0: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    11D0: 03 40 00 00 AB 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    11E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    11F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    1200: 05 0C 00 00 08 0C 00 00 FF 48 00 00 00 00 00 00  // .........H......
    1210: 03 40 00 00 AD 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    1220: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1230: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    1240: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    1250: 03 40 00 00 0B 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    1260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1270: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    1280: FF 48 00 00 FF 48 00 00 0F 48 00 00 00 00 00 00  // .H...H...H......
    1290: 03 40 00 00 0D 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    12A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    12B0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    12C0: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    12D0: 03 40 00 00 AB 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    12E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    12F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    1300: 05 0C 00 00 08 0C 00 00 FF 48 00 00 00 00 00 00  // .........H......
    1310: 03 40 00 00 AD 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    1320: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1330: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    1340: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    1350: 03 40 00 00 0B 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    1360: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1370: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    1380: FF 48 00 00 FF 48 00 00 0F 48 00 00 00 00 00 00  // .H...H...H......
    1390: 03 40 00 00 0D 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    13A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    13B0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    13C0: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    13D0: 03 40 00 00 AB 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    13E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    13F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    1400: 05 0C 00 00 08 0C 00 00 FF 48 00 00 00 00 00 00  // .........H......
    1410: 03 40 00 00 AD 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    1420: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1430: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    1440: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    1450: 03 40 00 00 0B 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    1460: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1470: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    1480: FF 48 00 00 FF 48 00 00 0F 48 00 00 00 00 00 00  // .H...H...H......
    1490: 03 40 00 00 0D 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    14A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    14B0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    14C0: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    14D0: 03 40 00 00 AB 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    14E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    14F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    1500: 05 0C 00 00 08 0C 00 00 FF 48 00 00 00 00 00 00  // .........H......
    1510: 03 40 00 00 AD 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    1520: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1530: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    1540: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    1550: 03 40 00 00 0B 00 00 00 10 00 00 00 00 00 03 00  // .@..............
    1560: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1570: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    1580: FF 48 00 00 FF 48 00 00 0F 48 00 00 00 00 00 00  // .H...H...H......
    1590: 03 40 00 00 0D 00 00 00 10 00 00 00 00 00 03 00  // .@..............
    15A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    15B0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    15C0: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    15D0: 03 40 00 00 AB 00 00 00 10 00 00 00 00 00 03 00  // .@..............
    15E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    15F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    1600: 05 0C 00 00 08 0C 00 00 FF 48 00 00 00 00 00 00  // .........H......
    1610: 03 40 00 00 AD 00 00 00 10 00 00 00 00 00 03 00  // .@..............
    1620: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1630: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    1640: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    1650: 03 40 00 00 0B 00 00 00 12 00 00 00 00 00 0C 00  // .@..............
    1660: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1670: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    1680: FF 48 00 00 FF 48 00 00 0F 48 00 00 00 00 00 00  // .H...H...H......
    1690: 03 40 00 00 0D 00 00 00 12 00 00 00 00 00 0C 00  // .@..............
    16A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    16B0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    16C0: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    16D0: 03 40 00 00 AB 00 00 00 12 00 00 00 00 00 0C 00  // .@..............
    16E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    16F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    1700: 05 0C 00 00 08 0C 00 00 FF 48 00 00 00 00 00 00  // .........H......
    1710: 03 40 00 00 AD 00 00 00 12 00 00 00 00 00 0C 00  // .@..............
    1720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1730: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    1740: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    1750: 03 40 00 00 0B 00 00 00 14 00 00 00 00 00 30 00  // .@............0.
    1760: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1770: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    1780: FF 48 00 00 FF 48 00 00 0F 48 00 00 00 00 00 00  // .H...H...H......
    1790: 03 40 00 00 0D 00 00 00 14 00 00 00 00 00 30 00  // .@............0.
    17A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    17B0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    17C0: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    17D0: 03 40 00 00 AB 00 00 00 14 00 00 00 00 00 30 00  // .@............0.
    17E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    17F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    1800: 05 0C 00 00 08 0C 00 00 FF 48 00 00 00 00 00 00  // .........H......
    1810: 03 40 00 00 AD 00 00 00 14 00 00 00 00 00 30 00  // .@............0.
    1820: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1830: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    1840: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    1850: 03 40 00 00 0B 00 00 00 16 00 00 00 00 00 C0 00  // .@..............
    1860: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1870: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    1880: FF 48 00 00 FF 48 00 00 0F 48 00 00 00 00 00 00  // .H...H...H......
    1890: 03 40 00 00 0D 00 00 00 16 00 00 00 00 00 C0 00  // .@..............
    18A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    18B0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    18C0: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    18D0: 03 40 00 00 AB 00 00 00 16 00 00 00 00 00 C0 00  // .@..............
    18E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    18F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    1900: 05 0C 00 00 08 0C 00 00 FF 48 00 00 00 00 00 00  // .........H......
    1910: 03 40 00 00 AD 00 00 00 16 00 00 00 00 00 C0 00  // .@..............
    1920: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1930: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    1940: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    1950: 03 40 00 00 0B 00 00 00 18 00 00 00 00 00 00 03  // .@..............
    1960: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1970: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    1980: FF 48 00 00 FF 48 00 00 0F 48 00 00 00 00 00 00  // .H...H...H......
    1990: 03 40 00 00 0D 00 00 00 18 00 00 00 00 00 00 03  // .@..............
    19A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    19B0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    19C0: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    19D0: 03 40 00 00 AB 00 00 00 18 00 00 00 00 00 00 03  // .@..............
    19E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    19F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    1A00: 05 0C 00 00 08 0C 00 00 FF 48 00 00 00 00 00 00  // .........H......
    1A10: 03 40 00 00 AD 00 00 00 18 00 00 00 00 00 00 03  // .@..............
    1A20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A30: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    1A40: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    1A50: 03 40 00 00 0B 00 00 00 1A 00 00 00 00 00 00 0C  // .@..............
    1A60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A70: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    1A80: FF 48 00 00 FF 48 00 00 0F 48 00 00 00 00 00 00  // .H...H...H......
    1A90: 03 40 00 00 0D 00 00 00 1A 00 00 00 00 00 00 0C  // .@..............
    1AA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1AB0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    1AC0: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    1AD0: 03 40 00 00 AB 00 00 00 1A 00 00 00 00 00 00 0C  // .@..............
    1AE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1AF0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    1B00: 05 0C 00 00 08 0C 00 00 FF 48 00 00 00 00 00 00  // .........H......
    1B10: 03 40 00 00 AD 00 00 00 1A 00 00 00 00 00 00 0C  // .@..............
    1B20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B30: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    1B40: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    1B50: 03 40 00 00 0B 00 00 00 1C 00 00 00 00 00 00 30  // .@.............0
    1B60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B70: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    1B80: FF 48 00 00 FF 48 00 00 0F 48 00 00 00 00 00 00  // .H...H...H......
    1B90: 03 40 00 00 0D 00 00 00 1C 00 00 00 00 00 00 30  // .@.............0
    1BA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1BB0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    1BC0: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    1BD0: 03 40 00 00 AB 00 00 00 1C 00 00 00 00 00 00 30  // .@.............0
    1BE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1BF0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    1C00: 05 0C 00 00 08 0C 00 00 FF 48 00 00 00 00 00 00  // .........H......
    1C10: 03 40 00 00 AD 00 00 00 1C 00 00 00 00 00 00 30  // .@.............0
    1C20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C30: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    1C40: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    1C50: 03 40 00 00 0B 00 00 00 1E 00 00 00 00 00 00 C0  // .@..............
    1C60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C70: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    1C80: FF 48 00 00 FF 48 00 00 0F 48 00 00 00 00 00 00  // .H...H...H......
    1C90: 03 40 00 00 0D 00 00 00 1E 00 00 00 00 00 00 C0  // .@..............
    1CA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1CB0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    1CC0: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    1CD0: 03 40 00 00 AB 00 00 00 1E 00 00 00 00 00 00 C0  // .@..............
    1CE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1CF0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    1D00: 05 0C 00 00 08 0C 00 00 FF 48 00 00 00 00 00 00  // .........H......
    1D10: 03 40 00 00 AD 00 00 00 1E 00 00 00 00 00 00 C0  // .@..............
    1D20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D30: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    1D40: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................


DSDT
----
DefinitionBlock ("", "DSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.APTS, MethodObj)    // 1 Arguments
    External (_SB_.AWAK, MethodObj)    // 1 Arguments
    External (_SB_.CNFG, IntObj)
    External (_SB_.EATL, UnknownObj)
    External (_SB_.EPSW, UnknownObj)
    External (_SB_.ER8S, UnknownObj)
    External (_SB_.GZFD.HTPL, MethodObj)    // 0 Arguments
    External (_SB_.HTCD, UnknownObj)
    External (_SB_.HTCS, UnknownObj)
    External (_SB_.LSKD, UnknownObj)
    External (_SB_.M009, MethodObj)    // 1 Arguments
    External (_SB_.M010, MethodObj)    // 2 Arguments
    External (_SB_.MCSK, IntObj)
    External (_SB_.NPCF, DeviceObj)
    External (_SB_.PCI0.GFX0.VGA_.LCD_, DeviceObj)
    External (_SB_.PCI0.GPP0.GSTA, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.PEGP, DeviceObj)
    External (_SB_.PCI0.GPP0.PEGP.EDP0, DeviceObj)
    External (_SB_.PCI0.GPP0.PG00._ON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPC0.EATL, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.ACMO, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.ADSL, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.CGTC, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.CPP1, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.CPP2, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.CPP3, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.DCMB, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.LFCM, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.TDC1, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.TDC2, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.YALG, IntObj)
    External (_SB_.PCI0.LPC0.FNQT, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPC0.HTCD, UnknownObj)
    External (_SB_.PCI0.LPC0.HTCS, UnknownObj)
    External (_SB_.PCI0.LPC0.INSM, UnknownObj)
    External (_SB_.PCI0.LPC0.TPOS, UnknownObj)
    External (_SB_.PCI0.VGA_.LCD_, DeviceObj)
    External (_SB_.TPM2.PTS_, MethodObj)    // 1 Arguments
    External (_SB_.YKBT, IntObj)
    External (AFN4, MethodObj)    // 1 Arguments
    External (AFN7, MethodObj)    // 1 Arguments
    External (HTCD, IntObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M017, MethodObj)    // 6 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M020, MethodObj)    // 5 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (MCSK, IntObj)
    External (MPTS, MethodObj)    // 1 Arguments
    External (MWAK, MethodObj)    // 1 Arguments

    Scope (_SB)
    {
        Device (PLTF)
        {
            Name (_HID, "ACPI0010" /* Processor Container Device */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A05") /* Generic Container Device */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Device (C000)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, Zero)  // _UID: Unique ID
            }

            Device (C001)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
            }

            Device (C002)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
            }

            Device (C003)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
            }

            Device (C004)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x04)  // _UID: Unique ID
            }

            Device (C005)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x05)  // _UID: Unique ID
            }

            Device (C006)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x06)  // _UID: Unique ID
            }

            Device (C007)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x07)  // _UID: Unique ID
            }

            Device (C008)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x08)  // _UID: Unique ID
            }

            Device (C009)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x09)  // _UID: Unique ID
            }

            Device (C00A)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0A)  // _UID: Unique ID
            }

            Device (C00B)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0B)  // _UID: Unique ID
            }

            Device (C00C)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0C)  // _UID: Unique ID
            }

            Device (C00D)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0D)  // _UID: Unique ID
            }

            Device (C00E)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0E)  // _UID: Unique ID
            }

            Device (C00F)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0F)  // _UID: Unique ID
            }

            Device (C010)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x10)  // _UID: Unique ID
            }

            Device (C011)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x11)  // _UID: Unique ID
            }

            Device (C012)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x12)  // _UID: Unique ID
            }

            Device (C013)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x13)  // _UID: Unique ID
            }

            Device (C014)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x14)  // _UID: Unique ID
            }

            Device (C015)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x15)  // _UID: Unique ID
            }

            Device (C016)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x16)  // _UID: Unique ID
            }

            Device (C017)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x17)  // _UID: Unique ID
            }

            Device (C018)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x18)  // _UID: Unique ID
            }

            Device (C019)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x19)  // _UID: Unique ID
            }

            Device (C01A)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x1A)  // _UID: Unique ID
            }

            Device (C01B)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x1B)  // _UID: Unique ID
            }

            Device (C01C)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x1C)  // _UID: Unique ID
            }

            Device (C01D)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x1D)  // _UID: Unique ID
            }

            Device (C01E)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x1E)  // _UID: Unique ID
            }

            Device (C01F)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x1F)  // _UID: Unique ID
            }
        }
    }

    OperationRegion (DBG0, SystemIO, 0x80, One)
    Field (DBG0, ByteAcc, NoLock, Preserve)
    {
        IO80,   8
    }

    OperationRegion (DBG1, SystemIO, 0x80, 0x04)
    Field (DBG1, DWordAcc, NoLock, Preserve)
    {
        P80H,   32
    }

    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ACMX,   8, 
        ACMA,   8
    }

    IndexField (ACMX, ACMA, ByteAcc, NoLock, Preserve)
    {
        Offset (0xB9), 
        IMEN,   8
    }

    OperationRegion (PSMI, SystemIO, 0xB0, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    OperationRegion (PMRG, SystemIO, 0x0CD6, 0x02)
    Field (PMRG, ByteAcc, NoLock, Preserve)
    {
        PMRI,   8, 
        PMRD,   8
    }

    IndexField (PMRI, PMRD, ByteAcc, NoLock, Preserve)
    {
            ,   6, 
        HPEN,   1, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1
    }

    OperationRegion (GSMG, SystemMemory, 0xFED81500, 0x03FF)
    Field (GSMG, AnyAcc, NoLock, Preserve)
    {
        Offset (0x5C), 
        Offset (0x5E), 
        GS23,   1, 
            ,   5, 
        GV23,   1, 
        GE23,   1, 
        Offset (0xA0), 
        Offset (0xA2), 
        GS40,   1, 
            ,   5, 
        GV40,   1, 
        GE40,   1
    }

    OperationRegion (GSMM, SystemMemory, 0xFED80000, 0x1000)
    Field (GSMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x288), 
            ,   1, 
        CLPS,   1, 
        Offset (0x2B0), 
            ,   2, 
        SLPS,   2, 
        Offset (0x3BB), 
            ,   6, 
        PWDE,   1
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
            ,   14, 
        PEWS,   1, 
        WSTA,   1, 
            ,   14, 
        PEWD,   1
    }

    OperationRegion (IOCC, SystemIO, 0x0400, 0x80)
    Field (IOCC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   2, 
        RTCS,   1
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        PRWP [One] = Arg1
        If ((DAS3 == Zero))
        {
            If ((Arg1 <= 0x03))
            {
                PRWP [One] = Zero
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Method (SPTS, 1, NotSerialized)
    {
        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        CLPS = One
        SLPS = One
        PEWS = PEWS /* \PEWS */
    }

    Method (SWAK, 1, NotSerialized)
    {
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        PEWS = PEWS /* \PEWS */
        PEWD = Zero
        If (((Arg0 == 0x03) || (Arg0 == 0x04))){}
    }

    Method (TPST, 1, Serialized)
    {
        M000 (Arg0)
    }

    Name (PICM, Zero)
    Name (GPIC, Zero)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        PICM = Arg0
        GPIC = Arg0
        M460 ("PLA-ASL-\\_PIC Arg0 = 0x%X\n", ToInteger (Arg0), Zero, Zero, Zero, Zero, Zero)
        If (PICM)
        {
            \_SB.DSPI ()
            \_SB.PCI0.NAPE ()
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x03, 
        0x03, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        0x04, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        0x05, 
        Zero, 
        Zero
    })
    OperationRegion (GNVS, SystemMemory, 0xBAF3EA98, 0x00000195)
    Field (GNVS, AnyAcc, NoLock, Preserve)
    {
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        BRTL,   8, 
        TLST,   8, 
        IGDS,   8, 
        LCDA,   16, 
        CSTE,   16, 
        NSTE,   16, 
        CADL,   16, 
        PADL,   16, 
        LIDS,   8, 
        PWRS,   8, 
        BVAL,   32, 
        ADDL,   16, 
        BCMD,   8, 
        SBFN,   8, 
        DID,    32, 
        INFO,   2048, 
        TOML,   8, 
        TOMH,   8, 
        CEBP,   8, 
        C0LS,   8, 
        C1LS,   8, 
        C0HS,   8, 
        C1HS,   8, 
        ROMS,   32, 
        MUXF,   8, 
        PDDN,   8, 
        CNSB,   8, 
        RDHW,   8, 
        DAS3,   8, 
        TNBH,   8, 
        TCP0,   8, 
        TCP1,   8, 
        ATNB,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PWMN,   8, 
        LPTY,   8, 
        M92D,   8, 
        WKPM,   8, 
        ALST,   8, 
        AFUC,   8, 
        GV0E,   8, 
        WLSH,   8, 
        TSSS,   8, 
        AOZP,   8, 
        TZFG,   8, 
        BPS0,   8, 
        NAPC,   8, 
        PCBA,   32, 
        PCBL,   32, 
        WLAN,   8, 
        BLTH,   8, 
        GPSS,   8, 
        NFCS,   8, 
        SBTY,   8, 
        BDID,   16, 
        MWTT,   8, 
        ACPM,   8, 
        KBCS,   8, 
        ACEC,   8, 
        DPTC,   8, 
        ECTL,   8, 
        MM64,   8, 
        HMB1,   64, 
        HMB2,   64, 
        HMM1,   64, 
        HMM2,   64, 
        HML1,   64, 
        HML2,   64, 
        WOVS,   8, 
        TCNT,   8, 
        TOPM,   32, 
        MB32,   32, 
        ML32,   32
    }

    OperationRegion (OGNS, SystemMemory, 0xBAF3ED18, 0x00000011)
    Field (OGNS, AnyAcc, Lock, Preserve)
    {
        OG00,   8, 
        OG01,   8, 
        M2WL,   8, 
        THPN,   8, 
        PBAR,   8, 
        THPD,   8, 
        DTEN,   8, 
        SDMO,   8, 
        TBEN,   8, 
        TBNH,   8, 
        RV2I,   8, 
        ISDS,   8, 
        PSEL,   8
    }

    Name (WNOS, Zero)
    Name (MYOS, Zero)
    Name (HTTS, Zero)
    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Name (LINX, Zero)
    Name (OSSP, Zero)
    Method (SEQL, 2, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Local1 = SizeOf (Arg1)
        If ((Local0 != Local1))
        {
            Return (Zero)
        }

        Name (BUF0, Buffer (Local0){})
        BUF0 = Arg0
        Name (BUF1, Buffer (Local1){})
        BUF1 = Arg1
        Local2 = Zero
        While ((Local2 < Local0))
        {
            Local3 = DerefOf (BUF0 [Local2])
            Local4 = DerefOf (BUF1 [Local2])
            If ((Local3 != Local4))
            {
                Return (Zero)
            }

            Local2++
        }

        Return (One)
    }

    Method (OSTP, 0, NotSerialized)
    {
        If ((OSTB == Ones))
        {
            If (CondRefOf (\_OSI, Local0))
            {
                OSTB = Zero
                TPOS = Zero
                If (_OSI ("Windows 2001"))
                {
                    OSTB = 0x08
                    TPOS = 0x08
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTB = 0x20
                    TPOS = 0x20
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTB = 0x10
                    TPOS = 0x10
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTB = 0x11
                    TPOS = 0x11
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    OSTB = 0x12
                    TPOS = 0x12
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSTB = 0x41
                    TPOS = 0x41
                    OSSP = One
                }

                If (_OSI ("Windows 2009"))
                {
                    OSTB = 0x50
                    TPOS = 0x50
                    OSSP = One
                }

                If (_OSI ("Windows 2012"))
                {
                    OSTB = 0x60
                    TPOS = 0x60
                    OSSP = One
                }

                If (_OSI ("Windows 2013"))
                {
                    OSTB = 0x61
                    TPOS = 0x61
                    OSSP = One
                }

                If (_OSI ("Windows 2015"))
                {
                    OSTB = 0x70
                    TPOS = 0x70
                    OSSP = One
                }

                If (_OSI ("Linux"))
                {
                    OSTB = 0x80
                    TPOS = 0x80
                    LINX = One
                }
            }
            ElseIf (CondRefOf (\_OS, Local0))
            {
                If (SEQL (_OS, "Microsoft Windows"))
                {
                    OSTB = One
                    TPOS = One
                }
                ElseIf (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                {
                    OSTB = 0x02
                    TPOS = 0x02
                }
                ElseIf (SEQL (_OS, "Microsoft Windows NT"))
                {
                    OSTB = 0x04
                    TPOS = 0x04
                }
                Else
                {
                    OSTB = Zero
                    TPOS = Zero
                }
            }
            Else
            {
                OSTB = Zero
                TPOS = Zero
            }
        }

        Return (OSTB) /* \OSTB */
    }

    Name (BUFN, Zero)
    Name (MBUF, Buffer (0x1000){})
    OperationRegion (MDBG, SystemMemory, 0xBAE32018, 0x00001004)
    Field (MDBG, AnyAcc, Lock, Preserve)
    {
        MDG0,   32768
    }

    Method (DB2H, 1, Serialized)
    {
        SHOW (Arg0)
        MDGC (0x20)
        MDG0 = MBUF /* \MBUF */
    }

    Method (DW2H, 1, Serialized)
    {
        Local0 = Arg0
        Local1 = (Arg0 >> 0x08)
        Local0 &= 0xFF
        Local1 &= 0xFF
        DB2H (Local1)
        BUFN--
        DB2H (Local0)
    }

    Method (DD2H, 1, Serialized)
    {
        Local0 = Arg0
        Local1 = (Arg0 >> 0x10)
        Local0 &= 0xFFFF
        Local1 &= 0xFFFF
        DW2H (Local1)
        BUFN--
        DW2H (Local0)
    }

    Method (MBGS, 1, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Name (BUFS, Buffer (Local0){})
        BUFS = Arg0
        MDGC (0x20)
        While (Local0)
        {
            MDGC (DerefOf (BUFS [(SizeOf (Arg0) - Local0)]))
            Local0--
        }

        MDG0 = MBUF /* \MBUF */
    }

    Method (SHOW, 1, Serialized)
    {
        MDGC (NTOC ((Arg0 >> 0x04)))
        MDGC (NTOC (Arg0))
    }

    Method (LINE, 0, Serialized)
    {
        Local0 = BUFN /* \BUFN */
        Local0 &= 0x0F
        While (Local0)
        {
            MDGC (Zero)
            Local0++
            Local0 &= 0x0F
        }
    }

    Method (MDGC, 1, Serialized)
    {
        MBUF [BUFN] = Arg0
        BUFN += One
        If ((BUFN > 0x0FFF))
        {
            BUFN &= 0x0FFF
            UP_L (One)
        }
    }

    Method (UP_L, 1, Serialized)
    {
        Local2 = Arg0
        Local2 <<= 0x04
        MOVE (Local2)
        Local3 = (0x1000 - Local2)
        While (Local2)
        {
            MBUF [Local3] = Zero
            Local3++
            Local2--
        }
    }

    Method (MOVE, 1, Serialized)
    {
        Local4 = Arg0
        BUFN = Zero
        Local5 = (0x1000 - Local4)
        While (Local5)
        {
            Local5--
            MBUF [BUFN] = DerefOf (MBUF [Local4])
            BUFN++
            Local4++
        }
    }

    Method (NTOC, 1, Serialized)
    {
        Local0 = (Arg0 & 0x0F)
        If ((Local0 < 0x0A))
        {
            Local0 += 0x30
        }
        Else
        {
            Local0 += 0x37
        }

        Return (Local0)
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        SPTS (Arg0)
        If ((Arg0 == One))
        {
            \_SB.S80H (0x51)
        }

        If ((Arg0 == 0x03))
        {
            \_SB.S80H (0x53)
            SLPS = One
            Local1 = 0x40
        }

        If ((Arg0 == 0x04))
        {
            \_SB.S80H (0x54)
            SLPS = One
            RSTU = One
            Local1 = 0x80
        }

        If ((Arg0 == 0x05))
        {
            \_SB.S80H (0x55)
            If ((WKPM == One))
            {
                PWDE = One
            }

            BCMD = 0x90
            \_SB.BSMI (Zero)
            \_SB.GSMI (0x03)
            Local1 = 0xC0
        }

        If (CondRefOf (\_SB.TPM2.PTS))
        {
            \_SB.TPM2.PTS (Arg0)
        }

        If ((MCSK == One))
        {
            \_SB.PCI0.LPC0.EC0.UBCC = 0xCC
        }

        \_SB.APTS (Arg0)
        MPTS (Arg0)
    }

    Scope (\)
    {
        Name (S4FG, Zero)
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        SWAK (Arg0)
        \_SB.AWAK (Arg0)
        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If ((GPIC != Zero))
            {
                \_SB.DSPI ()
                If (NAPC)
                {
                    \_SB.PCI0.NAPE ()
                }
            }
        }

        If ((Arg0 == 0x03))
        {
            \_SB.S80H (0xE3)
            If ((RECM (0x74) == 0x07))
            {
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            If ((RECM (0x74) == 0x05))
            {
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            If ((RECM (0x74) == 0x06))
            {
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }
        }

        If ((Arg0 == 0x04))
        {
            \_SB.S80H (0xE4)
            S4FG = One
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        \_SB.PCI0.LPC0.EC0.ECWK (Arg0)
        MWAK (Arg0)
        Return (Zero)
    }

    Scope (_GPE)
    {
        Method (_E04, 0, NotSerialized)  // _Exx: Edge-Triggered GPE, xx=0x00-0xFF
        {
            Sleep (0x64)
            P80H = 0x02
            Notify (\_SB.PCI0.GPP0.PEGP, 0x81) // Information Change
        }

        Method (_L19, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            M460 ("PLA-ASL-\\_GPE._L19\n", Zero, Zero, Zero, Zero, Zero, Zero)
            TPST (0x3919)
            Notify (\_SB.PCI0.GP17, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.XHC0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.XHC1, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L1A, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            M460 ("PLA-ASL-\\_GPE._L1A\n", Zero, Zero, Zero, Zero, Zero, Zero)
            TPST (0x391A)
            Notify (\_SB.PCI0.GP19, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP19.XHC2, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_SB)
    {
        Device (AMDM)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                Memory32Fixed (ReadWrite,
                    0xF0000000,         // Address Base
                    0x10000000,         // Address Length
                    )
            })
        }

        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x0C), 
            SIRA,   8, 
            SIRB,   8, 
            SIRC,   8, 
            SIRD,   8, 
            PIRS,   8, 
            Offset (0x17), 
            SDCL,   8, 
            Offset (0x1A), 
            SDIO,   8, 
            Offset (0x41), 
            SATA,   8, 
            Offset (0x62), 
            GIOC,   8, 
            Offset (0x70), 
            I2C0,   8, 
            I2C1,   8, 
            I2C2,   8, 
            I2C3,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (DSPI, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \_SB_.PD64 */
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
        }

        Method (INTA, 1, NotSerialized)
        {
            PIRA = Arg0
        }

        Method (INTB, 1, NotSerialized)
        {
            PIRB = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            PIRC = Arg0
        }

        Method (INTD, 1, NotSerialized)
        {
            PIRD = Arg0
            If (PICM)
            {
                SATA = Arg0
            }
        }

        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {4,5,7,10,11,14,15}
        })
        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRA && (PIRA != 0x1F)))
                {
                    M460 ("PLA-ASL-\\_SB.LNKA._STA = 0xB\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x0B)
                }
                Else
                {
                    M460 ("PLA-ASL-\\_SB.LNKA._STA = 0x9\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKA._PRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                M460 ("PLA-ASL-\\_SB.LNKA._DIS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKA._CRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKA._SRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRA = Local0
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRB && (PIRB != 0x1F)))
                {
                    M460 ("PLA-ASL-\\_SB.LNKB._STA = 0xB\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x0B)
                }
                Else
                {
                    M460 ("PLA-ASL-\\_SB.LNKB._STA = 0x9\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKB._PRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                M460 ("PLA-ASL-\\_SB.LNKB._DIS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKB._CRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKB._SRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRB = Local0
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRC && (PIRC != 0x1F)))
                {
                    M460 ("PLA-ASL-\\_SB.LNKC._STA = 0xB\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x0B)
                }
                Else
                {
                    M460 ("PLA-ASL-\\_SB.LNKC._STA = 0x9\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKC._PRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                M460 ("PLA-ASL-\\_SB.LNKC._DIS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKC._CRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKC._SRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRC = Local0
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRD && (PIRD != 0x1F)))
                {
                    M460 ("PLA-ASL-\\_SB.LNKD._STA = 0xB\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x0B)
                }
                Else
                {
                    M460 ("PLA-ASL-\\_SB.LNKD._STA = 0x9\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKD._PRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                M460 ("PLA-ASL-\\_SB.LNKD._DIS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKD._CRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKD._SRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRD = Local0
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRE && (PIRE != 0x1F)))
                {
                    M460 ("PLA-ASL-\\_SB.LNKE._STA = 0xB\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x0B)
                }
                Else
                {
                    M460 ("PLA-ASL-\\_SB.LNKE._STA = 0x9\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKE._PRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                M460 ("PLA-ASL-\\_SB.LNKE._DIS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKE._CRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKE._SRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRF && (PIRF != 0x1F)))
                {
                    M460 ("PLA-ASL-\\_SB.LNKF._STA = 0xB\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x0B)
                }
                Else
                {
                    M460 ("PLA-ASL-\\_SB.LNKF._STA = 0x9\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKF._PRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                M460 ("PLA-ASL-\\_SB.LNKF._DIS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKF._CRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKF._SRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRG && (PIRG != 0x1F)))
                {
                    M460 ("PLA-ASL-\\_SB.LNKG._STA = 0xB\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x0B)
                }
                Else
                {
                    M460 ("PLA-ASL-\\_SB.LNKG._STA = 0x9\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKG._PRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                M460 ("PLA-ASL-\\_SB.LNKG._DIS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKG._CRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKG._SRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRH && (PIRH != 0x1F)))
                {
                    M460 ("PLA-ASL-\\_SB.LNKH._STA = 0xB\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x0B)
                }
                Else
                {
                    M460 ("PLA-ASL-\\_SB.LNKH._STA = 0x9\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKH._PRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                M460 ("PLA-ASL-\\_SB.LNKH._DIS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKH._CRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKH._SRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }

        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (NBRI, Zero)
            Name (NBAR, Zero)
            Name (NCMD, Zero)
            Name (PXDC, Zero)
            Name (PXLC, Zero)
            Name (PXD2, Zero)
            Name (SUPP, Zero)
            Name (CTRL, Zero)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0xFFFFFFFE
                    }

                    CTRL &= 0xFFFFFFF5
                    If (~(CDW1 & One))
                    {
                        If ((CTRL & One)){}
                        If ((CTRL & 0x04)){}
                        If ((CTRL & 0x10)){}
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            Method (PXCR, 3, Serialized)
            {
                M460 ("PLA-ASL-_SB.PCI0.GPPX.PXCR\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Local0 = Zero
                Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
                While ((Local1 != Zero))
                {
                    Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                    {
                        Break
                    }

                    If ((Local2 == 0x10))
                    {
                        Local0 = Local1
                        Break
                    }

                    Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
                }

                Return (Local0)
            }

            Method (SPCF, 1, NotSerialized)
            {
                M460 ("PLA-ASL-_SB.PCI0.GPPX.SPCF\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Local0 = M019 (Zero, (Arg0 >> 0x10), (Arg0 & 0xFF), 
                    0x18)
                NBRI = ((Local0 & 0xFF00) >> 0x08)
                NCMD = M019 (NBRI, Zero, Zero, 0x04)
                NBAR = M019 (NBRI, Zero, Zero, 0x10)
                Local1 = PXCR (NBRI, Zero, Zero)
                PXDC = M019 (NBRI, Zero, Zero, (Local1 + 0x08))
                PXLC = M019 (NBRI, Zero, Zero, (Local1 + 0x10))
                PXD2 = M019 (NBRI, Zero, Zero, (Local1 + 0x28))
            }

            Method (RPCF, 0, NotSerialized)
            {
                M460 ("PLA-ASL-_SB.PCI0.GPPX.RPCF\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Local1 = PXCR (NBRI, Zero, Zero)
                M020 (NBRI, Zero, Zero, (Local1 + 0x08), PXDC)
                M020 (NBRI, Zero, Zero, (Local1 + 0x10), (PXLC & 0xFFFFFEFC))
                M020 (NBRI, Zero, Zero, (Local1 + 0x28), PXD2)
                M020 (NBRI, Zero, Zero, 0x10, NBAR)
                M020 (NBRI, Zero, Zero, 0x04, 0x06)
            }

            Method (UPWD, 0, NotSerialized)
            {
                M460 ("PLA-ASL-_SB.PCI0.UPWD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                OperationRegion (PSMI, SystemIO, 0xB0, 0x02)
                Field (PSMI, ByteAcc, NoLock, Preserve)
                {
                    SMIC,   8, 
                    SMID,   8
                }

                SMIC = 0xE3
            }

            Name (CRES, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, SubDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    0x00,, )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    0x00,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xF7FFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x78000000,         // Length
                    0x00,, _Y00, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFC000000,         // Range Minimum
                    0xFEAFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x02B00000,         // Length
                    0x00,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFED45000,         // Range Minimum
                    0xFED814FF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0003C500,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFED81900,         // Range Minimum
                    0xFED81FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000700,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFEDC0000,         // Range Minimum
                    0xFEDC0FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00001000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFEDC6000,         // Range Minimum
                    0xFEDC6FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00001000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (CRES, \_SB.PCI0._Y00._MIN, BTMN)  // _MIN: Minimum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y00._MAX, BTMX)  // _MAX: Maximum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y00._LEN, BTLN)  // _LEN: Length
                CreateDWordField (CRES, \_SB.PCI0._Y01._MIN, BTN1)  // _MIN: Minimum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y01._MAX, BTX1)  // _MAX: Maximum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y01._LEN, BTL1)  // _LEN: Length
                BTMN = MB32 /* \MB32 */
                BTMX = ((MB32 + ML32) - One)
                BTLN = ML32 /* \ML32 */
                If ((TOPM != Zero))
                {
                    BTX1 = TOPM /* \TOPM */
                }

                BTN1 = (PCBL + One)
                BTL1 = (BTX1 - BTN1) /* \_SB_.PCI0._CRS.BTN1 */
                BTL1 += One
                If ((MM64 == One))
                {
                    CreateQWordField (CRES, \_SB.PCI0._Y02._MIN, M1MN)  // _MIN: Minimum Base Address
                    CreateQWordField (CRES, \_SB.PCI0._Y02._MAX, M1MX)  // _MAX: Maximum Base Address
                    CreateQWordField (CRES, \_SB.PCI0._Y02._LEN, M1LN)  // _LEN: Length
                    M1MN = HMB1 /* \HMB1 */
                    M1MX = HMM1 /* \HMM1 */
                    M1LN = HML1 /* \HML1 */
                    CreateQWordField (CRES, \_SB.PCI0._Y03._MIN, M2MN)  // _MIN: Minimum Base Address
                    CreateQWordField (CRES, \_SB.PCI0._Y03._MAX, M2MX)  // _MAX: Maximum Base Address
                    CreateQWordField (CRES, \_SB.PCI0._Y03._LEN, M2LN)  // _LEN: Length
                    M2MN = HMB2 /* \HMB2 */
                    M2MX = HMM2 /* \HMM2 */
                    M2LN = HML2 /* \HML2 */
                }

                Return (CRES) /* \_SB_.PCI0.CRES */
            }

            Device (MEMR)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (BAR3, 0xE0200000)
                Name (MEM1, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y04)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y05)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y06)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y04._BAS, MB01)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y04._LEN, ML01)  // _LEN: Length
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y05._BAS, MB02)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y05._LEN, ML02)  // _LEN: Length
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y06._BAS, MB03)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y06._LEN, ML03)  // _LEN: Length
                    If (GPIC)
                    {
                        MB01 = 0xFEC00000
                        MB02 = 0xFEE00000
                        ML01 = 0x1000
                        If (NAPC)
                        {
                            ML01 += 0x1000
                        }

                        ML02 = 0x1000
                    }

                    If ((BAR3 != 0xFFF00000))
                    {
                        MB03 = BAR3 /* \_SB_.PCI0.MEMR.BAR3 */
                        ML03 = 0x00100000
                    }

                    Return (MEM1) /* \_SB_.PCI0.MEMR.MEM1 */
                }
            }

            Mutex (NAPM, 0x00)
            Method (NAPE, 0, NotSerialized)
            {
                Acquire (NAPM, 0xFFFF)
                Local0 = (PCBA + 0xB8)
                OperationRegion (VARM, SystemMemory, Local0, 0x08)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    NAPX,   32, 
                    NAPD,   32
                }

                Local1 = NAPX /* \_SB_.PCI0.NAPE.NAPX */
                NAPX = 0x14300000
                Local0 = NAPD /* \_SB_.PCI0.NAPE.NAPD */
                Local0 &= 0xFFFFFFEF
                NAPD = Local0
                NAPX = Local1
                Release (NAPM)
            }

            Name (PD00, Package (0x0A)
            {
                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    Zero, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    Zero, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }
            })
            Name (AR00, Package (0x0A)
            {
                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    Zero, 
                    0x18
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    Zero, 
                    0x18
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    One, 
                    Zero, 
                    0x19
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    Zero, 
                    Zero, 
                    0x19
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    Zero, 
                    Zero, 
                    0x19
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    Zero, 
                    Zero, 
                    0x1A
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.PCI0.AR00 */
                }

                Return (PD00) /* \_SB_.PCI0.PD00 */
            }

            Device (GPP0)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Name (PD10, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR10, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x18
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x19
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x1A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x1B
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR10) /* \_SB_.PCI0.GPP0.AR10 */
                    }

                    Return (PD10) /* \_SB_.PCI0.GPP0.PD10 */
                }
            }

            Device (GPP1)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((WKPM == One))
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0.GPP1._PRW Return GPRW (0x8, 0x4)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (GPRW (0x08, 0x04))
                    }
                    Else
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0.GPP1._PRW Return GPRW (0x8, 0x0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (GPRW (0x08, 0x03))
                    }
                }

                Name (PD12, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }
                })
                Name (AR12, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x1C
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x1D
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x1E
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x1F
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR12) /* \_SB_.PCI0.GPP1.AR12 */
                    }

                    Return (PD12) /* \_SB_.PCI0.GPP1.PD12 */
                }
            }

            Device (GPP2)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                Name (PD1E, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKF, 
                        Zero
                    }
                })
                Name (AR1E, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x2E
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x2F
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x2C
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x2D
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR1E) /* \_SB_.PCI0.GPP2.AR1E */
                    }

                    Return (PD1E) /* \_SB_.PCI0.GPP2.PD1E */
                }
            }

            Device (GPP3)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((WKPM == One))
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0.GPP3._PRW Return GPRW (0xE, 0x4)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (GPRW (0x0D, 0x04))
                    }
                    Else
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0.GPP3._PRW Return GPRW (0xE, 0x0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (GPRW (0x0D, 0x03))
                    }
                }

                Device (WL00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (WLPC, SystemMemory, 0xFE0B09B8, One)
                    Field (WLPC, AnyAcc, NoLock, Preserve)
                    {
                            ,   5, 
                        WLPP,   1
                    }

                    OperationRegion (WLCG, PCI_Config, Zero, 0x90)
                    Field (WLCG, ByteAcc, NoLock, Preserve)
                    {
                        WVID,   16, 
                        WDID,   16, 
                        Offset (0x44), 
                        ICAP,   32, 
                        ICTR,   16, 
                        Offset (0x84), 
                        MCAP,   32, 
                        MCTR,   16
                    }

                    Method (MTDS, 0, Serialized)
                    {
                        Name (MTD6, Package (0x1F)
                        {
                            0x4D, 
                            0x54, 
                            0x44, 
                            0x53, 
                            One, 
                            Zero, 
                            0x02, 
                            One, 
                            0x1F, 
                            0x1C, 
                            0x1C, 
                            0x1C, 
                            0x1C, 
                            0x1A, 
                            0x1A, 
                            0x1A, 
                            0x1A, 
                            0x1A, 
                            0x1A, 
                            0x02, 
                            0x1F, 
                            0x1C, 
                            0x1C, 
                            0x1C, 
                            0x1C, 
                            0x1A, 
                            0x1A, 
                            0x1A, 
                            0x1A, 
                            0x1A, 
                            0x1A
                        })
                        Name (MTD5, Package (0x1F)
                        {
                            0x4D, 
                            0x54, 
                            0x44, 
                            0x53, 
                            One, 
                            Zero, 
                            0x02, 
                            One, 
                            0x1E, 
                            0x1C, 
                            0x1C, 
                            0x1C, 
                            0x1C, 
                            0xFF, 
                            0xFF, 
                            0xFF, 
                            0xFF, 
                            0xFF, 
                            0xFF, 
                            0x02, 
                            0x1E, 
                            0x1C, 
                            0x1C, 
                            0x1C, 
                            0x1C, 
                            0xFF, 
                            0xFF, 
                            0xFF, 
                            0xFF, 
                            0xFF, 
                            0xFF
                        })
                        If ((WDID == 0x0616))
                        {
                            Return (MTD6) /* \_SB_.PCI0.GPP3.WL00.MTDS.MTD6 */
                        }
                        Else
                        {
                            Return (MTD5) /* \_SB_.PCI0.GPP3.WL00.MTDS.MTD5 */
                        }
                    }

                    Method (MTCL, 0, Serialized)
                    {
                        Name (MTCL, Package (0x0C)
                        {
                            0x4D, 
                            0x54, 
                            0x43, 
                            0x4C, 
                            One, 
                            One, 
                            0xD9, 
                            0xCF, 
                            0xC1, 
                            0x1C, 
                            Zero, 
                            Zero
                        })
                        Return (MTCL) /* \_SB_.PCI0.GPP3.WL00.MTCL.MTCL */
                    }

                    Method (MTGS, 0, Serialized)
                    {
                        Name (MTGS, Package (0x15)
                        {
                            0x4D, 
                            0x54, 
                            0x47, 
                            0x53, 
                            One, 
                            0x03, 
                            One, 
                            0x18, 
                            0x06, 
                            0x22, 
                            0x04, 
                            0x02, 
                            0x28, 
                            0x08, 
                            0x26, 
                            0x07, 
                            0x03, 
                            0x2A, 
                            0x0B, 
                            0x28, 
                            0x08
                        })
                        Return (MTGS) /* \_SB_.PCI0.GPP3.WL00.MTGS.MTGS */
                    }

                    PowerResource (WRST, 0x00, 0x0000)
                    {
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((WLPP == One))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_ON, 0, NotSerialized)  // _ON_: Power On
                        {
                        }

                        Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                        {
                        }

                        Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                        {
                            WLPP = Zero
                            Sleep (0x012C)
                            WLPP = One
                            Sleep (0x012C)
                        }
                    }

                    Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("d2a8c3e8-4b69-4f00-82bd-fe8607803aa7") /* Unknown UUID */))
                        {
                            If ((Arg2 == Zero))
                            {
                                If ((Arg1 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x19                                             // .
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }
                            }

                            If ((Arg2 == 0x03))
                            {
                                Local0 = Zero
                                Return (Local0)
                            }

                            If ((Arg2 == 0x04))
                            {
                                Return (Buffer (0x8C)
                                {
                                    /* 0000 */  0x00, 0xE0, 0x4C, 0x00, 0x01, 0x43, 0x43, 0x4C,  // ..L..CCL
                                    /* 0008 */  0x43, 0x52, 0x53, 0x56, 0x47, 0x54, 0x55, 0x53,  // CRSVGTUS
                                    /* 0010 */  0x41, 0x54, 0x42, 0x45, 0x43, 0x59, 0x43, 0x5A,  // ATBECYCZ
                                    /* 0018 */  0x44, 0x4B, 0x45, 0x45, 0x46, 0x49, 0x46, 0x52,  // DKEEFIFR
                                    /* 0020 */  0x44, 0x45, 0x47, 0x52, 0x48, 0x55, 0x49, 0x53,  // DEGRHUIS
                                    /* 0028 */  0x49, 0x45, 0x49, 0x54, 0x4C, 0x56, 0x4C, 0x49,  // IEITLVLI
                                    /* 0030 */  0x4C, 0x54, 0x4C, 0x55, 0x4D, 0x54, 0x4D, 0x43,  // LTLUMTMC
                                    /* 0038 */  0x4E, 0x4C, 0x4E, 0x4F, 0x50, 0x4C, 0x50, 0x54,  // NLNOPLPT
                                    /* 0040 */  0x53, 0x4B, 0x53, 0x49, 0x45, 0x53, 0x53, 0x45,  // SKSIESSE
                                    /* 0048 */  0x43, 0x48, 0x47, 0x42, 0x42, 0x48, 0x42, 0x47,  // CHGBBHBG
                                    /* 0050 */  0x48, 0x52, 0x47, 0x48, 0x49, 0x4C, 0x4A, 0x4F,  // HRGHILJO
                                    /* 0058 */  0x4B, 0x45, 0x4B, 0x57, 0x4B, 0x47, 0x4D, 0x41,  // KEKWKGMA
                                    /* 0060 */  0x51, 0x41, 0x52, 0x4F, 0x52, 0x53, 0x54, 0x52,  // QARORSTR
                                    /* 0068 */  0x41, 0x45, 0x48, 0x4B, 0x4D, 0x59, 0x41, 0x55,  // AEHKMYAU
                                    /* 0070 */  0x4E, 0x5A, 0x43, 0x41, 0x4A, 0x50, 0x41, 0x4D,  // NZCAJPAM
                                    /* 0078 */  0x42, 0x57, 0x42, 0x49, 0x54, 0x44, 0x4B, 0x4D,  // BWBITDKM
                                    /* 0080 */  0x47, 0x51, 0x4D, 0x47, 0x4D, 0x55, 0x54, 0x4A,  // GQMGMUTJ
                                    /* 0088 */  0x54, 0x47, 0x55, 0x5A                           // TGUZ
                                })
                            }

                            Return (Zero)
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                }
            }

            Device (GPP4)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((WKPM == One))
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0.GPP4._PRW Return GPRW (0xE, 0x4)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (GPRW (0x04, 0x04))
                    }
                    Else
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0.GPP4._PRW Return GPRW (0xE, 0x0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (GPRW (0x04, 0x03))
                    }
                }

                Name (PD22, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKB, 
                        Zero
                    }
                })
                Name (AR22, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x2A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x2B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x28
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x29
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR22) /* \_SB_.PCI0.GPP4.AR22 */
                    }

                    Return (PD22) /* \_SB_.PCI0.GPP4.PD22 */
                }
            }

            Device (GPP5)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((WKPM == One))
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0.GPP5._PRW Return GPRW (0xE, 0x4)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (GPRW (0x16, 0x04))
                    }
                    Else
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0.GPP5._PRW Return GPRW (0xE, 0x0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (GPRW (0x16, 0x03))
                    }
                }

                Name (PD24, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKF, 
                        Zero
                    }
                })
                Name (AR24, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x27
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x25
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR24) /* \_SB_.PCI0.GPP5.AR24 */
                    }

                    Return (PD24) /* \_SB_.PCI0.GPP5.PD24 */
                }

                Device (LAN)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (GP17)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((WKPM == One))
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0.GP17._PRW Return GPRW (0x19, 0x4)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (GPRW (0x19, 0x04))
                    }
                    Else
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0.GP17._PRW Return GPRW (0x19, 0x0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (GPRW (0x19, 0x03))
                    }
                }

                Name (PD34, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKB, 
                        Zero
                    }
                })
                Name (AR34, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x2A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x2B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x28
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x29
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR34) /* \_SB_.PCI0.GP17.AR34 */
                    }

                    Return (PD34) /* \_SB_.PCI0.GP17.PD34 */
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0.GP17.VGA._STA Return 0xF\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (0x0F)
                    }

                    Name (DOSA, Zero)
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSA = Arg0
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0.GP17.VGA._DOD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (Package (0x05)
                        {
                            0x00010100, 
                            0x00010110, 
                            0x0200, 
                            0x00010210, 
                            0x00010220
                        })
                    }

                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Name (BCLB, Package (0x34)
                        {
                            0x5A, 
                            0x3C, 
                            0x02, 
                            0x04, 
                            0x06, 
                            0x08, 
                            0x0A, 
                            0x0C, 
                            0x0E, 
                            0x10, 
                            0x12, 
                            0x14, 
                            0x16, 
                            0x18, 
                            0x1A, 
                            0x1C, 
                            0x1E, 
                            0x20, 
                            0x22, 
                            0x24, 
                            0x26, 
                            0x28, 
                            0x2A, 
                            0x2C, 
                            0x2E, 
                            0x30, 
                            0x32, 
                            0x34, 
                            0x36, 
                            0x38, 
                            0x3A, 
                            0x3C, 
                            0x3E, 
                            0x40, 
                            0x42, 
                            0x44, 
                            0x46, 
                            0x48, 
                            0x4A, 
                            0x4C, 
                            0x4E, 
                            0x50, 
                            0x52, 
                            0x54, 
                            0x56, 
                            0x58, 
                            0x5A, 
                            0x5C, 
                            0x5E, 
                            0x60, 
                            0x62, 
                            0x64
                        })
                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            M460 ("PLA-ASL-\\_SB.PCI0.GP17.VGA.LCD._BCL\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Return (BCLB) /* \_SB_.PCI0.GP17.VGA_.LCD_.BCLB */
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            M460 ("PLA-ASL-\\_SB.PCI0.GP17.VGA.LCD._BCM Arg0 = 0x%X\n", ToInteger (Arg0), Zero, Zero, Zero, Zero, Zero)
                            Divide ((Arg0 * 0xFF), 0x64, Local1, Local0)
                            AFN7 (Local0)
                        }
                    }
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0._PRW Return GPRW (0x19, 0x4)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (GPRW (0x19, 0x03))
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (PRT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                0xFF, 
                                0x0A, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT1._UPC\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT1.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x01, 0x00, 0x80, 0x00, 0x03, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT1_PLD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT1.PLD1 */
                            }
                        }

                        Device (PRT3)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                0xFF, 
                                0x0A, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT3._UPC\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT3.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x01, 0x00, 0x80, 0x00, 0x03, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT3._PLD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT3.PLD1 */
                            }
                        }

                        Device (PRT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                0xFF, 
                                0x0A, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT2._UPC\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT2.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x01, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT2._PLD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT2.PLD1 */
                            }
                        }

                        Device (PRT4)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                0xFF, 
                                0x0A, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT4._UPC\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT4.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x01, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT4._PLD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT4.PLD1 */
                            }
                        }
                    }
                }

                Device (XHC1)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC1._PRW Return GPRW (0x19, 0x4)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (GPRW (0x19, 0x03))
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (PRT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x01, 0x00, 0x80, 0x01, 0x03, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                                }
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC1.RHUB.PRT1._UPC\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT1.UPC1 */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT1.PLD1 */
                            }
                        }

                        Device (PRT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                                }
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC1.RHUB.PRT2._UPC\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT2.UPC1 */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT2.PLD1 */
                            }

                            Device (HS01)
                            {
                                Name (_ADR, One)  // _ADR: Address
                                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                {
                                    0xFF, 
                                    0x03, 
                                    Zero, 
                                    Zero
                                })
                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                {
                                    ToPLD (
                                        PLD_Revision           = 0x2,
                                        PLD_IgnoreColor        = 0x1,
                                        PLD_Red                = 0x0,
                                        PLD_Green              = 0x0,
                                        PLD_Blue               = 0x0,
                                        PLD_Width              = 0x0,
                                        PLD_Height             = 0x0,
                                        PLD_UserVisible        = 0x1,
                                        PLD_Dock               = 0x0,
                                        PLD_Lid                = 0x0,
                                        PLD_Panel              = "TOP",
                                        PLD_VerticalPosition   = "UPPER",
                                        PLD_HorizontalPosition = "LEFT",
                                        PLD_Shape              = "ROUND",
                                        PLD_GroupOrientation   = 0x0,
                                        PLD_GroupToken         = 0x0,
                                        PLD_GroupPosition      = 0x1,
                                        PLD_Bay                = 0x0,
                                        PLD_Ejectable          = 0x1,
                                        PLD_EjectRequired      = 0x1,
                                        PLD_CabinetNumber      = 0x0,
                                        PLD_CardCageNumber     = 0x0,
                                        PLD_Reference          = 0x0,
                                        PLD_Rotation           = 0x0,
                                        PLD_Order              = 0x0,
                                        PLD_VerticalOffset     = 0x0,
                                        PLD_HorizontalOffset   = 0x0)

                                })
                            }

                            Device (HS02)
                            {
                                Name (_ADR, 0x02)  // _ADR: Address
                                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                {
                                    0xFF, 
                                    0x03, 
                                    Zero, 
                                    Zero
                                })
                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                {
                                    ToPLD (
                                        PLD_Revision           = 0x2,
                                        PLD_IgnoreColor        = 0x1,
                                        PLD_Red                = 0x0,
                                        PLD_Green              = 0x0,
                                        PLD_Blue               = 0x0,
                                        PLD_Width              = 0x0,
                                        PLD_Height             = 0x0,
                                        PLD_UserVisible        = 0x1,
                                        PLD_Dock               = 0x0,
                                        PLD_Lid                = 0x0,
                                        PLD_Panel              = "TOP",
                                        PLD_VerticalPosition   = "UPPER",
                                        PLD_HorizontalPosition = "LEFT",
                                        PLD_Shape              = "ROUND",
                                        PLD_GroupOrientation   = 0x0,
                                        PLD_GroupToken         = 0x0,
                                        PLD_GroupPosition      = 0x2,
                                        PLD_Bay                = 0x0,
                                        PLD_Ejectable          = 0x1,
                                        PLD_EjectRequired      = 0x1,
                                        PLD_CabinetNumber      = 0x0,
                                        PLD_CardCageNumber     = 0x0,
                                        PLD_Reference          = 0x0,
                                        PLD_Rotation           = 0x0,
                                        PLD_Order              = 0x0,
                                        PLD_VerticalOffset     = 0x0,
                                        PLD_HorizontalOffset   = 0x0)

                                })
                            }

                            Device (HS03)
                            {
                                Name (_ADR, 0x03)  // _ADR: Address
                                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                {
                                    0xFF, 
                                    0x03, 
                                    Zero, 
                                    Zero
                                })
                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                {
                                    ToPLD (
                                        PLD_Revision           = 0x2,
                                        PLD_IgnoreColor        = 0x1,
                                        PLD_Red                = 0x0,
                                        PLD_Green              = 0x0,
                                        PLD_Blue               = 0x0,
                                        PLD_Width              = 0x0,
                                        PLD_Height             = 0x0,
                                        PLD_UserVisible        = 0x1,
                                        PLD_Dock               = 0x0,
                                        PLD_Lid                = 0x0,
                                        PLD_Panel              = "TOP",
                                        PLD_VerticalPosition   = "UPPER",
                                        PLD_HorizontalPosition = "LEFT",
                                        PLD_Shape              = "ROUND",
                                        PLD_GroupOrientation   = 0x0,
                                        PLD_GroupToken         = 0x0,
                                        PLD_GroupPosition      = 0x3,
                                        PLD_Bay                = 0x0,
                                        PLD_Ejectable          = 0x1,
                                        PLD_EjectRequired      = 0x1,
                                        PLD_CabinetNumber      = 0x0,
                                        PLD_CardCageNumber     = 0x0,
                                        PLD_Reference          = 0x0,
                                        PLD_Rotation           = 0x0,
                                        PLD_Order              = 0x0,
                                        PLD_VerticalOffset     = 0x0,
                                        PLD_HorizontalOffset   = 0x0)

                                })
                            }

                            Device (HS04)
                            {
                                Name (_ADR, 0x04)  // _ADR: Address
                                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                {
                                    Zero, 
                                    0xFF, 
                                    Zero, 
                                    Zero
                                })
                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                {
                                    ToPLD (
                                        PLD_Revision           = 0x2,
                                        PLD_IgnoreColor        = 0x1,
                                        PLD_Red                = 0x0,
                                        PLD_Green              = 0x0,
                                        PLD_Blue               = 0x0,
                                        PLD_Width              = 0x0,
                                        PLD_Height             = 0x0,
                                        PLD_UserVisible        = 0x0,
                                        PLD_Dock               = 0x0,
                                        PLD_Lid                = 0x0,
                                        PLD_Panel              = "TOP",
                                        PLD_VerticalPosition   = "UPPER",
                                        PLD_HorizontalPosition = "LEFT",
                                        PLD_Shape              = "ROUND",
                                        PLD_GroupOrientation   = 0x0,
                                        PLD_GroupToken         = 0x0,
                                        PLD_GroupPosition      = 0x4,
                                        PLD_Bay                = 0x0,
                                        PLD_Ejectable          = 0x0,
                                        PLD_EjectRequired      = 0x0,
                                        PLD_CabinetNumber      = 0x0,
                                        PLD_CardCageNumber     = 0x0,
                                        PLD_Reference          = 0x0,
                                        PLD_Rotation           = 0x0,
                                        PLD_Order              = 0x0,
                                        PLD_VerticalOffset     = 0x0,
                                        PLD_HorizontalOffset   = 0x0)

                                })
                                Device (CAM0)
                                {
                                    Method (_ADR, 0, Serialized)  // _ADR: Address
                                    {
                                        Return (^^_ADR) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT2.HS04._ADR */
                                    }

                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x0,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x1,
                                            PLD_Panel              = "FRONT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "CENTER",
                                            PLD_Shape              = "UNKNOWN",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x0,
                                            PLD_GroupPosition      = 0x0,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x0,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0x8C,
                                            PLD_HorizontalOffset   = 0x12C)

                                    })
                                }
                            }
                        }

                        Device (PRT3)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC1.RHUB.PRT3._UPC\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT3.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x01, 0x00, 0x80, 0x01, 0x03, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT3.PLD1 */
                            }
                        }

                        Device (PRT4)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                                }
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC1.RHUB.PRT4._UPC\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT4.UPC1 */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT4.PLD1 */
                            }

                            Device (SS01)
                            {
                                Name (_ADR, One)  // _ADR: Address
                                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                {
                                    0xFF, 
                                    0x03, 
                                    Zero, 
                                    Zero
                                })
                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                {
                                    ToPLD (
                                        PLD_Revision           = 0x2,
                                        PLD_IgnoreColor        = 0x1,
                                        PLD_Red                = 0x0,
                                        PLD_Green              = 0x0,
                                        PLD_Blue               = 0x0,
                                        PLD_Width              = 0x0,
                                        PLD_Height             = 0x0,
                                        PLD_UserVisible        = 0x1,
                                        PLD_Dock               = 0x0,
                                        PLD_Lid                = 0x0,
                                        PLD_Panel              = "TOP",
                                        PLD_VerticalPosition   = "UPPER",
                                        PLD_HorizontalPosition = "LEFT",
                                        PLD_Shape              = "ROUND",
                                        PLD_GroupOrientation   = 0x0,
                                        PLD_GroupToken         = 0x0,
                                        PLD_GroupPosition      = 0x1,
                                        PLD_Bay                = 0x0,
                                        PLD_Ejectable          = 0x1,
                                        PLD_EjectRequired      = 0x1,
                                        PLD_CabinetNumber      = 0x0,
                                        PLD_CardCageNumber     = 0x0,
                                        PLD_Reference          = 0x0,
                                        PLD_Rotation           = 0x0,
                                        PLD_Order              = 0x0,
                                        PLD_VerticalOffset     = 0x0,
                                        PLD_HorizontalOffset   = 0x0)

                                })
                            }

                            Device (SS02)
                            {
                                Name (_ADR, 0x02)  // _ADR: Address
                                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                {
                                    0xFF, 
                                    0x03, 
                                    Zero, 
                                    Zero
                                })
                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                {
                                    ToPLD (
                                        PLD_Revision           = 0x2,
                                        PLD_IgnoreColor        = 0x1,
                                        PLD_Red                = 0x0,
                                        PLD_Green              = 0x0,
                                        PLD_Blue               = 0x0,
                                        PLD_Width              = 0x0,
                                        PLD_Height             = 0x0,
                                        PLD_UserVisible        = 0x1,
                                        PLD_Dock               = 0x0,
                                        PLD_Lid                = 0x0,
                                        PLD_Panel              = "TOP",
                                        PLD_VerticalPosition   = "UPPER",
                                        PLD_HorizontalPosition = "LEFT",
                                        PLD_Shape              = "ROUND",
                                        PLD_GroupOrientation   = 0x0,
                                        PLD_GroupToken         = 0x0,
                                        PLD_GroupPosition      = 0x2,
                                        PLD_Bay                = 0x0,
                                        PLD_Ejectable          = 0x1,
                                        PLD_EjectRequired      = 0x1,
                                        PLD_CabinetNumber      = 0x0,
                                        PLD_CardCageNumber     = 0x0,
                                        PLD_Reference          = 0x0,
                                        PLD_Rotation           = 0x0,
                                        PLD_Order              = 0x0,
                                        PLD_VerticalOffset     = 0x0,
                                        PLD_HorizontalOffset   = 0x0)

                                })
                            }

                            Device (SS03)
                            {
                                Name (_ADR, 0x03)  // _ADR: Address
                                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                {
                                    0xFF, 
                                    0x03, 
                                    Zero, 
                                    Zero
                                })
                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                {
                                    ToPLD (
                                        PLD_Revision           = 0x2,
                                        PLD_IgnoreColor        = 0x1,
                                        PLD_Red                = 0x0,
                                        PLD_Green              = 0x0,
                                        PLD_Blue               = 0x0,
                                        PLD_Width              = 0x0,
                                        PLD_Height             = 0x0,
                                        PLD_UserVisible        = 0x1,
                                        PLD_Dock               = 0x0,
                                        PLD_Lid                = 0x0,
                                        PLD_Panel              = "TOP",
                                        PLD_VerticalPosition   = "UPPER",
                                        PLD_HorizontalPosition = "LEFT",
                                        PLD_Shape              = "ROUND",
                                        PLD_GroupOrientation   = 0x0,
                                        PLD_GroupToken         = 0x0,
                                        PLD_GroupPosition      = 0x3,
                                        PLD_Bay                = 0x0,
                                        PLD_Ejectable          = 0x1,
                                        PLD_EjectRequired      = 0x1,
                                        PLD_CabinetNumber      = 0x0,
                                        PLD_CardCageNumber     = 0x0,
                                        PLD_Reference          = 0x0,
                                        PLD_Rotation           = 0x0,
                                        PLD_Order              = 0x0,
                                        PLD_VerticalOffset     = 0x0,
                                        PLD_HorizontalOffset   = 0x0)

                                })
                            }

                            Device (SS04)
                            {
                                Name (_ADR, 0x04)  // _ADR: Address
                                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                {
                                    Zero, 
                                    0x03, 
                                    Zero, 
                                    Zero
                                })
                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                {
                                    ToPLD (
                                        PLD_Revision           = 0x2,
                                        PLD_IgnoreColor        = 0x1,
                                        PLD_Red                = 0x0,
                                        PLD_Green              = 0x0,
                                        PLD_Blue               = 0x0,
                                        PLD_Width              = 0x0,
                                        PLD_Height             = 0x0,
                                        PLD_UserVisible        = 0x1,
                                        PLD_Dock               = 0x0,
                                        PLD_Lid                = 0x0,
                                        PLD_Panel              = "TOP",
                                        PLD_VerticalPosition   = "UPPER",
                                        PLD_HorizontalPosition = "LEFT",
                                        PLD_Shape              = "ROUND",
                                        PLD_GroupOrientation   = 0x0,
                                        PLD_GroupToken         = 0x0,
                                        PLD_GroupPosition      = 0x3,
                                        PLD_Bay                = 0x0,
                                        PLD_Ejectable          = 0x1,
                                        PLD_EjectRequired      = 0x1,
                                        PLD_CabinetNumber      = 0x0,
                                        PLD_CardCageNumber     = 0x0,
                                        PLD_Reference          = 0x0,
                                        PLD_Rotation           = 0x0,
                                        PLD_Order              = 0x0,
                                        PLD_VerticalOffset     = 0x0,
                                        PLD_HorizontalOffset   = 0x0)

                                })
                            }
                        }
                    }
                }

                Device (PSP)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }

                Device (ACP)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }
                }

                Device (AZAL)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }
                }
            }

            Device (GP18)
            {
                Name (_ADR, 0x00080002)  // _ADR: Address
                Name (PD35, Package (0x00){})
                Name (AR35, Package (0x00){})
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR35) /* \_SB_.PCI0.GP18.AR35 */
                    }

                    Return (PD35) /* \_SB_.PCI0.GP18.PD35 */
                }

                Device (SATA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (GP19)
            {
                Name (_ADR, 0x00080003)  // _ADR: Address
                Name (PD36, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKF, 
                        Zero
                    }
                })
                Name (AR36, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x2E
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x2F
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x2C
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x2D
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR36) /* \_SB_.PCI0.GP19.AR36 */
                    }

                    Return (PD36) /* \_SB_.PCI0.GP19.PD36 */
                }

                Device (XHC2)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0.GP19.XHC2._PRW Return GPRW (0x1A, 0x4)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (GPRW (0x1A, 0x03))
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (PRT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC1) /* \_SB_.PCI0.GP19.XHC2.RHUB.PRT1.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP19.XHC2.RHUB.PRT1.PLD1 */
                            }

                            Device (HS01)
                            {
                                Name (_ADR, One)  // _ADR: Address
                                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                {
                                    Zero, 
                                    0xFF, 
                                    Zero, 
                                    Zero
                                })
                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                {
                                    ToPLD (
                                        PLD_Revision           = 0x2,
                                        PLD_IgnoreColor        = 0x1,
                                        PLD_Red                = 0x0,
                                        PLD_Green              = 0x0,
                                        PLD_Blue               = 0x0,
                                        PLD_Width              = 0x0,
                                        PLD_Height             = 0x0,
                                        PLD_UserVisible        = 0x0,
                                        PLD_Dock               = 0x0,
                                        PLD_Lid                = 0x0,
                                        PLD_Panel              = "TOP",
                                        PLD_VerticalPosition   = "UPPER",
                                        PLD_HorizontalPosition = "LEFT",
                                        PLD_Shape              = "ROUND",
                                        PLD_GroupOrientation   = 0x0,
                                        PLD_GroupToken         = 0x0,
                                        PLD_GroupPosition      = 0x7,
                                        PLD_Bay                = 0x0,
                                        PLD_Ejectable          = 0x0,
                                        PLD_EjectRequired      = 0x0,
                                        PLD_CabinetNumber      = 0x0,
                                        PLD_CardCageNumber     = 0x0,
                                        PLD_Reference          = 0x0,
                                        PLD_Rotation           = 0x0,
                                        PLD_Order              = 0x0,
                                        PLD_VerticalOffset     = 0x0,
                                        PLD_HorizontalOffset   = 0x0)

                                })
                                OperationRegion (BTGP, SystemMemory, 0xFE0B09B8, One)
                                Field (BTGP, AnyAcc, NoLock, Preserve)
                                {
                                    BTPP,   8
                                }

                                PowerResource (BTPR, 0x00, 0x0000)
                                {
                                    Method (_STA, 0, NotSerialized)  // _STA: Status
                                    {
                                        If ((BTPP == One))
                                        {
                                            Return (One)
                                        }
                                        Else
                                        {
                                            Return (Zero)
                                        }
                                    }

                                    Method (_ON, 0, Serialized)  // _ON_: Power On
                                    {
                                    }

                                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                    {
                                    }

                                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                                    {
                                        BTPP = 0x08
                                        Sleep (0x012C)
                                        BTPP = 0x10
                                        Sleep (0x012C)
                                    }
                                }

                                Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
                                {
                                    BTPR
                                })
                            }

                            Device (HS02)
                            {
                                Name (_ADR, 0x02)  // _ADR: Address
                                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                {
                                    Zero, 
                                    0xFF, 
                                    Zero, 
                                    Zero
                                })
                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                {
                                    ToPLD (
                                        PLD_Revision           = 0x2,
                                        PLD_IgnoreColor        = 0x1,
                                        PLD_Red                = 0x0,
                                        PLD_Green              = 0x0,
                                        PLD_Blue               = 0x0,
                                        PLD_Width              = 0x0,
                                        PLD_Height             = 0x0,
                                        PLD_UserVisible        = 0x0,
                                        PLD_Dock               = 0x0,
                                        PLD_Lid                = 0x0,
                                        PLD_Panel              = "TOP",
                                        PLD_VerticalPosition   = "UPPER",
                                        PLD_HorizontalPosition = "LEFT",
                                        PLD_Shape              = "ROUND",
                                        PLD_GroupOrientation   = 0x0,
                                        PLD_GroupToken         = 0x0,
                                        PLD_GroupPosition      = 0x3,
                                        PLD_Bay                = 0x0,
                                        PLD_Ejectable          = 0x0,
                                        PLD_EjectRequired      = 0x0,
                                        PLD_CabinetNumber      = 0x0,
                                        PLD_CardCageNumber     = 0x0,
                                        PLD_Reference          = 0x0,
                                        PLD_Rotation           = 0x0,
                                        PLD_Order              = 0x0,
                                        PLD_VerticalOffset     = 0x0,
                                        PLD_HorizontalOffset   = 0x0)

                                })
                                Device (CAM0)
                                {
                                    Method (_ADR, 0, Serialized)  // _ADR: Address
                                    {
                                        Return (^^_ADR) /* \_SB_.PCI0.GP19.XHC2.RHUB.PRT1.HS02._ADR */
                                    }

                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x0,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x1,
                                            PLD_Panel              = "FRONT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "CENTER",
                                            PLD_Shape              = "UNKNOWN",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x0,
                                            PLD_GroupPosition      = 0x0,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x0,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0x8C,
                                            PLD_HorizontalOffset   = 0x12C)

                                    })
                                }
                            }

                            Device (HS03)
                            {
                                Name (_ADR, 0x03)  // _ADR: Address
                                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                {
                                    Zero, 
                                    0xFF, 
                                    Zero, 
                                    Zero
                                })
                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                {
                                    ToPLD (
                                        PLD_Revision           = 0x2,
                                        PLD_IgnoreColor        = 0x1,
                                        PLD_Red                = 0x0,
                                        PLD_Green              = 0x0,
                                        PLD_Blue               = 0x0,
                                        PLD_Width              = 0x0,
                                        PLD_Height             = 0x0,
                                        PLD_UserVisible        = 0x0,
                                        PLD_Dock               = 0x0,
                                        PLD_Lid                = 0x0,
                                        PLD_Panel              = "TOP",
                                        PLD_VerticalPosition   = "UPPER",
                                        PLD_HorizontalPosition = "LEFT",
                                        PLD_Shape              = "ROUND",
                                        PLD_GroupOrientation   = 0x0,
                                        PLD_GroupToken         = 0x0,
                                        PLD_GroupPosition      = 0x8,
                                        PLD_Bay                = 0x0,
                                        PLD_Ejectable          = 0x0,
                                        PLD_EjectRequired      = 0x0,
                                        PLD_CabinetNumber      = 0x0,
                                        PLD_CardCageNumber     = 0x0,
                                        PLD_Reference          = 0x0,
                                        PLD_Rotation           = 0x0,
                                        PLD_Order              = 0x0,
                                        PLD_VerticalOffset     = 0x0,
                                        PLD_HorizontalOffset   = 0x0)

                                })
                            }
                        }

                        Device (PRT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            })
                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                                }
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC1) /* \_SB_.PCI0.GP19.XHC2.RHUB.PRT2.UPC1 */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP19.XHC2.RHUB.PRT2.PLD1 */
                            }
                        }
                    }
                }
            }

            Device (HPET)
            {
                Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((HPEN == One))
                    {
                        Return (0x0F)
                    }

                    Return (One)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    M460 ("PLA-ASL-\\_SB.PCI0.HPET._CRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Name (BUF0, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {0}
                        IRQNoFlags ()
                            {8}
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y07)
                    })
                    CreateDWordField (BUF0, \_SB.PCI0.HPET._CRS._Y07._BAS, HPEB)  // _BAS: Base Address
                    Local0 = 0xFED00000
                    HPEB = (Local0 & 0xFFFFFC00)
                    Return (BUF0) /* \_SB_.PCI0.HPET._CRS.BUF0 */
                }
            }

            Device (SMBS)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
            }

            Device (LPC0)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (COPR)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPC0.RTC_.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPC0.RTC_.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                    })
                }

                Device (SYSR)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0xD0,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D6,             // Range Minimum
                            0x04D6,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C00,             // Range Minimum
                            0x0C00,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0C14,             // Range Minimum
                            0x0C14,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C50,             // Range Minimum
                            0x0C50,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0C6C,             // Range Minimum
                            0x0C6C,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C6F,             // Range Minimum
                            0x0C6F,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0CD0,             // Range Minimum
                            0x0CD0,             // Range Maximum
                            0x01,               // Alignment
                            0x0C,               // Length
                            )
                    })
                }

                Device (SPIR)
                {
                    Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        Memory32Fixed (ReadOnly,
                            0xFF000000,         // Address Base
                            0x01000000,         // Address Length
                            )
                    })
                }

                Name (FNQ0, Package (0x19)
                {
                    Package (0x08)
                    {
                        0x05, 
                        0x07, 
                        0x04, 
                        One, 
                        0x08, 
                        0x03, 
                        0x0C, 
                        0x0B
                    }, 

                    Package (0x08)
                    {
                        0x00017318, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x00011170, 
                        0x00019A28, 
                        0x000222E0, 
                        0x96, 
                        0x1E, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0x00011170, 
                        0x00014C08, 
                        0x00018E70, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0x00014C08, 
                        0x00018E70, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xC350, 
                        0xEA60, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x000186A0, 
                        0x000124F8
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0xFDE8, 
                        0x000124F8, 
                        0x32, 
                        0x05, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0xFDE8, 
                        0x000124F8, 
                        0x32, 
                        0x05, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xAFC8, 
                        0xD2F0, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x000186A0, 
                        0x000124F8
                    }, 

                    Package (0x08)
                    {
                        0x2710, 
                        0x2710, 
                        0x61A8, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0xD6D8, 
                        0xC350
                    }, 

                    Package (0x08)
                    {
                        0x61A8, 
                        0x61A8, 
                        0x7530, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0xD6D8, 
                        0xC350
                    }, 

                    Package (0x08)
                    {
                        0x7530, 
                        0x88B8, 
                        0x9C40, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0xD6D8, 
                        0xC350
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0x9C40, 
                        0xAFC8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0xEA60, 
                        0xD6D8
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xC350, 
                        0xD6D8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00014C08, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0xEA60, 
                        0xFDE8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00017318, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0x000186A0, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x00013880, 
                        0x00019A28, 
                        0x000222E0, 
                        0x96, 
                        0x1E, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xC350, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xEA60, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xFDE8, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x00011170, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x000124F8, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x00013880, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }
                })
                Name (FNQA, Package (0x19)
                {
                    Package (0x08)
                    {
                        0x05, 
                        0x07, 
                        0x04, 
                        One, 
                        0x08, 
                        0x03, 
                        0x0C, 
                        0x0B
                    }, 

                    Package (0x08)
                    {
                        0x00019A28, 
                        0x0001E848, 
                        0x00023668, 
                        0x96, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x00011170, 
                        0x00019A28, 
                        0x000222E0, 
                        0x96, 
                        0x1E, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0x00011170, 
                        0x00014C08, 
                        0x00018E70, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0x00014C08, 
                        0x00018E70, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xC350, 
                        0xEA60, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x000186A0, 
                        0x000124F8
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0xFDE8, 
                        0x000124F8, 
                        0x32, 
                        0x05, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0xFDE8, 
                        0x000124F8, 
                        0x32, 
                        0x05, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xAFC8, 
                        0xD2F0, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x000186A0, 
                        0x000124F8
                    }, 

                    Package (0x08)
                    {
                        0x2710, 
                        0x2710, 
                        0x61A8, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0xD6D8, 
                        0xC350
                    }, 

                    Package (0x08)
                    {
                        0x61A8, 
                        0x61A8, 
                        0x7530, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0xD6D8, 
                        0xC350
                    }, 

                    Package (0x08)
                    {
                        0x7530, 
                        0x88B8, 
                        0x9C40, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0xD6D8, 
                        0xC350
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0x9C40, 
                        0xAFC8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0xEA60, 
                        0xD6D8
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xC350, 
                        0xD6D8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00014C08, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0xEA60, 
                        0xFDE8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00017318, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0x0001ADB0, 
                        0x0001E848, 
                        0x00023668, 
                        0x96, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x00013880, 
                        0x00019A28, 
                        0x000222E0, 
                        0x96, 
                        0x1E, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xC350, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xEA60, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xFDE8, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x00011170, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x000124F8, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x00013880, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }
                })
                Name (FNQ6, Package (0x19)
                {
                    Package (0x08)
                    {
                        0x05, 
                        0x07, 
                        0x04, 
                        One, 
                        0x08, 
                        0x03, 
                        0x0C, 
                        0x0B
                    }, 

                    Package (0x08)
                    {
                        0x000124F8, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0x0001C138, 
                        0x0001C138, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0x00011170, 
                        0x00014C08, 
                        0x00018E70, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0x00014C08, 
                        0x00018E70, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xC350, 
                        0xEA60, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x000186A0, 
                        0x000124F8
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0xFDE8, 
                        0x000124F8, 
                        0x32, 
                        0x05, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0xFDE8, 
                        0x000124F8, 
                        0x32, 
                        0x05, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xAFC8, 
                        0xD2F0, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x000186A0, 
                        0x000124F8
                    }, 

                    Package (0x08)
                    {
                        0x2710, 
                        0x2710, 
                        0x61A8, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0xD6D8, 
                        0xC350
                    }, 

                    Package (0x08)
                    {
                        0x61A8, 
                        0x61A8, 
                        0x7530, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0xD6D8, 
                        0xC350
                    }, 

                    Package (0x08)
                    {
                        0x7530, 
                        0x88B8, 
                        0x9C40, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0xD6D8, 
                        0xC350
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0x9C40, 
                        0xAFC8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0xEA60, 
                        0xD6D8
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xC350, 
                        0xD6D8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00014C08, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0xEA60, 
                        0xFDE8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00017318, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0x00013880, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xEA60, 
                        0x0001C138, 
                        0x0001C138, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xC350, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xEA60, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xFDE8, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x00011170, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x000124F8, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x00013880, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }
                })
                Name (FNQ1, Package (0x19)
                {
                    Package (0x08)
                    {
                        0x05, 
                        0x07, 
                        0x04, 
                        One, 
                        0x08, 
                        0x03, 
                        0x0C, 
                        0x0B
                    }, 

                    Package (0x08)
                    {
                        0x00017318, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xFDE8, 
                        0x0001C138, 
                        0x0001C138, 
                        0xC8, 
                        0x1E, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0x00011170, 
                        0x00014C08, 
                        0x00018E70, 
                        0x0113, 
                        0x0A, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0x00014C08, 
                        0x00018E70, 
                        0x0113, 
                        0x0A, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xC350, 
                        0xEA60, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x000186A0, 
                        0x000124F8
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0xFDE8, 
                        0x000124F8, 
                        0x32, 
                        0x05, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0x7530, 
                        0xFDE8, 
                        0x000124F8, 
                        0x32, 
                        0x05, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xAFC8, 
                        0xD2F0, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x000186A0, 
                        0x000124F8
                    }, 

                    Package (0x08)
                    {
                        0x2710, 
                        0x2710, 
                        0x61A8, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0xD6D8, 
                        0xC350
                    }, 

                    Package (0x08)
                    {
                        0x61A8, 
                        0x61A8, 
                        0x7530, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0xD6D8, 
                        0xC350
                    }, 

                    Package (0x08)
                    {
                        0x7530, 
                        0x88B8, 
                        0x9C40, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0xD6D8, 
                        0xC350
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0x9C40, 
                        0xAFC8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0xEA60, 
                        0xD6D8
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xC350, 
                        0xD6D8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00014C08, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0xEA60, 
                        0xFDE8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00017318, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0x000186A0, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x00013880, 
                        0x0001C138, 
                        0x0001C138, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xC350, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xEA60, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xFDE8, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x00011170, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x000124F8, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x00013880, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }
                })
                Name (FNQ9, Package (0x19)
                {
                    Package (0x08)
                    {
                        0x05, 
                        0x07, 
                        0x04, 
                        One, 
                        0x08, 
                        0x03, 
                        0x0C, 
                        0x0B
                    }, 

                    Package (0x08)
                    {
                        0x000124F8, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0x0001C138, 
                        0x0001C138, 
                        0xC8, 
                        0x1E, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0x00011170, 
                        0x00014C08, 
                        0x00018E70, 
                        0x0113, 
                        0x0A, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0x00014C08, 
                        0x00018E70, 
                        0x0113, 
                        0x0A, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xC350, 
                        0xEA60, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x000186A0, 
                        0x000124F8
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0xFDE8, 
                        0x000124F8, 
                        0x32, 
                        0x05, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0x7530, 
                        0xFDE8, 
                        0x000124F8, 
                        0x32, 
                        0x05, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xAFC8, 
                        0xD2F0, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x000186A0, 
                        0x000124F8
                    }, 

                    Package (0x08)
                    {
                        0x2710, 
                        0x2710, 
                        0x61A8, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0xD6D8, 
                        0xC350
                    }, 

                    Package (0x08)
                    {
                        0x61A8, 
                        0x61A8, 
                        0x7530, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0xD6D8, 
                        0xC350
                    }, 

                    Package (0x08)
                    {
                        0x7530, 
                        0x88B8, 
                        0x9C40, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0xD6D8, 
                        0xC350
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0x9C40, 
                        0xAFC8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0xEA60, 
                        0xD6D8
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xC350, 
                        0xD6D8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00014C08, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0xEA60, 
                        0xFDE8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00017318, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0x00013880, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xFDE8, 
                        0x0001C138, 
                        0x0001C138, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xC350, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xEA60, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xFDE8, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x00011170, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x000124F8, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x00013880, 
                        0x0001E848, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }
                })
                Name (FNQ2, Package (0x19)
                {
                    Package (0x08)
                    {
                        0x05, 
                        0x07, 
                        0x04, 
                        One, 
                        0x08, 
                        0x03, 
                        0x0C, 
                        0x0B
                    }, 

                    Package (0x08)
                    {
                        0x0001C138, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x000124F8, 
                        0x0001C138, 
                        0x0001C138, 
                        0x96, 
                        0x1E, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0x00011170, 
                        0x00014C08, 
                        0x00018E70, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0x00014C08, 
                        0x00018E70, 
                        0x96, 
                        0x0A, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xC350, 
                        0xEA60, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x000186A0, 
                        0x000124F8
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0xFDE8, 
                        0x000124F8, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0xFDE8, 
                        0x000124F8, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xAFC8, 
                        0xD2F0, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x000186A0, 
                        0x000124F8
                    }, 

                    Package (0x08)
                    {
                        0x2710, 
                        0x2710, 
                        0x61A8, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0xD6D8, 
                        0xC350
                    }, 

                    Package (0x08)
                    {
                        0x61A8, 
                        0x61A8, 
                        0x7530, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0xD6D8, 
                        0xC350
                    }, 

                    Package (0x08)
                    {
                        0x7530, 
                        0x88B8, 
                        0x9C40, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0xD6D8, 
                        0xC350
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0x9C40, 
                        0xAFC8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0xEA60, 
                        0xD6D8
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xC350, 
                        0xD6D8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00014C08, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0xEA60, 
                        0xFDE8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00017318, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0x0001D4C0, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x00014C08, 
                        0x0001C138, 
                        0x0001C138, 
                        0x96, 
                        0x1E, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xC350, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xEA60, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xFDE8, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x00011170, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x000124F8, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x00013880, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }
                })
                Name (FNQ7, Package (0x19)
                {
                    Package (0x08)
                    {
                        0x05, 
                        0x07, 
                        0x04, 
                        One, 
                        0x08, 
                        0x03, 
                        0x0C, 
                        0x0B
                    }, 

                    Package (0x08)
                    {
                        0x00017318, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0x0001C138, 
                        0x0001C138, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0x00011170, 
                        0x00014C08, 
                        0x00018E70, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0x00014C08, 
                        0x00018E70, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xC350, 
                        0xEA60, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x0001ADB0, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0xFDE8, 
                        0x000124F8, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0xFDE8, 
                        0x000124F8, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xAFC8, 
                        0xD2F0, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x0001ADB0, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0x2710, 
                        0x2710, 
                        0x61A8, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0xEA60, 
                        0xD6D8
                    }, 

                    Package (0x08)
                    {
                        0x61A8, 
                        0x61A8, 
                        0x7530, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0xEA60, 
                        0xD6D8
                    }, 

                    Package (0x08)
                    {
                        0x7530, 
                        0x88B8, 
                        0x9C40, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0xEA60, 
                        0xD6D8
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0x9C40, 
                        0xAFC8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00011170, 
                        0xFDE8
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xC350, 
                        0xD6D8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00014C08, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0xEA60, 
                        0xFDE8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x0001ADB0, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0x000186A0, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xEA60, 
                        0x0001C138, 
                        0x0001C138, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xC350, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xEA60, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xFDE8, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x00011170, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x000124F8, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x00013880, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }
                })
                Name (FNQ4, Package (0x19)
                {
                    Package (0x08)
                    {
                        0x05, 
                        0x07, 
                        0x04, 
                        One, 
                        0x08, 
                        0x03, 
                        0x0C, 
                        0x0B
                    }, 

                    Package (0x08)
                    {
                        0x0001C138, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x000124F8, 
                        0x0001C138, 
                        0x0001C138, 
                        0x96, 
                        0x1E, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0x00011170, 
                        0x00014C08, 
                        0x00018E70, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0x00014C08, 
                        0x00018E70, 
                        0x96, 
                        0x0A, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xC350, 
                        0xEA60, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x000186A0, 
                        0x000124F8
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0xFDE8, 
                        0x000124F8, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0xFDE8, 
                        0x000124F8, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xAFC8, 
                        0xD2F0, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x000186A0, 
                        0x000124F8
                    }, 

                    Package (0x08)
                    {
                        0x2710, 
                        0x2710, 
                        0x61A8, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0xD6D8, 
                        0xC350
                    }, 

                    Package (0x08)
                    {
                        0x61A8, 
                        0x61A8, 
                        0x7530, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0xD6D8, 
                        0xC350
                    }, 

                    Package (0x08)
                    {
                        0x7530, 
                        0x88B8, 
                        0x9C40, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0xD6D8, 
                        0xC350
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0x9C40, 
                        0xAFC8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0xEA60, 
                        0xD6D8
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xC350, 
                        0xD6D8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00014C08, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0xEA60, 
                        0xFDE8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00017318, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0x0001D4C0, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x00014C08, 
                        0x0001C138, 
                        0x0001C138, 
                        0x96, 
                        0x1E, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xC350, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xEA60, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xFDE8, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x00011170, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x000124F8, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x00013880, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }
                })
                Name (FNQ8, Package (0x19)
                {
                    Package (0x08)
                    {
                        0x05, 
                        0x07, 
                        0x04, 
                        One, 
                        0x08, 
                        0x03, 
                        0x0C, 
                        0x0B
                    }, 

                    Package (0x08)
                    {
                        0x00017318, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0x0001C138, 
                        0x0001C138, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0x00011170, 
                        0x00014C08, 
                        0x00018E70, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0x00014C08, 
                        0x00018E70, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xC350, 
                        0xEA60, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0xFDE8, 
                        0x000124F8, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0xFDE8, 
                        0x000124F8, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xAFC8, 
                        0xD2F0, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0x2710, 
                        0x2710, 
                        0x61A8, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0x61A8, 
                        0x61A8, 
                        0x7530, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0x7530, 
                        0x88B8, 
                        0x9C40, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0xEA60, 
                        0xD6D8
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0x9C40, 
                        0xAFC8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00011170, 
                        0xFDE8
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xC350, 
                        0xD6D8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0xEA60, 
                        0xFDE8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0x000186A0, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xEA60, 
                        0x0001C138, 
                        0x0001C138, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xC350, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xEA60, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xFDE8, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x00011170, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x000124F8, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x00013880, 
                        0x00023668, 
                        0x00025D78, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }
                })
                Name (FNQ3, Package (0x19)
                {
                    Package (0x08)
                    {
                        0x05, 
                        0x07, 
                        0x04, 
                        One, 
                        0x08, 
                        0x03, 
                        0x0C, 
                        0x0B
                    }, 

                    Package (0x08)
                    {
                        0x000186A0, 
                        0x000186A0, 
                        0x0001E848, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xEA60, 
                        0x000186A0, 
                        0x0001E848, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x00011170, 
                        0x00014C08, 
                        0x00018E70, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0x00014C08, 
                        0x00018E70, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xC350, 
                        0xEA60, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0xFDE8, 
                        0x000124F8, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0xFDE8, 
                        0x000124F8, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xAFC8, 
                        0xD2F0, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0x2710, 
                        0x2710, 
                        0x61A8, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0x61A8, 
                        0x61A8, 
                        0x7530, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0x7530, 
                        0x88B8, 
                        0x9C40, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0xD6D8, 
                        0xC350
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0x9C40, 
                        0xAFC8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0xEA60, 
                        0xD6D8
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xC350, 
                        0xD6D8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0xEA60, 
                        0xFDE8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x00027100, 
                        0x0001A5E0
                    }, 

                    Package (0x08)
                    {
                        0x00019A28, 
                        0x000186A0, 
                        0x0001E848, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xFDE8, 
                        0x000186A0, 
                        0x0001E848, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0x000186A0, 
                        0x0001E848, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xC350, 
                        0x000186A0, 
                        0x0001E848, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0x000186A0, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xEA60, 
                        0x000186A0, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0xFDE8, 
                        0x000186A0, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x00011170, 
                        0x000186A0, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x000124F8, 
                        0x000186A0, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }, 

                    Package (0x08)
                    {
                        0x00013880, 
                        0x000186A0, 
                        0x00023668, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x0002AF80, 
                        0x0001C138
                    }
                })
                Method (FTSW, 0, NotSerialized)
                {
                    If ((MCSK == One))
                    {
                        If (((GTYP == 0x02) || (GTYP == 0x03)))
                        {
                            If ((CPTY == 0x09))
                            {
                                Local0 = FNQ0 /* \_SB_.PCI0.LPC0.FNQ0 */
                            }
                            ElseIf ((CPTY == 0x0A))
                            {
                                Local0 = FNQA /* \_SB_.PCI0.LPC0.FNQA */
                            }
                            Else
                            {
                                Local0 = FNQ6 /* \_SB_.PCI0.LPC0.FNQ6 */
                            }
                        }
                        ElseIf ((GTYP == 0x07))
                        {
                            If ((CPTY == 0x09))
                            {
                                Local0 = FNQ0 /* \_SB_.PCI0.LPC0.FNQ0 */
                            }
                            ElseIf ((CPTY == 0x0A))
                            {
                                Local0 = FNQA /* \_SB_.PCI0.LPC0.FNQA */
                            }
                            Else
                            {
                                Local0 = FNQ6 /* \_SB_.PCI0.LPC0.FNQ6 */
                            }
                        }
                        ElseIf (((CPTY == 0x09) || (CPTY == 0x0A)))
                        {
                            Local0 = FNQ1 /* \_SB_.PCI0.LPC0.FNQ1 */
                        }
                        Else
                        {
                            Local0 = FNQ9 /* \_SB_.PCI0.LPC0.FNQ9 */
                        }
                    }
                    ElseIf ((MCSK == 0x02))
                    {
                        If ((GTYP == One))
                        {
                            If ((CPTY == 0x0A))
                            {
                                Local0 = FNQ2 /* \_SB_.PCI0.LPC0.FNQ2 */
                            }
                            Else
                            {
                                Local0 = FNQ7 /* \_SB_.PCI0.LPC0.FNQ7 */
                            }
                        }
                        ElseIf ((GTYP == 0x05))
                        {
                            If ((CPTY == 0x0A))
                            {
                                Local0 = FNQ4 /* \_SB_.PCI0.LPC0.FNQ4 */
                            }
                            Else
                            {
                                Local0 = FNQ8 /* \_SB_.PCI0.LPC0.FNQ8 */
                            }
                        }
                        ElseIf ((CPTY == 0x09))
                        {
                            Local0 = FNQ0 /* \_SB_.PCI0.LPC0.FNQ0 */
                        }
                        Else
                        {
                            Local0 = FNQ6 /* \_SB_.PCI0.LPC0.FNQ6 */
                        }
                    }

                    Return (Local0)
                }

                Method (FNQR, 1, NotSerialized)
                {
                    Local6 = FTSW ()
                    Local0 = SizeOf (Local6 [Zero])
                    Local1 = ((Local1 = (Local0 * 0x05)) + 0x02)
                    Name (BUFF, Buffer (0x07){})
                    BUFF [Zero] = 0x07
                    BUFF [One] = Zero
                    Local2 = One
                    Local3 = Zero
                    Local4 = Zero
                    While ((Local3 < Local0))
                    {
                        BUFF [0x02] = DerefOf (DerefOf (Local6 [Zero]) [
                            Local3])
                        Local4 = DerefOf (DerefOf (Local6 [Arg0]) [Local3])
                        BUFF [0x03] = (Local4 & 0xFF)
                        BUFF [0x04] = ((Local4 & 0xFF00) >> 0x08)
                        BUFF [0x05] = ((Local4 & 0x00FF0000) >> 0x10)
                        BUFF [0x06] = ((Local4 & 0xFF000000) >> 0x18)
                        ALIB (0x0C, BUFF)
                        Sleep (0x19)
                        Local3 += One
                    }
                }

                Method (FNQS, 1, Serialized)
                {
                    Local0 = Arg0
                    FNQR (Local0)
                }

                Method (FNQT, 0, Serialized)
                {
                    If ((Acquire (^EC0.LFCM, 0xA000) == Zero))
                    {
                        Local0 = ToInteger (^EC0.DCMB)
                        If (((Local0 > Zero) && (Local0 < 0x07)))
                        {
                            Local0 += 0x08
                            FNQR (Local0)
                            Release (^EC0.LFCM)
                            Return (Zero)
                        }

                        Release (^EC0.LFCM)
                    }

                    If ((Acquire (^EC0.LFCM, 0xA000) == Zero))
                    {
                        If ((^EC0.ADPT == One))
                        {
                            If ((^EC0.ACMO != One))
                            {
                                Release (^EC0.LFCM)
                                Return (Zero)
                            }

                            If ((^EC0.ADSL == One))
                            {
                                Release (^EC0.LFCM)
                                Return (Zero)
                            }
                        }

                        Release (^EC0.LFCM)
                    }

                    Local0 = One
                    If ((Acquire (^EC0.LFCM, 0xA000) == Zero))
                    {
                        If ((^EC0.SPMO == One))
                        {
                            If (((PRFT == One) && (EPSW == One)))
                            {
                                If ((DBFS == One))
                                {
                                    Local0 = 0x10
                                }
                                Else
                                {
                                    Local0 = 0x0F
                                }
                            }
                            ElseIf ((DBFS == One))
                            {
                                Local0 = 0x02
                            }
                            Else
                            {
                                Local0 = One
                            }

                            EATL = Zero
                        }
                        ElseIf ((^EC0.SPMO == 0x02))
                        {
                            If ((^EC0.ACTY () == One))
                            {
                                EATL = One
                            }
                            Else
                            {
                                EATL = Zero
                            }

                            If ((^EC0.ADPT == Zero))
                            {
                                Local0 = 0x08
                            }
                            ElseIf ((DBFS == One))
                            {
                                Local0 = 0x07
                            }
                            Else
                            {
                                Local0 = 0x06
                            }
                        }
                        Else
                        {
                            If ((^EC0.ADPT == Zero))
                            {
                                Local0 = 0x05
                            }
                            ElseIf ((DBFS == One))
                            {
                                Local0 = 0x04
                            }
                            Else
                            {
                                Local0 = 0x03
                            }

                            EATL = Zero
                        }

                        Release (^EC0.LFCM)
                    }

                    FNQR (Local0)
                }

                Method (CMQT, 0, Serialized)
                {
                    Name (CMBU, Buffer (0x16){})
                    CreateWordField (CMBU, Zero, SSZ1)
                    CreateByteField (CMBU, 0x02, NUM1)
                    CreateDWordField (CMBU, 0x03, MUD1)
                    CreateByteField (CMBU, 0x07, NUM2)
                    CreateDWordField (CMBU, 0x08, MUD2)
                    CreateByteField (CMBU, 0x0C, NUM3)
                    CreateDWordField (CMBU, 0x0D, MUD3)
                    CreateByteField (CMBU, 0x11, NUM4)
                    CreateDWordField (CMBU, 0x12, MUD4)
                    If ((Acquire (^EC0.LFCM, 0xA000) == Zero))
                    {
                        SSZ1 = 0x16
                        NUM1 = 0x05
                        Local0 = ^EC0.CPP2 /* \_SB_.PCI0.LPC0.EC0_.CPP2 */
                        Local0 *= 0x03E8
                        MUD1 = Local0
                        NUM2 = 0x07
                        Local1 = ^EC0.CPP1 /* \_SB_.PCI0.LPC0.EC0_.CPP1 */
                        Local1 *= 0x03E8
                        MUD2 = Local1
                        NUM3 = 0x04
                        Local2 = ^EC0.CPP3 /* \_SB_.PCI0.LPC0.EC0_.CPP3 */
                        Local2 *= 0x03E8
                        MUD3 = Local2
                        NUM4 = 0x03
                        MUD4 = ^EC0.CGTC /* \_SB_.PCI0.LPC0.EC0_.CGTC */
                        ALIB (0x0C, CMBU)
                        Release (^EC0.LFCM)
                    }
                }

                Method (EMQT, 0, Serialized)
                {
                    If ((EPSW == One))
                    {
                        If ((DBFS == One))
                        {
                            Local0 = 0x10
                        }
                        Else
                        {
                            Local0 = 0x0F
                        }
                    }
                    ElseIf ((DBFS == One))
                    {
                        Local0 = 0x02
                    }
                    Else
                    {
                        Local0 = One
                    }

                    FNQR (Local0)
                }

                Name (XX12, Buffer (0x07){})
                CreateWordField (XX12, Zero, SSZE)
                CreateByteField (XX12, 0x02, SMUF)
                CreateDWordField (XX12, 0x03, SMUD)
                Method (CTCL, 0, Serialized)
                {
                    If ((HTCS == One))
                    {
                        SSZE = 0x07
                        SMUF = 0x03
                        SMUD = HTCD /* External reference */
                        ALIB (0x0C, XX12)
                    }

                    If ((^EC0.TDC1 == One))
                    {
                        SSZE = 0x07
                        SMUF = 0x0B
                        SMUD = 0x0001A5E0
                        If ((^EC0.SPMO == One))
                        {
                            If ((PRFT == One))
                            {
                                SMUD = 0x0001B580
                            }
                        }

                        If ((^EC0.CTMD == One))
                        {
                            If ((^EC0.CTE0 == One))
                            {
                                SMUD = 0x0001B580
                            }
                        }

                        ALIB (0x0C, XX12)
                    }

                    If ((^EC0.TDC2 == One))
                    {
                        SSZE = 0x07
                        SMUF = 0x0B
                        SMUD = 0x00014C08
                        ALIB (0x0C, XX12)
                    }
                }

                Scope (\)
                {
                    Name (ECON, One)
                    Name (DDTS, Zero)
                }

                Device (EC0)
                {
                    Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (ECAV, Zero)
                    Name (WEID, Zero)
                    Mutex (LFCM, 0x00)
                    Name (_GPE, 0x07)  // _GPE: General Purpose Events
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BFFR, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0062,             // Range Minimum
                                0x0062,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0066,             // Range Minimum
                                0x0066,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0480,             // Range Minimum
                                0x0480,             // Range Maximum
                                0x00,               // Alignment
                                0x10,               // Length
                                )
                        })
                        Return (BFFR) /* \_SB_.PCI0.LPC0.EC0_._CRS.BFFR */
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    OperationRegion (ERAM, EmbeddedControl, Zero, 0xFF)
                    Field (ERAM, ByteAcc, Lock, Preserve)
                    {
                        VCMD,   8
                    }

                    OperationRegion (ERA5, SystemMemory, 0xFE0B0500, 0xFF)
                    Field (ERA5, ByteAcc, Lock, Preserve)
                    {
                        Offset (0xF0), 
                        IGPS,   2, 
                        Offset (0xF1), 
                        Offset (0xF2), 
                        SGCB,   8, 
                        GPUF,   8, 
                        GPTH,   8, 
                        Offset (0xFE), 
                        PDAB,   8
                    }

                    OperationRegion (CPUP, SystemMemory, 0xFE0B06B0, 0x10)
                    Field (CPUP, ByteAcc, NoLock, Preserve)
                    {
                        CPP1,   16, 
                        CPP2,   16, 
                        CPP3,   16, 
                        CPP4,   16, 
                        CGTC,   8
                    }

                    OperationRegion (R6FA, SystemMemory, 0xFE0B06FA, One)
                    Field (R6FA, AnyAcc, Lock, Preserve)
                    {
                        MLCC,   2
                    }

                    OperationRegion (ECB2, SystemMemory, 0xFE0B0660, 0xFF)
                    Field (ECB2, AnyAcc, Lock, Preserve)
                    {
                        BAR1,   184, 
                        BAR2,   80
                    }

                    OperationRegion (COCD, SystemMemory, 0xFE0B0678, 0x10)
                    Field (COCD, ByteAcc, Lock, Preserve)
                    {
                        CGTH,   8, 
                        YLOG,   8, 
                        CST2,   8, 
                        RLS2,   8, 
                        COD3,   8, 
                        COD5,   8, 
                        GPAB,   8, 
                        TGPP,   8, 
                        GATP,   8
                    }

                    OperationRegion (F9FT, SystemMemory, 0xFE0B09F0, 0x20)
                    Field (F9FT, AnyAcc, Lock, Preserve)
                    {
                        F9F0,   8, 
                        F9F1,   8, 
                        F9F2,   8, 
                        F9F3,   8, 
                        F9F4,   8, 
                        F9F5,   8, 
                        F9F6,   8, 
                        F9F7,   8, 
                        F9F8,   8, 
                        F9F9,   8, 
                        F9FA,   8
                    }

                    OperationRegion (ECPW, SystemMemory, 0xFE0B02A7, One)
                    Field (ECPW, AnyAcc, Lock, Preserve)
                    {
                        ADSS,   1, 
                        ADSL,   1, 
                            ,   2, 
                        ADCS,   1, 
                        ADCL,   1, 
                            ,   1, 
                        ADNS,   1
                    }

                    OperationRegion (F9FF, SystemMemory, 0xFE0B05FF, One)
                    Field (F9FF, AnyAcc, Lock, Preserve)
                    {
                            ,   4, 
                        CTE0,   1, 
                        Offset (0x01)
                    }

                    OperationRegion (YYLG, SystemMemory, 0xFE0B09FD, One)
                    Field (YYLG, AnyAcc, Lock, Preserve)
                    {
                        YALG,   8
                    }

                    OperationRegion (ERAX, SystemMemory, 0xFE0B0400, 0xFF)
                    Field (ERAX, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x01), 
                        VDAT,   8, 
                        VSTA,   8, 
                        ENCM,   1, 
                        BSNC,   1, 
                        Offset (0x06), 
                        FANS,   8, 
                        BUSG,   1, 
                        BLEG,   1, 
                        BATF,   1, 
                        BNSM,   1, 
                        BTST,   1, 
                        BBAD,   1, 
                        AUTO,   1, 
                        FCHG,   1, 
                        STMM,   8, 
                        STMH,   8, 
                        EDCC,   1, 
                            ,   1, 
                        CDMB,   1, 
                        CCSB,   1, 
                        BTSM,   1, 
                        BTCM,   1, 
                            ,   1, 
                        Offset (0x0B), 
                        SGST,   1, 
                        HDMI,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                        Offset (0x0C), 
                        ODPO,   1, 
                        EODD,   1, 
                        ODPK,   1, 
                        CMEX,   1, 
                        CMON,   1, 
                        SODD,   1, 
                        ODFB,   1, 
                        EODS,   1, 
                        RTMP,   8, 
                        SBTS,   8, 
                        MPTS,   8, 
                        PINF,   3, 
                        SUPR,   1, 
                        GTMP,   1, 
                        QUIT,   1, 
                        LS35,   1, 
                        Offset (0x11), 
                        RMBT,   1, 
                        RSBT,   1, 
                            ,   2, 
                        Offset (0x12), 
                        FUSL,   8, 
                        FUSH,   8, 
                        FWBT,   64, 
                        Offset (0x1D), 
                        CTMD,   1, 
                        CAC1,   1, 
                        FNST,   1, 
                        YLSF,   1, 
                        EMFG,   1, 
                        APPF,   1, 
                        HPFF,   1, 
                        ACPS,   1, 
                        SSFM,   1, 
                        BLCF,   1, 
                        PABD,   1, 
                        ES3F,   1, 
                        ES5F,   1, 
                        TBOF,   1, 
                        GPOF,   1, 
                        RS8F,   1, 
                        LSKV,   8, 
                        SPMO,   4, 
                        MSMF,   1, 
                        GSFS,   1, 
                        MACF,   1, 
                        MCUD,   1, 
                        BTFW,   8, 
                        UBCC,   8, 
                        RGBS,   1, 
                        KBLT,   1, 
                            ,   5, 
                        LCON,   1, 
                        BACT,   16, 
                        KBGS,   32, 
                        FEPL,   8, 
                        FEPH,   8, 
                        KBSS,   32, 
                        Offset (0x31), 
                        GIRT,   8, 
                        PIRT,   8, 
                        KIRT,   8, 
                        IRTI,   8, 
                        Offset (0x36), 
                        DGPU,   8, 
                        GUST,   8, 
                        GDST,   8, 
                        FCST,   8, 
                        Offset (0x3E), 
                        APTS,   4, 
                            ,   3, 
                        IPRC,   1, 
                        PRRO,   1, 
                        PRWO,   1, 
                            ,   5, 
                        SPBL,   1, 
                        PCBV,   16, 
                        PCBS,   8, 
                        ECTP,   8, 
                            ,   3, 
                        ACPD,   1, 
                        SACS,   1, 
                        EACS,   1, 
                        STCS,   1, 
                        ETCS,   1, 
                        KBGC,   32, 
                        Offset (0x4A), 
                        ESMC,   1, 
                        Offset (0x4B), 
                        EMOD,   8, 
                        BFUD,   16, 
                        Offset (0x50), 
                        Offset (0x51), 
                        Offset (0x52), 
                        Offset (0x53), 
                        Offset (0x54), 
                            ,   3, 
                        PDMD,   1, 
                        Offset (0x55), 
                            ,   1, 
                        TPMD,   1, 
                        Offset (0x56), 
                        Offset (0x57), 
                            ,   5, 
                        BTSB,   3, 
                        BTHT,   4, 
                        BTTP,   4, 
                        BTLF,   4, 
                        Offset (0x5A), 
                        GPPW,   8, 
                        PATY,   8, 
                        BACA,   8, 
                        EXSI,   8, 
                        EXSB,   8, 
                        EXND,   8, 
                        SMPR,   8, 
                        SMST,   8, 
                        SMAD,   8, 
                        SMCM,   8, 
                        SMDA,   256, 
                        BCNT,   8, 
                        SMAA,   8, 
                        SAD0,   8, 
                        SAD1,   8, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                        FBDC,   1, 
                        FBFG,   1, 
                        Offset (0x8A), 
                        KBLO,   1, 
                        UCHE,   1, 
                        KLCH,   1, 
                            ,   1, 
                        KLFS,   1, 
                        KLOR,   1, 
                        CIBM,   1, 
                        UCER,   1, 
                        TPDV,   3, 
                        Offset (0x8C), 
                        QCHO,   1, 
                        BKLT,   1, 
                        BSFU,   1, 
                            ,   1, 
                            ,   1, 
                        OKBS,   1, 
                            ,   1, 
                        QCBX,   1, 
                        FLBT,   1, 
                            ,   2, 
                        LESR,   1, 
                        Offset (0x8E), 
                        Offset (0x8F), 
                        BMN0,   72, 
                        BDN0,   64, 
                        IBTL,   1, 
                        IBCL,   1, 
                        ISS0,   1, 
                        IRTC,   1, 
                        ISUP,   1, 
                        ISC2,   1, 
                        IWAK,   1, 
                        Offset (0xA1), 
                        FPFC,   1, 
                        VOUT,   1, 
                        TPAD,   1, 
                        HKDB,   1, 
                        NUML,   1, 
                        CALK,   1, 
                        CCPW,   1, 
                        EECP,   1, 
                        DCMB,   8, 
                        OSTY,   3, 
                        ACMO,   1, 
                        ADPI,   2, 
                            ,   1, 
                        ADPT,   1, 
                        PMEW,   1, 
                        MODW,   1, 
                        LANW,   1, 
                        RTCW,   1, 
                        WLAW,   1, 
                        USBW,   1, 
                        KEYW,   1, 
                        TPWK,   1, 
                        CHCR,   1, 
                        ADPP,   1, 
                        LERN,   1, 
                        ACMD,   1, 
                        BOVP,   1, 
                        LEAK,   1, 
                        AIRP,   1, 
                        ACOF,   1, 
                        Offset (0xA7), 
                        Offset (0xA8), 
                        Offset (0xA9), 
                        THRT,   8, 
                        Offset (0xAB), 
                        Offset (0xAC), 
                        Offset (0xAD), 
                        Offset (0xAE), 
                        TLVL,   4, 
                            ,   2, 
                        THSW,   1, 
                        TPIN,   1, 
                        Offset (0xB0), 
                        CPUT,   8, 
                        CPUS,   8, 
                        PCHS,   8, 
                        GPUS,   8, 
                        GPUT,   8, 
                        SSDS,   8, 
                        PCHT,   8, 
                        CHIS,   8, 
                            ,   1, 
                        LSTE,   1, 
                        PMEE,   1, 
                        PWBE,   1, 
                        RNGE,   1, 
                        BTWE,   1, 
                        Offset (0xB9), 
                        LCBV,   8, 
                        DGDF,   8, 
                        WLAN,   1, 
                        BLUE,   1, 
                        WEXT,   1, 
                        BEXT,   1, 
                        KILL,   1, 
                        WLOK,   1, 
                        EN3G,   1, 
                        EX3G,   1, 
                        Offset (0xBD), 
                        CTYP,   3, 
                        CORE,   3, 
                        GATY,   2, 
                        BA1P,   1, 
                        BA2P,   1, 
                            ,   2, 
                        B1CH,   1, 
                        B2CH,   1, 
                        Offset (0xBF), 
                        PBY1,   1, 
                        PBY2,   1, 
                            ,   2, 
                        SMB1,   1, 
                        SMB2,   1, 
                        Offset (0xC0), 
                        B1TY,   1, 
                        B1MD,   1, 
                        B1LW,   1, 
                            ,   1, 
                        B1MF,   3, 
                        Offset (0xC1), 
                        B1ST,   8, 
                        B1RC,   16, 
                        B1SN,   16, 
                        B1FV,   16, 
                        B1DV,   16, 
                        B1DC,   16, 
                        B1FC,   16, 
                        B1GS,   8, 
                        Offset (0xD0), 
                        B1CR,   16, 
                        B1AC,   16, 
                        B1PC,   8, 
                        B1VL,   8, 
                        B1TM,   8, 
                        B1AT,   8, 
                        B1CC,   16, 
                        B1TC,   8, 
                        B1CI,   8, 
                        B1CU,   8, 
                        B1CA,   8, 
                        B1SM,   16, 
                        B1VC,   8, 
                        B1FA,   8, 
                        B1VA,   8, 
                        B1C1,   16, 
                        B1C2,   16, 
                        B1C3,   16, 
                        B1C4,   16, 
                        Offset (0xEC), 
                        MAXE,   16, 
                        B1CT,   16, 
                        B1EX,   1, 
                        B1FL,   1, 
                        B1EP,   1, 
                        B1FI,   1, 
                            ,   2, 
                        B1RE,   1, 
                        Offset (0xF1), 
                        B1LL,   1, 
                        B1CE,   1, 
                        B1SE,   1, 
                        B1S5,   1, 
                        B1SR,   1, 
                        B1SC,   1, 
                        Offset (0xF2), 
                        B1TO,   1, 
                        B1BC,   1, 
                        B1CF,   1, 
                        B1CS,   1, 
                        B1SG,   1, 
                        B1SU,   1, 
                        B1OV,   1, 
                        B1OT,   1, 
                        B1TT,   1, 
                        B1SA,   1, 
                        B1SS,   1, 
                            ,   1, 
                        B1SF,   1, 
                        B1WN,   1, 
                        Offset (0xF4), 
                        B1DA,   16, 
                        Offset (0xF8), 
                        B1CN,   8, 
                        ITMD,   1, 
                        Offset (0xFA), 
                        Offset (0xFB), 
                        Offset (0xFE), 
                        FA2S,   8
                    }

                    Method (REJF, 1, NotSerialized)
                    {
                        If ((Acquire (LFCM, 0xA000) == Zero))
                        {
                            If ((Arg0 == One))
                            {
                                Local0 = IGPS /* \_SB_.PCI0.LPC0.EC0_.IGPS */
                            }

                            If ((Arg0 == 0x02))
                            {
                                Local0 = HPFF /* \_SB_.PCI0.LPC0.EC0_.HPFF */
                            }

                            If ((Arg0 == 0x03))
                            {
                                Local0 = APPF /* \_SB_.PCI0.LPC0.EC0_.APPF */
                            }

                            Release (LFCM)
                            Return (Local0)
                        }
                    }

                    Method (WEJF, 2, NotSerialized)
                    {
                        If ((Acquire (LFCM, 0xA000) == Zero))
                        {
                            If ((Arg0 == One))
                            {
                                IGPS = Arg1
                            }

                            If ((Arg0 == 0x02))
                            {
                                HPFF = Arg1
                            }

                            If ((Arg0 == 0x03))
                            {
                                APPF = Arg1
                            }

                            Release (LFCM)
                        }
                    }

                    Method (EOST, 0, Serialized)
                    {
                        OSTP ()
                        If ((TPOS == 0x40))
                        {
                            Local0 = One
                        }

                        If ((TPOS == 0x80))
                        {
                            Local0 = 0x02
                        }

                        If ((TPOS == 0x50))
                        {
                            Local0 = 0x03
                        }

                        If ((TPOS == 0x60))
                        {
                            Local0 = 0x04
                        }

                        If ((TPOS == 0x61))
                        {
                            Local0 = 0x05
                        }

                        If ((TPOS == 0x70))
                        {
                            Local0 = 0x06
                        }

                        If ((Acquire (LFCM, 0xA000) == Zero))
                        {
                            OSTY = Local0
                            Release (LFCM)
                        }
                    }

                    Method (ACTY, 0, NotSerialized)
                    {
                        If ((One == ADPT))
                        {
                            If ((One == ACMO))
                            {
                                If ((One == ACPS))
                                {
                                    Return (0x04)
                                }
                                Else
                                {
                                    Return (One)
                                }
                            }
                            Else
                            {
                                Return (0x02)
                            }
                        }
                        Else
                        {
                            Return (0x03)
                        }
                    }

                    OperationRegion (CMDE, SystemIO, 0x62, 0x0B)
                    Field (CMDE, ByteAcc, Lock, Preserve)
                    {
                        EC62,   8, 
                        Offset (0x02), 
                        Offset (0x03), 
                        Offset (0x04), 
                        EC66,   8, 
                        Offset (0x06), 
                        EC68,   8, 
                        Offset (0x08), 
                        Offset (0x09), 
                        Offset (0x0A), 
                        EC6C,   8
                    }

                    Method (WIBE, 1, Serialized)
                    {
                        Local0 = 0x00010000
                        While (Local0)
                        {
                            If ((Arg0 == One))
                            {
                                Local1 = EC66 /* \_SB_.PCI0.LPC0.EC0_.EC66 */
                            }
                            ElseIf ((Arg0 == 0x02))
                            {
                                Local1 = EC6C /* \_SB_.PCI0.LPC0.EC0_.EC6C */
                            }
                            Else
                            {
                                Return (0x02)
                            }

                            If (((Local1 & 0x02) == Zero))
                            {
                                Return (Zero)
                            }

                            Stall (0x0A)
                            Local0--
                        }

                        Return (One)
                    }

                    Method (WOBF, 1, Serialized)
                    {
                        Local0 = 0x00010000
                        While (Local0)
                        {
                            If ((Arg0 == One))
                            {
                                Local1 = EC66 /* \_SB_.PCI0.LPC0.EC0_.EC66 */
                            }
                            ElseIf ((Arg0 == 0x02))
                            {
                                Local1 = EC6C /* \_SB_.PCI0.LPC0.EC0_.EC6C */
                            }
                            Else
                            {
                                Return (0x02)
                            }

                            If (((Local1 & One) == One))
                            {
                                Return (Zero)
                            }

                            Stall (0x0A)
                            Local0--
                        }

                        Return (One)
                    }

                    Method (WOBE, 1, Serialized)
                    {
                        Local0 = 0x00010000
                        While (Local0)
                        {
                            If ((Arg0 == One))
                            {
                                Local1 = EC66 /* \_SB_.PCI0.LPC0.EC0_.EC66 */
                            }
                            ElseIf ((Arg0 == 0x02))
                            {
                                Local1 = EC6C /* \_SB_.PCI0.LPC0.EC0_.EC6C */
                            }
                            Else
                            {
                                Return (0x02)
                            }

                            If (((Local1 & One) == One))
                            {
                                If ((Arg0 == One))
                                {
                                    Local2 = EC62 /* \_SB_.PCI0.LPC0.EC0_.EC62 */
                                }
                                ElseIf ((Arg0 == 0x02))
                                {
                                    Local2 = EC68 /* \_SB_.PCI0.LPC0.EC0_.EC68 */
                                }
                                Else
                                {
                                    Return (0x02)
                                }
                            }
                            Else
                            {
                                Return (Zero)
                            }

                            Stall (0x0A)
                            Local0--
                        }

                        Return (One)
                    }

                    Method (GECF, 2, Serialized)
                    {
                        Name (LBUD, Zero)
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        If ((WOBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        EC6C = Arg0
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        If (((Arg1 != Zero) && (Arg1 != 0xFF)))
                        {
                            EC68 = Arg1
                            If ((WIBE (0x02) != Zero))
                            {
                                Return (One)
                            }
                        }

                        If ((WOBF (0x02) != Zero))
                        {
                            Return (One)
                        }

                        LBUD = EC68 /* \_SB_.PCI0.LPC0.EC0_.EC68 */
                        Return (LBUD) /* \_SB_.PCI0.LPC0.EC0_.GECF.LBUD */
                    }

                    Method (MBEI, 3, Serialized)
                    {
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        If ((WOBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        EC6C = Arg0
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        EC68 = Arg1
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        EC68 = Arg2
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        If ((WOBF (0x02) != Zero))
                        {
                            Return (One)
                        }

                        Local0 = EC68 /* \_SB_.PCI0.LPC0.EC0_.EC68 */
                        Return (Local0)
                    }

                    Method (LCMD, 2, Serialized)
                    {
                        Name (LBUF, Buffer (0x1E)
                        {
                             0x00                                             // .
                        })
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        If ((WOBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        EC6C = Arg0
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        If (((Arg1 != Zero) && (Arg1 != 0xFF)))
                        {
                            EC68 = Arg1
                            If ((WIBE (0x02) != Zero))
                            {
                                Return (One)
                            }
                        }

                        If ((WOBF (0x02) != Zero))
                        {
                            Return (One)
                        }

                        Local0 = EC68 /* \_SB_.PCI0.LPC0.EC0_.EC68 */
                        Local1 = Zero
                        While (Local0)
                        {
                            If ((WOBF (0x02) != Zero))
                            {
                                Return (One)
                            }

                            LBUF [Local1] = EC68 /* \_SB_.PCI0.LPC0.EC0_.EC68 */
                            Local1++
                            Local0--
                        }

                        Return (LBUF) /* \_SB_.PCI0.LPC0.EC0_.LCMD.LBUF */
                    }

                    Method (NCMD, 2, Serialized)
                    {
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        If ((WOBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        EC6C = Arg0
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        If (((Arg1 != Zero) && (Arg1 != 0xFF)))
                        {
                            EC68 = Arg1
                            If ((WIBE (0x02) != Zero))
                            {
                                Return (One)
                            }
                        }

                        Return (Zero)
                    }

                    Method (SCMD, 2, Serialized)
                    {
                        Name (LBUF, Buffer (0x1E)
                        {
                             0x00                                             // .
                        })
                        If ((WIBE (One) != Zero))
                        {
                            Return (One)
                        }

                        If ((WOBE (One) != Zero))
                        {
                            Return (One)
                        }

                        EC66 = Arg0
                        If ((WIBE (One) != Zero))
                        {
                            Return (One)
                        }

                        If (((Arg1 != Zero) && (Arg1 != 0xFF)))
                        {
                            EC62 = Arg1
                            If ((WIBE (One) != Zero))
                            {
                                Return (One)
                            }
                        }

                        If ((WOBF (One) != Zero))
                        {
                            Return (One)
                        }

                        Local0 = EC62 /* \_SB_.PCI0.LPC0.EC0_.EC62 */
                        Local1 = Zero
                        While (Local0)
                        {
                            If ((WOBF (One) != Zero))
                            {
                                Return (One)
                            }

                            LBUF [Local1] = EC62 /* \_SB_.PCI0.LPC0.EC0_.EC62 */
                            Local1++
                            Local0--
                        }

                        Return (LBUF) /* \_SB_.PCI0.LPC0.EC0_.SCMD.LBUF */
                    }

                    Method (TCMD, 2, Serialized)
                    {
                        If ((WIBE (One) != Zero))
                        {
                            Return (One)
                        }

                        If ((WOBE (One) != Zero))
                        {
                            Return (One)
                        }

                        EC66 = Arg0
                        If ((WIBE (One) != Zero))
                        {
                            Return (One)
                        }

                        If (((Arg1 != Zero) && (Arg1 != 0xFF)))
                        {
                            EC62 = Arg1
                            If ((WIBE (One) != Zero))
                            {
                                Return (One)
                            }
                        }

                        Return (Zero)
                    }

                    Method (LRAM, 2, Serialized)
                    {
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        If ((WOBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        EC6C = 0x7E
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        EC68 = Arg0
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        EC68 = Arg1
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        If ((WOBF (0x02) != Zero))
                        {
                            Return (One)
                        }

                        Return (EC68) /* \_SB_.PCI0.LPC0.EC0_.EC68 */
                    }

                    Method (SRAM, 2, Serialized)
                    {
                        If ((WIBE (One) != Zero))
                        {
                            Return (One)
                        }

                        If ((WOBE (One) != Zero))
                        {
                            Return (One)
                        }

                        EC66 = 0x7E
                        If ((WIBE (One) != Zero))
                        {
                            Return (One)
                        }

                        EC62 = Arg0
                        If ((WIBE (One) != Zero))
                        {
                            Return (One)
                        }

                        EC62 = Arg1
                        If ((WIBE (One) != Zero))
                        {
                            Return (One)
                        }

                        If ((WOBF (One) != Zero))
                        {
                            Return (One)
                        }

                        Return (EC62) /* \_SB_.PCI0.LPC0.EC0_.EC62 */
                    }

                    Device (BAT0)
                    {
                        Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                        Name (_UID, One)  // _UID: Unique ID
                        Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                        {
                            _SB
                        })
                        Name (PBIF, Package (0x0D)
                        {
                            Zero, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            One, 
                            0xFFFFFFFF, 
                            Zero, 
                            Zero, 
                            0x64, 
                            Zero, 
                            "LCFC", 
                            "BAT20101001", 
                            "LiP", 
                            "LENOVO"
                        })
                        Name (XBIF, Package (0x15)
                        {
                            One, 
                            Zero, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            One, 
                            0xFFFFFFFF, 
                            Zero, 
                            Zero, 
                            Zero, 
                            0x00017318, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0x03E8, 
                            0x03E8, 
                            0x64, 
                            Zero, 
                            "LCFC", 
                            "BAT20101001", 
                            "LiP", 
                            "LENOVO", 
                            One
                        })
                        Name (PBST, Package (0x04)
                        {
                            One, 
                            0x0A90, 
                            0x1000, 
                            0x2A30
                        })
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (ECAV)
                            {
                                If ((Acquire (LFCM, 0xA000) == Zero))
                                {
                                    Local0 = BA1P /* \_SB_.PCI0.LPC0.EC0_.BA1P */
                                    Release (LFCM)
                                }
                            }

                            If ((Local0 & One))
                            {
                                Return (0x1F)
                            }
                            Else
                            {
                                Return (0x0F)
                            }
                        }

                        Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
                        {
                            If ((ECAV == One))
                            {
                                If ((Acquire (LFCM, 0xA000) == Zero))
                                {
                                    Local0 = B1DC /* \_SB_.PCI0.LPC0.EC0_.B1DC */
                                    Local0 *= 0x0A
                                    PBIF [One] = Local0
                                    Local0 = B1FC /* \_SB_.PCI0.LPC0.EC0_.B1FC */
                                    Local0 *= 0x0A
                                    PBIF [0x02] = Local0
                                    PBIF [0x04] = B1DV /* \_SB_.PCI0.LPC0.EC0_.B1DV */
                                    If (B1FC)
                                    {
                                        PBIF [0x05] = ((B1FC * 0x0A) / 0x0A)
                                        PBIF [0x07] = ((B1DC * 0x0A) / 0x64)
                                    }

                                    PBIF [0x09] = ""
                                    PBIF [0x0A] = ""
                                    PBIF [0x0B] = ""
                                    PBIF [0x0C] = ""
                                    Name (BDNT, Buffer (0x09)
                                    {
                                         0x00                                             // .
                                    })
                                    BDNT = BDN0 /* \_SB_.PCI0.LPC0.EC0_.BDN0 */
                                    PBIF [0x09] = ToString (BDNT, Ones)
                                    Local0 = B1SN /* \_SB_.PCI0.LPC0.EC0_.B1SN */
                                    Name (SERN, Buffer (0x06)
                                    {
                                        "     "
                                    })
                                    Local2 = 0x04
                                    While (Local0)
                                    {
                                        Divide (Local0, 0x0A, Local1, Local0)
                                        SERN [Local2] = (Local1 + 0x30)
                                        Local2--
                                    }

                                    PBIF [0x0A] = SERN /* \_SB_.PCI0.LPC0.EC0_.BAT0._BIF.SERN */
                                    Name (DCH0, Buffer (0x0A)
                                    {
                                         0x00                                             // .
                                    })
                                    Name (DCH1, "LION")
                                    Name (DCH2, "LiP")
                                    If ((B1TY == One))
                                    {
                                        DCH0 = DCH1 /* \_SB_.PCI0.LPC0.EC0_.BAT0._BIF.DCH1 */
                                        PBIF [0x0B] = ToString (DCH0, Ones)
                                    }
                                    Else
                                    {
                                        DCH0 = DCH2 /* \_SB_.PCI0.LPC0.EC0_.BAT0._BIF.DCH2 */
                                        PBIF [0x0B] = ToString (DCH0, Ones)
                                    }

                                    Name (BMNT, Buffer (0x0A)
                                    {
                                         0x00                                             // .
                                    })
                                    BMNT = BMN0 /* \_SB_.PCI0.LPC0.EC0_.BMN0 */
                                    PBIF [0x0C] = ToString (BMNT, Ones)
                                    Release (LFCM)
                                }
                            }

                            Return (PBIF) /* \_SB_.PCI0.LPC0.EC0_.BAT0.PBIF */
                        }

                        Method (_BIX, 0, NotSerialized)  // _BIX: Battery Information Extended
                        {
                            If ((ECAV == One))
                            {
                                If ((Acquire (LFCM, 0xA000) == Zero))
                                {
                                    Local0 = B1DC /* \_SB_.PCI0.LPC0.EC0_.B1DC */
                                    Local0 *= 0x0A
                                    XBIF [0x02] = Local0
                                    Local0 = B1FC /* \_SB_.PCI0.LPC0.EC0_.B1FC */
                                    Local0 *= 0x0A
                                    XBIF [0x03] = Local0
                                    XBIF [0x05] = B1DV /* \_SB_.PCI0.LPC0.EC0_.B1DV */
                                    If (B1FC)
                                    {
                                        XBIF [0x06] = ((B1FC * 0x0A) / 0x0A)
                                        XBIF [0x0E] = ((B1DC * 0x0A) / 0x64)
                                    }

                                    XBIF [0x08] = B1CT /* \_SB_.PCI0.LPC0.EC0_.B1CT */
                                    XBIF [0x10] = ""
                                    XBIF [0x11] = ""
                                    XBIF [0x12] = ""
                                    XBIF [0x13] = ""
                                    Name (BDNT, Buffer (0x09)
                                    {
                                         0x00                                             // .
                                    })
                                    BDNT = BDN0 /* \_SB_.PCI0.LPC0.EC0_.BDN0 */
                                    XBIF [0x10] = ToString (BDNT, Ones)
                                    Local0 = B1SN /* \_SB_.PCI0.LPC0.EC0_.B1SN */
                                    Name (SERN, Buffer (0x06)
                                    {
                                        "     "
                                    })
                                    Local2 = 0x04
                                    While (Local0)
                                    {
                                        Divide (Local0, 0x0A, Local1, Local0)
                                        SERN [Local2] = (Local1 + 0x30)
                                        Local2--
                                    }

                                    XBIF [0x11] = SERN /* \_SB_.PCI0.LPC0.EC0_.BAT0._BIX.SERN */
                                    Name (DCH0, Buffer (0x0A)
                                    {
                                         0x00                                             // .
                                    })
                                    Name (DCH1, "LION")
                                    Name (DCH2, "LiP")
                                    If ((B1TY == One))
                                    {
                                        DCH0 = DCH1 /* \_SB_.PCI0.LPC0.EC0_.BAT0._BIX.DCH1 */
                                        XBIF [0x12] = ToString (DCH0, Ones)
                                    }
                                    Else
                                    {
                                        DCH0 = DCH2 /* \_SB_.PCI0.LPC0.EC0_.BAT0._BIX.DCH2 */
                                        XBIF [0x12] = ToString (DCH0, Ones)
                                    }

                                    Name (BMNT, Buffer (0x0A)
                                    {
                                         0x00                                             // .
                                    })
                                    BMNT = BMN0 /* \_SB_.PCI0.LPC0.EC0_.BMN0 */
                                    XBIF [0x13] = ToString (BMNT, Ones)
                                    Release (LFCM)
                                }
                            }

                            Return (XBIF) /* \_SB_.PCI0.LPC0.EC0_.BAT0.XBIF */
                        }

                        Name (OBST, Zero)
                        Name (OBAC, Zero)
                        Name (OBPR, Zero)
                        Name (OBRC, Zero)
                        Name (OBPV, Zero)
                        Method (_BST, 0, Serialized)  // _BST: Battery Status
                        {
                            If ((ECAV == One))
                            {
                                If ((Acquire (LFCM, 0xA000) == Zero))
                                {
                                    Sleep (0x10)
                                    Local0 = B1ST /* \_SB_.PCI0.LPC0.EC0_.B1ST */
                                    Local1 = DerefOf (PBST [Zero])
                                    Switch ((Local0 & 0x07))
                                    {
                                        Case (Zero)
                                        {
                                            OBST = (Local1 & 0xF8)
                                        }
                                        Case (One)
                                        {
                                            OBST = (One | (Local1 & 0xF8))
                                        }
                                        Case (0x02)
                                        {
                                            OBST = (0x02 | (Local1 & 0xF8))
                                        }
                                        Case (0x04)
                                        {
                                            OBST = (0x04 | (Local1 & 0xF8))
                                        }

                                    }

                                    Sleep (0x10)
                                    OBAC = B1AC /* \_SB_.PCI0.LPC0.EC0_.B1AC */
                                    If ((OBST & One))
                                    {
                                        If ((OBAC != Zero))
                                        {
                                            OBAC = (~OBAC & 0x7FFF)
                                        }
                                    }
                                    ElseIf ((FBFG != One))
                                    {
                                        If ((OBAC & 0x8000))
                                        {
                                            OBAC = Zero
                                        }
                                    }

                                    Sleep (0x10)
                                    OBRC = B1RC /* \_SB_.PCI0.LPC0.EC0_.B1RC */
                                    Sleep (0x10)
                                    OBPV = B1FV /* \_SB_.PCI0.LPC0.EC0_.B1FV */
                                    OBRC *= 0x0A
                                    OBPR = ((OBAC * OBPV) / 0x03E8)
                                    PBST [Zero] = OBST /* \_SB_.PCI0.LPC0.EC0_.BAT0.OBST */
                                    PBST [One] = OBPR /* \_SB_.PCI0.LPC0.EC0_.BAT0.OBPR */
                                    PBST [0x02] = OBRC /* \_SB_.PCI0.LPC0.EC0_.BAT0.OBRC */
                                    PBST [0x03] = OBPV /* \_SB_.PCI0.LPC0.EC0_.BAT0.OBPV */
                                    Release (LFCM)
                                }
                            }

                            Return (PBST) /* \_SB_.PCI0.LPC0.EC0_.BAT0.PBST */
                        }
                    }

                    Scope (\_SB.PCI0.LPC0.EC0)
                    {
                        Device (VPC0)
                        {
                            Name (_HID, "VPC2004")  // _HID: Hardware ID
                            Name (_UID, Zero)  // _UID: Unique ID
                            Name (_VPC, 0x7C0DF50A)
                            Name (VPCD, Zero)
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                Return (0x0F)
                            }

                            Method (_CFG, 0, NotSerialized)
                            {
                                Return (_VPC) /* \_SB_.PCI0.LPC0.EC0_.VPC0._VPC */
                            }

                            Method (VPCR, 1, Serialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        If ((Arg0 == One))
                                        {
                                            VPCD = VCMD /* \_SB_.PCI0.LPC0.EC0_.VCMD */
                                        }
                                        Else
                                        {
                                            VPCD = VDAT /* \_SB_.PCI0.LPC0.EC0_.VDAT */
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (VPCD) /* \_SB_.PCI0.LPC0.EC0_.VPC0.VPCD */
                            }

                            Method (VPCW, 2, Serialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        If ((Arg0 == One))
                                        {
                                            VCMD = Arg1
                                        }
                                        Else
                                        {
                                            VDAT = Arg1
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (Zero)
                            }

                            Method (SVCR, 1, Serialized)
                            {
                            }

                            Method (HALS, 0, NotSerialized)
                            {
                                Local0 = Zero
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        Local0 |= 0x08
                                        Local0 |= 0x40
                                        If ((One == UCHE))
                                        {
                                            Local0 |= 0x80
                                        }

                                        Local0 |= 0x0200
                                        If ((Zero == HKDB))
                                        {
                                            Local0 |= 0x0400
                                        }

                                        Local0 |= Zero
                                        If (ITMD)
                                        {
                                            Local0 |= 0x2000
                                        }

                                        Local0 |= 0x4000
                                        If ((One == CIBM))
                                        {
                                            Local0 |= 0x8000
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (Local0)
                            }

                            Method (SALS, 1, Serialized)
                            {
                                Local0 = ToInteger (Arg0)
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        If ((Local0 == 0x0A))
                                        {
                                            UCHE = One
                                            SMBB = 0x32
                                            SMBA = 0xCA
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        If ((Local0 == 0x0B))
                                        {
                                            UCHE = Zero
                                            SMBB = 0x33
                                            SMBA = 0xCA
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        If ((Local0 == 0x0E))
                                        {
                                            HKDB = Zero
                                            SMBB = 0x30
                                            SMBA = 0xCA
                                            Release (LFCM)
                                            TCMD (0x8D, 0x0A)
                                            Return (Zero)
                                        }

                                        If ((Local0 == 0x0F))
                                        {
                                            HKDB = One
                                            SMBB = 0x31
                                            SMBA = 0xCA
                                            Release (LFCM)
                                            TCMD (0x8D, 0x0B)
                                            Return (Zero)
                                        }

                                        If ((Local0 == 0x12))
                                        {
                                            CIBM = Zero
                                            SMBB = 0x34
                                            SMBA = 0xCA
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        If ((Local0 == 0x13))
                                        {
                                            CIBM = One
                                            SMBB = 0x35
                                            SMBA = 0xCA
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (Zero)
                            }

                            Method (GBMD, 0, NotSerialized)
                            {
                                Local0 = 0x10000000
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        If ((One == CDMB))
                                        {
                                            Local0 |= One
                                        }

                                        If ((One == QCBX))
                                        {
                                            If ((One == QCHO))
                                            {
                                                Local0 |= 0x04
                                            }
                                        }

                                        If ((One == BBAD))
                                        {
                                            Local0 |= 0x08
                                        }

                                        If ((One == BTSM))
                                        {
                                            Local0 |= 0x20
                                        }

                                        If ((One == BLEG))
                                        {
                                            Local0 |= 0x80
                                        }

                                        If ((One == BATF))
                                        {
                                            Local0 |= 0x0100
                                        }

                                        If ((Zero == BTSM))
                                        {
                                            Local0 |= 0x0200
                                        }

                                        If ((One == BUSG))
                                        {
                                            Local0 |= 0x0800
                                        }

                                        If ((Zero == ADPI))
                                        {
                                            Local0 &= 0xFFFE7FFF
                                        }

                                        If ((One == ADPI))
                                        {
                                            Local0 |= 0x8000
                                        }

                                        If ((0x02 == ADPI))
                                        {
                                            Local0 |= 0x00010000
                                        }

                                        If ((One == QCBX))
                                        {
                                            Local0 |= 0x00020000
                                        }

                                        Local0 |= 0x00040000
                                        If ((One == ESMC))
                                        {
                                            Local0 |= 0x00400000
                                        }

                                        Local0 |= 0x00800000
                                        Release (LFCM)
                                    }
                                }

                                Return (Local0)
                            }

                            Name (VBST, Zero)
                            Name (VBAC, Zero)
                            Name (VBPR, Zero)
                            Name (VBRC, Zero)
                            Name (VBPV, Zero)
                            Name (VBFC, Zero)
                            Name (VBCT, Zero)
                            Method (SMTF, 1, NotSerialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        If ((Arg0 == Zero))
                                        {
                                            If ((B1FV == Zero))
                                            {
                                                Release (LFCM)
                                                Return (0xFFFF)
                                            }

                                            If ((B1AC == Zero))
                                            {
                                                Release (LFCM)
                                                Return (0xFFFF)
                                            }

                                            Local0 = B1FC /* \_SB_.PCI0.LPC0.EC0_.B1FC */
                                            Local0 *= 0x0A
                                            VBFC = Local0
                                            Local1 = B1RC /* \_SB_.PCI0.LPC0.EC0_.B1RC */
                                            Local1 *= 0x0A
                                            VBRC = Local1
                                            If ((VBFC > VBRC))
                                            {
                                                VBPV = B1FV /* \_SB_.PCI0.LPC0.EC0_.B1FV */
                                                VBAC = B1AC /* \_SB_.PCI0.LPC0.EC0_.B1AC */
                                                Local0 -= Local1
                                                Local1 = (VBAC * VBPV)
                                                Local3 = (Local0 * 0x03E8)
                                                Local3 = (Local3 * 0x3C)
                                                VBCT = (Local3 / Local1)
                                                Release (LFCM)
                                                Return (VBCT) /* \_SB_.PCI0.LPC0.EC0_.VPC0.VBCT */
                                            }
                                            Else
                                            {
                                                Release (LFCM)
                                                Return (0xFFFF)
                                            }
                                        }

                                        If ((Arg0 == One))
                                        {
                                            Release (LFCM)
                                            Return (0xFFFF)
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (0xFFFF)
                            }

                            Name (QBST, Zero)
                            Name (QBAC, Zero)
                            Name (QBPR, Zero)
                            Name (QBRC, Zero)
                            Name (QBPV, Zero)
                            Name (QBFC, Zero)
                            Name (QBCT, Zero)
                            Method (SMTE, 1, NotSerialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        If ((Arg0 == Zero))
                                        {
                                            If ((B1FV == Zero))
                                            {
                                                Release (LFCM)
                                                Return (0xFFFF)
                                            }

                                            If ((B1AC == Zero))
                                            {
                                                Release (LFCM)
                                                Return (0xFFFF)
                                            }

                                            Local0 = B1RC /* \_SB_.PCI0.LPC0.EC0_.B1RC */
                                            Local0 *= 0x0A
                                            QBRC = Local0
                                            Local1 = B1FC /* \_SB_.PCI0.LPC0.EC0_.B1FC */
                                            Local1 *= 0x0A
                                            QBFC = Local1
                                            If ((QBFC > QBRC))
                                            {
                                                QBPV = B1FV /* \_SB_.PCI0.LPC0.EC0_.B1FV */
                                                If (((B1AC & 0x8000) == Zero))
                                                {
                                                    QBAC = B1AC /* \_SB_.PCI0.LPC0.EC0_.B1AC */
                                                }
                                                Else
                                                {
                                                    QBAC = (0xFFFF - B1AC)
                                                }

                                                Local1 = (QBAC * QBPV)
                                                Local3 = (Local0 * 0x03E8)
                                                Local3 = (Local3 * 0x3C)
                                                QBCT = (Local3 / Local1)
                                                Release (LFCM)
                                                Return (QBCT) /* \_SB_.PCI0.LPC0.EC0_.VPC0.QBCT */
                                            }
                                            Else
                                            {
                                                Release (LFCM)
                                                Return (0xFFFF)
                                            }
                                        }

                                        If ((Arg0 == One))
                                        {
                                            Release (LFCM)
                                            Return (0xFFFF)
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (0xFFFF)
                            }

                            Method (SBMC, 1, NotSerialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        If ((Arg0 == Zero))
                                        {
                                            CDMB = Zero
                                            EDCC = One
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        If ((Arg0 == One))
                                        {
                                            CDMB = One
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        If ((Arg0 == 0x03))
                                        {
                                            BTSM = One
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        If ((Arg0 == 0x05))
                                        {
                                            BTSM = Zero
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        If ((One == QCBX))
                                        {
                                            If ((Arg0 == 0x07))
                                            {
                                                QCHO = One
                                                BTSM = Zero
                                                Release (LFCM)
                                                Return (Zero)
                                            }
                                        }

                                        If ((One == QCBX))
                                        {
                                            If ((Arg0 == 0x08))
                                            {
                                                QCHO = Zero
                                                Release (LFCM)
                                                Return (Zero)
                                            }
                                        }

                                        If ((Arg0 == 0x09))
                                        {
                                            ESMC = One
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        If ((Arg0 == 0x10))
                                        {
                                            ESMC = Zero
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (Zero)
                            }

                            Method (MHCF, 1, NotSerialized)
                            {
                                P80H = 0x78
                                Local0 = Arg0
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        Local0 &= 0x20
                                        Local0 >>= 0x05
                                        RMBT = Local0
                                        Sleep (0x14)
                                        Release (LFCM)
                                    }
                                }

                                Return (Local0)
                            }

                            Method (MHPF, 1, NotSerialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        Name (BFWB, Buffer (0x25){})
                                        CreateByteField (BFWB, Zero, FB0)
                                        CreateByteField (BFWB, One, FB1)
                                        CreateByteField (BFWB, 0x02, FB2)
                                        CreateByteField (BFWB, 0x03, FB3)
                                        CreateField (BFWB, 0x20, 0x0100, FB4)
                                        CreateByteField (BFWB, 0x24, FB5)
                                        If ((SizeOf (Arg0) <= 0x25))
                                        {
                                            Sleep (One)
                                            If ((SMPR != Zero))
                                            {
                                                FB1 = SMST /* \_SB_.PCI0.LPC0.EC0_.SMST */
                                            }
                                            Else
                                            {
                                                BFWB = Arg0
                                                SMAD = FB2 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB2_ */
                                                SMCM = FB3 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB3_ */
                                                BCNT = FB5 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB5_ */
                                                Local0 = FB0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB0_ */
                                                If (((Local0 & One) == Zero))
                                                {
                                                    SMDA = FB4 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB4_ */
                                                }

                                                SMST = Zero
                                                SMPR = FB0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB0_ */
                                                BTFW = 0x80
                                                Local1 = 0x03E8
                                                While (Local1)
                                                {
                                                    Sleep (One)
                                                    Local1--
                                                    If (((SMST && 0x80) || (SMPR == Zero)))
                                                    {
                                                        Break
                                                    }
                                                }

                                                Local0 = FB0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB0_ */
                                                If (((Local0 & One) != Zero))
                                                {
                                                    FB4 = SMDA /* \_SB_.PCI0.LPC0.EC0_.SMDA */
                                                }

                                                FB1 = SMST /* \_SB_.PCI0.LPC0.EC0_.SMST */
                                                If (((Local1 == Zero) || !(SMST && 0x80)))
                                                {
                                                    SMPR = Zero
                                                    FB1 = 0x92
                                                }
                                            }

                                            Release (LFCM)
                                            Return (BFWB) /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.BFWB */
                                        }

                                        Release (LFCM)
                                    }
                                }
                            }

                            Method (MHIF, 1, NotSerialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        P80H = 0x50
                                        If ((Arg0 == Zero))
                                        {
                                            Name (RETB, Buffer (0x0A){})
                                            Name (BUF1, Buffer (0x08){})
                                            BUF1 = FWBT /* \_SB_.PCI0.LPC0.EC0_.FWBT */
                                            CreateByteField (BUF1, Zero, FW0)
                                            CreateByteField (BUF1, One, FW1)
                                            CreateByteField (BUF1, 0x02, FW2)
                                            CreateByteField (BUF1, 0x03, FW3)
                                            CreateByteField (BUF1, 0x04, FW4)
                                            CreateByteField (BUF1, 0x05, FW5)
                                            CreateByteField (BUF1, 0x06, FW6)
                                            CreateByteField (BUF1, 0x07, FW7)
                                            RETB [Zero] = FUSL /* \_SB_.PCI0.LPC0.EC0_.FUSL */
                                            RETB [One] = FUSH /* \_SB_.PCI0.LPC0.EC0_.FUSH */
                                            RETB [0x02] = FW0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FW0_ */
                                            RETB [0x03] = FW1 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FW1_ */
                                            RETB [0x04] = FW2 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FW2_ */
                                            RETB [0x05] = FW3 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FW3_ */
                                            RETB [0x06] = FW4 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FW4_ */
                                            RETB [0x07] = FW5 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FW5_ */
                                            RETB [0x08] = FW6 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FW6_ */
                                            RETB [0x09] = FW7 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FW7_ */
                                            Release (LFCM)
                                            Return (RETB) /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.RETB */
                                        }

                                        Release (LFCM)
                                    }
                                }
                            }

                            Method (GSBI, 1, NotSerialized)
                            {
                                Name (BIFB, Buffer (0x53)
                                {
                                    /* 0000 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0018 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0028 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0030 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0038 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0040 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0048 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0050 */  0xFF, 0xFF, 0xFF                                 // ...
                                })
                                CreateWordField (BIFB, Zero, DCAP)
                                CreateWordField (BIFB, 0x02, FCAP)
                                CreateWordField (BIFB, 0x04, RCAP)
                                CreateWordField (BIFB, 0x06, ATTE)
                                CreateWordField (BIFB, 0x08, ATTF)
                                CreateWordField (BIFB, 0x0A, BTVT)
                                CreateWordField (BIFB, 0x0C, BTCT)
                                CreateWordField (BIFB, 0x0E, BTMP)
                                CreateWordField (BIFB, 0x10, MDAT)
                                CreateWordField (BIFB, 0x12, FUDT)
                                CreateWordField (BIFB, 0x14, DVLT)
                                CreateField (BIFB, 0xB0, 0x50, DCHE)
                                CreateField (BIFB, 0x0100, 0x40, DNAM)
                                CreateField (BIFB, 0x0140, 0x60, MNAM)
                                CreateField (BIFB, 0x01A0, 0xB8, BRNB)
                                CreateQWordField (BIFB, 0x4B, BFW0)
                                If (((Arg0 == Zero) || (Arg0 == One)))
                                {
                                    If (ECAV)
                                    {
                                        If ((Acquire (LFCM, 0xA000) == Zero))
                                        {
                                            Local0 = B1DC /* \_SB_.PCI0.LPC0.EC0_.B1DC */
                                            Local0 *= 0x0A
                                            DCAP = Local0
                                            Local0 = B1FC /* \_SB_.PCI0.LPC0.EC0_.B1FC */
                                            Local0 *= 0x0A
                                            FCAP = Local0
                                            Local0 = B1RC /* \_SB_.PCI0.LPC0.EC0_.B1RC */
                                            Local0 *= 0x0A
                                            RCAP = Local0
                                            ATTE = SMTE (Zero)
                                            ATTF = SMTF (Zero)
                                            BTVT = B1FV /* \_SB_.PCI0.LPC0.EC0_.B1FV */
                                            BTCT = B1AC /* \_SB_.PCI0.LPC0.EC0_.B1AC */
                                            Local0 = B1AT /* \_SB_.PCI0.LPC0.EC0_.B1AT */
                                            Local0 += 0x0111
                                            Local0 *= 0x0A
                                            BTMP = Local0
                                            MDAT = B1DA /* \_SB_.PCI0.LPC0.EC0_.B1DA */
                                            If ((BFUD != Zero))
                                            {
                                                FUDT = BFUD /* \_SB_.PCI0.LPC0.EC0_.BFUD */
                                            }

                                            DVLT = B1DV /* \_SB_.PCI0.LPC0.EC0_.B1DV */
                                            Name (DCH0, Buffer (0x0A)
                                            {
                                                 0x00                                             // .
                                            })
                                            Name (DCH1, "LION")
                                            Name (DCH2, "LiP")
                                            If ((B1TY == One))
                                            {
                                                DCH0 = DCH1 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.DCH1 */
                                                DCHE = DCH0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.DCH0 */
                                            }
                                            Else
                                            {
                                                DCH0 = DCH2 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.DCH2 */
                                                DCHE = DCH0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.DCH0 */
                                            }

                                            Name (BDNT, Buffer (0x08)
                                            {
                                                 0x00                                             // .
                                            })
                                            BDNT = BDN0 /* \_SB_.PCI0.LPC0.EC0_.BDN0 */
                                            DNAM = BDNT /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.BDNT */
                                            Name (BMNT, Buffer (0x0C)
                                            {
                                                 0x00                                             // .
                                            })
                                            BMNT = BMN0 /* \_SB_.PCI0.LPC0.EC0_.BMN0 */
                                            MNAM = BMNT /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.BMNT */
                                            Name (BRN0, Buffer (0x17)
                                            {
                                                 0x00                                             // .
                                            })
                                            BRN0 = BAR1 /* \_SB_.PCI0.LPC0.EC0_.BAR1 */
                                            BRNB = BRN0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.BRN0 */
                                            BFW0 = FWBT /* \_SB_.PCI0.LPC0.EC0_.FWBT */
                                            Release (LFCM)
                                        }
                                    }

                                    Return (BIFB) /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.BIFB */
                                }

                                If ((Arg0 == 0x02))
                                {
                                    Return (BIFB) /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.BIFB */
                                }

                                Return (Zero)
                            }

                            Method (HODD, 0, NotSerialized)
                            {
                            }

                            Method (SODD, 1, Serialized)
                            {
                            }

                            Method (GBID, 0, Serialized)
                            {
                                Name (GBUF, Package (0x04)
                                {
                                    Buffer (0x02)
                                    {
                                         0x00, 0x00                                       // ..
                                    }, 

                                    Buffer (0x02)
                                    {
                                         0x00, 0x00                                       // ..
                                    }, 

                                    Buffer (0x08)
                                    {
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }, 

                                    Buffer (0x08)
                                    {
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        DerefOf (GBUF [Zero]) [Zero] = B1CT /* \_SB_.PCI0.LPC0.EC0_.B1CT */
                                        DerefOf (GBUF [One]) [Zero] = Zero
                                        Name (BUF1, Buffer (0x08){})
                                        BUF1 = FWBT /* \_SB_.PCI0.LPC0.EC0_.FWBT */
                                        CreateByteField (BUF1, Zero, FW0)
                                        CreateByteField (BUF1, One, FW1)
                                        CreateByteField (BUF1, 0x02, FW2)
                                        CreateByteField (BUF1, 0x03, FW3)
                                        CreateByteField (BUF1, 0x04, FW4)
                                        CreateByteField (BUF1, 0x05, FW5)
                                        CreateByteField (BUF1, 0x06, FW6)
                                        CreateByteField (BUF1, 0x07, FW7)
                                        DerefOf (GBUF [0x02]) [Zero] = FW0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FW0_ */
                                        DerefOf (GBUF [0x02]) [One] = FW1 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FW1_ */
                                        DerefOf (GBUF [0x02]) [0x02] = FW2 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FW2_ */
                                        DerefOf (GBUF [0x02]) [0x03] = FW3 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FW3_ */
                                        DerefOf (GBUF [0x02]) [0x04] = FW4 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FW4_ */
                                        DerefOf (GBUF [0x02]) [0x05] = FW5 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FW5_ */
                                        DerefOf (GBUF [0x02]) [0x06] = FW6 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FW6_ */
                                        DerefOf (GBUF [0x02]) [0x07] = FW7 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FW7_ */
                                        DerefOf (GBUF [0x03]) [Zero] = Zero
                                        Release (LFCM)
                                    }
                                }

                                Return (GBUF) /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.GBUF */
                            }

                            Name (APDT, Zero)
                            Method (APPC, 1, Serialized)
                            {
                                APDT = Arg0
                                Return (Zero)
                            }

                            Method (DBSL, 0, NotSerialized)
                            {
                                Return (Package (0x10)
                                {
                                    0xC9, 
                                    0xAE, 
                                    0x95, 
                                    0x7E, 
                                    0x69, 
                                    0x56, 
                                    0x45, 
                                    0x36, 
                                    0x29, 
                                    0x1E, 
                                    0x15, 
                                    0x0E, 
                                    0x09, 
                                    0x06, 
                                    0x05, 
                                    Zero
                                })
                            }

                            Method (SBSL, 1, Serialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        Local0 = Arg0
                                        If ((Local0 == One))
                                        {
                                            LCBV = 0x0E
                                        }

                                        If ((Local0 == 0x02))
                                        {
                                            LCBV = 0x07
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (Zero)
                            }

                            Method (KBLC, 1, NotSerialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        If ((Arg0 == One))
                                        {
                                            Local0 = KBGC /* \_SB_.PCI0.LPC0.EC0_.KBGC */
                                            Release (LFCM)
                                            Return ((Local0 | One))
                                        }
                                        ElseIf (((Arg0 & 0x0F) == 0x02))
                                        {
                                            Local0 = KBGC /* \_SB_.PCI0.LPC0.EC0_.KBGC */
                                            Local0 &= 0xFFFFFFFE
                                            Local1 = (Arg0 & 0xFFF0)
                                            Local1 >>= 0x03
                                            If ((Local0 != Local1))
                                            {
                                                Release (LFCM)
                                                Return (Zero)
                                            }
                                            Else
                                            {
                                                Local3 = KBGS /* \_SB_.PCI0.LPC0.EC0_.KBGS */
                                                Release (LFCM)
                                                Return ((Local3 | One))
                                            }
                                        }
                                        ElseIf (((Arg0 & 0x0F) == 0x03))
                                        {
                                            Local0 = KBGC /* \_SB_.PCI0.LPC0.EC0_.KBGC */
                                            Local0 &= 0xFFFFFFFE
                                            Local1 = (Arg0 & 0xFFF0)
                                            Local1 >>= 0x03
                                            If ((Local0 != Local1))
                                            {
                                                Release (LFCM)
                                                Return (Zero)
                                            }
                                            Else
                                            {
                                                Local3 = (Arg0 & 0xFFFFFFFF)
                                                KBSS = Local3
                                                Sleep (0x012C)
                                                Local3 = KBGS /* \_SB_.PCI0.LPC0.EC0_.KBGS */
                                                Release (LFCM)
                                                Return ((Local3 | One))
                                            }
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (Zero)
                            }

                            Method (BSIF, 1, NotSerialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        If (((Arg0 & 0x0F) == One))
                                        {
                                            Local0 = Arg0
                                            Local0 >>= 0x04
                                            Local1 = Zero
                                            If ((Local0 == One))
                                            {
                                                Local1 |= 0x0B80
                                                Return ((Local1 | One))
                                            }
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (Zero)
                            }

                            Method (BTMC, 1, NotSerialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        If (((Arg0 & 0x0F) == One))
                                        {
                                            Local0 = Arg0
                                            Local0 >>= 0x04
                                            Local1 = Zero
                                            If ((Local0 == One))
                                            {
                                                If ((TPMD == Zero))
                                                {
                                                    Local1 = Zero
                                                }
                                                ElseIf ((TPMD == One))
                                                {
                                                    If ((PDMD == One))
                                                    {
                                                        Local1 = One
                                                    }
                                                    ElseIf ((PDMD == Zero))
                                                    {
                                                        Local1 = 0x02
                                                    }
                                                }

                                                Local1 <<= 0x04
                                                Release (LFCM)
                                                Return ((Local1 | One))
                                            }
                                            ElseIf ((Local0 == 0x02))
                                            {
                                                Local1 = BTLF /* \_SB_.PCI0.LPC0.EC0_.BTLF */
                                                Local1 <<= 0x04
                                                Release (LFCM)
                                                Return ((Local1 | One))
                                            }
                                            ElseIf ((Local0 == 0x03))
                                            {
                                                Local1 = BTTP /* \_SB_.PCI0.LPC0.EC0_.BTTP */
                                                Local1 <<= 0x04
                                                Release (LFCM)
                                                Return ((Local1 | One))
                                            }
                                            ElseIf ((Local0 == 0x04))
                                            {
                                                Local1 = BTLF /* \_SB_.PCI0.LPC0.EC0_.BTLF */
                                                Local1 <<= 0x04
                                                Release (LFCM)
                                                Return ((Local1 | One))
                                            }
                                            Else
                                            {
                                                Release (LFCM)
                                                Return (Local1)
                                            }
                                        }
                                        ElseIf (((Arg0 & 0x0F) == 0x02))
                                        {
                                            Local0 = One
                                            Local0 <<= One
                                            Release (LFCM)
                                            Return (Local0)
                                        }
                                        ElseIf (((Arg0 & 0x0F) == 0x03))
                                        {
                                            Local0 = Arg0
                                            Local0 >>= 0x04
                                            Local1 = Zero
                                            Local2 = Zero
                                            If ((Local0 == One))
                                            {
                                                Local1 = One
                                                If ((BTSB == 0x04))
                                                {
                                                    Local2 = 0x03
                                                }

                                                Local1 <<= One
                                                Local2 <<= 0x02
                                                Local1 |= Local2
                                                Release (LFCM)
                                                Return ((Local1 | One))
                                            }
                                            ElseIf ((Local0 == 0x02))
                                            {
                                                If ((BTSB == 0x04))
                                                {
                                                    Local1 = One
                                                }
                                                Else
                                                {
                                                    Local1 = Zero
                                                }

                                                Local1 <<= One
                                                Release (LFCM)
                                                Return ((Local1 | One))
                                            }
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (Zero)
                            }

                            Method (BNMC, 1, Serialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        If (((Arg0 & 0x0F) == One))
                                        {
                                            Local1 = Zero
                                            If ((ENCM == One))
                                            {
                                                Local1 = One
                                            }
                                            Else
                                            {
                                                Local1 = Zero
                                            }

                                            Local1 <<= 0x04
                                            Release (LFCM)
                                            Return ((Local1 | 0x03))
                                        }
                                        ElseIf (((Arg0 & 0x0F) == 0x02))
                                        {
                                            Local0 = Arg0
                                            Local2 = Zero
                                            Local0 >>= 0x1F
                                            If ((Local0 == One))
                                            {
                                                ENCM = One
                                                Local2 = One
                                            }
                                            Else
                                            {
                                                ENCM = Zero
                                                Local2 = Zero
                                            }

                                            Local2 <<= 0x04
                                            Release (LFCM)
                                            Return ((Local2 | 0x03))
                                        }
                                        ElseIf (((Arg0 & 0x0F) == 0x03))
                                        {
                                            Local3 = Zero
                                            If ((BSNC == One))
                                            {
                                                Local3 = One
                                            }
                                            Else
                                            {
                                                Local3 = Zero
                                            }

                                            Local3 <<= 0x04
                                            Release (LFCM)
                                            Return ((Local3 | 0x03))
                                        }
                                    }
                                }

                                Return (Zero)
                            }

                            Method (STHT, 1, Serialized)
                            {
                                Return (Zero)
                            }
                        }
                    }

                    Scope (\)
                    {
                        OperationRegion (LFCN, SystemMemory, 0xB2E1F298, 0x037D)
                        Field (LFCN, AnyAcc, Lock, Preserve)
                        {
                            PS2V,   8, 
                            KBID,   8, 
                            MCSZ,   8, 
                            OKRB,   8, 
                            EDID,   1024, 
                            TPTY,   8, 
                            TPTP,   16, 
                            TPNY,   8, 
                            TPNP,   16, 
                            UMAB,   8, 
                            ENQT,   8, 
                            DYTP,   32, 
                            FCAP,   16, 
                            VSTD,   1, 
                                ,   1, 
                            VFBC,   1, 
                            VMYH,   1, 
                            VSTP,   1, 
                            VAPM,   1, 
                            VAQM,   1, 
                            VIEP,   1, 
                            VIBS,   1, 
                            VCQL,   1, 
                            VAAA,   1, 
                            VMMC,   1, 
                                ,   1, 
                                ,   1, 
                                ,   1, 
                            Offset (0x94), 
                            MYHC,   8, 
                            MMCC,   8, 
                            SMYH,   8, 
                            SMMC,   8, 
                            CICF,   4, 
                            CICM,   4, 
                            MCSK,   8, 
                            CPTY,   8, 
                            GTYP,   8, 
                            PANT,   8, 
                            PMID,   16, 
                            PPID,   16, 
                            CMSP,   16, 
                            DGID,   32, 
                            SGID,   32, 
                            Offset (0xB7), 
                            GNCS,   8, 
                            GYCK,   1736, 
                            BDDN,   3072, 
                            PBID,   8, 
                            CAMS,   8, 
                            RGBD,   8, 
                            GSYN,   8, 
                            RDOC,   8, 
                            DSMF,   8, 
                            LPUF,   8, 
                            NVHC,   8, 
                            CNFG,   8, 
                            YKBT,   8, 
                            DGPT,   296, 
                            SCOC,   8, 
                            COCC,   8, 
                            GOCC,   8, 
                            PBOS,   32, 
                            MCBC,   8, 
                            CBCS,   8, 
                            CCOM,   16, 
                            PRFT,   8, 
                            HTCS,   8, 
                            HTCD,   8, 
                            ER8S,   8, 
                            RSVD,   368
                        }

                        OperationRegion (SMIO, SystemIO, 0xB0, 0x02)
                        Field (SMIO, ByteAcc, NoLock, Preserve)
                        {
                            SMBA,   8, 
                            SMBB,   8
                        }
                    }

                    Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                    {
                        If ((Arg0 == 0x03))
                        {
                            ECAV = Arg1
                        }

                        EOST ()
                        If (((Arg0 == 0x03) && (Arg1 == One)))
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                LIDS = LSTE /* \_SB_.PCI0.LPC0.EC0_.LSTE */
                                Release (LFCM)
                            }
                        }

                        FNQT ()
                        If ((CTMD == One))
                        {
                            If ((CTE0 == One))
                            {
                                EMQT ()
                            }
                            Else
                            {
                                CMQT ()
                            }
                        }

                        CTCL ()
                        Notify (NPCF, 0xC0) // Hardware-Specific
                    }

                    Method (ECWK, 1, Serialized)
                    {
                        ^^^^ADP0.ACDC = 0xFF
                        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
                        {
                            LIDS = LSTE /* \_SB_.PCI0.LPC0.EC0_.LSTE */
                        }

                        EOST ()
                        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
                        {
                            FNQT ()
                            If ((CTMD == One))
                            {
                                If ((CTE0 == One))
                                {
                                    EMQT ()
                                }
                                Else
                                {
                                    CMQT ()
                                }
                            }

                            CTCL ()
                            Notify (NPCF, 0xC0) // Hardware-Specific
                        }
                    }

                    Method (CMFC, 0, Serialized)
                    {
                        Return (EDID) /* \EDID */
                    }

                    Method (LFCI, 2, Serialized)
                    {
                        Switch (ToInteger (Arg0))
                        {
                            Case (One)
                            {
                                Return (OKRB) /* \OKRB */
                            }
                            Case (0x02)
                            {
                                Local0 = RECM (0x78)
                                P80H = Local0
                                Return (Local0)
                            }

                        }
                    }

                    Scope (\)
                    {
                        Name (LTGP, Zero)
                        Name (FMOD, Zero)
                        Name (DBFS, Zero)
                        Name (DTGP, Zero)
                        Name (LCK0, Zero)
                        Name (EATL, Zero)
                        Name (EPSW, One)
                    }

                    OperationRegion (CMOT, SystemMemory, 0xFED80702, 0x04)
                    Field (CMOT, ByteAcc, NoLock, Preserve)
                    {
                        MINR,   8, 
                        MINA,   8, 
                        HONR,   8, 
                        HONA,   8
                    }

                    Method (SNTM, 0, NotSerialized)
                    {
                        FromBCD (HONR, STMH) /* \_SB_.PCI0.LPC0.EC0_.STMH */
                        FromBCD (MINR, STMM) /* \_SB_.PCI0.LPC0.EC0_.STMM */
                    }

                    Method (_Q77, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        SNTM ()
                    }

                    OperationRegion (R62A, SystemMemory, 0xFE0B062A, One)
                    Field (R62A, ByteAcc, Lock, Preserve)
                    {
                            ,   2, 
                        TDC1,   1, 
                        TDC2,   1, 
                        Offset (0x01)
                    }

                    Method (_Q7A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (((TDC1 == Zero) && (TDC2 == Zero)))
                        {
                            FNQT ()
                            If ((CTMD == One))
                            {
                                If ((CTE0 == One))
                                {
                                    EMQT ()
                                }
                                Else
                                {
                                    CMQT ()
                                }
                            }
                        }

                        CTCL ()
                    }

                    Method (_Q11, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (IGDS)
                        {
                            P80H = 0x11
                            Notify (^^^GP17.VGA.LCD, 0x87) // Device-Specific
                        }
                        Else
                        {
                            P80H = 0x11
                            Notify (^^^GPP0.PEGP.EDP0, 0x87) // Device-Specific
                        }

                        Notify (VPC0, 0x80) // Status Change
                    }

                    Method (_Q12, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (IGDS)
                        {
                            P80H = 0x12
                            Notify (^^^GP17.VGA.LCD, 0x86) // Device-Specific
                        }
                        Else
                        {
                            P80H = 0x12
                            Notify (^^^GPP0.PEGP.EDP0, 0x86) // Device-Specific
                        }

                        Notify (VPC0, 0x80) // Status Change
                    }

                    OperationRegion (F5D0, SystemMemory, 0xFE0B05D0, 0x40)
                    Field (F5D0, AnyAcc, Lock, Preserve)
                    {
                            ,   3, 
                            ,   1, 
                        EFPS,   1, 
                        CLRY,   1, 
                            ,   1, 
                        BCAI,   1, 
                        F5D1,   8, 
                        F5D2,   8, 
                        F5D3,   8, 
                        F5D4,   8, 
                        F5D5,   8, 
                        F5D6,   8, 
                        F5D7,   8, 
                        F5D8,   8, 
                        F5D9,   8, 
                        F5DA,   8, 
                        F5DB,   8, 
                        Offset (0x10), 
                        F5E0,   8, 
                        CCP1,   8, 
                        F5E2,   8, 
                        CCP2,   8, 
                        F5E4,   8, 
                        GPL1,   8, 
                        GPL2,   8, 
                        NTCC,   8, 
                        GGAP,   8, 
                        G1PL,   8, 
                        GVBT,   8, 
                        Offset (0x1C)
                    }

                    Method (_QA0, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xC0
                        Sleep (0x05)
                        If ((Acquire (LFCM, 0xA000) == Zero))
                        {
                            BCAI = One
                            Local0 = F5D1 /* \_SB_.PCI0.LPC0.EC0_.F5D1 */
                            Local1 = F5D3 /* \_SB_.PCI0.LPC0.EC0_.F5D3 */
                            Release (LFCM)
                            If ((Local0 != Zero))
                            {
                                Notify (NPCF, 0xC0) // Hardware-Specific
                            }

                            If ((Local1 >= 0x0A))
                            {
                                Local1 *= 0x03E8
                                SSZ3 = 0x07
                                SMN3 = 0x05
                                SMD3 = Local1
                                ALIB (0x0C, XX13)
                            }
                        }
                    }

                    Method (_QA1, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xC1
                        Sleep (0x05)
                        If ((Acquire (LFCM, 0xA000) == Zero))
                        {
                            BCAI = Zero
                            Release (LFCM)
                        }

                        FNQT ()
                        CTCL ()
                        Notify (NPCF, 0xC0) // Hardware-Specific
                    }

                    Method (_QA2, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xC2
                        Sleep (0x05)
                    }

                    Method (_QA3, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xC3
                        Sleep (0x05)
                        If ((Acquire (LFCM, 0xA000) == Zero))
                        {
                            F5D8 = 0x55
                            F5DA = 0x85
                            Sleep (0x05)
                            CLRY = One
                            Release (LFCM)
                        }
                    }

                    Method (_Q81, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If ((MLCC == One))
                        {
                            SSZ3 = 0x07
                            SMN3 = 0x05
                            SMD3 = 0xEA60
                            ALIB (0x0C, XX13)
                            Sleep (0x14)
                            SMN3 = 0x07
                            ALIB (0x0C, XX13)
                        }
                        ElseIf ((MLCC == 0x02))
                        {
                            FNQT ()
                            If ((CTMD == One))
                            {
                                If ((CTE0 == One))
                                {
                                    EMQT ()
                                }
                                Else
                                {
                                    CMQT ()
                                }
                            }

                            CTCL ()
                        }
                    }

                    Method (_Q13, 0, Serialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x13
                        If ((Acquire (LFCM, 0xA000) == Zero))
                        {
                            PABD = Zero
                            CAC1 = Zero
                            EMFG = Zero
                            CTE0 = Zero
                            Release (LFCM)
                        }

                        EPSW = One
                        Notify (GZFD, 0xE3) // Hardware-Specific
                        Sleep (0x01F4)
                        If ((Acquire (LFCM, 0xA000) == Zero))
                        {
                            BCAI = Zero
                            Release (LFCM)
                        }

                        If (ECAV)
                        {
                            FNQT ()
                            CTCL ()
                        }

                        INSM = Zero
                        Notify (GZFD, 0xE7) // Hardware-Specific
                        Sleep (0x05)
                        Notify (NPCF, 0xC0) // Hardware-Specific
                        Notify (^^^GPP0.PEGP, 0xC0) // Hardware-Specific
                    }

                    Method (_Q15, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x15
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                LIDS = LSTE /* \_SB_.PCI0.LPC0.EC0_.LSTE */
                                Release (LFCM)
                            }
                        }

                        Notify (LID0, 0x80) // Status Change
                    }

                    Method (_Q16, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x16
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                LIDS = LSTE /* \_SB_.PCI0.LPC0.EC0_.LSTE */
                                Release (LFCM)
                            }
                        }

                        Notify (LID0, 0x80) // Status Change
                    }

                    Scope (\)
                    {
                        Name (GPSF, Zero)
                    }

                    Name (DGST, 0xD1)
                    Method (_Q1E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x1E
                        If (((GATY == 0x02) || (MSMF == One)))
                        {
                            P80H = 0x91
                            If ((DGDF <= 0x04))
                            {
                                P80H = 0x92
                                Local0 = 0xD1
                                Local0 += DGDF /* \_SB_.PCI0.LPC0.EC0_.DGDF */
                                If ((Local0 == 0xD1))
                                {
                                    P80H = 0xD1
                                    If ((DGST != Local0))
                                    {
                                        DGST = Local0
                                        Notify (^^^GPP0.PEGP, Local0)
                                    }
                                }
                                Else
                                {
                                    P80H = 0xD2
                                    If ((DGST != Local0))
                                    {
                                        DGST = Local0
                                        Notify (^^^GPP0.PEGP, Local0)
                                    }
                                }
                            }
                        }
                    }

                    Method (_Q25, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x25
                        Notify (ADP0, 0x80) // Status Change
                        Notify (BAT0, 0x80) // Status Change
                        Notify (BAT0, 0x81) // Information Change
                    }

                    Name (XX13, Buffer (0x07){})
                    CreateWordField (XX13, Zero, SSZ3)
                    CreateByteField (XX13, 0x02, SMN3)
                    CreateDWordField (XX13, 0x03, SMD3)
                    Method (_Q30, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x30
                        Sleep (0x05)
                        DBFS = One
                        If ((CTMD == One))
                        {
                            If ((CTE0 == One))
                            {
                                EMQT ()
                            }
                            Else
                            {
                                Local0 = CPP4 /* \_SB_.PCI0.LPC0.EC0_.CPP4 */
                                Local0 *= 0x03E8
                                SSZ3 = 0x07
                                SMN3 = 0x05
                                SMD3 = Local0
                                ALIB (0x0C, XX13)
                            }
                        }
                        ElseIf ((INSM == Zero))
                        {
                            FNQT ()
                            CTCL ()
                        }
                        Else
                        {
                            Return (Zero)
                        }

                        Notify (NPCF, 0xC0) // Hardware-Specific
                    }

                    Method (_Q31, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x31
                        Sleep (0x05)
                        DBFS = Zero
                        If ((CTMD == One))
                        {
                            If ((CTE0 == One))
                            {
                                EMQT ()
                            }
                            Else
                            {
                                Local0 = CPP2 /* \_SB_.PCI0.LPC0.EC0_.CPP2 */
                                Local0 *= 0x03E8
                                SSZ3 = 0x07
                                SMN3 = 0x05
                                SMD3 = Local0
                                ALIB (0x0C, XX13)
                            }
                        }
                        ElseIf ((INSM == Zero))
                        {
                            FNQT ()
                            CTCL ()
                        }
                        Else
                        {
                            Return (Zero)
                        }

                        Notify (NPCF, 0xC0) // Hardware-Specific
                    }

                    Method (_Q17, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        EPSW = Zero
                        FNQT ()
                        If ((CTE0 == One))
                        {
                            EMQT ()
                        }

                        CTCL ()
                        Notify (NPCF, 0xC0) // Hardware-Specific
                    }

                    Method (_Q18, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        EPSW = One
                        EMQT ()
                        CTCL ()
                        Notify (NPCF, 0xC0) // Hardware-Specific
                    }

                    Method (_Q78, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Sleep (0x05)
                        If ((CNFG == One))
                        {
                            Notify (GZFD, 0xE9) // Hardware-Specific
                        }
                    }

                    Method (_Q37, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Sleep (0x012C)
                        If ((ACTY () == One))
                        {
                            LCK0 = Zero
                        }

                        Notify (GZFD, 0xE5) // Hardware-Specific
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                If ((((SPMO == Zero) && (CAC1 == One)) && (ACTY () == One)))
                                {
                                    SSFM = One
                                    SPMO = One
                                    CTMD = One
                                    If ((CTE0 == One))
                                    {
                                        EMFG = Zero
                                    }

                                    CAC1 = Zero
                                    Sleep (0x05)
                                }

                                If ((((SPMO == 0x02) && (CAC1 == One)) && (ACTY () == One)))
                                {
                                    SSFM = One
                                    SPMO = 0x02
                                    CTMD = One
                                    If ((CTE0 == One))
                                    {
                                        EMFG = Zero
                                    }

                                    CAC1 = Zero
                                    Sleep (0x05)
                                }

                                If ((((SPMO == Zero) && (PABD == One)) && (ACTY () == One)))
                                {
                                    SSFM = One
                                    SPMO = One
                                    PABD = Zero
                                    Sleep (0x05)
                                }

                                Release (LFCM)
                            }

                            FNQT ()
                            CTCL ()
                        }

                        PWRS = One
                        Notify (ADP0, 0x80) // Status Change
                        Notify (BAT0, 0x80) // Status Change
                        Notify (NPCF, 0xC0) // Hardware-Specific
                        Notify (GZFD, 0xE7) // Hardware-Specific
                        If (((DSMF == 0x03) || (DSMF == 0x04)))
                        {
                            ^^^^GZFD.HTPL ()
                        }
                    }

                    Method (_Q38, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Sleep (0x012C)
                        Notify (GZFD, 0xE5) // Hardware-Specific
                        EPSW = One
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                BCAI = Zero
                                If (((CTMD == One) && ((ACTY () == 0x02) || (ACTY () == 0x03))))
                                {
                                    SSFM = One
                                    If ((SPMO == 0x02))
                                    {
                                        SPMO = 0x02
                                    }
                                    Else
                                    {
                                        SPMO = Zero
                                    }

                                    CTMD = Zero
                                    If ((CTE0 == One))
                                    {
                                        EMFG = One
                                    }

                                    CAC1 = One
                                    Sleep (0x05)
                                }

                                If (((SPMO == One) && ((ACTY () == 0x02) || (ACTY () == 0x03))))
                                {
                                    SSFM = One
                                    SPMO = Zero
                                    PABD = One
                                    Sleep (0x05)
                                }

                                Release (LFCM)
                            }

                            FNQT ()
                            CTCL ()
                        }

                        PWRS = Zero
                        Notify (ADP0, 0x80) // Status Change
                        Notify (BAT0, 0x80) // Status Change
                        Notify (NPCF, 0xC0) // Hardware-Specific
                        Notify (GZFD, 0xE7) // Hardware-Specific
                        If (((DSMF == 0x03) || (DSMF == 0x04)))
                        {
                            ^^^^GZFD.HTPL ()
                        }
                    }

                    Method (_Q32, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x32
                        Notify (PWRB, 0x80) // Status Change
                    }

                    Method (_Q3E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x3E
                    }

                    Method (_Q3F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x3F
                    }

                    Method (_Q44, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x44
                        Notify (VPC0, 0x80) // Status Change
                        WEID = 0xF4
                    }

                    Method (_Q70, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x70
                        Sleep (0x05)
                    }

                    Method (_Q74, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x74
                        FNQT ()
                        CTCL ()
                        Notify (NPCF, 0xC0) // Hardware-Specific
                    }

                    Method (_Q86, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x86
                        Sleep (0x05)
                    }

                    Method (_Q87, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x87
                        Sleep (0x05)
                    }

                    Method (_Q62, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x62
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                GUST = 0x03
                                Notify (GZFD, 0xD0) // Hardware-Specific
                                Release (LFCM)
                            }
                        }
                    }

                    Method (_Q63, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x63
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                GUST = One
                                Notify (GZFD, 0xD0) // Hardware-Specific
                                Release (LFCM)
                            }
                        }
                    }

                    Method (_Q66, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x66
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                GUST = 0x02
                                Notify (GZFD, 0xD0) // Hardware-Specific
                                Release (LFCM)
                            }
                        }
                    }

                    Method (_Q67, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x67
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                GUST = Zero
                                Notify (GZFD, 0xD0) // Hardware-Specific
                                Release (LFCM)
                            }
                        }
                    }

                    Method (_Q68, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x68
                        Notify (GZFD, 0xD1) // Hardware-Specific
                    }

                    Method (_Q69, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x69
                        Notify (GZFD, 0xE0) // Hardware-Specific
                    }

                    Method (_Q6A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x6A
                        Notify (GZFD, 0xE1) // Hardware-Specific
                    }

                    Method (_Q6B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x6B
                        Notify (GZFD, 0xE2) // Hardware-Specific
                    }

                    Method (_QDD, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xDD
                    }

                    Method (_QD1, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xD1
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                GUST = Zero
                                Notify (^^^GPP0.PEGP, 0xD1) // Hardware-Specific
                                Release (LFCM)
                            }
                        }

                        Sleep (0x0A)
                    }

                    Method (_QD2, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xD2
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                GUST = Zero
                                Notify (^^^GPP0.PEGP, 0xD2) // Hardware-Specific
                                Release (LFCM)
                            }
                        }

                        Sleep (0x0A)
                    }

                    Method (_QD3, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xD3
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                GUST = Zero
                                Notify (^^^GPP0.PEGP, 0xD3) // Hardware-Specific
                                Release (LFCM)
                            }
                        }

                        Sleep (0x0A)
                    }

                    Method (_QD4, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xD4
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                GUST = Zero
                                Notify (^^^GPP0.PEGP, 0xD4) // Hardware-Specific
                                Release (LFCM)
                            }
                        }

                        Sleep (0x0A)
                    }

                    Method (_QD5, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xD5
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                GUST = Zero
                                Notify (^^^GPP0.PEGP, 0xD5) // Hardware-Specific
                                Release (LFCM)
                            }
                        }

                        Sleep (0x0A)
                    }

                    Method (_Q6C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        SMBA = 0xCE
                    }

                    Scope (\)
                    {
                        Name (LSKD, Zero)
                    }

                    Method (_QDE, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xDE
                        Notify (GZFD, 0xE6) // Hardware-Specific
                        Notify (GZFD, 0xE8) // Hardware-Specific
                    }

                    Method (_QDF, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xDF
                        If ((LSKV != Zero))
                        {
                            If ((LSKV < 0x31))
                            {
                                LSKD = LSKV /* \_SB_.PCI0.LPC0.EC0_.LSKV */
                            }

                            If ((LSKD == 0x04))
                            {
                                If ((HKDB == Zero)){}
                                Else
                                {
                                }
                            }

                            LSKV = Zero
                        }

                        Notify (WMIU, 0xD0) // Hardware-Specific
                        If (((LSKD >= 0x13) && (LSKD <= 0x19)))
                        {
                            Notify (GZFD, 0xE8) // Hardware-Specific
                        }
                        ElseIf ((LSKD == 0x25))
                        {
                            Notify (GZFD, 0xE8) // Hardware-Specific
                        }
                    }
                }

                Scope (\_SB)
                {
                    Device (ADP0)
                    {
                        Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
                        Name (XX00, Buffer (0x03){})
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Name (ACDC, 0xFF)
                        Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
                        {
                            If (^^PCI0.LPC0.EC0.ECAV)
                            {
                                If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                {
                                    Local0 = One
                                    Local0 = ^^PCI0.LPC0.EC0.ADPT /* \_SB_.PCI0.LPC0.EC0_.ADPT */
                                    CreateWordField (XX00, Zero, SSZE)
                                    CreateByteField (XX00, 0x02, ACST)
                                    SSZE = 0x03
                                    If ((Local0 != ACDC))
                                    {
                                        If (Local0)
                                        {
                                            P80H = 0xECAC
                                            If (CondRefOf (AFN4))
                                            {
                                                AFN4 (One)
                                            }

                                            ACST = Zero
                                        }
                                        Else
                                        {
                                            P80H = 0xECDC
                                            If (CondRefOf (AFN4))
                                            {
                                                AFN4 (0x02)
                                            }

                                            ACST = One
                                        }

                                        ALIB (One, XX00)
                                        ACDC = Local0
                                    }

                                    Release (^^PCI0.LPC0.EC0.LFCM)
                                    Return (Local0)
                                }
                            }
                        }

                        Method (_PCL, 0, NotSerialized)  // _PCL: Power Consumer List
                        {
                            Return (Package (0x01)
                            {
                                _SB
                            })
                        }
                    }

                    Device (LID0)
                    {
                        Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
                        Name (_DEP, Package (0x01)  // _DEP: Dependencies
                        {
                            ^PCI0.LPC0.EC0
                        })
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_LID, 0, NotSerialized)  // _LID: Lid Status
                        {
                            Return (LIDS) /* \LIDS */
                        }
                    }

                    Device (PWRB)
                    {
                        Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }
                    }

                    Device (WMI4)
                    {
                        Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
                        Name (_UID, 0x04)  // _UID: Unique ID
                        Mutex (MWMI, 0x00)
                        Name (_WDG, Buffer (0x28)
                        {
                            /* 0000 */  0x76, 0x37, 0xA0, 0xC3, 0xAC, 0x51, 0xAA, 0x49,  // v7...Q.I
                            /* 0008 */  0xAD, 0x0F, 0xF2, 0xF7, 0xD6, 0x2C, 0x3F, 0x3C,  // .....,?<
                            /* 0010 */  0x41, 0x44, 0x03, 0x05, 0x21, 0x12, 0x90, 0x05,  // AD..!...
                            /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                            /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x44, 0x01, 0x00   // ..).BD..
                        })
                        Name (ITEM, Package (0x03)
                        {
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                "BAT0 BatMaker"
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                One, 
                                "BAT0 HwId "
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0x02, 
                                "BAT0 MfgDate "
                            }
                        })
                        Method (WQAD, 1, NotSerialized)
                        {
                            If (^^PCI0.LPC0.EC0.ECAV)
                            {
                                If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                {
                                    Local0 = PSAG (Arg0)
                                    Local1 = DerefOf (ITEM [Local0])
                                    Local2 = DerefOf (Local1 [Zero])
                                    Local3 = DerefOf (Local1 [One])
                                    Local4 = DerefOf (Local1 [0x02])
                                    Local5 = BATD (Local2, Local3)
                                    Concatenate (Local4, ",", Local6)
                                    Concatenate (Local6, Local5, Local7)
                                    Release (^^PCI0.LPC0.EC0.LFCM)
                                }
                            }

                            Return (Local7)
                        }

                        Method (PSAG, 1, NotSerialized)
                        {
                            Return (Arg0)
                        }

                        Method (BATD, 2, NotSerialized)
                        {
                            Name (STRB, Buffer (0x0A)
                            {
                                 0x00                                             // .
                            })
                            Name (BUFR, Buffer (0x08){})
                            BUFR = ^^PCI0.LPC0.EC0.FWBT /* \_SB_.PCI0.LPC0.EC0_.FWBT */
                            CreateWordField (BUFR, Zero, MID0)
                            CreateWordField (BUFR, 0x02, HID0)
                            CreateWordField (BUFR, 0x04, FIR0)
                            CreateWordField (BUFR, 0x06, DAT0)
                            If ((Arg0 == Zero))
                            {
                                If ((Arg1 == Zero))
                                {
                                    STRB = ToHexString (MID0)
                                }

                                If ((Arg1 == One))
                                {
                                    STRB = ToHexString (HID0)
                                }

                                If ((Arg1 == 0x02))
                                {
                                    Local0 = ^^PCI0.LPC0.EC0.B1DA /* \_SB_.PCI0.LPC0.EC0_.B1DA */
                                    Name (DATB, Buffer (0x09)
                                    {
                                        "00000000"
                                    })
                                    Local3 = 0x07
                                    Local1 = (Local0 & 0x1F)
                                    While (Local1)
                                    {
                                        Divide (Local1, 0x0A, Local2, Local1)
                                        DATB [Local3] = (Local2 + 0x30)
                                        Local3--
                                    }

                                    Local3 = 0x05
                                    Local1 = ((Local0 & 0x01E0) >> 0x05)
                                    While (Local1)
                                    {
                                        Divide (Local1, 0x0A, Local2, Local1)
                                        DATB [Local3] = (Local2 + 0x30)
                                        Local3--
                                    }

                                    Local3 = 0x03
                                    Local1 = (((Local0 & 0xFE00) >> 0x09) + 0x07BC)
                                    While (Local1)
                                    {
                                        Divide (Local1, 0x0A, Local2, Local1)
                                        DATB [Local3] = (Local2 + 0x30)
                                        Local3--
                                    }

                                    STRB = DATB /* \_SB_.WMI4.BATD.DATB */
                                }
                            }

                            Return (ToString (STRB, Ones))
                        }

                        Name (WQBD, Buffer (0x0275)
                        {
                            /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                            /* 0008 */  0x65, 0x02, 0x00, 0x00, 0xF8, 0x05, 0x00, 0x00,  // e.......
                            /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                            /* 0018 */  0x18, 0xD1, 0x82, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                            /* 0020 */  0x10, 0x05, 0x10, 0x8A, 0x0D, 0x21, 0x02, 0x0B,  // .....!..
                            /* 0028 */  0x83, 0x50, 0x50, 0x18, 0x14, 0xA0, 0x45, 0x41,  // .PP...EA
                            /* 0030 */  0xC8, 0x05, 0x14, 0x95, 0x02, 0x21, 0xC3, 0x02,  // .....!..
                            /* 0038 */  0x14, 0x0B, 0x70, 0x2E, 0x40, 0xBA, 0x00, 0xE5,  // ..p.@...
                            /* 0040 */  0x28, 0x72, 0x0C, 0x22, 0x02, 0xF7, 0xEF, 0x0F,  // (r."....
                            /* 0048 */  0x31, 0xD0, 0x18, 0xA8, 0x50, 0x08, 0x89, 0x00,  // 1...P...
                            /* 0050 */  0xA6, 0x42, 0xE0, 0x08, 0x41, 0xBF, 0x02, 0x10,  // .B..A...
                            /* 0058 */  0x3A, 0x14, 0x20, 0x53, 0x80, 0x41, 0x01, 0x4E,  // :. S.A.N
                            /* 0060 */  0x11, 0x44, 0x10, 0xA5, 0x65, 0x01, 0xBA, 0x05,  // .D..e...
                            /* 0068 */  0xF8, 0x16, 0xA0, 0x1D, 0x42, 0x68, 0x91, 0x9A,  // ....Bh..
                            /* 0070 */  0x9F, 0x04, 0x81, 0x6A, 0x5B, 0x80, 0x45, 0x01,  // ...j[.E.
                            /* 0078 */  0xB2, 0x41, 0x08, 0xA0, 0xC7, 0xC1, 0x44, 0x0E,  // .A....D.
                            /* 0080 */  0x02, 0x25, 0x66, 0x10, 0x28, 0x9D, 0x73, 0x90,  // .%f.(.s.
                            /* 0088 */  0x4D, 0x60, 0xE1, 0x9F, 0x4C, 0x94, 0xF3, 0x88,  // M`..L...
                            /* 0090 */  0x92, 0xE0, 0xA8, 0x0E, 0x22, 0x42, 0xF0, 0x72,  // ...."B.r
                            /* 0098 */  0x05, 0x48, 0x9E, 0x80, 0x34, 0x4F, 0x4C, 0xD6,  // .H..4OL.
                            /* 00A0 */  0x07, 0xA1, 0x21, 0xB0, 0x11, 0xF0, 0x88, 0x12,  // ..!.....
                            /* 00A8 */  0x40, 0x58, 0xA0, 0x75, 0x2A, 0x14, 0x0C, 0xCA,  // @X.u*...
                            /* 00B0 */  0x03, 0x88, 0xE4, 0x8C, 0x15, 0x05, 0x6C, 0xAF,  // ......l.
                            /* 00B8 */  0x13, 0x91, 0xC9, 0x81, 0x52, 0x49, 0x70, 0xA8,  // ....RIp.
                            /* 00C0 */  0x61, 0x5A, 0xE2, 0xEC, 0x34, 0xB2, 0x13, 0x39,  // aZ..4..9
                            /* 00C8 */  0xB6, 0xA6, 0x87, 0x2C, 0x48, 0x26, 0x6D, 0x28,  // ...,H&m(
                            /* 00D0 */  0xA8, 0xB1, 0x7B, 0x5A, 0x27, 0xE5, 0x99, 0x46,  // ..{Z'..F
                            /* 00D8 */  0x3C, 0x28, 0xC3, 0x24, 0xF0, 0x28, 0x18, 0x1A,  // <(.$.(..
                            /* 00E0 */  0x27, 0x28, 0x0B, 0x42, 0x0E, 0x06, 0x8A, 0x02,  // '(.B....
                            /* 00E8 */  0x3C, 0x09, 0xCF, 0xB1, 0x78, 0x01, 0xC2, 0x67,  // <...x..g
                            /* 00F0 */  0x4C, 0xA6, 0x1D, 0x23, 0x81, 0xCF, 0x04, 0x1E,  // L..#....
                            /* 00F8 */  0xE6, 0x31, 0x63, 0x47, 0x14, 0x2E, 0xE0, 0xF9,  // .1cG....
                            /* 0100 */  0x1C, 0x43, 0xE4, 0xB8, 0x87, 0x1A, 0xE3, 0x28,  // .C.....(
                            /* 0108 */  0x22, 0x3F, 0x08, 0x60, 0x05, 0x1D, 0x04, 0x90,  // "?.`....
                            /* 0110 */  0x38, 0xFF, 0xFF, 0xE3, 0x89, 0x76, 0xDA, 0xC1,  // 8....v..
                            /* 0118 */  0x42, 0xC7, 0x39, 0xBF, 0xD0, 0x18, 0xD1, 0xE3,  // B.9.....
                            /* 0120 */  0x40, 0xC9, 0x80, 0x90, 0x47, 0x01, 0x56, 0x61,  // @...G.Va
                            /* 0128 */  0x35, 0x91, 0x04, 0xBE, 0x07, 0x74, 0x76, 0x12,  // 5....tv.
                            /* 0130 */  0xD0, 0xA5, 0x21, 0x46, 0x6F, 0x08, 0xD2, 0x26,  // ..!Fo..&
                            /* 0138 */  0xC0, 0x96, 0x00, 0x6B, 0x02, 0x8C, 0xDD, 0x06,  // ...k....
                            /* 0140 */  0x08, 0xCA, 0xD1, 0x36, 0x87, 0x22, 0x84, 0x28,  // ...6.".(
                            /* 0148 */  0x21, 0xE2, 0x86, 0xAC, 0x11, 0x45, 0x10, 0x95,  // !....E..
                            /* 0150 */  0x41, 0x08, 0x35, 0x50, 0xD8, 0x28, 0xF1, 0x8D,  // A.5P.(..
                            /* 0158 */  0x13, 0x22, 0x48, 0x02, 0x8F, 0x1C, 0x77, 0x04,  // ."H...w.
                            /* 0160 */  0xF0, 0xD8, 0x0E, 0xE8, 0x04, 0x4F, 0xE9, 0x71,  // .....O.q
                            /* 0168 */  0xC1, 0x04, 0x9E, 0xF7, 0xC1, 0x1D, 0xEA, 0x21,  // .......!
                            /* 0170 */  0x1C, 0x70, 0xD4, 0x18, 0xC7, 0xF1, 0x4C, 0x40,  // .p....L@
                            /* 0178 */  0x16, 0x2E, 0x0D, 0x20, 0x8A, 0x04, 0x8F, 0x3A,  // ... ...:
                            /* 0180 */  0x32, 0xF8, 0x70, 0xE0, 0x41, 0x7A, 0x9E, 0x9E,  // 2.p.Az..
                            /* 0188 */  0x40, 0x90, 0x43, 0x38, 0x82, 0xC7, 0x86, 0xA7,  // @.C8....
                            /* 0190 */  0x02, 0x8F, 0x81, 0x5D, 0x17, 0x7C, 0x0E, 0xF0,  // ...].|..
                            /* 0198 */  0x31, 0x01, 0xEF, 0x1A, 0x50, 0xA3, 0x7E, 0x3A,  // 1...P.~:
                            /* 01A0 */  0x60, 0x93, 0x0E, 0x87, 0x19, 0xAE, 0x87, 0x1D,  // `.......
                            /* 01A8 */  0xEE, 0x04, 0x1E, 0x0E, 0x1E, 0x33, 0xF8, 0x91,  // .....3..
                            /* 01B0 */  0xC3, 0x83, 0xC3, 0xCD, 0xF0, 0x64, 0x8E, 0xAC,  // .....d..
                            /* 01B8 */  0x54, 0x01, 0x66, 0x4F, 0x08, 0x3A, 0x4D, 0xF8,  // T.fO.:M.
                            /* 01C0 */  0xCC, 0xC1, 0x6E, 0x00, 0xE7, 0xD3, 0x33, 0x24,  // ..n...3$
                            /* 01C8 */  0x91, 0x3F, 0x08, 0xD4, 0xC8, 0x0C, 0xED, 0x69,  // .?.....i
                            /* 01D0 */  0xBF, 0x7A, 0x18, 0xF2, 0xA1, 0xE0, 0xB0, 0x98,  // .z......
                            /* 01D8 */  0xD8, 0xB3, 0x07, 0x1D, 0x0F, 0xF8, 0xAF, 0x24,  // .......$
                            /* 01E0 */  0x0F, 0x1B, 0x9E, 0xBE, 0xE7, 0x6B, 0x82, 0x91,  // .....k..
                            /* 01E8 */  0x07, 0x8E, 0x1E, 0x88, 0xA1, 0x9F, 0x38, 0x0E,  // ......8.
                            /* 01F0 */  0xE3, 0x34, 0x7C, 0x09, 0xF1, 0x39, 0xE0, 0xFF,  // .4|..9..
                            /* 01F8 */  0x1F, 0x24, 0xC6, 0x31, 0x79, 0x70, 0x3C, 0xD8,  // .$.1yp<.
                            /* 0200 */  0xC8, 0xE9, 0x51, 0xC5, 0x47, 0x0A, 0x7E, 0xBE,  // ..Q.G.~.
                            /* 0208 */  0xF0, 0x91, 0x82, 0x5D, 0x10, 0x9E, 0x1C, 0x0C,  // ...]....
                            /* 0210 */  0x71, 0x38, 0x67, 0xE5, 0x13, 0x85, 0x0F, 0x2A,  // q8g....*
                            /* 0218 */  0xB8, 0x13, 0x05, 0x5C, 0x85, 0xE8, 0xE4, 0x36,  // ...\...6
                            /* 0220 */  0x61, 0xB4, 0x67, 0x81, 0xC7, 0x09, 0x98, 0x07,  // a.g.....
                            /* 0228 */  0x01, 0xF0, 0x8D, 0xDF, 0x07, 0x19, 0xB0, 0x4D,  // .......M
                            /* 0230 */  0x09, 0x3B, 0x24, 0x78, 0x47, 0x19, 0xE0, 0x71,  // .;$xG..q
                            /* 0238 */  0x32, 0xC1, 0x1D, 0x27, 0x3C, 0x04, 0x3E, 0x80,  // 2..'<.>.
                            /* 0240 */  0x87, 0x90, 0x93, 0xB4, 0xD2, 0xA9, 0x21, 0xCF,  // ......!.
                            /* 0248 */  0x3C, 0x60, 0x1B, 0x06, 0x57, 0x68, 0xD3, 0xA7,  // <`..Wh..
                            /* 0250 */  0x46, 0xA3, 0x56, 0x0D, 0xCA, 0xD4, 0x28, 0xD3,  // F.V...(.
                            /* 0258 */  0xA0, 0x56, 0x9F, 0x4A, 0x8D, 0x19, 0xFB, 0xE1,  // .V.J....
                            /* 0260 */  0x58, 0xDC, 0xBB, 0x40, 0x07, 0x03, 0x0B, 0x7B,  // X..@...{
                            /* 0268 */  0x21, 0xE8, 0x88, 0xE0, 0x58, 0x20, 0x34, 0x08,  // !...X 4.
                            /* 0270 */  0x9D, 0x40, 0xFC, 0xFF, 0x07                     // .@...
                        })
                    }

                    Name (IGPM, Zero)
                    Name (DGDO, One)
                    Scope (\)
                    {
                        Name (INSM, Zero)
                        Name (BCTP, Zero)
                        Name (GGTC, 0x57)
                        Name (DWMD, Zero)
                        Name (QGPS, Zero)
                        Name (BGPS, 0x11)
                        Name (PGPS, 0x11)
                        Name (MGPS, 0x12)
                        Name (GGP1, 0x0168)
                    }

                    Scope (\_SB)
                    {
                        Device (GZFD)
                        {
                            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
                            Name (_UID, "GMZN")  // _UID: Unique ID
                            Name (_WDG, Buffer (0x0280)
                            {
                                /* 0000 */  0xE3, 0x54, 0x7B, 0x88, 0xDC, 0xDD, 0x2C, 0x4B,  // .T{...,K
                                /* 0008 */  0x8B, 0x88, 0x68, 0xA2, 0x6A, 0x88, 0x35, 0xD0,  // ..h.j.5.
                                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x49, 0x95, 0x54, 0x92,  // AA..I.T.
                                /* 0018 */  0xDE, 0x4B, 0x06, 0x4F, 0xAC, 0x04, 0xCE, 0x8B,  // .K.O....
                                /* 0020 */  0xF8, 0x98, 0xDB, 0xAA, 0x42, 0x32, 0x01, 0x02,  // ....B2..
                                /* 0028 */  0x77, 0xD7, 0xAF, 0x14, 0x6F, 0x10, 0x9B, 0x4C,  // w...o..L
                                /* 0030 */  0xB3, 0x34, 0xD3, 0x88, 0xDC, 0x78, 0x09, 0xBE,  // .4...x..
                                /* 0038 */  0x42, 0x33, 0x01, 0x02, 0xF1, 0x47, 0x75, 0xDA,  // B3...Gu.
                                /* 0040 */  0x4D, 0x82, 0x5F, 0x40, 0xBE, 0x79, 0xD9, 0x90,  // M._@.y..
                                /* 0048 */  0x3E, 0x29, 0xCE, 0xD7, 0x42, 0x34, 0x01, 0x02,  // >)..B4..
                                /* 0050 */  0x05, 0x88, 0x2A, 0xDC, 0x8C, 0x3A, 0xBA, 0x41,  // ..*..:.A
                                /* 0058 */  0xA6, 0xF7, 0x09, 0x2E, 0x00, 0x89, 0xCD, 0x3B,  // .......;
                                /* 0060 */  0x42, 0x35, 0x01, 0x02, 0x27, 0x91, 0x5B, 0x8C,  // B5..'.[.
                                /* 0068 */  0xD4, 0xEC, 0x57, 0x46, 0x98, 0x0F, 0x85, 0x10,  // ..WF....
                                /* 0070 */  0x19, 0xF9, 0x9C, 0xA5, 0x42, 0x41, 0x01, 0x02,  // ....BA..
                                /* 0078 */  0x0A, 0xCA, 0xF3, 0xB7, 0xDC, 0xAC, 0xD2, 0x42,  // .......B
                                /* 0080 */  0x92, 0x17, 0x77, 0xC6, 0xC6, 0x28, 0xFB, 0xD2,  // ..w..(..
                                /* 0088 */  0x41, 0x30, 0x01, 0x01, 0xE2, 0x54, 0x7B, 0x88,  // A0...T{.
                                /* 0090 */  0xDC, 0xDD, 0x2C, 0x4B, 0x8B, 0x88, 0x68, 0xA2,  // ..,K..h.
                                /* 0098 */  0x6A, 0x88, 0x35, 0xD0, 0x41, 0x31, 0x02, 0x01,  // j.5.A1..
                                /* 00A0 */  0xD3, 0x7C, 0xA5, 0x93, 0xC6, 0xBB, 0xAB, 0x46,  // .|.....F
                                /* 00A8 */  0x95, 0x1D, 0x31, 0xF1, 0x7C, 0xC9, 0x68, 0xA0,  // ..1.|.h.
                                /* 00B0 */  0x41, 0x32, 0x13, 0x01, 0x6D, 0x2A, 0xFB, 0x87,  // A2..m*..
                                /* 00B8 */  0x02, 0xD8, 0xE7, 0x48, 0x92, 0x08, 0x45, 0x76,  // ...H..Ev
                                /* 00C0 */  0xC5, 0xF5, 0xC8, 0xD8, 0x41, 0x33, 0x0F, 0x01,  // ....A3..
                                /* 00C8 */  0x84, 0xBD, 0xD5, 0x4D, 0xA9, 0x15, 0xE2, 0x47,  // ...M...G
                                /* 00D0 */  0xAD, 0x65, 0xCC, 0x61, 0xA5, 0xC6, 0x2F, 0xD0,  // .e.a../.
                                /* 00D8 */  0x41, 0x34, 0x06, 0x01, 0xE6, 0x3C, 0xAF, 0xEC,  // A4...<..
                                /* 00E0 */  0xB2, 0xDC, 0x3D, 0x47, 0x94, 0xC3, 0x7B, 0xF4,  // ..=G..{.
                                /* 00E8 */  0xD9, 0x6E, 0x0D, 0x9A, 0x41, 0x35, 0x09, 0x01,  // .n..A5..
                                /* 00F0 */  0x6D, 0x25, 0x90, 0x4C, 0xEA, 0x44, 0xA8, 0xD6,  // m%.L.D..
                                /* 00F8 */  0x76, 0x50, 0x63, 0xDF, 0x4F, 0xEB, 0x2C, 0xFF,  // vPc.O.,.
                                /* 0100 */  0x41, 0x36, 0x03, 0x01, 0xFE, 0x3A, 0x2A, 0x36,  // A6...:*6
                                /* 0108 */  0x96, 0x3D, 0x65, 0x46, 0x85, 0x30, 0x96, 0xDA,  // .=eF.0..
                                /* 0110 */  0xD5, 0xBB, 0x30, 0x0E, 0x41, 0x37, 0x16, 0x01,  // ..0.A7..
                                /* 0118 */  0x07, 0x54, 0x8F, 0x7A, 0x67, 0xCB, 0x6E, 0x4D,  // .T.zg.nM
                                /* 0120 */  0xB5, 0x47, 0x39, 0xB3, 0xBE, 0x01, 0x81, 0x54,  // .G9....T
                                /* 0128 */  0x41, 0x38, 0x46, 0x01, 0xAD, 0xEC, 0x60, 0x62,  // A8F...`b
                                /* 0130 */  0x7D, 0x0D, 0x01, 0x42, 0xA8, 0xBD, 0x25, 0x52,  // }..B..%R
                                /* 0138 */  0xE8, 0x12, 0x50, 0x1F, 0x41, 0x39, 0x01, 0x01,  // ..P.A9..
                                /* 0140 */  0x17, 0x3B, 0x43, 0x91, 0xB7, 0xB7, 0x40, 0x46,  // .;C...@F
                                /* 0148 */  0xBB, 0x40, 0x34, 0xC6, 0x73, 0x49, 0xFB, 0xEC,  // .@4.sI..
                                /* 0150 */  0x41, 0x41, 0x1C, 0x01, 0x81, 0x24, 0xD4, 0xBF,  // AA...$..
                                /* 0158 */  0xE3, 0xAE, 0x01, 0x45, 0xA1, 0x07, 0xAF, 0xB6,  // ...E....
                                /* 0160 */  0x84, 0x25, 0xC5, 0xF8, 0xD0, 0x00, 0x01, 0x08,  // .%......
                                /* 0168 */  0x81, 0x24, 0xD4, 0xBF, 0xE3, 0xAE, 0x02, 0x45,  // .$.....E
                                /* 0170 */  0xA1, 0x07, 0xAF, 0xB6, 0x84, 0x25, 0xC5, 0xF8,  // .....%..
                                /* 0178 */  0xE0, 0x00, 0x01, 0x08, 0x6B, 0x90, 0x62, 0xD0,  // ....k.b.
                                /* 0180 */  0xD4, 0x12, 0x10, 0x45, 0x99, 0x9D, 0x48, 0x31,  // ...E..H1
                                /* 0188 */  0xEE, 0x80, 0xE9, 0x85, 0xD1, 0x00, 0x01, 0x08,  // ........
                                /* 0190 */  0x35, 0xA4, 0x72, 0xBC, 0xC1, 0xE8, 0x75, 0x42,  // 5.r...uB
                                /* 0198 */  0xB3, 0xE2, 0xD8, 0xB8, 0x07, 0x4A, 0xBA, 0x59,  // .....J.Y
                                /* 01A0 */  0xE1, 0x00, 0x01, 0x08, 0xD9, 0xC6, 0xAF, 0x10,  // ........
                                /* 01A8 */  0x8B, 0xEA, 0x90, 0x45, 0xA2, 0xE7, 0x1C, 0xD3,  // ...E....
                                /* 01B0 */  0xC8, 0x4B, 0xB4, 0xB1, 0xE2, 0x00, 0x01, 0x08,  // .K......
                                /* 01B8 */  0x9E, 0x28, 0x20, 0xD3, 0xEA, 0x8F, 0xE0, 0x41,  // .( ....A
                                /* 01C0 */  0x86, 0xF9, 0x61, 0x1D, 0x83, 0x15, 0x1B, 0x5F,  // ..a...._
                                /* 01C8 */  0xE3, 0x00, 0x01, 0x08, 0x9E, 0x28, 0x20, 0xD3,  // .....( .
                                /* 01D0 */  0xEA, 0x8F, 0xE1, 0x41, 0x86, 0xF9, 0x61, 0x1D,  // ...A..a.
                                /* 01D8 */  0x83, 0x15, 0x1B, 0x5F, 0xE4, 0x00, 0x01, 0x08,  // ..._....
                                /* 01E0 */  0x9E, 0x28, 0x20, 0xD3, 0xEA, 0x8F, 0xE0, 0x41,  // .( ....A
                                /* 01E8 */  0x86, 0xF9, 0x71, 0x1D, 0x83, 0x15, 0x1B, 0x5F,  // ..q...._
                                /* 01F0 */  0xE5, 0x00, 0x01, 0x08, 0x9E, 0x28, 0x20, 0xD3,  // .....( .
                                /* 01F8 */  0xEA, 0x8F, 0xE0, 0x41, 0x86, 0xF9, 0x81, 0x1D,  // ...A....
                                /* 0200 */  0x83, 0x15, 0x1B, 0x5F, 0xE6, 0x00, 0x01, 0x08,  // ..._....
                                /* 0208 */  0x9E, 0x28, 0x20, 0xD3, 0xEA, 0x8F, 0xE0, 0x41,  // .( ....A
                                /* 0210 */  0x86, 0xF9, 0x91, 0x1D, 0x83, 0x15, 0x1B, 0x5F,  // ......._
                                /* 0218 */  0xE7, 0x00, 0x01, 0x08, 0xA1, 0x91, 0x33, 0x1E,  // ......3.
                                /* 0220 */  0x89, 0x2C, 0x4D, 0x46, 0x95, 0xD9, 0x30, 0x28,  // .,MF..0(
                                /* 0228 */  0xB7, 0x2E, 0x7A, 0x33, 0xE8, 0x00, 0x01, 0x08,  // ..z3....
                                /* 0230 */  0xE5, 0x46, 0x13, 0xBE, 0x32, 0x3A, 0x31, 0x4A,  // .F..2:1J
                                /* 0238 */  0xB8, 0xB0, 0x2C, 0xD1, 0x95, 0xE1, 0xF5, 0x72,  // ..,....r
                                /* 0240 */  0xE9, 0x00, 0x01, 0x08, 0xCC, 0xC6, 0xA6, 0x67,  // .......g
                                /* 0248 */  0x0A, 0x38, 0x25, 0x4D, 0xAA, 0x35, 0xA1, 0x39,  // .8%M.5.9
                                /* 0250 */  0x7D, 0x1F, 0xBD, 0xFB, 0xEA, 0x00, 0x01, 0x08,  // }.......
                                /* 0258 */  0xEC, 0x30, 0x7B, 0x0F, 0x90, 0xAC, 0x34, 0x4B,  // .0{...4K
                                /* 0260 */  0xB6, 0x2F, 0x87, 0xF8, 0x51, 0x15, 0x50, 0x5D,  // ./..Q.P]
                                /* 0268 */  0xEB, 0x00, 0x01, 0x08, 0x21, 0x12, 0x90, 0x05,  // ....!...
                                /* 0270 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                                /* 0278 */  0xC9, 0x06, 0x29, 0x10, 0x44, 0x44, 0x01, 0x00   // ..).DD..
                            })
                            Method (HTPE, 0, NotSerialized)
                            {
                                If (((DSMF != 0x03) && (DSMF != 0x04)))
                                {
                                    Return (Zero)
                                }

                                ^^PCI0.LPC0.EC0.WEJF (0x03, Zero)
                                Local0 = Zero
                                While ((Local0 < 0x06))
                                {
                                    Notify (^^PCI0.GPP0.PEGP, Zero) // Bus Check
                                    Sleep (0x01F4)
                                    If ((^^PCI0.GPP0.GSTA () == One))
                                    {
                                        Break
                                    }
                                    Else
                                    {
                                        ^^PCI0.GPP0.PG00._ON ()
                                        Sleep (0x01F4)
                                    }

                                    Local0++
                                }
                            }

                            Method (HTPL, 0, NotSerialized)
                            {
                                If (((DSMF != 0x03) && (DSMF != 0x04)))
                                {
                                    Return (Zero)
                                }

                                IGPM = ^^PCI0.LPC0.EC0.REJF (One)
                                If ((DGDO == One))
                                {
                                    If (((IGPM == One) && (^^PCI0.GPP0.GSTA () == Zero)))
                                    {
                                        ^^PCI0.LPC0.EC0.WEJF (0x03, Zero)
                                        Notify (^^PCI0.GPP0.PEGP, 0x03) // Eject Request
                                        Return (One)
                                    }
                                    ElseIf ((((IGPM == 0x02) && (^^PCI0.GPP0.GSTA () == Zero)) && ((
                                        (^^PCI0.LPC0.EC0.ADNS == One) || (^^PCI0.LPC0.EC0.ACTY () == 0x02)) || (^^PCI0.LPC0.EC0.ADPT == Zero))))
                                    {
                                        ^^PCI0.LPC0.EC0.WEJF (0x03, Zero)
                                        Notify (^^PCI0.GPP0.PEGP, 0x03) // Eject Request
                                        Return (One)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                                ElseIf ((DGDO == Zero))
                                {
                                    If (((IGPM == Zero) && (^^PCI0.GPP0.GSTA () == Zero)))
                                    {
                                        ^^PCI0.LPC0.EC0.WEJF (0x03, Zero)
                                        Local0 = Zero
                                        While ((Local0 < 0x06))
                                        {
                                            Notify (^^PCI0.GPP0.PEGP, Zero) // Bus Check
                                            Sleep (0x01F4)
                                            If ((^^PCI0.GPP0.GSTA () == One))
                                            {
                                                Break
                                            }
                                            Else
                                            {
                                                ^^PCI0.GPP0.PG00._ON ()
                                                Sleep (0x01F4)
                                            }
                                        }

                                        Return (One)
                                    }

                                    If ((((IGPM == 0x02) && (^^PCI0.GPP0.GSTA () == Zero)) && ((^^PCI0.LPC0.EC0.ADSS == 
                                        One) || (^^PCI0.LPC0.EC0.ADSL == One))))
                                    {
                                        ^^PCI0.LPC0.EC0.WEJF (0x03, Zero)
                                        Local0 = Zero
                                        While ((Local0 < 0x06))
                                        {
                                            Notify (^^PCI0.GPP0.PEGP, Zero) // Bus Check
                                            Sleep (0x01F4)
                                            If ((^^PCI0.GPP0.GSTA () == One))
                                            {
                                                Break
                                            }
                                            Else
                                            {
                                                ^^PCI0.GPP0.PG00._ON ()
                                                Sleep (0x01F4)
                                            }
                                        }

                                        Return (One)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Name (XX11, Buffer (0x07){})
                            CreateWordField (XX11, Zero, SSZE)
                            CreateByteField (XX11, 0x02, SMUF)
                            CreateDWordField (XX11, 0x03, SMUD)
                            Method (WSMI, 1, NotSerialized)
                            {
                                SMBB = Arg0
                                SMBA = 0xCB
                            }

                            Method (FTOI, 2, NotSerialized)
                            {
                                Name (OCVI, Zero)
                                Name (NORP, Zero)
                                Name (REMA, Zero)
                                Name (MANT, Zero)
                                Name (INDE, Zero)
                                Name (SHFT, Zero)
                                Name (RESU, Zero)
                                OCVI = Arg0
                                NORP = Arg1
                                Divide (OCVI, 0x02, REMA, OCVI) /* \_SB_.GZFD.FTOI.OCVI */
                                While ((OCVI != Zero))
                                {
                                    REMA <<= INDE /* \_SB_.GZFD.FTOI.INDE */
                                    MANT += REMA /* \_SB_.GZFD.FTOI.REMA */
                                    INDE += One
                                    Divide (OCVI, 0x02, REMA, OCVI) /* \_SB_.GZFD.FTOI.OCVI */
                                }

                                SHFT = (0x17 - INDE) /* \_SB_.GZFD.FTOI.INDE */
                                MANT <<= SHFT /* \_SB_.GZFD.FTOI.SHFT */
                                RESU |= MANT /* \_SB_.GZFD.FTOI.MANT */
                                INDE += 0x7F
                                INDE <<= 0x17
                                RESU |= INDE /* \_SB_.GZFD.FTOI.INDE */
                                If ((NORP == One))
                                {
                                    RESU |= 0x80000000
                                }

                                Return (RESU) /* \_SB_.GZFD.FTOI.RESU */
                            }

                            Method (IOT2, 1, NotSerialized)
                            {
                                Name (NOR2, Zero)
                                If ((Arg0 == Zero))
                                {
                                    Return (Zero)
                                }

                                NOR2 = (Arg0 & 0x80000000)
                                If ((NOR2 != Zero))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Method (IOTF, 1, NotSerialized)
                            {
                                Name (RES2, Zero)
                                If ((Arg0 == Zero))
                                {
                                    Return (Zero)
                                }
                                Else
                                {
                                    RES2 = (Arg0 & 0x7FFFFFFF)
                                    Return (RES2) /* \_SB_.GZFD.IOTF.RES2 */
                                }
                            }

                            Name (GOC0, Buffer (0x2C)
                            {
                                 0x00                                             // .
                            })
                            CreateDWordField (GOC0, Zero, GPST)
                            CreateDWordField (GOC0, 0x04, GOCI)
                            CreateDWordField (GOC0, 0x08, GDEV)
                            CreateDWordField (GOC0, 0x0C, GOCV)
                            CreateDWordField (GOC0, 0x10, GMIN)
                            CreateDWordField (GOC0, 0x14, GMAX)
                            CreateDWordField (GOC0, 0x18, GSCV)
                            CreateDWordField (GOC0, 0x1C, GOCO)
                            CreateDWordField (GOC0, 0x20, GNOC)
                            CreateDWordField (GOC0, 0x24, GDET)
                            CreateDWordField (GOC0, 0x28, GCAP)
                            Name (GOC1, Buffer (0x2C)
                            {
                                 0x00                                             // .
                            })
                            CreateDWordField (GOC1, Zero, MPST)
                            CreateDWordField (GOC1, 0x04, MOCI)
                            CreateDWordField (GOC1, 0x08, MDEV)
                            CreateDWordField (GOC1, 0x0C, MOCV)
                            CreateDWordField (GOC1, 0x10, MMIN)
                            CreateDWordField (GOC1, 0x14, MMAX)
                            CreateDWordField (GOC1, 0x18, MSCV)
                            CreateDWordField (GOC1, 0x1C, MOCO)
                            CreateDWordField (GOC1, 0x20, MNOC)
                            CreateDWordField (GOC1, 0x24, MDET)
                            CreateDWordField (GOC1, 0x28, MCAP)
                            Method (WQA1, 1, NotSerialized)
                            {
                                If ((Arg0 == Zero))
                                {
                                    GPST = Zero
                                    GOCI = Zero
                                    GDEV = Zero
                                    GOCV = 0x96
                                    GMIN = Zero
                                    GMAX = 0xC8
                                    GSCV = One
                                    GOCO = Zero
                                    GNOC = Zero
                                    GDET = Zero
                                    GCAP = Zero
                                    Return (GOC0) /* \_SB_.GZFD.GOC0 */
                                }

                                If ((Arg0 == One))
                                {
                                    MPST = Zero
                                    MOCI = One
                                    MDEV = Zero
                                    MOCV = 0xC8
                                    MMIN = Zero
                                    MMAX = 0x0190
                                    MSCV = One
                                    MOCO = Zero
                                    MNOC = Zero
                                    MDET = Zero
                                    MCAP = Zero
                                    Return (GOC1) /* \_SB_.GZFD.GOC1 */
                                }
                            }

                            Name (WTL1, Package (0x13)
                            {
                                Package (0x02)
                                {
                                    "LOSTARK.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "dota2.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "csgo.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "TslGame.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "FortniteClient-Win64-Shipping.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "RainbowSix.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "SOTTR.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "r5apex.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "RDR2.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "NarakaBladepoint.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "bfv.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "Cyberpunk2077.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "GTA5.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "Overwatch.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "ACValhalla.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "VALORANT-Win64-Shipping.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "cod.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "Warhammer3.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "F1_22.exe", 
                                    "4"
                                }
                            })
                            Name (WTL2, Package (0x13)
                            {
                                Package (0x02)
                                {
                                    "LOSTARK.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "dota2.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "csgo.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "TslGame.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "FortniteClient-Win64-Shipping.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "RainbowSix.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "SOTTR.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "r5apex.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "RDR2.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "NarakaBladepoint.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "bfv.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "Cyberpunk2077.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "GTA5.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "Overwatch.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "ACValhalla.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "VALORANT-Win64-Shipping.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "cod.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "Warhammer3.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "F1_22.exe", 
                                    "5"
                                }
                            })
                            Name (WTL3, Package (0x13)
                            {
                                Package (0x02)
                                {
                                    "LOSTARK.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "dota2.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "csgo.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "TslGame.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "FortniteClient-Win64-Shipping.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "RainbowSix.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "SOTTR.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "r5apex.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "RDR2.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "NarakaBladepoint.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "bfv.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "Cyberpunk2077.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "GTA5.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "Overwatch.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "ACValhalla.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "VALORANT-Win64-Shipping.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "cod.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "Warhammer3.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "F1_22.exe", 
                                    "3"
                                }
                            })
                            Name (WTL4, Package (0x13)
                            {
                                Package (0x02)
                                {
                                    "LOSTARK.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "dota2.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "csgo.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "TslGame.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "FortniteClient-Win64-Shipping.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "RainbowSix.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "SOTTR.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "r5apex.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "RDR2.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "NarakaBladepoint.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "bfv.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "Cyberpunk2077.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "GTA5.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "Overwatch.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "ACValhalla.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "VALORANT-Win64-Shipping.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "cod.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "Warhammer3.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "F1_22.exe", 
                                    "3"
                                }
                            })
                            Name (WTL5, Package (0x13)
                            {
                                Package (0x02)
                                {
                                    "LOSTARK.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "dota2.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "csgo.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "TslGame.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "FortniteClient-Win64-Shipping.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "RainbowSix.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "SOTTR.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "r5apex.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "RDR2.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "NarakaBladepoint.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "bfv.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "Cyberpunk2077.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "GTA5.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "Overwatch.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "ACValhalla.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "VALORANT-Win64-Shipping.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "cod.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "Warhammer3.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "F1_22.exe", 
                                    "3"
                                }
                            })
                            Name (WTL6, Package (0x13)
                            {
                                Package (0x02)
                                {
                                    "LOSTARK.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "dota2.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "csgo.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "TslGame.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "FortniteClient-Win64-Shipping.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "RainbowSix.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "SOTTR.exe", 
                                    "6"
                                }, 

                                Package (0x02)
                                {
                                    "r5apex.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "RDR2.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "NarakaBladepoint.exe", 
                                    "6"
                                }, 

                                Package (0x02)
                                {
                                    "bfv.exe", 
                                    "6"
                                }, 

                                Package (0x02)
                                {
                                    "Cyberpunk2077.exe", 
                                    "6"
                                }, 

                                Package (0x02)
                                {
                                    "GTA5.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "Overwatch.exe", 
                                    "6"
                                }, 

                                Package (0x02)
                                {
                                    "ACValhalla.exe", 
                                    "6"
                                }, 

                                Package (0x02)
                                {
                                    "VALORANT-Win64-Shipping.exe", 
                                    "6"
                                }, 

                                Package (0x02)
                                {
                                    "cod.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "Warhammer3.exe", 
                                    "6"
                                }, 

                                Package (0x02)
                                {
                                    "F1_22.exe", 
                                    "5"
                                }
                            })
                            Name (WTL7, Package (0x13)
                            {
                                Package (0x02)
                                {
                                    "LOSTARK.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "dota2.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "csgo.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "TslGame.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "FortniteClient-Win64-Shipping.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "RainbowSix.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "SOTTR.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "r5apex.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "RDR2.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "NarakaBladepoint.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "bfv.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "Cyberpunk2077.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "GTA5.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "Overwatch.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "ACValhalla.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "VALORANT-Win64-Shipping.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "cod.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "Warhammer3.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "F1_22.exe", 
                                    "4"
                                }
                            })
                            Name (WTL8, Package (0x13)
                            {
                                Package (0x02)
                                {
                                    "LOSTARK.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "dota2.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "csgo.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "TslGame.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "FortniteClient-Win64-Shipping.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "RainbowSix.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "SOTTR.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "r5apex.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "RDR2.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "NarakaBladepoint.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "bfv.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "Cyberpunk2077.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "GTA5.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "Overwatch.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "ACValhalla.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "VALORANT-Win64-Shipping.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "cod.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "Warhammer3.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "F1_22.exe", 
                                    "6"
                                }
                            })
                            Name (WTL9, Package (0x13)
                            {
                                Package (0x02)
                                {
                                    "LOSTARK.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "dota2.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "csgo.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "TslGame.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "FortniteClient-Win64-Shipping.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "RainbowSix.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "SOTTR.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "r5apex.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "RDR2.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "NarakaBladepoint.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "bfv.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "Cyberpunk2077.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "GTA5.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "Overwatch.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "ACValhalla.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "VALORANT-Win64-Shipping.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "cod.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "Warhammer3.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "F1_22.exe", 
                                    "6"
                                }
                            })
                            Method (WQA2, 1, NotSerialized)
                            {
                                If ((MCSK == One))
                                {
                                    If (((CPTY == 0x07) || (CPTY == 0x05)))
                                    {
                                        If ((GTYP == 0x03))
                                        {
                                            Local0 = Zero
                                            While ((Local0 < 0x13))
                                            {
                                                If ((Arg0 == Local0))
                                                {
                                                    Return (DerefOf (WTL2 [Local0]))
                                                }

                                                Local0++
                                            }
                                        }
                                        ElseIf ((GTYP == 0x02))
                                        {
                                            Local0 = Zero
                                            While ((Local0 < 0x13))
                                            {
                                                If ((Arg0 == Local0))
                                                {
                                                    Return (DerefOf (WTL4 [Local0]))
                                                }

                                                Local0++
                                            }
                                        }
                                        ElseIf ((GTYP == 0x07))
                                        {
                                            Local0 = Zero
                                            While ((Local0 < 0x13))
                                            {
                                                If ((Arg0 == Local0))
                                                {
                                                    Return (DerefOf (WTL5 [Local0]))
                                                }

                                                Local0++
                                            }
                                        }
                                        ElseIf ((GTYP == 0x06))
                                        {
                                            Local0 = Zero
                                            While ((Local0 < 0x13))
                                            {
                                                If ((Arg0 == Local0))
                                                {
                                                    Return (DerefOf (WTL6 [Local0]))
                                                }

                                                Local0++
                                            }
                                        }
                                    }
                                    ElseIf ((GTYP == 0x03))
                                    {
                                        Local0 = Zero
                                        While ((Local0 < 0x13))
                                        {
                                            If ((Arg0 == Local0))
                                            {
                                                Return (DerefOf (WTL1 [Local0]))
                                            }

                                            Local0++
                                        }
                                    }
                                    ElseIf ((GTYP == 0x02))
                                    {
                                        Local0 = Zero
                                        While ((Local0 < 0x13))
                                        {
                                            If ((Arg0 == Local0))
                                            {
                                                Return (DerefOf (WTL3 [Local0]))
                                            }

                                            Local0++
                                        }
                                    }
                                    ElseIf ((GTYP == 0x07))
                                    {
                                        Local0 = Zero
                                        While ((Local0 < 0x13))
                                        {
                                            If ((Arg0 == Local0))
                                            {
                                                Return (DerefOf (WTL7 [Local0]))
                                            }

                                            Local0++
                                        }
                                    }
                                    Else
                                    {
                                        Local0 = Zero
                                        While ((Local0 < 0x13))
                                        {
                                            If ((Arg0 == Local0))
                                            {
                                                Return (DerefOf (WTL8 [Local0]))
                                            }

                                            Local0++
                                        }
                                    }
                                }
                                ElseIf (((CPTY == 0x07) || (CPTY == 0x05)))
                                {
                                    Local0 = Zero
                                    While ((Local0 < 0x13))
                                    {
                                        If ((Arg0 == Local0))
                                        {
                                            Return (DerefOf (WTL8 [Local0]))
                                        }

                                        Local0++
                                    }
                                }
                                ElseIf ((GTYP == One))
                                {
                                    Local0 = Zero
                                    While ((Local0 < 0x13))
                                    {
                                        If ((Arg0 == Local0))
                                        {
                                            Return (DerefOf (WTL8 [Local0]))
                                        }

                                        Local0++
                                    }
                                }
                                Else
                                {
                                    Local0 = Zero
                                    While ((Local0 < 0x13))
                                    {
                                        If ((Arg0 == Local0))
                                        {
                                            Return (DerefOf (WTL9 [Local0]))
                                        }

                                        Local0++
                                    }
                                }
                            }

                            Name (LFT0, Package (0x0F)
                            {
                                Package (0x14)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0834, 
                                    0x08FC, 
                                    0x09C4, 
                                    0x0B54, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1130, 
                                    0x1518, 
                                    0x43, 
                                    0x43, 
                                    0x43, 
                                    0x43, 
                                    0x48, 
                                    0x4D, 
                                    0x55, 
                                    0x59, 
                                    0x5C, 
                                    0x5C
                                }, 

                                Package (0x14)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0834, 
                                    0x08FC, 
                                    0x09C4, 
                                    0x0B54, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1130, 
                                    0x1518, 
                                    0x28, 
                                    0x2D, 
                                    0x32, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F
                                }, 

                                Package (0x14)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x0834, 
                                    0x0898, 
                                    0x0A8C, 
                                    0x0B54, 
                                    0x0DAC, 
                                    0x0E74, 
                                    0x11F8, 
                                    0x1518, 
                                    0x35, 
                                    0x35, 
                                    0x35, 
                                    0x35, 
                                    0x38, 
                                    0x3B, 
                                    0x3F, 
                                    0x44, 
                                    0x4A, 
                                    0x4A
                                }, 

                                Package (0x14)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0834, 
                                    0x08FC, 
                                    0x09C4, 
                                    0x0B54, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1130, 
                                    0x1518, 
                                    0x43, 
                                    0x43, 
                                    0x43, 
                                    0x43, 
                                    0x48, 
                                    0x4D, 
                                    0x55, 
                                    0x59, 
                                    0x5C, 
                                    0x5C
                                }, 

                                Package (0x14)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0834, 
                                    0x08FC, 
                                    0x09C4, 
                                    0x0B54, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1130, 
                                    0x1518, 
                                    0x28, 
                                    0x2D, 
                                    0x32, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F
                                }, 

                                Package (0x14)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x0834, 
                                    0x0898, 
                                    0x0A8C, 
                                    0x0B54, 
                                    0x0DAC, 
                                    0x0E74, 
                                    0x11F8, 
                                    0x1518, 
                                    0x35, 
                                    0x35, 
                                    0x35, 
                                    0x35, 
                                    0x38, 
                                    0x3B, 
                                    0x3F, 
                                    0x44, 
                                    0x4A, 
                                    0x4A
                                }, 

                                Package (0x14)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0834, 
                                    0x08FC, 
                                    0x09C4, 
                                    0x0B54, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1130, 
                                    0x1518, 
                                    0x43, 
                                    0x43, 
                                    0x43, 
                                    0x43, 
                                    0x48, 
                                    0x4D, 
                                    0x55, 
                                    0x59, 
                                    0x5C, 
                                    0x5C
                                }, 

                                Package (0x14)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0834, 
                                    0x08FC, 
                                    0x09C4, 
                                    0x0B54, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1130, 
                                    0x1518, 
                                    0x28, 
                                    0x2D, 
                                    0x32, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F
                                }, 

                                Package (0x14)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x0834, 
                                    0x0898, 
                                    0x0A8C, 
                                    0x0B54, 
                                    0x0DAC, 
                                    0x0E74, 
                                    0x11F8, 
                                    0x1518, 
                                    0x35, 
                                    0x35, 
                                    0x35, 
                                    0x35, 
                                    0x38, 
                                    0x3B, 
                                    0x3F, 
                                    0x44, 
                                    0x4A, 
                                    0x4A
                                }, 

                                Package (0x14)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0834, 
                                    0x08FC, 
                                    0x09C4, 
                                    0x0B54, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1130, 
                                    0x1518, 
                                    0x43, 
                                    0x43, 
                                    0x43, 
                                    0x43, 
                                    0x48, 
                                    0x4D, 
                                    0x55, 
                                    0x59, 
                                    0x5C, 
                                    0x5C
                                }, 

                                Package (0x14)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0834, 
                                    0x08FC, 
                                    0x09C4, 
                                    0x0B54, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1130, 
                                    0x1518, 
                                    0x28, 
                                    0x2D, 
                                    0x32, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F
                                }, 

                                Package (0x14)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x0834, 
                                    0x0898, 
                                    0x0A8C, 
                                    0x0B54, 
                                    0x0DAC, 
                                    0x0E74, 
                                    0x11F8, 
                                    0x1518, 
                                    0x35, 
                                    0x35, 
                                    0x35, 
                                    0x35, 
                                    0x38, 
                                    0x3B, 
                                    0x3F, 
                                    0x44, 
                                    0x4A, 
                                    0x4A
                                }, 

                                Package (0x14)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0834, 
                                    0x08FC, 
                                    0x09C4, 
                                    0x0B54, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1130, 
                                    0x1518, 
                                    0x43, 
                                    0x43, 
                                    0x43, 
                                    0x43, 
                                    0x48, 
                                    0x4D, 
                                    0x55, 
                                    0x59, 
                                    0x5C, 
                                    0x5C
                                }, 

                                Package (0x14)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0834, 
                                    0x08FC, 
                                    0x09C4, 
                                    0x0B54, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1130, 
                                    0x1518, 
                                    0x28, 
                                    0x2D, 
                                    0x32, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F
                                }, 

                                Package (0x14)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x0834, 
                                    0x0898, 
                                    0x0A8C, 
                                    0x0B54, 
                                    0x0DAC, 
                                    0x0E74, 
                                    0x11F8, 
                                    0x1518, 
                                    0x35, 
                                    0x35, 
                                    0x35, 
                                    0x35, 
                                    0x38, 
                                    0x3B, 
                                    0x3F, 
                                    0x44, 
                                    0x4A, 
                                    0x4A
                                }
                            })
                            Name (LFT1, Package (0x0F)
                            {
                                Package (0x14)
                                {
                                    0x0708, 
                                    0x076C, 
                                    0x07D0, 
                                    0x0834, 
                                    0x09C4, 
                                    0x0AF0, 
                                    0x0CE4, 
                                    0x0DAC, 
                                    0x1130, 
                                    0x13EC, 
                                    0x3B, 
                                    0x3B, 
                                    0x3B, 
                                    0x3D, 
                                    0x41, 
                                    0x44, 
                                    0x4B, 
                                    0x50, 
                                    0x55, 
                                    0x5A
                                }, 

                                Package (0x14)
                                {
                                    0x0708, 
                                    0x076C, 
                                    0x07D0, 
                                    0x0834, 
                                    0x09C4, 
                                    0x0AF0, 
                                    0x0CE4, 
                                    0x0DAC, 
                                    0x1130, 
                                    0x13EC, 
                                    0x28, 
                                    0x2D, 
                                    0x32, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F
                                }, 

                                Package (0x14)
                                {
                                    0x06A4, 
                                    0x0708, 
                                    0x07D0, 
                                    0x08FC, 
                                    0x09C4, 
                                    0x0AF0, 
                                    0x0CE4, 
                                    0x0E10, 
                                    0x1130, 
                                    0x13EC, 
                                    0x36, 
                                    0x36, 
                                    0x36, 
                                    0x36, 
                                    0x3D, 
                                    0x41, 
                                    0x48, 
                                    0x4B, 
                                    0x4E, 
                                    0x51
                                }, 

                                Package (0x14)
                                {
                                    0x0708, 
                                    0x076C, 
                                    0x07D0, 
                                    0x0834, 
                                    0x09C4, 
                                    0x0AF0, 
                                    0x0CE4, 
                                    0x0DAC, 
                                    0x1130, 
                                    0x13EC, 
                                    0x3B, 
                                    0x3B, 
                                    0x3B, 
                                    0x3D, 
                                    0x41, 
                                    0x44, 
                                    0x4B, 
                                    0x50, 
                                    0x55, 
                                    0x5A
                                }, 

                                Package (0x14)
                                {
                                    0x0708, 
                                    0x076C, 
                                    0x07D0, 
                                    0x0834, 
                                    0x09C4, 
                                    0x0AF0, 
                                    0x0CE4, 
                                    0x0DAC, 
                                    0x1130, 
                                    0x13EC, 
                                    0x28, 
                                    0x2D, 
                                    0x32, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F
                                }, 

                                Package (0x14)
                                {
                                    0x06A4, 
                                    0x0708, 
                                    0x07D0, 
                                    0x08FC, 
                                    0x09C4, 
                                    0x0AF0, 
                                    0x0CE4, 
                                    0x0E10, 
                                    0x1130, 
                                    0x13EC, 
                                    0x36, 
                                    0x36, 
                                    0x36, 
                                    0x36, 
                                    0x3D, 
                                    0x41, 
                                    0x48, 
                                    0x4B, 
                                    0x4E, 
                                    0x51
                                }, 

                                Package (0x14)
                                {
                                    0x0708, 
                                    0x076C, 
                                    0x07D0, 
                                    0x0834, 
                                    0x09C4, 
                                    0x0AF0, 
                                    0x0CE4, 
                                    0x0DAC, 
                                    0x1130, 
                                    0x13EC, 
                                    0x3B, 
                                    0x3B, 
                                    0x3B, 
                                    0x3D, 
                                    0x41, 
                                    0x44, 
                                    0x4B, 
                                    0x50, 
                                    0x55, 
                                    0x5A
                                }, 

                                Package (0x14)
                                {
                                    0x0708, 
                                    0x076C, 
                                    0x07D0, 
                                    0x0834, 
                                    0x09C4, 
                                    0x0AF0, 
                                    0x0CE4, 
                                    0x0DAC, 
                                    0x1130, 
                                    0x13EC, 
                                    0x28, 
                                    0x2D, 
                                    0x32, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F
                                }, 

                                Package (0x14)
                                {
                                    0x06A4, 
                                    0x0708, 
                                    0x07D0, 
                                    0x08FC, 
                                    0x09C4, 
                                    0x0AF0, 
                                    0x0CE4, 
                                    0x0E10, 
                                    0x1130, 
                                    0x13EC, 
                                    0x36, 
                                    0x36, 
                                    0x36, 
                                    0x36, 
                                    0x3D, 
                                    0x41, 
                                    0x48, 
                                    0x4B, 
                                    0x4E, 
                                    0x51
                                }, 

                                Package (0x14)
                                {
                                    0x0708, 
                                    0x076C, 
                                    0x07D0, 
                                    0x0834, 
                                    0x09C4, 
                                    0x0AF0, 
                                    0x0CE4, 
                                    0x0DAC, 
                                    0x1130, 
                                    0x13EC, 
                                    0x3B, 
                                    0x3B, 
                                    0x3B, 
                                    0x3D, 
                                    0x41, 
                                    0x44, 
                                    0x4B, 
                                    0x50, 
                                    0x55, 
                                    0x5A
                                }, 

                                Package (0x14)
                                {
                                    0x0708, 
                                    0x076C, 
                                    0x07D0, 
                                    0x0834, 
                                    0x09C4, 
                                    0x0AF0, 
                                    0x0CE4, 
                                    0x0DAC, 
                                    0x1130, 
                                    0x13EC, 
                                    0x28, 
                                    0x2D, 
                                    0x32, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F
                                }, 

                                Package (0x14)
                                {
                                    0x06A4, 
                                    0x0708, 
                                    0x07D0, 
                                    0x08FC, 
                                    0x09C4, 
                                    0x0AF0, 
                                    0x0CE4, 
                                    0x0E10, 
                                    0x1130, 
                                    0x13EC, 
                                    0x36, 
                                    0x36, 
                                    0x36, 
                                    0x36, 
                                    0x3D, 
                                    0x41, 
                                    0x48, 
                                    0x4B, 
                                    0x4E, 
                                    0x51
                                }, 

                                Package (0x14)
                                {
                                    0x0708, 
                                    0x076C, 
                                    0x07D0, 
                                    0x0834, 
                                    0x09C4, 
                                    0x0AF0, 
                                    0x0CE4, 
                                    0x0DAC, 
                                    0x1130, 
                                    0x13EC, 
                                    0x3B, 
                                    0x3B, 
                                    0x3B, 
                                    0x3D, 
                                    0x41, 
                                    0x44, 
                                    0x4B, 
                                    0x50, 
                                    0x55, 
                                    0x5A
                                }, 

                                Package (0x14)
                                {
                                    0x0708, 
                                    0x076C, 
                                    0x07D0, 
                                    0x0834, 
                                    0x09C4, 
                                    0x0AF0, 
                                    0x0CE4, 
                                    0x0DAC, 
                                    0x1130, 
                                    0x13EC, 
                                    0x28, 
                                    0x2D, 
                                    0x32, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F
                                }, 

                                Package (0x14)
                                {
                                    0x06A4, 
                                    0x0708, 
                                    0x07D0, 
                                    0x08FC, 
                                    0x09C4, 
                                    0x0AF0, 
                                    0x0CE4, 
                                    0x0E10, 
                                    0x1130, 
                                    0x13EC, 
                                    0x36, 
                                    0x36, 
                                    0x36, 
                                    0x36, 
                                    0x3D, 
                                    0x41, 
                                    0x48, 
                                    0x4B, 
                                    0x4E, 
                                    0x51
                                }
                            })
                            Name (LFT2, Package (0x0F)
                            {
                                Package (0x14)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0834, 
                                    0x08FC, 
                                    0x09C4, 
                                    0x0B54, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1130, 
                                    0x1518, 
                                    0x43, 
                                    0x43, 
                                    0x43, 
                                    0x43, 
                                    0x48, 
                                    0x4D, 
                                    0x51, 
                                    0x55, 
                                    0x59, 
                                    0x5C
                                }, 

                                Package (0x14)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0834, 
                                    0x08FC, 
                                    0x09C4, 
                                    0x0B54, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1130, 
                                    0x1518, 
                                    0x28, 
                                    0x2D, 
                                    0x32, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F
                                }, 

                                Package (0x14)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x0834, 
                                    0x0898, 
                                    0x0A8C, 
                                    0x0B54, 
                                    0x0DAC, 
                                    0x0E74, 
                                    0x11F8, 
                                    0x1518, 
                                    0x2F, 
                                    0x2F, 
                                    0x2F, 
                                    0x2F, 
                                    0x36, 
                                    0x39, 
                                    0x3B, 
                                    0x3D, 
                                    0x44, 
                                    0x4A
                                }, 

                                Package (0x14)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0834, 
                                    0x08FC, 
                                    0x09C4, 
                                    0x0B54, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1130, 
                                    0x1518, 
                                    0x43, 
                                    0x43, 
                                    0x43, 
                                    0x43, 
                                    0x48, 
                                    0x4D, 
                                    0x51, 
                                    0x55, 
                                    0x59, 
                                    0x5C
                                }, 

                                Package (0x14)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0834, 
                                    0x08FC, 
                                    0x09C4, 
                                    0x0B54, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1130, 
                                    0x1518, 
                                    0x28, 
                                    0x2D, 
                                    0x32, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F
                                }, 

                                Package (0x14)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x0834, 
                                    0x0898, 
                                    0x0A8C, 
                                    0x0B54, 
                                    0x0DAC, 
                                    0x0E74, 
                                    0x11F8, 
                                    0x1518, 
                                    0x2F, 
                                    0x2F, 
                                    0x2F, 
                                    0x2F, 
                                    0x36, 
                                    0x39, 
                                    0x3B, 
                                    0x3D, 
                                    0x44, 
                                    0x4A
                                }, 

                                Package (0x14)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0834, 
                                    0x08FC, 
                                    0x09C4, 
                                    0x0B54, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1130, 
                                    0x1518, 
                                    0x43, 
                                    0x43, 
                                    0x43, 
                                    0x43, 
                                    0x48, 
                                    0x4D, 
                                    0x51, 
                                    0x55, 
                                    0x59, 
                                    0x5C
                                }, 

                                Package (0x14)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0834, 
                                    0x08FC, 
                                    0x09C4, 
                                    0x0B54, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1130, 
                                    0x1518, 
                                    0x28, 
                                    0x2D, 
                                    0x32, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F
                                }, 

                                Package (0x14)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x0834, 
                                    0x0898, 
                                    0x0A8C, 
                                    0x0B54, 
                                    0x0DAC, 
                                    0x0E74, 
                                    0x11F8, 
                                    0x1518, 
                                    0x2F, 
                                    0x2F, 
                                    0x2F, 
                                    0x2F, 
                                    0x36, 
                                    0x39, 
                                    0x3B, 
                                    0x3D, 
                                    0x44, 
                                    0x4A
                                }, 

                                Package (0x14)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0834, 
                                    0x08FC, 
                                    0x09C4, 
                                    0x0B54, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1130, 
                                    0x1518, 
                                    0x43, 
                                    0x43, 
                                    0x43, 
                                    0x43, 
                                    0x48, 
                                    0x4D, 
                                    0x51, 
                                    0x55, 
                                    0x59, 
                                    0x5C
                                }, 

                                Package (0x14)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0834, 
                                    0x08FC, 
                                    0x09C4, 
                                    0x0B54, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1130, 
                                    0x1518, 
                                    0x28, 
                                    0x2D, 
                                    0x32, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F
                                }, 

                                Package (0x14)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x0834, 
                                    0x0898, 
                                    0x0A8C, 
                                    0x0B54, 
                                    0x0DAC, 
                                    0x0E74, 
                                    0x11F8, 
                                    0x1518, 
                                    0x2F, 
                                    0x2F, 
                                    0x2F, 
                                    0x2F, 
                                    0x36, 
                                    0x39, 
                                    0x3B, 
                                    0x3D, 
                                    0x44, 
                                    0x4A
                                }, 

                                Package (0x14)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0834, 
                                    0x08FC, 
                                    0x09C4, 
                                    0x0B54, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1130, 
                                    0x1518, 
                                    0x43, 
                                    0x43, 
                                    0x43, 
                                    0x43, 
                                    0x48, 
                                    0x4D, 
                                    0x51, 
                                    0x55, 
                                    0x59, 
                                    0x5C
                                }, 

                                Package (0x14)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0834, 
                                    0x08FC, 
                                    0x09C4, 
                                    0x0B54, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1130, 
                                    0x1518, 
                                    0x28, 
                                    0x2D, 
                                    0x32, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F
                                }, 

                                Package (0x14)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x0834, 
                                    0x0898, 
                                    0x0A8C, 
                                    0x0B54, 
                                    0x0DAC, 
                                    0x0E74, 
                                    0x11F8, 
                                    0x1518, 
                                    0x2F, 
                                    0x2F, 
                                    0x2F, 
                                    0x2F, 
                                    0x36, 
                                    0x39, 
                                    0x3B, 
                                    0x3D, 
                                    0x44, 
                                    0x4A
                                }
                            })
                            Method (SFTW, 1, NotSerialized)
                            {
                                If ((MCSK == 0x02))
                                {
                                    If ((GTYP == 0x06))
                                    {
                                        Return (DerefOf (LFT2 [Arg0]))
                                    }
                                    Else
                                    {
                                        Return (DerefOf (LFT1 [Arg0]))
                                    }
                                }
                                ElseIf ((GTYP == 0x06))
                                {
                                    Return (DerefOf (LFT2 [Arg0]))
                                }
                                Else
                                {
                                    Return (DerefOf (LFT0 [Arg0]))
                                }
                            }

                            Method (WQA3, 1, NotSerialized)
                            {
                                Name (FACT, Buffer (0x48)
                                {
                                     0x00                                             // .
                                })
                                CreateWordField (FACT, Zero, FNMD)
                                CreateWordField (FACT, 0x02, FNID)
                                CreateDWordField (FACT, 0x04, FNLE)
                                CreateWordField (FACT, 0x08, FNS0)
                                CreateWordField (FACT, 0x0A, FNS1)
                                CreateWordField (FACT, 0x0C, FNS2)
                                CreateWordField (FACT, 0x0E, FNS3)
                                CreateWordField (FACT, 0x10, FNS4)
                                CreateWordField (FACT, 0x12, FNS5)
                                CreateWordField (FACT, 0x14, FNS6)
                                CreateWordField (FACT, 0x16, FNS7)
                                CreateWordField (FACT, 0x18, FNS8)
                                CreateWordField (FACT, 0x1A, FNS9)
                                CreateDWordField (FACT, 0x1C, SEID)
                                CreateDWordField (FACT, 0x20, STLE)
                                CreateWordField (FACT, 0x24, SST0)
                                CreateWordField (FACT, 0x26, SST1)
                                CreateWordField (FACT, 0x28, SST2)
                                CreateWordField (FACT, 0x2A, SST3)
                                CreateWordField (FACT, 0x2C, SST4)
                                CreateWordField (FACT, 0x2E, SST5)
                                CreateWordField (FACT, 0x30, SST6)
                                CreateWordField (FACT, 0x32, SST7)
                                CreateWordField (FACT, 0x34, SST8)
                                CreateWordField (FACT, 0x36, SST9)
                                CreateByteField (FACT, 0x38, SOUA)
                                CreateByteField (FACT, 0x39, EOUA)
                                CreateWordField (FACT, 0x3A, CFMX)
                                CreateByteField (FACT, 0x3C, DMFS)
                                CreateByteField (FACT, 0x3D, RESE)
                                CreateWordField (FACT, 0x3E, CFMN)
                                CreateWordField (FACT, 0x40, FSPS)
                                CreateWordField (FACT, 0x42, MXST)
                                CreateWordField (FACT, 0x44, MNST)
                                CreateWordField (FACT, 0x46, STTS)
                                If ((Arg0 == Zero))
                                {
                                    Local0 = SFTW (Zero)
                                    FNMD = One
                                    FNID = One
                                    SEID = 0x04
                                    DMFS = 0x07
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = SFTW (One)
                                    FNMD = One
                                    FNID = One
                                    SEID = One
                                    DMFS = 0x07
                                }

                                If ((Arg0 == 0x02))
                                {
                                    Local0 = SFTW (0x02)
                                    FNMD = One
                                    FNID = 0x02
                                    SEID = 0x05
                                    DMFS = 0x07
                                }

                                If ((Arg0 == 0x03))
                                {
                                    Local0 = SFTW (0x03)
                                    FNMD = 0x02
                                    FNID = One
                                    SEID = 0x04
                                    DMFS = 0x08
                                }

                                If ((Arg0 == 0x04))
                                {
                                    Local0 = SFTW (0x04)
                                    FNMD = 0x02
                                    FNID = One
                                    SEID = One
                                    DMFS = 0x08
                                }

                                If ((Arg0 == 0x05))
                                {
                                    Local0 = SFTW (0x05)
                                    FNMD = 0x02
                                    FNID = 0x02
                                    SEID = 0x05
                                    DMFS = 0x08
                                }

                                If ((Arg0 == 0x06))
                                {
                                    Local0 = SFTW (0x06)
                                    FNMD = 0x03
                                    FNID = One
                                    SEID = 0x04
                                    DMFS = 0x09
                                }

                                If ((Arg0 == 0x07))
                                {
                                    Local0 = SFTW (0x07)
                                    FNMD = 0x03
                                    FNID = One
                                    SEID = One
                                    DMFS = 0x09
                                }

                                If ((Arg0 == 0x08))
                                {
                                    Local0 = SFTW (0x08)
                                    FNMD = 0x03
                                    FNID = 0x02
                                    SEID = 0x05
                                    DMFS = 0x09
                                }

                                If ((Arg0 == 0x09))
                                {
                                    Local0 = SFTW (0x09)
                                    FNMD = 0xFF
                                    FNID = One
                                    SEID = 0x04
                                    DMFS = 0x08
                                }

                                If ((Arg0 == 0x0A))
                                {
                                    Local0 = SFTW (0x0A)
                                    FNMD = 0xFF
                                    FNID = One
                                    SEID = One
                                    DMFS = 0x08
                                }

                                If ((Arg0 == 0x0B))
                                {
                                    Local0 = SFTW (0x0B)
                                    FNMD = 0xFF
                                    FNID = 0x02
                                    SEID = 0x05
                                    DMFS = 0x08
                                }

                                If ((Arg0 == 0x0C))
                                {
                                    Local0 = SFTW (0x0C)
                                    FNMD = 0xE0
                                    FNID = One
                                    SEID = 0x04
                                    DMFS = 0x0A
                                }

                                If ((Arg0 == 0x0D))
                                {
                                    Local0 = SFTW (0x0D)
                                    FNMD = 0xE0
                                    FNID = One
                                    SEID = One
                                    DMFS = 0x0A
                                }

                                If ((Arg0 == 0x0E))
                                {
                                    Local0 = SFTW (0x0E)
                                    FNMD = 0xE0
                                    FNID = 0x02
                                    SEID = 0x05
                                    DMFS = 0x0A
                                }

                                FNLE = 0x0A
                                FNS0 = DerefOf (Local0 [Zero])
                                FNS1 = DerefOf (Local0 [One])
                                FNS2 = DerefOf (Local0 [0x02])
                                FNS3 = DerefOf (Local0 [0x03])
                                FNS4 = DerefOf (Local0 [0x04])
                                FNS5 = DerefOf (Local0 [0x05])
                                FNS6 = DerefOf (Local0 [0x06])
                                FNS7 = DerefOf (Local0 [0x07])
                                FNS8 = DerefOf (Local0 [0x08])
                                FNS9 = DerefOf (Local0 [0x09])
                                CFMN = DerefOf (Local0 [Zero])
                                CFMX = DerefOf (Local0 [0x09])
                                STLE = 0x0A
                                SST0 = DerefOf (Local0 [0x0A])
                                SST1 = DerefOf (Local0 [0x0B])
                                SST2 = DerefOf (Local0 [0x0C])
                                SST3 = DerefOf (Local0 [0x0D])
                                SST4 = DerefOf (Local0 [0x0E])
                                SST5 = DerefOf (Local0 [0x0F])
                                SST6 = DerefOf (Local0 [0x10])
                                SST7 = DerefOf (Local0 [0x11])
                                SST8 = DerefOf (Local0 [0x12])
                                SST9 = DerefOf (Local0 [0x13])
                                MNST = DerefOf (Local0 [0x0A])
                                MXST = DerefOf (Local0 [0x13])
                                SOUA = Zero
                                EOUA = 0x0A
                                RESE = Zero
                                FSPS = Zero
                                STTS = Zero
                                Return (FACT) /* \_SB_.GZFD.WQA3.FACT */
                            }

                            Method (WQA4, 1, NotSerialized)
                            {
                                Name (LTDA, Buffer (0x07)
                                {
                                     0x00                                             // .
                                })
                                CreateByteField (LTDA, Zero, LTID)
                                CreateByteField (LTDA, One, COTI)
                                CreateByteField (LTDA, 0x02, LTTP)
                                CreateByteField (LTDA, 0x03, STTN)
                                CreateByteField (LTDA, 0x04, DFST)
                                CreateByteField (LTDA, 0x05, BNLE)
                                CreateByteField (LTDA, 0x06, DBNL)
                                If ((MCSK == 0x02))
                                {
                                    If ((^^PCI0.LPC0.EC0.YALG == One))
                                    {
                                        If ((Arg0 == Zero))
                                        {
                                            LTID = Zero
                                            COTI = One
                                            LTTP = Zero
                                            STTN = 0x02
                                            DFST = One
                                            BNLE = 0x03
                                            DBNL = One
                                            Return (LTDA) /* \_SB_.GZFD.WQA4.LTDA */
                                        }

                                        If ((Arg0 == One))
                                        {
                                            LTID = 0xFF
                                            COTI = Zero
                                            LTTP = Zero
                                            STTN = Zero
                                            DFST = Zero
                                            BNLE = Zero
                                            DBNL = Zero
                                            Return (LTDA) /* \_SB_.GZFD.WQA4.LTDA */
                                        }

                                        If ((Arg0 == 0x02))
                                        {
                                            LTID = 0xFF
                                            COTI = Zero
                                            LTTP = Zero
                                            STTN = Zero
                                            DFST = Zero
                                            BNLE = Zero
                                            DBNL = Zero
                                            Return (LTDA) /* \_SB_.GZFD.WQA4.LTDA */
                                        }

                                        If ((Arg0 == 0x03))
                                        {
                                            If ((CNFG == One))
                                            {
                                                LTID = 0x03
                                            }
                                            Else
                                            {
                                                LTID = 0xFF
                                            }

                                            COTI = Zero
                                            LTTP = Zero
                                            STTN = Zero
                                            DFST = Zero
                                            BNLE = Zero
                                            DBNL = Zero
                                            Return (LTDA) /* \_SB_.GZFD.WQA4.LTDA */
                                        }

                                        If ((Arg0 == 0x04))
                                        {
                                            LTID = 0x04
                                            COTI = One
                                            LTTP = Zero
                                            STTN = 0x04
                                            DFST = One
                                            BNLE = Zero
                                            DBNL = Zero
                                            Return (LTDA) /* \_SB_.GZFD.WQA4.LTDA */
                                        }

                                        If ((Arg0 == 0x05))
                                        {
                                            LTID = 0xFF
                                            COTI = Zero
                                            LTTP = Zero
                                            STTN = Zero
                                            DFST = Zero
                                            BNLE = Zero
                                            DBNL = Zero
                                            Return (LTDA) /* \_SB_.GZFD.WQA4.LTDA */
                                        }
                                    }
                                    Else
                                    {
                                        If ((Arg0 == Zero))
                                        {
                                            LTID = Zero
                                            COTI = Zero
                                            LTTP = One
                                            STTN = 0x06
                                            DFST = Zero
                                            BNLE = 0x04
                                            DBNL = 0x03
                                            Return (LTDA) /* \_SB_.GZFD.WQA4.LTDA */
                                        }

                                        If ((Arg0 == One))
                                        {
                                            LTID = One
                                            COTI = Zero
                                            LTTP = One
                                            STTN = 0x06
                                            DFST = Zero
                                            BNLE = 0x04
                                            DBNL = 0x03
                                            Return (LTDA) /* \_SB_.GZFD.WQA4.LTDA */
                                        }

                                        If ((Arg0 == 0x02))
                                        {
                                            LTID = 0x02
                                            COTI = Zero
                                            LTTP = One
                                            STTN = 0x06
                                            DFST = Zero
                                            BNLE = 0x04
                                            DBNL = 0x03
                                            Return (LTDA) /* \_SB_.GZFD.WQA4.LTDA */
                                        }

                                        If ((Arg0 == 0x03))
                                        {
                                            If ((CNFG == One))
                                            {
                                                LTID = 0x03
                                            }
                                            Else
                                            {
                                                LTID = 0xFF
                                            }

                                            COTI = One
                                            LTTP = One
                                            STTN = 0x04
                                            DFST = Zero
                                            BNLE = 0x04
                                            DBNL = 0x03
                                            Return (LTDA) /* \_SB_.GZFD.WQA4.LTDA */
                                        }

                                        If ((Arg0 == 0x04))
                                        {
                                            LTID = 0x04
                                            COTI = 0x02
                                            LTTP = One
                                            STTN = 0x04
                                            DFST = One
                                            BNLE = Zero
                                            DBNL = Zero
                                            Return (LTDA) /* \_SB_.GZFD.WQA4.LTDA */
                                        }

                                        If ((Arg0 == 0x05))
                                        {
                                            LTID = 0x05
                                            COTI = One
                                            LTTP = Zero
                                            STTN = 0x02
                                            DFST = One
                                            BNLE = Zero
                                            DBNL = Zero
                                            Return (LTDA) /* \_SB_.GZFD.WQA4.LTDA */
                                        }
                                    }
                                }
                                Else
                                {
                                    If ((^^PCI0.LPC0.EC0.KBLT == Zero))
                                    {
                                        If ((Arg0 == Zero))
                                        {
                                            LTID = Zero
                                            COTI = One
                                            If ((YKBT == One))
                                            {
                                                LTTP = 0x02
                                            }
                                            Else
                                            {
                                                LTTP = Zero
                                            }

                                            STTN = 0x02
                                            DFST = One
                                            BNLE = 0x03
                                            DBNL = One
                                            Return (LTDA) /* \_SB_.GZFD.WQA4.LTDA */
                                        }
                                    }
                                    ElseIf ((^^PCI0.LPC0.EC0.KBLT == One))
                                    {
                                        If ((Arg0 == Zero))
                                        {
                                            LTID = Zero
                                            COTI = Zero
                                            LTTP = One
                                            STTN = 0x05
                                            If ((^^PCI0.LPC0.EC0.YALG == 0x02))
                                            {
                                                DFST = One
                                            }
                                            Else
                                            {
                                                DFST = Zero
                                            }

                                            BNLE = 0x04
                                            DBNL = 0x03
                                            Return (LTDA) /* \_SB_.GZFD.WQA4.LTDA */
                                        }
                                    }

                                    If ((Arg0 == One))
                                    {
                                        LTID = 0xFF
                                        COTI = Zero
                                        LTTP = Zero
                                        STTN = Zero
                                        DFST = Zero
                                        BNLE = Zero
                                        DBNL = Zero
                                        Return (LTDA) /* \_SB_.GZFD.WQA4.LTDA */
                                    }

                                    If ((Arg0 == 0x02))
                                    {
                                        LTID = 0xFF
                                        COTI = Zero
                                        LTTP = Zero
                                        STTN = Zero
                                        DFST = Zero
                                        BNLE = Zero
                                        DBNL = Zero
                                        Return (LTDA) /* \_SB_.GZFD.WQA4.LTDA */
                                    }

                                    If ((Arg0 == 0x03))
                                    {
                                        If ((CNFG == One))
                                        {
                                            LTID = 0x03
                                        }
                                        Else
                                        {
                                            LTID = 0xFF
                                        }

                                        COTI = One
                                        If ((^^PCI0.LPC0.EC0.KBLT == One))
                                        {
                                            LTTP = One
                                        }
                                        Else
                                        {
                                            LTTP = Zero
                                        }

                                        STTN = 0x02
                                        DFST = One
                                        BNLE = Zero
                                        DBNL = Zero
                                        Return (LTDA) /* \_SB_.GZFD.WQA4.LTDA */
                                    }

                                    If ((Arg0 == 0x04))
                                    {
                                        LTID = 0x04
                                        COTI = One
                                        LTTP = Zero
                                        STTN = 0x04
                                        DFST = One
                                        BNLE = Zero
                                        DBNL = Zero
                                        Return (LTDA) /* \_SB_.GZFD.WQA4.LTDA */
                                    }

                                    If ((Arg0 == 0x05))
                                    {
                                        LTID = 0xFF
                                        COTI = Zero
                                        LTTP = Zero
                                        STTN = Zero
                                        DFST = Zero
                                        BNLE = Zero
                                        DBNL = Zero
                                        Return (LTDA) /* \_SB_.GZFD.WQA4.LTDA */
                                    }
                                }
                            }

                            Name (COC0, Buffer (0x28)
                            {
                                 0x00                                             // .
                            })
                            CreateByteField (COC0, Zero, CMOD)
                            CreateByteField (COC0, One, CTP1)
                            CreateWordField (COC0, 0x02, CRES)
                            CreateDWordField (COC0, 0x04, CTUN)
                            CreateDWordField (COC0, 0x08, CDEF)
                            CreateDWordField (COC0, 0x0C, CVAL)
                            CreateDWordField (COC0, 0x10, CMIN)
                            CreateDWordField (COC0, 0x14, CMAX)
                            CreateDWordField (COC0, 0x18, CSCA)
                            CreateDWordField (COC0, 0x1C, CORI)
                            CreateDWordField (COC0, 0x20, CNOC)
                            CreateDWordField (COC0, 0x24, CINT)
                            Method (WQA6, 1, NotSerialized)
                            {
                                If ((Arg0 == Zero))
                                {
                                    CMOD = Zero
                                    CTP1 = One
                                    CTUN = 0x414D4401
                                    CDEF = 0x40E00000
                                    Divide (PBOS, 0x64, Local1, Local0)
                                    CVAL = FTOI (Local0, Zero)
                                    CMIN = 0x3F800000
                                    CMAX = 0x41200000
                                    CSCA = 0x3F800000
                                    CORI = One
                                    CNOC = 0x04
                                    CINT = 0xC8
                                    Return (COC0) /* \_SB_.GZFD.COC0 */
                                }

                                If ((Arg0 == One))
                                {
                                    CMOD = Zero
                                    CTP1 = One
                                    CTUN = 0x414D4402
                                    CDEF = 0x43480000
                                    CVAL = FTOI (MCBC, Zero)
                                    CMIN = Zero
                                    CMAX = 0x43480000
                                    CSCA = 0x3F800000
                                    CORI = One
                                    CNOC = 0x04
                                    CINT = 0xC8
                                    Return (COC0) /* \_SB_.GZFD.COC0 */
                                }

                                If ((Arg0 == 0x02))
                                {
                                    CMOD = Zero
                                    CTP1 = One
                                    CTUN = 0x414D4403
                                    CDEF = Zero
                                    CVAL = FTOI (CCOM, CBCS)
                                    CMIN = 0xC0A00000
                                    CMAX = 0x40A00000
                                    CSCA = 0x3F800000
                                    CORI = One
                                    CNOC = 0x04
                                    CINT = 0xC8
                                    Return (COC0) /* \_SB_.GZFD.COC0 */
                                }
                            }

                            Method (WQA7, 1, NotSerialized)
                            {
                                If ((Arg0 == Zero))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x01, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == One))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x01, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x02))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x03))
                                {
                                    If (((PANT & 0x04) == 0x04))
                                    {
                                        Return (Buffer (0x0C)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x01, 0x00, 0x00, 0x00                           // ....
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x0C)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
                                        })
                                    }
                                }

                                If ((Arg0 == 0x04))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x05))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x06))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x07))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x01, 0x00, 0x01, 0x03, 0x07, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x08))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x02, 0x00, 0x01, 0x03, 0x07, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x09))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x0A))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x01, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x0B))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x01, 0x04, 0x01, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x01, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x0C))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x02, 0x04, 0x07, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x0D))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x01, 0x00, 0x03, 0x04, 0x07, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x01, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x0E))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x02, 0x00, 0x03, 0x04, 0x07, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x01, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x0F))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x01, 0x05, 0x03, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x01, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x10))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x04, 0x05, 0x03, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x01, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x11))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x05, 0x05, 0x03, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x01, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x12))
                                {
                                    If ((DSMF == 0x02))
                                    {
                                        Return (Buffer (0x0C)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x0B, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
                                        })
                                    }
                                    ElseIf (((DSMF == 0x03) || (DSMF == 0x04)))
                                    {
                                        Return (Buffer (0x0C)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
                                        })
                                    }
                                }

                                If ((Arg0 == 0x13))
                                {
                                    If ((MCSK == 0x02))
                                    {
                                        Return (Buffer (0x0C)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x0E, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x01, 0x00, 0x00, 0x00                           // ....
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x0C)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
                                        })
                                    }
                                }

                                If ((Arg0 == 0x14))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x15))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x05, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x01, 0x00, 0x00, 0x00                           // ....
                                    })
                                }
                            }

                            Method (WQA8, 1, NotSerialized)
                            {
                                If ((MCSK == One))
                                {
                                    If (((GTYP == 0x02) || (GTYP == 0x03)))
                                    {
                                        If (((CPTY == 0x07) || (CPTY == 0x05)))
                                        {
                                            If ((Arg0 == Zero))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // A.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // U.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x02))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x7D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // }.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x03))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // U.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x04))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x7D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // }.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x05))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00   // 2...U...
                                                })
                                            }

                                            If ((Arg0 == 0x06))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00   // 2...U...
                                                })
                                            }

                                            If ((Arg0 == 0x07))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x4B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // K.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00   // 2...U...
                                                })
                                            }

                                            If ((Arg0 == 0x08))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00   // 2...U...
                                                })
                                            }

                                            If ((Arg0 == 0x09))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00   // 2...U...
                                                })
                                            }

                                            If ((Arg0 == 0x0A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x4B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // K.......
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x66, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // f.......
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x03, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x66, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // f.......
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0E))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x03, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }
                                        }
                                        Else
                                        {
                                            If ((Arg0 == Zero))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // A.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // U.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x02))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x7D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // }.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x03))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // U.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x04))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x7D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // }.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((CPTY == 0x09))
                                            {
                                                If ((Arg0 == 0x05))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                        /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // 2...i...
                                                    })
                                                }

                                                If ((Arg0 == 0x06))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                        /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // 2...i...
                                                    })
                                                }

                                                If ((Arg0 == 0x07))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x03, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x5F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // _.......
                                                        /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // 2...i...
                                                    })
                                                }

                                                If ((Arg0 == 0x08))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0xFF, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                        /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // 2...i...
                                                    })
                                                }

                                                If ((Arg0 == 0x09))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0xE0, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                        /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // 2...i...
                                                    })
                                                }
                                            }
                                            Else
                                            {
                                                If ((Arg0 == 0x05))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                        /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00   // 2...s...
                                                    })
                                                }

                                                If ((Arg0 == 0x06))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                        /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00   // 2...s...
                                                    })
                                                }

                                                If ((Arg0 == 0x07))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x03, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x69, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // i.......
                                                        /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00   // 2...s...
                                                    })
                                                }

                                                If ((Arg0 == 0x08))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0xFF, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                        /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00   // 2...s...
                                                    })
                                                }

                                                If ((Arg0 == 0x09))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0xE0, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x6E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // n.......
                                                        /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00   // 2...s...
                                                    })
                                                }
                                            }

                                            If ((Arg0 == 0x0A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x4B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // K.......
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x66, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // f.......
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x03, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x66, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // f.......
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0E))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x03, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x0F))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                            })
                                        }

                                        If ((Arg0 == 0x10))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                            })
                                        }

                                        If ((Arg0 == 0x11))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                            })
                                        }

                                        If ((HTCS == One))
                                        {
                                            If ((Arg0 == 0x12))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                    /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                                })
                                            }

                                            If ((Arg0 == 0x13))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                    /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                                })
                                            }
                                        }
                                        Else
                                        {
                                            If ((Arg0 == 0x12))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x04, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                    /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                                })
                                            }

                                            If ((Arg0 == 0x13))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x04, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                    /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x14))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x15))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x16))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x17))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xFF, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x18))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xE0, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If (((CPTY == 0x07) || (CPTY == 0x05)))
                                        {
                                            If ((Arg0 == 0x19))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x23, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // #.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                })
                                            }

                                            If ((Arg0 == 0x1A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                })
                                            }

                                            If ((Arg0 == 0x1B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                })
                                            }

                                            If ((Arg0 == 0x1C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                })
                                            }

                                            If ((Arg0 == 0x1D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x3C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // <.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                })
                                            }
                                        }
                                        ElseIf ((CPTY == 0x09))
                                        {
                                            If ((Arg0 == 0x19))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x23, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // #.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // ....d...
                                                })
                                            }

                                            If ((Arg0 == 0x1A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // ....d...
                                                })
                                            }

                                            If ((Arg0 == 0x1B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // ....d...
                                                })
                                            }

                                            If ((Arg0 == 0x1C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // ....d...
                                                })
                                            }

                                            If ((Arg0 == 0x1D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x4B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // K.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // ....d...
                                                })
                                            }
                                        }
                                        Else
                                        {
                                            If ((Arg0 == 0x19))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x23, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // #.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // ....i...
                                                })
                                            }

                                            If ((Arg0 == 0x1A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // ....i...
                                                })
                                            }

                                            If ((Arg0 == 0x1B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // ....i...
                                                })
                                            }

                                            If ((Arg0 == 0x1C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // ....i...
                                                })
                                            }

                                            If ((Arg0 == 0x1D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // ....i...
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x1E))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x1F))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x20))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x21))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xFF, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x22))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xE0, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If (((CPTY == 0x07) || (CPTY == 0x05)))
                                        {
                                            If ((Arg0 == 0x23))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x24))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x25))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x26))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x01, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x27))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x01, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x28))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00   // 7.......
                                                })
                                            }

                                            If ((Arg0 == 0x29))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00   // 7.......
                                                })
                                            }

                                            If ((Arg0 == 0x2A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // x.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00   // 7.......
                                                })
                                            }

                                            If ((Arg0 == 0x2B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x02, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00   // 7.......
                                                })
                                            }

                                            If ((Arg0 == 0x2C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x02, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x87, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00   // 7.......
                                                })
                                            }

                                            If ((Arg0 == 0x2D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x2E))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x2F))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x30))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x31))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x32))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                                })
                                            }

                                            If ((Arg0 == 0x33))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                                })
                                            }

                                            If ((Arg0 == 0x34))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                                })
                                            }

                                            If ((Arg0 == 0x35))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                                })
                                            }

                                            If ((Arg0 == 0x36))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x3C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // <.......
                                                    /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                                })
                                            }
                                        }
                                        Else
                                        {
                                            If ((Arg0 == 0x23))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x24))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x25))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x19, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x26))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x01, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x27))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x01, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x28))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00   // 7...x...
                                                })
                                            }

                                            If ((Arg0 == 0x29))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00   // 7...x...
                                                })
                                            }

                                            If ((Arg0 == 0x2A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x73, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // s.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00   // 7...x...
                                                })
                                            }

                                            If ((Arg0 == 0x2B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x02, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00   // 7...x...
                                                })
                                            }

                                            If ((Arg0 == 0x2C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x02, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // x.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00   // 7...x...
                                                })
                                            }

                                            If ((Arg0 == 0x2D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x2E))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x2F))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x30))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x31))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((CPTY == 0x09))
                                            {
                                                If ((Arg0 == 0x32))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x01, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                                    })
                                                }

                                                If ((Arg0 == 0x33))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x02, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                        /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                                    })
                                                }

                                                If ((Arg0 == 0x34))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x03, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                        /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                                    })
                                                }

                                                If ((Arg0 == 0x35))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0xFF, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                        /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                                    })
                                                }

                                                If ((Arg0 == 0x36))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0xE0, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x4B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // K.......
                                                        /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                                    })
                                                }
                                            }
                                            Else
                                            {
                                                If ((Arg0 == 0x32))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x01, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                    })
                                                }

                                                If ((Arg0 == 0x33))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x02, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                        /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                    })
                                                }

                                                If ((Arg0 == 0x34))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x03, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                        /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                    })
                                                }

                                                If ((Arg0 == 0x35))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0xFF, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                        /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                    })
                                                }

                                                If ((Arg0 == 0x36))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0xE0, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                                        /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                    })
                                                }
                                            }
                                        }

                                        If ((Arg0 == 0x37))
                                        {
                                            If ((SCOC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x38))
                                        {
                                            If ((SCOC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x08, 0x01, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x39))
                                        {
                                            If ((SCOC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x08, 0x01, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3A))
                                        {
                                            If ((SCOC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x08, 0x01, 0x97, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3B))
                                        {
                                            If ((SCOC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x08, 0x01, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3C))
                                        {
                                            If ((GOCC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3D))
                                        {
                                            If ((GOCC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x05, 0x02, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3E))
                                        {
                                            If ((GOCC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x05, 0x02, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3F))
                                        {
                                            If ((GOCC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x05, 0x02, 0x97, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x40))
                                        {
                                            If ((GOCC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x05, 0x02, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x41))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x0B, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                /* 0008 */  0x0F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x42))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x0B, 0x02, 0x00, 0x04, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x43))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x0B, 0x02, 0x00, 0x04, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x44))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xFF, 0x0B, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x45))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xE0, 0x0B, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }
                                    ElseIf ((GTYP == 0x07))
                                    {
                                        If (((CPTY == 0x07) || (CPTY == 0x05)))
                                        {
                                            If ((Arg0 == Zero))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // A.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // U.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x02))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x7D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // }.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x03))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // U.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x04))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x7D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // }.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x05))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00   // 2...U...
                                                })
                                            }

                                            If ((Arg0 == 0x06))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00   // 2...U...
                                                })
                                            }

                                            If ((Arg0 == 0x07))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x4B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // K.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00   // 2...U...
                                                })
                                            }

                                            If ((Arg0 == 0x08))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00   // 2...U...
                                                })
                                            }

                                            If ((Arg0 == 0x09))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00   // 2...U...
                                                })
                                            }

                                            If ((Arg0 == 0x0A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x4B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // K.......
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x66, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // f.......
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x03, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x66, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // f.......
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0E))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x03, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }
                                        }
                                        Else
                                        {
                                            If ((Arg0 == Zero))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // A.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // U.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x02))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x7D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // }.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x03))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // U.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x04))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x7D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // }.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((CPTY == 0x09))
                                            {
                                                If ((Arg0 == 0x05))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                        /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // 2...i...
                                                    })
                                                }

                                                If ((Arg0 == 0x06))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                        /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // 2...i...
                                                    })
                                                }

                                                If ((Arg0 == 0x07))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x03, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x5F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // _.......
                                                        /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // 2...i...
                                                    })
                                                }

                                                If ((Arg0 == 0x08))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0xFF, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                        /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // 2...i...
                                                    })
                                                }

                                                If ((Arg0 == 0x09))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0xE0, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                        /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // 2...i...
                                                    })
                                                }
                                            }
                                            Else
                                            {
                                                If ((Arg0 == 0x05))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                        /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00   // 2...s...
                                                    })
                                                }

                                                If ((Arg0 == 0x06))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                        /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00   // 2...s...
                                                    })
                                                }

                                                If ((Arg0 == 0x07))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x03, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x69, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // i.......
                                                        /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00   // 2...s...
                                                    })
                                                }

                                                If ((Arg0 == 0x08))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0xFF, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                        /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00   // 2...s...
                                                    })
                                                }

                                                If ((Arg0 == 0x09))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0xE0, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x6E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // n.......
                                                        /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00   // 2...s...
                                                    })
                                                }
                                            }

                                            If ((Arg0 == 0x0A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x4B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // K.......
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x66, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // f.......
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x03, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x66, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // f.......
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0E))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x03, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x0F))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                            })
                                        }

                                        If ((Arg0 == 0x10))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                            })
                                        }

                                        If ((Arg0 == 0x11))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                            })
                                        }

                                        If ((HTCS == One))
                                        {
                                            If ((Arg0 == 0x12))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                    /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                                })
                                            }

                                            If ((Arg0 == 0x13))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                    /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                                })
                                            }
                                        }
                                        Else
                                        {
                                            If ((Arg0 == 0x12))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x04, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                    /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                                })
                                            }

                                            If ((Arg0 == 0x13))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x04, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                    /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x14))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x15))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x16))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x17))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xFF, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x18))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xE0, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If (((CPTY == 0x07) || (CPTY == 0x05)))
                                        {
                                            If ((Arg0 == 0x19))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x23, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // #.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                })
                                            }

                                            If ((Arg0 == 0x1A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                })
                                            }

                                            If ((Arg0 == 0x1B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                })
                                            }

                                            If ((Arg0 == 0x1C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                })
                                            }

                                            If ((Arg0 == 0x1D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x3C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // <.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                })
                                            }
                                        }
                                        ElseIf ((CPTY == 0x09))
                                        {
                                            If ((Arg0 == 0x19))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x23, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // #.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // ....d...
                                                })
                                            }

                                            If ((Arg0 == 0x1A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // ....d...
                                                })
                                            }

                                            If ((Arg0 == 0x1B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // ....d...
                                                })
                                            }

                                            If ((Arg0 == 0x1C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // ....d...
                                                })
                                            }

                                            If ((Arg0 == 0x1D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x4B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // K.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // ....d...
                                                })
                                            }
                                        }
                                        Else
                                        {
                                            If ((Arg0 == 0x19))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x23, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // #.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // ....i...
                                                })
                                            }

                                            If ((Arg0 == 0x1A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // ....i...
                                                })
                                            }

                                            If ((Arg0 == 0x1B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // ....i...
                                                })
                                            }

                                            If ((Arg0 == 0x1C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // ....i...
                                                })
                                            }

                                            If ((Arg0 == 0x1D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // ....i...
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x1E))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x1F))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x20))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x21))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xFF, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x22))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xE0, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If (((CPTY == 0x07) || (CPTY == 0x05)))
                                        {
                                            If ((Arg0 == 0x23))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x24))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x25))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x26))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x01, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x27))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x01, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x28))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00   // 7.......
                                                })
                                            }

                                            If ((Arg0 == 0x29))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00   // 7.......
                                                })
                                            }

                                            If ((Arg0 == 0x2A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // x.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00   // 7.......
                                                })
                                            }

                                            If ((Arg0 == 0x2B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x02, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00   // 7.......
                                                })
                                            }

                                            If ((Arg0 == 0x2C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x02, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x87, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00   // 7.......
                                                })
                                            }

                                            If ((Arg0 == 0x2D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x2E))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x2F))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x30))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x31))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x32))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                                })
                                            }

                                            If ((Arg0 == 0x33))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                                })
                                            }

                                            If ((Arg0 == 0x34))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                                })
                                            }

                                            If ((Arg0 == 0x35))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                                })
                                            }

                                            If ((Arg0 == 0x36))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x3C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // <.......
                                                    /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                                })
                                            }
                                        }
                                        Else
                                        {
                                            If ((Arg0 == 0x23))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x24))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x25))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x19, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x26))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x01, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x27))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x01, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x28))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00   // 7...x...
                                                })
                                            }

                                            If ((Arg0 == 0x29))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00   // 7...x...
                                                })
                                            }

                                            If ((Arg0 == 0x2A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x73, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // s.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00   // 7...x...
                                                })
                                            }

                                            If ((Arg0 == 0x2B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x02, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00   // 7...x...
                                                })
                                            }

                                            If ((Arg0 == 0x2C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x02, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // x.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00   // 7...x...
                                                })
                                            }

                                            If ((Arg0 == 0x2D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x2E))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x2F))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x30))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x31))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((CPTY == 0x09))
                                            {
                                                If ((Arg0 == 0x32))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x01, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                                    })
                                                }

                                                If ((Arg0 == 0x33))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x02, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                        /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                                    })
                                                }

                                                If ((Arg0 == 0x34))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x03, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                        /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                                    })
                                                }

                                                If ((Arg0 == 0x35))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0xFF, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                        /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                                    })
                                                }

                                                If ((Arg0 == 0x36))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0xE0, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x4B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // K.......
                                                        /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                                    })
                                                }
                                            }
                                            Else
                                            {
                                                If ((Arg0 == 0x32))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x01, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                    })
                                                }

                                                If ((Arg0 == 0x33))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x02, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                        /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                    })
                                                }

                                                If ((Arg0 == 0x34))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x03, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                        /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                    })
                                                }

                                                If ((Arg0 == 0x35))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0xFF, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                        /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                    })
                                                }

                                                If ((Arg0 == 0x36))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0xE0, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                                        /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                    })
                                                }
                                            }
                                        }

                                        If ((Arg0 == 0x37))
                                        {
                                            If ((SCOC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x38))
                                        {
                                            If ((SCOC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x08, 0x01, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x39))
                                        {
                                            If ((SCOC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x08, 0x01, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3A))
                                        {
                                            If ((SCOC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x08, 0x01, 0x97, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3B))
                                        {
                                            If ((SCOC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x08, 0x01, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3C))
                                        {
                                            If ((GOCC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3D))
                                        {
                                            If ((GOCC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x05, 0x02, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3E))
                                        {
                                            If ((GOCC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x05, 0x02, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3F))
                                        {
                                            If ((GOCC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x05, 0x02, 0x97, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x40))
                                        {
                                            If ((GOCC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x05, 0x02, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x41))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x0B, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                /* 0008 */  0x0F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x42))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x0B, 0x02, 0x00, 0x04, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x43))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x0B, 0x02, 0x00, 0x04, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x44))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xFF, 0x0B, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x45))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xE0, 0x0B, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }
                                    Else
                                    {
                                        If (((CPTY == 0x07) || (CPTY == 0x05)))
                                        {
                                            If ((Arg0 == Zero))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // A.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // 7.......
                                                })
                                            }

                                            If ((Arg0 == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // U.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // 7.......
                                                })
                                            }

                                            If ((Arg0 == 0x02))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x7D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // }.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // 7.......
                                                })
                                            }

                                            If ((Arg0 == 0x03))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // U.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // 7.......
                                                })
                                            }

                                            If ((Arg0 == 0x04))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x7D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // }.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // 7.......
                                                })
                                            }

                                            If ((Arg0 == 0x05))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x28, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00   // (...U...
                                                })
                                            }

                                            If ((Arg0 == 0x06))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                    /* 0010 */  0x28, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00   // (...U...
                                                })
                                            }

                                            If ((Arg0 == 0x07))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x4B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // K.......
                                                    /* 0010 */  0x28, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00   // (...U...
                                                })
                                            }

                                            If ((Arg0 == 0x08))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                    /* 0010 */  0x28, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00   // (...U...
                                                })
                                            }

                                            If ((Arg0 == 0x09))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x28, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00   // (...U...
                                                })
                                            }

                                            If ((Arg0 == 0x0A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x4B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // K.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x0B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x66, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // f.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x0C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x0D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x03, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x66, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // f.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x0E))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x03, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }
                                        }
                                        Else
                                        {
                                            If ((Arg0 == Zero))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // A.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // 7.......
                                                })
                                            }

                                            If ((Arg0 == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // U.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // 7.......
                                                })
                                            }

                                            If ((Arg0 == 0x02))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x7D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // }.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // 7.......
                                                })
                                            }

                                            If ((Arg0 == 0x03))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // U.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // 7.......
                                                })
                                            }

                                            If ((Arg0 == 0x04))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x7D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // }.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // 7.......
                                                })
                                            }

                                            If ((Arg0 == 0x05))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x28, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // (...i...
                                                })
                                            }

                                            If ((Arg0 == 0x06))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                    /* 0010 */  0x28, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // (...i...
                                                })
                                            }

                                            If ((Arg0 == 0x07))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x5F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // _.......
                                                    /* 0010 */  0x28, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // (...i...
                                                })
                                            }

                                            If ((Arg0 == 0x08))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                    /* 0010 */  0x28, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // (...i...
                                                })
                                            }

                                            If ((Arg0 == 0x09))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                    /* 0010 */  0x28, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // (...i...
                                                })
                                            }

                                            If ((Arg0 == 0x0A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x4B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // K.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x0B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x66, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // f.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x0C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x0D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x03, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x66, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // f.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x0E))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x03, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x0F))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x00, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                            })
                                        }

                                        If ((Arg0 == 0x10))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                            })
                                        }

                                        If ((Arg0 == 0x11))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                            })
                                        }

                                        If ((HTCS == One))
                                        {
                                            If ((Arg0 == 0x12))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                    /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                                })
                                            }

                                            If ((Arg0 == 0x13))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                    /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                                })
                                            }
                                        }
                                        Else
                                        {
                                            If ((Arg0 == 0x12))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x04, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                    /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                                })
                                            }

                                            If ((Arg0 == 0x13))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x04, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                    /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x14))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x15))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x16))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x17))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xFF, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x18))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xE0, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If (((CPTY == 0x07) || (CPTY == 0x05)))
                                        {
                                            If ((Arg0 == 0x19))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x1E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x19, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                                })
                                            }

                                            If ((Arg0 == 0x1A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x19, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                                })
                                            }

                                            If ((Arg0 == 0x1B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x19, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                                })
                                            }

                                            If ((Arg0 == 0x1C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x19, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                                })
                                            }

                                            If ((Arg0 == 0x1D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // A.......
                                                    /* 0010 */  0x19, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                                })
                                            }
                                        }
                                        Else
                                        {
                                            If ((Arg0 == 0x19))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x1E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x19, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00   // ....Z...
                                                })
                                            }

                                            If ((Arg0 == 0x1A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x19, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00   // ....Z...
                                                })
                                            }

                                            If ((Arg0 == 0x1B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // A.......
                                                    /* 0010 */  0x19, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00   // ....Z...
                                                })
                                            }

                                            If ((Arg0 == 0x1C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x19, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00   // ....Z...
                                                })
                                            }

                                            If ((Arg0 == 0x1D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x19, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00   // ....Z...
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x1E))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x1F))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x20))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x21))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xFF, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x22))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xE0, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x23))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                /* 0008 */  0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x24))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                /* 0008 */  0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x25))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x26))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xFF, 0x01, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                /* 0008 */  0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x27))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xE0, 0x01, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x28))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                /* 0008 */  0x3C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // <.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00   // ...._...
                                            })
                                        }

                                        If ((Arg0 == 0x29))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                /* 0008 */  0x3C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // <.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00   // ...._...
                                            })
                                        }

                                        If ((Arg0 == 0x2A))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                /* 0008 */  0x5F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // _.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00   // ...._...
                                            })
                                        }

                                        If ((Arg0 == 0x2B))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xFF, 0x02, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                /* 0008 */  0x3C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // <.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00   // ...._...
                                            })
                                        }

                                        If ((Arg0 == 0x2C))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xE0, 0x02, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                /* 0008 */  0x5F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // _.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00   // ...._...
                                            })
                                        }

                                        If ((Arg0 == 0x2D))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                            })
                                        }

                                        If ((Arg0 == 0x2E))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                            })
                                        }

                                        If ((Arg0 == 0x2F))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                            })
                                        }

                                        If ((Arg0 == 0x30))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xFF, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                            })
                                        }

                                        If ((Arg0 == 0x31))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xE0, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                            })
                                        }

                                        If (((CPTY == 0x07) || (CPTY == 0x05)))
                                        {
                                            If ((Arg0 == 0x32))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x0F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00   // ....A...
                                                })
                                            }

                                            If ((Arg0 == 0x33))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00   // ....A...
                                                })
                                            }

                                            If ((Arg0 == 0x34))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00   // ....A...
                                                })
                                            }

                                            If ((Arg0 == 0x35))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00   // ....A...
                                                })
                                            }

                                            If ((Arg0 == 0x36))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // A.......
                                                    /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00   // ....A...
                                                })
                                            }
                                        }
                                        Else
                                        {
                                            If ((Arg0 == 0x32))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x0F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                })
                                            }

                                            If ((Arg0 == 0x33))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                })
                                            }

                                            If ((Arg0 == 0x34))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // A.......
                                                    /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                })
                                            }

                                            If ((Arg0 == 0x35))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                })
                                            }

                                            If ((Arg0 == 0x36))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x37))
                                        {
                                            If ((SCOC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x38))
                                        {
                                            If ((SCOC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x08, 0x01, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x39))
                                        {
                                            If ((SCOC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x08, 0x01, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3A))
                                        {
                                            If ((SCOC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x08, 0x01, 0x97, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3B))
                                        {
                                            If ((SCOC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x08, 0x01, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3C))
                                        {
                                            If ((GOCC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3D))
                                        {
                                            If ((GOCC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x05, 0x02, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3E))
                                        {
                                            If ((GOCC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x05, 0x02, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3F))
                                        {
                                            If ((GOCC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x05, 0x02, 0x97, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x40))
                                        {
                                            If ((GOCC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x05, 0x02, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x41))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x0B, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                /* 0008 */  0x0F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x42))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x0B, 0x02, 0x00, 0x04, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x43))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x0B, 0x02, 0x00, 0x04, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x44))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xFF, 0x0B, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x45))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xE0, 0x0B, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }
                                }

                                If ((MCSK == 0x02))
                                {
                                    If ((GTYP == 0x05))
                                    {
                                        If ((CPTY == 0x07))
                                        {
                                            If ((Arg0 == Zero))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // A.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // U.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x02))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x03))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // U.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x04))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x05))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // 2...i...
                                                })
                                            }

                                            If ((Arg0 == 0x06))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // 2...i...
                                                })
                                            }

                                            If ((Arg0 == 0x07))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x5F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // _.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // 2...i...
                                                })
                                            }

                                            If ((Arg0 == 0x08))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // 2...i...
                                                })
                                            }

                                            If ((Arg0 == 0x09))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // 2...i...
                                                })
                                            }

                                            If ((Arg0 == 0x0A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x4B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // K.......
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x66, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // f.......
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x9B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x03, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x66, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // f.......
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0E))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x03, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x9B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }
                                        }
                                        Else
                                        {
                                            If ((Arg0 == Zero))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // A.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // U.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x02))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x03))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // U.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x04))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x05))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x00   // 2...}...
                                                })
                                            }

                                            If ((Arg0 == 0x06))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x00   // 2...}...
                                                })
                                            }

                                            If ((Arg0 == 0x07))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x73, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // s.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x00   // 2...}...
                                                })
                                            }

                                            If ((Arg0 == 0x08))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x00   // 2...}...
                                                })
                                            }

                                            If ((Arg0 == 0x09))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // x.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x00   // 2...}...
                                                })
                                            }

                                            If ((Arg0 == 0x0A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x4B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // K.......
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x66, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // f.......
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x9B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x03, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x66, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // f.......
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0E))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x03, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x9B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x0F))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x5A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // Z.......
                                                /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                            })
                                        }

                                        If ((Arg0 == 0x10))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                            })
                                        }

                                        If ((Arg0 == 0x11))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                            })
                                        }

                                        If ((HTCS == One))
                                        {
                                            If ((Arg0 == 0x12))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                    /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                                })
                                            }

                                            If ((Arg0 == 0x13))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                    /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                                })
                                            }
                                        }
                                        Else
                                        {
                                            If ((Arg0 == 0x12))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x04, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                    /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                                })
                                            }

                                            If ((Arg0 == 0x13))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x04, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                    /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x14))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x15))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x16))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x17))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xFF, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x18))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xE0, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((CPTY == 0x07))
                                        {
                                            If ((Arg0 == 0x19))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x19, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x14, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                                })
                                            }

                                            If ((Arg0 == 0x1A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x14, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                                })
                                            }

                                            If ((Arg0 == 0x1B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x14, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                                })
                                            }

                                            If ((Arg0 == 0x1C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x14, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                                })
                                            }

                                            If ((Arg0 == 0x1D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x3C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // <.......
                                                    /* 0010 */  0x14, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                                })
                                            }
                                        }
                                        Else
                                        {
                                            If ((Arg0 == 0x19))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x19, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x14, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x00, 0x00   // ....n...
                                                })
                                            }

                                            If ((Arg0 == 0x1A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x14, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x00, 0x00   // ....n...
                                                })
                                            }

                                            If ((Arg0 == 0x1B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x4B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // K.......
                                                    /* 0010 */  0x14, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x00, 0x00   // ....n...
                                                })
                                            }

                                            If ((Arg0 == 0x1C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x14, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x00, 0x00   // ....n...
                                                })
                                            }

                                            If ((Arg0 == 0x1D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // U.......
                                                    /* 0010 */  0x14, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x00, 0x00   // ....n...
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x1E))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x1F))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x20))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x21))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xFF, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x22))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xE0, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((CPTY == 0x07))
                                        {
                                            If ((Arg0 == 0x23))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x24))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x0F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x25))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x26))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x01, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x0F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x27))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x01, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x28))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x50, 0x00, 0x00, 0x00, 0xAF, 0x00, 0x00, 0x00   // P.......
                                                })
                                            }

                                            If ((Arg0 == 0x29))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x50, 0x00, 0x00, 0x00, 0xAF, 0x00, 0x00, 0x00   // P.......
                                                })
                                            }

                                            If ((Arg0 == 0x2A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0xA5, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x50, 0x00, 0x00, 0x00, 0xAF, 0x00, 0x00, 0x00   // P.......
                                                })
                                            }

                                            If ((Arg0 == 0x2B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x02, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x50, 0x00, 0x00, 0x00, 0xAF, 0x00, 0x00, 0x00   // P.......
                                                })
                                            }

                                            If ((Arg0 == 0x2C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x02, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0xAF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x50, 0x00, 0x00, 0x00, 0xAF, 0x00, 0x00, 0x00   // P.......
                                                })
                                            }

                                            If ((Arg0 == 0x2D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x2E))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x2F))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x30))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x31))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x32))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x19, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                                })
                                            }

                                            If ((Arg0 == 0x33))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                                })
                                            }

                                            If ((Arg0 == 0x34))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                                })
                                            }

                                            If ((Arg0 == 0x35))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                                })
                                            }

                                            If ((Arg0 == 0x36))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x3C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // <.......
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                                })
                                            }
                                        }
                                        Else
                                        {
                                            If ((Arg0 == 0x23))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x24))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x0F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x25))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x26))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x01, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x0F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x27))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x01, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x28))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x50, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00   // P.......
                                                })
                                            }

                                            If ((Arg0 == 0x29))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x50, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00   // P.......
                                                })
                                            }

                                            If ((Arg0 == 0x2A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x96, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x50, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00   // P.......
                                                })
                                            }

                                            If ((Arg0 == 0x2B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x02, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x50, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00   // P.......
                                                })
                                            }

                                            If ((Arg0 == 0x2C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x02, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0xA0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x50, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00   // P.......
                                                })
                                            }

                                            If ((Arg0 == 0x2D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x2E))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x2F))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x30))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x31))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x32))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x19, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00   // ....U...
                                                })
                                            }

                                            If ((Arg0 == 0x33))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00   // ....U...
                                                })
                                            }

                                            If ((Arg0 == 0x34))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x4B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // K.......
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00   // ....U...
                                                })
                                            }

                                            If ((Arg0 == 0x35))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00   // ....U...
                                                })
                                            }

                                            If ((Arg0 == 0x36))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // U.......
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00   // ....U...
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x37))
                                        {
                                            If ((SCOC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x38))
                                        {
                                            If ((SCOC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x08, 0x01, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x39))
                                        {
                                            If ((SCOC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x08, 0x01, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3A))
                                        {
                                            If ((SCOC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x08, 0x01, 0x97, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3B))
                                        {
                                            If ((SCOC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x08, 0x01, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3C))
                                        {
                                            If ((GOCC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3D))
                                        {
                                            If ((GOCC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x05, 0x02, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3E))
                                        {
                                            If ((GOCC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x05, 0x02, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3F))
                                        {
                                            If ((GOCC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x05, 0x02, 0x97, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x40))
                                        {
                                            If ((GOCC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x05, 0x02, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x41))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x0B, 0x02, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x42))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x0B, 0x02, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x43))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x0B, 0x02, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x44))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xFF, 0x0B, 0x02, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x45))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xE0, 0x0B, 0x02, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }
                                    ElseIf ((GTYP == One))
                                    {
                                        If ((CPTY == 0x07))
                                        {
                                            If ((Arg0 == Zero))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // A.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // U.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x02))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x03))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // U.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x04))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x05))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // 2...i...
                                                })
                                            }

                                            If ((Arg0 == 0x06))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // 2...i...
                                                })
                                            }

                                            If ((Arg0 == 0x07))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x5F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // _.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // 2...i...
                                                })
                                            }

                                            If ((Arg0 == 0x08))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // 2...i...
                                                })
                                            }

                                            If ((Arg0 == 0x09))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // 2...i...
                                                })
                                            }

                                            If ((Arg0 == 0x0A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x4B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // K.......
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x66, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // f.......
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x9B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x03, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x66, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // f.......
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0E))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x03, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x9B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }
                                        }
                                        Else
                                        {
                                            If ((Arg0 == Zero))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // A.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // U.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x02))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x03))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // U.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x04))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x05))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x00   // 2...}...
                                                })
                                            }

                                            If ((Arg0 == 0x06))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x00   // 2...}...
                                                })
                                            }

                                            If ((Arg0 == 0x07))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x73, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // s.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x00   // 2...}...
                                                })
                                            }

                                            If ((Arg0 == 0x08))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x00   // 2...}...
                                                })
                                            }

                                            If ((Arg0 == 0x09))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // x.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x00   // 2...}...
                                                })
                                            }

                                            If ((Arg0 == 0x0A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x4B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // K.......
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x66, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // f.......
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x9B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x03, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x66, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // f.......
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0E))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x03, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x9B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x0F))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x5A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // Z.......
                                                /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                            })
                                        }

                                        If ((Arg0 == 0x10))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                            })
                                        }

                                        If ((Arg0 == 0x11))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                            })
                                        }

                                        If ((HTCS == One))
                                        {
                                            If ((Arg0 == 0x12))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                    /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                                })
                                            }

                                            If ((Arg0 == 0x13))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                    /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                                })
                                            }
                                        }
                                        Else
                                        {
                                            If ((Arg0 == 0x12))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x04, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                    /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                                })
                                            }

                                            If ((Arg0 == 0x13))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x04, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                    /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x14))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x15))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x16))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x17))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xFF, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x18))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xE0, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((CPTY == 0x07))
                                        {
                                            If ((Arg0 == 0x19))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x19, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x14, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                                })
                                            }

                                            If ((Arg0 == 0x1A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x14, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                                })
                                            }

                                            If ((Arg0 == 0x1B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x14, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                                })
                                            }

                                            If ((Arg0 == 0x1C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x14, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                                })
                                            }

                                            If ((Arg0 == 0x1D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x3C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // <.......
                                                    /* 0010 */  0x14, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                                })
                                            }
                                        }
                                        Else
                                        {
                                            If ((Arg0 == 0x19))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x19, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x14, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x00, 0x00   // ....n...
                                                })
                                            }

                                            If ((Arg0 == 0x1A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x14, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x00, 0x00   // ....n...
                                                })
                                            }

                                            If ((Arg0 == 0x1B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x4B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // K.......
                                                    /* 0010 */  0x14, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x00, 0x00   // ....n...
                                                })
                                            }

                                            If ((Arg0 == 0x1C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x14, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x00, 0x00   // ....n...
                                                })
                                            }

                                            If ((Arg0 == 0x1D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // U.......
                                                    /* 0010 */  0x14, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x00, 0x00   // ....n...
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x1E))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x1F))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x20))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x21))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xFF, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x22))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xE0, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((CPTY == 0x07))
                                        {
                                            If ((Arg0 == 0x23))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x24))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x0F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x25))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x26))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x01, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x0F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x27))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x01, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x28))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x50, 0x00, 0x00, 0x00, 0xAF, 0x00, 0x00, 0x00   // P.......
                                                })
                                            }

                                            If ((Arg0 == 0x29))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x50, 0x00, 0x00, 0x00, 0xAF, 0x00, 0x00, 0x00   // P.......
                                                })
                                            }

                                            If ((Arg0 == 0x2A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0xA5, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x50, 0x00, 0x00, 0x00, 0xAF, 0x00, 0x00, 0x00   // P.......
                                                })
                                            }

                                            If ((Arg0 == 0x2B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x02, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x50, 0x00, 0x00, 0x00, 0xAF, 0x00, 0x00, 0x00   // P.......
                                                })
                                            }

                                            If ((Arg0 == 0x2C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x02, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0xAF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x50, 0x00, 0x00, 0x00, 0xAF, 0x00, 0x00, 0x00   // P.......
                                                })
                                            }

                                            If ((Arg0 == 0x2D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x2E))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x2F))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x30))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x31))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x32))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x19, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                                })
                                            }

                                            If ((Arg0 == 0x33))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                                })
                                            }

                                            If ((Arg0 == 0x34))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                                })
                                            }

                                            If ((Arg0 == 0x35))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                                })
                                            }

                                            If ((Arg0 == 0x36))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x3C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // <.......
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                                })
                                            }
                                        }
                                        Else
                                        {
                                            If ((Arg0 == 0x23))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x24))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x0F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x25))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x26))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x01, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x0F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x27))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x01, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x28))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x50, 0x00, 0x00, 0x00, 0xA5, 0x00, 0x00, 0x00   // P.......
                                                })
                                            }

                                            If ((Arg0 == 0x29))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x50, 0x00, 0x00, 0x00, 0xA5, 0x00, 0x00, 0x00   // P.......
                                                })
                                            }

                                            If ((Arg0 == 0x2A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x96, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x50, 0x00, 0x00, 0x00, 0xA5, 0x00, 0x00, 0x00   // P.......
                                                })
                                            }

                                            If ((Arg0 == 0x2B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x02, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x50, 0x00, 0x00, 0x00, 0xA5, 0x00, 0x00, 0x00   // P.......
                                                })
                                            }

                                            If ((Arg0 == 0x2C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x02, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0xA5, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x50, 0x00, 0x00, 0x00, 0xA5, 0x00, 0x00, 0x00   // P.......
                                                })
                                            }

                                            If ((Arg0 == 0x2D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x2E))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x2F))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x30))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x31))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x32))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x19, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00   // ....U...
                                                })
                                            }

                                            If ((Arg0 == 0x33))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00   // ....U...
                                                })
                                            }

                                            If ((Arg0 == 0x34))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x4B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // K.......
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00   // ....U...
                                                })
                                            }

                                            If ((Arg0 == 0x35))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00   // ....U...
                                                })
                                            }

                                            If ((Arg0 == 0x36))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // U.......
                                                    /* 0010 */  0x0A, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00   // ....U...
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x37))
                                        {
                                            If ((SCOC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x38))
                                        {
                                            If ((SCOC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x08, 0x01, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x39))
                                        {
                                            If ((SCOC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x08, 0x01, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3A))
                                        {
                                            If ((SCOC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x08, 0x01, 0x97, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3B))
                                        {
                                            If ((SCOC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x08, 0x01, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3C))
                                        {
                                            If ((GOCC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3D))
                                        {
                                            If ((GOCC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x05, 0x02, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3E))
                                        {
                                            If ((GOCC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x05, 0x02, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3F))
                                        {
                                            If ((GOCC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x05, 0x02, 0x97, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x40))
                                        {
                                            If ((GOCC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x05, 0x02, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x41))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x0B, 0x02, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x42))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x0B, 0x02, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x43))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x0B, 0x02, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x44))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xFF, 0x0B, 0x02, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x45))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xE0, 0x0B, 0x02, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }
                                    Else
                                    {
                                        If (((CPTY == 0x07) || (CPTY == 0x05)))
                                        {
                                            If ((Arg0 == Zero))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // A.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // U.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x02))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x7D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // }.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x03))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // U.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x04))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x7D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // }.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x05))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00   // 2...U...
                                                })
                                            }

                                            If ((Arg0 == 0x06))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00   // 2...U...
                                                })
                                            }

                                            If ((Arg0 == 0x07))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x4B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // K.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00   // 2...U...
                                                })
                                            }

                                            If ((Arg0 == 0x08))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00   // 2...U...
                                                })
                                            }

                                            If ((Arg0 == 0x09))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00   // 2...U...
                                                })
                                            }

                                            If ((Arg0 == 0x0A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x4B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // K.......
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x66, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // f.......
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x03, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x66, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // f.......
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0E))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x03, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }
                                        }
                                        Else
                                        {
                                            If ((Arg0 == Zero))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // A.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // U.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x02))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x7D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // }.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x03))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // U.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((Arg0 == 0x04))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x7D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // }.......
                                                    /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00   // <.......
                                                })
                                            }

                                            If ((CPTY == 0x09))
                                            {
                                                If ((Arg0 == 0x05))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                        /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // 2...i...
                                                    })
                                                }

                                                If ((Arg0 == 0x06))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                        /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // 2...i...
                                                    })
                                                }

                                                If ((Arg0 == 0x07))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x03, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x5F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // _.......
                                                        /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // 2...i...
                                                    })
                                                }

                                                If ((Arg0 == 0x08))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0xFF, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                        /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // 2...i...
                                                    })
                                                }

                                                If ((Arg0 == 0x09))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0xE0, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                        /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // 2...i...
                                                    })
                                                }
                                            }
                                            Else
                                            {
                                                If ((Arg0 == 0x05))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                        /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00   // 2...s...
                                                    })
                                                }

                                                If ((Arg0 == 0x06))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                        /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00   // 2...s...
                                                    })
                                                }

                                                If ((Arg0 == 0x07))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x03, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x69, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // i.......
                                                        /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00   // 2...s...
                                                    })
                                                }

                                                If ((Arg0 == 0x08))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0xFF, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                        /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00   // 2...s...
                                                    })
                                                }

                                                If ((Arg0 == 0x09))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0xE0, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x6E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // n.......
                                                        /* 0010 */  0x32, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00   // 2...s...
                                                    })
                                                }
                                            }

                                            If ((Arg0 == 0x0A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x4B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // K.......
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x66, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // f.......
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x03, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x66, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // f.......
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }

                                            If ((Arg0 == 0x0E))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x03, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x91, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x46, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00   // F.......
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x0F))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                            })
                                        }

                                        If ((Arg0 == 0x10))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                            })
                                        }

                                        If ((Arg0 == 0x11))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                            })
                                        }

                                        If ((HTCS == One))
                                        {
                                            If ((Arg0 == 0x12))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                    /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                                })
                                            }

                                            If ((Arg0 == 0x13))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                    /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                                })
                                            }
                                        }
                                        Else
                                        {
                                            If ((Arg0 == 0x12))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x04, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                    /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                                })
                                            }

                                            If ((Arg0 == 0x13))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x04, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                                    /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x14))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x15))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x16))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x17))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xFF, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x18))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xE0, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If (((CPTY == 0x07) || (CPTY == 0x05)))
                                        {
                                            If ((Arg0 == 0x19))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x23, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // #.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                })
                                            }

                                            If ((Arg0 == 0x1A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                })
                                            }

                                            If ((Arg0 == 0x1B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                })
                                            }

                                            If ((Arg0 == 0x1C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                })
                                            }

                                            If ((Arg0 == 0x1D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x3C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // <.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                })
                                            }
                                        }
                                        ElseIf ((CPTY == 0x09))
                                        {
                                            If ((Arg0 == 0x19))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x23, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // #.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // ....d...
                                                })
                                            }

                                            If ((Arg0 == 0x1A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // ....d...
                                                })
                                            }

                                            If ((Arg0 == 0x1B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // ....d...
                                                })
                                            }

                                            If ((Arg0 == 0x1C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // ....d...
                                                })
                                            }

                                            If ((Arg0 == 0x1D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x4B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // K.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // ....d...
                                                })
                                            }
                                        }
                                        Else
                                        {
                                            If ((Arg0 == 0x19))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x23, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // #.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // ....i...
                                                })
                                            }

                                            If ((Arg0 == 0x1A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // ....i...
                                                })
                                            }

                                            If ((Arg0 == 0x1B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // ....i...
                                                })
                                            }

                                            If ((Arg0 == 0x1C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // ....i...
                                                })
                                            }

                                            If ((Arg0 == 0x1D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // ....i...
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x1E))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x1F))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x20))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x21))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xFF, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x22))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xE0, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If (((CPTY == 0x07) || (CPTY == 0x05)))
                                        {
                                            If ((Arg0 == 0x23))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x24))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x25))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x26))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x01, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x27))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x01, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x28))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00   // 7.......
                                                })
                                            }

                                            If ((Arg0 == 0x29))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00   // 7.......
                                                })
                                            }

                                            If ((Arg0 == 0x2A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // x.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00   // 7.......
                                                })
                                            }

                                            If ((Arg0 == 0x2B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x02, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00   // 7.......
                                                })
                                            }

                                            If ((Arg0 == 0x2C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x02, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x87, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00   // 7.......
                                                })
                                            }

                                            If ((Arg0 == 0x2D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x2E))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x2F))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x30))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x31))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x32))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                                })
                                            }

                                            If ((Arg0 == 0x33))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                                })
                                            }

                                            If ((Arg0 == 0x34))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                                })
                                            }

                                            If ((Arg0 == 0x35))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                                })
                                            }

                                            If ((Arg0 == 0x36))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x3C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // <.......
                                                    /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                                })
                                            }
                                        }
                                        Else
                                        {
                                            If ((Arg0 == 0x23))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x24))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x25))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x19, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x26))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x01, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x27))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x01, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00   // ........
                                                })
                                            }

                                            If ((Arg0 == 0x28))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 7.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00   // 7...x...
                                                })
                                            }

                                            If ((Arg0 == 0x29))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00   // 7...x...
                                                })
                                            }

                                            If ((Arg0 == 0x2A))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x73, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // s.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00   // 7...x...
                                                })
                                            }

                                            If ((Arg0 == 0x2B))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x02, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00   // 7...x...
                                                })
                                            }

                                            If ((Arg0 == 0x2C))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x02, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // x.......
                                                    /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00   // 7...x...
                                                })
                                            }

                                            If ((Arg0 == 0x2D))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x2E))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x2F))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x30))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((Arg0 == 0x31))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                                    /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                                })
                                            }

                                            If ((CPTY == 0x09))
                                            {
                                                If ((Arg0 == 0x32))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x01, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                                    })
                                                }

                                                If ((Arg0 == 0x33))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x02, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                        /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                                    })
                                                }

                                                If ((Arg0 == 0x34))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x03, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                        /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                                    })
                                                }

                                                If ((Arg0 == 0x35))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0xFF, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                        /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                                    })
                                                }

                                                If ((Arg0 == 0x36))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0xE0, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x4B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // K.......
                                                        /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                                    })
                                                }
                                            }
                                            Else
                                            {
                                                If ((Arg0 == 0x32))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x01, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                    })
                                                }

                                                If ((Arg0 == 0x33))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x02, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                        /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                    })
                                                }

                                                If ((Arg0 == 0x34))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0x03, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // F.......
                                                        /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                    })
                                                }

                                                If ((Arg0 == 0x35))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0xFF, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                                        /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                    })
                                                }

                                                If ((Arg0 == 0x36))
                                                {
                                                    Return (Buffer (0x18)
                                                    {
                                                        /* 0000 */  0x00, 0xE0, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                                        /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                                        /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00   // ....P...
                                                    })
                                                }
                                            }
                                        }

                                        If ((Arg0 == 0x37))
                                        {
                                            If ((SCOC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x38))
                                        {
                                            If ((SCOC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x08, 0x01, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x39))
                                        {
                                            If ((SCOC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x08, 0x01, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3A))
                                        {
                                            If ((SCOC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x08, 0x01, 0x97, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3B))
                                        {
                                            If ((SCOC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x08, 0x01, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3C))
                                        {
                                            If ((GOCC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x01, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3D))
                                        {
                                            If ((GOCC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x05, 0x02, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x02, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3E))
                                        {
                                            If ((GOCC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x05, 0x02, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0x03, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x3F))
                                        {
                                            If ((GOCC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x05, 0x02, 0x97, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xFF, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x40))
                                        {
                                            If ((GOCC == One))
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x05, 0x02, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                    /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x18)
                                                {
                                                    /* 0000 */  0x00, 0xE0, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }

                                        If ((Arg0 == 0x41))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x0B, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                                /* 0008 */  0x0F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x42))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x0B, 0x02, 0x00, 0x04, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x43))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x0B, 0x02, 0x00, 0x04, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x44))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xFF, 0x0B, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x45))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xE0, 0x0B, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }
                                }
                            }

                            Method (WQA9, 1, NotSerialized)
                            {
                                Name (YPAT, Buffer (0x0C){})
                                CreateWordField (YPAT, Zero, YPMD)
                                CreateWordField (YPAT, 0x02, YPDE)
                                CreateWordField (YPAT, 0x04, YPMI)
                                CreateWordField (YPAT, 0x06, YPMX)
                                CreateDWordField (YPAT, 0x08, YPHW)
                                If ((Arg0 == Zero))
                                {
                                    If (((PANT & 0x04) == 0x04))
                                    {
                                        YPMD = One
                                        YPDE = 0xA5
                                        YPMI = 0x3C
                                        YPMX = 0xA5
                                        Local0 = (PPID << 0x10)
                                        Local1 = (Local0 & 0xFFFF0000)
                                        Local2 = (Local1 | PMID) /* \PMID */
                                        YPHW = Local2
                                    }
                                    Else
                                    {
                                        YPMD = One
                                        YPDE = 0xF0
                                        YPMI = 0x3C
                                        YPMX = 0xF0
                                        Local0 = (PPID << 0x10)
                                        Local1 = (Local0 & 0xFFFF0000)
                                        Local2 = (Local1 | PMID) /* \PMID */
                                        YPHW = Local2
                                    }

                                    Return (YPAT) /* \_SB_.GZFD.WQA9.YPAT */
                                }
                            }

                            Method (WQAA, 1, NotSerialized)
                            {
                                If (((GTYP == 0x02) || (GTYP == 0x03)))
                                {
                                    If (((CPTY == 0x07) || (CPTY == 0x05)))
                                    {
                                        If ((Arg0 == Zero))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == One))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x05, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x02))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x0A, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x03))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x0F, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x04))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x14, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x05))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x0B, 0x02, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x06))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x0B, 0x02, 0x05, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x07))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x0B, 0x02, 0x0A, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x08))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x0B, 0x02, 0x0F, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x09))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x37, 0x00, 0x00, 0x00   // ....7...
                                            })
                                        }

                                        If ((Arg0 == 0x0A))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                            })
                                        }

                                        If ((Arg0 == 0x0B))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x41, 0x00, 0x00, 0x00   // ....A...
                                            })
                                        }

                                        If ((Arg0 == 0x0C))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x46, 0x00, 0x00, 0x00   // ....F...
                                            })
                                        }

                                        If ((Arg0 == 0x0D))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                            })
                                        }

                                        If ((Arg0 == 0x0E))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x50, 0x00, 0x00, 0x00   // ....P...
                                            })
                                        }

                                        If ((Arg0 == 0x0F))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x55, 0x00, 0x00, 0x00   // ....U...
                                            })
                                        }

                                        If ((Arg0 == 0x10))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x5A, 0x00, 0x00, 0x00   // ....Z...
                                            })
                                        }

                                        If ((Arg0 == 0x11))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x5F, 0x00, 0x00, 0x00   // ...._...
                                            })
                                        }

                                        If ((Arg0 == 0x12))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x64, 0x00, 0x00, 0x00   // ....d...
                                            })
                                        }

                                        If ((Arg0 == 0x13))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x69, 0x00, 0x00, 0x00   // ....i...
                                            })
                                        }

                                        If ((Arg0 == 0x14))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x6E, 0x00, 0x00, 0x00   // ....n...
                                            })
                                        }

                                        If ((Arg0 == 0x15))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x73, 0x00, 0x00, 0x00   // ....s...
                                            })
                                        }

                                        If ((Arg0 == 0x16))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x78, 0x00, 0x00, 0x00   // ....x...
                                            })
                                        }

                                        If ((Arg0 == 0x17))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x7D, 0x00, 0x00, 0x00   // ....}...
                                            })
                                        }

                                        If ((Arg0 == 0x18))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x82, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x19))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x87, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x1A))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x1B))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }
                                    Else
                                    {
                                        If ((Arg0 == Zero))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == One))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x05, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x02))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x0A, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x03))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x0F, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x04))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x14, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x05))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x19, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x06))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x0B, 0x02, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x07))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x0B, 0x02, 0x05, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x08))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x0B, 0x02, 0x0A, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x09))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x0B, 0x02, 0x0F, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x0A))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x37, 0x00, 0x00, 0x00   // ....7...
                                            })
                                        }

                                        If ((Arg0 == 0x0B))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                            })
                                        }

                                        If ((Arg0 == 0x0C))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x41, 0x00, 0x00, 0x00   // ....A...
                                            })
                                        }

                                        If ((Arg0 == 0x0D))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x46, 0x00, 0x00, 0x00   // ....F...
                                            })
                                        }

                                        If ((Arg0 == 0x0E))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                            })
                                        }

                                        If ((Arg0 == 0x0F))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x50, 0x00, 0x00, 0x00   // ....P...
                                            })
                                        }

                                        If ((Arg0 == 0x10))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x55, 0x00, 0x00, 0x00   // ....U...
                                            })
                                        }

                                        If ((Arg0 == 0x11))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x5A, 0x00, 0x00, 0x00   // ....Z...
                                            })
                                        }

                                        If ((Arg0 == 0x12))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x5F, 0x00, 0x00, 0x00   // ...._...
                                            })
                                        }

                                        If ((Arg0 == 0x13))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x64, 0x00, 0x00, 0x00   // ....d...
                                            })
                                        }

                                        If ((Arg0 == 0x14))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x69, 0x00, 0x00, 0x00   // ....i...
                                            })
                                        }

                                        If ((Arg0 == 0x15))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x6E, 0x00, 0x00, 0x00   // ....n...
                                            })
                                        }

                                        If ((Arg0 == 0x16))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x73, 0x00, 0x00, 0x00   // ....s...
                                            })
                                        }

                                        If ((Arg0 == 0x17))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x78, 0x00, 0x00, 0x00   // ....x...
                                            })
                                        }

                                        If ((Arg0 == 0x18))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x19))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x1A))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x1B))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }
                                }
                                ElseIf ((GTYP == One))
                                {
                                    If ((CPTY == 0x07))
                                    {
                                        If ((Arg0 == Zero))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == One))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x0A, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x02))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x0F, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x03))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x50, 0x00, 0x00, 0x00   // ....P...
                                            })
                                        }

                                        If ((Arg0 == 0x04))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x55, 0x00, 0x00, 0x00   // ....U...
                                            })
                                        }

                                        If ((Arg0 == 0x05))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x5A, 0x00, 0x00, 0x00   // ....Z...
                                            })
                                        }

                                        If ((Arg0 == 0x06))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x5F, 0x00, 0x00, 0x00   // ...._...
                                            })
                                        }

                                        If ((Arg0 == 0x07))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x64, 0x00, 0x00, 0x00   // ....d...
                                            })
                                        }

                                        If ((Arg0 == 0x08))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x69, 0x00, 0x00, 0x00   // ....i...
                                            })
                                        }

                                        If ((Arg0 == 0x09))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x6E, 0x00, 0x00, 0x00   // ....n...
                                            })
                                        }

                                        If ((Arg0 == 0x0A))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x73, 0x00, 0x00, 0x00   // ....s...
                                            })
                                        }

                                        If ((Arg0 == 0x0B))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x78, 0x00, 0x00, 0x00   // ....x...
                                            })
                                        }

                                        If ((Arg0 == 0x0C))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x7D, 0x00, 0x00, 0x00   // ....}...
                                            })
                                        }

                                        If ((Arg0 == 0x0D))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x82, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x0E))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x87, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x0F))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x8C, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x10))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x91, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x11))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x96, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x12))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x9B, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x13))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0xA0, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x14))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0xA5, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x15))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0xAA, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x16))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0xAF, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x17))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x18))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x19))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x1A))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x1B))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }
                                    Else
                                    {
                                        If ((Arg0 == Zero))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == One))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x0A, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x02))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x0F, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x03))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x14, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x04))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x19, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x05))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x50, 0x00, 0x00, 0x00   // ....P...
                                            })
                                        }

                                        If ((Arg0 == 0x06))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x55, 0x00, 0x00, 0x00   // ....U...
                                            })
                                        }

                                        If ((Arg0 == 0x07))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x5A, 0x00, 0x00, 0x00   // ....Z...
                                            })
                                        }

                                        If ((Arg0 == 0x08))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x5F, 0x00, 0x00, 0x00   // ...._...
                                            })
                                        }

                                        If ((Arg0 == 0x09))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x64, 0x00, 0x00, 0x00   // ....d...
                                            })
                                        }

                                        If ((Arg0 == 0x0A))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x69, 0x00, 0x00, 0x00   // ....i...
                                            })
                                        }

                                        If ((Arg0 == 0x0B))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x6E, 0x00, 0x00, 0x00   // ....n...
                                            })
                                        }

                                        If ((Arg0 == 0x0C))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x73, 0x00, 0x00, 0x00   // ....s...
                                            })
                                        }

                                        If ((Arg0 == 0x0D))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x78, 0x00, 0x00, 0x00   // ....x...
                                            })
                                        }

                                        If ((Arg0 == 0x0E))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x7D, 0x00, 0x00, 0x00   // ....}...
                                            })
                                        }

                                        If ((Arg0 == 0x0F))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x82, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x10))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x87, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x11))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x8C, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x12))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x91, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x13))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x96, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x14))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x9B, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x15))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0xA0, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x16))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0xA5, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x17))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x18))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x19))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x1A))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x1B))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }
                                }
                                ElseIf ((GTYP == 0x05))
                                {
                                    If ((CPTY == 0x07))
                                    {
                                        If ((Arg0 == Zero))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == One))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x0A, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x02))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x0F, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x03))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x50, 0x00, 0x00, 0x00   // ....P...
                                            })
                                        }

                                        If ((Arg0 == 0x04))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x55, 0x00, 0x00, 0x00   // ....U...
                                            })
                                        }

                                        If ((Arg0 == 0x05))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x5A, 0x00, 0x00, 0x00   // ....Z...
                                            })
                                        }

                                        If ((Arg0 == 0x06))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x5F, 0x00, 0x00, 0x00   // ...._...
                                            })
                                        }

                                        If ((Arg0 == 0x07))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x64, 0x00, 0x00, 0x00   // ....d...
                                            })
                                        }

                                        If ((Arg0 == 0x08))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x69, 0x00, 0x00, 0x00   // ....i...
                                            })
                                        }

                                        If ((Arg0 == 0x09))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x6E, 0x00, 0x00, 0x00   // ....n...
                                            })
                                        }

                                        If ((Arg0 == 0x0A))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x73, 0x00, 0x00, 0x00   // ....s...
                                            })
                                        }

                                        If ((Arg0 == 0x0B))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x78, 0x00, 0x00, 0x00   // ....x...
                                            })
                                        }

                                        If ((Arg0 == 0x0C))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x7D, 0x00, 0x00, 0x00   // ....}...
                                            })
                                        }

                                        If ((Arg0 == 0x0D))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x82, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x0E))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x87, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x0F))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x8C, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x10))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x91, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x11))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x96, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x12))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x9B, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x13))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0xA0, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x14))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0xA5, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x15))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0xAA, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x16))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0xAF, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x17))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x18))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x19))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x1A))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x1B))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }
                                    Else
                                    {
                                        If ((Arg0 == Zero))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == One))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x0F, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x02))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x14, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x03))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x19, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x04))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x50, 0x00, 0x00, 0x00   // ....P...
                                            })
                                        }

                                        If ((Arg0 == 0x05))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x55, 0x00, 0x00, 0x00   // ....U...
                                            })
                                        }

                                        If ((Arg0 == 0x06))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x5A, 0x00, 0x00, 0x00   // ....Z...
                                            })
                                        }

                                        If ((Arg0 == 0x07))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x5F, 0x00, 0x00, 0x00   // ...._...
                                            })
                                        }

                                        If ((Arg0 == 0x08))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x64, 0x00, 0x00, 0x00   // ....d...
                                            })
                                        }

                                        If ((Arg0 == 0x09))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x69, 0x00, 0x00, 0x00   // ....i...
                                            })
                                        }

                                        If ((Arg0 == 0x0A))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x6E, 0x00, 0x00, 0x00   // ....n...
                                            })
                                        }

                                        If ((Arg0 == 0x0B))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x73, 0x00, 0x00, 0x00   // ....s...
                                            })
                                        }

                                        If ((Arg0 == 0x0C))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x78, 0x00, 0x00, 0x00   // ....x...
                                            })
                                        }

                                        If ((Arg0 == 0x0D))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x7D, 0x00, 0x00, 0x00   // ....}...
                                            })
                                        }

                                        If ((Arg0 == 0x0E))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x82, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x0F))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x87, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x10))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x8C, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x11))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x91, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x12))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x96, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x13))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x9B, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x14))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0xA0, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x15))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x16))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x17))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x18))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x19))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x1A))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x1B))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }
                                }
                                ElseIf ((GTYP == 0x07))
                                {
                                    If (((CPTY == 0x07) || (CPTY == 0x05)))
                                    {
                                        If ((Arg0 == Zero))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == One))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x05, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x02))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x0A, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x03))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x0F, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x04))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x14, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x05))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x0B, 0x02, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x06))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x0B, 0x02, 0x05, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x07))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x0B, 0x02, 0x0A, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x08))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x0B, 0x02, 0x0F, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x09))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x37, 0x00, 0x00, 0x00   // ....7...
                                            })
                                        }

                                        If ((Arg0 == 0x0A))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                            })
                                        }

                                        If ((Arg0 == 0x0B))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x41, 0x00, 0x00, 0x00   // ....A...
                                            })
                                        }

                                        If ((Arg0 == 0x0C))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x46, 0x00, 0x00, 0x00   // ....F...
                                            })
                                        }

                                        If ((Arg0 == 0x0D))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                            })
                                        }

                                        If ((Arg0 == 0x0E))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x50, 0x00, 0x00, 0x00   // ....P...
                                            })
                                        }

                                        If ((Arg0 == 0x0F))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x55, 0x00, 0x00, 0x00   // ....U...
                                            })
                                        }

                                        If ((Arg0 == 0x10))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x5A, 0x00, 0x00, 0x00   // ....Z...
                                            })
                                        }

                                        If ((Arg0 == 0x11))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x5F, 0x00, 0x00, 0x00   // ...._...
                                            })
                                        }

                                        If ((Arg0 == 0x12))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x64, 0x00, 0x00, 0x00   // ....d...
                                            })
                                        }

                                        If ((Arg0 == 0x13))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x69, 0x00, 0x00, 0x00   // ....i...
                                            })
                                        }

                                        If ((Arg0 == 0x14))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x6E, 0x00, 0x00, 0x00   // ....n...
                                            })
                                        }

                                        If ((Arg0 == 0x15))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x73, 0x00, 0x00, 0x00   // ....s...
                                            })
                                        }

                                        If ((Arg0 == 0x16))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x78, 0x00, 0x00, 0x00   // ....x...
                                            })
                                        }

                                        If ((Arg0 == 0x17))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x7D, 0x00, 0x00, 0x00   // ....}...
                                            })
                                        }

                                        If ((Arg0 == 0x18))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x82, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x19))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x87, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x1A))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x1B))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }
                                    Else
                                    {
                                        If ((Arg0 == Zero))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == One))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x05, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x02))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x0A, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x03))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x0F, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x04))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x14, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x05))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x01, 0x02, 0x19, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x06))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x0B, 0x02, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x07))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x0B, 0x02, 0x05, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x08))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x0B, 0x02, 0x0A, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x09))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x0B, 0x02, 0x0F, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x0A))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x37, 0x00, 0x00, 0x00   // ....7...
                                            })
                                        }

                                        If ((Arg0 == 0x0B))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                            })
                                        }

                                        If ((Arg0 == 0x0C))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x41, 0x00, 0x00, 0x00   // ....A...
                                            })
                                        }

                                        If ((Arg0 == 0x0D))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x46, 0x00, 0x00, 0x00   // ....F...
                                            })
                                        }

                                        If ((Arg0 == 0x0E))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                            })
                                        }

                                        If ((Arg0 == 0x0F))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x50, 0x00, 0x00, 0x00   // ....P...
                                            })
                                        }

                                        If ((Arg0 == 0x10))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x55, 0x00, 0x00, 0x00   // ....U...
                                            })
                                        }

                                        If ((Arg0 == 0x11))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x5A, 0x00, 0x00, 0x00   // ....Z...
                                            })
                                        }

                                        If ((Arg0 == 0x12))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x5F, 0x00, 0x00, 0x00   // ...._...
                                            })
                                        }

                                        If ((Arg0 == 0x13))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x64, 0x00, 0x00, 0x00   // ....d...
                                            })
                                        }

                                        If ((Arg0 == 0x14))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x69, 0x00, 0x00, 0x00   // ....i...
                                            })
                                        }

                                        If ((Arg0 == 0x15))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x6E, 0x00, 0x00, 0x00   // ....n...
                                            })
                                        }

                                        If ((Arg0 == 0x16))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x73, 0x00, 0x00, 0x00   // ....s...
                                            })
                                        }

                                        If ((Arg0 == 0x17))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0xFF, 0x02, 0x02, 0x78, 0x00, 0x00, 0x00   // ....x...
                                            })
                                        }

                                        If ((Arg0 == 0x18))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x19))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x1A))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }

                                        If ((Arg0 == 0x1B))
                                        {
                                            Return (Buffer (0x08)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }
                                }
                                Else
                                {
                                    If ((Arg0 == Zero))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == One))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x01, 0x02, 0x05, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x02))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x01, 0x02, 0x0A, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x03))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x0B, 0x02, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x04))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x0B, 0x02, 0x05, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x05))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x0B, 0x02, 0x0A, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x06))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x0B, 0x02, 0x0F, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x07))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x02, 0x02, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                        })
                                    }

                                    If ((Arg0 == 0x08))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x02, 0x02, 0x41, 0x00, 0x00, 0x00   // ....A...
                                        })
                                    }

                                    If ((Arg0 == 0x09))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x02, 0x02, 0x46, 0x00, 0x00, 0x00   // ....F...
                                        })
                                    }

                                    If ((Arg0 == 0x0A))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x02, 0x02, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                        })
                                    }

                                    If ((Arg0 == 0x0B))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x02, 0x02, 0x50, 0x00, 0x00, 0x00   // ....P...
                                        })
                                    }

                                    If ((Arg0 == 0x0C))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x02, 0x02, 0x55, 0x00, 0x00, 0x00   // ....U...
                                        })
                                    }

                                    If ((Arg0 == 0x0D))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x02, 0x02, 0x5A, 0x00, 0x00, 0x00   // ....Z...
                                        })
                                    }

                                    If ((Arg0 == 0x0E))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x02, 0x02, 0x5F, 0x00, 0x00, 0x00   // ...._...
                                        })
                                    }

                                    If ((Arg0 == 0x0F))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x10))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x11))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x12))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x13))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x14))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x15))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x16))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x17))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x18))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x19))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x1A))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x1B))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }
                                }
                            }

                            Method (WMAA, 3, NotSerialized)
                            {
                                If ((Arg1 == 0x04))
                                {
                                    If ((GOCC == One))
                                    {
                                        Return (0x05)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }

                                If ((Arg1 == 0x0B))
                                {
                                    Return (0x0F)
                                }

                                If ((Arg1 == 0x0C))
                                {
                                    Return (Zero)
                                }

                                If ((Arg1 == 0x0D))
                                {
                                    If ((ToInteger (Arg2) == One))
                                    {
                                        ^^PCI0.LPC0.EC0.NCMD (0x59, 0x77)
                                    }
                                    Else
                                    {
                                        ^^PCI0.LPC0.EC0.NCMD (0x59, 0x76)
                                    }
                                }

                                If ((Arg1 == 0x0E))
                                {
                                    Return (Zero)
                                }

                                If ((Arg1 == 0x0F))
                                {
                                    Return (Zero)
                                }

                                If ((Arg1 == 0x10))
                                {
                                    Return (Zero)
                                }

                                If ((Arg1 == 0x12))
                                {
                                    Return (Zero)
                                }

                                If ((Arg1 == 0x13))
                                {
                                    Return (Zero)
                                }

                                If ((Arg1 == 0x14))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.FCST & One))
                                            {
                                                Release (^^PCI0.LPC0.EC0.LFCM)
                                                Return (One)
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Zero)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x15))
                                {
                                    Return (One)
                                }

                                If ((Arg1 == 0x16))
                                {
                                    If ((ToInteger (Arg2) == One))
                                    {
                                        ^^PCI0.LPC0.EC0.NCMD (0x59, 0x78)
                                    }
                                    Else
                                    {
                                        ^^PCI0.LPC0.EC0.NCMD (0x59, 0x79)
                                    }
                                }

                                If ((Arg1 == 0x17))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.GDST & 0x02))
                                            {
                                                Release (^^PCI0.LPC0.EC0.LFCM)
                                                Return (One)
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Zero)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x18))
                                {
                                    Return (One)
                                }

                                If ((Arg1 == 0x19))
                                {
                                    If ((ToInteger (Arg2) == One))
                                    {
                                        ^^PCI0.LPC0.EC0.NCMD (0x59, 0x7B)
                                    }
                                    Else
                                    {
                                        ^^PCI0.LPC0.EC0.NCMD (0x59, 0x7A)
                                    }
                                }

                                If ((Arg1 == 0x1A))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.GDST & 0x04))
                                            {
                                                Release (^^PCI0.LPC0.EC0.LFCM)
                                                Return (One)
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Zero)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x1E))
                                {
                                    Local1 = Zero
                                    Local1 |= 0xF000
                                    Local1 |= 0x04
                                    Local1 |= 0x10
                                    Local1 |= 0x40
                                    Return (Local1)
                                }

                                If ((Arg1 == 0x1F))
                                {
                                    Local1 = 0x0C80
                                    Local2 = 0x0C80
                                    Local1 |= (Local2 << 0x10)
                                    Return (Local1)
                                }

                                If ((Arg1 == 0x20))
                                {
                                    Return (Zero)
                                }

                                If ((Arg1 == 0x21))
                                {
                                    Return (Zero)
                                }

                                If ((Arg1 == 0x22))
                                {
                                    Return (Zero)
                                }

                                If ((Arg1 == 0x23))
                                {
                                    If ((^^PCI0.LPC0.EC0.KBLT == One))
                                    {
                                        Return (0x04)
                                    }
                                    Else
                                    {
                                        Return (0xF0)
                                    }
                                }

                                If ((Arg1 == 0x24))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((ToInteger (Arg2) == One))
                                            {
                                                ^^PCI0.LPC0.EC0.KLOR = One
                                                ^^PCI0.LPC0.EC0.KLCH = One
                                            }
                                            Else
                                            {
                                                ^^PCI0.LPC0.EC0.KLOR = Zero
                                                ^^PCI0.LPC0.EC0.KLCH = One
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Zero)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x25))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local1 = ^^PCI0.LPC0.EC0.KLOR /* \_SB_.PCI0.LPC0.EC0_.KLOR */
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x26))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local1 = Zero
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x27))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local1 = Zero
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x28))
                                {
                                    Return (0x02)
                                }

                                If ((Arg1 == 0x29))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.MSMF == One))
                                            {
                                                Local1 = One
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.MSMF == Zero))
                                            {
                                                Local1 = Zero
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x2A))
                                {
                                    If ((ToInteger (Arg2) == One))
                                    {
                                        SMBB = 0x26
                                        SMBA = 0xCA
                                    }
                                    ElseIf ((ToInteger (Arg2) == Zero))
                                    {
                                        SMBB = 0x25
                                        SMBA = 0xCA
                                    }

                                    Return (Zero)
                                }

                                If ((Arg1 == 0x2B))
                                {
                                    Return (0x06)
                                }

                                If ((Arg1 == 0x2C))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((ToInteger (Arg2) == One))
                                            {
                                                EPSW = One
                                                If ((^^PCI0.LPC0.EC0.SPMO != 0x02))
                                                {
                                                    ^^PCI0.LPC0.EC0.SSFM = One
                                                }

                                                If ((^^PCI0.LPC0.EC0.CTMD == One))
                                                {
                                                    ^^PCI0.LPC0.EC0.SSFM = One
                                                    ^^PCI0.LPC0.EC0.CTMD = Zero
                                                }

                                                ^^PCI0.LPC0.EC0.CTE0 = Zero
                                                ^^PCI0.LPC0.EC0.SPMO = 0x02
                                                ^^PCI0.LPC0.EC0.PABD = Zero
                                                ^^PCI0.LPC0.EC0.CAC1 = Zero
                                                ^^PCI0.LPC0.EC0.EMFG = Zero
                                            }
                                            ElseIf ((ToInteger (Arg2) == 0x02))
                                            {
                                                EPSW = One
                                                If ((^^PCI0.LPC0.EC0.SPMO != Zero))
                                                {
                                                    ^^PCI0.LPC0.EC0.SSFM = One
                                                }

                                                If ((^^PCI0.LPC0.EC0.CTMD == One))
                                                {
                                                    ^^PCI0.LPC0.EC0.SSFM = One
                                                    ^^PCI0.LPC0.EC0.CTMD = Zero
                                                }

                                                ^^PCI0.LPC0.EC0.CTE0 = Zero
                                                ^^PCI0.LPC0.EC0.SPMO = Zero
                                                ^^PCI0.LPC0.EC0.PABD = Zero
                                                ^^PCI0.LPC0.EC0.CAC1 = Zero
                                                ^^PCI0.LPC0.EC0.EMFG = Zero
                                            }
                                            ElseIf ((ToInteger (Arg2) == 0x03))
                                            {
                                                EPSW = One
                                                If ((^^PCI0.LPC0.EC0.ACTY () == One))
                                                {
                                                    If ((^^PCI0.LPC0.EC0.SPMO != One))
                                                    {
                                                        ^^PCI0.LPC0.EC0.SSFM = One
                                                    }

                                                    If ((^^PCI0.LPC0.EC0.CTMD == One))
                                                    {
                                                        ^^PCI0.LPC0.EC0.SSFM = One
                                                        ^^PCI0.LPC0.EC0.CTMD = Zero
                                                    }

                                                    ^^PCI0.LPC0.EC0.SPMO = One
                                                    ^^PCI0.LPC0.EC0.PABD = Zero
                                                    ^^PCI0.LPC0.EC0.CTE0 = Zero
                                                    ^^PCI0.LPC0.EC0.CAC1 = Zero
                                                    ^^PCI0.LPC0.EC0.EMFG = Zero
                                                }
                                                Else
                                                {
                                                    If ((^^PCI0.LPC0.EC0.SPMO != Zero))
                                                    {
                                                        ^^PCI0.LPC0.EC0.SSFM = One
                                                    }

                                                    ^^PCI0.LPC0.EC0.SPMO = Zero
                                                    If ((^^PCI0.LPC0.EC0.CTMD == One))
                                                    {
                                                        ^^PCI0.LPC0.EC0.SSFM = One
                                                        ^^PCI0.LPC0.EC0.CTMD = Zero
                                                    }

                                                    ^^PCI0.LPC0.EC0.CTE0 = Zero
                                                    ^^PCI0.LPC0.EC0.PABD = One
                                                    ^^PCI0.LPC0.EC0.CAC1 = Zero
                                                    ^^PCI0.LPC0.EC0.EMFG = Zero
                                                }
                                            }
                                            ElseIf ((ToInteger (Arg2) == 0xFF))
                                            {
                                                EPSW = One
                                                If ((^^PCI0.LPC0.EC0.ACTY () == One))
                                                {
                                                    If ((^^PCI0.LPC0.EC0.CTMD != One))
                                                    {
                                                        ^^PCI0.LPC0.EC0.SSFM = One
                                                        ^^PCI0.LPC0.EC0.CTMD = One
                                                    }

                                                    If ((DBFS == One))
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x04)
                                                    }
                                                    Else
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x03)
                                                    }

                                                    ^^PCI0.LPC0.EC0.CAC1 = Zero
                                                    ^^PCI0.LPC0.EC0.EMFG = Zero
                                                    ^^PCI0.LPC0.EC0.CTE0 = Zero
                                                    ^^PCI0.LPC0.EC0.PABD = Zero
                                                }
                                                Else
                                                {
                                                    If ((^^PCI0.LPC0.EC0.SPMO == Zero))
                                                    {
                                                        ^^PCI0.LPC0.EC0.SPMO = Zero
                                                    }
                                                    Else
                                                    {
                                                        ^^PCI0.LPC0.EC0.SPMO = 0x02
                                                    }

                                                    ^^PCI0.LPC0.FNQS (0x05)
                                                    ^^PCI0.LPC0.EC0.CAC1 = One
                                                    ^^PCI0.LPC0.EC0.CTMD = Zero
                                                    ^^PCI0.LPC0.EC0.CTE0 = Zero
                                                    ^^PCI0.LPC0.EC0.PABD = Zero
                                                    ^^PCI0.LPC0.EC0.EMFG = Zero
                                                }
                                            }
                                            ElseIf ((ToInteger (Arg2) == 0xE0))
                                            {
                                                If ((^^PCI0.LPC0.EC0.ACTY () == One))
                                                {
                                                    If ((^^PCI0.LPC0.EC0.CTMD != One))
                                                    {
                                                        ^^PCI0.LPC0.EC0.SSFM = One
                                                    }

                                                    ^^PCI0.LPC0.EC0.CTMD = One
                                                    ^^PCI0.LPC0.EC0.CTE0 = One
                                                    ^^PCI0.LPC0.EC0.NCMD (0x8C, Zero)
                                                    If ((DBFS == One))
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x10)
                                                    }
                                                    Else
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x0F)
                                                    }

                                                    ^^PCI0.LPC0.EC0.EMFG = Zero
                                                    ^^PCI0.LPC0.EC0.CAC1 = Zero
                                                    ^^PCI0.LPC0.EC0.PABD = Zero
                                                }
                                                Else
                                                {
                                                    If ((^^PCI0.LPC0.EC0.SPMO == Zero))
                                                    {
                                                        ^^PCI0.LPC0.EC0.SPMO = Zero
                                                    }
                                                    Else
                                                    {
                                                        ^^PCI0.LPC0.EC0.SPMO = 0x02
                                                    }

                                                    ^^PCI0.LPC0.EC0.CTMD = Zero
                                                    ^^PCI0.LPC0.EC0.CTE0 = Zero
                                                    ^^PCI0.LPC0.FNQS (0x05)
                                                    ^^PCI0.LPC0.EC0.CAC1 = One
                                                    ^^PCI0.LPC0.EC0.EMFG = One
                                                    ^^PCI0.LPC0.EC0.PABD = Zero
                                                }
                                            }

                                            If ((((ToInteger (Arg2) == One) || (ToInteger (Arg2) == 
                                                0x02)) || (ToInteger (Arg2) == 0x03)))
                                            {
                                                ^^PCI0.LPC0.FNQT ()
                                                ^^PCI0.LPC0.CTCL ()
                                            }

                                            ^^PCI0.LPC0.EC0.BCAI = Zero
                                            INSM = Zero
                                            Sleep (0x05)
                                            Notify (GZFD, 0xE7) // Hardware-Specific
                                            Notify (NPCF, 0xC0) // Hardware-Specific
                                            Sleep (0x05)
                                            Notify (^^PCI0.GPP0.PEGP, 0xC0) // Hardware-Specific
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Zero)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x2D))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.SPMO == 0x02))
                                            {
                                                If ((^^PCI0.LPC0.EC0.CAC1 == One))
                                                {
                                                    If ((^^PCI0.LPC0.EC0.EMFG == One))
                                                    {
                                                        Local1 = 0xE0
                                                    }
                                                    Else
                                                    {
                                                        Local1 = 0xFF
                                                    }
                                                }
                                                Else
                                                {
                                                    Local1 = One
                                                }
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.SPMO == Zero))
                                            {
                                                If ((^^PCI0.LPC0.EC0.PABD == One))
                                                {
                                                    Local1 = 0x03
                                                }
                                                ElseIf ((^^PCI0.LPC0.EC0.CAC1 == One))
                                                {
                                                    If ((^^PCI0.LPC0.EC0.EMFG == One))
                                                    {
                                                        Local1 = 0xE0
                                                    }
                                                    Else
                                                    {
                                                        Local1 = 0xFF
                                                    }
                                                }
                                                Else
                                                {
                                                    Local1 = 0x02
                                                }
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.SPMO == One))
                                            {
                                                Local1 = 0x03
                                            }

                                            If ((^^PCI0.LPC0.EC0.CTMD == One))
                                            {
                                                If ((^^PCI0.LPC0.EC0.CTE0 == One))
                                                {
                                                    Local1 = 0xE0
                                                }
                                                Else
                                                {
                                                    Local1 = 0xFF
                                                }
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x2E))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.GSFS == One))
                                            {
                                                Local1 = One
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.GSFS == Zero))
                                            {
                                                Local1 = 0x02
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x2F))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.ACTY () == One))
                                            {
                                                Local1 = One
                                            }
                                            Else
                                            {
                                                Local1 = 0x02
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x30))
                                {
                                    Return (0x64)
                                }

                                If ((Arg1 == 0x31))
                                {
                                    If ((PANT & 0x02))
                                    {
                                        Return (One)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }

                                If ((Arg1 == 0x32))
                                {
                                    If ((PANT & 0x02))
                                    {
                                        If ((M009 (0x4A) == One))
                                        {
                                            Return (One)
                                        }
                                        Else
                                        {
                                            Return (Zero)
                                        }
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }

                                If ((Arg1 == 0x33))
                                {
                                    If ((PANT & 0x02))
                                    {
                                        If ((ToInteger (Arg2) == One))
                                        {
                                            WECM (0x7F, One)
                                            M010 (0x4A, One)
                                        }
                                        Else
                                        {
                                            WECM (0x7F, Zero)
                                            M010 (0x4A, Zero)
                                        }
                                    }
                                    Else
                                    {
                                        WECM (0x7F, Zero)
                                        M010 (0x4A, Zero)
                                    }

                                    Return (Zero)
                                }

                                If ((Arg1 == 0x34))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            ^^PCI0.LPC0.EC0.LCON = ToInteger (Arg2)
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Zero)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x35))
                                {
                                    Return (Zero)
                                }

                                If ((Arg1 == 0x36))
                                {
                                    Local0 = Zero
                                    If ((ToInteger (Arg2) == One))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If (((ER8S == One) || (^^PCI0.LPC0.EC0.COD5 == One)))
                                            {
                                                Local0 = One
                                            }

                                            RDOC = Zero
                                            ^^PCI0.LPC0.EC0.COD5 = Zero
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }
                                    }

                                    Return (Local0)
                                }

                                If ((Arg1 == 0x37))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.SPMO == 0x02))
                                            {
                                                Local1 = One
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.SPMO == Zero))
                                            {
                                                Local1 = 0x02
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.SPMO == One))
                                            {
                                                Local1 = 0x03
                                            }

                                            If ((^^PCI0.LPC0.EC0.CTMD == One))
                                            {
                                                Local1 = 0xFF
                                            }

                                            If ((^^PCI0.LPC0.EC0.CTE0 == One))
                                            {
                                                Local1 = 0xE0
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x39))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((^^PCI0.LPC0.EC0.SPMO == Zero))
                                        {
                                            ^^PCI0.LPC0.EC0.BCAI = Zero
                                            INSM = ToInteger (Arg2)
                                            If ((INSM == Zero))
                                            {
                                                ^^PCI0.LPC0.EC0.NCMD (0x8B, Zero)
                                                ^^PCI0.LPC0.FNQT ()
                                                ^^PCI0.LPC0.CTCL ()
                                                BCTP = Zero
                                            }
                                            ElseIf ((INSM == One))
                                            {
                                                ^^PCI0.LPC0.EC0.NCMD (0x8A, Zero)
                                                ^^PCI0.LPC0.FNQS (0x02)
                                                BCTP = One
                                            }
                                            ElseIf ((INSM == 0x02))
                                            {
                                                ^^PCI0.LPC0.EC0.NCMD (0x8A, Zero)
                                                If ((MCSK == 0x02))
                                                {
                                                    If (((CPTY == 0x07) || (CPTY == 0x05)))
                                                    {
                                                        If (((GTYP == 0x05) || (GTYP == One)))
                                                        {
                                                            ^^PCI0.LPC0.FNQS (0x13)
                                                        }
                                                        Else
                                                        {
                                                            ^^PCI0.LPC0.FNQS (0x02)
                                                        }
                                                    }
                                                    ElseIf (((GTYP == 0x05) || (GTYP == One)))
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x17)
                                                    }
                                                    Else
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x02)
                                                    }
                                                }
                                                ElseIf ((MCSK == One))
                                                {
                                                    If (((CPTY == 0x07) || (CPTY == 0x05)))
                                                    {
                                                        If ((GTYP == 0x03))
                                                        {
                                                            ^^PCI0.LPC0.FNQS (0x14)
                                                        }
                                                        ElseIf ((GTYP == 0x02))
                                                        {
                                                            ^^PCI0.LPC0.FNQS (0x14)
                                                        }
                                                        ElseIf ((GTYP == 0x07))
                                                        {
                                                            ^^PCI0.LPC0.FNQS (0x14)
                                                        }
                                                        ElseIf ((GTYP == 0x06))
                                                        {
                                                            ^^PCI0.LPC0.FNQS (0x14)
                                                        }
                                                    }
                                                    ElseIf ((GTYP == 0x03))
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x17)
                                                    }
                                                    ElseIf ((GTYP == 0x02))
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x17)
                                                    }
                                                    ElseIf ((GTYP == 0x07))
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x17)
                                                    }
                                                    ElseIf ((GTYP == 0x06))
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x16)
                                                    }
                                                }

                                                BCTP = One
                                            }
                                            ElseIf ((INSM == 0x03))
                                            {
                                                ^^PCI0.LPC0.EC0.NCMD (0x8A, Zero)
                                                If ((MCSK == 0x02))
                                                {
                                                    If (((CPTY == 0x07) || (CPTY == 0x05)))
                                                    {
                                                        If (((GTYP == 0x05) || (GTYP == One)))
                                                        {
                                                            ^^PCI0.LPC0.FNQS (0x13)
                                                        }
                                                        Else
                                                        {
                                                            ^^PCI0.LPC0.FNQS (0x02)
                                                        }
                                                    }
                                                    ElseIf (((GTYP == 0x05) || (GTYP == One)))
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x17)
                                                    }
                                                    Else
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x02)
                                                    }
                                                }
                                                ElseIf ((MCSK == One))
                                                {
                                                    If (((CPTY == 0x07) || (CPTY == 0x05)))
                                                    {
                                                        If ((GTYP == 0x03))
                                                        {
                                                            ^^PCI0.LPC0.FNQS (0x15)
                                                        }
                                                        ElseIf ((GTYP == 0x02))
                                                        {
                                                            ^^PCI0.LPC0.FNQS (0x15)
                                                        }
                                                        ElseIf ((GTYP == 0x07))
                                                        {
                                                            ^^PCI0.LPC0.FNQS (0x15)
                                                        }
                                                        ElseIf ((GTYP == 0x06))
                                                        {
                                                            ^^PCI0.LPC0.FNQS (0x15)
                                                        }
                                                    }
                                                    ElseIf ((GTYP == 0x03))
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x17)
                                                    }
                                                    ElseIf ((GTYP == 0x02))
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x17)
                                                    }
                                                    ElseIf ((GTYP == 0x07))
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x17)
                                                    }
                                                    ElseIf ((GTYP == 0x06))
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x17)
                                                    }
                                                }

                                                BCTP = One
                                            }
                                            ElseIf ((INSM == 0x04))
                                            {
                                                ^^PCI0.LPC0.EC0.NCMD (0x8A, Zero)
                                                If ((MCSK == 0x02))
                                                {
                                                    If (((CPTY == 0x07) || (CPTY == 0x05)))
                                                    {
                                                        If (((GTYP == 0x05) || (GTYP == One)))
                                                        {
                                                            ^^PCI0.LPC0.FNQS (0x14)
                                                        }
                                                        Else
                                                        {
                                                            ^^PCI0.LPC0.FNQS (0x02)
                                                        }
                                                    }
                                                    ElseIf (((GTYP == 0x05) || (GTYP == One)))
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x15)
                                                    }
                                                    Else
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x02)
                                                    }
                                                }
                                                ElseIf ((MCSK == One))
                                                {
                                                    If (((CPTY == 0x07) || (CPTY == 0x05)))
                                                    {
                                                        If ((GTYP == 0x03))
                                                        {
                                                            ^^PCI0.LPC0.FNQS (0x15)
                                                        }
                                                        ElseIf ((GTYP == 0x02))
                                                        {
                                                            ^^PCI0.LPC0.FNQS (0x15)
                                                        }
                                                        ElseIf ((GTYP == 0x07))
                                                        {
                                                            ^^PCI0.LPC0.FNQS (0x15)
                                                        }
                                                        ElseIf ((GTYP == 0x06))
                                                        {
                                                            ^^PCI0.LPC0.FNQS (0x16)
                                                        }
                                                    }
                                                    ElseIf ((GTYP == 0x03))
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x15)
                                                    }
                                                    ElseIf ((GTYP == 0x02))
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x15)
                                                    }
                                                    ElseIf ((GTYP == 0x07))
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x15)
                                                    }
                                                    ElseIf ((GTYP == 0x06))
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x18)
                                                    }
                                                }

                                                BCTP = One
                                            }
                                            ElseIf ((INSM == 0x05))
                                            {
                                                ^^PCI0.LPC0.EC0.NCMD (0x8A, Zero)
                                                If ((MCSK == 0x02))
                                                {
                                                    If (((CPTY == 0x07) || (CPTY == 0x05)))
                                                    {
                                                        If (((GTYP == 0x05) || (GTYP == One)))
                                                        {
                                                            ^^PCI0.LPC0.FNQS (0x15)
                                                        }
                                                        Else
                                                        {
                                                            ^^PCI0.LPC0.FNQS (0x02)
                                                        }
                                                    }
                                                    ElseIf (((GTYP == 0x05) || (GTYP == One)))
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x14)
                                                    }
                                                    Else
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x02)
                                                    }
                                                }
                                                ElseIf ((MCSK == One))
                                                {
                                                    If (((CPTY == 0x07) || (CPTY == 0x05)))
                                                    {
                                                        If ((GTYP == 0x03))
                                                        {
                                                            ^^PCI0.LPC0.FNQS (0x13)
                                                        }
                                                        ElseIf ((GTYP == 0x02))
                                                        {
                                                            ^^PCI0.LPC0.FNQS (0x13)
                                                        }
                                                        ElseIf ((GTYP == 0x07))
                                                        {
                                                            ^^PCI0.LPC0.FNQS (0x13)
                                                        }
                                                        ElseIf ((GTYP == 0x06))
                                                        {
                                                            ^^PCI0.LPC0.FNQS (0x15)
                                                        }
                                                    }
                                                    ElseIf ((GTYP == 0x03))
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x14)
                                                    }
                                                    ElseIf ((GTYP == 0x02))
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x14)
                                                    }
                                                    ElseIf ((GTYP == 0x07))
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x14)
                                                    }
                                                    ElseIf ((GTYP == 0x06))
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x17)
                                                    }
                                                }

                                                BCTP = One
                                            }
                                            ElseIf ((INSM == 0x06))
                                            {
                                                ^^PCI0.LPC0.EC0.NCMD (0x8A, Zero)
                                                If ((MCSK == 0x02))
                                                {
                                                    If (((CPTY == 0x07) || (CPTY == 0x05)))
                                                    {
                                                        If (((GTYP == 0x05) || (GTYP == One)))
                                                        {
                                                            ^^PCI0.LPC0.FNQS (0x11)
                                                        }
                                                        Else
                                                        {
                                                            ^^PCI0.LPC0.FNQS (0x02)
                                                        }
                                                    }
                                                    ElseIf (((GTYP == 0x05) || (GTYP == One)))
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x12)
                                                    }
                                                    Else
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x02)
                                                    }
                                                }
                                                ElseIf ((MCSK == One))
                                                {
                                                    If (((CPTY == 0x07) || (CPTY == 0x05)))
                                                    {
                                                        If ((GTYP == 0x03))
                                                        {
                                                            ^^PCI0.LPC0.FNQS (0x15)
                                                        }
                                                        ElseIf ((GTYP == 0x02))
                                                        {
                                                            ^^PCI0.LPC0.FNQS (0x15)
                                                        }
                                                        ElseIf ((GTYP == 0x07))
                                                        {
                                                            ^^PCI0.LPC0.FNQS (0x15)
                                                        }
                                                        ElseIf ((GTYP == 0x06))
                                                        {
                                                            ^^PCI0.LPC0.FNQS (0x16)
                                                        }
                                                    }
                                                    ElseIf ((GTYP == 0x03))
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x15)
                                                    }
                                                    ElseIf ((GTYP == 0x02))
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x15)
                                                    }
                                                    ElseIf ((GTYP == 0x07))
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x15)
                                                    }
                                                    ElseIf ((GTYP == 0x06))
                                                    {
                                                        ^^PCI0.LPC0.FNQS (0x18)
                                                    }
                                                }

                                                BCTP = One
                                            }
                                            Else
                                            {
                                                ^^PCI0.LPC0.EC0.NCMD (0x8B, Zero)
                                                If ((DBFS == One))
                                                {
                                                    ^^PCI0.LPC0.FNQS (0x04)
                                                }
                                                Else
                                                {
                                                    ^^PCI0.LPC0.FNQS (0x03)
                                                }

                                                BCTP = Zero
                                            }

                                            Sleep (0x05)
                                            Notify (NPCF, 0xC0) // Hardware-Specific
                                        }

                                        Return (Zero)
                                    }
                                }

                                If ((Arg1 == 0x3A))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        Local1 = INSM /* \INSM */
                                        Return (Local1)
                                    }
                                }

                                If ((Arg1 == 0x3B))
                                {
                                    Return (One)
                                }

                                If ((Arg1 == 0x3C))
                                {
                                    Name (CCFQ, Buffer (0x04)
                                    {
                                         0x00                                             // .
                                    })
                                    CreateWordField (CCFQ, Zero, CCF1)
                                    CreateWordField (CCFQ, 0x02, CCF2)
                                    Local1 = CMSP /* \CMSP */
                                    Local2 = CMSP /* \CMSP */
                                    If ((COCC == Zero))
                                    {
                                        CCF1 = Local1
                                        CCF2 = Local2
                                    }
                                    ElseIf ((COCC == One))
                                    {
                                        Local1 += 0xC8
                                        CCF1 = Local1
                                        CCF2 = Local2
                                    }
                                    Else
                                    {
                                        CCF1 = Local1
                                        CCF2 = Local2
                                    }

                                    Return (CCFQ) /* \_SB_.GZFD.WMAA.CCFQ */
                                }

                                If ((Arg1 == 0x3D))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        Local1 = 0x07
                                        Return (Local1)
                                    }
                                }

                                If ((Arg1 == 0x3E))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((^^PCI0.LPC0.EC0.ACTY () == One))
                                        {
                                            Local1 = One
                                        }
                                        Else
                                        {
                                            Local1 = Zero
                                        }

                                        Return (Local1)
                                    }
                                }

                                If ((Arg1 == 0x3F))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        Return (0x03)
                                    }
                                }

                                If ((Arg1 == 0x40))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        Return (^^PCI0.LPC0.EC0.REJF (One))
                                    }
                                }

                                If ((Arg1 == 0x41))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        Local0 = ToInteger (Arg2)
                                        ^^PCI0.LPC0.EC0.WEJF (One, Local0)
                                        Local1 = HTPL ()
                                        Return (Local1)
                                    }

                                    Return (Zero)
                                }

                                If ((Arg1 == 0x42))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        DGDO = ToInteger (Arg2)
                                        HTPL ()
                                    }

                                    Return (Zero)
                                }

                                If ((Arg1 == 0x43))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        Return (Zero)
                                    }
                                }

                                If ((Arg1 == 0x44))
                                {
                                    Return (ToString (DGPT, Ones))
                                }
                            }

                            Method (WMB2, 3, NotSerialized)
                            {
                                If ((Arg1 == 0x05))
                                {
                                    Name (LFGT, Buffer (0x58)
                                    {
                                         0x00                                             // .
                                    })
                                    CreateDWordField (LFGT, Zero, LFFL)
                                    CreateDWordField (LFGT, 0x04, LFF0)
                                    CreateDWordField (LFGT, 0x08, LFF1)
                                    CreateDWordField (LFGT, 0x0C, LFF2)
                                    CreateDWordField (LFGT, 0x10, LFF3)
                                    CreateDWordField (LFGT, 0x14, LFF4)
                                    CreateDWordField (LFGT, 0x18, LFF5)
                                    CreateDWordField (LFGT, 0x1C, LFF6)
                                    CreateDWordField (LFGT, 0x20, LFF7)
                                    CreateDWordField (LFGT, 0x24, LFF8)
                                    CreateDWordField (LFGT, 0x28, LFF9)
                                    CreateDWordField (LFGT, 0x2C, LFFA)
                                    LFFL = 0x0A
                                    LFF0 = ^^PCI0.LPC0.EC0.F9F0 /* \_SB_.PCI0.LPC0.EC0_.F9F0 */
                                    LFF1 = ^^PCI0.LPC0.EC0.F9F1 /* \_SB_.PCI0.LPC0.EC0_.F9F1 */
                                    LFF2 = ^^PCI0.LPC0.EC0.F9F2 /* \_SB_.PCI0.LPC0.EC0_.F9F2 */
                                    LFF3 = ^^PCI0.LPC0.EC0.F9F3 /* \_SB_.PCI0.LPC0.EC0_.F9F3 */
                                    LFF4 = ^^PCI0.LPC0.EC0.F9F4 /* \_SB_.PCI0.LPC0.EC0_.F9F4 */
                                    LFF5 = ^^PCI0.LPC0.EC0.F9F5 /* \_SB_.PCI0.LPC0.EC0_.F9F5 */
                                    LFF6 = ^^PCI0.LPC0.EC0.F9F6 /* \_SB_.PCI0.LPC0.EC0_.F9F6 */
                                    LFF7 = ^^PCI0.LPC0.EC0.F9F7 /* \_SB_.PCI0.LPC0.EC0_.F9F7 */
                                    LFF8 = ^^PCI0.LPC0.EC0.F9F8 /* \_SB_.PCI0.LPC0.EC0_.F9F8 */
                                    LFF9 = ^^PCI0.LPC0.EC0.F9F9 /* \_SB_.PCI0.LPC0.EC0_.F9F9 */
                                    LFFA = 0x0A
                                    Return (LFGT) /* \_SB_.GZFD.WMB2.LFGT */
                                }

                                If ((Arg1 == 0x06))
                                {
                                    CreateByteField (Arg2, Zero, FSTM)
                                    CreateByteField (Arg2, One, FSID)
                                    CreateDWordField (Arg2, 0x02, FSTL)
                                    CreateByteField (Arg2, 0x06, FSS0)
                                    CreateByteField (Arg2, 0x08, FSS1)
                                    CreateByteField (Arg2, 0x0A, FSS2)
                                    CreateByteField (Arg2, 0x0C, FSS3)
                                    CreateByteField (Arg2, 0x0E, FSS4)
                                    CreateByteField (Arg2, 0x10, FSS5)
                                    CreateByteField (Arg2, 0x12, FSS6)
                                    CreateByteField (Arg2, 0x14, FSS7)
                                    CreateByteField (Arg2, 0x16, FSS8)
                                    CreateByteField (Arg2, 0x18, FSS9)
                                    If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                    {
                                        ^^PCI0.LPC0.EC0.F9F0 = FSS0 /* \_SB_.GZFD.WMB2.FSS0 */
                                        ^^PCI0.LPC0.EC0.F9F1 = FSS1 /* \_SB_.GZFD.WMB2.FSS1 */
                                        ^^PCI0.LPC0.EC0.F9F2 = FSS2 /* \_SB_.GZFD.WMB2.FSS2 */
                                        ^^PCI0.LPC0.EC0.F9F3 = FSS3 /* \_SB_.GZFD.WMB2.FSS3 */
                                        ^^PCI0.LPC0.EC0.F9F4 = FSS4 /* \_SB_.GZFD.WMB2.FSS4 */
                                        ^^PCI0.LPC0.EC0.F9F5 = FSS5 /* \_SB_.GZFD.WMB2.FSS5 */
                                        ^^PCI0.LPC0.EC0.F9F6 = FSS6 /* \_SB_.GZFD.WMB2.FSS6 */
                                        ^^PCI0.LPC0.EC0.F9F7 = FSS7 /* \_SB_.GZFD.WMB2.FSS7 */
                                        ^^PCI0.LPC0.EC0.F9F8 = FSS8 /* \_SB_.GZFD.WMB2.FSS8 */
                                        ^^PCI0.LPC0.EC0.F9F9 = FSS9 /* \_SB_.GZFD.WMB2.FSS9 */
                                        ^^PCI0.LPC0.EC0.NCMD (0x8C, Zero)
                                        Release (^^PCI0.LPC0.EC0.LFCM)
                                    }

                                    Return (Zero)
                                }
                            }

                            Method (WMB3, 3, NotSerialized)
                            {
                                If ((Arg1 == 0x0E))
                                {
                                    CreateDWordField (Arg2, Zero, LTT1)
                                    CreateDWordField (Arg2, 0x04, CNID)
                                    CreateDWordField (Arg2, 0x08, CVA1)
                                    If ((ToInteger (CNID) == 0x414D4401))
                                    {
                                        WECM (0xCC, IOTF (ToInteger (CVA1)))
                                    }
                                    ElseIf ((ToInteger (CNID) == 0x414D4402))
                                    {
                                        WECM (0xCD, IOTF (ToInteger (CVA1)))
                                    }
                                    ElseIf ((ToInteger (CNID) == 0x414D4403))
                                    {
                                        WECM (0xBE, IOT2 (ToInteger (CVA1)))
                                        WECM (0xCE, IOTF (ToInteger (CVA1)))
                                    }

                                    WSMI (0x03)
                                }
                            }

                            Method (WMB4, 3, NotSerialized)
                            {
                            }

                            Method (WMB5, 3, NotSerialized)
                            {
                                If ((Arg1 == 0x11))
                                {
                                    If ((ToInteger (Arg2) == 0x00080000))
                                    {
                                        Return (0x0101)
                                    }

                                    If ((ToInteger (Arg2) == 0x00070000))
                                    {
                                        Return (0x0001001F)
                                    }

                                    If ((ToInteger (Arg2) == 0x00010000))
                                    {
                                        Return (^^PCI0.LPC0.EC0.REJF (One))
                                    }

                                    If ((ToInteger (Arg2) == 0x00020000))
                                    {
                                        Return (One)
                                    }

                                    If ((ToInteger (Arg2) == 0x00030000))
                                    {
                                        Local0 = Zero
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local0 = ^^PCI0.LPC0.EC0.FLBT /* \_SB_.PCI0.LPC0.EC0_.FLBT */
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Local0)
                                    }

                                    If ((ToInteger (Arg2) == 0x03010001))
                                    {
                                        Local0 = Zero
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local0 = ^^PCI0.LPC0.EC0.EACS /* \_SB_.PCI0.LPC0.EC0_.EACS */
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Local0)
                                    }

                                    If ((ToInteger (Arg2) == 0x03010002))
                                    {
                                        Local0 = Zero
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local0 = ^^PCI0.LPC0.EC0.ETCS /* \_SB_.PCI0.LPC0.EC0_.ETCS */
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Local0)
                                    }

                                    If ((ToInteger (Arg2) == 0x00090000))
                                    {
                                        Return (0x03)
                                    }

                                    If ((ToInteger (Arg2) == 0x02090000))
                                    {
                                        Return (DGID) /* \DGID */
                                    }

                                    If ((ToInteger (Arg2) == 0x020A0000))
                                    {
                                        Local0 = Zero
                                        If (((GTYP == 0x02) || (GTYP == 0x03)))
                                        {
                                            Local0 = 0x37
                                        }
                                        ElseIf ((GTYP == One))
                                        {
                                            Local0 = 0x50
                                        }
                                        ElseIf ((GTYP == 0x05))
                                        {
                                            Local0 = 0x50
                                        }
                                        ElseIf ((GTYP == 0x07))
                                        {
                                            Local0 = 0x37
                                        }
                                        Else
                                        {
                                            Local0 = 0x3C
                                        }

                                        Return (Local0)
                                    }

                                    If ((ToInteger (Arg2) == 0x020B0000))
                                    {
                                        If ((MCSK == 0x02))
                                        {
                                            Return (Zero)
                                        }
                                        ElseIf ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local0 = ^^PCI0.LPC0.EC0.SGCB /* \_SB_.PCI0.LPC0.EC0_.SGCB */
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local0)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x03030000))
                                    {
                                        Local0 = Zero
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If (((^^PCI0.LPC0.EC0.ACTY () == One) || (^^PCI0.LPC0.EC0.ACTY () == 0x04)))
                                            {
                                                Local0 |= ^^PCI0.LPC0.EC0.APTS /* \_SB_.PCI0.LPC0.EC0_.APTS */
                                            }

                                            If ((^^PCI0.LPC0.EC0.ACTY () == 0x02))
                                            {
                                                Local0 |= ^^PCI0.LPC0.EC0.APTS /* \_SB_.PCI0.LPC0.EC0_.APTS */
                                                Local0 |= 0x0100
                                            }

                                            If ((^^PCI0.LPC0.EC0.APTS == 0x03))
                                            {
                                                If ((^^PCI0.LPC0.EC0.ACMO == One))
                                                {
                                                    Local0 |= ^^PCI0.LPC0.EC0.APTS /* \_SB_.PCI0.LPC0.EC0_.APTS */
                                                }
                                                Else
                                                {
                                                    Local0 |= ^^PCI0.LPC0.EC0.APTS /* \_SB_.PCI0.LPC0.EC0_.APTS */
                                                    Local0 |= 0x0100
                                                }
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Local0)
                                    }

                                    If ((ToInteger (Arg2) == 0x03020000)){}
                                    If ((ToInteger (Arg2) == 0x02080000))
                                    {
                                        Name (QPOW, Zero)
                                        Name (BPOW, Zero)
                                        Name (PPOW, Zero)
                                        Name (ATAB, Zero)
                                        Name (BAPW, 0x50)
                                        If (((GTYP == One) || (GTYP == 0x05)))
                                        {
                                            If ((CPTY == 0x07))
                                            {
                                                QPOW = 0x69
                                                BPOW = 0x87
                                                PPOW = 0xDC
                                            }
                                            Else
                                            {
                                                QPOW = 0x69
                                                BPOW = 0x87
                                                PPOW = 0xE1
                                            }
                                        }
                                        ElseIf (((GTYP == 0x02) || (GTYP == 0x03)))
                                        {
                                            If (((CPTY == 0x07) || (CPTY == 0x05)))
                                            {
                                                QPOW = 0x4B
                                                BPOW = 0x87
                                                PPOW = 0xAF
                                                BAPW = 0x37
                                            }
                                            Else
                                            {
                                                QPOW = 0x4B
                                                BPOW = 0x87
                                                PPOW = 0xB9
                                                BAPW = 0x37
                                            }
                                        }
                                        ElseIf ((GTYP == 0x07))
                                        {
                                            If (((CPTY == 0x07) || (CPTY == 0x05)))
                                            {
                                                QPOW = 0x4B
                                                BPOW = 0x87
                                                PPOW = 0xAF
                                                BAPW = 0x37
                                            }
                                            Else
                                            {
                                                QPOW = 0x4B
                                                BPOW = 0x87
                                                PPOW = 0xB9
                                                BAPW = 0x37
                                            }
                                        }
                                        ElseIf (((CPTY == 0x07) || (CPTY == 0x05)))
                                        {
                                            QPOW = 0x4B
                                            BPOW = 0x73
                                            PPOW = 0x96
                                            BAPW = 0x3C
                                        }
                                        Else
                                        {
                                            QPOW = 0x4B
                                            BPOW = 0x73
                                            PPOW = 0xA0
                                            BAPW = 0x3C
                                        }

                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.TGPP < BAPW))
                                            {
                                                Local1 = (^^PCI0.LPC0.EC0.TGPP + ^^PCI0.LPC0.EC0.CPP4) /* \_SB_.PCI0.LPC0.EC0_.CPP4 */
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.CPP4 >= ^^PCI0.LPC0.EC0.GATP))
                                            {
                                                Local0 = (^^PCI0.LPC0.EC0.TGPP + ^^PCI0.LPC0.EC0.GPAB) /* \_SB_.PCI0.LPC0.EC0_.GPAB */
                                                ATAB = (^^PCI0.LPC0.EC0.GATP - ^^PCI0.LPC0.EC0.GPAB) /* \_SB_.PCI0.LPC0.EC0_.GPAB */
                                                Local1 = (Local0 + ATAB) /* \_SB_.GZFD.WMB5.ATAB */
                                            }
                                            Else
                                            {
                                                Local0 = (^^PCI0.LPC0.EC0.TGPP + ^^PCI0.LPC0.EC0.CPP4) /* \_SB_.PCI0.LPC0.EC0_.CPP4 */
                                                Local1 = (Local0 + ^^PCI0.LPC0.EC0.GPAB) /* \_SB_.PCI0.LPC0.EC0_.GPAB */
                                            }

                                            Local2 = Zero
                                            If ((Local1 <= QPOW))
                                            {
                                                Local2 = One
                                            }
                                            ElseIf (((Local1 <= BPOW) && (Local1 > QPOW)))
                                            {
                                                Local2 = 0x02
                                            }
                                            ElseIf (((Local1 <= PPOW) && (Local1 > BPOW)))
                                            {
                                                Local2 = 0x03
                                            }
                                            Else
                                            {
                                                Local2 = 0x04
                                            }

                                            ^^PCI0.LPC0.EC0.F9FA = Local2
                                            ^^PCI0.LPC0.EC0.NCMD (0x8C, Zero)
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local2)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x04020000))
                                    {
                                        Local0 = Zero
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local0 = ^^PCI0.LPC0.EC0.FNST /* \_SB_.PCI0.LPC0.EC0_.FNST */
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Local0)
                                    }

                                    If ((ToInteger (Arg2) == 0x04030001))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local0 = (^^PCI0.LPC0.EC0.FANS * 0x64)
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Local0)
                                    }

                                    If ((ToInteger (Arg2) == 0x04030002))
                                    {
                                        Local0 = Zero
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local0 = (^^PCI0.LPC0.EC0.FA2S * 0x64)
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Local0)
                                    }

                                    If ((ToInteger (Arg2) == 0x05010000))
                                    {
                                        Local0 = Zero
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local0 = ^^PCI0.LPC0.EC0.CPUS /* \_SB_.PCI0.LPC0.EC0_.CPUS */
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Local0)
                                    }

                                    If ((ToInteger (Arg2) == 0x05040000))
                                    {
                                        Local0 = Zero
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local0 = ^^PCI0.LPC0.EC0.CPUT /* \_SB_.PCI0.LPC0.EC0_.CPUT */
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Local0)
                                    }

                                    If ((ToInteger (Arg2) == 0x05050000))
                                    {
                                        Local0 = Zero
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local0 = ^^PCI0.LPC0.EC0.GPUT /* \_SB_.PCI0.LPC0.EC0_.GPUT */
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Local0)
                                    }

                                    If ((ToInteger (Arg2) == 0x01080100))
                                    {
                                        Return (Zero)
                                    }

                                    If ((ToInteger (Arg2) == 0x01080200))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.ACTY () == One))
                                            {
                                                If ((SCOC == One))
                                                {
                                                    If ((COCC == One))
                                                    {
                                                        Local0 = 0x11
                                                    }
                                                    Else
                                                    {
                                                        Local0 = 0x10
                                                    }
                                                }
                                                Else
                                                {
                                                    Local0 = Zero
                                                }
                                            }
                                            Else
                                            {
                                                Local0 = 0x10
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local0)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x01080300))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.ACTY () == One))
                                            {
                                                If ((SCOC == One))
                                                {
                                                    If ((COCC == One))
                                                    {
                                                        Local0 = 0x11
                                                    }
                                                    Else
                                                    {
                                                        Local0 = 0x10
                                                    }
                                                }
                                                Else
                                                {
                                                    Local0 = Zero
                                                }
                                            }
                                            Else
                                            {
                                                Local0 = Zero
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local0)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x0108FF00))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.ACTY () == One))
                                            {
                                                If ((SCOC == One))
                                                {
                                                    If ((COCC == One))
                                                    {
                                                        Local0 = 0x12
                                                    }
                                                    Else
                                                    {
                                                        Local0 = 0x10
                                                    }
                                                }
                                                Else
                                                {
                                                    Local0 = Zero
                                                }
                                            }
                                            Else
                                            {
                                                Local0 = Zero
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local0)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x01010000))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.CPP1 == Zero))
                                            {
                                                If ((MCSK == 0x02))
                                                {
                                                    Local0 = 0x55
                                                }
                                                Else
                                                {
                                                    Local0 = 0x55
                                                }
                                            }
                                            Else
                                            {
                                                Local0 = ^^PCI0.LPC0.EC0.CPP1 /* \_SB_.PCI0.LPC0.EC0_.CPP1 */
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local0)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x01020000))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.CPP2 == Zero))
                                            {
                                                If ((MCSK == 0x02))
                                                {
                                                    Local0 = 0x46
                                                }
                                                Else
                                                {
                                                    Local0 = 0x46
                                                }
                                            }
                                            Else
                                            {
                                                Local0 = ^^PCI0.LPC0.EC0.CPP2 /* \_SB_.PCI0.LPC0.EC0_.CPP2 */
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local0)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x01030000))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.CPP3 == Zero))
                                            {
                                                If ((MCSK == 0x02))
                                                {
                                                    Local0 = 0x66
                                                }
                                                Else
                                                {
                                                    Local0 = 0x66
                                                }
                                            }
                                            Else
                                            {
                                                Local0 = ^^PCI0.LPC0.EC0.CPP3 /* \_SB_.PCI0.LPC0.EC0_.CPP3 */
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local0)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x01040000))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.CGTC == Zero))
                                            {
                                                Local0 = 0x64
                                            }
                                            Else
                                            {
                                                Local0 = ^^PCI0.LPC0.EC0.CGTC /* \_SB_.PCI0.LPC0.EC0_.CGTC */
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local0)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x01060000))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.CPP4 == Zero))
                                            {
                                                If ((MCSK == 0x02))
                                                {
                                                    Local0 = 0x37
                                                }
                                                Else
                                                {
                                                    Local0 = 0x37
                                                }
                                            }
                                            Else
                                            {
                                                Local0 = ^^PCI0.LPC0.EC0.CPP4 /* \_SB_.PCI0.LPC0.EC0_.CPP4 */
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local0)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x02010000))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.GPAB == Zero))
                                            {
                                                If ((^^PCI0.LPC0.EC0.GPUF == One))
                                                {
                                                    Local0 = Zero
                                                }
                                                ElseIf ((MCSK == 0x02))
                                                {
                                                    Local0 = 0x0F
                                                }
                                                ElseIf (((GTYP == 0x02) || (GTYP == 0x03)))
                                                {
                                                    Local0 = Zero
                                                }
                                                ElseIf ((GTYP == 0x07))
                                                {
                                                    Local0 = Zero
                                                }
                                                Else
                                                {
                                                    Local0 = 0x0A
                                                }
                                            }
                                            Else
                                            {
                                                Local0 = ^^PCI0.LPC0.EC0.GPAB /* \_SB_.PCI0.LPC0.EC0_.GPAB */
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local0)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x02020000))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.TGPP == Zero))
                                            {
                                                If ((MCSK == 0x02))
                                                {
                                                    Local0 = 0x50
                                                }
                                                ElseIf (((GTYP == 0x02) || (GTYP == 0x03)))
                                                {
                                                    Local0 = 0x50
                                                }
                                                ElseIf ((GTYP == 0x07))
                                                {
                                                    Local0 = 0x50
                                                }
                                                Else
                                                {
                                                    Local0 = 0x3C
                                                }
                                            }
                                            Else
                                            {
                                                Local0 = ^^PCI0.LPC0.EC0.TGPP /* \_SB_.PCI0.LPC0.EC0_.TGPP */
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local0)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x02030000))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.GPTH == Zero))
                                            {
                                                Local0 = GGTC /* \GGTC */
                                            }
                                            Else
                                            {
                                                Local0 = ^^PCI0.LPC0.EC0.GPTH /* \_SB_.PCI0.LPC0.EC0_.GPTH */
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local0)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x02040000))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.GATP == Zero))
                                            {
                                                If ((MCSK == 0x02))
                                                {
                                                    Local0 = 0x37
                                                }
                                                Else
                                                {
                                                    Local0 = 0x37
                                                }
                                            }
                                            Else
                                            {
                                                Local0 = ^^PCI0.LPC0.EC0.GATP /* \_SB_.PCI0.LPC0.EC0_.GATP */
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local0)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x02050100))
                                    {
                                        Return (Zero)
                                    }

                                    If ((ToInteger (Arg2) == 0x02050200))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.ACTY () == One))
                                            {
                                                Return (BGPS) /* \BGPS */
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x02050300))
                                    {
                                        If ((^^PCI0.LPC0.EC0.ACTY () == One))
                                        {
                                            Return (PGPS) /* \PGPS */
                                        }
                                        Else
                                        {
                                            Return (Zero)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x0205FF00))
                                    {
                                        If ((^^PCI0.LPC0.EC0.ACTY () == One))
                                        {
                                            Return (MGPS) /* \MGPS */
                                        }
                                        Else
                                        {
                                            Return (Zero)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x000C0000))
                                    {
                                        Return (One)
                                    }

                                    If ((ToInteger (Arg2) == 0x000E0000))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local0 = ^^PCI0.LPC0.EC0.EFPS /* \_SB_.PCI0.LPC0.EC0_.EFPS */
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Local0)
                                    }

                                    If ((ToInteger (Arg2) == 0x000F0000))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local0 = ^^PCI0.LPC0.EC0.REJF (0x03)
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Local0)
                                    }
                                }

                                If ((Arg1 == 0x12))
                                {
                                    CreateDWordField (Arg2, Zero, SFV0)
                                    CreateDWordField (Arg2, 0x04, SFV1)
                                    If ((SFV0 == 0x00010000))
                                    {
                                        If (^^PCI0.LPC0.EC0.ECAV)
                                        {
                                            Local0 = ToInteger (SFV1)
                                            ^^PCI0.LPC0.EC0.WEJF (One, Local0)
                                            Local1 = HTPL ()
                                            Return (Local1)
                                        }
                                    }

                                    If ((SFV0 == 0x00020000))
                                    {
                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x00030000))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((ToInteger (SFV1) == One))
                                            {
                                                WSMI (0x05)
                                                ^^PCI0.LPC0.EC0.FLBT = One
                                            }
                                            Else
                                            {
                                                WSMI (0x06)
                                                ^^PCI0.LPC0.EC0.FLBT = Zero
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x03010001))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((ToInteger (SFV1) == One))
                                            {
                                                WSMI (0x07)
                                                ^^PCI0.LPC0.EC0.EACS = One
                                            }
                                            Else
                                            {
                                                WSMI (0x08)
                                                ^^PCI0.LPC0.EC0.EACS = Zero
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x03010002))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((ToInteger (SFV1) == One))
                                            {
                                                WSMI (0x09)
                                                ^^PCI0.LPC0.EC0.ETCS = One
                                            }
                                            Else
                                            {
                                                WSMI (0x0A)
                                                ^^PCI0.LPC0.EC0.ETCS = Zero
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x000A0000))
                                    {
                                        If ((ToInteger (SFV1) == One))
                                        {
                                            LSKD = 0x30
                                            Notify (WMIU, 0xD0) // Hardware-Specific
                                        }

                                        If ((ToInteger (SFV1) == 0x02))
                                        {
                                            LSKD = 0x31
                                            Notify (WMIU, 0xD0) // Hardware-Specific
                                        }

                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x02070000))
                                    {
                                        If (^^PCI0.LPC0.EC0.ECAV)
                                        {
                                            DGDO = ToInteger (SFV1)
                                            HTPL ()
                                        }

                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x03020000))
                                    {
                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x04020000))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((SFV1 == One))
                                            {
                                                ^^PCI0.LPC0.EC0.FNST = One
                                            }
                                            Else
                                            {
                                                ^^PCI0.LPC0.EC0.FNST = Zero
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x04030001))
                                    {
                                        Divide (SFV1, 0x64, Local0, Local1)
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            ^^PCI0.LPC0.EC0.FANS = Local1
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x04030002))
                                    {
                                        Divide (SFV1, 0x64, Local0, Local1)
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            ^^PCI0.LPC0.EC0.FA2S = Local1
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x01080100))
                                    {
                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x01080200))
                                    {
                                        If ((ToInteger (SFV1) == Zero))
                                        {
                                            WSMI (0x02)
                                        }
                                        Else
                                        {
                                            WSMI (One)
                                        }

                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x01080300))
                                    {
                                        If ((ToInteger (SFV1) == Zero))
                                        {
                                            WSMI (0x02)
                                        }
                                        Else
                                        {
                                            WSMI (One)
                                        }

                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x0108FF00))
                                    {
                                        If ((ToInteger (SFV1) == Zero))
                                        {
                                            WSMI (0x02)
                                        }
                                        Else
                                        {
                                            WSMI (One)
                                        }

                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x01010000))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            ^^PCI0.LPC0.EC0.CPP1 = ToInteger (SFV1)
                                            Local0 = ^^PCI0.LPC0.EC0.CPP1 /* \_SB_.PCI0.LPC0.EC0_.CPP1 */
                                            Local0 *= 0x03E8
                                            SSZE = 0x07
                                            SMUF = 0x07
                                            SMUD = Local0
                                            ALIB (0x0C, XX11)
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }
                                    }

                                    If ((SFV0 == 0x01020000))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            ^^PCI0.LPC0.EC0.CPP2 = ToInteger (SFV1)
                                            If ((DBFS == Zero))
                                            {
                                                Local0 = ^^PCI0.LPC0.EC0.CPP2 /* \_SB_.PCI0.LPC0.EC0_.CPP2 */
                                                Local0 *= 0x03E8
                                                SSZE = 0x07
                                                SMUF = 0x05
                                                SMUD = Local0
                                                ALIB (0x0C, XX11)
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }
                                    }

                                    If ((SFV0 == 0x01030000))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            ^^PCI0.LPC0.EC0.CPP3 = ToInteger (SFV1)
                                            Local1 = ^^PCI0.LPC0.EC0.CPP3 /* \_SB_.PCI0.LPC0.EC0_.CPP3 */
                                            Local1 *= 0x03E8
                                            SSZE = 0x07
                                            SMUF = 0x04
                                            SMUD = Local1
                                            ALIB (0x0C, XX11)
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }
                                    }

                                    If ((SFV0 == 0x01040000))
                                    {
                                        If ((HTCS == One))
                                        {
                                            SSZE = 0x07
                                            SMUF = 0x03
                                            SMUD = HTCD /* External reference */
                                            ALIB (0x0C, XX11)
                                        }
                                        ElseIf ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            ^^PCI0.LPC0.EC0.CGTC = ToInteger (SFV1)
                                            SSZE = 0x07
                                            SMUF = 0x03
                                            SMUD = ^^PCI0.LPC0.EC0.CGTC /* \_SB_.PCI0.LPC0.EC0_.CGTC */
                                            ALIB (0x0C, XX11)
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }
                                    }

                                    If ((SFV0 == 0x01060000))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            ^^PCI0.LPC0.EC0.CPP4 = ToInteger (SFV1)
                                            If ((DBFS == One))
                                            {
                                                Local0 = ^^PCI0.LPC0.EC0.CPP4 /* \_SB_.PCI0.LPC0.EC0_.CPP4 */
                                                Local0 *= 0x03E8
                                                SSZE = 0x07
                                                SMUF = 0x05
                                                SMUD = Local0
                                                ALIB (0x0C, XX11)
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }
                                    }

                                    If ((SFV0 == 0x02050100))
                                    {
                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x02050200))
                                    {
                                        If ((ToInteger (SFV1) == Zero))
                                        {
                                            BGPS = 0x10
                                        }
                                        Else
                                        {
                                            BGPS = 0x11
                                        }

                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x02050300))
                                    {
                                        If ((ToInteger (SFV1) == Zero))
                                        {
                                            PGPS = 0x10
                                        }
                                        Else
                                        {
                                            PGPS = 0x11
                                        }

                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x0205FF00))
                                    {
                                        If ((ToInteger (SFV1) == Zero))
                                        {
                                            MGPS = 0x10
                                        }
                                        Else
                                        {
                                            MGPS = 0x12
                                        }

                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x000E0000))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((ToInteger (SFV1) == Zero))
                                            {
                                                ^^PCI0.LPC0.EC0.EFPS = Zero
                                                WSMI (0x0C)
                                            }
                                            Else
                                            {
                                                ^^PCI0.LPC0.EC0.EFPS = One
                                                WSMI (0x0B)
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Notify (GZFD, 0xEA) // Hardware-Specific
                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x02010000))
                                    {
                                        Local0 = ToInteger (SFV1)
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            ^^PCI0.LPC0.EC0.GPUF = One
                                            ^^PCI0.LPC0.EC0.GPAB = Local0
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Notify (NPCF, 0xC0) // Hardware-Specific
                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x020B0000))
                                    {
                                        If ((MCSK == 0x02))
                                        {
                                            Return (Zero)
                                        }
                                        Else
                                        {
                                            Local0 = ToInteger (SFV1)
                                            If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                            {
                                                ^^PCI0.LPC0.EC0.SGCB = Local0
                                                Release (^^PCI0.LPC0.EC0.LFCM)
                                            }

                                            Notify (NPCF, 0xC0) // Hardware-Specific
                                            Return (Zero)
                                        }
                                    }

                                    If ((SFV0 == 0x02020000))
                                    {
                                        Local0 = ToInteger (SFV1)
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            ^^PCI0.LPC0.EC0.TGPP = Local0
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Notify (NPCF, 0xC0) // Hardware-Specific
                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x02030000))
                                    {
                                        Local0 = ToInteger (SFV1)
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            ^^PCI0.LPC0.EC0.GPTH = Local0
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Notify (^^PCI0.GPP0.PEGP, 0xC0) // Hardware-Specific
                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x02040000))
                                    {
                                        Local0 = ToInteger (SFV1)
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            ^^PCI0.LPC0.EC0.GATP = Local0
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Notify (NPCF, 0xC0) // Hardware-Specific
                                        Return (Zero)
                                    }
                                }
                            }

                            Method (WMBA, 3, NotSerialized)
                            {
                                If ((Arg1 == One))
                                {
                                    Name (GLCS, Buffer (0x02)
                                    {
                                         0x00                                             // .
                                    })
                                    CreateByteField (GLCS, Zero, LCST)
                                    CreateByteField (GLCS, One, LCBL)
                                    If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                    {
                                        If ((ToInteger (Arg2) == Zero))
                                        {
                                            LCST = Zero
                                            Local0 = Zero
                                            If ((^^PCI0.LPC0.EC0.KBLT == Zero))
                                            {
                                                Local0 = ^^PCI0.LPC0.EC0.GECF (0x8D, 0x04)
                                                Local0 += One
                                                LCBL = Local0
                                            }
                                            Else
                                            {
                                                LCBL = Zero
                                            }
                                        }

                                        If ((ToInteger (Arg2) == 0x03))
                                        {
                                            Local0 = Zero
                                            Local0 = ^^PCI0.LPC0.EC0.GECF (0x8D, One)
                                            If ((Local0 == One))
                                            {
                                                LCST = One
                                            }
                                            Else
                                            {
                                                LCST = Zero
                                            }

                                            LCBL = Zero
                                        }

                                        If ((ToInteger (Arg2) == 0x04))
                                        {
                                            If ((^^PCI0.LPC0.EC0.SPMO == Zero))
                                            {
                                                LCST = One
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.SPMO == One))
                                            {
                                                LCST = 0x02
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.SPMO == 0x02))
                                            {
                                                LCST = Zero
                                            }

                                            If ((^^PCI0.LPC0.EC0.CTMD == One))
                                            {
                                                LCST = 0x03
                                            }

                                            LCBL = Zero
                                        }

                                        Release (^^PCI0.LPC0.EC0.LFCM)
                                    }

                                    Return (GLCS) /* \_SB_.GZFD.WMBA.GLCS */
                                }

                                If ((Arg1 == 0x02))
                                {
                                    CreateByteField (Arg2, Zero, SLID)
                                    CreateByteField (Arg2, One, SCST)
                                    CreateByteField (Arg2, 0x02, SCBL)
                                    If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                    {
                                        If ((SLID == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.KBLT == Zero))
                                            {
                                                If ((SCBL == One))
                                                {
                                                    ^^PCI0.LPC0.EC0.NCMD (0x8D, 0x05)
                                                }
                                                ElseIf ((SCBL == 0x02))
                                                {
                                                    ^^PCI0.LPC0.EC0.NCMD (0x8D, 0x06)
                                                }
                                                ElseIf ((SCBL == 0x03))
                                                {
                                                    ^^PCI0.LPC0.EC0.NCMD (0x8D, 0x07)
                                                }
                                            }
                                        }

                                        If ((SLID == 0x03))
                                        {
                                            If ((SCST == One))
                                            {
                                                ^^PCI0.LPC0.EC0.NCMD (0x8D, 0x02)
                                            }
                                            Else
                                            {
                                                ^^PCI0.LPC0.EC0.NCMD (0x8D, 0x03)
                                            }
                                        }

                                        Release (^^PCI0.LPC0.EC0.LFCM)
                                    }

                                    Return (Zero)
                                }
                            }

                            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
                            {
                                If ((Arg0 == 0xD1))
                                {
                                    Return (Zero)
                                }

                                If ((Arg0 == 0xE2))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local2 = Zero
                                            If (((^^PCI0.LPC0.EC0.GDST & 0x02) == 0x02))
                                            {
                                                Local2 |= One
                                            }

                                            If (((^^PCI0.LPC0.EC0.GDST & 0x04) == 0x04))
                                            {
                                                Local2 |= 0x02
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local2)
                                        }
                                    }
                                }

                                Name (FANQ, Package (0x02)
                                {
                                    One, 
                                    0x06
                                })
                                Name (FANB, Package (0x02)
                                {
                                    0x02, 
                                    0x06
                                })
                                Name (FANP, Package (0x02)
                                {
                                    0x03, 
                                    0x06
                                })
                                Name (FANC, Package (0x02)
                                {
                                    0xFF, 
                                    0x06
                                })
                                Name (FAE0, Package (0x02)
                                {
                                    0xE0, 
                                    0x06
                                })
                                If ((Arg0 == 0xE3))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.SPMO == 0x02))
                                            {
                                                Return (FANQ) /* \_SB_.GZFD._WED.FANQ */
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.SPMO == Zero))
                                            {
                                                Return (FANB) /* \_SB_.GZFD._WED.FANB */
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.SPMO == One))
                                            {
                                                Return (FANP) /* \_SB_.GZFD._WED.FANP */
                                            }

                                            If ((^^PCI0.LPC0.EC0.CTMD == One))
                                            {
                                                Return (FANC) /* \_SB_.GZFD._WED.FANC */
                                            }

                                            If ((^^PCI0.LPC0.EC0.CTE0 == One))
                                            {
                                                Return (FAE0) /* \_SB_.GZFD._WED.FAE0 */
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }
                                    }
                                }

                                If ((Arg0 == 0xE4))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local1 = Zero
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg0 == 0xE5))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.ACTY () == One))
                                            {
                                                Local1 = One
                                            }
                                            Else
                                            {
                                                Local1 = 0x02
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg0 == 0xE6))
                                {
                                    Return (One)
                                }

                                If ((Arg0 == 0xE7))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.SPMO == 0x02))
                                            {
                                                Local1 = One
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.SPMO == Zero))
                                            {
                                                Local1 = 0x02
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.SPMO == One))
                                            {
                                                Local1 = 0x03
                                            }

                                            If ((^^PCI0.LPC0.EC0.CTMD == One))
                                            {
                                                Local1 = 0xFF
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg0 == 0xE8))
                                {
                                    Local1 = 0x03
                                    If (((LSKD == 0x13) || (LSKD == 0x14)))
                                    {
                                        Local1 = Zero
                                    }
                                    ElseIf (((LSKD == 0x15) || (LSKD == 0x16)))
                                    {
                                        Local1 = One
                                    }
                                    ElseIf ((((LSKD == 0x17) || (LSKD == 0x18)) || ((
                                        LSKD == 0x19) || (LSKD == 0x25))))
                                    {
                                        Local1 = 0x02
                                    }

                                    Return (Local1)
                                }

                                If ((Arg0 == 0xE9))
                                {
                                    Local0 = Zero
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If (((^^PCI0.LPC0.EC0.ACTY () == One) || (^^PCI0.LPC0.EC0.ACTY () == 0x04)))
                                            {
                                                Local0 |= ^^PCI0.LPC0.EC0.APTS /* \_SB_.PCI0.LPC0.EC0_.APTS */
                                            }

                                            If ((^^PCI0.LPC0.EC0.ACTY () == 0x02))
                                            {
                                                Local0 |= ^^PCI0.LPC0.EC0.APTS /* \_SB_.PCI0.LPC0.EC0_.APTS */
                                                Local0 |= 0x0100
                                            }

                                            If ((^^PCI0.LPC0.EC0.APTS == 0x03))
                                            {
                                                If ((^^PCI0.LPC0.EC0.ACMO == One))
                                                {
                                                    Local0 |= ^^PCI0.LPC0.EC0.APTS /* \_SB_.PCI0.LPC0.EC0_.APTS */
                                                }
                                                Else
                                                {
                                                    Local0 |= ^^PCI0.LPC0.EC0.APTS /* \_SB_.PCI0.LPC0.EC0_.APTS */
                                                    Local0 |= 0x0100
                                                }
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }
                                    }

                                    Return (Local0)
                                }

                                If ((Arg0 == 0xEA))
                                {
                                    If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                    {
                                        Local0 = ^^PCI0.LPC0.EC0.EFPS /* \_SB_.PCI0.LPC0.EC0_.EFPS */
                                        Release (^^PCI0.LPC0.EC0.LFCM)
                                    }

                                    Return (Local0)
                                }

                                If ((Arg0 == 0xEB))
                                {
                                    Return (Zero)
                                }
                            }

                            Name (WQDD, Buffer (0x4C5A)
                            {
                                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                                /* 0008 */  0x4A, 0x4C, 0x00, 0x00, 0xC2, 0x08, 0x02, 0x00,  // JL......
                                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                                /* 0018 */  0x98, 0xA7, 0xBC, 0x01, 0x01, 0x08, 0x09, 0x42,  // .......B
                                /* 0020 */  0xD8, 0x12, 0x84, 0x84, 0x58, 0xA0, 0x10, 0x81,  // ....X...
                                /* 0028 */  0xE2, 0x10, 0x29, 0xBA, 0x04, 0x18, 0x8C, 0x06,  // ..).....
                                /* 0030 */  0x10, 0xC9, 0x81, 0x90, 0x0B, 0x26, 0x26, 0x40,  // .....&&@
                                /* 0038 */  0x04, 0x84, 0xBC, 0x0A, 0xB0, 0x29, 0xC0, 0x24,  // .....).$
                                /* 0040 */  0x88, 0xFA, 0xF7, 0x87, 0x28, 0x09, 0x0E, 0x25,  // ....(..%
                                /* 0048 */  0x04, 0x42, 0x12, 0x05, 0x98, 0x17, 0xA0, 0x5B,  // .B.....[
                                /* 0050 */  0x80, 0x61, 0x01, 0xB6, 0x05, 0x98, 0x16, 0xE0,  // .a......
                                /* 0058 */  0x18, 0x92, 0x4A, 0x03, 0xA7, 0x04, 0x96, 0x02,  // ..J.....
                                /* 0060 */  0x21, 0xA1, 0x02, 0x94, 0x0B, 0xF0, 0x2D, 0x40,  // !.....-@
                                /* 0068 */  0x3B, 0xA2, 0x24, 0x0B, 0xB0, 0x0C, 0x23, 0x02,  // ;.$...#.
                                /* 0070 */  0x8F, 0x22, 0xB2, 0xD1, 0x38, 0x34, 0x76, 0x18,  // ."..84v.
                                /* 0078 */  0x96, 0x09, 0xA6, 0x41, 0x1C, 0x46, 0xD9, 0xC8,  // ...A.F..
                                /* 0080 */  0x22, 0xF0, 0x84, 0x3A, 0x15, 0x20, 0x57, 0x80,  // "..:. W.
                                /* 0088 */  0x30, 0x01, 0xE2, 0x51, 0x85, 0xD1, 0x1C, 0x14,  // 0..Q....
                                /* 0090 */  0x09, 0x00, 0x8D, 0x12, 0x33, 0x26, 0x02, 0xDB,  // ....3&..
                                /* 0098 */  0x39, 0xB6, 0x46, 0x71, 0x1A, 0x85, 0x0B, 0x90,  // 9.Fq....
                                /* 00A0 */  0x8E, 0xA1, 0x11, 0x1C, 0x57, 0x30, 0xA6, 0x19,  // ....W0..
                                /* 00A8 */  0x47, 0x30, 0x21, 0x62, 0x71, 0x41, 0x18, 0x82,  // G0!bqA..
                                /* 00B0 */  0x8A, 0xD1, 0xE3, 0xF8, 0x08, 0x60, 0x94, 0x53,  // .....`.S
                                /* 00B8 */  0x89, 0x16, 0x3F, 0x60, 0x94, 0xA8, 0xC6, 0x60,  // ..?`...`
                                /* 00C0 */  0x38, 0xD1, 0x82, 0x45, 0xB3, 0x67, 0x14, 0x01,  // 8..E.g..
                                /* 00C8 */  0x19, 0x2C, 0x6E, 0xF4, 0x43, 0x34, 0x41, 0xB0,  // .,n.C4A.
                                /* 00D0 */  0x03, 0xC2, 0xC8, 0x80, 0x10, 0x64, 0xEB, 0x23,  // .....d.#
                                /* 00D8 */  0x25, 0x04, 0x76, 0x3F, 0x32, 0x39, 0x13, 0x60,  // %.v?29.`
                                /* 00E0 */  0x50, 0x80, 0x35, 0x01, 0xDE, 0x04, 0x38, 0x9C,  // P.5...8.
                                /* 00E8 */  0x90, 0x60, 0xDA, 0x12, 0xA0, 0x10, 0x41, 0x30,  // .`....A0
                                /* 00F0 */  0xB5, 0xA1, 0x68, 0x84, 0x31, 0xC2, 0xC5, 0x89,  // ..h.1...
                                /* 00F8 */  0x12, 0x33, 0x62, 0x63, 0x80, 0x42, 0x89, 0x18,  // .3bc.B..
                                /* 0100 */  0xA4, 0x46, 0x08, 0x01, 0x1B, 0x21, 0x58, 0xC4,  // .F...!X.
                                /* 0108 */  0xE2, 0x20, 0x35, 0xD6, 0xF6, 0x07, 0x41, 0xC4,  // . 5...A.
                                /* 0110 */  0x3A, 0x38, 0x17, 0xB0, 0x08, 0xA3, 0x41, 0x9D,  // :8....A.
                                /* 0118 */  0x05, 0x12, 0x3C, 0x1B, 0xF8, 0x5C, 0x70, 0x5A,  // ..<..\pZ
                                /* 0120 */  0xA7, 0xE7, 0x29, 0x06, 0x39, 0xDF, 0xD3, 0xAA,  // ..).9...
                                /* 0128 */  0x73, 0x94, 0x94, 0xC0, 0x52, 0x21, 0xF4, 0xFF,  // s...R!..
                                /* 0130 */  0x57, 0x70, 0x4A, 0x80, 0xE2, 0x1A, 0x50, 0xD7,  // WpJ...P.
                                /* 0138 */  0x83, 0x87, 0x03, 0x36, 0x92, 0xE7, 0x01, 0xEC,  // ...6....
                                /* 0140 */  0x7C, 0x4E, 0xE2, 0x61, 0x20, 0x7A, 0xB3, 0x07,  // |N.a z..
                                /* 0148 */  0x03, 0x59, 0x04, 0xD2, 0x38, 0x7C, 0x0A, 0xF0,  // .Y..8|..
                                /* 0150 */  0x3C, 0x4E, 0x34, 0x81, 0x8F, 0x04, 0xC7, 0x80,  // <N4.....
                                /* 0158 */  0x19, 0x91, 0xA1, 0x3D, 0xB5, 0xD3, 0x79, 0x0E,  // ...=..y.
                                /* 0160 */  0xF0, 0x19, 0xE1, 0x70, 0xD8, 0xF8, 0x9E, 0x25,  // ...p...%
                                /* 0168 */  0xD8, 0x38, 0xE0, 0x2B, 0xBE, 0x03, 0x08, 0xE1,  // .8.+....
                                /* 0170 */  0x4D, 0xC1, 0xF3, 0x33, 0xC1, 0xE0, 0x03, 0x45,  // M..3...E
                                /* 0178 */  0x1F, 0x13, 0x7C, 0x46, 0x78, 0x73, 0xF0, 0x34,  // ..|Fxs.4
                                /* 0180 */  0x3D, 0xA5, 0x08, 0xEF, 0x12, 0x6C, 0x26, 0x8E,  // =....l&.
                                /* 0188 */  0x08, 0xA1, 0xEF, 0x85, 0x45, 0x41, 0x68, 0xDF,  // ....EAh.
                                /* 0190 */  0x3A, 0x4C, 0x20, 0xCE, 0x11, 0xEC, 0x14, 0x10,  // :L .....
                                /* 0198 */  0xF4, 0xA8, 0x3D, 0x98, 0x97, 0x02, 0x8F, 0xC9,  // ..=.....
                                /* 01A0 */  0xE7, 0x83, 0xC3, 0xC3, 0x1C, 0x0E, 0x3C, 0x8B,  // ......<.
                                /* 01A8 */  0xB3, 0xF1, 0xE1, 0x80, 0x0D, 0xD9, 0xC8, 0x0F,  // ........
                                /* 01B0 */  0x11, 0x60, 0x19, 0x14, 0x76, 0x16, 0x27, 0x85,  // .`..v.'.
                                /* 01B8 */  0x39, 0x03, 0x80, 0x31, 0xEE, 0x60, 0xD1, 0xC3,  // 9..1.`..
                                /* 01C0 */  0xF2, 0x45, 0x02, 0x43, 0x30, 0xDE, 0x48, 0x41,  // .E.C0.HA
                                /* 01C8 */  0x75, 0x54, 0xF0, 0x48, 0xE1, 0xFC, 0xFF, 0x47,  // uT.H...G
                                /* 01D0 */  0x8A, 0x93, 0x37, 0x52, 0xD0, 0x40, 0x3D, 0x63,  // ..7R.@=c
                                /* 01D8 */  0x3C, 0x17, 0xBC, 0x6B, 0xE0, 0x8E, 0x0E, 0x60,  // <..k...`
                                /* 01E0 */  0x05, 0xC6, 0x0D, 0xD4, 0x7E, 0x05, 0x20, 0x04,  // ....~. .
                                /* 01E8 */  0x7F, 0x4F, 0x79, 0x78, 0x78, 0x48, 0x89, 0xF0,  // .OyxxH..
                                /* 01F0 */  0xA8, 0x62, 0xF4, 0x87, 0x8B, 0x3E, 0x05, 0x68,  // .b...>.h
                                /* 01F8 */  0x85, 0x10, 0xDA, 0x41, 0x84, 0x39, 0x88, 0x48,  // ...A.9.H
                                /* 0200 */  0xB1, 0x22, 0x84, 0x79, 0x2E, 0x09, 0x67, 0xA0,  // .".y..g.
                                /* 0208 */  0x60, 0xE1, 0x4E, 0x24, 0x46, 0x28, 0x43, 0xBF,  // `.N$F(C.
                                /* 0210 */  0x64, 0x98, 0xA0, 0xC8, 0x21, 0xA2, 0xC7, 0xC1,  // d...!...
                                /* 0218 */  0x81, 0x4F, 0xE3, 0xA8, 0x82, 0x07, 0x8D, 0x1C,  // .O......
                                /* 0220 */  0xE5, 0x54, 0x0E, 0xCB, 0x77, 0x03, 0x23, 0x1C,  // .T..w.#.
                                /* 0228 */  0xD7, 0x41, 0x9D, 0xA2, 0x6F, 0x2B, 0x07, 0x7D,  // .A..o+.}
                                /* 0230 */  0x9C, 0x2F, 0x13, 0x81, 0x9E, 0x39, 0x38, 0x81,  // ./...98.
                                /* 0238 */  0x43, 0xAE, 0x9E, 0xC6, 0x78, 0x3A, 0x28, 0x16,  // C...x:(.
                                /* 0240 */  0x0C, 0xEA, 0xD0, 0x03, 0xB8, 0x3A, 0x20, 0x3C,  // .....: <
                                /* 0248 */  0x27, 0xC0, 0xFA, 0xFF, 0x1F, 0x7A, 0xC0, 0x35,  // '....z.5
                                /* 0250 */  0xF9, 0x23, 0x6A, 0x15, 0x44, 0x97, 0x81, 0x28,  // .#j.D..(
                                /* 0258 */  0x31, 0x62, 0x9F, 0x4C, 0xFC, 0xF7, 0x0C, 0x76,  // 1b.L...v
                                /* 0260 */  0xE6, 0x31, 0xCC, 0xA3, 0x0F, 0xE6, 0xC0, 0x03,  // .1......
                                /* 0268 */  0xFF, 0x9E, 0xF3, 0x8A, 0xF3, 0x90, 0xF3, 0x96,  // ........
                                /* 0270 */  0x73, 0x08, 0x6F, 0x38, 0x86, 0x78, 0xD1, 0x79,  // s.o8.x.y
                                /* 0278 */  0x28, 0xF0, 0x78, 0x42, 0x3C, 0xF0, 0x58, 0x19,  // (.xB<.X.
                                /* 0280 */  0x8A, 0x20, 0x1E, 0x78, 0x8C, 0xF1, 0xB4, 0x63,  // . .x...c
                                /* 0288 */  0x94, 0x10, 0xAF, 0x3B, 0xBE, 0xED, 0x84, 0x30,  // ...;...0
                                /* 0290 */  0xD4, 0x03, 0x4C, 0xF8, 0x13, 0x08, 0xE9, 0x03,  // ..L.....
                                /* 0298 */  0x0F, 0x13, 0xA4, 0x02, 0xA2, 0x0D, 0x10, 0x45,  // .......E
                                /* 02A0 */  0x3A, 0xF0, 0x80, 0x6E, 0x68, 0x3E, 0x7E, 0xF8,  // :..nh>~.
                                /* 02A8 */  0xC0, 0x03, 0xF7, 0xF4, 0x01, 0xFF, 0xB8, 0x01,  // ........
                                /* 02B0 */  0x3E, 0xF9, 0x07, 0x1F, 0x50, 0x88, 0x3D, 0x9C,  // >...P.=.
                                /* 02B8 */  0x80, 0xE6, 0x00, 0x04, 0xBE, 0xC8, 0x10, 0x72,  // .......r
                                /* 02C0 */  0x32, 0x1E, 0xF4, 0xFF, 0x1F, 0xF7, 0xB1, 0x20,  // 2...... 
                                /* 02C8 */  0x5C, 0xC4, 0xE7, 0x02, 0x1E, 0xF0, 0xF8, 0x03,  // \.......
                                /* 02D0 */  0x74, 0x04, 0x1E, 0x27, 0x40, 0x73, 0x8A, 0x60,  // t..'@s.`
                                /* 02D8 */  0x40, 0xE7, 0xC4, 0x2E, 0x62, 0x1E, 0x41, 0x5D,  // @...b.A]
                                /* 02E0 */  0xC7, 0x18, 0x50, 0xDC, 0x22, 0x7C, 0x1E, 0xF3,  // ..P."|..
                                /* 02E8 */  0x19, 0xE2, 0x9D, 0x21, 0x81, 0xC3, 0x8F, 0x14,  // ...!....
                                /* 02F0 */  0x7D, 0x4E, 0xF0, 0x29, 0x83, 0x5D, 0x53, 0xF8,  // }N.).]S.
                                /* 02F8 */  0x1D, 0xE6, 0xD5, 0xC3, 0x30, 0xCF, 0x02, 0x2C,  // ....0..,
                                /* 0300 */  0xE4, 0x09, 0x08, 0xE8, 0x9C, 0x67, 0xF0, 0x47,  // .....g.G
                                /* 0308 */  0x11, 0xD8, 0xA3, 0xE2, 0xB3, 0x78, 0x5E, 0x38,  // .....x^8
                                /* 0310 */  0x2B, 0x3E, 0x5B, 0x0F, 0x17, 0x8C, 0x81, 0xCF,  // +>[.....
                                /* 0318 */  0x09, 0x50, 0x4E, 0x01, 0x9E, 0x2B, 0xEE, 0xF0,  // .PN..+..
                                /* 0320 */  0x04, 0xE7, 0xFF, 0x3F, 0x56, 0x78, 0x80, 0x3E,  // ...?Vx.>
                                /* 0328 */  0x3C, 0x01, 0x8F, 0x73, 0x02, 0x9B, 0x12, 0xE6,  // <..s....
                                /* 0330 */  0x98, 0x00, 0xCE, 0xD0, 0x03, 0x45, 0x0F, 0xCF,  // .....E..
                                /* 0338 */  0xC0, 0x21, 0x7D, 0x48, 0xC0, 0x1E, 0x30, 0xC0,  // .!}H..0.
                                /* 0340 */  0x05, 0xEA, 0x03, 0x06, 0xF0, 0x18, 0x13, 0x9B,  // ........
                                /* 0348 */  0x29, 0x7E, 0xA8, 0xC0, 0x63, 0x14, 0xCF, 0x48,  // )~..c..H
                                /* 0350 */  0x87, 0x0A, 0xE6, 0x3F, 0xAA, 0x87, 0x0A, 0xEF,  // ...?....
                                /* 0358 */  0xFF, 0x3F, 0x54, 0x30, 0x8E, 0xC9, 0x43, 0x05,  // .?T0..C.
                                /* 0360 */  0x06, 0x67, 0x44, 0x0F, 0x15, 0x37, 0x1A, 0xDF,  // .gD..7..
                                /* 0368 */  0xAE, 0xDE, 0xB0, 0xF8, 0x58, 0xB1, 0x67, 0x44,  // ....X.gD
                                /* 0370 */  0x70, 0x9D, 0xCA, 0x7C, 0x46, 0x04, 0x1E, 0x83,  // p..|F...
                                /* 0378 */  0xC2, 0x0C, 0x16, 0x18, 0xC4, 0x3E, 0x26, 0x40,  // .....>&@
                                /* 0380 */  0x39, 0x76, 0x18, 0xE2, 0x6C, 0x5E, 0xD5, 0xD8,  // 9v..l^..
                                /* 0388 */  0x85, 0x88, 0x8D, 0x15, 0x5C, 0x1E, 0xC6, 0x0A,  // ....\...
                                /* 0390 */  0x14, 0xFE, 0xFF, 0x27, 0x13, 0xEC, 0x9C, 0x30,  // ...'...0
                                /* 0398 */  0x17, 0x22, 0xCC, 0x89, 0x08, 0x18, 0x0C, 0xC7,  // ."......
                                /* 03A0 */  0x47, 0x44, 0xCF, 0x15, 0x06, 0xC1, 0x98, 0x83,  // GD......
                                /* 03A8 */  0x05, 0xD5, 0x88, 0x3C, 0x58, 0xF8, 0x67, 0xBE,  // ...<X.g.
                                /* 03B0 */  0x83, 0x05, 0xCB, 0xA0, 0x0C, 0xF1, 0x1A, 0x77,  // .......w
                                /* 03B8 */  0xB8, 0xC0, 0x25, 0xFA, 0x49, 0x01, 0xCA, 0x81,  // ..%.I...
                                /* 03C0 */  0xCE, 0xF7, 0x3E, 0x76, 0x51, 0x62, 0xA3, 0x05,  // ..>vQb..
                                /* 03C8 */  0x9F, 0x89, 0xD1, 0x02, 0x15, 0x30, 0x4F, 0x28,  // .....0O(
                                /* 03D0 */  0xFA, 0x73, 0xDE, 0xAB, 0x98, 0xB1, 0x1E, 0xF9,  // .s......
                                /* 03D8 */  0xFC, 0xFF, 0xBF, 0x64, 0x73, 0x98, 0xC8, 0x8F,  // ...ds...
                                /* 03E0 */  0x45, 0xE0, 0x3C, 0xA2, 0x82, 0xF1, 0x7A, 0xFA,  // E.<...z.
                                /* 03E8 */  0x46, 0xCA, 0xD4, 0x5E, 0x08, 0x08, 0x48, 0x58,  // F..^..HX
                                /* 03F0 */  0x1F, 0x23, 0x7D, 0x45, 0x35, 0x4A, 0x8C, 0x33,  // .#}E5J.3
                                /* 03F8 */  0x0B, 0x78, 0x30, 0x21, 0x1E, 0x51, 0x81, 0x51,  // .x0!.Q.Q
                                /* 0400 */  0xF4, 0x97, 0xA3, 0xCF, 0xA7, 0x34, 0x2C, 0x0C,  // .....4,.
                                /* 0408 */  0xEA, 0x88, 0x0A, 0xF8, 0xBE, 0x10, 0x3C, 0xA2,  // ......<.
                                /* 0410 */  0x62, 0xFE, 0xFF, 0x47, 0x54, 0xB0, 0x5F, 0x49,  // b..GT._I
                                /* 0418 */  0x23, 0xBC, 0x96, 0x3E, 0x93, 0x3E, 0xDA, 0x9F,  // #..>.>..
                                /* 0420 */  0xD8, 0x1B, 0xC1, 0xD3, 0xA9, 0x87, 0x13, 0xC1,  // ........
                                /* 0428 */  0x47, 0x54, 0x06, 0x16, 0x29, 0x8A, 0x21, 0xA3,  // GT..).!.
                                /* 0430 */  0x44, 0x35, 0xCA, 0xE3, 0x3D, 0xC3, 0x7A, 0xD1,  // D5..=.z.
                                /* 0438 */  0x37, 0x92, 0x6F, 0x10, 0xD1, 0xE3, 0x3E, 0xE2,  // 7.o...>.
                                /* 0440 */  0x73, 0x99, 0x0B, 0x91, 0x8F, 0x23, 0x2A, 0x40,  // s....#*@
                                /* 0448 */  0x91, 0x93, 0x1B, 0x1C, 0xD4, 0x67, 0x87, 0xF3,  // .....g..
                                /* 0450 */  0xF6, 0x05, 0xC1, 0xF8, 0x6F, 0x4B, 0x3E, 0xB9,  // ....oK>.
                                /* 0458 */  0x81, 0xE5, 0xFF, 0x7F, 0x46, 0x05, 0x4E, 0x63,  // ....F.Nc
                                /* 0460 */  0x7A, 0x55, 0x38, 0x27, 0xCC, 0x2C, 0x0E, 0xCA,  // zU8'.,..
                                /* 0468 */  0xE7, 0x18, 0x70, 0x9E, 0x32, 0xE1, 0x40, 0x1F,  // ..p.2.@.
                                /* 0470 */  0xF2, 0x9B, 0x87, 0xCF, 0x09, 0x67, 0xCA, 0x4E,  // .....g.N
                                /* 0478 */  0xFC, 0xC0, 0xFB, 0xA0, 0xE3, 0x03, 0x88, 0x5D,  // .......]
                                /* 0480 */  0x0E, 0x14, 0xD4, 0x67, 0x5B, 0x38, 0xF7, 0x1B,  // ...g[8..
                                /* 0488 */  0xEC, 0xAD, 0x15, 0x73, 0xB6, 0x05, 0xDF, 0x01,  // ...s....
                                /* 0490 */  0x15, 0x1C, 0x07, 0x21, 0xFF, 0xFF, 0xCF, 0xB6,  // ...!....
                                /* 0498 */  0xC0, 0xF9, 0x2D, 0xE1, 0xE1, 0xE2, 0xEF, 0x6D,  // ..-....m
                                /* 04A0 */  0x6C, 0x26, 0x11, 0x4E, 0xE8, 0x91, 0xC6, 0x17,  // l&.N....
                                /* 04A8 */  0xF5, 0x73, 0xB3, 0x71, 0x48, 0x12, 0xF4, 0x94,  // .s.qH...
                                /* 04B0 */  0x0A, 0x74, 0x66, 0xF5, 0xD4, 0x07, 0xB6, 0x59,  // .tf....Y
                                /* 04B8 */  0x61, 0x70, 0xA2, 0x1C, 0x16, 0x83, 0x78, 0xA4,  // ap....x.
                                /* 04C0 */  0xF1, 0x3D, 0xE6, 0x71, 0x01, 0x9C, 0x03, 0xC6,  // .=.q....
                                /* 04C8 */  0x8F, 0xC8, 0x63, 0xF1, 0x09, 0x96, 0x0D, 0x06,  // ..c.....
                                /* 04D0 */  0x47, 0x30, 0xEA, 0x51, 0x15, 0xE8, 0xCC, 0xEA,  // G0.Q....
                                /* 04D8 */  0x78, 0xB1, 0xFF, 0xFF, 0xF1, 0xC2, 0xBE, 0xE5,  // x.......
                                /* 04E0 */  0xF2, 0xE3, 0x93, 0x47, 0x8C, 0x39, 0x30, 0x00,  // ...G.90.
                                /* 04E8 */  0x9F, 0x01, 0x63, 0xCE, 0xB1, 0x1E, 0x30, 0x98,  // ..c...0.
                                /* 04F0 */  0xCF, 0xAB, 0xE0, 0x18, 0x30, 0xF8, 0xEE, 0xBA,  // ....0...
                                /* 04F8 */  0x6C, 0xC0, 0xC0, 0x26, 0xFE, 0x71, 0x05, 0xCA,  // l..&.q..
                                /* 0500 */  0x81, 0x03, 0x7F, 0x9E, 0xC5, 0x1C, 0x1E, 0xC1,  // ........
                                /* 0508 */  0x76, 0x6A, 0x05, 0xC7, 0xE1, 0x11, 0xF7, 0xFF,  // vj......
                                /* 0510 */  0x3F, 0x70, 0x80, 0x6F, 0x58, 0x98, 0x23, 0x2F,  // ?p.oX.#/
                                /* 0518 */  0x60, 0xE2, 0xD8, 0x0A, 0x8E, 0x23, 0x2F, 0xE0,  // `....#/.
                                /* 0520 */  0xF2, 0xD4, 0x0A, 0x5C, 0xFE, 0xFF, 0x47, 0x5E,  // ...\..G^
                                /* 0528 */  0xC0, 0x93, 0x8A, 0x23, 0x2F, 0xA0, 0xE7, 0x98,  // ...#/...
                                /* 0530 */  0x81, 0x1F, 0x90, 0xA1, 0x8F, 0xE4, 0x3D, 0xD4,  // ......=.
                                /* 0538 */  0x07, 0xC4, 0xB0, 0x2F, 0xA1, 0xC6, 0x7D, 0xA7,  // .../..}.
                                /* 0540 */  0xF4, 0xB1, 0x10, 0x6C, 0x83, 0xF5, 0xB1, 0x10,  // ...l....
                                /* 0548 */  0x78, 0x0C, 0x0A, 0xCE, 0xFF, 0xFF, 0xA0, 0x00,  // x.......
                                /* 0550 */  0xCE, 0xD3, 0x32, 0x70, 0x38, 0xD1, 0xB2, 0xD3,  // ..2p8...
                                /* 0558 */  0x32, 0x30, 0x4C, 0xD2, 0x08, 0x84, 0xC9, 0x3F,  // 20L....?
                                /* 0560 */  0x4D, 0x49, 0xDE, 0x5B, 0x80, 0xC2, 0xF8, 0xB4,  // MI.[....
                                /* 0568 */  0x0C, 0xB8, 0x12, 0x7C, 0x50, 0x00, 0xCD, 0x69,  // ...|P..i
                                /* 0570 */  0x00, 0xFE, 0x4D, 0x80, 0x1F, 0x22, 0xC2, 0x3F,  // ..M..".?
                                /* 0578 */  0x70, 0x78, 0x04, 0x11, 0xFE, 0xFF, 0x09, 0x7C,  // px.....|
                                /* 0580 */  0x52, 0x06, 0xD7, 0x89, 0xE1, 0x49, 0x19, 0xEC,  // R....I..
                                /* 0588 */  0x01, 0xCF, 0x03, 0x3A, 0x6F, 0xF8, 0xA4, 0x0C,  // ...:o...
                                /* 0590 */  0xF0, 0xE3, 0x64, 0x89, 0x3B, 0x89, 0x80, 0xF7,  // ..d.;...
                                /* 0598 */  0x16, 0x82, 0x39, 0x86, 0xC0, 0xFC, 0xFF, 0x1F,  // ..9.....
                                /* 05A0 */  0x43, 0xC0, 0xA7, 0x30, 0xD0, 0x19, 0x8C, 0x49,  // C..0...I
                                /* 05A8 */  0x59, 0xAD, 0x6C, 0xAC, 0xD6, 0xE7, 0x0D, 0x2A,  // Y.l....*
                                /* 05B0 */  0xF8, 0x98, 0xA0, 0x09, 0x3D, 0xB9, 0x79, 0x98,  // ....=.y.
                                /* 05B8 */  0x95, 0xCE, 0x46, 0x28, 0xAF, 0x07, 0xCF, 0xF6,  // ..F(....
                                /* 05C0 */  0x96, 0x09, 0xA6, 0x73, 0xB4, 0x21, 0x2C, 0xF0,  // ...s.!,.
                                /* 05C8 */  0x44, 0x62, 0x08, 0x8D, 0xC7, 0xE0, 0x16, 0x04,  // Db......
                                /* 05D0 */  0x47, 0x41, 0x7C, 0x02, 0x70, 0xD8, 0x13, 0x10,  // GA|.p...
                                /* 05D8 */  0xFA, 0x08, 0xE0, 0x3B, 0x0F, 0x27, 0x70, 0xB8,  // ...;.'p.
                                /* 05E0 */  0xE3, 0x0F, 0x3D, 0x31, 0xE0, 0xC7, 0x76, 0x60,  // ..=1..v`
                                /* 05E8 */  0xE7, 0xE5, 0x53, 0x2E, 0xB8, 0x66, 0xE6, 0xFB,  // ..S..f..
                                /* 05F0 */  0x92, 0x87, 0xC6, 0xEE, 0x26, 0x1E, 0x8A, 0x87,  // ....&...
                                /* 05F8 */  0xF0, 0x78, 0x60, 0x02, 0x8F, 0xC4, 0xE7, 0x22,  // .x`...."
                                /* 0600 */  0x3E, 0x08, 0x9F, 0xC2, 0xF9, 0xE1, 0x07, 0x9C,  // >.......
                                /* 0608 */  0x07, 0x23, 0xDC, 0x19, 0x01, 0x1E, 0x90, 0x2F,  // .#...../
                                /* 0610 */  0x04, 0x9E, 0xD5, 0x43, 0x01, 0x9B, 0x43, 0x88,  // ...C..C.
                                /* 0618 */  0x30, 0xD1, 0x0C, 0x8F, 0xF9, 0x0E, 0x68, 0x54,  // 0.....hT
                                /* 0620 */  0x44, 0xD6, 0xB8, 0x50, 0x23, 0xF5, 0x49, 0x86,  // D..P#.I.
                                /* 0628 */  0x61, 0xBF, 0x0F, 0x58, 0xF4, 0x40, 0x75, 0x3B,  // a..X.@u;
                                /* 0630 */  0x78, 0x4A, 0xC7, 0xC0, 0x7A, 0xEC, 0x1C, 0xD6,  // xJ..z...
                                /* 0638 */  0x68, 0x07, 0xEB, 0xA3, 0x84, 0xAF, 0x21, 0x9E,  // h.....!.
                                /* 0640 */  0xD9, 0xFF, 0xFF, 0x84, 0x0D, 0xEB, 0x23, 0x14,  // ......#.
                                /* 0648 */  0xB8, 0x8E, 0x0A, 0xEC, 0xB8, 0xED, 0x13, 0x00,  // ........
                                /* 0650 */  0xEE, 0x9C, 0xA0, 0x53, 0x03, 0xEA, 0x00, 0x64,  // ...S...d
                                /* 0658 */  0xF1, 0xA7, 0x06, 0xC4, 0x1C, 0x0F, 0xEB, 0x49,  // .......I
                                /* 0660 */  0xC0, 0xA0, 0xAF, 0x3A, 0xC6, 0x79, 0xA2, 0xF2,  // ...:.y..
                                /* 0668 */  0x88, 0x7C, 0x0B, 0x60, 0x52, 0x4F, 0x0E, 0x28,  // .|.`RO.(
                                /* 0670 */  0x91, 0x14, 0x92, 0x78, 0x72, 0x40, 0x89, 0x82,  // ...xr@..
                                /* 0678 */  0xA3, 0x20, 0x3E, 0x39, 0xF8, 0xD4, 0x8E, 0x3F,  // . >9...?
                                /* 0680 */  0x39, 0xE0, 0xCF, 0x61, 0xFC, 0xE4, 0x00, 0xF7,  // 9..a....
                                /* 0688 */  0xC0, 0x0C, 0x9E, 0xA1, 0xF2, 0xF9, 0xC1, 0xBB,  // ........
                                /* 0690 */  0xAE, 0xB3, 0xB3, 0x03, 0x60, 0x25, 0xD8, 0xD9,  // ....`%..
                                /* 0698 */  0x01, 0x34, 0xFF, 0xFF, 0xB3, 0x03, 0x3F, 0x07,  // .4....?.
                                /* 06A0 */  0xF8, 0xEC, 0x00, 0xAE, 0x13, 0x00, 0xF0, 0x39,  // .......9
                                /* 06A8 */  0x3F, 0xC0, 0x99, 0xE4, 0xF3, 0x03, 0x60, 0xE1,  // ?.....`.
                                /* 06B0 */  0x62, 0xE0, 0xF3, 0x3B, 0xF8, 0xC6, 0xC7, 0xCE,  // b..;....
                                /* 06B8 */  0x0F, 0x80, 0xA1, 0xFF, 0xFF, 0xF9, 0x01, 0x38,  // .......8
                                /* 06C0 */  0xC0, 0xF2, 0xF3, 0x03, 0xF0, 0x39, 0x01, 0x80,  // .....9..
                                /* 06C8 */  0x47, 0xE4, 0xF9, 0x01, 0xC5, 0xE1, 0x83, 0xA2,  // G.......
                                /* 06D0 */  0xD1, 0x4E, 0xE2, 0x00, 0x4E, 0xFC, 0x20, 0x22,  // .N..N. "
                                /* 06D8 */  0x9C, 0x43, 0xF8, 0x43, 0x78, 0xA5, 0x88, 0x12,  // .C.Cx...
                                /* 06E0 */  0xE8, 0x61, 0xD2, 0x27, 0x4C, 0x72, 0x7C, 0x40,  // .a.'Lr|@
                                /* 06E8 */  0x09, 0xA5, 0xD0, 0xD1, 0xCA, 0xC7, 0x07, 0x2E,  // ........
                                /* 06F0 */  0x0C, 0x8E, 0x82, 0xF8, 0xF8, 0xE0, 0xD0, 0xC7,  // ........
                                /* 06F8 */  0x07, 0xE8, 0x21, 0x4F, 0x33, 0xA0, 0x38, 0xBA,  // ..!O3.8.
                                /* 0700 */  0xF9, 0x58, 0x05, 0x16, 0xAC, 0x37, 0x71, 0x4F,  // .X...7qO
                                /* 0708 */  0x0F, 0xC6, 0xBD, 0xD8, 0xB7, 0x39, 0x23, 0x9D,  // .....9#.
                                /* 0710 */  0xE0, 0xF9, 0xBE, 0x3D, 0xFA, 0xBC, 0xF7, 0x00,  // ...=....
                                /* 0718 */  0x01, 0x0C, 0xFE, 0xFF, 0x07, 0x08, 0xE0, 0x74,  // .......t
                                /* 0720 */  0x34, 0xF3, 0x01, 0x02, 0x5C, 0xE3, 0xF7, 0x01,  // 4...\...
                                /* 0728 */  0x02, 0x5C, 0x67, 0x00, 0xE0, 0x25, 0xEA, 0x08,  // .\g..%..
                                /* 0730 */  0x81, 0x96, 0x7D, 0xC0, 0x42, 0x60, 0x33, 0x0C,  // ..}.B`3.
                                /* 0738 */  0xDF, 0x22, 0x7C, 0x5C, 0xF0, 0xA0, 0x4C, 0xE0,  // ."|\..L.
                                /* 0740 */  0x83, 0x1E, 0xE0, 0xE5, 0x38, 0xC4, 0xA7, 0x07,  // ....8...
                                /* 0748 */  0xEF, 0xF8, 0xC0, 0xFF, 0xFF, 0xC7, 0x07, 0xC0,  // ........
                                /* 0750 */  0x45, 0xA8, 0xE3, 0x03, 0xE8, 0x2C, 0x1C, 0x1F,  // E....,..
                                /* 0758 */  0x40, 0x37, 0x7E, 0xE0, 0x71, 0x74, 0x80, 0x73,  // @7~.qt.s
                                /* 0760 */  0xB6, 0x61, 0x47, 0x07, 0x60, 0x7F, 0xB4, 0xC2,  // .aG.`...
                                /* 0768 */  0x8D, 0x15, 0x3C, 0xFF, 0xFF, 0x93, 0x10, 0x3F,  // ..<....?
                                /* 0770 */  0x3A, 0x00, 0xA7, 0x83, 0x7A, 0xA0, 0x07, 0xD9,  // :...z...
                                /* 0778 */  0x40, 0x8F, 0x0E, 0xC0, 0xFF, 0xAC, 0xEE, 0xA3,  // @.......
                                /* 0780 */  0x03, 0x70, 0x1A, 0x3F, 0x7C, 0x21, 0x47, 0x07,  // .p.?|!G.
                                /* 0788 */  0xD4, 0x10, 0x2C, 0xF6, 0x10, 0x83, 0xD0, 0x78,  // ..,....x
                                /* 0790 */  0x53, 0x26, 0xC3, 0x7D, 0x4D, 0xF1, 0x78, 0x7C,  // S&.}M.x|
                                /* 0798 */  0x6A, 0x60, 0x07, 0x07, 0x2E, 0x8D, 0x42, 0xE7,  // j`....B.
                                /* 07A0 */  0x29, 0x1F, 0x1C, 0xB8, 0x14, 0x38, 0x0A, 0xE2,  // )....8..
                                /* 07A8 */  0x83, 0x83, 0x63, 0x1E, 0x1C, 0xA0, 0xC7, 0x3A,  // ..c....:
                                /* 07B0 */  0xC2, 0x80, 0x42, 0x1E, 0x14, 0xFD, 0xFF, 0x8F,  // ..B.....
                                /* 07B8 */  0x14, 0xFE, 0xD4, 0xD8, 0x0A, 0x8F, 0x0D, 0x77,  // .......w
                                /* 07C0 */  0x6A, 0x00, 0x9C, 0x1C, 0xE2, 0x7D, 0x6A, 0x00,  // j....}j.
                                /* 07C8 */  0x97, 0x87, 0x53, 0x03, 0xE8, 0x26, 0xEA, 0xF3,  // ..S..&..
                                /* 07D0 */  0x0B, 0xB8, 0x86, 0x0F, 0xE9, 0xD0, 0x80, 0x3A,  // .......:
                                /* 07D8 */  0x01, 0xF8, 0xF4, 0x8D, 0xC1, 0x65, 0xC6, 0x46,  // .....e.F
                                /* 07E0 */  0xA9, 0x33, 0xB5, 0x67, 0xC3, 0xCE, 0x98, 0xEC,  // .3.g....
                                /* 07E8 */  0xD4, 0xC0, 0xC5, 0x51, 0xE8, 0xD8, 0xE0, 0x53,  // ...Q...S
                                /* 07F0 */  0x03, 0x17, 0x03, 0x47, 0x41, 0x7C, 0x6A, 0x70,  // ...GA|jp
                                /* 07F8 */  0xD0, 0x53, 0x03, 0xF4, 0x53, 0xA2, 0x4F, 0x0D,  // .S..S.O.
                                /* 0800 */  0x70, 0xFE, 0xFF, 0xA7, 0x06, 0xDC, 0x81, 0x19,  // p.......
                                /* 0808 */  0x3C, 0x73, 0xE3, 0xE7, 0x30, 0x0F, 0x0E, 0x77,  // <s..0..w
                                /* 0810 */  0x76, 0x01, 0x1C, 0x82, 0xFB, 0x14, 0x05, 0xDC,  // v.......
                                /* 0818 */  0xC6, 0x0F, 0xF1, 0xDC, 0x00, 0x7D, 0xD6, 0xCF,  // .....}..
                                /* 0820 */  0x0D, 0xC0, 0xEA, 0xFF, 0x7F, 0x6E, 0x00, 0x56,  // .....n.V
                                /* 0828 */  0x73, 0x7B, 0x6E, 0x00, 0x9C, 0x9A, 0x38, 0x37,  // s{n...87
                                /* 0830 */  0x00, 0xC9, 0xF1, 0xC3, 0x38, 0xCC, 0xE1, 0x45,  // ....8..E
                                /* 0838 */  0x9F, 0x1B, 0xD0, 0x53, 0x8B, 0x51, 0x3C, 0x34,  // ...S.Q<4
                                /* 0840 */  0xFA, 0xCC, 0xED, 0x83, 0x03, 0x3F, 0xCB, 0xF9,  // .....?..
                                /* 0848 */  0xE4, 0xE0, 0x83, 0x03, 0x97, 0x03, 0x47, 0x41,  // ......GA
                                /* 0850 */  0xFC, 0xFF, 0x3F, 0x38, 0x38, 0xEA, 0xC1, 0x01,  // ..?88...
                                /* 0858 */  0x7A, 0xB4, 0x83, 0x03, 0x28, 0x0E, 0x3E, 0xE0,  // z...(.>.
                                /* 0860 */  0x39, 0xF6, 0xF0, 0xD1, 0xB1, 0xA9, 0x62, 0x4F,  // 9.....bO
                                /* 0868 */  0x0E, 0x80, 0x93, 0x33, 0x98, 0x4F, 0x0E, 0xE0,  // ...3.O..
                                /* 0870 */  0x52, 0x71, 0x72, 0x00, 0xDD, 0x9C, 0x1E, 0xA3,  // Rqr.....
                                /* 0878 */  0xC0, 0x7A, 0x00, 0x80, 0x73, 0x74, 0xC0, 0x8D,  // .z..st..
                                /* 0880 */  0xC1, 0x92, 0x8F, 0x0E, 0x08, 0xAD, 0x67, 0x5D,  // ......g]
                                /* 0888 */  0x32, 0x8C, 0x73, 0xE0, 0x87, 0x4A, 0xCC, 0xFF,  // 2.s..J..
                                /* 0890 */  0xFF, 0x78, 0x0B, 0xF8, 0xB8, 0x12, 0xC4, 0x3A,  // .x.....:
                                /* 0898 */  0xF5, 0xB7, 0x2F, 0x4F, 0xF2, 0x45, 0xDD, 0x37,  // ../O.E.7
                                /* 08A0 */  0x63, 0x36, 0x3D, 0xCC, 0xC9, 0x01, 0x70, 0x72,  // c6=...pr
                                /* 08A8 */  0xF8, 0x07, 0xDF, 0xC8, 0x7D, 0xF8, 0x07, 0x4E,  // ....}..N
                                /* 08B0 */  0x27, 0x07, 0x7E, 0x02, 0xC0, 0xDF, 0x17, 0xF0,  // '.~.....
                                /* 08B8 */  0x87, 0x7F, 0xDC, 0xFF, 0x5F, 0x14, 0x84, 0x02,  // ...._...
                                /* 08C0 */  0x1C, 0xFE, 0x21, 0x9D, 0x2C, 0x31, 0x08, 0xE7,  // ..!.,1..
                                /* 08C8 */  0xF0, 0x1C, 0x6B, 0xCF, 0x27, 0x4C, 0x7A, 0x7C,  // ..k.'Lz|
                                /* 08D0 */  0xE0, 0x27, 0x08, 0x1F, 0x65, 0x7C, 0x7C, 0xE0,  // .'..e||.
                                /* 08D8 */  0xB2, 0xE0, 0x28, 0x88, 0x8F, 0x0F, 0x8E, 0x7C,  // ..(....|
                                /* 08E0 */  0x7C, 0x80, 0x1E, 0xF1, 0xF8, 0x00, 0x8A, 0xC3,  // |.......
                                /* 08E8 */  0xC0, 0x63, 0x0C, 0xD8, 0xD0, 0x0E, 0x0E, 0x07,  // .c......
                                /* 08F0 */  0x64, 0xB0, 0xA0, 0x21, 0x2A, 0x86, 0x22, 0xC0,  // d..!*.".
                                /* 08F8 */  0xCD, 0x9F, 0x20, 0x00, 0x2D, 0x27, 0x21, 0x9F,  // .. .-'!.
                                /* 0900 */  0x20, 0xC0, 0x75, 0x06, 0xF0, 0x09, 0x02, 0x5C,  //  .u....\
                                /* 0908 */  0x47, 0x00, 0x78, 0xFF, 0xFF, 0x23, 0x00, 0x18,  // G.x..#..
                                /* 0910 */  0x91, 0x62, 0x3D, 0x02, 0x30, 0x89, 0xA7, 0x3B,  // .b=.0..;
                                /* 0918 */  0xB4, 0xF8, 0x23, 0x37, 0xE2, 0xFC, 0x00, 0x4B,  // ..#7...K
                                /* 0920 */  0xEE, 0xF9, 0x01, 0x25, 0x94, 0x42, 0x07, 0x08,  // ...%.B..
                                /* 0928 */  0x9F, 0x1F, 0xF8, 0x61, 0xD7, 0x60, 0x06, 0xF1,  // ...a.`..
                                /* 0930 */  0xF9, 0xC1, 0xA1, 0xCF, 0x0F, 0xD0, 0x43, 0x9E,  // ......C.
                                /* 0938 */  0xB8, 0x41, 0x21, 0xF6, 0x88, 0x0C, 0xBA, 0xF1,  // .A!.....
                                /* 0940 */  0xC2, 0xC3, 0xB4, 0x2F, 0x0C, 0x69, 0x46, 0xD0,  // .../.iF.
                                /* 0948 */  0x19, 0x0F, 0xF0, 0x72, 0x22, 0xF2, 0x01, 0x02,  // ...r"...
                                /* 0950 */  0x5C, 0x36, 0x60, 0xE9, 0xFF, 0xFF, 0x00, 0x01,  // \6`.....
                                /* 0958 */  0x9E, 0x33, 0x00, 0xF0, 0x12, 0x76, 0xCE, 0x43,  // .3...v.C
                                /* 0960 */  0x0B, 0x3F, 0xD3, 0x40, 0x9A, 0xF3, 0x8B, 0xB8,  // .?.@....
                                /* 0968 */  0x7D, 0x82, 0x88, 0xC0, 0xE7, 0x07, 0x1F, 0x21,  // }......!
                                /* 0970 */  0xF8, 0x91, 0xD3, 0x07, 0x2C, 0x1F, 0x21, 0xB8,  // ....,.!.
                                /* 0978 */  0x24, 0x38, 0x0A, 0xE2, 0x23, 0x84, 0xE3, 0x1E,  // $8..#...
                                /* 0980 */  0x21, 0xA0, 0xC7, 0x3B, 0xD1, 0x80, 0xE2, 0x64,  // !..;...d
                                /* 0988 */  0x06, 0x1E, 0xA4, 0x33, 0xF3, 0x48, 0x8D, 0xF2,  // ...3.H..
                                /* 0990 */  0xF2, 0x81, 0x3F, 0xCF, 0x00, 0x5E, 0xFE, 0xFF,  // ..?..^..
                                /* 0998 */  0x27, 0x3D, 0x70, 0xEA, 0x38, 0xE9, 0x01, 0xAD,  // '=p.8...
                                /* 09A0 */  0x03, 0x00, 0x38, 0x04, 0x1F, 0x1E, 0xD0, 0x21,  // ..8....!
                                /* 09A8 */  0x0E, 0x0F, 0x54, 0x21, 0x86, 0x0E, 0x0E, 0x47,  // ..T!...G
                                /* 09B0 */  0xEB, 0xE3, 0x03, 0xEE, 0xF2, 0xC0, 0x0E, 0x9F,  // ........
                                /* 09B8 */  0x3E, 0x3C, 0xF0, 0x13, 0x8D, 0x4F, 0x58, 0x3E,  // ><...OX>
                                /* 09C0 */  0x3C, 0xF0, 0xE3, 0x9E, 0x4F, 0x9E, 0xFC, 0xF0,  // <...O...
                                /* 09C8 */  0xE0, 0xE8, 0x87, 0x07, 0xE8, 0x67, 0x4F, 0x1F,  // .....gO.
                                /* 09D0 */  0x1E, 0xE0, 0x1F, 0xA1, 0xF9, 0x60, 0xE1, 0x4F,  // .....`.O
                                /* 09D8 */  0xD3, 0x28, 0xD1, 0x0E, 0xF1, 0x3D, 0xE0, 0x3C,  // .(...=.<
                                /* 09E0 */  0x82, 0x18, 0xE7, 0x61, 0x8F, 0xC1, 0x9E, 0xEC,  // ...a....
                                /* 09E8 */  0x19, 0xDB, 0xF5, 0x11, 0x02, 0x08, 0xFE, 0xFF,  // ........
                                /* 09F0 */  0x8F, 0x10, 0xC0, 0xE5, 0x90, 0xE6, 0x23, 0x04,  // ......#.
                                /* 09F8 */  0xB8, 0x7C, 0x1C, 0x21, 0x40, 0x77, 0x0C, 0x00,  // .|.!@w..
                                /* 0A00 */  0x8E, 0xB2, 0x0F, 0x12, 0x28, 0x29, 0x07, 0x09,  // ....()..
                                /* 0A08 */  0x7A, 0xCA, 0x61, 0x17, 0x09, 0x7E, 0x8A, 0x60,  // z.a..~.`
                                /* 0A10 */  0xD2, 0x4F, 0x11, 0xA8, 0x83, 0x84, 0xCF, 0xA2,  // .O......
                                /* 0A18 */  0x3E, 0x45, 0xF0, 0xF3, 0x30, 0x07, 0xF1, 0x29,  // >E..0..)
                                /* 0A20 */  0xC2, 0x34, 0x3E, 0x45, 0xC0, 0x0D, 0x7C, 0xC6,  // .4>E..|.
                                /* 0A28 */  0x02, 0xC5, 0xD4, 0x8E, 0x17, 0x2C, 0xA3, 0xF7,  // .....,..
                                /* 0A30 */  0x59, 0xCF, 0xC7, 0x45, 0x9F, 0x38, 0x8C, 0x71,  // Y..E.8.q
                                /* 0A38 */  0xF6, 0xE1, 0xA2, 0xBE, 0xF0, 0x31, 0x2C, 0x36,  // .....1,6
                                /* 0A40 */  0x66, 0xDC, 0xFF, 0x7F, 0xCC, 0x6C, 0x2A, 0xC6,  // f....l*.
                                /* 0A48 */  0x38, 0x7C, 0x7E, 0xD2, 0x02, 0xBC, 0x1C, 0xF1,  // 8|~.....
                                /* 0A50 */  0x7D, 0x90, 0x00, 0xD7, 0x58, 0x7C, 0x90, 0x00,  // }...X|..
                                /* 0A58 */  0xD7, 0x49, 0x00, 0xF8, 0x86, 0x3A, 0x4B, 0xA0,  // .I...:K.
                                /* 0A60 */  0xC4, 0x9D, 0xD0, 0x7C, 0x38, 0x46, 0xCC, 0xF7,  // ...|8F..
                                /* 0A68 */  0x68, 0x7C, 0xF8, 0x8A, 0x70, 0x06, 0xC6, 0x39,  // h|..p..9
                                /* 0A70 */  0x37, 0x1F, 0x95, 0x0D, 0xF3, 0xF6, 0xE0, 0xAB,  // 7.......
                                /* 0A78 */  0x4C, 0x90, 0x30, 0x6F, 0xA9, 0x61, 0xCE, 0x23,  // L.0o.a.#
                                /* 0A80 */  0x4C, 0x94, 0x04, 0x3E, 0xA1, 0xFA, 0x50, 0xC1,  // L..>..P.
                                /* 0A88 */  0xCF, 0x15, 0x3E, 0x82, 0xF9, 0x50, 0xC1, 0xA5,  // ..>..P..
                                /* 0A90 */  0xC2, 0x51, 0x10, 0x1F, 0x2A, 0x2C, 0xE3, 0x50,  // .Q..*,.P
                                /* 0A98 */  0x81, 0xFA, 0xFF, 0x1F, 0x2A, 0xE0, 0xC4, 0x3E,  // ....*..>
                                /* 0AA0 */  0xE9, 0x80, 0x42, 0xFE, 0xA9, 0x16, 0x74, 0x47,  // ..B...tG
                                /* 0AA8 */  0x01, 0x8F, 0x10, 0xC6, 0x8D, 0xC4, 0x27, 0x13,  // ......'.
                                /* 0AB0 */  0x9F, 0xDB, 0x8C, 0x63, 0xB0, 0xC3, 0xC5, 0x61,  // ...c...a
                                /* 0AB8 */  0x63, 0x8E, 0xCC, 0x9E, 0x2B, 0xE6, 0x5C, 0x01,  // c...+.\.
                                /* 0AC0 */  0x38, 0x39, 0xCA, 0xF9, 0x5C, 0x01, 0x2E, 0x23,  // 89..\..#
                                /* 0AC8 */  0xE7, 0x0A, 0xD0, 0x1D, 0x06, 0x80, 0xD7, 0xFF,  // ........
                                /* 0AD0 */  0xFF, 0x30, 0x00, 0x8E, 0x93, 0x21, 0x6E, 0x3C,  // .0...!n<
                                /* 0AD8 */  0x96, 0x7D, 0xB4, 0x40, 0xCC, 0xFC, 0xB0, 0x5F,  // .}.@..._
                                /* 0AE0 */  0x02, 0x1E, 0x2C, 0xF8, 0x59, 0x02, 0x77, 0xE0,  // ..,.Y.w.
                                /* 0AE8 */  0xE1, 0x07, 0x43, 0x1F, 0x29, 0xB8, 0x28, 0x38,  // ..C.).(8
                                /* 0AF0 */  0x0A, 0xE2, 0x23, 0x85, 0x8F, 0x3B, 0x3E, 0x52,  // ..#..;>R
                                /* 0AF8 */  0xC0, 0x0D, 0x78, 0xA4, 0x00, 0xC5, 0xB9, 0x1B,  // ..x.....
                                /* 0B00 */  0x7C, 0x93, 0x63, 0x03, 0x87, 0x77, 0x90, 0x07,  // |.c..w..
                                /* 0B08 */  0x2C, 0x2A, 0x39, 0x47, 0x80, 0xEA, 0xFF, 0x7F,  // ,*9G....
                                /* 0B10 */  0x02, 0x00, 0x4E, 0x87, 0x07, 0x98, 0x18, 0x0F,  // ..N.....
                                /* 0B18 */  0x0F, 0x80, 0xAF, 0xC9, 0xB1, 0xC3, 0x03, 0x60,  // .......`
                                /* 0B20 */  0xF6, 0xFF, 0x7F, 0x62, 0xF0, 0x29, 0xC0, 0x87,  // ...b.)..
                                /* 0B28 */  0x07, 0xE0, 0x76, 0x02, 0x80, 0x2F, 0xFA, 0xF0,  // ..v../..
                                /* 0B30 */  0x80, 0x12, 0x05, 0xA1, 0x20, 0x87, 0x07, 0xC4,  // .... ...
                                /* 0B38 */  0x11, 0x1E, 0xCE, 0x58, 0x1F, 0x16, 0x8C, 0xEF,  // ...X....
                                /* 0B40 */  0x1B, 0x98, 0xCF, 0xA9, 0x80, 0x97, 0xF1, 0xF2,  // ........
                                /* 0B48 */  0x23, 0x37, 0x38, 0x70, 0x4E, 0xE0, 0x28, 0x71,  // #78pN.(q
                                /* 0B50 */  0xA7, 0x08, 0xE0, 0xFA, 0xFF, 0x3F, 0xA7, 0x02,  // .....?..
                                /* 0B58 */  0xAF, 0xF3, 0xA7, 0xCF, 0xA9, 0xC0, 0xE9, 0x18,  // ........
                                /* 0B60 */  0x00, 0xEE, 0x40, 0x47, 0x09, 0xD4, 0x11, 0xC0,  // ..@G....
                                /* 0B68 */  0xC1, 0xCE, 0xF2, 0x90, 0xA6, 0xF3, 0x8C, 0x88,  // ........
                                /* 0B70 */  0x1B, 0xE8, 0x69, 0xD8, 0x25, 0x8A, 0xEE, 0xAD,  // ..i.%...
                                /* 0B78 */  0x3E, 0x0A, 0x02, 0x66, 0x2E, 0x07, 0x2F, 0x09,  // >..f../.
                                /* 0B80 */  0x07, 0xEB, 0x29, 0xE2, 0x8E, 0x95, 0x30, 0xBC,  // ..)...0.
                                /* 0B88 */  0xCF, 0x91, 0x60, 0x05, 0x8C, 0xF2, 0xD8, 0xEB,  // ..`.....
                                /* 0B90 */  0x63, 0xE5, 0xFF, 0xFF, 0x30, 0x7D, 0x92, 0x06,  // c...0}..
                                /* 0B98 */  0x5C, 0x1D, 0x05, 0xC1, 0x67, 0xE5, 0x28, 0x08,  // \...g.(.
                                /* 0BA0 */  0xB4, 0x0E, 0x03, 0xC0, 0xE9, 0xC8, 0x83, 0xE3,  // ........
                                /* 0BA8 */  0x70, 0x8C, 0xF3, 0x34, 0xE2, 0x46, 0x81, 0x3B,  // p..4.F.;
                                /* 0BB0 */  0xF0, 0x60, 0xCF, 0x61, 0x3E, 0x54, 0x70, 0xC1,  // .`.a>Tp.
                                /* 0BB8 */  0x14, 0x3A, 0xF1, 0xF8, 0x50, 0xC1, 0x05, 0xC2,  // .:..P...
                                /* 0BC0 */  0x51, 0x10, 0x1F, 0x2A, 0x1C, 0xFE, 0xC0, 0x03,  // Q..*....
                                /* 0BC8 */  0xE5, 0xFF, 0x7F, 0xA8, 0xC0, 0x85, 0x3D, 0x52,  // ......=R
                                /* 0BD0 */  0x83, 0xE2, 0x1C, 0x70, 0xE0, 0x60, 0x19, 0x1E,  // ...p.`..
                                /* 0BD8 */  0x9B, 0x30, 0xCC, 0xA9, 0x63, 0x2F, 0x27, 0x8F,  // .0..c/'.
                                /* 0BE0 */  0x04, 0xC6, 0xE1, 0x07, 0x6A, 0xC0, 0x4B, 0xC8,  // ....j.K.
                                /* 0BE8 */  0xF3, 0x04, 0xE8, 0xB4, 0x9C, 0x27, 0x40, 0x77,  // .....'@w
                                /* 0BF0 */  0x0E, 0x00, 0x9E, 0x01, 0x8E, 0x12, 0xA8, 0xFF,  // ........
                                /* 0BF8 */  0x3F, 0x87, 0xC3, 0x1C, 0xC6, 0x10, 0x47, 0x09,  // ?.....G.
                                /* 0C00 */  0x98, 0xE2, 0x8F, 0x12, 0xA8, 0xD3, 0x84, 0x8F,  // ........
                                /* 0C08 */  0x63, 0x3E, 0x4A, 0x70, 0x99, 0x70, 0x14, 0xC4,  // c>Jp.p..
                                /* 0C10 */  0x47, 0x09, 0x4B, 0x38, 0xEE, 0x40, 0x8F, 0x7C,  // G.K8.@.|
                                /* 0C18 */  0xDC, 0x01, 0x05, 0x88, 0x0F, 0x4D, 0xE0, 0x1A,  // .....M..
                                /* 0C20 */  0x33, 0x38, 0x8F, 0x63, 0x80, 0xA3, 0x53, 0x9D,  // 38.c..S.
                                /* 0C28 */  0x4F, 0x13, 0xE0, 0xF2, 0x72, 0x9A, 0x00, 0xDD,  // O...r...
                                /* 0C30 */  0xFF, 0xFF, 0x28, 0x00, 0x9C, 0x83, 0x1C, 0x16,  // ..(.....
                                /* 0C38 */  0xD1, 0x91, 0x8E, 0x64, 0xA0, 0x18, 0xF7, 0xDB,  // ...d....
                                /* 0C40 */  0xA4, 0x0F, 0x46, 0x3A, 0x52, 0xA0, 0xCE, 0x63,  // ..F:R..c
                                /* 0C48 */  0x3E, 0x53, 0xF8, 0x48, 0xC1, 0x85, 0xC2, 0x51,  // >S.H...Q
                                /* 0C50 */  0x10, 0x1F, 0x29, 0x2C, 0xE2, 0x48, 0x01, 0x3D,  // ..),.H.=
                                /* 0C58 */  0xF4, 0x91, 0x02, 0x14, 0xE2, 0x0F, 0x4D, 0x40,  // ......M@
                                /* 0C60 */  0x06, 0xEA, 0x38, 0x7C, 0x22, 0xF7, 0x7D, 0xC9,  // ..8|".}.
                                /* 0C68 */  0x78, 0xAF, 0x4C, 0xF0, 0xCE, 0x14, 0xC0, 0xF4,  // x.L.....
                                /* 0C70 */  0xFF, 0x7F, 0xA6, 0x00, 0xD7, 0xC1, 0xC9, 0x67,  // .......g
                                /* 0C78 */  0x0A, 0x70, 0xC1, 0xF9, 0x4C, 0x01, 0xAE, 0xB3,  // .p..L...
                                /* 0C80 */  0x00, 0xF0, 0x16, 0x7A, 0xB8, 0x46, 0x9F, 0x24,  // ...z.F.$
                                /* 0C88 */  0x7C, 0x12, 0x62, 0xB7, 0x09, 0x1F, 0x79, 0xB0,  // |.b...y.
                                /* 0C90 */  0x92, 0x0F, 0x14, 0xA8, 0xB3, 0xAC, 0xCF, 0x8A,  // ........
                                /* 0C98 */  0x3E, 0x50, 0x70, 0x71, 0x70, 0x14, 0xC4, 0x07,  // >Ppqp...
                                /* 0CA0 */  0x0A, 0x07, 0x3F, 0x8C, 0x41, 0x0F, 0x7A, 0x18,  // ..?.A.z.
                                /* 0CA8 */  0x03, 0x85, 0xE0, 0x53, 0x13, 0xE8, 0x66, 0x0B,  // ...S..f.
                                /* 0CB0 */  0xE3, 0xCE, 0x04, 0xFB, 0xFF, 0x7F, 0x94, 0x00,  // ........
                                /* 0CB8 */  0x9C, 0x1C, 0xD1, 0x7D, 0x94, 0x00, 0x97, 0x99,  // ...}....
                                /* 0CC0 */  0xA3, 0x04, 0xE8, 0x4E, 0x01, 0xC0, 0x4F, 0xF8,  // ...N..O.
                                /* 0CC8 */  0x21, 0x02, 0x7D, 0x44, 0xF4, 0x01, 0x88, 0x1D,  // !.}D....
                                /* 0CD0 */  0x22, 0x60, 0x9C, 0x60, 0x7D, 0x88, 0xE0, 0xA7,  // "`.`}...
                                /* 0CD8 */  0x30, 0x1F, 0x24, 0x7C, 0x88, 0xE0, 0x87, 0x7E,  // 0.$|...~
                                /* 0CE0 */  0x1F, 0xFB, 0xF9, 0x21, 0xC2, 0x34, 0x3E, 0x44,  // ...!.4>D
                                /* 0CE8 */  0xC0, 0x3D, 0xF8, 0xFB, 0x90, 0x03, 0x7F, 0x82,  // .=......
                                /* 0CF0 */  0xC7, 0x8B, 0xFD, 0xFF, 0x1F, 0x96, 0xE0, 0x8F,  // ........
                                /* 0CF8 */  0x17, 0x6C, 0x57, 0x25, 0xFC, 0x41, 0x02, 0xB0,  // .lW%.A..
                                /* 0D00 */  0x72, 0x1C, 0xF1, 0x41, 0x02, 0x5C, 0x6A, 0x0E,  // r..A.\j.
                                /* 0D08 */  0x12, 0xA0, 0x3B, 0x09, 0x00, 0x5F, 0xB9, 0x87,  // ..;.._..
                                /* 0D10 */  0x09, 0xD4, 0x71, 0xDC, 0x27, 0x6B, 0x8F, 0x83,  // ..q.'k..
                                /* 0D18 */  0x61, 0x1C, 0xF3, 0x1B, 0x40, 0x88, 0x77, 0x33,  // a...@.w3
                                /* 0D20 */  0x9F, 0x5D, 0x61, 0xFD, 0xFF, 0xCF, 0xAE, 0xC0,  // .]a.....
                                /* 0D28 */  0xE7, 0x2C, 0x81, 0x3B, 0x64, 0x82, 0x67, 0xC8,  // .,.;d.g.
                                /* 0D30 */  0x7C, 0x6E, 0x0C, 0x24, 0xD4, 0x53, 0x92, 0x8F,  // |n.$.S..
                                /* 0D38 */  0x01, 0xA7, 0x72, 0xB0, 0x71, 0x82, 0xBC, 0x12,  // ..r.q...
                                /* 0D40 */  0x78, 0xB8, 0x46, 0xF2, 0xC9, 0x29, 0xC8, 0x53,  // x.F..).S
                                /* 0D48 */  0xC2, 0x29, 0x44, 0x7D, 0x7D, 0x7B, 0x38, 0x68,  // .)D}}{8h
                                /* 0D50 */  0xEA, 0xEC, 0x0A, 0x88, 0x74, 0x73, 0x76, 0x05,  // ....tsv.
                                /* 0D58 */  0x5A, 0xE7, 0x00, 0xF8, 0xFF, 0xFF, 0x73, 0x00,  // Z.....s.
                                /* 0D60 */  0xFC, 0x73, 0x17, 0x9C, 0x73, 0x04, 0xCE, 0xE7,  // .s..s...
                                /* 0D68 */  0xB4, 0x75, 0x90, 0xE0, 0xE7, 0x2E, 0xE0, 0x78,  // .u.....x
                                /* 0D70 */  0x90, 0xC0, 0x1D, 0x91, 0xC0, 0x33, 0x62, 0xFC,  // .....3b.
                                /* 0D78 */  0xE8, 0x7C, 0x8C, 0x00, 0xBC, 0x9D, 0xBB, 0xC0,  // .|......
                                /* 0D80 */  0x37, 0x42, 0x1F, 0x23, 0xE0, 0xFE, 0xFF, 0xCF,  // 7B.#....
                                /* 0D88 */  0x5D, 0xE0, 0x3D, 0x05, 0x80, 0x57, 0xD2, 0x21,  // ].=..W.!
                                /* 0D90 */  0x02, 0x35, 0x2E, 0x9F, 0xB6, 0x7C, 0x88, 0xC0,  // .5...|..
                                /* 0D98 */  0x43, 0x3F, 0x16, 0x1E, 0xCB, 0xB3, 0x35, 0x3B,  // C?....5;
                                /* 0DA0 */  0x47, 0xF3, 0x73, 0x0D, 0x97, 0x77, 0x8A, 0x40,  // G.s..w.@
                                /* 0DA8 */  0x09, 0x82, 0xA3, 0x20, 0x3E, 0x45, 0xF8, 0x54,  // ... >E.T
                                /* 0DB0 */  0xE3, 0x53, 0x04, 0xDC, 0x70, 0xA7, 0x08, 0x50,  // .S..p..P
                                /* 0DB8 */  0x88, 0x1C, 0x30, 0xC8, 0x2F, 0x91, 0x9E, 0x1E,  // ..0./...
                                /* 0DC0 */  0x3B, 0x3F, 0x00, 0x4E, 0x42, 0x9D, 0x1F, 0xA0,  // ;?.NB...
                                /* 0DC8 */  0xFC, 0xFF, 0xCF, 0x0F, 0x70, 0xED, 0x9C, 0x1F,  // ....p...
                                /* 0DD0 */  0x40, 0x37, 0x7E, 0xE0, 0x21, 0xF8, 0xE4, 0x80,  // @7~.!...
                                /* 0DD8 */  0x1A, 0xBB, 0x83, 0x9C, 0x1C, 0x10, 0xD7, 0x7A,  // .......z
                                /* 0DE0 */  0x76, 0xE4, 0x3A, 0x84, 0x97, 0x84, 0xB3, 0x38,  // v.:....8
                                /* 0DE8 */  0x9C, 0x9A, 0x81, 0x74, 0xE5, 0x62, 0x38, 0x51,  // ...t.b8Q
                                /* 0DF0 */  0x9E, 0x52, 0x7D, 0xEE, 0x32, 0x81, 0x0F, 0x5A,  // .R}.2..Z
                                /* 0DF8 */  0x3E, 0x3E, 0xF0, 0x23, 0x8D, 0x4F, 0xCD, 0x3E,  // >>.#.O.>
                                /* 0E00 */  0x3E, 0x70, 0x69, 0x70, 0x14, 0xC4, 0xC7, 0x07,  // >pip....
                                /* 0E08 */  0xC7, 0x3E, 0x3E, 0x40, 0x8F, 0x79, 0x7C, 0x00,  // .>>@.y|.
                                /* 0E10 */  0x85, 0xDC, 0xF1, 0x82, 0x6E, 0x8A, 0x78, 0xA4,  // ....n.x.
                                /* 0E18 */  0x63, 0xC4, 0x02, 0x9D, 0x23, 0xE6, 0x0C, 0x01,  // c...#...
                                /* 0E20 */  0xDC, 0xFE, 0xFF, 0x67, 0x08, 0xF0, 0xC6, 0x3B,  // ...g...;
                                /* 0E28 */  0x43, 0x80, 0x4E, 0xCF, 0x19, 0x02, 0x74, 0x87,  // C.N...t.
                                /* 0E30 */  0x00, 0xE0, 0x76, 0xCA, 0xC2, 0x71, 0xF8, 0xF0,  // ..v..q..
                                /* 0E38 */  0x87, 0x19, 0x9E, 0x4F, 0x38, 0x46, 0x3E, 0x86,  // ...O8F>.
                                /* 0E40 */  0xB7, 0x0A, 0x4F, 0xEC, 0x48, 0x0E, 0x21, 0xD0,  // ..O.H.!.
                                /* 0E48 */  0x43, 0x04, 0x60, 0x68, 0x7A, 0xB8, 0x4B, 0x08,  // C.`hz.K.
                                /* 0E50 */  0x9F, 0x1F, 0x3F, 0xAC, 0x31, 0x68, 0xCC, 0x21,  // ..?.1h.!
                                /* 0E58 */  0x02, 0xF7, 0xFF, 0x3F, 0x44, 0x00, 0xDE, 0xFC,  // ...?D...
                                /* 0E60 */  0x1C, 0x22, 0x80, 0xDE, 0x21, 0x00, 0x5C, 0xF2,  // ."..!.\.
                                /* 0E68 */  0x0F, 0x11, 0xA8, 0x51, 0x39, 0xCE, 0x91, 0x41,  // ...Q9..A
                                /* 0E70 */  0xB0, 0xE7, 0x71, 0xA2, 0x2F, 0xF6, 0xB8, 0x29,  // ..q./..)
                                /* 0E78 */  0x86, 0xF6, 0x2C, 0xC2, 0x1C, 0x43, 0xA4, 0x08,  // ..,..C..
                                /* 0E80 */  0x0F, 0x15, 0xC6, 0xEF, 0xF9, 0xF0, 0xEC, 0x73,  // .......s
                                /* 0E88 */  0x04, 0xEA, 0x04, 0xE8, 0xB3, 0x84, 0xCF, 0x11,  // ........
                                /* 0E90 */  0x5C, 0x22, 0x1C, 0x05, 0xF1, 0x39, 0xC2, 0xF1,  // \"...9..
                                /* 0E98 */  0xCF, 0x11, 0xD0, 0xE3, 0x9E, 0x23, 0x40, 0x31,  // .....#@1
                                /* 0EA0 */  0x9D, 0x63, 0xC6, 0xFC, 0xFF, 0xC7, 0x0C, 0x77,  // .c.....w
                                /* 0EA8 */  0x72, 0x98, 0x75, 0x1E, 0x1D, 0xF6, 0x1E, 0x02,  // r.u.....
                                /* 0EB0 */  0x03, 0x3F, 0xCE, 0xFB, 0xAD, 0x2F, 0x24, 0x11,  // .?.../$.
                                /* 0EB8 */  0x63, 0xFA, 0x8E, 0xE4, 0x13, 0x20, 0xE0, 0xE5,  // c.... ..
                                /* 0EC0 */  0x40, 0xE2, 0xB3, 0x04, 0xB8, 0xBE, 0x09, 0x3E,  // @......>
                                /* 0EC8 */  0x4B, 0x80, 0xEB, 0x20, 0x00, 0x5C, 0xCF, 0xCB,  // K.. .\..
                                /* 0ED0 */  0xB8, 0x91, 0xF9, 0x2C, 0xEF, 0xE3, 0x3D, 0x3B,  // ...,..=;
                                /* 0ED8 */  0x4C, 0xC0, 0x3B, 0xD0, 0x63, 0xFF, 0xFF, 0xC7,  // L.;.c...
                                /* 0EE0 */  0x1C, 0xE0, 0x38, 0x1C, 0x43, 0xB3, 0x23, 0x09,  // ..8.C.#.
                                /* 0EE8 */  0x98, 0x46, 0xC8, 0x96, 0x79, 0xE4, 0x70, 0xCF,  // .F..y.p.
                                /* 0EF0 */  0xF2, 0x80, 0xA3, 0x63, 0x0E, 0xF8, 0x0C, 0x1D,  // ...c....
                                /* 0EF8 */  0x73, 0x80, 0xD6, 0x21, 0x00, 0xDE, 0xFF, 0xFF,  // s..!....
                                /* 0F00 */  0x10, 0x00, 0xF7, 0x1C, 0x01, 0xE7, 0xE0, 0xC3,  // ........
                                /* 0F08 */  0xCE, 0x11, 0x80, 0x89, 0xD3, 0x17, 0xB8, 0xCF,  // ........
                                /* 0F10 */  0x11, 0x80, 0x6F, 0x45, 0xE7, 0x08, 0x28, 0xFF,  // ..oE..(.
                                /* 0F18 */  0xFF, 0xD3, 0x17, 0x70, 0x39, 0x04, 0x80, 0x4B,  // ...p9..K
                                /* 0F20 */  0xF6, 0x39, 0x02, 0x25, 0x0D, 0x42, 0x61, 0x4E,  // .9.%.BaN
                                /* 0F28 */  0x5F, 0x90, 0x06, 0x7D, 0x00, 0xF1, 0x8F, 0xF0,  // _..}....
                                /* 0F30 */  0x58, 0x3C, 0x04, 0x6B, 0xBC, 0xF5, 0x20, 0x09,  // X<.k.. .
                                /* 0F38 */  0x7C, 0x9A, 0x07, 0xBC, 0x4C, 0x0F, 0x7F, 0x49,  // |...L..I
                                /* 0F40 */  0x02, 0xCF, 0x51, 0x02, 0xF8, 0xFE, 0xFF, 0x4F,  // ..Q....O
                                /* 0F48 */  0xF3, 0xC0, 0xC9, 0xD1, 0x69, 0x1E, 0x68, 0x9D,  // ....i.h.
                                /* 0F50 */  0x02, 0xC0, 0x2B, 0xFD, 0x2C, 0x81, 0x92, 0x74,  // ..+.,..t
                                /* 0F58 */  0x88, 0xA6, 0x87, 0x1E, 0x76, 0x7B, 0xC5, 0x4F,  // ....v{.O
                                /* 0F60 */  0x04, 0x73, 0xB2, 0x20, 0xE7, 0x08, 0xD4, 0x19,  // .s. ....
                                /* 0F68 */  0xC7, 0x72, 0xCF, 0x11, 0xA8, 0x33, 0xBD, 0x4F,  // .r...3.O
                                /* 0F70 */  0xF5, 0xFC, 0x1C, 0xE1, 0xF0, 0xE7, 0x08, 0xE8,  // ........
                                /* 0F78 */  0xE7, 0x7A, 0x9F, 0xBB, 0xE0, 0x0F, 0xE7, 0x90,  // .z......
                                /* 0F80 */  0xC1, 0xE2, 0xFA, 0xAC, 0x0B, 0x61, 0xAC, 0x1E,  // .....a..
                                /* 0F88 */  0x1E, 0x83, 0x89, 0x75, 0xD6, 0x11, 0x82, 0xF8,  // ...u....
                                /* 0F90 */  0x48, 0x62, 0x64, 0xDF, 0x47, 0xEC, 0x7D, 0xCE,  // Hbd.G.}.
                                /* 0F98 */  0x64, 0x0C, 0x47, 0xE2, 0x93, 0x04, 0xEE, 0xFF,  // d.G.....
                                /* 0FA0 */  0x7F, 0x92, 0x00, 0x3C, 0x9C, 0x47, 0x7C, 0x92,  // ...<.G|.
                                /* 0FA8 */  0x00, 0xD7, 0x11, 0xC1, 0x27, 0x09, 0x70, 0x81,  // ....'.p.
                                /* 0FB0 */  0x3D, 0x7A, 0x81, 0xED, 0x24, 0x00, 0x46, 0xB0,  // =z..$.F.
                                /* 0FB8 */  0x20, 0x31, 0x5E, 0x5B, 0x2D, 0xFE, 0x34, 0x01,  //  1^[-.4.
                                /* 0FC0 */  0x25, 0xCA, 0x09, 0x1F, 0xE2, 0x69, 0x02, 0x7B,  // %....i.{
                                /* 0FC8 */  0x66, 0x05, 0xBE, 0xFF, 0xFF, 0xB3, 0x25, 0x78,  // f.....%x
                                /* 0FD0 */  0x4E, 0x4A, 0x7C, 0xD8, 0xF0, 0x61, 0xFB, 0x9A,  // NJ|..a..
                                /* 0FD8 */  0x37, 0xE2, 0x04, 0x06, 0x38, 0x3A, 0xB3, 0x82,  // 7...8:..
                                /* 0FE0 */  0xCF, 0xD2, 0x99, 0x15, 0x68, 0x1D, 0x04, 0x80,  // ....h...
                                /* 0FE8 */  0x83, 0xE8, 0x05, 0xEA, 0x34, 0xC1, 0x45, 0x1D,  // ....4.E.
                                /* 0FF0 */  0xA9, 0xFD, 0x72, 0xD0, 0x31, 0x9F, 0x83, 0x1E,  // ..r.1...
                                /* 0FF8 */  0x8D, 0xD1, 0x0F, 0x84, 0x8D, 0xF8, 0xD5, 0xC7,  // ........
                                /* 1000 */  0x63, 0x88, 0xF1, 0xFF, 0x3F, 0x4D, 0x5F, 0xC1,  // c...?M_.
                                /* 1008 */  0x7C, 0xB8, 0xF0, 0x39, 0xC2, 0xC7, 0x08, 0x8B,  // |..9....
                                /* 1010 */  0xA6, 0x90, 0xAC, 0xE3, 0x04, 0x4A, 0xC8, 0x71,  // .....J.q
                                /* 1018 */  0x82, 0x82, 0x18, 0xD0, 0x29, 0x8F, 0x13, 0xE8,  // ....)...
                                /* 1020 */  0x23, 0x0E, 0x1B, 0xC2, 0xE3, 0x86, 0x73, 0x9D,  // #.....s.
                                /* 1028 */  0x26, 0xE8, 0x58, 0x3D, 0x72, 0xAE, 0xE1, 0xA8,  // &.X=r...
                                /* 1030 */  0x83, 0x80, 0x7D, 0x41, 0x3B, 0x68, 0xB0, 0x4C,  // ..}A;h.L
                                /* 1038 */  0x0E, 0xBF, 0xCB, 0x13, 0xF0, 0xD8, 0x3C, 0x13,  // ......<.
                                /* 1040 */  0xAB, 0xB9, 0x1B, 0xA0, 0xE6, 0xE1, 0x2B, 0x04,  // ......+.
                                /* 1048 */  0x46, 0xD7, 0x11, 0x02, 0x64, 0xFA, 0x6E, 0x10,  // F...d.n.
                                /* 1050 */  0x20, 0x47, 0xE7, 0x07, 0x39, 0x8F, 0x9D, 0xCB,  //  G..9...
                                /* 1058 */  0x19, 0x3B, 0x05, 0xF1, 0xD8, 0x1D, 0x75, 0xEC,  // .;....u.
                                /* 1060 */  0x68, 0x29, 0x20, 0x1A, 0xAC, 0xEF, 0x03, 0x58,  // h) ....X
                                /* 1068 */  0x82, 0xB1, 0xCE, 0x26, 0xA0, 0x90, 0x77, 0xC2,  // ...&..w.
                                /* 1070 */  0x01, 0xD1, 0x40, 0xD8, 0xA1, 0xCB, 0x13, 0xE1,  // ..@.....
                                /* 1078 */  0xE7, 0x11, 0x78, 0xFF, 0xFF, 0xB1, 0xF9, 0x3C,  // ..x....<
                                /* 1080 */  0x02, 0xBC, 0xC3, 0x9D, 0x47, 0x40, 0xA7, 0xE9,  // ....G@..
                                /* 1088 */  0x3C, 0x02, 0x3A, 0xB1, 0xE7, 0x11, 0xD0, 0x9D,  // <.:.....
                                /* 1090 */  0x26, 0x60, 0x5C, 0x0D, 0xF8, 0x15, 0x00, 0x77,  // &`\....w
                                /* 1098 */  0xB8, 0xD4, 0x39, 0x09, 0x7D, 0x3A, 0xF2, 0x51,  // ..9.}:.Q
                                /* 10A0 */  0x04, 0xD6, 0x8D, 0xD3, 0x07, 0x84, 0xB3, 0x32,  // .......2
                                /* 10A8 */  0x81, 0x65, 0x9E, 0x93, 0x50, 0xC7, 0x37, 0xCB,  // .e..P.7.
                                /* 10B0 */  0x3B, 0x3E, 0xA0, 0x04, 0xC1, 0x51, 0x10, 0x1F,  // ;>...Q..
                                /* 10B8 */  0x1F, 0x7C, 0x78, 0xF3, 0x39, 0x09, 0xEE, 0xF8,  // .|x.9...
                                /* 10C0 */  0x7D, 0x78, 0x80, 0x2F, 0x72, 0xC0, 0xA0, 0xF8,  // }x./r...
                                /* 10C8 */  0xFF, 0x9F, 0x45, 0x60, 0xCD, 0xD5, 0xC3, 0xC3,  // ..E`....
                                /* 10D0 */  0x1C, 0x8F, 0x00, 0x27, 0xC1, 0xCE, 0x0F, 0xA0,  // ...'....
                                /* 10D8 */  0xF3, 0x74, 0x7E, 0x00, 0xDD, 0x80, 0x9E, 0x1F,  // .t~.....
                                /* 10E0 */  0xC0, 0x7F, 0x02, 0xC0, 0x8A, 0x3C, 0x3D, 0xA0,  // .....<=.
                                /* 10E8 */  0x38, 0x2C, 0xFF, 0xB0, 0x0B, 0x69, 0x0E, 0x81,  // 8,...i..
                                /* 10F0 */  0xC2, 0xBF, 0xB6, 0xF8, 0x40, 0x4E, 0x0E, 0x0F,  // ....@N..
                                /* 10F8 */  0xA8, 0xF3, 0xB7, 0x0F, 0x10, 0x3E, 0x3C, 0x70,  // .....><p
                                /* 1100 */  0x61, 0x70, 0x14, 0xC4, 0x87, 0x07, 0x87, 0x3E,  // ap.....>
                                /* 1108 */  0x3C, 0x40, 0x0F, 0x79, 0x78, 0x80, 0xF6, 0xFF,  // <@.yx...
                                /* 1110 */  0x3F, 0x3C, 0xE0, 0x0E, 0x1F, 0xE0, 0x19, 0x1D,  // ?<......
                                /* 1118 */  0x76, 0x8E, 0x67, 0xD7, 0xD6, 0xF0, 0x10, 0xA7,  // v.g.....
                                /* 1120 */  0x52, 0xFC, 0x01, 0x02, 0xF0, 0x72, 0x9E, 0x01,  // R....r..
                                /* 1128 */  0xDF, 0x21, 0xCC, 0xE7, 0x19, 0xE0, 0x74, 0x06,  // .!....t.
                                /* 1130 */  0x00, 0x9F, 0xB8, 0x23, 0x04, 0x5A, 0xFA, 0x79,  // ...#.Z.y
                                /* 1138 */  0x06, 0x71, 0x7E, 0xC0, 0x80, 0x3C, 0xB6, 0x61,  // .q~..<.a
                                /* 1140 */  0x4F, 0xDD, 0x3E, 0x42, 0x70, 0x91, 0x14, 0x3A,  // O.>Bp..:
                                /* 1148 */  0x40, 0xFA, 0x08, 0xC1, 0xFF, 0xFF, 0xA2, 0xE0,  // @.......
                                /* 1150 */  0x28, 0x88, 0x8F, 0x10, 0x0E, 0x7C, 0x84, 0x80,  // (....|..
                                /* 1158 */  0x7E, 0x66, 0xF6, 0x11, 0x02, 0xFE, 0xF9, 0x03,  // ~f......
                                /* 1160 */  0x7C, 0xA3, 0xC5, 0xCE, 0x0F, 0x77, 0xA0, 0x01,  // |....w..
                                /* 1168 */  0x4C, 0x9A, 0x3A, 0xD0, 0x00, 0xBD, 0x13, 0x00,  // L.:.....
                                /* 1170 */  0xFC, 0xE3, 0x03, 0x9C, 0xB3, 0xAE, 0xFF, 0xFF,  // ........
                                /* 1178 */  0xC7, 0x07, 0xE0, 0x7F, 0xE0, 0xC6, 0x8D, 0x16,  // ........
                                /* 1180 */  0x3C, 0x27, 0x63, 0x7E, 0x7C, 0x00, 0x1C, 0xAB,  // <'c~|...
                                /* 1188 */  0x3A, 0x3E, 0x00, 0xAD, 0x13, 0x00, 0xFF, 0xFF,  // :>......
                                /* 1190 */  0x9F, 0x00, 0xE0, 0x4B, 0x3D, 0xEB, 0xA1, 0x23,  // ...K=..#
                                /* 1198 */  0x1C, 0xAF, 0x20, 0xE1, 0x3C, 0x6E, 0x1B, 0xC5,  // .. .<n..
                                /* 11A0 */  0x07, 0xD5, 0x87, 0x3F, 0x1F, 0xAF, 0xD9, 0xF9,  // ...?....
                                /* 11A8 */  0x81, 0x1F, 0x21, 0x7C, 0xC0, 0xF2, 0xF9, 0x81,  // ..!|....
                                /* 11B0 */  0x4B, 0x83, 0xA3, 0x20, 0x3E, 0x3F, 0x38, 0xF6,  // K.. >?8.
                                /* 11B8 */  0xF9, 0x01, 0xFA, 0xC9, 0xD8, 0xA7, 0x19, 0xF8,  // ........
                                /* 11C0 */  0x72, 0x0F, 0x43, 0xA0, 0x9D, 0x1E, 0x06, 0xE6,  // r.C.....
                                /* 11C8 */  0xF8, 0xD8, 0x6D, 0x08, 0xC6, 0x11, 0x02, 0x70,  // ..m....p
                                /* 11D0 */  0x12, 0xEF, 0x08, 0x01, 0x3A, 0x57, 0x47, 0x08,  // ....:WG.
                                /* 11D8 */  0x68, 0xFF, 0xFF, 0x23, 0x04, 0xBC, 0x43, 0x00,  // h..#..C.
                                /* 11E0 */  0x70, 0x3B, 0xD3, 0xC0, 0x3C, 0x42, 0xE0, 0x87,  // p;..<B..
                                /* 11E8 */  0xF8, 0x36, 0xCA, 0xCF, 0x34, 0x80, 0x9F, 0xE1,  // .6..4...
                                /* 11F0 */  0xC2, 0x99, 0x1F, 0xE6, 0x4C, 0x03, 0x98, 0xF9,  // ....L...
                                /* 11F8 */  0xFF, 0x9F, 0x20, 0xC0, 0x05, 0xEA, 0x33, 0x0D,  // .. ...3.
                                /* 1200 */  0x70, 0x3B, 0x01, 0xC0, 0x3F, 0xEF, 0xC1, 0x3C,  // p;..?..<
                                /* 1208 */  0x3E, 0x00, 0xFB, 0xF3, 0x1E, 0xB8, 0x8F, 0x0F,  // >.......
                                /* 1210 */  0xC0, 0xFF, 0xFF, 0x7F, 0x7C, 0x00, 0x8E, 0x17,  // ....|...
                                /* 1218 */  0xA9, 0xE7, 0x3D, 0x60, 0x77, 0x02, 0x80, 0x2F,  // ..=`w../
                                /* 1220 */  0xF6, 0xF8, 0x80, 0x3A, 0xA2, 0xFA, 0x84, 0xE5,  // ...:....
                                /* 1228 */  0xE3, 0x03, 0xAC, 0x2B, 0x05, 0x9B, 0x88, 0x61,  // ...+...a
                                /* 1230 */  0x7A, 0x3E, 0x11, 0x03, 0x72, 0xC6, 0x0B, 0x67,  // z>..r..g
                                /* 1238 */  0x7E, 0xD8, 0x23, 0x04, 0x58, 0xFE, 0xFF, 0x47,  // ~.#.X..G
                                /* 1240 */  0x08, 0xE0, 0x7E, 0x08, 0xF1, 0x11, 0x02, 0x5C,  // ..~....\
                                /* 1248 */  0xBA, 0x8E, 0x10, 0xA0, 0x13, 0x7C, 0x84, 0x00,  // .....|..
                                /* 1250 */  0x0A, 0xA7, 0x00, 0xB8, 0xA7, 0x74, 0xDC, 0x31,  // .....t.1
                                /* 1258 */  0xC2, 0x01, 0x8E, 0x11, 0x88, 0xE9, 0xC6, 0xEC,  // ........
                                /* 1260 */  0x1D, 0x45, 0x63, 0x38, 0xEA, 0x13, 0x3C, 0x0A,  // .Ec8..<.
                                /* 1268 */  0xC3, 0xC7, 0x79, 0xAA, 0x40, 0x1E, 0x23, 0x50,  // ..y.@.#P
                                /* 1270 */  0xA7, 0x08, 0x9F, 0x6B, 0x7C, 0x8C, 0xE0, 0xB2,  // ...k|...
                                /* 1278 */  0xE0, 0x28, 0x88, 0x8F, 0x11, 0x8E, 0x7C, 0x8C,  // .(....|.
                                /* 1280 */  0x80, 0x1E, 0xF1, 0x18, 0x01, 0x8A, 0x03, 0xC1,  // ........
                                /* 1288 */  0x31, 0xC3, 0xFA, 0xFF, 0x8F, 0x19, 0xDE, 0x04,  // 1.......
                                /* 1290 */  0x31, 0x30, 0x47, 0x88, 0x9B, 0x30, 0xEE, 0x14,  // 10G..0..
                                /* 1298 */  0x01, 0x38, 0x89, 0x76, 0x8A, 0x00, 0x9D, 0xAF,  // .8.v....
                                /* 12A0 */  0x53, 0x04, 0xE8, 0x8E, 0x00, 0xC0, 0xE9, 0x08,  // S.......
                                /* 12A8 */  0x81, 0xE3, 0xB0, 0xFC, 0x23, 0x04, 0x0A, 0x37,  // ....#..7
                                /* 12B0 */  0xA6, 0x8F, 0x08, 0x27, 0x12, 0xE7, 0xB0, 0x4E,  // ...'...N
                                /* 12B8 */  0xE3, 0x19, 0x30, 0xD0, 0x63, 0x0D, 0x70, 0xF9,  // ..0.c.p.
                                /* 12C0 */  0xFF, 0x1F, 0x6B, 0x80, 0x17, 0xC8, 0x71, 0xBC,  // ..k...q.
                                /* 12C8 */  0x0C, 0xF8, 0xF6, 0xC1, 0x86, 0x88, 0x05, 0x3A,  // .......:
                                /* 12D0 */  0x45, 0xCC, 0x09, 0x02, 0x70, 0x12, 0xEE, 0x04,  // E...p...
                                /* 12D8 */  0x01, 0xBA, 0xA1, 0xF9, 0x04, 0x01, 0xAE, 0x33,  // .......3
                                /* 12E0 */  0x00, 0xF0, 0x3A, 0x6A, 0xE1, 0x86, 0xE1, 0x43,  // ..:j...C
                                /* 12E8 */  0x8D, 0xCF, 0xC6, 0x30, 0x7C, 0x5E, 0x04, 0x88,  // ...0|^..
                                /* 12F0 */  0xE8, 0x93, 0x03, 0xFD, 0xFF, 0x43, 0xF8, 0x0C,  // .....C..
                                /* 12F8 */  0xE1, 0x43, 0x8D, 0x0F, 0x10, 0x5C, 0x1E, 0x1C,  // .C...\..
                                /* 1300 */  0x05, 0xF1, 0x01, 0xC2, 0xD1, 0x0F, 0x10, 0xD0,  // ........
                                /* 1308 */  0xA3, 0x1E, 0x20, 0x40, 0x31, 0x5E, 0x8F, 0x16,  // .. @1^..
                                /* 1310 */  0x1C, 0xF3, 0xAA, 0xFD, 0xEE, 0x41, 0x11, 0xC3,  // .....A..
                                /* 1318 */  0x19, 0xC7, 0x17, 0x58, 0x3C, 0x50, 0xF0, 0x38,  // ...X<P.8
                                /* 1320 */  0xB1, 0x43, 0x54, 0x8C, 0xA8, 0x93, 0x40, 0x88,  // .CT...@.
                                /* 1328 */  0x68, 0x2F, 0xD8, 0xCF, 0x10, 0x80, 0x95, 0x73,  // h/.....s
                                /* 1330 */  0x91, 0xCF, 0x10, 0xE0, 0x32, 0x76, 0x86, 0x00,  // ....2v..
                                /* 1338 */  0xDD, 0x31, 0x00, 0xFC, 0xFF, 0xFF, 0x63, 0x00,  // .1....c.
                                /* 1340 */  0x38, 0x8E, 0xA3, 0xB8, 0x91, 0x58, 0xF8, 0xC1,  // 8....X..
                                /* 1348 */  0x06, 0x71, 0x86, 0xF0, 0xE9, 0x1D, 0x77, 0xCC,  // .q....w.
                                /* 1350 */  0x02, 0x0C, 0x0D, 0x19, 0xD6, 0x5D, 0xDF, 0x23,  // .....].#
                                /* 1358 */  0xC4, 0x1C, 0xB3, 0x00, 0x87, 0xF3, 0xF1, 0x11,  // ........
                                /* 1360 */  0x02, 0x1C, 0xFF, 0xFF, 0x63, 0x16, 0x78, 0x8F,  // ....c.x.
                                /* 1368 */  0x00, 0xE0, 0x38, 0x3E, 0xC0, 0x39, 0x04, 0xB2,  // ..8>.9..
                                /* 1370 */  0xE3, 0x03, 0xB0, 0x3E, 0xA8, 0xE3, 0x06, 0x0B,  // ...>....
                                /* 1378 */  0x9E, 0x73, 0x35, 0x3F, 0x3E, 0x00, 0x5E, 0xFF,  // .s5?>.^.
                                /* 1380 */  0xFF, 0xC7, 0x07, 0xFC, 0x80, 0x1E, 0x1F, 0x80,  // ........
                                /* 1388 */  0xD5, 0x11, 0x00, 0x5C, 0x52, 0x8F, 0x0F, 0xA8,  // ...\R...
                                /* 1390 */  0x31, 0x39, 0xC4, 0xF1, 0x01, 0x31, 0xDE, 0xC8,  // 19...1..
                                /* 1398 */  0x4F, 0x5C, 0x07, 0x17, 0xE5, 0x90, 0x0F, 0xC3,  // O\......
                                /* 13A0 */  0x20, 0xCF, 0x5C, 0x9E, 0xD6, 0x59, 0x3C, 0x09,  //  .\..Y<.
                                /* 13A8 */  0xC6, 0x39, 0x0C, 0x9F, 0xFB, 0x80, 0xE7, 0x19,  // .9......
                                /* 13B0 */  0x02, 0x77, 0x48, 0x03, 0xCF, 0x88, 0xF9, 0x0C,  // .wH.....
                                /* 13B8 */  0x31, 0xA7, 0x46, 0x0F, 0x11, 0x37, 0x70, 0x4F,  // 1.F..7pO
                                /* 13C0 */  0x11, 0x73, 0x88, 0x00, 0x8E, 0xFF, 0xFF, 0x73,  // .s.....s
                                /* 13C8 */  0x1F, 0xF0, 0x93, 0x76, 0xEE, 0x03, 0x5A, 0x67,  // ...v..Zg
                                /* 13D0 */  0x00, 0xF0, 0x9D, 0x8D, 0xE1, 0x8C, 0x80, 0x4D,  // .......M
                                /* 13D8 */  0xE4, 0x99, 0xC6, 0x87, 0x08, 0xB8, 0xE7, 0x1A,  // ........
                                /* 13E0 */  0xC0, 0xCF, 0x04, 0xD9, 0x19, 0x02, 0xAC, 0xFF,  // ........
                                /* 13E8 */  0xFF, 0x73, 0x0D, 0xE0, 0xCA, 0xDA, 0xB9, 0x06,  // .s......
                                /* 13F0 */  0xE8, 0x1D, 0x01, 0xC0, 0x91, 0x62, 0x69, 0x3A,  // .....bi:
                                /* 13F8 */  0x42, 0x70, 0x49, 0x10, 0x4A, 0xF5, 0x5A, 0xD0,  // BpI.J.Z.
                                /* 1400 */  0x49, 0xD4, 0xE3, 0x3C, 0x0E, 0x43, 0x3F, 0x89,  // I..<.C?.
                                /* 1408 */  0x1A, 0x25, 0xF2, 0x11, 0xD4, 0x7A, 0x59, 0x10,  // .%...zY.
                                /* 1410 */  0xFE, 0x4B, 0xCE, 0xC3, 0x3A, 0xCB, 0x00, 0xAA,  // .K..:...
                                /* 1418 */  0xA3, 0x83, 0x4F, 0x0E, 0x56, 0x4F, 0x21, 0x5D,  // ..O.VO!]
                                /* 1420 */  0x27, 0x08, 0x94, 0x92, 0x13, 0x04, 0x05, 0x31,  // '......1
                                /* 1428 */  0xA0, 0x63, 0x9E, 0x20, 0xD0, 0x07, 0x07, 0x36,  // .c. ...6
                                /* 1430 */  0xCB, 0xE2, 0x41, 0x14, 0xEC, 0x00, 0x41, 0x07,  // ..A...A.
                                /* 1438 */  0xE9, 0x21, 0x73, 0x0D, 0x07, 0x08, 0x04, 0x6C,  // .!s....l
                                /* 1440 */  0x91, 0xA3, 0x05, 0xCD, 0xC0, 0x8E, 0xDE, 0x13,  // ........
                                /* 1448 */  0xFB, 0xFF, 0x3F, 0xE9, 0xFB, 0x26, 0x60, 0xB0,  // ..?..&`.
                                /* 1450 */  0x98, 0x0F, 0x8D, 0xC6, 0x0A, 0xF5, 0x10, 0x92,  // ........
                                /* 1458 */  0xA0, 0x9A, 0x53, 0x01, 0x6A, 0x20, 0x3E, 0x3C,  // ..S.j ><
                                /* 1460 */  0x60, 0x74, 0xDD, 0x1D, 0x40, 0xA6, 0xEF, 0xEC,  // `t..@...
                                /* 1468 */  0x00, 0x72, 0x74, 0x7E, 0x83, 0x04, 0x3C, 0xDC,  // .rt~..<.
                                /* 1470 */  0x14, 0x18, 0xCC, 0x73, 0x83, 0x8F, 0x57, 0x46,  // ...s..WF
                                /* 1478 */  0x09, 0x19, 0xE3, 0x09, 0xEB, 0x55, 0x81, 0x5F,  // .....U._
                                /* 1480 */  0x00, 0x70, 0x97, 0x11, 0x78, 0xF7, 0x29, 0x72,  // .p..x.)r
                                /* 1488 */  0x19, 0x01, 0xDA, 0xD7, 0x08, 0x5F, 0x46, 0xB0,  // ....._F.
                                /* 1490 */  0xFF, 0xFF, 0xCB, 0x08, 0x6C, 0x6D, 0x97, 0x11,  // ....lm..
                                /* 1498 */  0xD0, 0x61, 0xBD, 0x41, 0x82, 0x6D, 0x2E, 0x9E,  // .a.A.m..
                                /* 14A0 */  0x3D, 0xEE, 0x12, 0x60, 0x98, 0x18, 0xEF, 0x01,  // =..`....
                                /* 14A8 */  0xBE, 0x83, 0x60, 0x2E, 0x24, 0x9E, 0xEA, 0xA3,  // ..`.$...
                                /* 14B0 */  0x00, 0x8E, 0xC0, 0xF7, 0x48, 0x1C, 0x87, 0x6F,  // ....H..o
                                /* 14B8 */  0xB5, 0x98, 0xE9, 0x9E, 0x85, 0xD1, 0x0F, 0x2C,  // .......,
                                /* 14C0 */  0xB0, 0x67, 0x79, 0x90, 0x86, 0x66, 0x77, 0x36,  // .gy..fw6
                                /* 14C8 */  0x5F, 0x91, 0xB8, 0x44, 0x0A, 0x09, 0x3C, 0x46,  // _..D..<F
                                /* 14D0 */  0xA0, 0x24, 0xC1, 0x51, 0x10, 0x1F, 0x23, 0x1C,  // .$.Q..#.
                                /* 14D8 */  0xF7, 0x18, 0x01, 0x3D, 0xDE, 0x31, 0x02, 0x14,  // ...=.1..
                                /* 14E0 */  0xF7, 0x82, 0xC7, 0x08, 0x30, 0x8D, 0xCD, 0x43,  // ....0..C
                                /* 14E8 */  0x3C, 0x3E, 0x8F, 0xD6, 0xE3, 0x63, 0x40, 0xE7,  // <>...c@.
                                /* 14F0 */  0x87, 0xB9, 0x20, 0x01, 0xAB, 0xFF, 0xFF, 0x05,  // .. .....
                                /* 14F8 */  0x09, 0xD8, 0x7A, 0xBB, 0xD5, 0x02, 0xBD, 0x23,  // ..z....#
                                /* 1500 */  0x00, 0x38, 0x8E, 0x0F, 0xB8, 0x53, 0x80, 0xEF,  // .8...S..
                                /* 1508 */  0x69, 0x1E, 0x00, 0x53, 0x38, 0x26, 0x5D, 0x25,  // i..S8&]%
                                /* 1510 */  0x4E, 0xF4, 0x5D, 0xC2, 0xC0, 0x98, 0x3B, 0x3F,  // N.]...;?
                                /* 1518 */  0xBF, 0x3D, 0xF2, 0xE3, 0x8C, 0x4F, 0x0F, 0x5C,  // .=...O.\
                                /* 1520 */  0x08, 0x1C, 0x05, 0xF1, 0xE9, 0xC1, 0x77, 0x47,  // ......wG
                                /* 1528 */  0x9F, 0x1E, 0xE0, 0x86, 0x3A, 0x3D, 0x80, 0x42,  // ....:=.B
                                /* 1530 */  0xDC, 0x25, 0x1D, 0x44, 0xA7, 0x0E, 0x1F, 0x1C,  // .%.D....
                                /* 1538 */  0xC0, 0xFF, 0xFF, 0x3F, 0xCC, 0x00, 0x36, 0xC6,  // ...?..6.
                                /* 1540 */  0xEB, 0xC3, 0x0C, 0x70, 0x1C, 0x3F, 0x43, 0x7D,  // ...p.?C}
                                /* 1548 */  0x4C, 0x7B, 0xD2, 0x37, 0x70, 0xAC, 0x27, 0x5A,  // L{.7p.'Z
                                /* 1550 */  0x2C, 0xCE, 0x43, 0x98, 0x31, 0x5E, 0x1A, 0x38,  // ,.C.1^.8
                                /* 1558 */  0x81, 0x6F, 0xB5, 0x78, 0xC9, 0x17, 0x48, 0x04,  // .o.x..H.
                                /* 1560 */  0xE4, 0x59, 0xB1, 0x39, 0x3D, 0xFD, 0xFB, 0x86,  // .Y.9=...
                                /* 1568 */  0x73, 0x66, 0x0C, 0xEE, 0x14, 0x2A, 0x3E, 0x4E,  // sf...*>N
                                /* 1570 */  0xE0, 0x8E, 0x10, 0xA8, 0x13, 0x84, 0x45, 0x1D,  // ......E.
                                /* 1578 */  0x21, 0x50, 0x32, 0xE0, 0x28, 0x88, 0x8F, 0x10,  // !P2.(...
                                /* 1580 */  0x3E, 0x5D, 0xF9, 0x08, 0x01, 0x37, 0xD2, 0x0D,  // >]...7..
                                /* 1588 */  0x12, 0x14, 0xD7, 0x51, 0x8F, 0x1B, 0x0C, 0xFF,  // ...Q....
                                /* 1590 */  0x7F, 0x82, 0xB7, 0x80, 0x07, 0x1F, 0xCC, 0x09,  // ........
                                /* 1598 */  0x02, 0x70, 0x72, 0x24, 0xF2, 0x09, 0x02, 0x5C,  // .pr$...\
                                /* 15A0 */  0xE6, 0x4E, 0x10, 0xA0, 0x93, 0x7F, 0x73, 0x04,  // .N....s.
                                /* 15A8 */  0xDD, 0x09, 0x82, 0x23, 0x3E, 0x28, 0x84, 0x7C,  // ...#>(.|
                                /* 15B0 */  0x92, 0xF1, 0x20, 0x0C, 0xF4, 0x08, 0xC0, 0xCF,  // .. .....
                                /* 15B8 */  0x0F, 0xFC, 0xD6, 0x00, 0xEB, 0x72, 0x82, 0x3B,  // .....r.;
                                /* 15C0 */  0x45, 0xC0, 0x3A, 0x5B, 0xB0, 0x53, 0x04, 0xF0,  // E.:[.S..
                                /* 15C8 */  0xFC, 0xFF, 0x9F, 0x22, 0xC0, 0x70, 0xAE, 0xC1,  // ...".p..
                                /* 15D0 */  0x9D, 0x22, 0x00, 0xEF, 0xEA, 0x4E, 0x11, 0x40,  // ."...N.@
                                /* 15D8 */  0xEB, 0x58, 0x83, 0x3F, 0x45, 0x00, 0x07, 0xB1,  // .X.?E...
                                /* 15E0 */  0xA7, 0x08, 0x94, 0x3C, 0x08, 0x89, 0x3F, 0x45,  // ...<..?E
                                /* 15E8 */  0x20, 0xCE, 0xAD, 0xAF, 0x0A, 0xC7, 0x11, 0xF4,  //  .......
                                /* 15F0 */  0x6D, 0x27, 0x88, 0x91, 0xCE, 0xC1, 0xFF, 0xFF,  // m'......
                                /* 15F8 */  0xBB, 0x60, 0xF4, 0xB7, 0x08, 0xCF, 0x2A, 0xC2,  // .`....*.
                                /* 1600 */  0xBB, 0xA0, 0x31, 0x1F, 0x6F, 0x9F, 0xFF, 0x3C,  // ..1.o..<
                                /* 1608 */  0xB7, 0x23, 0xE3, 0x07, 0x2E, 0xC0, 0xCB, 0x9D,  // .#......
                                /* 1610 */  0xF1, 0xD0, 0xB0, 0x07, 0x2E, 0xC0, 0xA1, 0xBB,  // ........
                                /* 1618 */  0x03, 0x17, 0xD0, 0x1B, 0xCB, 0x0B, 0x03, 0x16,  // ........
                                /* 1620 */  0xE9, 0xFF, 0xFF, 0x18, 0xE1, 0x13, 0x83, 0x0F,  // ........
                                /* 1628 */  0x5C, 0xBE, 0x31, 0xE0, 0xEE, 0xA2, 0x3E, 0x08,  // \.1...>.
                                /* 1630 */  0x60, 0x0F, 0xA3, 0x78, 0xC1, 0xC7, 0x08, 0xC4,  // `..x....
                                /* 1638 */  0xAC, 0x63, 0x87, 0xAF, 0x71, 0x12, 0xC4, 0xF8,  // .c..q...
                                /* 1640 */  0xC1, 0x94, 0x00, 0x1F, 0x51, 0xF3, 0x47, 0x00,  // ....Q.G.
                                /* 1648 */  0x9F, 0x1F, 0x50, 0xD2, 0x28, 0x74, 0x80, 0xF0,  // ..P.(t..
                                /* 1650 */  0xF9, 0x81, 0x4B, 0x81, 0xA3, 0x20, 0xBE, 0x6D,  // ..K.. .m
                                /* 1658 */  0xC3, 0x39, 0x3F, 0xE0, 0x63, 0x9D, 0x1F, 0x40,  // .9?.c..@
                                /* 1660 */  0x71, 0xD8, 0xF0, 0xA0, 0xC1, 0x31, 0xD9, 0x63,  // q....1.c
                                /* 1668 */  0x83, 0x71, 0x80, 0x00, 0x9C, 0x9C, 0x8E, 0x7C,  // .q.....|
                                /* 1670 */  0x80, 0x00, 0xD7, 0x80, 0x7D, 0x80, 0x00, 0x17,  // ....}...
                                /* 1678 */  0xC8, 0xFF, 0xFF, 0x01, 0x02, 0x6C, 0x57, 0x05,  // .....lW.
                                /* 1680 */  0x76, 0xB4, 0xF1, 0xB5, 0x98, 0x4F, 0xFB, 0xCD,  // v....O..
                                /* 1688 */  0xC6, 0x17, 0x83, 0xE7, 0xFA, 0x37, 0x64, 0xDF,  // .....7d.
                                /* 1690 */  0x02, 0x60, 0x10, 0x94, 0x7B, 0x7C, 0x40, 0x1D,  // .`..{|@.
                                /* 1698 */  0x01, 0x7C, 0xA8, 0xC1, 0x8C, 0xF9, 0xDD, 0xD4,  // .|......
                                /* 16A0 */  0xD0, 0x61, 0xDF, 0x28, 0x7C, 0xC7, 0x39, 0xE7,  // .a.(|.9.
                                /* 16A8 */  0x30, 0x0F, 0xCC, 0xC6, 0x39, 0x37, 0x8F, 0xE5,  // 0...97..
                                /* 16B0 */  0x35, 0xC1, 0x83, 0xF3, 0x81, 0x9D, 0x1D, 0x21,  // 5......!
                                /* 16B8 */  0xF8, 0xA1, 0xC6, 0xC7, 0x2D, 0x1F, 0x21, 0xB8,  // ....-.!.
                                /* 16C0 */  0x1C, 0x38, 0x0A, 0xE2, 0x23, 0x84, 0xA3, 0x1E,  // .8..#...
                                /* 16C8 */  0x21, 0xA0, 0x9F, 0x6E, 0x7D, 0x84, 0x80, 0x7F,  // !..n}...
                                /* 16D0 */  0x5D, 0xF0, 0xB0, 0xC1, 0x01, 0x73, 0x72, 0xB8,  // ]....sr.
                                /* 16D8 */  0x61, 0xB3, 0xD1, 0xF1, 0x43, 0x04, 0xE0, 0x24,  // a...C..$
                                /* 16E0 */  0xE8, 0x21, 0x02, 0xC2, 0xFF, 0xFF, 0x10, 0x01,  // .!......
                                /* 16E8 */  0xDB, 0xDE, 0x21, 0x02, 0x74, 0x60, 0x0F, 0x11,  // ..!.t`..
                                /* 16F0 */  0x60, 0x1B, 0x59, 0xA0, 0xC7, 0x02, 0x5F, 0x8C,  // `.Y..._.
                                /* 16F8 */  0x3D, 0x7E, 0xCC, 0x8D, 0x9D, 0x1F, 0x1C, 0xF0,  // =~......
                                /* 1700 */  0x48, 0x2F, 0x0E, 0xD8, 0x63, 0x83, 0xCE, 0xC8,  // H/..c...
                                /* 1708 */  0x68, 0xD1, 0x27, 0x06, 0x0D, 0xEC, 0x64, 0x4E,  // h.'...dN
                                /* 1710 */  0xF8, 0xB4, 0x1F, 0x6A, 0x9E, 0x53, 0x8D, 0xF1,  // ...j.S..
                                /* 1718 */  0x6A, 0xE1, 0xC3, 0xAA, 0x09, 0x2C, 0xF3, 0x08,  // j....,..
                                /* 1720 */  0x81, 0x3A, 0xD7, 0xF8, 0x0C, 0xE1, 0x23, 0x04,  // .:....#.
                                /* 1728 */  0x17, 0x04, 0x47, 0x41, 0x7C, 0x84, 0x70, 0xD8,  // ..GA|.p.
                                /* 1730 */  0x23, 0x04, 0xF4, 0x70, 0x47, 0x08, 0x50, 0x5C,  // #..pG.P\
                                /* 1738 */  0xC6, 0x0E, 0x1A, 0x2C, 0x83, 0xF3, 0x84, 0x7D,  // ...,...}
                                /* 1740 */  0x63, 0x33, 0x46, 0xD7, 0x17, 0x7E, 0xC4, 0x14,  // c3F..~..
                                /* 1748 */  0x0E, 0xF5, 0x19, 0x02, 0xD8, 0xFD, 0xFF, 0xCF,  // ........
                                /* 1750 */  0x59, 0xC0, 0x54, 0xDF, 0x39, 0x0B, 0x68, 0x0D,  // Y.T.9.h.
                                /* 1758 */  0xEF, 0xEC, 0x31, 0x47, 0x40, 0x3E, 0xBB, 0x33,  // ..1G@>.3
                                /* 1760 */  0x78, 0x33, 0x88, 0xE9, 0x13, 0x96, 0xC1, 0x7C,  // x3.....|
                                /* 1768 */  0xA6, 0x89, 0x13, 0xCD, 0xE7, 0x07, 0x5F, 0x24,  // ......_$
                                /* 1770 */  0x7C, 0xDA, 0x32, 0x9A, 0xAF, 0x0D, 0x4C, 0xD8,  // |.2...L.
                                /* 1778 */  0x11, 0x02, 0x25, 0xE9, 0x08, 0x81, 0xBA, 0xF6,  // ..%.....
                                /* 1780 */  0x61, 0x91, 0x1E, 0x2F, 0xCE, 0xFA, 0x21, 0xE0,  // a../..!.
                                /* 1788 */  0x5D, 0x10, 0x23, 0xF1, 0x10, 0x81, 0x3A, 0xD5,  // ].#...:.
                                /* 1790 */  0xF8, 0xA4, 0xE5, 0x43, 0x04, 0x17, 0x03, 0x47,  // ...C...G
                                /* 1798 */  0x41, 0x7C, 0x88, 0xF0, 0x79, 0xC4, 0x87, 0x08,  // A|..y...
                                /* 17A0 */  0xB8, 0xC1, 0x0E, 0x11, 0xA0, 0x38, 0x1F, 0xE0,  // .....8..
                                /* 17A8 */  0x46, 0x0D, 0x77, 0x6A, 0xFC, 0x02, 0x89, 0xC1,  // F.wj....
                                /* 17B0 */  0x7C, 0x26, 0x85, 0xF5, 0xFF, 0x3F, 0x42, 0x00,  // |&...?B.
                                /* 17B8 */  0x06, 0x0E, 0x45, 0x3E, 0x42, 0x80, 0xCB, 0xDF,  // ..E>B...
                                /* 17C0 */  0x11, 0x02, 0x74, 0xA3, 0x39, 0x7A, 0xF0, 0x1C,  // ..t.9z..
                                /* 17C8 */  0xD7, 0x7D, 0xE3, 0xC3, 0x5F, 0x01, 0x60, 0x1C,  // .}.._.`.
                                /* 17D0 */  0x43, 0xC9, 0xE1, 0x01, 0x2D, 0xFD, 0x78, 0x8C,  // C...-.x.
                                /* 17D8 */  0x3A, 0x39, 0x60, 0xC7, 0xFA, 0x16, 0x8F, 0x21,  // :9`....!
                                /* 17E0 */  0x28, 0xF4, 0xF0, 0x80, 0x3A, 0x3F, 0xF8, 0x44,  // (...:?.D
                                /* 17E8 */  0xE3, 0xC3, 0x03, 0x97, 0x04, 0x47, 0x41, 0x7C,  // .....GA|
                                /* 17F0 */  0x78, 0xF0, 0xC9, 0xD6, 0x87, 0x07, 0xB8, 0xF1,  // x.......
                                /* 17F8 */  0x0E, 0x0F, 0xA0, 0xB8, 0x12, 0x1C, 0x2F, 0xFC,  // ....../.
                                /* 1800 */  0xFF, 0xFF, 0xE1, 0x01, 0x3F, 0x3C, 0x8E, 0x72,  // ....?<.r
                                /* 1808 */  0x7A, 0xD8, 0xF3, 0x03, 0x60, 0x71, 0x38, 0x3E,  // z...`q8>
                                /* 1810 */  0x3F, 0x00, 0xA7, 0x43, 0x16, 0x3F, 0x02, 0x80,  // ?..C.?..
                                /* 1818 */  0x43, 0xE2, 0xD2, 0x74, 0x7E, 0xC0, 0xC5, 0x78,  // C..t~..x
                                /* 1820 */  0x2B, 0xE8, 0x1C, 0xCF, 0xCE, 0x0F, 0xB0, 0x45,  // +......E
                                /* 1828 */  0x83, 0xEA, 0xE0, 0xE0, 0x73, 0x83, 0x4F, 0x81,  // ....s.O.
                                /* 1830 */  0x3E, 0x3A, 0xF8, 0xFC, 0xC0, 0x45, 0x9C, 0x1F,  // >:...E..
                                /* 1838 */  0x28, 0x88, 0x01, 0x9D, 0xF0, 0xFC, 0x80, 0x56,  // (......V
                                /* 1840 */  0x71, 0x2A, 0x47, 0x5E, 0xD5, 0xF9, 0x24, 0xFD,  // q*G^..$.
                                /* 1848 */  0xFF, 0x9F, 0x32, 0xD7, 0x00, 0xA1, 0x9B, 0x98,  // ..2.....
                                /* 1850 */  0x81, 0x7D, 0x03, 0x05, 0xCF, 0x5C, 0x61, 0x10,  // .}...\a.
                                /* 1858 */  0x54, 0x73, 0x25, 0x40, 0x8D, 0xC2, 0x37, 0x07,  // Ts%@..7.
                                /* 1860 */  0x8C, 0xAE, 0x93, 0x03, 0xC8, 0xEE, 0x4E, 0xBE,  // ......N.
                                /* 1868 */  0x38, 0x80, 0x19, 0x9D, 0x1F, 0x8A, 0x00, 0x0F,  // 8.......
                                /* 1870 */  0x77, 0x34, 0x1F, 0x11, 0x7C, 0xC6, 0xF3, 0x55,  // w4..|..U
                                /* 1878 */  0x8F, 0xCD, 0x9D, 0x9D, 0x42, 0xE0, 0x9D, 0xC5,  // ....B...
                                /* 1880 */  0xC9, 0x29, 0x04, 0x48, 0xFE, 0xFF, 0x4F, 0x21,  // .).H..O!
                                /* 1888 */  0x30, 0xEE, 0x0D, 0x3E, 0x85, 0x80, 0x6B, 0x0A,  // 0..>..k.
                                /* 1890 */  0x4F, 0x21, 0x60, 0x3B, 0x87, 0x82, 0xE7, 0xD4,  // O!`;....
                                /* 1898 */  0xC1, 0x4E, 0x21, 0x70, 0x4E, 0xFA, 0x3A, 0x81,  // .N!pN.:.
                                /* 18A0 */  0xA0, 0xA3, 0x3C, 0x12, 0x34, 0xE6, 0x67, 0x48,  // ..<.4.gH
                                /* 18A8 */  0xE3, 0xBF, 0xA6, 0x3D, 0xAB, 0x1D, 0x45, 0x68,  // ...=..Eh
                                /* 18B0 */  0x76, 0x1E, 0xC1, 0x0B, 0x3F, 0x81, 0xA0, 0x24,  // v...?..$
                                /* 18B8 */  0x53, 0xE8, 0x8C, 0x0F, 0x37, 0xE5, 0xC1, 0x01,  // S...7...
                                /* 18C0 */  0xAD, 0x03, 0x44, 0x33, 0x38, 0x08, 0xDC, 0x1D,  // ..D38...
                                /* 18C8 */  0x9F, 0x1F, 0x41, 0xE0, 0xDD, 0x1B, 0xC0, 0x33,  // ..A....3
                                /* 18D0 */  0x37, 0x7E, 0x9F, 0xF2, 0x40, 0x70, 0x67, 0x10,  // 7~..@pg.
                                /* 18D8 */  0xE0, 0xF8, 0xFF, 0x3F, 0x83, 0x00, 0xEC, 0x1A,  // ...?....
                                /* 18E0 */  0xAE, 0xCF, 0x20, 0xE0, 0x52, 0x78, 0x06, 0x01,  // .. .Rx..
                                /* 18E8 */  0xDD, 0x80, 0x8E, 0x1E, 0x2C, 0xE7, 0x0E, 0xDC,  // ....,...
                                /* 18F0 */  0xE8, 0x1F, 0x26, 0x30, 0x73, 0xFB, 0xFF, 0x3F,  // ..&0s..?
                                /* 18F8 */  0x78, 0x60, 0x65, 0x1D, 0x82, 0xD1, 0xB2, 0x8F,  // x`e.....
                                /* 1900 */  0x9C, 0xF4, 0x24, 0x6A, 0xD0, 0x27, 0x62, 0x8F,  // ..$j.'b.
                                /* 1908 */  0xC7, 0xB3, 0x3F, 0xE3, 0x83, 0x08, 0xF3, 0x90,  // ..?.....
                                /* 1910 */  0x07, 0xB8, 0x39, 0x23, 0xFA, 0x10, 0xEC, 0xD9,  // ..9#....
                                /* 1918 */  0x61, 0x80, 0x0E, 0xEF, 0x29, 0xDA, 0xD3, 0x63,  // a...)..c
                                /* 1920 */  0x87, 0x3C, 0xC0, 0x4A, 0xAC, 0xC3, 0x03, 0xE8,  // .<.J....
                                /* 1928 */  0xCE, 0xB7, 0x3E, 0x3C, 0x80, 0xEB, 0x00, 0x00,  // ..><....
                                /* 1930 */  0xE3, 0xFF, 0x7F, 0x00, 0x00, 0xDF, 0x30, 0x1E,  // ......0.
                                /* 1938 */  0x00, 0xB8, 0xB8, 0xB3, 0x03, 0x6A, 0x0C, 0x16,  // .....j..
                                /* 1940 */  0x7E, 0xE2, 0x44, 0x1C, 0x24, 0xF8, 0x7D, 0xFB,  // ~.D.$.}.
                                /* 1948 */  0xF0, 0x0E, 0x8D, 0x89, 0x3D, 0x3A, 0xA0, 0x4E,  // ....=:.N
                                /* 1950 */  0xE4, 0x16, 0x79, 0x74, 0x40, 0x9D, 0x88, 0x0C,  // ..yt@...
                                /* 1958 */  0x66, 0x10, 0x1F, 0x1D, 0x1C, 0x79, 0x64, 0xA8,  // f....yd.
                                /* 1960 */  0xA3, 0x03, 0x9C, 0x88, 0x47, 0x07, 0x50, 0x1C,  // ....G.P.
                                /* 1968 */  0x0F, 0xC1, 0x77, 0xE9, 0xC0, 0x8C, 0xEE, 0x65,  // ..w....e
                                /* 1970 */  0xDE, 0xA3, 0xEB, 0x1D, 0x84, 0x1C, 0x10, 0x7D,  // .......}
                                /* 1978 */  0x6C, 0xE0, 0x87, 0x07, 0x70, 0x1F, 0x93, 0x3C,  // l...p..<
                                /* 1980 */  0x1E, 0x9F, 0x01, 0x7C, 0xE0, 0x04, 0xEE, 0x93,  // ...|....
                                /* 1988 */  0xF3, 0xE1, 0x01, 0xFB, 0xFF, 0x3F, 0x70, 0x02,  // .....?p.
                                /* 1990 */  0x9B, 0x23, 0x00, 0x2C, 0x88, 0x57, 0x00, 0x5C,  // .#.,.W.\
                                /* 1998 */  0xBC, 0xF7, 0x81, 0x09, 0x24, 0xFE, 0xB0, 0xA0,  // ....$...
                                /* 19A0 */  0x40, 0x30, 0xA8, 0x8B, 0x96, 0x4F, 0x09, 0xF8,  // @0...O..
                                /* 19A8 */  0x21, 0x1E, 0x61, 0xEC, 0x63, 0x62, 0x47, 0x35,  // !.a.cbG5
                                /* 19B0 */  0xC3, 0xF1, 0xD1, 0x7B, 0x0C, 0xCF, 0x38, 0xC7,  // ...{..8.
                                /* 19B8 */  0x73, 0x1E, 0xA7, 0xEA, 0x49, 0x85, 0x64, 0xD2,  // s...I.d.
                                /* 19C0 */  0x06, 0x87, 0x92, 0x72, 0xB0, 0xF1, 0x74, 0x34,  // ...r..t4
                                /* 19C8 */  0xB1, 0xDA, 0x11, 0x75, 0x72, 0x32, 0x4C, 0x02,  // ...ur2L.
                                /* 19D0 */  0x8F, 0x9B, 0xA1, 0x71, 0x68, 0xEC, 0x30, 0x7C,  // ...qh.0|
                                /* 19D8 */  0x71, 0xF1, 0x20, 0x0E, 0xE3, 0xA4, 0x4D, 0xE0,  // q. ...M.
                                /* 19E0 */  0x09, 0x3D, 0x0D, 0x94, 0x7B, 0x51, 0x90, 0x78,  // .=..{Q.x
                                /* 19E8 */  0x54, 0x61, 0x34, 0x07, 0x45, 0x80, 0x0E, 0x1B,  // Ta4.E...
                                /* 19F0 */  0x2C, 0x07, 0x80, 0xB7, 0x00, 0x5F, 0xE7, 0x8D,  // ,...._..
                                /* 19F8 */  0xF6, 0x28, 0xC4, 0xA6, 0xCC, 0xAE, 0x21, 0x38,  // .(....!8
                                /* 1A00 */  0x9C, 0x10, 0x87, 0xF4, 0x3A, 0xC0, 0xFE, 0x20,  // ....:.. 
                                /* 1A08 */  0x3E, 0xEE, 0xE3, 0xCE, 0x1B, 0x86, 0x8C, 0x7D,  // >......}
                                /* 1A10 */  0x80, 0x26, 0xB0, 0xFB, 0x8B, 0x93, 0x34, 0xCE,  // .&....4.
                                /* 1A18 */  0x45, 0x53, 0x7A, 0x9C, 0x09, 0x51, 0x9C, 0x00,  // ESz..Q..
                                /* 1A20 */  0x63, 0x02, 0x6C, 0xDD, 0x1B, 0x74, 0x6C, 0x88,  // c.l..tl.
                                /* 1A28 */  0xF0, 0x4A, 0x13, 0x25, 0x52, 0x6B, 0x13, 0x13,  // .J.%Rk..
                                /* 1A30 */  0x14, 0xC3, 0x88, 0xD2, 0x1B, 0x0A, 0x01, 0x0E,  // ........
                                /* 1A38 */  0x5D, 0x1B, 0xAC, 0xA0, 0x0D, 0xF8, 0x22, 0x11,  // ].....".
                                /* 1A40 */  0x22, 0x52, 0x9C, 0xF6, 0x07, 0x41, 0x44, 0x39,  // "R...AD9
                                /* 1A48 */  0xF8, 0xFF, 0x1F, 0x07, 0xD8, 0x69, 0xD1, 0xA7,  // .....i..
                                /* 1A50 */  0x11, 0xDC, 0x91, 0xC0, 0xC7, 0x81, 0x93, 0x7A,  // .......z
                                /* 1A58 */  0xA8, 0x63, 0x20, 0x07, 0x77, 0x60, 0x0F, 0x3B,  // .c .w`.;
                                /* 1A60 */  0xCF, 0x02, 0x1E, 0x35, 0x3B, 0x8A, 0xF8, 0x30,  // ...5;..0
                                /* 1A68 */  0xE1, 0xC3, 0x01, 0xDE, 0x35, 0xA0, 0x6E, 0x05,  // ....5.n.
                                /* 1A70 */  0xCF, 0x04, 0x6C, 0x8C, 0x86, 0xE3, 0x43, 0xF4,  // ..l...C.
                                /* 1A78 */  0x74, 0x3D, 0x81, 0x43, 0x64, 0x80, 0x3E, 0x7D,  // t=.Cd.>}
                                /* 1A80 */  0x80, 0x4F, 0xFE, 0x20, 0x50, 0x23, 0x33, 0xB4,  // .O. P#3.
                                /* 1A88 */  0xE7, 0x79, 0x5A, 0xEF, 0x02, 0x3E, 0x00, 0x98,  // .yZ..>..
                                /* 1A90 */  0xC0, 0x62, 0xCF, 0x89, 0x74, 0x3C, 0xE0, 0x57,  // .b..t<.W
                                /* 1A98 */  0x7C, 0x40, 0x10, 0xC2, 0x0B, 0x83, 0xE7, 0xEB,  // |@......
                                /* 1AA0 */  0xA3, 0x1E, 0x3B, 0x5F, 0xE1, 0xCE, 0x14, 0x3E,  // ..;_...>
                                /* 1AA8 */  0x27, 0xF0, 0x73, 0x17, 0x0E, 0xFE, 0x15, 0x81,  // '.s.....
                                /* 1AB0 */  0x1F, 0x46, 0x58, 0xE0, 0xB3, 0x0D, 0x15, 0x75,  // .FX....u
                                /* 1AB8 */  0x30, 0x41, 0x1D, 0x2B, 0x7C, 0xA2, 0x60, 0xB7,  // 0A.+|.`.
                                /* 1AC0 */  0x1C, 0x0E, 0xCB, 0x4E, 0x3C, 0x1E, 0x1E, 0x7C,  // ...N<..|
                                /* 1AC8 */  0xC1, 0xC7, 0x09, 0x20, 0xF4, 0xFF, 0x9F, 0x1B,  // ... ....
                                /* 1AD0 */  0x3B, 0x48, 0xF0, 0x61, 0xC3, 0xBF, 0x52, 0x18,  // ;H.a..R.
                                /* 1AD8 */  0xD8, 0xC7, 0x2D, 0x7E, 0xE4, 0xC0, 0x1D, 0x71,  // ..-~...q
                                /* 1AE0 */  0xE0, 0xA1, 0x44, 0x7F, 0x7E, 0xE8, 0x53, 0x80,  // ..D.~.S.
                                /* 1AE8 */  0x56, 0x08, 0xA1, 0x3D, 0xB8, 0xBC, 0xE3, 0x30,  // V..=...0
                                /* 1AF0 */  0xB5, 0x38, 0xC2, 0x0A, 0x12, 0xE9, 0x31, 0xC7,  // .8....1.
                                /* 1AF8 */  0x48, 0x07, 0x12, 0x25, 0x48, 0xC8, 0xB0, 0xBE,  // H..%H...
                                /* 1B00 */  0xCD, 0xF8, 0xE4, 0xA4, 0xB1, 0xA2, 0xC7, 0xC1,  // ........
                                /* 1B08 */  0x01, 0x4F, 0x80, 0x8D, 0xE3, 0xBD, 0xC7, 0x53,  // .O.....S
                                /* 1B10 */  0x39, 0x2C, 0x9F, 0x51, 0x7C, 0xD1, 0xF3, 0xA0,  // 9,.Q|...
                                /* 1B18 */  0x1E, 0x55, 0x7C, 0xD3, 0x3B, 0xD2, 0x53, 0x7B,  // .U|.;.S{
                                /* 1B20 */  0x3F, 0x78, 0xB3, 0xF0, 0x61, 0x16, 0x7B, 0xB8,  // ?x..a.{.
                                /* 1B28 */  0xF0, 0x10, 0xF8, 0x00, 0x1E, 0x6D, 0xCE, 0xD2,  // .....m..
                                /* 1B30 */  0xA7, 0xA0, 0x73, 0xC3, 0x9D, 0x66, 0xF8, 0x15,  // ..s..f..
                                /* 1B38 */  0x01, 0x73, 0x18, 0xC2, 0xC5, 0x3D, 0xDC, 0xD0,  // .s...=..
                                /* 1B40 */  0x00, 0x6F, 0x03, 0x05, 0x84, 0x41, 0x9D, 0x6F,  // .o...A.o
                                /* 1B48 */  0x00, 0x57, 0x57, 0x05, 0x1F, 0x03, 0x30, 0xFF,  // .WW...0.
                                /* 1B50 */  0xFF, 0x53, 0x12, 0x5C, 0x9C, 0x37, 0x80, 0x37,  // .S.\.7.7
                                /* 1B58 */  0x87, 0x27, 0x1C, 0xE0, 0x8C, 0xF6, 0x84, 0x03,  // .'......
                                /* 1B60 */  0x26, 0x81, 0x27, 0x1C, 0x80, 0x26, 0xA2, 0x4E,  // &.'..&.N
                                /* 1B68 */  0x38, 0xE8, 0x23, 0x9B, 0x4F, 0x0A, 0xFF, 0xFF,  // 8.#.O...
                                /* 1B70 */  0x27, 0x05, 0x5F, 0x71, 0xC0, 0x41, 0x30, 0xF4,  // '._q.A0.
                                /* 1B78 */  0x19, 0x07, 0xE8, 0x8C, 0xE5, 0x91, 0x02, 0xD8,  // ........
                                /* 1B80 */  0x9D, 0x72, 0xC0, 0x7B, 0xF0, 0xC0, 0x9D, 0x72,  // .r.{...r
                                /* 1B88 */  0xC0, 0x7B, 0xE3, 0x63, 0xE7, 0x1C, 0xC0, 0xD1,  // .{.c....
                                /* 1B90 */  0xFF, 0x7F, 0x00, 0x98, 0x28, 0x87, 0x1C, 0x2A,  // ....(..*
                                /* 1B98 */  0xFD, 0x7D, 0x20, 0xF1, 0x30, 0xA8, 0x73, 0x0E,  // .} .0.s.
                                /* 1BA0 */  0xE0, 0xEA, 0xFC, 0xE1, 0x53, 0x04, 0x38, 0x8E,  // ....S.8.
                                /* 1BA8 */  0x06, 0x87, 0xFD, 0xEC, 0xF0, 0xE2, 0xF1, 0xF2,  // ........
                                /* 1BB0 */  0x6A, 0x84, 0x50, 0xC6, 0x09, 0xF8, 0x10, 0x61,  // j.P....a
                                /* 1BB8 */  0xDC, 0x08, 0xEF, 0xBA, 0xEC, 0x0A, 0x81, 0x39,  // .......9
                                /* 1BC0 */  0xE4, 0xC0, 0x9F, 0xC9, 0x01, 0xBD, 0xD7, 0xBC,  // ........
                                /* 1BC8 */  0x3F, 0x1C, 0x51, 0x10, 0x5F, 0x6D, 0x5E, 0x6E,  // ?.Q._m^n
                                /* 1BD0 */  0x5E, 0x6F, 0xE2, 0xBC, 0xE8, 0xF8, 0x90, 0xC3,  // ^o......
                                /* 1BD8 */  0x8E, 0x38, 0x46, 0x89, 0x17, 0xC1, 0x58, 0xA1,  // .8F...X.
                                /* 1BE0 */  0x7C, 0xBE, 0x79, 0x97, 0x88, 0xF5, 0xB4, 0x63,  // |.y....c
                                /* 1BE8 */  0x94, 0x70, 0x31, 0x82, 0x05, 0x09, 0xFA, 0x90,  // .p1.....
                                /* 1BF0 */  0xC3, 0x24, 0x1C, 0x72, 0x80, 0xEC, 0xFF, 0xFF,  // .$.r....
                                /* 1BF8 */  0x90, 0x03, 0x98, 0x0B, 0x7F, 0x88, 0x47, 0x0F,  // ......G.
                                /* 1C00 */  0xD7, 0xC7, 0x04, 0x1F, 0x08, 0xDE, 0x12, 0x30,  // .......0
                                /* 1C08 */  0xA7, 0x91, 0x87, 0x07, 0x03, 0x9D, 0x92, 0x43,  // .......C
                                /* 1C10 */  0x1E, 0x70, 0x80, 0xCE, 0x09, 0x05, 0x7F, 0x96,  // .p......
                                /* 1C18 */  0x00, 0xD7, 0x39, 0x02, 0x77, 0xB0, 0x01, 0xDF,  // ..9.w...
                                /* 1C20 */  0x49, 0x03, 0x77, 0xB0, 0x01, 0xEF, 0xA8, 0x7C,  // I.w....|
                                /* 1C28 */  0xAA, 0x61, 0xFF, 0xFF, 0x53, 0x0D, 0x60, 0x27,  // .a..S.`'
                                /* 1C30 */  0xDA, 0x91, 0x06, 0x15, 0xE6, 0x54, 0x03, 0xE8,  // .....T..
                                /* 1C38 */  0xBD, 0xE4, 0xBD, 0xA5, 0xB0, 0x9B, 0x06, 0x3B,  // .......;
                                /* 1C40 */  0x89, 0xB0, 0xAB, 0xC3, 0x73, 0x40, 0x14, 0x43,  // ....s@.C
                                /* 1C48 */  0x44, 0x7E, 0xD3, 0x7A, 0xAA, 0x01, 0xD7, 0x8D,  // D~.z....
                                /* 1C50 */  0xE3, 0x4D, 0xE0, 0xF9, 0xEF, 0xE5, 0xE1, 0x51,  // .M.....Q
                                /* 1C58 */  0xE0, 0x94, 0x5E, 0x1F, 0x9E, 0x63, 0xDE, 0x66,  // ..^..c.f
                                /* 1C60 */  0x9E, 0x65, 0x0C, 0xF5, 0x2E, 0xE8, 0x1B, 0xA0,  // .e......
                                /* 1C68 */  0xE1, 0x42, 0x19, 0xF3, 0xFF, 0x1F, 0x2E, 0xD8,  // .B......
                                /* 1C70 */  0xBB, 0xA0, 0x67, 0x15, 0x2F, 0xCE, 0x3B, 0x8D,  // ..g./.;.
                                /* 1C78 */  0xD1, 0x02, 0xC6, 0x0E, 0x13, 0x22, 0xE2, 0x09,  // ....."..
                                /* 1C80 */  0x3E, 0xD5, 0x30, 0x49, 0xA7, 0x1A, 0x80, 0x26,  // >.0I...&
                                /* 1C88 */  0x22, 0x4E, 0x82, 0x68, 0x68, 0x5F, 0x01, 0xF1,  // "N.hh_..
                                /* 1C90 */  0x91, 0x8F, 0x34, 0x40, 0xE7, 0x90, 0x0A, 0x9E,  // ..4@....
                                /* 1C98 */  0x83, 0x04, 0xAC, 0xFF, 0x3F, 0xD0, 0xF9, 0xF1,  // ....?...
                                /* 1CA0 */  0xB3, 0x04, 0xDC, 0x93, 0x0D, 0xF8, 0xCE, 0x89,  // ........
                                /* 1CA8 */  0xB8, 0x93, 0x0D, 0x78, 0x07, 0x17, 0x29, 0x4A,  // ...x..)J
                                /* 1CB0 */  0x68, 0x23, 0x45, 0x88, 0x7B, 0x32, 0x71, 0x62,  // h#E.{2qb
                                /* 1CB8 */  0xBE, 0xDD, 0x60, 0x4F, 0x37, 0x80, 0x93, 0xA8,  // ..`O7...
                                /* 1CC0 */  0xC7, 0x66, 0x54, 0xB8, 0x93, 0x33, 0x20, 0xE8,  // .fT..3 .
                                /* 1CC8 */  0xFF, 0x7F, 0x72, 0x06, 0xBB, 0xCB, 0x23, 0x0A,  // ..r...#.
                                /* 1CD0 */  0x39, 0x3B, 0x1C, 0xC3, 0x51, 0xF8, 0x96, 0x12,  // 9;..Q...
                                /* 1CD8 */  0xE5, 0x95, 0x85, 0xDD, 0x4B, 0x8D, 0xF2, 0x5C,  // ....K..\
                                /* 1CE0 */  0x0A, 0x93, 0xC0, 0x07, 0x1C, 0xD8, 0xA7, 0x3F,  // .......?
                                /* 1CE8 */  0x1F, 0x97, 0x7D, 0x1C, 0x78, 0x09, 0x3C, 0x9F,  // ..}.x.<.
                                /* 1CF0 */  0xB3, 0x7A, 0xC0, 0x31, 0xD0, 0x93, 0x8D, 0x4F,  // .z.1...O
                                /* 1CF8 */  0x81, 0xEC, 0x2C, 0xE8, 0x6B, 0xB3, 0x0F, 0x13,  // ..,.k...
                                /* 1D00 */  0xC1, 0x9E, 0x9C, 0x0D, 0x1C, 0x35, 0xE8, 0x03,  // .....5..
                                /* 1D08 */  0x45, 0x8C, 0x37, 0x67, 0x63, 0x46, 0x88, 0x61,  // E.7gcF.a
                                /* 1D10 */  0xAC, 0x07, 0x1C, 0x26, 0xEE, 0x80, 0x03, 0x10,  // ...&....
                                /* 1D18 */  0xE3, 0xFF, 0x7F, 0xC0, 0xC1, 0x4A, 0x39, 0xE0,  // .....J9.
                                /* 1D20 */  0xA0, 0x87, 0xEB, 0x93, 0x02, 0xBB, 0x3D, 0xB0,  // ......=.
                                /* 1D28 */  0xE1, 0x3E, 0x3B, 0x3C, 0x28, 0xB0, 0x21, 0xB1,  // .>;<(.!.
                                /* 1D30 */  0x33, 0x0E, 0xF0, 0x3E, 0x4E, 0x80, 0xFB, 0x8C,  // 3..>N...
                                /* 1D38 */  0x03, 0xBE, 0xE1, 0x3C, 0xE3, 0x00, 0x83, 0xC1,  // ...<....
                                /* 1D40 */  0xC5, 0x38, 0x90, 0x98, 0x8F, 0x83, 0x86, 0x79,  // .8.....y
                                /* 1D48 */  0x8C, 0xF1, 0x60, 0x42, 0x86, 0x78, 0x8F, 0x89,  // ..`B.x..
                                /* 1D50 */  0xF2, 0x48, 0x08, 0xEC, 0xFF, 0xFF, 0xA7, 0x1C,  // .H......
                                /* 1D58 */  0xB0, 0x84, 0xB2, 0x00, 0xC2, 0xE4, 0xBF, 0x10,  // ........
                                /* 1D60 */  0x14, 0x03, 0x06, 0x75, 0xCA, 0x01, 0x5C, 0x09,  // ...u..\.
                                /* 1D68 */  0x3E, 0x47, 0x80, 0x06, 0xFD, 0x58, 0x4E, 0x21,  // >G...XN!
                                /* 1D70 */  0x56, 0xA4, 0xD7, 0x87, 0xA7, 0x2F, 0x06, 0x12,  // V..../..
                                /* 1D78 */  0x29, 0xDC, 0x39, 0xF9, 0x1A, 0x01, 0xF7, 0xE4,  // ).9.....
                                /* 1D80 */  0x0C, 0xFF, 0x10, 0xE1, 0x31, 0x85, 0x78, 0xB0,  // ....1.x.
                                /* 1D88 */  0x39, 0xA8, 0x37, 0x81, 0x97, 0x9B, 0x20, 0xE7,  // 9.7... .
                                /* 1D90 */  0xF1, 0x94, 0xE3, 0x43, 0x8E, 0xCF, 0xCC, 0x3E,  // ...C...>
                                /* 1D98 */  0xE4, 0x18, 0xEA, 0x5D, 0x27, 0xD6, 0xBB, 0x8E,  // ...]'...
                                /* 1DA0 */  0x41, 0x42, 0x45, 0x78, 0x2B, 0xF4, 0xD5, 0xD9,  // ABEx+...
                                /* 1DA8 */  0x27, 0x68, 0xDF, 0x71, 0x62, 0x84, 0x7B, 0xC8,  // 'h.qb.{.
                                /* 1DB0 */  0x61, 0x42, 0x5E, 0x23, 0xF2, 0x70, 0xC8, 0x01,  // aB^#.p..
                                /* 1DB8 */  0x12, 0xFF, 0xFF, 0x43, 0x0E, 0x60, 0xF7, 0x35,  // ...C.`.5
                                /* 1DC0 */  0xE3, 0x43, 0x0E, 0x6E, 0x14, 0x3E, 0x23, 0x70,  // .C.n.>#p
                                /* 1DC8 */  0x02, 0x07, 0x3E, 0xE0, 0x00, 0x9D, 0x93, 0x04,  // ..>.....
                                /* 1DD0 */  0xB8, 0x87, 0xF8, 0x24, 0x01, 0x86, 0xF3, 0x0D,  // ...$....
                                /* 1DD8 */  0xF8, 0x62, 0x9F, 0xBC, 0xD1, 0xD0, 0x9E, 0x83,  // .b......
                                /* 1DE0 */  0xA7, 0x73, 0x56, 0xC7, 0xC4, 0xFE, 0xFF, 0xC7,  // .sV.....
                                /* 1DE8 */  0x6E, 0xB0, 0x9D, 0x0C, 0xC0, 0x71, 0xEC, 0x06,  // n....q..
                                /* 1DF0 */  0xCF, 0x90, 0xB0, 0xB3, 0x88, 0xF1, 0x80, 0x73,  // .......s
                                /* 1DF8 */  0xCE, 0x3E, 0x5C, 0x74, 0x25, 0xC0, 0xE8, 0xD1,  // .>\t%...
                                /* 1E00 */  0x08, 0x68, 0x43, 0x06, 0x0A, 0xF5, 0xDA, 0x73,  // .hC....s
                                /* 1E08 */  0x26, 0x0F, 0x94, 0x18, 0xA4, 0x78, 0x47, 0x18,  // &....xG.
                                /* 1E10 */  0xCF, 0x47, 0x23, 0xC0, 0x50, 0xE0, 0xC3, 0x24,  // .G#.P..$
                                /* 1E18 */  0x8D, 0xF1, 0xB6, 0x50, 0x44, 0x18, 0xD4, 0xD1,  // ...PD...
                                /* 1E20 */  0x08, 0xE6, 0xFF, 0xFF, 0x68, 0x04, 0x18, 0x39,  // ....h..9
                                /* 1E28 */  0x22, 0xE0, 0x4E, 0x20, 0xE0, 0x03, 0x0D, 0x1B,  // ".N ....
                                /* 1E30 */  0x28, 0xA4, 0xEF, 0xB9, 0xEC, 0x78, 0x04, 0x1C,  // (....x..
                                /* 1E38 */  0x2F, 0xE1, 0x3E, 0x1E, 0x81, 0xE7, 0x48, 0x09,  // /.>...H.
                                /* 1E40 */  0x18, 0xF9, 0xFF, 0x1F, 0x8F, 0x00, 0x2B, 0x42,  // ......+B
                                /* 1E48 */  0x8E, 0x47, 0xD0, 0x83, 0x1F, 0x8F, 0x80, 0xCE,  // .G......
                                /* 1E50 */  0x69, 0x02, 0xDC, 0x50, 0x4F, 0x13, 0x60, 0x3C,  // i..PO.`<
                                /* 1E58 */  0xE7, 0x80, 0x0F, 0xDA, 0xE7, 0x1C, 0xE0, 0x04,  // ........
                                /* 1E60 */  0xF5, 0xFF, 0x8F, 0x16, 0x28, 0xC2, 0x73, 0x38,  // ....(.s8
                                /* 1E68 */  0xE0, 0x29, 0xE8, 0x29, 0x87, 0x46, 0x78, 0x25,  // .).).Fx%
                                /* 1E70 */  0x28, 0x1A, 0x0C, 0xEA, 0xA0, 0x03, 0xB8, 0x3A,  // (......:
                                /* 1E78 */  0xF7, 0xE3, 0xCE, 0x12, 0x70, 0x67, 0xF2, 0x7A,  // ....pg.z
                                /* 1E80 */  0x70, 0x30, 0x07, 0xEE, 0xF3, 0xC3, 0x89, 0xBF,  // p0......
                                /* 1E88 */  0x13, 0x3C, 0x1F, 0xF8, 0x64, 0x10, 0xE8, 0xD5,  // .<..d...
                                /* 1E90 */  0xCD, 0x97, 0x2A, 0x06, 0xE6, 0x8B, 0x04, 0xEE,  // ..*.....
                                /* 1E98 */  0x60, 0x85, 0x3D, 0xE6, 0x80, 0xE5, 0xFF, 0x7F,  // `.=.....
                                /* 1EA0 */  0xA8, 0x04, 0xCF, 0x49, 0xFC, 0x31, 0x07, 0xAE,  // ...I.1..
                                /* 1EA8 */  0xB0, 0x63, 0x0E, 0x40, 0x13, 0x11, 0xC7, 0x1C,  // .c.@....
                                /* 1EB0 */  0xE8, 0xA1, 0x8F, 0x39, 0x40, 0xE7, 0x2C, 0x01,  // ...9@.,.
                                /* 1EB8 */  0x86, 0xFF, 0xFF, 0x59, 0x02, 0x58, 0x1C, 0x72,  // ...Y.X.r
                                /* 1EC0 */  0x80, 0xF3, 0xE8, 0x30, 0xE0, 0x1E, 0x1D, 0xE6,  // ...0....
                                /* 1EC8 */  0x72, 0x08, 0xEF, 0x90, 0x03, 0x38, 0x09, 0x7F,  // r....8..
                                /* 1ED0 */  0xC2, 0xA1, 0xA1, 0xDE, 0x08, 0x8A, 0x0B, 0x83,  // ........
                                /* 1ED8 */  0x3A, 0xE4, 0x00, 0xD3, 0xFF, 0xFF, 0x21, 0x07,  // :.....!.
                                /* 1EE0 */  0x18, 0xC4, 0x38, 0x49, 0x80, 0xE6, 0xEC, 0x12,  // ..8I....
                                /* 1EE8 */  0xE3, 0x35, 0xF5, 0x00, 0x42, 0x1D, 0xC4, 0x23,  // .5..B..#
                                /* 1EF0 */  0x8B, 0x0F, 0x5E, 0x1E, 0xC6, 0xC1, 0xF9, 0xAE,  // ..^.....
                                /* 1EF8 */  0xF2, 0xDE, 0x85, 0x93, 0x85, 0x23, 0x30, 0x1F,  // .....#0.
                                /* 1F00 */  0x25, 0x1E, 0x26, 0x1E, 0xC5, 0x0C, 0x7C, 0x5E,  // %.&...|^
                                /* 1F08 */  0x3E, 0x11, 0x44, 0x3A, 0x23, 0xDF, 0xC2, 0xE0,  // >.D:#...
                                /* 1F10 */  0x9E, 0x76, 0x80, 0x0F, 0xCA, 0xD3, 0x0E, 0x5C,  // .v.....\
                                /* 1F18 */  0x69, 0xA7, 0x1D, 0x40, 0xE2, 0xFF, 0xFF, 0xB4,  // i..@....
                                /* 1F20 */  0x03, 0x0C, 0x25, 0x9C, 0x76, 0xD0, 0xD0, 0xBE,  // ..%.v...
                                /* 1F28 */  0x73, 0x60, 0xCE, 0x38, 0xEC, 0x48, 0x0E, 0xBC,  // s`.8.H..
                                /* 1F30 */  0x0F, 0x1A, 0x8F, 0x12, 0x60, 0x3D, 0xEC, 0x80,  // ....`=..
                                /* 1F38 */  0xEF, 0x40, 0xE0, 0xC3, 0x0E, 0xF8, 0x01, 0x8F,  // .@......
                                /* 1F40 */  0x24, 0xD6, 0x1B, 0xCE, 0x03, 0xA2, 0x67, 0xF2,  // $.....g.
                                /* 1F48 */  0x26, 0x13, 0xEC, 0x95, 0x22, 0x52, 0x6C, 0x1F,  // &..."Rl.
                                /* 1F50 */  0x78, 0xF8, 0x09, 0xD1, 0x47, 0x6B, 0xF0, 0xFD,  // x...Gk..
                                /* 1F58 */  0xFF, 0x8F, 0x3B, 0xC0, 0x3A, 0xE0, 0xB9, 0x1A,  // ..;.:...
                                /* 1F60 */  0x15, 0xE9, 0x68, 0x0D, 0xE8, 0xBD, 0x11, 0x3C,  // ..h....<
                                /* 1F68 */  0x42, 0x1C, 0x8E, 0xAF, 0xAF, 0x1E, 0xC4, 0x4B,  // B......K
                                /* 1F70 */  0x98, 0x0F, 0xAE, 0x7C, 0xF2, 0x6F, 0x17, 0x86,  // ...|.o..
                                /* 1F78 */  0xC2, 0x1E, 0xAD, 0x81, 0xD9, 0x39, 0x07, 0x0B,  // .....9..
                                /* 1F80 */  0xF1, 0x9C, 0xC3, 0xFE, 0xFF, 0xE7, 0x1C, 0x58,  // .......X
                                /* 1F88 */  0x62, 0xCE, 0x39, 0x00, 0x4D, 0xC2, 0x43, 0xE8,  // b.9.M.C.
                                /* 1F90 */  0x90, 0x08, 0x37, 0xEC, 0x31, 0x07, 0xE8, 0x0C,  // ..7.1...
                                /* 1F98 */  0xD1, 0xA7, 0x09, 0x60, 0xF3, 0xFF, 0x1F, 0x1A,  // ...`....
                                /* 1FA0 */  0x3B, 0xE4, 0x80, 0xEF, 0x4C, 0x81, 0x3B, 0xE4,  // ;...L.;.
                                /* 1FA8 */  0x80, 0x77, 0x1E, 0xAF, 0x35, 0x6F, 0x2F, 0xBE,  // .w..5o/.
                                /* 1FB0 */  0x55, 0x1B, 0xF6, 0xED, 0x10, 0xDE, 0x01, 0x07,  // U.......
                                /* 1FB8 */  0xB0, 0x22, 0x52, 0x1E, 0x08, 0x13, 0xFF, 0x3A,  // ."R....:
                                /* 1FC0 */  0xD0, 0x91, 0xCD, 0x30, 0xFC, 0x80, 0x03, 0xB8,  // ...0....
                                /* 1FC8 */  0x02, 0x0A, 0xED, 0xFF, 0xFF, 0xC9, 0x0B, 0x1C,  // ........
                                /* 1FD0 */  0x47, 0x04, 0xDC, 0x59, 0xC0, 0x07, 0x04, 0x5F,  // G..Y..._
                                /* 1FD8 */  0x0E, 0xD8, 0xFD, 0xDD, 0x07, 0x83, 0xC7, 0x03,  // ........
                                /* 1FE0 */  0xDF, 0x11, 0xD9, 0x64, 0x4E, 0x20, 0xC2, 0xB3,  // ...dN ..
                                /* 1FE8 */  0x0D, 0xFC, 0xA1, 0xBC, 0xCA, 0x84, 0x88, 0xF3,  // ........
                                /* 1FF0 */  0x60, 0x10, 0xE1, 0x25, 0x24, 0xC4, 0x3B, 0x4D,  // `..%$.;M
                                /* 1FF8 */  0x9C, 0x47, 0x9A, 0xD7, 0x88, 0x08, 0xCF, 0x36,  // .G.....6
                                /* 2000 */  0x46, 0x8A, 0x10, 0xE8, 0xD9, 0x86, 0x81, 0xBE,  // F.......
                                /* 2008 */  0xDD, 0x78, 0x1A, 0x31, 0x1E, 0xA8, 0x63, 0x45,  // .x.1..cE
                                /* 2010 */  0x0A, 0x71, 0x22, 0xE1, 0x42, 0x46, 0x8A, 0x16,  // .q".BF..
                                /* 2018 */  0xE3, 0xD9, 0x86, 0xC5, 0x3B, 0x0E, 0xE8, 0x24,  // ....;..$
                                /* 2020 */  0xE2, 0xB3, 0x0D, 0xC0, 0x8F, 0xCB, 0xC1, 0xD3,  // ........
                                /* 2028 */  0x09, 0x9C, 0xFF, 0xFF, 0xE9, 0x04, 0xEE, 0x59,  // .......Y
                                /* 2030 */  0x01, 0xDE, 0xA9, 0x04, 0x98, 0x7C, 0x29, 0xAC,  // .....|).
                                /* 2038 */  0x65, 0xAC, 0x5E, 0xAC, 0x6C, 0x2C, 0xD6, 0x67,  // e.^.l,.g
                                /* 2040 */  0x0C, 0x2A, 0xF3, 0x94, 0xA0, 0x09, 0x1C, 0x9E,  // .*......
                                /* 2048 */  0x91, 0xC3, 0xBE, 0xBF, 0x18, 0x24, 0xF2, 0xB3,  // .....$..
                                /* 2050 */  0x89, 0xE1, 0x9F, 0x2B, 0x22, 0x1C, 0xC4, 0x59,  // ...+"..Y
                                /* 2058 */  0x04, 0x62, 0xE7, 0x04, 0x43, 0xC4, 0x7A, 0x9B,  // .b..C.z.
                                /* 2060 */  0xF0, 0x98, 0x04, 0xAE, 0x23, 0x90, 0x21, 0x2C,  // ....#.!,
                                /* 2068 */  0x83, 0x42, 0x87, 0x71, 0x8F, 0xCB, 0x70, 0x8E,  // .B.q..p.
                                /* 2070 */  0x0D, 0x46, 0x41, 0x7C, 0x10, 0xF0, 0xE1, 0xC1,  // .FA|....
                                /* 2078 */  0xE7, 0x23, 0xDC, 0x7E, 0x3C, 0x10, 0xF8, 0xA7,  // .#.~<...
                                /* 2080 */  0x35, 0x9F, 0x1E, 0xE0, 0x00, 0x47, 0x3C, 0x49,  // 5....G<I
                                /* 2088 */  0x4F, 0xC5, 0x70, 0x3E, 0x2B, 0x71, 0x38, 0xDF,  // O.p>+q8.
                                /* 2090 */  0x0A, 0x4E, 0xDE, 0x04, 0xEC, 0x28, 0x04, 0x3E,  // .N...(.>
                                /* 2098 */  0x81, 0xA7, 0x03, 0x50, 0x00, 0xF9, 0x2E, 0xE0,  // ...P....
                                /* 20A0 */  0x03, 0xCE, 0xF3, 0x00, 0x9B, 0xC3, 0x33, 0x8E,  // ......3.
                                /* 20A8 */  0x4F, 0x38, 0xEC, 0x30, 0x88, 0x18, 0x15, 0x3D,  // O8.0...=
                                /* 20B0 */  0x07, 0x1F, 0x17, 0xE6, 0x78, 0xE0, 0x23, 0xCC,  // ....x.#.
                                /* 20B8 */  0xFF, 0xFF, 0x11, 0xC6, 0xD8, 0xEF, 0x01, 0xBE,  // ........
                                /* 20C0 */  0x3C, 0x3D, 0x34, 0xF9, 0x4C, 0x85, 0x81, 0xF5,  // <=4.L...
                                /* 20C8 */  0x48, 0x39, 0xAC, 0xD1, 0xC2, 0x1E, 0xF0, 0x43,  // H9.....C
                                /* 20D0 */  0x84, 0x2F, 0x20, 0x9E, 0x99, 0x4F, 0x28, 0x3E,  // ./ ..O(>
                                /* 20D8 */  0x8C, 0x82, 0xED, 0x88, 0xC0, 0xAE, 0x02, 0xCF,  // ........
                                /* 20E0 */  0x09, 0x18, 0x98, 0xA7, 0x01, 0x2C, 0xD0, 0x13,  // .....,..
                                /* 20E8 */  0x5D, 0xA0, 0x77, 0x13, 0x63, 0xF3, 0xEB, 0x00,  // ].w.c...
                                /* 20F0 */  0x39, 0x38, 0xA0, 0x4E, 0x40, 0x96, 0x75, 0x70,  // 98.N@.up
                                /* 20F8 */  0x80, 0x78, 0x38, 0xC0, 0x1E, 0x18, 0x7C, 0x68,  // .x8...|h
                                /* 2100 */  0xE0, 0xF1, 0x0F, 0x67, 0xF4, 0xD0, 0xC0, 0xE3,  // ...g....
                                /* 2108 */  0x82, 0x51, 0x10, 0x1F, 0x1A, 0x1C, 0xE5, 0xD0,  // .Q......
                                /* 2110 */  0x80, 0x3E, 0x0C, 0xF8, 0xC0, 0x00, 0x18, 0xFE,  // .>......
                                /* 2118 */  0xFF, 0x1F, 0x18, 0x60, 0x0D, 0xDA, 0x07, 0x06,  // ...`....
                                /* 2120 */  0xE0, 0x79, 0x58, 0x80, 0x71, 0x6A, 0xF0, 0x71,  // .yX.qj.q
                                /* 2128 */  0x00, 0x7B, 0x60, 0x80, 0x0F, 0xFC, 0xC0, 0x00,  // .{`.....
                                /* 2130 */  0xEC, 0x6F, 0x07, 0x3E, 0x16, 0xF1, 0x03, 0x03,  // .o.>....
                                /* 2138 */  0x60, 0xEB, 0xFF, 0x7F, 0x60, 0x80, 0x05, 0xCB,  // `...`...
                                /* 2140 */  0x0F, 0x0C, 0xC0, 0xE7, 0x68, 0xC0, 0x0E, 0x0C,  // ....h...
                                /* 2148 */  0x60, 0x14, 0x72, 0x60, 0x40, 0xDD, 0xD8, 0x12,  // `.r`@...
                                /* 2150 */  0x94, 0x77, 0x60, 0x81, 0x76, 0xDC, 0xB3, 0x77,  // .w`.v..w
                                /* 2158 */  0x10, 0x82, 0xEF, 0x99, 0x79, 0x18, 0xCF, 0x68,  // ....y..h
                                /* 2160 */  0xEF, 0x57, 0x3E, 0x6B, 0x62, 0x0E, 0xF5, 0x3E,  // .W>kb..>
                                /* 2168 */  0x35, 0xF0, 0x43, 0x83, 0xA3, 0x9F, 0x1A, 0x50,  // 5.C....P
                                /* 2170 */  0x87, 0x53, 0x83, 0x19, 0xC4, 0xA7, 0x06, 0x07,  // .S......
                                /* 2178 */  0x39, 0xA8, 0x42, 0x3F, 0xB4, 0x00, 0x06, 0xFF,  // 9.B?....
                                /* 2180 */  0xFF, 0x87, 0x06, 0xB0, 0x1C, 0x04, 0x7D, 0x68,  // ......}h
                                /* 2188 */  0x01, 0x9E, 0x27, 0x04, 0x06, 0xE2, 0x13, 0x02,  // ..'.....
                                /* 2190 */  0xEE, 0x70, 0x8B, 0x3D, 0x34, 0xC0, 0x3F, 0xB4,  // .p.=4.?.
                                /* 2198 */  0xF0, 0x43, 0x03, 0xE0, 0xE1, 0xE0, 0x02, 0x98,  // .C......
                                /* 21A0 */  0xF9, 0xFF, 0x1F, 0x1A, 0xC0, 0x6A, 0xE1, 0xE0,  // .....j..
                                /* 21A8 */  0x02, 0x54, 0x0F, 0x0D, 0xE0, 0x08, 0xB4, 0x3A,  // .T.....:
                                /* 21B0 */  0x1D, 0x1A, 0xF8, 0x59, 0xDC, 0x71, 0xDF, 0x06,  // ...Y.q..
                                /* 21B8 */  0x3A, 0xB8, 0xC0, 0x81, 0x3A, 0xB3, 0x10, 0x41,  // :...:..A
                                /* 21C0 */  0x1E, 0x5B, 0x7D, 0xA5, 0x3C, 0x80, 0x04, 0x8E,  // .[}.<...
                                /* 21C8 */  0x06, 0xAB, 0x03, 0x03, 0x0F, 0x05, 0xA3, 0x48,  // .......H
                                /* 21D0 */  0x10, 0x3A, 0x30, 0xF0, 0x10, 0x70, 0x14, 0xC4,  // .:0..p..
                                /* 21D8 */  0xA3, 0xF5, 0x81, 0x01, 0xCE, 0x20, 0x0E, 0xE1,  // ..... ..
                                /* 21E0 */  0x18, 0xDF, 0x4E, 0x7D, 0x68, 0x01, 0xC6, 0x83,  // ..N}h...
                                /* 21E8 */  0x82, 0x89, 0x7C, 0x50, 0x60, 0xF9, 0xFF, 0x0F,  // ..|P`...
                                /* 21F0 */  0x0A, 0xE6, 0x70, 0x3D, 0x28, 0xE0, 0x70, 0x4A,  // ..p=(.pJ
                                /* 21F8 */  0x08, 0x59, 0xFD, 0x81, 0x40, 0x13, 0xF7, 0xA0,  // .Y..@...
                                /* 2200 */  0xC0, 0x7D, 0x20, 0xF1, 0xA0, 0x80, 0xCB, 0xC4,  // .} .....
                                /* 2208 */  0x3D, 0x28, 0x70, 0x43, 0xF9, 0x70, 0x02, 0xBC,  // =(pC.p..
                                /* 2210 */  0x83, 0x1D, 0x4E, 0x40, 0x77, 0xAC, 0xF7, 0xE1,  // ..N@w...
                                /* 2218 */  0x04, 0xD6, 0xFF, 0xFF, 0x70, 0x02, 0x6B, 0x40,  // ....p.k@
                                /* 2220 */  0x0F, 0x48, 0x60, 0x3E, 0x89, 0x30, 0x90, 0x27,  // .H`>.0.'
                                /* 2228 */  0x11, 0xDC, 0xC1, 0x04, 0xFE, 0xE1, 0x88, 0x1F,  // ........
                                /* 2230 */  0x4C, 0x80, 0xF7, 0xC1, 0x08, 0x78, 0x1D, 0x4C,  // L....x.L
                                /* 2238 */  0xC0, 0x3B, 0x28, 0x70, 0x1C, 0x4C, 0x80, 0xC5,  // .;(p.L..
                                /* 2240 */  0xFF, 0xFF, 0x60, 0x02, 0x96, 0x41, 0x81, 0xE3,  // ..`..A..
                                /* 2248 */  0x60, 0x02, 0x5C, 0x07, 0x05, 0x8E, 0x83, 0x09,  // `.\.....
                                /* 2250 */  0xE0, 0xCA, 0xC3, 0xC1, 0x04, 0x68, 0x1D, 0xC2,  // .....h..
                                /* 2258 */  0xE0, 0x1C, 0x4C, 0xB0, 0xFF, 0xFF, 0x93, 0x08,  // ..L.....
                                /* 2260 */  0x0B, 0x77, 0x08, 0x44, 0x89, 0x3C, 0x98, 0xF8,  // .w.D.<..
                                /* 2268 */  0x20, 0x0A, 0x0D, 0x24, 0xD4, 0x39, 0x19, 0xE5,  //  ..$.9..
                                /* 2270 */  0x78, 0x8F, 0xE4, 0x9C, 0x82, 0xBC, 0x9F, 0x06,  // x.......
                                /* 2278 */  0x3D, 0x93, 0x20, 0x27, 0x14, 0xE8, 0x84, 0x0E,  // =. '....
                                /* 2280 */  0xCE, 0x88, 0x2F, 0x82, 0xBE, 0x69, 0x30, 0x02,  // ../..i0.
                                /* 2288 */  0x47, 0x39, 0x08, 0xA2, 0x42, 0x50, 0x28, 0x02,  // G9..BP(.
                                /* 2290 */  0x84, 0x0E, 0x28, 0x5C, 0x34, 0x1C, 0x05, 0xF1,  // ..(\4...
                                /* 2298 */  0xD0, 0x7D, 0x10, 0x03, 0xF8, 0x71, 0xB0, 0x00,  // .}...q..
                                /* 22A0 */  0x1E, 0x21, 0x0F, 0x16, 0x88, 0xFF, 0xFF, 0xC1,  // .!......
                                /* 22A8 */  0x02, 0x2C, 0xE0, 0x3E, 0x58, 0x80, 0x0B, 0xFE,  // .,.>X...
                                /* 22B0 */  0x01, 0x0A, 0xCC, 0x27, 0x09, 0x8E, 0xF2, 0x24,  // ...'...$
                                /* 22B8 */  0xC1, 0x2E, 0xCE, 0x3E, 0x49, 0x18, 0xE4, 0x49,  // ...>I..I
                                /* 22C0 */  0x02, 0x7B, 0xBC, 0x00, 0xC7, 0x31, 0x8A, 0x1F,  // .{...1..
                                /* 22C8 */  0x2F, 0x00, 0x2F, 0xC7, 0x29, 0xC0, 0xC0, 0xFF,  // /./.)...
                                /* 22D0 */  0xFF, 0x38, 0x05, 0x2C, 0x8F, 0x17, 0xC0, 0xDB,  // .8.,....
                                /* 22D8 */  0xC4, 0xF1, 0x02, 0x68, 0x1D, 0x83, 0xE0, 0x1C,  // ...h....
                                /* 22E0 */  0x2F, 0xC0, 0x15, 0xF6, 0xD0, 0x87, 0x3A, 0x03,  // /.....:.
                                /* 22E8 */  0x38, 0xFE, 0xE1, 0x16, 0xDA, 0xF1, 0x02, 0x1E,  // 8.......
                                /* 22F0 */  0x81, 0x63, 0x1E, 0xFB, 0x50, 0x01, 0x61, 0x14,  // .c..P.a.
                                /* 22F8 */  0xEF, 0xD8, 0x87, 0x0A, 0x04, 0x47, 0x41, 0x7C,  // .....GA|
                                /* 2300 */  0xEC, 0x73, 0x9C, 0x43, 0x03, 0x7A, 0x9C, 0x3E,  // .s.C.z.>
                                /* 2308 */  0x0F, 0xBC, 0x19, 0x1C, 0xE6, 0xFF, 0x3F, 0xC2,  // ......?.
                                /* 2310 */  0x11, 0xB3, 0x61, 0x60, 0x4E, 0x42, 0xC0, 0x37,  // ..a`NB.7
                                /* 2318 */  0xCA, 0xB8, 0xD0, 0xD0, 0x9E, 0x6B, 0xED, 0x02,  // .....k..
                                /* 2320 */  0x3C, 0x8F, 0x0A, 0x68, 0x1C, 0x2E, 0xC0, 0x39,  // <..h...9
                                /* 2328 */  0x2A, 0x38, 0xC0, 0xCF, 0x04, 0xC5, 0x8F, 0x0A,  // *8......
                                /* 2330 */  0x68, 0x9C, 0xFD, 0xC0, 0x39, 0x2A, 0x58, 0x90,  // h...9*X.
                                /* 2338 */  0x1E, 0x15, 0xB8, 0xFF, 0xFF, 0x87, 0x3F, 0xC0,  // ......?.
                                /* 2340 */  0xC2, 0x31, 0x05, 0x7C, 0x2A, 0x8E, 0x29, 0x80,  // .1.|*.).
                                /* 2348 */  0x16, 0x31, 0x87, 0x2A, 0x94, 0xBC, 0x81, 0xFB,  // .1.*....
                                /* 2350 */  0x08, 0x08, 0xA2, 0xDB, 0xA6, 0x2F, 0x1B, 0x87,  // ...../..
                                /* 2358 */  0x16, 0xCF, 0xD7, 0x7C, 0x8C, 0x84, 0x13, 0x15,  // ...|....
                                /* 2360 */  0x2A, 0x3C, 0x84, 0xA2, 0x9F, 0x04, 0xE8, 0x09,  // *<......
                                /* 2368 */  0x86, 0x80, 0x51, 0x10, 0x1F, 0x22, 0x7C, 0x5A,  // ..Q.."|Z
                                /* 2370 */  0x82, 0x33, 0x92, 0x27, 0x7F, 0xCC, 0xB9, 0x01,  // .3.'....
                                /* 2378 */  0xD6, 0xFF, 0xFF, 0x98, 0x02, 0xCC, 0xCE, 0x0D,  // ........
                                /* 2380 */  0xC0, 0x23, 0xE2, 0xB9, 0x01, 0x74, 0xE3, 0xF4,  // .#...t..
                                /* 2388 */  0xB9, 0x01, 0x5C, 0x07, 0x3D, 0x7E, 0xB6, 0x03,  // ..\.=~..
                                /* 2390 */  0x16, 0x47, 0x04, 0x0C, 0xCC, 0x23, 0x02, 0xE6,  // .G...#..
                                /* 2398 */  0xD8, 0x00, 0xFF, 0x68, 0x07, 0xF3, 0xD8, 0x00,  // ...h....
                                /* 23A0 */  0xFC, 0xFE, 0xFF, 0xE7, 0x3A, 0x60, 0x7C, 0x6C,  // ....:`|l
                                /* 23A8 */  0x00, 0xDE, 0xC3, 0xF5, 0xB1, 0x01, 0x38, 0x9D,  // ......8.
                                /* 23B0 */  0x5E, 0xC0, 0x72, 0x6C, 0x80, 0x25, 0xED, 0xC8,  // ^.rl.%..
                                /* 23B8 */  0x86, 0x3A, 0x36, 0x58, 0xEE, 0x91, 0x0D, 0x44,  // .:6X...D
                                /* 23C0 */  0x93, 0x0E, 0x12, 0xC9, 0x73, 0x7A, 0xF7, 0xC7,  // ....sz..
                                /* 23C8 */  0x09, 0x3A, 0xB5, 0xA1, 0xA4, 0xC0, 0x48, 0xC8,  // .:....H.
                                /* 23D0 */  0xA9, 0x0D, 0x15, 0xFD, 0xF4, 0x40, 0x41, 0x2C,  // .....@A,
                                /* 23D8 */  0xE1, 0xD8, 0x80, 0xF8, 0xFF, 0x9F, 0xC7, 0xF1,  // ........
                                /* 23E0 */  0x73, 0x39, 0x95, 0xA3, 0x78, 0x68, 0xF1, 0xE1,  // s9..xh..
                                /* 23E8 */  0x05, 0xF8, 0xC6, 0x18, 0x14, 0x1A, 0xDE, 0xA0,  // ........
                                /* 23F0 */  0x11, 0x1F, 0x09, 0x7C, 0x60, 0x03, 0xBE, 0xE3,  // ...|`...
                                /* 23F8 */  0x86, 0x03, 0xFD, 0xE8, 0xE0, 0x79, 0xFB, 0xBC,  // .....y..
                                /* 2400 */  0x06, 0x8C, 0x4F, 0x1F, 0xC0, 0xEC, 0xFF, 0x7F,  // ..O.....
                                /* 2408 */  0xFA, 0x80, 0x6D, 0xE3, 0x0C, 0x04, 0xE4, 0x4F,  // ..m....O
                                /* 2410 */  0x1A, 0x98, 0xBB, 0x3D, 0xEE, 0xF4, 0x01, 0xFF,  // ...=....
                                /* 2418 */  0x0C, 0x04, 0xF3, 0xF4, 0x01, 0xCC, 0xCF, 0x40,  // .......@
                                /* 2420 */  0xC0, 0xEB, 0xF4, 0x01, 0xCE, 0x31, 0x61, 0xFF,  // .....1a.
                                /* 2428 */  0xFF, 0xA7, 0x0F, 0xC0, 0xC0, 0xA0, 0xC0, 0x71,  // .......q
                                /* 2430 */  0xFA, 0x00, 0x5C, 0xE9, 0x38, 0x4A, 0x01, 0xF9,  // ..\.8J..
                                /* 2438 */  0xD3, 0x07, 0xB4, 0x03, 0x1D, 0xEA, 0x12, 0x60,  // .......`
                                /* 2440 */  0x91, 0x07, 0x3A, 0xC4, 0xFF, 0xFF, 0x28, 0x05,  // ..:...(.
                                /* 2448 */  0x7F, 0xEE, 0x4F, 0x39, 0x9E, 0x9C, 0x71, 0xA2,  // ..O9..q.
                                /* 2450 */  0xF4, 0x8E, 0xA2, 0xF3, 0x07, 0xEE, 0x48, 0x07,  // ......H.
                                /* 2458 */  0xFE, 0x79, 0x7A, 0x30, 0x3E, 0x58, 0x02, 0xEE,  // .yz0>X..
                                /* 2460 */  0x06, 0xEA, 0x83, 0x03, 0xB8, 0x7C, 0x1C, 0x1C,  // .....|..
                                /* 2468 */  0x40, 0x77, 0x9A, 0x7E, 0x0A, 0x02, 0x2E, 0x87,  // @w.~....
                                /* 2470 */  0x04, 0xFC, 0xFF, 0x1F, 0xE5, 0xE9, 0x01, 0xBC,  // ........
                                /* 2478 */  0x47, 0x21, 0x98, 0xA7, 0x07, 0xC0, 0xC0, 0xF9,  // G!......
                                /* 2480 */  0x12, 0xF0, 0x73, 0x7A, 0x00, 0xDF, 0x58, 0x7C,  // ..sz..X|
                                /* 2488 */  0x7A, 0x00, 0x4E, 0xB3, 0xFA, 0xFF, 0x3F, 0x3D,  // z.N...?=
                                /* 2490 */  0x00, 0x9B, 0xD7, 0x81, 0x4F, 0x0F, 0xFC, 0x1C,  // ....O...
                                /* 2498 */  0x60, 0x69, 0x47, 0x19, 0x68, 0xD7, 0x6F, 0xEC,  // `iG.h.o.
                                /* 24A0 */  0x35, 0x17, 0x77, 0xDA, 0x06, 0x58, 0x10, 0xEE,  // 5.w..X..
                                /* 24A8 */  0xE0, 0x00, 0x3A, 0x23, 0x07, 0x07, 0xD0, 0x89,  // ..:#....
                                /* 24B0 */  0x1D, 0x0B, 0xE2, 0xFF, 0x7F, 0x8A, 0x01, 0xE3,  // ........
                                /* 24B8 */  0xF9, 0x00, 0x7B, 0xC7, 0xC5, 0x1D, 0x18, 0xC0,  // ..{.....
                                /* 24C0 */  0x70, 0x7A, 0xE1, 0x07, 0x06, 0xE0, 0x7F, 0x70,  // pz.....p
                                /* 24C8 */  0x01, 0xFC, 0x1C, 0x18, 0xC0, 0xA7, 0xE4, 0xC0,  // ........
                                /* 24D0 */  0x00, 0xE2, 0xFF, 0xFF, 0xC1, 0x05, 0x8C, 0x07,  // ........
                                /* 24D8 */  0x06, 0x70, 0x1F, 0xE5, 0xB0, 0x27, 0x12, 0x9F,  // .p...'..
                                /* 24E0 */  0x1A, 0x7C, 0x89, 0x39, 0x89, 0x28, 0xE7, 0x73,  // .|.9.(.s
                                /* 24E8 */  0x92, 0x0F, 0x2C, 0x00, 0x6F, 0x46, 0xEC, 0x03,  // ..,.oF..
                                /* 24F0 */  0x03, 0x58, 0xFF, 0xFF, 0xA7, 0x38, 0xF0, 0x1E,  // .X...8..
                                /* 24F8 */  0x00, 0x7C, 0xCB, 0xF7, 0xF9, 0x00, 0x7B, 0x60,  // .|....{`
                                /* 2500 */  0x01, 0xCF, 0x81, 0x01, 0xF8, 0x1F, 0x58, 0x00,  // ......X.
                                /* 2508 */  0x9F, 0x52, 0x0E, 0x0C, 0x20, 0xFE, 0xFF, 0x1F,  // .R.. ...
                                /* 2510 */  0xDC, 0xC0, 0x7B, 0x60, 0x80, 0x15, 0xE6, 0x5C,  // ..{`...\
                                /* 2518 */  0x8E, 0xE2, 0x70, 0xD4, 0x73, 0x39, 0xFA, 0xC0,  // ..p.s9..
                                /* 2520 */  0xC2, 0x27, 0x18, 0xEB, 0x68, 0x4F, 0x37, 0x81,  // .'..hO7.
                                /* 2528 */  0xA3, 0x1D, 0xC8, 0x51, 0xA1, 0x60, 0x14, 0xE9,  // ...Q.`..
                                /* 2530 */  0x40, 0x8E, 0x0A, 0x01, 0x47, 0x41, 0x6C, 0xE1,  // @...GAl.
                                /* 2538 */  0xB0, 0x00, 0x6D, 0x0A, 0xC7, 0x76, 0x7C, 0x27,  // ..m..v|'
                                /* 2540 */  0xE9, 0xC3, 0x0A, 0x30, 0x1E, 0x14, 0x4C, 0xE4,  // ...0..L.
                                /* 2548 */  0x83, 0x02, 0xFF, 0x89, 0x1C, 0x78, 0x9C, 0x0C,  // .....x..
                                /* 2550 */  0x42, 0x56, 0x7F, 0x1C, 0xD0, 0xC4, 0x3D, 0x28,  // BV....=(
                                /* 2558 */  0x18, 0xFF, 0xFF, 0x41, 0x81, 0xE9, 0x44, 0x0E,  // ...A..D.
                                /* 2560 */  0xCE, 0x41, 0xC1, 0x9D, 0xB8, 0x07, 0x05, 0x6E,  // .A.....n
                                /* 2568 */  0x28, 0x1F, 0x4C, 0x80, 0x77, 0xB0, 0x83, 0x09,  // (.L.w...
                                /* 2570 */  0xE8, 0xAC, 0x1C, 0x4C, 0x40, 0x37, 0xA0, 0x07,  // ...L@7..
                                /* 2578 */  0x23, 0x30, 0x9F, 0x43, 0x38, 0xCA, 0xF1, 0xFA,  // #0.C8...
                                /* 2580 */  0x58, 0xCA, 0x8E, 0x25, 0x30, 0xFF, 0xFF, 0xC7,  // X..%0...
                                /* 2588 */  0x22, 0xEC, 0xB1, 0x04, 0xF8, 0x1E, 0x89, 0x80,  // ".......
                                /* 2590 */  0xD7, 0xB1, 0x04, 0xBC, 0x83, 0x02, 0xC7, 0xB1,  // ........
                                /* 2598 */  0x04, 0xB8, 0x0E, 0x0A, 0x1C, 0xC7, 0x12, 0xB0,  // ........
                                /* 25A0 */  0xFF, 0xFF, 0x8F, 0x25, 0x60, 0x1B, 0x14, 0x38,  // ...%`..8
                                /* 25A8 */  0x8E, 0x25, 0x80, 0x2B, 0x2D, 0xC7, 0x12, 0xA0,  // .%.+-...
                                /* 25B0 */  0x75, 0xFC, 0x82, 0x73, 0x2C, 0x81, 0x23, 0xD3,  // u..s,.#.
                                /* 25B8 */  0xC3, 0x18, 0x58, 0x88, 0x57, 0x84, 0x84, 0xC1,  // ..X.W...
                                /* 25C0 */  0xA0, 0x34, 0x9C, 0x07, 0xA0, 0x8C, 0xF0, 0x04,  // .4......
                                /* 25C8 */  0x8E, 0xEB, 0x90, 0x98, 0x24, 0x38, 0xD4, 0xE0,  // ....$8..
                                /* 25D0 */  0x3D, 0xA4, 0x57, 0xD2, 0xA3, 0x78, 0x2C, 0xF3,  // =.W..x,.
                                /* 25D8 */  0x38, 0xCE, 0x29, 0x24, 0x93, 0x36, 0x36, 0xD4,  // 8.)$.66.
                                /* 25E0 */  0xC1, 0xCD, 0xF3, 0x39, 0xB3, 0xA3, 0xA9, 0xFD,  // ...9....
                                /* 25E8 */  0x94, 0x4E, 0x8E, 0xE7, 0x26, 0xF0, 0x28, 0xFE,  // .N..&.(.
                                /* 25F0 */  0xFF, 0x91, 0x8D, 0xC6, 0xA1, 0xB1, 0xC3, 0xF0,  // ........
                                /* 25F8 */  0x7D, 0x20, 0xD8, 0x41, 0x1C, 0xC6, 0x39, 0x9B,  // } .A..9.
                                /* 2600 */  0xC0, 0x13, 0x3A, 0xCD, 0x72, 0xEF, 0x09, 0x3A,  // ..:.r..:
                                /* 2608 */  0xC8, 0x47, 0x8D, 0xD1, 0x1C, 0x14, 0x81, 0x3B,  // .G.....;
                                /* 2610 */  0x6A, 0xB0, 0x80, 0x79, 0xB6, 0xC7, 0xEB, 0xCB,  // j..y....
                                /* 2618 */  0x9B, 0xB1, 0xD8, 0x98, 0x63, 0x84, 0x8A, 0x51,  // ....c..Q
                                /* 2620 */  0xE3, 0xD0, 0xC9, 0xC8, 0x0D, 0x72, 0x1C, 0x8F,  // .....r..
                                /* 2628 */  0x71, 0x46, 0x8F, 0xFB, 0x38, 0x60, 0x98, 0x03,  // qF..8`..
                                /* 2630 */  0x79, 0x98, 0xF5, 0x9D, 0xC9, 0x63, 0xC1, 0x9E,  // y....c..
                                /* 2638 */  0x2E, 0xEC, 0xF9, 0x0A, 0x41, 0xEE, 0x05, 0x26,  // ....A..&
                                /* 2640 */  0xE8, 0x7E, 0x34, 0x3A, 0x44, 0x84, 0xE8, 0x6D,  // .~4:D..m
                                /* 2648 */  0x04, 0x42, 0xAF, 0x58, 0x80, 0x38, 0x01, 0xB6,  // .B.X.8..
                                /* 2650 */  0x66, 0x26, 0xA0, 0x43, 0xAB, 0x0D, 0x85, 0x60,  // f&.C...`
                                /* 2658 */  0x1E, 0x9D, 0x51, 0x82, 0x9D, 0xCC, 0xDB, 0xC4,  // ..Q.....
                                /* 2660 */  0xF1, 0x45, 0x89, 0xD1, 0x18, 0x84, 0x70, 0x03,  // .E....p.
                                /* 2668 */  0xC6, 0x8C, 0x10, 0x30, 0x7A, 0xC4, 0x38, 0x11,  // ...0z.8.
                                /* 2670 */  0xDA, 0x1F, 0x04, 0x09, 0xF5, 0xCC, 0xD1, 0x58,  // .......X
                                /* 2678 */  0x1C, 0x69, 0x34, 0xA8, 0x63, 0x85, 0x8F, 0x05,  // .i4.c...
                                /* 2680 */  0xBE, 0xEC, 0x7B, 0x54, 0x9E, 0x9D, 0xD1, 0xCF,  // ..{T....
                                /* 2688 */  0xA5, 0xCE, 0xD3, 0x3F, 0x25, 0xF0, 0xD4, 0x7C,  // ...?%..|
                                /* 2690 */  0xFE, 0x80, 0xE3, 0x1A, 0x50, 0x37, 0x83, 0xE7,  // ....P7..
                                /* 2698 */  0x02, 0x76, 0x22, 0x32, 0x1C, 0x1F, 0xA2, 0xC7,  // .v"2....
                                /* 26A0 */  0x1E, 0xEE, 0x04, 0x0E, 0x91, 0x01, 0xFA, 0x00,  // ........
                                /* 26A8 */  0x02, 0x7F, 0x3C, 0x3E, 0x08, 0x78, 0x3E, 0x27,  // ..<>.x>'
                                /* 26B0 */  0x9C, 0xC0, 0xF2, 0x07, 0x81, 0x1A, 0x99, 0xA1,  // ........
                                /* 26B8 */  0x7D, 0xF3, 0x38, 0xAD, 0x47, 0x01, 0x1F, 0x13,  // }.8.G...
                                /* 26C0 */  0x0E, 0x8B, 0x1D, 0x65, 0x7C, 0x76, 0xF1, 0x78,  // ...e|v.x
                                /* 26C8 */  0xB0, 0xFF, 0xFF, 0xF1, 0x80, 0xF1, 0x1A, 0xF0,  // ........
                                /* 26D0 */  0x74, 0x10, 0xE1, 0xA5, 0xC1, 0xF3, 0xF5, 0x99,  // t.......
                                /* 26D8 */  0x94, 0x1D, 0xE8, 0x3D, 0x1E, 0xDC, 0x21, 0x81,  // ...=..!.
                                /* 26E0 */  0x1D, 0x4E, 0xDE, 0x44, 0xD8, 0x19, 0x4A, 0xC7,  // .N.D..J.
                                /* 26E8 */  0x54, 0x43, 0x48, 0xD4, 0xB1, 0x04, 0x75, 0xAA,  // TCH...u.
                                /* 26F0 */  0xF0, 0x81, 0x82, 0x5D, 0x1B, 0xE2, 0x3E, 0x03,  // ...]..>.
                                /* 26F8 */  0x18, 0x97, 0x1D, 0x84, 0x3C, 0x32, 0xF8, 0x27,  // ....<2.'
                                /* 2700 */  0x84, 0xA7, 0x09, 0xB0, 0x1C, 0x23, 0xF8, 0xB9,  // .....#..
                                /* 2708 */  0xC6, 0xBA, 0xCE, 0x2A, 0xF4, 0x58, 0x03, 0x8E,  // ...*.X..
                                /* 2710 */  0x81, 0x38, 0xF0, 0x30, 0xD1, 0x83, 0xF3, 0x30,  // .8.0...0
                                /* 2718 */  0x39, 0xC8, 0xFB, 0xB6, 0xCF, 0x03, 0xEC, 0x6C,  // 9......l
                                /* 2720 */  0xEA, 0x71, 0x82, 0xE7, 0x40, 0x00, 0x0E, 0x79,  // .q..@..y
                                /* 2728 */  0xE3, 0x04, 0xDD, 0x98, 0xF8, 0x40, 0xC1, 0x27,  // .....@.'
                                /* 2730 */  0xE5, 0x29, 0xA0, 0xE3, 0xFB, 0xFF, 0xFF, 0x40,  // .).....@
                                /* 2738 */  0x31, 0x03, 0xF4, 0x40, 0xF9, 0xD9, 0x84, 0xC1,  // 1..@....
                                /* 2740 */  0x04, 0x3E, 0x8E, 0xB8, 0x6F, 0x25, 0xEC, 0x54,  // .>..o%.T
                                /* 2748 */  0x82, 0x39, 0x2D, 0xB0, 0xD1, 0x82, 0x07, 0xD0,  // .9-.....
                                /* 2750 */  0xA3, 0x85, 0x7F, 0xA8, 0x05, 0xCF, 0x68, 0xF9,  // ......h.
                                /* 2758 */  0xC0, 0xB0, 0xC7, 0x17, 0x38, 0x73, 0xF6, 0x19,  // ....8s..
                                /* 2760 */  0x03, 0x0C, 0x56, 0x81, 0x74, 0x3E, 0x09, 0xF4,  // ..V.t>..
                                /* 2768 */  0xC8, 0xF2, 0xC4, 0x72, 0x84, 0x64, 0xD4, 0x50,  // ...r.d.P
                                /* 2770 */  0xE1, 0xCF, 0xE5, 0xA0, 0x4E, 0xCF, 0x17, 0x00,  // ....N...
                                /* 2778 */  0x8F, 0x1A, 0xEC, 0xA0, 0x1E, 0x35, 0xF0, 0x19,  // .....5..
                                /* 2780 */  0x18, 0x76, 0xD4, 0xE0, 0xF9, 0xFF, 0x8F, 0x1A,  // .v......
                                /* 2788 */  0x0C, 0x43, 0xC2, 0x9D, 0xCB, 0xE0, 0xA1, 0x44,  // .C.....D
                                /* 2790 */  0x0F, 0xDD, 0xA7, 0x00, 0xAD, 0x10, 0xBA, 0x77,  // .......w
                                /* 2798 */  0x18, 0x2C, 0xCE, 0x3B, 0xA4, 0x41, 0xE2, 0xBF,  // .,.;.A..
                                /* 27A0 */  0x47, 0x7A, 0x1A, 0x46, 0x38, 0xC1, 0xD7, 0x08,  // Gz.F8...
                                /* 27A8 */  0x43, 0x1D, 0x47, 0x88, 0x04, 0x45, 0x0E, 0x14,  // C.G..E..
                                /* 27B0 */  0x3D, 0x0C, 0x8E, 0xFE, 0xA0, 0xC6, 0xB0, 0x8D,  // =.......
                                /* 27B8 */  0x72, 0x26, 0x47, 0xE5, 0x83, 0x95, 0x11, 0xCE,  // r&G.....
                                /* 27C0 */  0xF2, 0x79, 0xEA, 0xF9, 0xCA, 0xD7, 0x05, 0xCC,  // .y......
                                /* 27C8 */  0x79, 0x0D, 0x27, 0xE9, 0xF5, 0x65, 0x02, 0x89,  // y.'..e..
                                /* 27D0 */  0x3F, 0x21, 0x48, 0x04, 0x0C, 0xEA, 0x0C, 0x06,  // ?!H.....
                                /* 27D8 */  0xB8, 0x02, 0x7A, 0x5A, 0x00, 0xCB, 0x61, 0x00,  // ..zZ..a.
                                /* 27E0 */  0x77, 0x5D, 0xF0, 0xD0, 0x8F, 0xDD, 0x0A, 0x47,  // w].....G
                                /* 27E8 */  0x29, 0xB4, 0x10, 0xCF, 0x08, 0x3E, 0x79, 0xF8,  // )....>y.
                                /* 27F0 */  0x2A, 0xC0, 0x50, 0xCE, 0xE3, 0x69, 0xC1, 0xE7,  // *.P..i..
                                /* 27F8 */  0x2F, 0x58, 0xFF, 0xFF, 0xF3, 0x17, 0xBF, 0x7E,  // /X.....~
                                /* 2800 */  0xBD, 0x2B, 0x3C, 0x73, 0x19, 0x24, 0xC4, 0x83,  // .+<s.$..
                                /* 2808 */  0xC0, 0xD9, 0xBC, 0x77, 0x45, 0x09, 0x77, 0x56,  // ...wE.wV
                                /* 2810 */  0xCF, 0x5F, 0x0C, 0x23, 0x42, 0x6B, 0xE7, 0x2F,  // ._.#Bk./
                                /* 2818 */  0x82, 0x11, 0xEC, 0x0D, 0xCC, 0x68, 0x06, 0x7C,  // .....h.|
                                /* 2820 */  0xB8, 0x30, 0xD2, 0x4B, 0x53, 0x84, 0x58, 0x46,  // .0.KS.XF
                                /* 2828 */  0x08, 0xFE, 0xFC, 0xC5, 0x82, 0x3C, 0x34, 0xF4,  // .....<4.
                                /* 2830 */  0xC7, 0xF3, 0xF9, 0x0B, 0xE0, 0x47, 0xD0, 0x23,  // .....G.#
                                /* 2838 */  0x29, 0xFA, 0x08, 0xCA, 0x47, 0xF6, 0xF4, 0x05,  // )...G...
                                /* 2840 */  0x8C, 0x0E, 0x15, 0xB8, 0x73, 0x04, 0xE6, 0xFF,  // ....s...
                                /* 2848 */  0x7F, 0x8E, 0x80, 0x71, 0xF7, 0x62, 0x68, 0xEF,  // ...q.bh.
                                /* 2850 */  0x2E, 0x3E, 0xA2, 0x82, 0x2F, 0xF6, 0x20, 0xD1,  // .>../. .
                                /* 2858 */  0x43, 0x31, 0xF4, 0x19, 0x1D, 0x48, 0x88, 0xE3,  // C1...H..
                                /* 2860 */  0x0D, 0xFB, 0x8C, 0x68, 0xDC, 0x57, 0x04, 0x13,  // ...h.W..
                                /* 2868 */  0x0C, 0x78, 0xFC, 0x02, 0x3A, 0x27, 0x58, 0xDC,  // .x..:'X.
                                /* 2870 */  0x40, 0xE1, 0x0E, 0x0A, 0xCE, 0x58, 0xC1, 0x29,  // @....X.)
                                /* 2878 */  0xE3, 0x35, 0xA0, 0xB1, 0xE2, 0x4E, 0x17, 0x3E,  // .5...N.>
                                /* 2880 */  0x56, 0x61, 0xEF, 0x25, 0xEF, 0x2A, 0x86, 0x79,  // Va.%.*.y
                                /* 2888 */  0x82, 0x60, 0x71, 0x4F, 0x5F, 0x40, 0xE7, 0xEC,  // .`qO_@..
                                /* 2890 */  0x02, 0x9E, 0xC1, 0xC2, 0xB9, 0x80, 0x61, 0xFE,  // ......a.
                                /* 2898 */  0xFF, 0x17, 0x30, 0x3E, 0x36, 0xCC, 0x98, 0xC1,  // ..0>6...
                                /* 28A0 */  0x79, 0x72, 0x02, 0xE3, 0xE9, 0x06, 0xCE, 0xBD,  // yr......
                                /* 28A8 */  0x09, 0x83, 0xF2, 0x74, 0xC3, 0x4E, 0x4E, 0xC0,  // ...t.NN.
                                /* 28B0 */  0x27, 0x22, 0x09, 0x3D, 0x36, 0x39, 0x14, 0x0C,  // '".=69..
                                /* 28B8 */  0xEA, 0xE4, 0x04, 0x98, 0xFF, 0xFF, 0x9F, 0x9C,  // ........
                                /* 28C0 */  0x30, 0x87, 0xB5, 0x27, 0x27, 0xF8, 0xD7, 0x60,  // 0..''..`
                                /* 28C8 */  0xDF, 0x7F, 0x7D, 0x59, 0x3A, 0x27, 0xE3, 0xBC,  // ..}Y:'..
                                /* 28D0 */  0x31, 0x9D, 0xCD, 0x5B, 0xC4, 0x23, 0x53, 0x14,  // 1..[.#S.
                                /* 28D8 */  0x1F, 0x84, 0x8D, 0xF2, 0xF8, 0x64, 0xA4, 0x80,  // .....d..
                                /* 28E0 */  0x86, 0xF2, 0xBD, 0xE1, 0xE4, 0x5E, 0x9B, 0x0C,  // .....^..
                                /* 28E8 */  0x11, 0xEC, 0x40, 0x0C, 0x1F, 0x22, 0x9C, 0x4F,  // ..@..".O
                                /* 28F0 */  0x4E, 0xEC, 0xB0, 0x6D, 0x15, 0x27, 0x27, 0x80,  // N..m.''.
                                /* 28F8 */  0x80, 0xFF, 0xFF, 0x93, 0x13, 0xC0, 0xAE, 0xF0,  // ........
                                /* 2900 */  0x63, 0x45, 0x9F, 0x9C, 0xE0, 0x87, 0x3C, 0x39,  // cE....<9
                                /* 2908 */  0x01, 0x9D, 0x03, 0x10, 0x7E, 0xB0, 0x30, 0xFE,  // ....~.0.
                                /* 2910 */  0xFF, 0x83, 0x65, 0x77, 0x26, 0xD8, 0xC3, 0x05,  // ..ew&...
                                /* 2918 */  0x63, 0xD4, 0xE1, 0xA2, 0xC7, 0xE5, 0x2B, 0x4E,  // c.....+N
                                /* 2920 */  0xC0, 0x83, 0x38, 0x9B, 0x87, 0x76, 0xF0, 0x9D,  // ..8..v..
                                /* 2928 */  0x7D, 0xC1, 0x71, 0xBC, 0x00, 0xCF, 0x88, 0xF8,  // }.q.....
                                /* 2930 */  0x19, 0x01, 0x9C, 0xC1, 0x47, 0x89, 0x1E, 0x9C,  // ....G...
                                /* 2938 */  0x81, 0x43, 0xFA, 0x84, 0x00, 0x66, 0x0B, 0x27,  // .C...f.'
                                /* 2940 */  0x04, 0xA0, 0x32, 0x26, 0x06, 0x71, 0x26, 0xA7,  // ..2&.q&.
                                /* 2948 */  0x14, 0xE2, 0x09, 0x01, 0x3C, 0xFF, 0xFF, 0xC1,  // ....<...
                                /* 2950 */  0x82, 0xEF, 0x14, 0xED, 0xC1, 0x82, 0xF9, 0x28,  // .......(
                                /* 2958 */  0xE6, 0xC1, 0x02, 0x93, 0x31, 0x79, 0xB0, 0xC0,  // ....1y..
                                /* 2960 */  0xE4, 0x84, 0x07, 0x9C, 0x4E, 0x61, 0x3E, 0xE1,  // ....Na>.
                                /* 2968 */  0x01, 0x1F, 0xA1, 0x56, 0x40, 0x58, 0x80, 0x47,  // ...V@X.G
                                /* 2970 */  0x92, 0xA4, 0xC1, 0xA0, 0x4E, 0x78, 0x60, 0xFD,  // ....Nx`.
                                /* 2978 */  0xFF, 0x9F, 0xF0, 0x80, 0xF5, 0x5D, 0xC1, 0xC7,  // .....]..
                                /* 2980 */  0x1A, 0x30, 0x1D, 0x33, 0x18, 0x16, 0xBF, 0x2A,  // .0.3...*
                                /* 2988 */  0xC4, 0x08, 0x15, 0xE3, 0x71, 0x9F, 0x9F, 0x05,  // ....q...
                                /* 2990 */  0x1E, 0x8D, 0x3C, 0x17, 0xC3, 0x3C, 0x1B, 0xF9,  // ..<..<..
                                /* 2998 */  0x7C, 0x66, 0x02, 0x9F, 0xF1, 0x60, 0x9F, 0xE9,  // |f...`..
                                /* 29A0 */  0x5E, 0xEC, 0xCE, 0x20, 0xF8, 0xD3, 0xB6, 0xAF,  // ^.. ....
                                /* 29A8 */  0xD8, 0xBE, 0xDB, 0x85, 0x08, 0x75, 0x60, 0x81,  // .....u`.
                                /* 29B0 */  0x9E, 0xF1, 0x8C, 0x72, 0x0E, 0x2F, 0x78, 0x9E,  // ...r./x.
                                /* 29B8 */  0x5B, 0xA0, 0x50, 0x71, 0x42, 0xF9, 0x7A, 0x17,  // [.PqB.z.
                                /* 29C0 */  0x29, 0xEA, 0x91, 0x05, 0x79, 0xE1, 0x33, 0x48,  // )...y.3H
                                /* 29C8 */  0xAC, 0xC8, 0x3E, 0xE3, 0xB1, 0x68, 0x4F, 0x0F,  // ..>..hO.
                                /* 29D0 */  0x7D, 0x09, 0x7C, 0xC6, 0x03, 0x8C, 0xFD, 0xFF,  // }.|.....
                                /* 29D8 */  0xCF, 0x78, 0xC0, 0xF6, 0xD8, 0x64, 0x25, 0xC7,  // .x...d%.
                                /* 29E0 */  0x26, 0x34, 0x70, 0xC4, 0xF7, 0x08, 0x1F, 0x9B,  // &4p.....
                                /* 29E8 */  0xC0, 0x77, 0xC8, 0x03, 0x2E, 0x23, 0xE2, 0xC7,  // .w...#..
                                /* 29F0 */  0x26, 0x70, 0x9D, 0x53, 0xDE, 0x19, 0x1E, 0x93,  // &p.S....
                                /* 29F8 */  0xF9, 0x28, 0x71, 0xD0, 0x3E, 0x57, 0xB0, 0x93,  // .(q.>W..
                                /* 2A00 */  0xCA, 0xA9, 0x31, 0x82, 0xE1, 0x8E, 0x78, 0x40,  // ..1...x@
                                /* 2A08 */  0xE7, 0x38, 0x71, 0x98, 0x60, 0x39, 0x79, 0xF0,  // .8q.`9y.
                                /* 2A10 */  0xBB, 0xA1, 0xC7, 0x09, 0xEB, 0xFF, 0x3F, 0x4E,  // ......?N
                                /* 2A18 */  0xD8, 0x07, 0x3C, 0x38, 0xA3, 0x60, 0xB7, 0x11,  // ..<8.`..
                                /* 2A20 */  0xCC, 0x4C, 0x5F, 0x56, 0x62, 0x9C, 0x8B, 0x0F,  // .L_Vb...
                                /* 2A28 */  0x78, 0xC0, 0xFC, 0xCC, 0x02, 0x67, 0x56, 0xEC,  // x....gV.
                                /* 2A30 */  0xCC, 0x04, 0x56, 0x71, 0xEF, 0x08, 0x29, 0x59,  // ..Vq..)Y
                                /* 2A38 */  0x97, 0x87, 0x0B, 0x79, 0x90, 0x7C, 0x1C, 0x02,  // ...y.|..
                                /* 2A40 */  0xD6, 0x19, 0xCD, 0x87, 0x3C, 0xE0, 0x31, 0x5C,  // ....<.1\
                                /* 2A48 */  0x70, 0xCF, 0x85, 0x4F, 0xD7, 0x87, 0x4D, 0xDC,  // p..O..M.
                                /* 2A50 */  0xA0, 0x30, 0x87, 0xA2, 0x10, 0xD5, 0xC3, 0x6A,  // .0.....j
                                /* 2A58 */  0x50, 0x47, 0xF1, 0xFF, 0x7F, 0x48, 0x80, 0x7D,  // PG...H.}
                                /* 2A60 */  0x78, 0x00, 0x5F, 0xE8, 0xD3, 0x1B, 0x94, 0xB9,  // x._.....
                                /* 2A68 */  0x9C, 0x83, 0xA7, 0x72, 0x72, 0xE7, 0xF7, 0xD2,  // ...rr...
                                /* 2A70 */  0xE1, 0x81, 0x3D, 0xA6, 0x82, 0xED, 0xE4, 0x07,  // ..=.....
                                /* 2A78 */  0x8E, 0x63, 0x2A, 0x78, 0xC6, 0x84, 0xBB, 0x75,  // .c*x...u
                                /* 2A80 */  0x60, 0x0E, 0x0E, 0x60, 0x7C, 0xCF, 0x78, 0xA8,  // `..`|.x.
                                /* 2A88 */  0xB8, 0x81, 0x79, 0x1C, 0xB8, 0x3B, 0x00, 0x9C,  // ..y..;..
                                /* 2A90 */  0x98, 0x47, 0x3F, 0xA0, 0x33, 0x8C, 0xA3, 0x05,  // .G?.3...
                                /* 2A98 */  0xE7, 0xC5, 0x03, 0xFF, 0xFF, 0xBF, 0x78, 0xB0,  // ......x.
                                /* 2AA0 */  0x01, 0x83, 0x4F, 0xE6, 0xC1, 0x03, 0x7D, 0x8E,  // ..O...}.
                                /* 2AA8 */  0xF3, 0x80, 0xE1, 0xDD, 0x3C, 0x30, 0x83, 0xD5,  // ....<0..
                                /* 2AB0 */  0xD1, 0x03, 0x54, 0xFF, 0x76, 0x8D, 0x18, 0x04,  // ..T.v...
                                /* 2AB8 */  0xF3, 0x3A, 0x62, 0xF0, 0xDF, 0x3D, 0x70, 0x03,  // .:b..=p.
                                /* 2AC0 */  0xF0, 0xE1, 0x03, 0x0C, 0x47, 0x05, 0xF8, 0xA7,  // ....G...
                                /* 2AC8 */  0x0F, 0xF0, 0xC9, 0x1A, 0xB5, 0x8C, 0x9C, 0x21,  // .......!
                                /* 2AD0 */  0x50, 0xE7, 0x24, 0x1F, 0x6D, 0x3D, 0x8D, 0x03,  // P.$.m=..
                                /* 2AD8 */  0x89, 0xF1, 0x28, 0x19, 0xF6, 0x40, 0x9E, 0xD9,  // ..(..@..
                                /* 2AE0 */  0x5A, 0x1D, 0xA4, 0xBC, 0x43, 0x91, 0xF9, 0xBE,  // Z...C...
                                /* 2AE8 */  0x9B, 0x85, 0xA8, 0x7A, 0x08, 0xBA, 0xA6, 0xF9,  // ...z....
                                /* 2AF0 */  0x0E, 0xF7, 0xBE, 0xE9, 0x11, 0xBD, 0x17, 0xB2,  // ........
                                /* 2AF8 */  0xC0, 0x27, 0x09, 0x50, 0x8D, 0xCC, 0x03, 0xFE,  // .'.P....
                                /* 2B00 */  0xFF, 0x3F, 0x08, 0xC0, 0x3E, 0x1A, 0x82, 0x67,  // .?..>..g
                                /* 2B08 */  0x70, 0x98, 0x49, 0x9C, 0x1A, 0x0E, 0x36, 0xD0,  // p.I...6.
                                /* 2B10 */  0xB9, 0xE1, 0x70, 0x0E, 0x0E, 0x77, 0x1A, 0x60,  // ..p..w.`
                                /* 2B18 */  0xB2, 0x06, 0x0F, 0x9A, 0x61, 0x5B, 0xD2, 0xD8,  // ....a[..
                                /* 2B20 */  0xD1, 0x07, 0x35, 0x43, 0xC6, 0x3B, 0x91, 0x43,  // ..5C.;.C
                                /* 2B28 */  0x07, 0xDB, 0xE9, 0xCC, 0x43, 0x07, 0x8F, 0x89,  // ....C...
                                /* 2B30 */  0xA1, 0x83, 0x42, 0xF0, 0xD0, 0x41, 0x33, 0x36,  // ..B..A36
                                /* 2B38 */  0x36, 0x72, 0x60, 0x77, 0x12, 0xF1, 0xA1, 0x0E,  // 6r`w....
                                /* 2B40 */  0x37, 0x52, 0x03, 0x47, 0x3C, 0x86, 0xB3, 0x33,  // 7R.G<..3
                                /* 2B48 */  0xA6, 0x2F, 0x4B, 0xEC, 0x00, 0xCC, 0xFE, 0xFF,  // ./K.....
                                /* 2B50 */  0xD7, 0x83, 0x53, 0x8A, 0x15, 0xE1, 0x18, 0x59,  // ..S....Y
                                /* 2B58 */  0xD8, 0x61, 0x83, 0x4A, 0xC5, 0xB0, 0x41, 0x71,  // .a.J..Aq
                                /* 2B60 */  0x0A, 0xC6, 0x0D, 0x1B, 0xEE, 0xC0, 0xB0, 0xE7,  // ........
                                /* 2B68 */  0x54, 0xCC, 0xC8, 0x18, 0xC8, 0x99, 0x61, 0x0E,  // T.....a.
                                /* 2B70 */  0x47, 0x60, 0x3B, 0x89, 0xF0, 0xE3, 0x03, 0x7E,  // G`;....~
                                /* 2B78 */  0x00, 0x1E, 0x13, 0x03, 0x7D, 0xEB, 0x3C, 0x66,  // ....}.<f
                                /* 2B80 */  0x3E, 0x1B, 0x36, 0x16, 0xCC, 0x39, 0x04, 0xCC,  // >.6..9..
                                /* 2B88 */  0xA3, 0xF6, 0x39, 0x04, 0x38, 0x41, 0x86, 0x7A,  // ..9.8A.z
                                /* 2B90 */  0x7C, 0x88, 0xF5, 0xFC, 0x00, 0x96, 0xE3, 0x03,  // |.......
                                /* 2B98 */  0x38, 0xFE, 0xFF, 0xC7, 0x07, 0x8C, 0x84, 0x91,  // 8.......
                                /* 2BA0 */  0xA3, 0xC7, 0x69, 0xA5, 0xA3, 0x22, 0x63, 0xF0,  // ..i.."c.
                                /* 2BA8 */  0xB5, 0xD5, 0xE3, 0x63, 0xE7, 0x0F, 0x70, 0x0D,  // ...c..p.
                                /* 2BB0 */  0xD7, 0xE7, 0x0F, 0xE0, 0x33, 0x62, 0xE0, 0x76,  // ....3b.v
                                /* 2BB8 */  0xFE, 0x00, 0x13, 0xB4, 0xCF, 0x1F, 0x60, 0xB6,  // ......`.
                                /* 2BC0 */  0x71, 0xFE, 0x00, 0x92, 0x23, 0xF3, 0xF9, 0x03,  // q...#...
                                /* 2BC8 */  0xFE, 0xFF, 0xFF, 0xC4, 0x0A, 0x96, 0x51, 0xE3,  // ......Q.
                                /* 2BD0 */  0xCE, 0x9C, 0x98, 0x69, 0x60, 0x4E, 0x16, 0x06,  // ...i`N..
                                /* 2BD8 */  0x89, 0xF3, 0xC4, 0x0A, 0x3E, 0x1D, 0x67, 0x4E,  // ....>.gN
                                /* 2BE0 */  0xA0, 0x34, 0x2B, 0x0C, 0x8C, 0x87, 0xC5, 0xCE,  // .4+.....
                                /* 2BE8 */  0xBB, 0xE0, 0x14, 0x73, 0x66, 0x40, 0x1F, 0x21,  // ...sf@.!
                                /* 2BF0 */  0x7C, 0xFA, 0xE1, 0x17, 0x36, 0x1C, 0xCC, 0x61,  // |...6..a
                                /* 2BF8 */  0x9E, 0x8C, 0x61, 0x4E, 0xD3, 0x67, 0x02, 0x9F,  // ..aN.g..
                                /* 2C00 */  0xB1, 0xD9, 0xA1, 0x01, 0x5C, 0x3E, 0x0E, 0x0D,  // ....\>..
                                /* 2C08 */  0x40, 0xE5, 0xF4, 0x83, 0x39, 0xED, 0x61, 0x87,  // @...9.a.
                                /* 2C10 */  0x06, 0x67, 0xD8, 0xFF, 0xFF, 0xC3, 0x06, 0x1E,  // .g......
                                /* 2C18 */  0x87, 0x0E, 0x36, 0x6C, 0xE0, 0x33, 0x28, 0x0F,  // ..6l.3(.
                                /* 2C20 */  0x1B, 0x98, 0x1C, 0x3A, 0xF8, 0xB0, 0x81, 0xE9,  // ...:....
                                /* 2C28 */  0xA4, 0xC1, 0x70, 0xFD, 0xC0, 0x0C, 0x1B, 0x5C,  // ..p....\
                                /* 2C30 */  0x47, 0x23, 0x0F, 0x1B, 0x58, 0xFC, 0xFF, 0x0F,  // G#..X...
                                /* 2C38 */  0x0F, 0xC0, 0xF0, 0x64, 0x8A, 0x03, 0xF6, 0xB8,  // ...d....
                                /* 2C40 */  0x7D, 0xF7, 0x8C, 0x10, 0xFC, 0xE5, 0xF3, 0xF1,  // }.......
                                /* 2C48 */  0xE8, 0x6C, 0x22, 0x3C, 0xE3, 0x1A, 0xFD, 0xED,  // .l"<....
                                /* 2C50 */  0xE8, 0x09, 0xB1, 0x56, 0x08, 0xA1, 0xBD, 0xA2,  // ...V....
                                /* 2C58 */  0x04, 0x8B, 0x13, 0xE4, 0x28, 0x82, 0x54, 0x08,  // ....(.T.
                                /* 2C60 */  0x47, 0x6E, 0xB0, 0x86, 0x09, 0xE4, 0x43, 0x0B,  // Gn....C.
                                /* 2C68 */  0x8C, 0x41, 0x70, 0xE4, 0x78, 0x87, 0x14, 0xF6,  // .Ap.x...
                                /* 2C70 */  0x20, 0x4E, 0x26, 0xCA, 0x79, 0x1C, 0x93, 0x47,  //  N&.y..G
                                /* 2C78 */  0x77, 0x8E, 0x11, 0x8E, 0xA9, 0xDC, 0x61, 0x6B,  // w.....ak
                                /* 2C80 */  0x7E, 0x35, 0x4F, 0x51, 0xF3, 0x7A, 0x73, 0x0C,  // ~5OQ.zs.
                                /* 2C88 */  0x94, 0xC0, 0x23, 0xE0, 0x2F, 0x00, 0x2E, 0xFD,  // ..#./...
                                /* 2C90 */  0x80, 0x20, 0x59, 0xCF, 0x01, 0x0A, 0xE3, 0x13,  // . Y.....
                                /* 2C98 */  0xB1, 0xCF, 0x3A, 0x3E, 0x09, 0x70, 0x60, 0x9F,  // ..:>.p`.
                                /* 2CA0 */  0x09, 0x4E, 0xE4, 0x5C, 0x1F, 0x04, 0xD8, 0x69,  // .N.\...i
                                /* 2CA8 */  0xD7, 0x70, 0x7C, 0x98, 0x9E, 0xD8, 0xFB, 0xE4,  // .p|.....
                                /* 2CB0 */  0xE1, 0x9E, 0xC8, 0xBB, 0x81, 0x6F, 0x02, 0x21,  // .....o.!
                                /* 2CB8 */  0xD9, 0xC1, 0xD2, 0x87, 0x58, 0xDC, 0xB4, 0x4E,  // ....X..N
                                /* 2CC0 */  0xCA, 0x67, 0xB0, 0x88, 0x07, 0xE5, 0x7B, 0x95,  // .g....{.
                                /* 2CC8 */  0x0F, 0x0A, 0x1C, 0x8D, 0x43, 0x63, 0x87, 0xE1,  // ....Cc..
                                /* 2CD0 */  0x01, 0x07, 0x3B, 0x88, 0xC3, 0x78, 0x93, 0x35,  // ..;..x.5
                                /* 2CD8 */  0x81, 0x27, 0x74, 0xA2, 0x07, 0xF9, 0x46, 0xF0,  // .'t...F.
                                /* 2CE0 */  0x74, 0x10, 0x35, 0x46, 0x73, 0x50, 0xE4, 0xAC,  // t.5FsP..
                                /* 2CE8 */  0x00, 0x9E, 0xA3, 0x00, 0x8C, 0xFF, 0xFF, 0x51,  // .......Q
                                /* 2CF0 */  0xC0, 0xB3, 0xF7, 0x39, 0xE0, 0x31, 0x20, 0x54,  // ...9.1 T
                                /* 2CF8 */  0xF0, 0xD7, 0x85, 0xD8, 0xA7, 0x72, 0x2E, 0xF1,  // .....r..
                                /* 2D00 */  0x9F, 0x75, 0x8D, 0x72, 0x18, 0x98, 0x93, 0x84,  // .u.r....
                                /* 2D08 */  0xCF, 0x7E, 0xEF, 0x09, 0x3E, 0x49, 0x30, 0xF7,  // .~..>I0.
                                /* 2D10 */  0xE3, 0xD1, 0x9D, 0xB9, 0xB5, 0x19, 0x09, 0x24,  // .......$
                                /* 2D18 */  0x06, 0xB3, 0x85, 0xA1, 0xDB, 0xD8, 0x69, 0x1A,  // ......i.
                                /* 2D20 */  0xC5, 0x77, 0x81, 0xF3, 0x7A, 0x61, 0x88, 0x72,  // .w..za.r
                                /* 2D28 */  0x0C, 0x27, 0x11, 0x25, 0x50, 0x94, 0x20, 0xD1,  // .'.%P. .
                                /* 2D30 */  0xDE, 0xC4, 0x22, 0x46, 0x8B, 0x11, 0x37, 0x44,  // .."F..7D
                                /* 2D38 */  0xD4, 0x30, 0xF1, 0x22, 0xB4, 0x3F, 0x08, 0x12,  // .0.".?..
                                /* 2D40 */  0xEE, 0x34, 0xA0, 0x03, 0x87, 0x23, 0x8D, 0x06,  // .4...#..
                                /* 2D48 */  0x75, 0x98, 0xE2, 0xA7, 0x81, 0xD7, 0x0A, 0x1F,  // u.......
                                /* 2D50 */  0x38, 0x0C, 0x72, 0x06, 0x9E, 0xDD, 0xA3, 0x80,  // 8.r.....
                                /* 2D58 */  0x07, 0xCD, 0xEE, 0x08, 0xFE, 0x1D, 0xF8, 0x6C,  // .......l
                                /* 2D60 */  0x80, 0x77, 0x0D, 0xA8, 0x4B, 0xC1, 0x23, 0x01,  // .w..K.#.
                                /* 2D68 */  0x3B, 0x7B, 0xC0, 0x3F, 0x65, 0xC0, 0x1F, 0x8F,  // ;{.?e...
                                /* 2D70 */  0xCF, 0x00, 0x9E, 0xCF, 0x09, 0x27, 0xB0, 0xFC,  // .....'..
                                /* 2D78 */  0x41, 0xA0, 0x46, 0x66, 0x68, 0x9F, 0x01, 0x4E,  // A.Ffh..N
                                /* 2D80 */  0xEB, 0x55, 0xC0, 0x57, 0x3F, 0x9F, 0x0A, 0xB8,  // .U.W?...
                                /* 2D88 */  0x82, 0xA3, 0x09, 0x28, 0xC6, 0x03, 0x7F, 0xE4,  // ...(....
                                /* 2D90 */  0x4F, 0x18, 0xBE, 0x2F, 0x78, 0xBE, 0x3E, 0x70,  // O../x.>p
                                /* 2D98 */  0x60, 0x0F, 0x21, 0x60, 0x3B, 0x2A, 0xE0, 0x86,  // `.!`;*..
                                /* 2DA0 */  0xC0, 0xFF, 0xFF, 0x47, 0x10, 0x60, 0x10, 0xF0,  // ...G.`..
                                /* 2DA8 */  0x69, 0xAE, 0xA1, 0x3A, 0xDE, 0x33, 0x5D, 0x36,  // i..:.3]6
                                /* 2DB0 */  0x4E, 0xED, 0xF4, 0x4C, 0xE0, 0xA7, 0xBA, 0x4F,  // N..L...O
                                /* 2DB8 */  0x65, 0x6C, 0x14, 0x3D, 0x62, 0x0B, 0xF7, 0x25,  // el.=b..%
                                /* 2DC0 */  0xC5, 0x87, 0x6F, 0x4E, 0x30, 0xF2, 0x5B, 0x41,  // ..oN0.[A
                                /* 2DC8 */  0x9F, 0x05, 0xC1, 0x93, 0xB0, 0x30, 0x3A, 0x8D,  // .....0:.
                                /* 2DD0 */  0x78, 0x44, 0x1E, 0x3F, 0x81, 0x11, 0x9C, 0x41,  // xD.?...A
                                /* 2DD8 */  0x7C, 0x4E, 0x70, 0x86, 0xD3, 0x0E, 0x3D, 0x0C,  // |Np...=.
                                /* 2DE0 */  0xF0, 0x23, 0x80, 0xC7, 0xC1, 0xC6, 0x7E, 0x8C,  // .#....~.
                                /* 2DE8 */  0x9E, 0x54, 0x50, 0x36, 0x44, 0x9F, 0x05, 0xF8,  // .TP6D...
                                /* 2DF0 */  0x01, 0xC5, 0x97, 0x03, 0x23, 0x5B, 0xCD, 0x29,  // ....#[.)
                                /* 2DF8 */  0x08, 0x05, 0x66, 0x6C, 0x76, 0x0D, 0x06, 0x5F,  // ..flv.._
                                /* 2E00 */  0x8C, 0x19, 0xA1, 0xEF, 0x4A, 0xBE, 0xFD, 0xE0,  // ....J...
                                /* 2E08 */  0xC6, 0x04, 0xEE, 0xB9, 0x7A, 0x4C, 0xE0, 0xD2,  // ....zL..
                                /* 2E10 */  0x77, 0x63, 0x00, 0x05, 0x90, 0x4F, 0x08, 0xBE,  // wc...O..
                                /* 2E18 */  0xA1, 0xBE, 0x24, 0xB0, 0x29, 0x84, 0x08, 0x13,  // ..$.)...
                                /* 2E20 */  0xCD, 0xE8, 0x5C, 0xB0, 0x83, 0xFF, 0xFF, 0x69,  // ..\....i
                                /* 2E28 */  0x00, 0x23, 0x11, 0x46, 0x33, 0x32, 0x88, 0xBF,  // .#.F32..
                                /* 2E30 */  0x07, 0x12, 0x10, 0x08, 0x42, 0x4E, 0x8E, 0x8B,  // ....BN..
                                /* 2E38 */  0x90, 0x6E, 0x08, 0x98, 0x6B, 0x3F, 0x27, 0xF0,  // .n..k?'.
                                /* 2E40 */  0x09, 0xCB, 0x47, 0x12, 0x38, 0xD3, 0x3E, 0xBC,  // ..G.8.>.
                                /* 2E48 */  0x57, 0x07, 0xCF, 0xC4, 0x70, 0x1E, 0x2F, 0x87,  // W...p./.
                                /* 2E50 */  0xF3, 0x91, 0x80, 0x9F, 0x18, 0x7C, 0x8C, 0x02,  // .....|..
                                /* 2E58 */  0x8F, 0xB3, 0xDB, 0x8C, 0x8E, 0x70, 0xDC, 0xC9,  // .....p..
                                /* 2E60 */  0x61, 0x82, 0x1E, 0x6E, 0xF9, 0xC0, 0xF0, 0x04,  // a..n....
                                /* 2E68 */  0x0E, 0x76, 0x0C, 0xA3, 0xC3, 0x82, 0x2B, 0xF0,  // .v....+.
                                /* 2E70 */  0x68, 0x84, 0x3E, 0x15, 0xB1, 0x79, 0xF2, 0x21,  // h.>..y.!
                                /* 2E78 */  0x3D, 0xF3, 0x78, 0xBC, 0x70, 0x87, 0x09, 0x0F,  // =.x.p...
                                /* 2E80 */  0xCA, 0xC3, 0x04, 0xDF, 0x81, 0xC7, 0xC7, 0x01,  // ........
                                /* 2E88 */  0xDC, 0x46, 0x7D, 0x84, 0xC3, 0x4E, 0x08, 0xC6,  // .F}..N..
                                /* 2E90 */  0x79, 0x00, 0xCC, 0xFF, 0xFF, 0x71, 0xB3, 0x91,  // y....q..
                                /* 2E98 */  0x81, 0xEF, 0xCC, 0xED, 0xF3, 0x00, 0xEE, 0xAC,  // ........
                                /* 2EA0 */  0xE1, 0x91, 0xC1, 0x22, 0x18, 0xED, 0x40, 0x00,  // ..."..@.
                                /* 2EA8 */  0x8A, 0x29, 0xF9, 0x40, 0x00, 0x7F, 0xC4, 0xF0,  // .).@....
                                /* 2EB0 */  0x07, 0x0A, 0xEF, 0x8C, 0xE1, 0x81, 0x82, 0xEF,  // ........
                                /* 2EB8 */  0xD0, 0x80, 0xBB, 0x87, 0x80, 0x11, 0x1E, 0x13,  // ........
                                /* 2EC0 */  0x6A, 0x54, 0xF4, 0x9A, 0xE2, 0x71, 0xF1, 0xB1,  // jT...q..
                                /* 2EC8 */  0x7B, 0xA0, 0x0C, 0xFB, 0xAD, 0xC7, 0xA2, 0x27,  // {......'
                                /* 2ED0 */  0xA9, 0x5B, 0xD0, 0x63, 0x22, 0x1B, 0x9B, 0x61,  // .[.c"..a
                                /* 2ED8 */  0x3D, 0x74, 0x0E, 0x6B, 0xB4, 0x47, 0x42, 0x8F,  // =t.k.GB.
                                /* 2EE0 */  0xD5, 0x97, 0x2D, 0xCF, 0xCC, 0x97, 0x69, 0x76,  // ..-...iv
                                /* 2EE8 */  0xEE, 0x05, 0xD7, 0x81, 0x88, 0x9D, 0x9B, 0x31,  // .......1
                                /* 2EF0 */  0x07, 0x00, 0xCC, 0xFF, 0xFF, 0x85, 0xC0, 0xE2,  // ........
                                /* 2EF8 */  0x3F, 0x57, 0x74, 0x3E, 0xC2, 0x09, 0x04, 0xD2,  // ?Wt>....
                                /* 2F00 */  0xF9, 0x88, 0x1F, 0x07, 0x7C, 0x3E, 0xC2, 0x4B,  // ....|>.K
                                /* 2F08 */  0x3A, 0x18, 0x51, 0x08, 0x1F, 0x37, 0x7D, 0xFC,  // :.Q..7}.
                                /* 2F10 */  0xF6, 0x11, 0x86, 0x1F, 0x9E, 0x0D, 0x66, 0x10,  // ......f.
                                /* 2F18 */  0x1F, 0x53, 0x7C, 0x20, 0xB1, 0x91, 0xA3, 0x09,  // .S| ....
                                /* 2F20 */  0x28, 0x42, 0x1C, 0x1D, 0xA0, 0x1D, 0x7F, 0xD8,  // (B......
                                /* 2F28 */  0x09, 0x03, 0xD6, 0xF9, 0x92, 0x1D, 0x0E, 0xD8,  // ........
                                /* 2F30 */  0x81, 0x01, 0xDE, 0x4D, 0x09, 0x7C, 0xE7, 0x05,  // ...M.|..
                                /* 2F38 */  0xE0, 0x7D, 0x66, 0xF2, 0x79, 0x01, 0x38, 0x1D,  // .}f.y.8.
                                /* 2F40 */  0x10, 0xD8, 0x79, 0x01, 0xDE, 0xFF, 0xFF, 0xFC,  // ..y.....
                                /* 2F48 */  0xA2, 0x17, 0xB9, 0xEF, 0x59, 0x7E, 0x1D, 0x48,  // ....Y~.H
                                /* 2F50 */  0x2A, 0x0C, 0xEA, 0xC0, 0x09, 0xB8, 0x3A, 0xF0,  // *.....:.
                                /* 2F58 */  0x78, 0xCC, 0xE0, 0x00, 0xF3, 0xC1, 0xEC, 0x59,  // x......Y
                                /* 2F60 */  0xC1, 0x10, 0xB1, 0xF8, 0x8C, 0x63, 0x84, 0x8A,  // .....c..
                                /* 2F68 */  0xF1, 0xA0, 0x70, 0x44, 0xAD, 0x82, 0xE8, 0xDE,  // ..pD....
                                /* 2F70 */  0x17, 0x25, 0x46, 0xEC, 0x93, 0x79, 0xDD, 0xF5,  // .%F..y..
                                /* 2F78 */  0x71, 0xC0, 0xB7, 0x01, 0x9F, 0x7A, 0x3D, 0xA1,  // q....z=.
                                /* 2F80 */  0xC8, 0xAF, 0x8C, 0x3E, 0x76, 0xC2, 0x1F, 0xD6,  // ...>v...
                                /* 2F88 */  0x09, 0x1C, 0xD6, 0x71, 0xBD, 0x77, 0xFA, 0xC2,  // ...q.w..
                                /* 2F90 */  0x79, 0x34, 0xEF, 0x9C, 0x46, 0x78, 0x71, 0x78,  // y4..Fxqx
                                /* 2F98 */  0x76, 0x88, 0x12, 0x27, 0x52, 0x90, 0x47, 0x89,  // v..'R.G.
                                /* 2FA0 */  0x28, 0xBD, 0xA1, 0x08, 0x30, 0x66, 0x94, 0x20,  // (...0f. 
                                /* 2FA8 */  0x8F, 0x33, 0xC1, 0x1E, 0x0C, 0x42, 0x86, 0x88,  // .3...B..
                                /* 2FB0 */  0xF9, 0xB2, 0x1B, 0xFC, 0x00, 0xA2, 0x44, 0x78,  // ......Dx
                                /* 2FB8 */  0xEC, 0x64, 0x21, 0x17, 0xA2, 0x21, 0xFB, 0xD8,  // .d!..!..
                                /* 2FC0 */  0x09, 0xAC, 0xFE, 0xFF, 0xC7, 0x4E, 0xC0, 0x64,  // .....N.d
                                /* 2FC8 */  0xDC, 0x93, 0x23, 0x94, 0x31, 0x3F, 0x88, 0x78,  // ..#.1?.x
                                /* 2FD0 */  0x38, 0x2C, 0xDE, 0x41, 0x1C, 0x54, 0x07, 0x1C,  // 8,.A.T..
                                /* 2FD8 */  0x0F, 0x0C, 0xFE, 0xD1, 0x05, 0x77, 0x9A, 0x80,  // .....w..
                                /* 2FE0 */  0x7B, 0x88, 0x60, 0x53, 0xE2, 0x28, 0x8F, 0x0E,  // {.`S.(..
                                /* 2FE8 */  0x3E, 0x82, 0xFB, 0x54, 0x03, 0xAE, 0xC8, 0xE3,  // >..T....
                                /* 2FF0 */  0x44, 0x03, 0xB3, 0x99, 0x84, 0x0C, 0xFC, 0x8C,  // D.......
                                /* 2FF8 */  0xF0, 0x66, 0xEE, 0x23, 0xA9, 0x06, 0x0A, 0xAA,  // .f.#....
                                /* 3000 */  0x03, 0x01, 0xE6, 0xFF, 0x3F, 0x50, 0x98, 0xA7,  // ....?P..
                                /* 3008 */  0x32, 0xDC, 0x40, 0xC1, 0x30, 0x27, 0x06, 0x12,  // 2.@.0'..
                                /* 3010 */  0xEC, 0xA0, 0xD8, 0x44, 0x3D, 0x52, 0x30, 0x5E,  // ...D=R0^
                                /* 3018 */  0x42, 0x7D, 0x74, 0xC2, 0x9D, 0x82, 0x8E, 0xC6,  // B}t.....
                                /* 3020 */  0xF7, 0x11, 0xDF, 0x1F, 0x3C, 0x2E, 0x76, 0x44,  // ....<.vD
                                /* 3028 */  0x00, 0x17, 0xA0, 0x87, 0x0A, 0x5F, 0xDE, 0x50,  // ....._.P
                                /* 3030 */  0x41, 0x33, 0x26, 0xFC, 0x99, 0x1F, 0x9C, 0x23,  // A3&....#
                                /* 3038 */  0xF5, 0x39, 0x11, 0x07, 0x6D, 0xDC, 0x98, 0x21,  // .9..m..!
                                /* 3040 */  0x4F, 0xE2, 0x01, 0x86, 0x1F, 0x11, 0xC0, 0x05,  // O.......
                                /* 3048 */  0xEA, 0xA3, 0x05, 0xD8, 0xFF, 0xFF, 0x47, 0x04,  // ......G.
                                /* 3050 */  0x3C, 0xD0, 0x39, 0xB1, 0xA3, 0x05, 0xE6, 0xFC,  // <.9.....
                                /* 3058 */  0x07, 0xBE, 0xE3, 0x9A, 0x8F, 0xAF, 0xF8, 0xE3,  // ........
                                /* 3060 */  0x10, 0xBB, 0x3D, 0xF3, 0x5B, 0xF5, 0x3B, 0x92,  // ..=.[.;.
                                /* 3068 */  0x61, 0x1E, 0x4B, 0x58, 0xC8, 0xC1, 0x82, 0xEA,  // a.KX....
                                /* 3070 */  0xE0, 0xE7, 0xC1, 0xC2, 0x3F, 0x76, 0x81, 0x67,  // ....?v.g
                                /* 3078 */  0x54, 0xD8, 0x59, 0xBC, 0x25, 0x9C, 0x15, 0x3F,  // T.Y.%..?
                                /* 3080 */  0x5F, 0xB0, 0x53, 0x27, 0x48, 0xCF, 0x09, 0xE8,  // _.S'H...
                                /* 3088 */  0x53, 0x80, 0xE7, 0x8A, 0x3B, 0x5F, 0x80, 0xEB,  // S...;_..
                                /* 3090 */  0x40, 0xE6, 0xF3, 0x05, 0xF0, 0x38, 0x27, 0xB0,  // @....8'.
                                /* 3098 */  0x29, 0x61, 0x8E, 0x09, 0x98, 0xFF, 0xFF, 0x40,  // )a.....@
                                /* 30A0 */  0xC1, 0x14, 0x7A, 0xA0, 0xE8, 0xE1, 0x19, 0x38,  // ..z....8
                                /* 30A8 */  0xA4, 0x0F, 0x09, 0xD8, 0x03, 0x06, 0xB8, 0xBE,  // ........
                                /* 30B0 */  0xEF, 0x3A, 0x60, 0x00, 0x91, 0x31, 0xB1, 0x99,  // .:`..1..
                                /* 30B8 */  0xE2, 0x87, 0x0A, 0x3C, 0x8E, 0x92, 0x1E, 0x2A,  // ...<...*
                                /* 30C0 */  0x98, 0x07, 0xE4, 0xA1, 0x02, 0x93, 0x31, 0x79,  // ......1y
                                /* 30C8 */  0xA8, 0xC0, 0x20, 0xF8, 0x50, 0xC9, 0xFF, 0xFF,  // .. .P...
                                /* 30D0 */  0x84, 0x8C, 0xBF, 0x0A, 0xF2, 0xB1, 0x62, 0x23,  // ......b#
                                /* 30D8 */  0x8E, 0x15, 0x54, 0x26, 0xCE, 0x51, 0x40, 0x65,  // ..T&.Q@e
                                /* 30E0 */  0x50, 0x98, 0xC1, 0x02, 0x83, 0xD8, 0xC7, 0x04,  // P.......
                                /* 30E8 */  0x28, 0xC7, 0x0E, 0x43, 0x9C, 0xCD, 0x3B, 0x25,  // (..C..;%
                                /* 30F0 */  0xBB, 0x10, 0xB1, 0xB1, 0x82, 0x4B, 0xC5, 0x11,  // .....K..
                                /* 30F8 */  0x0C, 0x08, 0xCD, 0x09, 0x73, 0x21, 0xC2, 0x9C,  // ....s!..
                                /* 3100 */  0x88, 0x80, 0xC1, 0x70, 0x7C, 0x6E, 0x3C, 0x57,  // ...p|n<W
                                /* 3108 */  0x38, 0xFF, 0x7F, 0x82, 0x31, 0x07, 0x0B, 0xAA,  // 8...1...
                                /* 3110 */  0xA1, 0x7A, 0xB0, 0xF0, 0x0F, 0xA7, 0x07, 0x0B,  // .z......
                                /* 3118 */  0x96, 0x41, 0x19, 0xE2, 0x7D, 0xF3, 0x70, 0x81,  // .A..}.p.
                                /* 3120 */  0x4B, 0xF4, 0x93, 0x02, 0x94, 0x93, 0xA7, 0x2F,  // K....../
                                /* 3128 */  0xA8, 0xEC, 0xA2, 0xC4, 0x46, 0x0B, 0xBE, 0x91,  // ....F...
                                /* 3130 */  0x7A, 0xB4, 0xC0, 0x03, 0xCC, 0x13, 0x8A, 0xFE,  // z.......
                                /* 3138 */  0xE4, 0xF7, 0x2A, 0x66, 0xAC, 0x67, 0x53, 0x0F,  // ..*f.gS.
                                /* 3140 */  0xD6, 0xC7, 0x1B, 0xC3, 0x44, 0x7E, 0x2C, 0x02,  // ....D~,.
                                /* 3148 */  0xA7, 0xE0, 0xC3, 0x35, 0x28, 0x50, 0xA2, 0x3F,  // ...5(P.?
                                /* 3150 */  0x0C, 0xF8, 0x04, 0x12, 0x22, 0x9A, 0xAF, 0xBA,  // ...."...
                                /* 3158 */  0x06, 0x09, 0xE4, 0xFF, 0xFF, 0xF1, 0xDA, 0xA8,  // ........
                                /* 3160 */  0xBE, 0x11, 0xD8, 0xE5, 0x54, 0x84, 0xF9, 0xEC,  // ....T...
                                /* 3168 */  0x1E, 0xED, 0xD0, 0xA2, 0x9F, 0x4C, 0x88, 0x04,  // .....L..
                                /* 3170 */  0x3E, 0x84, 0xE1, 0x07, 0xC2, 0x51, 0x9F, 0xB7,  // >....Q..
                                /* 3178 */  0xD9, 0x40, 0x5E, 0xB9, 0x8D, 0x7F, 0x5C, 0x3E,  // .@^...\>
                                /* 3180 */  0x21, 0x1B, 0xE1, 0xB8, 0x1E, 0x8C, 0x9F, 0x11,  // !.......
                                /* 3188 */  0x7C, 0x0F, 0xC3, 0x1C, 0xBB, 0x71, 0x32, 0x5E,  // |....q2^
                                /* 3190 */  0x68, 0x26, 0x50, 0x80, 0x97, 0xA8, 0x82, 0xBF,  // h&P.....
                                /* 3198 */  0x08, 0x0C, 0x43, 0x0F, 0xD3, 0x80, 0xAB, 0x53,  // ..C....S
                                /* 31A0 */  0x12, 0x3F, 0x4C, 0x83, 0x7B, 0x04, 0xEF, 0xD0,  // .?L.{...
                                /* 31A8 */  0x86, 0xF6, 0x45, 0x9A, 0x21, 0x3D, 0x4E, 0xF0,  // ..E.!=N.
                                /* 31B0 */  0x63, 0x39, 0x3B, 0x49, 0xC3, 0x1E, 0xD2, 0x53,  // c9;I...S
                                /* 31B8 */  0xE4, 0x41, 0x3D, 0x31, 0x44, 0x78, 0xE4, 0x8D,  // .A=1Dx..
                                /* 31C0 */  0xF2, 0x0C, 0xFD, 0x08, 0x12, 0x24, 0x46, 0x08,  // .....$F.
                                /* 31C8 */  0xDF, 0xA5, 0x7D, 0x97, 0x3C, 0x36, 0x43, 0x19,  // ..}.<6C.
                                /* 31D0 */  0x21, 0x0A, 0x03, 0x0D, 0x72, 0x2C, 0xC1, 0x02,  // !...r,..
                                /* 31D8 */  0x46, 0x31, 0xFE, 0x09, 0x45, 0x3B, 0x9A, 0x48,  // F1..E;.H
                                /* 31E0 */  0xFF, 0xFF, 0x27, 0x69, 0x26, 0xFC, 0xC5, 0xA1,  // ..'i&...
                                /* 31E8 */  0x03, 0x81, 0x4F, 0xD2, 0x00, 0x3F, 0x8E, 0x2F,  // ..O..?./
                                /* 31F0 */  0x3E, 0xC8, 0xE0, 0xE0, 0x8D, 0xFC, 0x78, 0x70,  // >.....xp
                                /* 31F8 */  0x64, 0x09, 0x06, 0x3B, 0x48, 0x03, 0x9D, 0x71,  // d..;H..q
                                /* 3200 */  0xE1, 0x4E, 0x12, 0x70, 0x07, 0xC4, 0x8F, 0x2F,  // .N.p.../
                                /* 3208 */  0xE0, 0x3B, 0xD3, 0xB2, 0xFF, 0xFF, 0xE1, 0x1B,  // .;......
                                /* 3210 */  0x7B, 0x5B, 0xC3, 0x1D, 0xB9, 0xC0, 0x75, 0x88,  // {[....u.
                                /* 3218 */  0x06, 0x2E, 0x60, 0x8F, 0x1D, 0xF0, 0x46, 0x0A,  // ..`...F.
                                /* 3220 */  0x46, 0xAC, 0xE7, 0x1E, 0xF0, 0x8D, 0xE5, 0x24,  // F......$
                                /* 3228 */  0x62, 0x05, 0x7C, 0xEB, 0x89, 0x75, 0x18, 0x21,  // b.|..u.!
                                /* 3230 */  0x9E, 0x79, 0x80, 0x9D, 0xD8, 0xD7, 0x88, 0x8F,  // .y......
                                /* 3238 */  0x20, 0x7E, 0x34, 0x48, 0xD6, 0x4B, 0x80, 0xC2,  //  ~4H.K..
                                /* 3240 */  0xF8, 0xCC, 0x03, 0x4C, 0xFF, 0xFF, 0x67, 0x1E,  // ...L..g.
                                /* 3248 */  0x60, 0x70, 0x16, 0xF1, 0x31, 0x01, 0x1C, 0x27,  // `p..1..'
                                /* 3250 */  0x2A, 0x58, 0xB3, 0xF7, 0x3D, 0xE0, 0x31, 0x20,  // *X..=.1 
                                /* 3258 */  0x54, 0xF0, 0x57, 0x85, 0xD8, 0xEF, 0x5D, 0xC6,  // T.W...].
                                /* 3260 */  0x7F, 0xC8, 0xF0, 0x81, 0x07, 0xF6, 0x7D, 0xC7,  // ......}.
                                /* 3268 */  0xA8, 0x6F, 0x01, 0x81, 0x5E, 0x72, 0x22, 0xF8,  // .o..^r".
                                /* 3270 */  0xA2, 0x13, 0xE9, 0xA4, 0x1E, 0x74, 0x22, 0x3D,  // .....t"=
                                /* 3278 */  0xF0, 0x78, 0x08, 0xC7, 0xF5, 0x7C, 0xF2, 0xC0,  // .x...|..
                                /* 3280 */  0xE3, 0x8B, 0x8F, 0x81, 0xA2, 0x04, 0x0D, 0xF2,  // ........
                                /* 3288 */  0x26, 0x1F, 0x21, 0x48, 0xB8, 0xB8, 0x41, 0xCE,  // &.!H..A.
                                /* 3290 */  0xCF, 0x17, 0x1E, 0x1F, 0x78, 0x58, 0xB8, 0xD3,  // ....xX..
                                /* 3298 */  0x80, 0xCE, 0x1A, 0x3E, 0xF0, 0x00, 0xC6, 0xFF,  // ...>....
                                /* 32A0 */  0xFF, 0x07, 0x1E, 0xB0, 0x1D, 0x38, 0x70, 0x67,  // .....8pg
                                /* 32A8 */  0x39, 0xB0, 0x1D, 0x15, 0x70, 0x47, 0x10, 0x60,  // 9...pG.`
                                /* 32B0 */  0x22, 0xE6, 0x3D, 0xA0, 0x33, 0x90, 0x85, 0x80,  // ".=.3...
                                /* 32B8 */  0xC8, 0xC6, 0xEF, 0x8B, 0x8D, 0x96, 0x48, 0x5C,  // ......H\
                                /* 32C0 */  0xAF, 0xA6, 0xC3, 0xC7, 0xF0, 0x08, 0xE3, 0xBB,  // ........
                                /* 32C8 */  0x9E, 0x91, 0xDE, 0x51, 0x7C, 0x86, 0xE1, 0x92,  // ...Q|...
                                /* 32D0 */  0x20, 0x05, 0x6F, 0x08, 0x8B, 0x81, 0x91, 0x14,  //  .o.....
                                /* 32D8 */  0x08, 0x0D, 0xC9, 0x07, 0x50, 0x42, 0x25, 0x30,  // ....PB%0
                                /* 32E0 */  0x83, 0xF8, 0xD8, 0xE0, 0x18, 0x10, 0x32, 0x72,  // ......2r
                                /* 32E8 */  0xF6, 0x41, 0x9F, 0x18, 0xCE, 0xEA, 0xA4, 0x7C,  // .A.....|
                                /* 32F0 */  0x36, 0xE3, 0x47, 0x06, 0x38, 0xB7, 0x03, 0x9F,  // 6.G.8...
                                /* 32F8 */  0x05, 0x38, 0x9C, 0x8F, 0x40, 0xFC, 0xF8, 0xC4,  // .8..@...
                                /* 3300 */  0x09, 0xB8, 0xAC, 0x63, 0x0E, 0x68, 0x8E, 0x17,  // ...c.h..
                                /* 3308 */  0x09, 0x46, 0x39, 0xCA, 0x43, 0x41, 0x8D, 0x18,  // .F9.CA..
                                /* 3310 */  0xF0, 0x98, 0x8E, 0x82, 0x1F, 0x47, 0x0E, 0x0A,  // .....G..
                                /* 3318 */  0x3C, 0xFF, 0xFF, 0x41, 0xC1, 0x18, 0xAE, 0x8F,  // <..A....
                                /* 3320 */  0x42, 0xE0, 0x0B, 0x72, 0x86, 0x82, 0x72, 0x17,  // B..r..r.
                                /* 3328 */  0x65, 0x67, 0x28, 0x36, 0x28, 0x70, 0x1F, 0x31,  // eg(6(p.1
                                /* 3330 */  0x3C, 0x28, 0xF0, 0x9D, 0xC1, 0x71, 0x47, 0x0B,  // <(...qG.
                                /* 3338 */  0x78, 0x40, 0xBE, 0x49, 0xF8, 0xAA, 0xF4, 0x34,  // x@.I...4
                                /* 3340 */  0xC1, 0xEE, 0x4A, 0x86, 0x89, 0x66, 0x78, 0x4C,  // ..J..fxL
                                /* 3348 */  0xB8, 0x51, 0xD1, 0x83, 0x81, 0xC7, 0xC5, 0x0F,  // .Q......
                                /* 3350 */  0x17, 0x3E, 0xFE, 0x30, 0xEC, 0xD7, 0x08, 0x8B,  // .>.0....
                                /* 3358 */  0x3E, 0x32, 0x90, 0x23, 0x17, 0xD3, 0x01, 0x4B,  // >2.#...K
                                /* 3360 */  0x47, 0xCA, 0x61, 0x8D, 0x16, 0xF6, 0x80, 0x9F,  // G.a.....
                                /* 3368 */  0x40, 0x7C, 0x7B, 0xF1, 0x99, 0x96, 0xC1, 0x7A,  // @|{....z
                                /* 3370 */  0xB4, 0x3E, 0xFF, 0x80, 0xE7, 0x84, 0xC1, 0xAE,  // .>......
                                /* 3378 */  0x19, 0x4F, 0x19, 0xEC, 0xEE, 0xEB, 0xAB, 0x8A,  // .O......
                                /* 3380 */  0x31, 0x1F, 0x7E, 0x7C, 0x31, 0xF2, 0x61, 0xE6,  // 1.~|1.a.
                                /* 3388 */  0xFD, 0x11, 0x1B, 0xCD, 0xC7, 0x28, 0x58, 0x8C,  // .....(X.
                                /* 3390 */  0x37, 0x82, 0xC2, 0xC0, 0xA0, 0x8E, 0x51, 0x30,  // 7.....Q0
                                /* 3398 */  0xFE, 0xFF, 0xC7, 0x28, 0xC0, 0xCC, 0xE9, 0xC1,  // ...(....
                                /* 33A0 */  0x27, 0x51, 0xF0, 0x9F, 0x71, 0x0F, 0x9E, 0x9F,  // 'Q..q...
                                /* 33A8 */  0xA4, 0x8D, 0x7D, 0x32, 0xF1, 0xDF, 0x8F, 0xD8,  // ..}2....
                                /* 33B0 */  0xA5, 0x99, 0x41, 0x9D, 0xD0, 0xBB, 0x9C, 0xEF,  // ..A.....
                                /* 33B8 */  0x30, 0x3E, 0x4C, 0xC1, 0xBE, 0x8E, 0xBC, 0x39,  // 0>L....9
                                /* 33C0 */  0x84, 0x38, 0xAD, 0x10, 0x27, 0xF6, 0xE8, 0xF0,  // .8..'...
                                /* 33C8 */  0x26, 0xF1, 0x12, 0x15, 0x22, 0x42, 0x9C, 0x1A,  // &..."B..
                                /* 33D0 */  0x51, 0x74, 0x9B, 0x0A, 0xD2, 0x1A, 0x0A, 0x51,  // Qt.....Q
                                /* 33D8 */  0x78, 0x0E, 0x25, 0x40, 0x51, 0xCE, 0xEA, 0xF1,  // x.%@Q...
                                /* 33E0 */  0xCD, 0x58, 0x86, 0x08, 0x7A, 0x3E, 0xD1, 0x62,  // .X..z>.b
                                /* 33E8 */  0x47, 0x89, 0xF1, 0x30, 0xC5, 0x64, 0x3C, 0x1D,  // G..0.d<.
                                /* 33F0 */  0x74, 0x88, 0xF1, 0x61, 0x0A, 0x30, 0xF0, 0xFF,  // t..a.0..
                                /* 33F8 */  0x3F, 0x4C, 0x01, 0x76, 0xC2, 0x1E, 0x87, 0xA0,  // ?L.v....
                                /* 3400 */  0x1F, 0x4C, 0x7C, 0x1A, 0x05, 0x2E, 0xF2, 0x4E,  // .L|....N
                                /* 3408 */  0x13, 0xA0, 0x39, 0x44, 0xB0, 0x29, 0x71, 0x94,  // ..9D.)q.
                                /* 3410 */  0xC7, 0x73, 0x9F, 0x90, 0xC0, 0x75, 0x1E, 0xF5,  // .s...u..
                                /* 3418 */  0x30, 0x71, 0xC0, 0x3E, 0x5B, 0x9C, 0x48, 0xC8,  // 0q.>[.H.
                                /* 3420 */  0xC0, 0x8F, 0x08, 0x41, 0xCE, 0xD3, 0x01, 0x0F,  // ...A....
                                /* 3428 */  0xA4, 0x40, 0xF2, 0xFF, 0x3F, 0x4E, 0x78, 0x73,  // .@..?Nxs
                                /* 3430 */  0x62, 0x37, 0x7B, 0x0F, 0x8A, 0x4D, 0xD4, 0x23,  // b7{..M.#
                                /* 3438 */  0x05, 0x5B, 0xE8, 0x53, 0x13, 0xFA, 0xEC, 0xC2,  // .[.S....
                                /* 3440 */  0x8E, 0x2A, 0x67, 0xE7, 0xFB, 0x88, 0x0F, 0x4A,  // .*g....J
                                /* 3448 */  0x7C, 0xA8, 0xE0, 0x02, 0xF4, 0x50, 0xE1, 0x9F,  // |....P..
                                /* 3450 */  0x97, 0x70, 0x43, 0x85, 0x3B, 0xA6, 0x37, 0x93,  // .pC.;.7.
                                /* 3458 */  0x73, 0xC2, 0xCC, 0xE2, 0xA0, 0x3C, 0x53, 0x9F,  // s....<S.
                                /* 3460 */  0xA5, 0xC0, 0x17, 0xF8, 0x50, 0x06, 0x05, 0xFA,  // ....P...
                                /* 3468 */  0xB1, 0x88, 0xCF, 0x94, 0xC5, 0x1B, 0x29, 0xA8,  // ......).
                                /* 3470 */  0x40, 0x7D, 0xB4, 0x00, 0x1E, 0x87, 0x2D, 0x1F,  // @}....-.
                                /* 3478 */  0x12, 0xEC, 0x72, 0xA0, 0x10, 0xFF, 0xFF, 0x03,  // ..r.....
                                /* 3480 */  0x05, 0x43, 0xF8, 0x81, 0xA2, 0xCF, 0x33, 0xBE,  // .C....3.
                                /* 3488 */  0x12, 0x62, 0xAF, 0x6A, 0x38, 0x82, 0x21, 0xC7,  // .b.j8.!.
                                /* 3490 */  0x0A, 0x2A, 0x0B, 0x63, 0x05, 0xC5, 0xD9, 0x11,  // .*.c....
                                /* 3498 */  0x7F, 0x64, 0x82, 0x3D, 0x2A, 0x3E, 0x8B, 0xB3,  // .d.=*>..
                                /* 34A0 */  0xC2, 0x9C, 0x2F, 0xD8, 0x70, 0xC1, 0xF7, 0x78,  // ../.p..x
                                /* 34A8 */  0xF1, 0x70, 0xF1, 0x67, 0x00, 0x43, 0x9C, 0x49,  // .p.g.C.I
                                /* 34B0 */  0x84, 0x13, 0x7A, 0x82, 0xF2, 0x3D, 0xE9, 0xDC,  // ..z..=..
                                /* 34B8 */  0x6C, 0x1C, 0x92, 0x04, 0x1D, 0x2E, 0xA8, 0x8E,  // l.......
                                /* 34C0 */  0x64, 0x1E, 0x2E, 0xFC, 0xF3, 0x35, 0xEE, 0x70,  // d....5.p
                                /* 34C8 */  0x02, 0x86, 0x59, 0xE1, 0x70, 0xA2, 0x1C, 0x16,  // ..Y.p...
                                /* 34D0 */  0x3B, 0xCC, 0x19, 0xF9, 0x05, 0xE5, 0x71, 0x01,  // ;.....q.
                                /* 34D8 */  0xE6, 0xFF, 0x7F, 0xC0, 0x60, 0x1A, 0x91, 0xC7,  // ....`...
                                /* 34E0 */  0x62, 0xE8, 0xA0, 0x1E, 0x0C, 0x8E, 0x60, 0xD4,  // b.....`.
                                /* 34E8 */  0xF1, 0x82, 0xCA, 0xC3, 0x78, 0x41, 0x31, 0xAB,  // ....xA1.
                                /* 34F0 */  0xE3, 0x05, 0xD7, 0xA4, 0xD8, 0x69, 0x8D, 0x8D,  // .....i..
                                /* 34F8 */  0x18, 0x73, 0x60, 0x00, 0x3E, 0x03, 0xC6, 0x0C,  // .s`.>...
                                /* 3500 */  0xE3, 0xD1, 0xEE, 0x80, 0xC1, 0x3C, 0x22, 0x0F,  // .....<".
                                /* 3508 */  0x18, 0xF8, 0x4C, 0xCA, 0x03, 0x06, 0xEB, 0xFF,  // ..L.....
                                /* 3510 */  0x7F, 0xC0, 0x30, 0xE3, 0x1F, 0x57, 0xA0, 0x1C,  // ..0..W..
                                /* 3518 */  0x38, 0xF0, 0x07, 0xA0, 0x37, 0x44, 0x4C, 0xCC,  // 8...7DL.
                                /* 3520 */  0x11, 0x83, 0xCA, 0xC4, 0x88, 0x41, 0x71, 0xBD,  // .....Aq.
                                /* 3528 */  0x79, 0xE0, 0x00, 0xF3, 0xB0, 0x30, 0xE3, 0x05,  // y....0..
                                /* 3530 */  0x6B, 0xEC, 0xF3, 0x15, 0x94, 0xF1, 0xB2, 0xF9,  // k.......
                                /* 3538 */  0xBC, 0x69, 0xB2, 0x6B, 0x23, 0x8B, 0x38, 0x5A,  // .i.k#.8Z
                                /* 3540 */  0x50, 0xA9, 0x38, 0x99, 0x01, 0xA1, 0x39, 0x61,  // P.8...9a
                                /* 3548 */  0x60, 0x0E, 0xCA, 0x63, 0x05, 0xE7, 0xFF, 0xFF,  // `..c....
                                /* 3550 */  0xA0, 0x04, 0x63, 0x38, 0x3E, 0xA0, 0x7B, 0xAE,  // ..c8>.{.
                                /* 3558 */  0x30, 0x4E, 0x0A, 0x60, 0x1B, 0xAA, 0x4F, 0x0A,  // 0N.`..O.
                                /* 3560 */  0xC0, 0x63, 0x50, 0x86, 0x78, 0x38, 0x3B, 0x5C,  // .cP.x8;\
                                /* 3568 */  0xE0, 0x12, 0xFD, 0xA4, 0x00, 0xE5, 0x3C, 0xEA,  // ......<.
                                /* 3570 */  0x6B, 0x2B, 0xBB, 0x7F, 0xB0, 0xD1, 0x82, 0x6F,  // k+.....o
                                /* 3578 */  0xA4, 0x1E, 0x2D, 0xF0, 0x00, 0xF3, 0x84, 0xA2,  // ..-.....
                                /* 3580 */  0xBF, 0x1F, 0xBD, 0x11, 0x1A, 0xEB, 0x89, 0xD5,  // ........
                                /* 3588 */  0x83, 0xF5, 0x55, 0xC7, 0x30, 0x91, 0x9F, 0x92,  // ..U.0...
                                /* 3590 */  0xC0, 0x79, 0xCC, 0xC0, 0x0F, 0xE8, 0xFF, 0x1F,  // .y......
                                /* 3598 */  0xDA, 0x23, 0x79, 0xED, 0xF5, 0x79, 0x34, 0xEC,  // .#y..y4.
                                /* 35A0 */  0x3B, 0xAF, 0x2F, 0x8B, 0x3E, 0x16, 0x82, 0xCF,  // ;./.>...
                                /* 35A8 */  0xC6, 0xB1, 0x10, 0xA8, 0x0C, 0x0A, 0xDE, 0x58,  // .......X
                                /* 35B0 */  0xC1, 0x27, 0xF8, 0xC4, 0x0E, 0x0A, 0x94, 0xE8,  // .'......
                                /* 35B8 */  0xCF, 0x11, 0xD6, 0x0A, 0x21, 0xB4, 0x77, 0x67,  // ....!.wg
                                /* 35C0 */  0x06, 0x12, 0xC8, 0x67, 0x76, 0xDF, 0xFF, 0x30,  // ...gv..0
                                /* 35C8 */  0x53, 0x89, 0x19, 0x2F, 0xDA, 0x53, 0xB2, 0x27,  // S../.S.'
                                /* 35D0 */  0x13, 0x22, 0x81, 0x8F, 0x75, 0xF8, 0x81, 0x70,  // ."..u..p
                                /* 35D8 */  0xD4, 0x87, 0x78, 0x36, 0x90, 0xF7, 0x78, 0xE3,  // ..x6..x.
                                /* 35E0 */  0x1F, 0x97, 0x8F, 0xDC, 0x46, 0x38, 0xAE, 0x27,  // ....F8.'
                                /* 35E8 */  0xED, 0xD7, 0x3F, 0xEC, 0x59, 0x1E, 0x27, 0xF2,  // ..?.Y.'.
                                /* 35F0 */  0x25, 0x40, 0xA5, 0x1F, 0xA7, 0x24, 0x0B, 0x06,  // %@...$..
                                /* 35F8 */  0x75, 0x3A, 0x07, 0x76, 0xFF, 0xFF, 0xD3, 0x39,  // u:.v...9
                                /* 3600 */  0xB0, 0x39, 0xE4, 0x83, 0xE7, 0x38, 0x00, 0x6B,  // .9...8.k
                                /* 3608 */  0xF6, 0xBE, 0x07, 0x3C, 0x06, 0x84, 0x0A, 0xFE,  // ...<....
                                /* 3610 */  0x0E, 0xF1, 0x9C, 0xEF, 0xB9, 0xC4, 0x8F, 0xF0,  // ........
                                /* 3618 */  0x5C, 0x0E, 0x1F, 0x24, 0x68, 0x6F, 0xF7, 0x70,  // \..$ho.p
                                /* 3620 */  0x0D, 0x29, 0xC6, 0x73, 0x40, 0x63, 0x47, 0x17,  // .).s@cG.
                                /* 3628 */  0x1D, 0x68, 0x9F, 0x18, 0xE2, 0x04, 0x8B, 0x72,  // .h.....r
                                /* 3630 */  0x5C, 0x46, 0x8B, 0x15, 0xE5, 0x21, 0xE2, 0x98,  // \F...!..
                                /* 3638 */  0x02, 0x1E, 0x5A, 0x94, 0x60, 0x31, 0x22, 0x04,  // ..Z.`1".
                                /* 3640 */  0x7B, 0x75, 0x88, 0x14, 0x34, 0xCA, 0x9B, 0xB8,  // {u..4...
                                /* 3648 */  0xA1, 0xC2, 0x3D, 0x97, 0xB3, 0x70, 0xA7, 0x01,  // ..=..p..
                                /* 3650 */  0x1D, 0x37, 0x7C, 0x2E, 0x07, 0x2C, 0xFF, 0xFF,  // .7|..,..
                                /* 3658 */  0xCF, 0xE5, 0x60, 0x3E, 0x70, 0xE0, 0x0E, 0x22,  // ..`>p.."
                                /* 3660 */  0x60, 0x3B, 0x2A, 0xE0, 0x8E, 0x20, 0xC0, 0x48,  // `;*.. .H
                                /* 3668 */  0xAC, 0x1A, 0x10, 0x16, 0xE0, 0x88, 0x20, 0x79,  // ...... y
                                /* 3670 */  0x30, 0xA8, 0x23, 0x08, 0xE0, 0xEA, 0xE8, 0xC8,  // 0.#.....
                                /* 3678 */  0x4F, 0xBB, 0x60, 0x39, 0x34, 0xF8, 0xE8, 0x63,  // O.`94..c
                                /* 3680 */  0x2C, 0x76, 0x64, 0x64, 0xB7, 0x46, 0xC3, 0xBD,  // ,vdd.F..
                                /* 3688 */  0xD8, 0x1B, 0xFA, 0x05, 0xCA, 0xD7, 0x2F, 0x76,  // ....../v
                                /* 3690 */  0x08, 0xF2, 0x09, 0xC2, 0x04, 0x3E, 0x85, 0xB0,  // .....>..
                                /* 3698 */  0xFF, 0xFF, 0x29, 0x04, 0xDE, 0xB9, 0xE3, 0xA1,  // ..).....
                                /* 36A0 */  0x23, 0xCC, 0x41, 0x45, 0x78, 0x08, 0x39, 0xAC,  // #.AEx.9.
                                /* 36A8 */  0xE7, 0x85, 0xB7, 0x8F, 0x48, 0xC6, 0x39, 0xA2,  // ....H.9.
                                /* 36B0 */  0xA7, 0x10, 0xA3, 0x1C, 0x8E, 0x4F, 0x21, 0xC6,  // .....O!.
                                /* 36B8 */  0x78, 0x04, 0x31, 0xCA, 0x93, 0xC8, 0xD3, 0x48,  // x.1....H
                                /* 36C0 */  0x84, 0x58, 0x21, 0x4E, 0x33, 0x64, 0xB0, 0xC7,  // .X!N3d..
                                /* 36C8 */  0x90, 0x68, 0x41, 0x4E, 0xE0, 0x29, 0x84, 0xC5,  // .hAN.)..
                                /* 36D0 */  0x5B, 0xA1, 0x86, 0xE8, 0x53, 0x08, 0xC0, 0x8F,  // [...S...
                                /* 36D8 */  0xD3, 0xAC, 0x8D, 0x8C, 0x07, 0x35, 0x10, 0x9F,  // .....5..
                                /* 36E0 */  0x38, 0x0C, 0xF1, 0x56, 0x65, 0xFC, 0x18, 0xA7,  // 8..Ve...
                                /* 36E8 */  0xF4, 0xD8, 0x85, 0x3F, 0xD8, 0x81, 0x6B, 0x1F,  // ...?..k.
                                /* 36F0 */  0x1A, 0x1D, 0xFA, 0xFF, 0x7F, 0x9C, 0x06, 0xF3,  // ........
                                /* 36F8 */  0x41, 0x02, 0xCE, 0xBC, 0xB0, 0xC7, 0x42, 0x26,  // A.....B&
                                /* 3700 */  0xEB, 0x78, 0x06, 0x9A, 0xEB, 0xC3, 0xA3, 0x82,  // .x......
                                /* 3708 */  0x16, 0x26, 0x25, 0x03, 0x46, 0xC1, 0x7B, 0xC0,  // .&%.F.{.
                                /* 3710 */  0xD8, 0xB3, 0x2E, 0x03, 0x79, 0x1D, 0xE7, 0x07,  // ....y...
                                /* 3718 */  0x5D, 0x9F, 0xB4, 0x19, 0x81, 0xE3, 0x8E, 0x19,  // ].......
                                /* 3720 */  0x54, 0x07, 0x04, 0x70, 0x1C, 0x4B, 0x8E, 0x19,  // T..p.K..
                                /* 3728 */  0xCC, 0xB7, 0x62, 0x3E, 0x35, 0x18, 0x87, 0x4B,  // ..b>5..K
                                /* 3730 */  0xB0, 0x1D, 0x48, 0x6A, 0x83, 0x24, 0xE3, 0x06,  // ..Hj.$..
                                /* 3738 */  0x07, 0xB2, 0xC7, 0x0D, 0xB6, 0xFF, 0xFF, 0xB8,  // ........
                                /* 3740 */  0x61, 0x01, 0x7A, 0xDC, 0xC0, 0xEE, 0x88, 0xC9,  // a.z.....
                                /* 3748 */  0xC6, 0x0D, 0x3C, 0x64, 0x8D, 0x1B, 0x7D, 0x1A,  // ..<d..}.
                                /* 3750 */  0xF2, 0xB8, 0xB1, 0x57, 0x1F, 0x76, 0x78, 0xE2,  // ...W.vx.
                                /* 3758 */  0x23, 0x87, 0x17, 0x79, 0xE4, 0xA0, 0x02, 0xF5,  // #..y....
                                /* 3760 */  0xC8, 0xE1, 0x1F, 0x91, 0xC0, 0x33, 0x72, 0x38,  // .....3r8
                                /* 3768 */  0x93, 0xC3, 0x8E, 0x1D, 0x98, 0x48, 0x1A, 0x3B,  // .....H.;
                                /* 3770 */  0xF2, 0xFF, 0x4F, 0x70, 0x00, 0x1E, 0x3B, 0x76,  // ..Op..;v
                                /* 3778 */  0x2A, 0x30, 0xA0, 0x5E, 0xC2, 0x31, 0x37, 0x2D,  // *0.^.17-
                                /* 3780 */  0x07, 0x1E, 0x3A, 0xA8, 0x2C, 0x0C, 0x1D, 0x14,  // ..:.,...
                                /* 3788 */  0x67, 0x53, 0xDC, 0xD0, 0xC1, 0x37, 0x37, 0x18,  // gS...77.
                                /* 3790 */  0x07, 0x76, 0x1C, 0xDC, 0xA3, 0x2F, 0xB8, 0x46,  // .v.../.F
                                /* 3798 */  0xCE, 0x05, 0x1D, 0x89, 0xD0, 0x43, 0xF5, 0xC8,  // .....C..
                                /* 37A0 */  0xB1, 0x17, 0xA6, 0x30, 0xE1, 0xDF, 0xEC, 0x0C,  // ...0....
                                /* 37A8 */  0x7F, 0x52, 0xCF, 0x91, 0x9E, 0xCA, 0xAB, 0xA5,  // .R......
                                /* 37B0 */  0x4F, 0x10, 0x60, 0x3B, 0xD5, 0x79, 0xDC, 0xF0,  // O.`;.y..
                                /* 37B8 */  0x45, 0x8F, 0x1B, 0xD4, 0x43, 0x3E, 0xAF, 0x90,  // E...C>..
                                /* 37C0 */  0x11, 0x62, 0xF9, 0x04, 0xE1, 0xD9, 0x31, 0x90,  // .b....1.
                                /* 37C8 */  0xB3, 0xC3, 0xFC, 0xFF, 0x67, 0xE7, 0xA3, 0x11,  // ....g...
                                /* 37D0 */  0x18, 0xE5, 0x9D, 0x20, 0xD0, 0x50, 0x1E, 0x38,  // ... .P.8
                                /* 37D8 */  0x16, 0x22, 0xF0, 0x6B, 0x98, 0xA7, 0x73, 0xB6,  // .".k..s.
                                /* 37E0 */  0x56, 0x3F, 0x15, 0x9D, 0x46, 0xE0, 0x05, 0x1F,  // V?..F...
                                /* 37E8 */  0x3C, 0xA8, 0x3C, 0x0C, 0x1E, 0x14, 0x73, 0x3D,  // <.<...s=
                                /* 37F0 */  0x78, 0x30, 0xCF, 0x0E, 0xC6, 0x91, 0xC4, 0x13,  // x0......
                                /* 37F8 */  0x62, 0x17, 0x12, 0x78, 0xE7, 0x08, 0xF0, 0x89,  // b..x....
                                /* 3800 */  0x3A, 0x22, 0x81, 0x60, 0xFC, 0x70, 0x70, 0x1E,  // :".`.pp.
                                /* 3808 */  0x43, 0x7D, 0xA5, 0x4E, 0x30, 0xF4, 0xE0, 0x41,  // C}.N0..A
                                /* 3810 */  0x35, 0x2C, 0x0F, 0x1E, 0xF6, 0xFF, 0xFF, 0x20,  // 5,..... 
                                /* 3818 */  0x01, 0xF6, 0xC1, 0xC3, 0x1E, 0x1D, 0x3F, 0xDA,  // ......?.
                                /* 3820 */  0x00, 0x8B, 0xA1, 0x83, 0xEB, 0x48, 0x02, 0x3E,  // .....H.>
                                /* 3828 */  0x13, 0x67, 0x24, 0xA0, 0x37, 0x74, 0x70, 0x9C,  // .g$.7tp.
                                /* 3830 */  0x21, 0xC0, 0x29, 0xEE, 0xB8, 0x05, 0x82, 0x91,  // !.).....
                                /* 3838 */  0xC3, 0x3A, 0xE7, 0x7B, 0x40, 0x51, 0xFC, 0xFF,  // .:.{@Q..
                                /* 3840 */  0x47, 0x79, 0x58, 0xF4, 0x89, 0x04, 0x5C, 0x2A,  // GyX...\*
                                /* 3848 */  0x4E, 0x24, 0x40, 0x7E, 0x7C, 0xF8, 0x73, 0x04,  // N$@~|.s.
                                /* 3850 */  0x58, 0x4F, 0x24, 0xE0, 0x9D, 0xCC, 0x6B, 0xB6,  // XO$...k.
                                /* 3858 */  0x4F, 0x24, 0x60, 0x1B, 0xBA, 0x4F, 0x24, 0xC0,  // O$`..O$.
                                /* 3860 */  0x7D, 0x74, 0x6C, 0xE8, 0xF0, 0xFE, 0xFF, 0x67,  // }tl....g
                                /* 3868 */  0x1B, 0xE0, 0x35, 0xE5, 0x37, 0x12, 0x0F, 0x1D,  // ..5.7...
                                /* 3870 */  0x5C, 0xC3, 0xF6, 0xD9, 0x06, 0xD8, 0x8F, 0xCE,  // \.......
                                /* 3878 */  0x43, 0x07, 0xB6, 0x97, 0xA8, 0xE7, 0x82, 0xB3,  // C.......
                                /* 3880 */  0x39, 0x74, 0xB0, 0xD9, 0x18, 0x3A, 0x90, 0xF9,  // 9t...:..
                                /* 3888 */  0xFF, 0x0F, 0x1D, 0x8C, 0xA3, 0x63, 0x47, 0x53,  // .....cGS
                                /* 3890 */  0x60, 0x71, 0x9E, 0x84, 0x71, 0x1C, 0x81, 0x07,  // `q..q...
                                /* 3898 */  0x79, 0x38, 0xC7, 0x91, 0xC0, 0x63, 0x07, 0x97,  // y8...c..
                                /* 38A0 */  0x8E, 0xF3, 0x08, 0x20, 0x60, 0x78, 0xEC, 0xE8,  // ... `x..
                                /* 38A8 */  0x06, 0x5C, 0x47, 0x73, 0x32, 0xD1, 0x0E, 0x1D,  // .\Gs2...
                                /* 38B0 */  0x3C, 0xFF, 0xFF, 0xA1, 0x33, 0x1F, 0x43, 0x07,  // <...3.C.
                                /* 38B8 */  0x04, 0x8C, 0xCE, 0x67, 0x24, 0xE0, 0x8B, 0x70,  // ...g$..p
                                /* 38C0 */  0x44, 0x87, 0x0E, 0xB6, 0x41, 0x79, 0xE8, 0xC0,  // D...Ay..
                                /* 38C8 */  0x7E, 0x74, 0x1E, 0x3A, 0x70, 0xF9, 0xFF, 0x0F,  // ~t.:p...
                                /* 38D0 */  0x1D, 0x1C, 0xA3, 0x78, 0x72, 0xF3, 0xD0, 0xC1,  // ...xr...
                                /* 38D8 */  0x75, 0xFE, 0xF5, 0xD0, 0x81, 0xFD, 0xE8, 0x3C,  // u......<
                                /* 38E0 */  0x74, 0x60, 0x3B, 0xE4, 0xA3, 0x38, 0x9C, 0x43,  // t`;..8.C
                                /* 38E8 */  0x07, 0xDB, 0x50, 0x3C, 0x74, 0xE0, 0x3E, 0xAA,  // ..P<t.>.
                                /* 38F0 */  0xFF, 0xFF, 0xD1, 0xF9, 0x8C, 0x04, 0x5C, 0xAF,  // ......\.
                                /* 38F8 */  0xD3, 0x01, 0x03, 0x9D, 0x67, 0x98, 0x67, 0x24,  // ....g.g$
                                /* 3900 */  0xF0, 0x39, 0x19, 0x3B, 0x90, 0x1F, 0x1E, 0xE6,  // .9.;....
                                /* 3908 */  0x8C, 0x04, 0xCE, 0x33, 0x2E, 0x58, 0xB5, 0x0E,  // ...3.X..
                                /* 3910 */  0x48, 0x17, 0x1B, 0x9F, 0x71, 0xC1, 0x06, 0xE6,  // H...q...
                                /* 3918 */  0x33, 0x2E, 0x98, 0xFE, 0xFF, 0x43, 0x07, 0x3E,  // 3....C.>
                                /* 3920 */  0xA3, 0x63, 0x23, 0x07, 0xE7, 0x49, 0xC6, 0xC0,  // .c#..I..
                                /* 3928 */  0xB8, 0xA1, 0x7B, 0xC4, 0xA7, 0xED, 0x5B, 0xE1,  // ..{...[.
                                /* 3930 */  0x0B, 0xA6, 0x8F, 0xA3, 0x46, 0x89, 0xFE, 0x4A,  // ....F..J
                                /* 3938 */  0x70, 0x48, 0x67, 0x12, 0x22, 0xDA, 0x0B, 0x00,  // pHg."...
                                /* 3940 */  0x43, 0x79, 0xC1, 0x38, 0x8A, 0x47, 0x00, 0x3E,  // Cy.8.G.>
                                /* 3948 */  0x9E, 0xB0, 0x47, 0x12, 0x22, 0x41, 0x91, 0x23,  // ..G."A.#
                                /* 3950 */  0x45, 0x0F, 0x82, 0x0F, 0x20, 0x5E, 0x74, 0x0F,  // E... ^t.
                                /* 3958 */  0xE2, 0x64, 0xA2, 0x84, 0x3E, 0x26, 0x0F, 0xF4,  // .d..>&..
                                /* 3960 */  0x1C, 0x23, 0x1C, 0x53, 0xB9, 0x17, 0x05, 0xA2,  // .#.S....
                                /* 3968 */  0x79, 0x8A, 0x9A, 0x57, 0xD9, 0x40, 0x22, 0xF0,  // y..W.@".
                                /* 3970 */  0x08, 0x78, 0x4C, 0x12, 0x1A, 0xEB, 0x8C, 0xA0,  // .xL.....
                                /* 3978 */  0x60, 0x30, 0x28, 0x0D, 0x20, 0x92, 0x73, 0x18,  // `0(. .s.
                                /* 3980 */  0x40, 0xB1, 0xF9, 0x58, 0x70, 0x22, 0xEF, 0x76,  // @..Xp".v
                                /* 3988 */  0x3E, 0x0B, 0x58, 0x12, 0x1C, 0x6A, 0x98, 0x9E,  // >.X..j..
                                /* 3990 */  0xD8, 0x33, 0xC0, 0xE1, 0x9E, 0xC8, 0xF9, 0xFB,  // .3......
                                /* 3998 */  0x32, 0x10, 0x92, 0x1D, 0x8F, 0x3D, 0x14, 0x7E,  // 2....=.~
                                /* 39A0 */  0x40, 0xF0, 0xB4, 0x4E, 0xCA, 0xDA, 0x11, 0x35,  // @..N...5
                                /* 39A8 */  0x28, 0xC3, 0x24, 0xF0, 0x59, 0x81, 0xA1, 0x71,  // (.$.Y..q
                                /* 39B0 */  0x68, 0xEC, 0x30, 0x3C, 0xEE, 0x60, 0x07, 0x71,  // h.0<.`.q
                                /* 39B8 */  0x18, 0x87, 0xF7, 0x1C, 0xC2, 0x26, 0x74, 0xA2,  // .....&t.
                                /* 39C0 */  0x07, 0xF9, 0x46, 0x50, 0x3C, 0xAA, 0x30, 0x9A,  // ..FP<.0.
                                /* 39C8 */  0x83, 0x22, 0x41, 0x8E, 0x0B, 0x10, 0xFE, 0xFF,  // ."A.....
                                /* 39D0 */  0xC7, 0x05, 0x58, 0x60, 0x9E, 0xF1, 0x83, 0x81,  // ..X`....
                                /* 39D8 */  0x21, 0x62, 0xF1, 0x73, 0x42, 0x8C, 0x50, 0x31,  // !b.sB.P1
                                /* 39E0 */  0x4E, 0x1C, 0x0B, 0x74, 0x4C, 0x47, 0xE3, 0x53,  // N..tLG.S
                                /* 39E8 */  0xBF, 0x61, 0x22, 0x1B, 0xD1, 0x20, 0x11, 0x23,  // .a".. .#
                                /* 39F0 */  0x9C, 0x9E, 0xAF, 0xFE, 0xC6, 0xF4, 0x0D, 0xC2,  // ........
                                /* 39F8 */  0xE8, 0x46, 0x09, 0x1B, 0xEF, 0x01, 0xC2, 0x04,  // .F......
                                /* 3A00 */  0x86, 0x39, 0x28, 0xCC, 0xD1, 0xC2, 0x9E, 0x6F,  // .9(....o
                                /* 3A08 */  0x0D, 0xE4, 0x68, 0xC1, 0xDC, 0x1F, 0x1B, 0xA4,  // ..h.....
                                /* 3A10 */  0x0C, 0x42, 0xE3, 0x8B, 0x7D, 0x98, 0xC6, 0x6A,  // .B..}..j
                                /* 3A18 */  0x0B, 0x46, 0x18, 0xBD, 0xA1, 0x90, 0x51, 0x86,  // .F....Q.
                                /* 3A20 */  0x8B, 0xF3, 0xFC, 0x10, 0x25, 0x5A, 0x71, 0x02,  // ....%Zq.
                                /* 3A28 */  0x14, 0x43, 0x11, 0xA4, 0xD6, 0x10, 0x84, 0x11,  // .C......
                                /* 3A30 */  0x38, 0x52, 0xB4, 0x38, 0x46, 0xF4, 0x90, 0xDA,  // 8R.8F...
                                /* 3A38 */  0x1F, 0x04, 0x91, 0xE0, 0xE1, 0xA8, 0xCE, 0x22,  // ......."
                                /* 3A40 */  0x8D, 0x06, 0x75, 0x6A, 0xF0, 0xF9, 0xC0, 0x67,  // ..uj...g
                                /* 3A48 */  0x83, 0x33, 0x3B, 0x2A, 0x8F, 0x21, 0xC8, 0xB1,  // .3;*.!..
                                /* 3A50 */  0x1C, 0xC0, 0x93, 0xC3, 0x83, 0x81, 0x8F, 0x00,  // ........
                                /* 3A58 */  0x6C, 0x6A, 0x3E, 0x8D, 0xF8, 0xA4, 0x80, 0x77,  // lj>....w
                                /* 3A60 */  0x0D, 0xA8, 0x2B, 0xC2, 0x03, 0x02, 0x3B, 0x8C,  // ..+...;.
                                /* 3A68 */  0xC0, 0x3F, 0x73, 0xC0, 0x1F, 0x8F, 0x4F, 0x04,  // .?s...O.
                                /* 3A70 */  0x9E, 0xCF, 0x09, 0x27, 0xB0, 0xFC, 0x41, 0xA0,  // ...'..A.
                                /* 3A78 */  0x46, 0x66, 0x68, 0x9F, 0x2D, 0x4E, 0xEB, 0x99,  // Ffh.-N..
                                /* 3A80 */  0xC0, 0x87, 0x81, 0xC3, 0x62, 0x62, 0x21, 0xA4,  // ....bb!.
                                /* 3A88 */  0xE0, 0xAC, 0x02, 0x8A, 0xF1, 0xC0, 0xFE, 0xFF,  // ........
                                /* 3A90 */  0x13, 0x1C, 0xFF, 0xF3, 0x86, 0x6F, 0x0F, 0x9E,  // .....o..
                                /* 3A98 */  0xAF, 0x09, 0x86, 0x3D, 0x56, 0xD1, 0xF1, 0xF0,  // ...=V...
                                /* 3AA0 */  0x51, 0xF8, 0x74, 0x84, 0x0B, 0x77, 0xA6, 0x01,  // Q.t..w..
                                /* 3AA8 */  0xD5, 0xBF, 0x43, 0x03, 0x03, 0xC1, 0xD9, 0xE0,  // ..C.....
                                /* 3AB0 */  0x99, 0x06, 0x3C, 0x17, 0x08, 0x7E, 0xB8, 0x02,  // ..<..~..
                                /* 3AB8 */  0xAB, 0x94, 0x13, 0x11, 0x7A, 0x80, 0x3E, 0x6A,  // ....z.>j
                                /* 3AC0 */  0xB0, 0x33, 0x06, 0x3F, 0xC2, 0xC4, 0xF1, 0xC0,  // .3.?....
                                /* 3AC8 */  0x3C, 0xA0, 0x57, 0xA8, 0x38, 0xA7, 0xE8, 0xD1,  // <.W.8...
                                /* 3AD0 */  0xB2, 0x51, 0x7B, 0xB4, 0xE0, 0x39, 0x15, 0x80,  // .Q{..9..
                                /* 3AD8 */  0xE3, 0x7C, 0xE0, 0x23, 0x09, 0x98, 0xCE, 0x22,  // .|.#..."
                                /* 3AE0 */  0x98, 0x89, 0x61, 0x81, 0x3C, 0x32, 0x36, 0x6A,  // ..a.<26j
                                /* 3AE8 */  0x30, 0xFF, 0xFF, 0x47, 0x0D, 0x03, 0xF8, 0x71,  // 0..G...q
                                /* 3AF0 */  0x85, 0x4D, 0x33, 0x6E, 0x88, 0xA3, 0x06, 0x16,  // .M3n....
                                /* 3AF8 */  0x80, 0x1E, 0x35, 0xF0, 0x18, 0x18, 0x76, 0xD4,  // ..5...v.
                                /* 3B00 */  0xC0, 0x73, 0x14, 0x8F, 0x40, 0x47, 0x0D, 0x6C,  // .s..@G.l
                                /* 3B08 */  0x40, 0x3D, 0x6A, 0x60, 0x32, 0x30, 0xDC, 0xA8,  // @=j`20..
                                /* 3B10 */  0xC1, 0xF5, 0xFF, 0x1F, 0x35, 0x58, 0x64, 0x8C,  // ....5Xd.
                                /* 3B18 */  0x5A, 0x07, 0x42, 0x8F, 0x9A, 0x9F, 0xB2, 0x7C,  // Z.B....|
                                /* 3B20 */  0xFA, 0xF1, 0x28, 0x3C, 0x93, 0x77, 0x2C, 0x1F,  // ..(<.w,.
                                /* 3B28 */  0x2C, 0xA2, 0x3F, 0xC0, 0x18, 0x28, 0xCA, 0xEB,  // ,.?..(..
                                /* 3B30 */  0x58, 0xEF, 0x78, 0xBA, 0xDE, 0x39, 0xEA, 0xA0,  // X.x..9..
                                /* 3B38 */  0x41, 0x65, 0x61, 0xD0, 0xA0, 0x98, 0xD8, 0x41,  // Aea....A
                                /* 3B40 */  0x83, 0x65, 0x5C, 0xF8, 0x61, 0x9C, 0x17, 0x06,  // .e\.a...
                                /* 3B48 */  0xE6, 0xC0, 0x0E, 0xE8, 0xC0, 0x3C, 0x67, 0x36,  // .....<g6
                                /* 3B50 */  0x66, 0xF0, 0x38, 0xBB, 0x44, 0xE9, 0xD0, 0xC4,  // f.8.D...
                                /* 3B58 */  0x8F, 0x76, 0x60, 0x1B, 0x44, 0x98, 0x83, 0x88,  // .v`.D...
                                /* 3B60 */  0xF4, 0x46, 0xF0, 0x3C, 0x67, 0xB8, 0x48, 0xAF,  // .F.<g.H.
                                /* 3B68 */  0x73, 0x86, 0x89, 0x14, 0xC6, 0x27, 0x77, 0x86,  // s....'w.
                                /* 3B70 */  0x61, 0xF4, 0xD3, 0x0A, 0xE4, 0x0B, 0x9E, 0x71,  // a......q
                                /* 3B78 */  0x9E, 0xF1, 0x80, 0x5B, 0x36, 0x15, 0x20, 0x4C,  // ...[6. L
                                /* 3B80 */  0xBE, 0x81, 0xFF, 0x3F, 0x44, 0x79, 0xCF, 0x02,  // ...?Dy..
                                /* 3B88 */  0x0A, 0xE3, 0x33, 0x1E, 0xE0, 0x4A, 0xF0, 0x99,  // ..3..J..
                                /* 3B90 */  0x01, 0x34, 0xA7, 0x47, 0xB8, 0x38, 0xBE, 0x08,  // .4.G.8..
                                /* 3B98 */  0xBC, 0x07, 0x04, 0x7A, 0x67, 0x30, 0xFC, 0xC1,  // ...zg0..
                                /* 3BA0 */  0x1C, 0xCD, 0x11, 0x44, 0x78, 0xAE, 0x03, 0xC3,  // ...Dx...
                                /* 3BA8 */  0x8C, 0x1E, 0x1A, 0x9E, 0xEB, 0x7C, 0xA7, 0x7B,  // .....|.{
                                /* 3BB0 */  0x11, 0x78, 0x79, 0xF3, 0xB9, 0x8E, 0x9D, 0xB1,  // .xy.....
                                /* 3BB8 */  0x62, 0x3D, 0xD7, 0x19, 0xED, 0x81, 0xCE, 0x28,  // b=.....(
                                /* 3BC0 */  0x81, 0x0E, 0x22, 0x4C, 0x3C, 0x43, 0x45, 0x09,  // .."L<CE.
                                /* 3BC8 */  0xF1, 0x50, 0x60, 0xD0, 0x20, 0xF1, 0x9E, 0xEB,  // .P`. ...
                                /* 3BD0 */  0x5E, 0x33, 0x3C, 0xC5, 0xE7, 0x3A, 0x16, 0xF0,  // ^3<..:..
                                /* 3BD8 */  0x3C, 0xA0, 0xA3, 0x87, 0xCF, 0x75, 0xC0, 0xF8,  // <....u..
                                /* 3BE0 */  0xFF, 0x7F, 0xAE, 0x03, 0x6C, 0x9D, 0x5C, 0xC1,  // ....l.\.
                                /* 3BE8 */  0x7F, 0x58, 0xC0, 0x11, 0xF8, 0x18, 0x02, 0x3C,  // .X.....<
                                /* 3BF0 */  0x34, 0x9F, 0x23, 0x75, 0x24, 0x70, 0xD6, 0xD5,  // 4.#u$p..
                                /* 3BF8 */  0xCA, 0xC6, 0x6A, 0x7D, 0x5A, 0x36, 0x84, 0x74,  // ..j}Z6.t
                                /* 3C00 */  0x00, 0xE9, 0xA8, 0xCC, 0x3D, 0x62, 0x0B, 0xF7,  // ....=b..
                                /* 3C08 */  0xD1, 0x96, 0x4F, 0xE3, 0x25, 0xC1, 0x10, 0xCF,  // ..O.%...
                                /* 3C10 */  0xC0, 0x26, 0x98, 0xFA, 0xC0, 0xA0, 0xB3, 0x9F,  // .&......
                                /* 3C18 */  0x47, 0xEF, 0xBC, 0x24, 0xCA, 0x3C, 0x26, 0x3A,  // G..$.<&:
                                /* 3C20 */  0x04, 0xA7, 0x3C, 0x02, 0x52, 0x10, 0x03, 0x3A,  // ..<.R..:
                                /* 3C28 */  0x02, 0x84, 0x8C, 0x1C, 0x08, 0x50, 0x5F, 0x14,  // .....P_.
                                /* 3C30 */  0xDF, 0x43, 0xF9, 0x94, 0x74, 0x69, 0xA0, 0x73,  // .C..ti.s
                                /* 3C38 */  0xF4, 0x75, 0x80, 0xDF, 0x52, 0x7C, 0x40, 0x30,  // .u..R|@0
                                /* 3C40 */  0xB0, 0xD5, 0x5C, 0x89, 0x50, 0x60, 0xFE, 0xFF,  // ..\.P`..
                                /* 3C48 */  0x1F, 0x8D, 0xD8, 0x21, 0x9D, 0x1C, 0x79, 0x40,  // ...!..y@
                                /* 3C50 */  0x73, 0x38, 0xB4, 0xBE, 0x23, 0x01, 0x28, 0x80,  // s8..#.(.
                                /* 3C58 */  0x3C, 0x7F, 0x1F, 0x72, 0x7C, 0x1C, 0x60, 0x17,  // <..r|.`.
                                /* 3C60 */  0x1E, 0xA3, 0x19, 0x9D, 0x47, 0x9F, 0x29, 0xEA,  // ....G.).
                                /* 3C68 */  0xFA, 0xE5, 0x99, 0x1A, 0xC4, 0x33, 0xF5, 0xD5,  // .....3..
                                /* 3C70 */  0xD6, 0x33, 0xC5, 0xCD, 0xC4, 0xA3, 0xC7, 0x5E,  // .3.....^
                                /* 3C78 */  0x4C, 0xD8, 0x7D, 0x03, 0xCE, 0x98, 0x23, 0x3E,  // L.}...#>
                                /* 3C80 */  0x16, 0x78, 0x1A, 0x86, 0xF3, 0x60, 0x39, 0x9C,  // .x...`9.
                                /* 3C88 */  0x07, 0xCB, 0xC7, 0xE2, 0xC9, 0x82, 0x4B, 0xE0,  // ......K.
                                /* 3C90 */  0x64, 0x41, 0x0E, 0x8F, 0x89, 0x36, 0x28, 0x3A,  // dA...6(:
                                /* 3C98 */  0x1E, 0x0F, 0x8B, 0x9F, 0x0D, 0x7C, 0xE9, 0x61,  // .....|.a
                                /* 3CA0 */  0x87, 0x71, 0x0F, 0xE6, 0xE5, 0xEC, 0x1D, 0xC1,  // .q......
                                /* 3CA8 */  0x17, 0x50, 0x0C, 0xAC, 0x07, 0xCA, 0x61, 0x8D,  // .P....a.
                                /* 3CB0 */  0x16, 0xF6, 0x45, 0xE7, 0xAD, 0xC3, 0x47, 0x16,  // ..E...G.
                                /* 3CB8 */  0x5F, 0xB5, 0x18, 0xAC, 0x2F, 0x5E, 0xE0, 0xBA,  // _.../^..
                                /* 3CC0 */  0x53, 0xB0, 0xAF, 0xC5, 0xFF, 0xFF, 0x45, 0x1D,  // S.....E.
                                /* 3CC8 */  0xCE, 0x51, 0x00, 0xF7, 0xC6, 0xB0, 0xFC, 0x5B,  // .Q.....[
                                /* 3CD0 */  0x06, 0x3A, 0xDA, 0xAA, 0x74, 0xCB, 0xE0, 0xB0,  // .:..t...
                                /* 3CD8 */  0x6F, 0x19, 0x30, 0x83, 0xDC, 0x32, 0x28, 0x84,  // o.0..2(.
                                /* 3CE0 */  0x23, 0x50, 0x28, 0x00, 0x84, 0x0E, 0x0B, 0x5C,  // #P(....\
                                /* 3CE8 */  0x32, 0x1C, 0x05, 0xF1, 0x90, 0x1D, 0xE3, 0xB0,  // 2.......
                                /* 3CF0 */  0x80, 0xBE, 0xBB, 0xF8, 0x96, 0x81, 0x39, 0x2B,  // ......9+
                                /* 3CF8 */  0xC0, 0x3C, 0x66, 0xB0, 0xB3, 0x02, 0xEC, 0x7B,  // .<f....{
                                /* 3D00 */  0x06, 0xF8, 0xCE, 0x13, 0xE0, 0x1E, 0x14, 0x38,  // .......8
                                /* 3D08 */  0xCE, 0x13, 0x80, 0x8B, 0xFF, 0xFF, 0x79, 0x02,  // ......y.
                                /* 3D10 */  0xEE, 0x91, 0xC4, 0xE7, 0x09, 0xE0, 0x74, 0x7A,  // ......tz
                                /* 3D18 */  0x60, 0xE7, 0x09, 0xB0, 0xC8, 0x38, 0x4F, 0xA0,  // `....8O.
                                /* 3D20 */  0x38, 0x2C, 0xF2, 0x3C, 0x01, 0xF1, 0x0E, 0xC9,  // 8,.<....
                                /* 3D28 */  0xEF, 0x92, 0x3A, 0x4E, 0xA0, 0xE4, 0x50, 0x48,  // ..:N..PH
                                /* 3D30 */  0xCC, 0x71, 0x02, 0x15, 0x1F, 0x8C, 0x82, 0x78,  // .q.....x
                                /* 3D38 */  0xA0, 0x1E, 0xB5, 0x8D, 0x0C, 0x84, 0x42, 0x7A,  // ......Bz
                                /* 3D40 */  0x78, 0x1E, 0x08, 0x1F, 0x86, 0x67, 0x81, 0x21,  // x....g.!
                                /* 3D48 */  0x18, 0xE2, 0x8E, 0x49, 0x4F, 0x0B, 0xE0, 0xBA,  // ...IO...
                                /* 3D50 */  0x96, 0xB2, 0x0B, 0x27, 0x3B, 0x58, 0x80, 0xDB,  // ...';X..
                                /* 3D58 */  0xEA, 0x0D, 0x92, 0x1E, 0x1A, 0x80, 0x4B, 0x30,  // ......K0
                                /* 3D60 */  0x08, 0xFD, 0xFF, 0x0F, 0x0D, 0xE0, 0x82, 0xE5,  // ........
                                /* 3D68 */  0x87, 0x06, 0xF0, 0xDC, 0xCD, 0x70, 0x87, 0x06,  // .....p..
                                /* 3D70 */  0xF0, 0x1E, 0x08, 0xF8, 0xC7, 0xC0, 0x49, 0xD6,  // ......I.
                                /* 3D78 */  0x40, 0xC5, 0x3F, 0x10, 0x24, 0x6D, 0x71, 0x14,  // @.?.$mq.
                                /* 3D80 */  0xC6, 0xB7, 0x4B, 0xC0, 0x15, 0xD0, 0xDB, 0x25,  // ..K....%
                                /* 3D88 */  0x38, 0x21, 0xDE, 0xEE, 0x7C, 0x41, 0xF0, 0xE9,  // 8!..|A..
                                /* 3D90 */  0x12, 0xEE, 0xE5, 0x12, 0x36, 0x48, 0xD8, 0xA7,  // ....6H..
                                /* 3D98 */  0xCA, 0xB0, 0x2F, 0x10, 0x11, 0xCE, 0xE9, 0x81,  // ../.....
                                /* 3DA0 */  0xF2, 0xA9, 0xF2, 0xD9, 0x32, 0xCE, 0xFF, 0x3F,  // ....2..?
                                /* 3DA8 */  0x4C, 0xAC, 0xF7, 0x4A, 0x5F, 0x2A, 0x9F, 0x05,  // L..J_*..
                                /* 3DB0 */  0xE3, 0x44, 0x79, 0xB8, 0xF4, 0x09, 0xEE, 0x2D,  // .Dy....-
                                /* 3DB8 */  0xF3, 0x21, 0xD3, 0x93, 0x0B, 0x7C, 0x5E, 0x41,  // .!...|^A
                                /* 3DC0 */  0x22, 0xC4, 0x0C, 0x13, 0xF4, 0x04, 0x22, 0xC7,  // ".....".
                                /* 3DC8 */  0x7C, 0xB9, 0x64, 0xF1, 0x2E, 0x97, 0x00, 0x4D,  // |.d....M
                                /* 3DD0 */  0x8E, 0x08, 0x2F, 0x97, 0xE0, 0x3B, 0x2B, 0xC0,  // ../..;+.
                                /* 3DD8 */  0xBB, 0x5B, 0x02, 0x13, 0x95, 0x5F, 0x71, 0x8D,  // .[..._q.
                                /* 3DE0 */  0xD5, 0x39, 0x29, 0xF4, 0xFF, 0x3F, 0x07, 0xE1,  // .9)..?..
                                /* 3DE8 */  0x54, 0x00, 0xE9, 0xD8, 0xC6, 0x0E, 0xD5, 0x07,  // T.......
                                /* 3DF0 */  0xE8, 0x1B, 0x91, 0x07, 0xEC, 0x61, 0x3D, 0x65,  // .....a=e
                                /* 3DF8 */  0x18, 0xE6, 0xD4, 0x7D, 0xB5, 0x04, 0xDF, 0xED,  // ...}....
                                /* 3E00 */  0x1D, 0x77, 0xDA, 0xE1, 0x67, 0x0B, 0x1F, 0x63,  // .w..g..c
                                /* 3E08 */  0x1E, 0x2D, 0xC1, 0x7B, 0x3A, 0xF7, 0xE1, 0x1C,  // .-.{:...
                                /* 3E10 */  0x4C, 0x57, 0x4B, 0x60, 0x39, 0x53, 0xDC, 0xED,  // LWK`9S..
                                /* 3E18 */  0xC1, 0xB7, 0x88, 0x93, 0xC7, 0xDC, 0x52, 0xDE,  // ......R.
                                /* 3E20 */  0x2C, 0xC1, 0x7E, 0xB0, 0x07, 0xDF, 0xBD, 0x09,  // ,.~.....
                                /* 3E28 */  0x6C, 0xFF, 0xFF, 0x7B, 0x13, 0x30, 0xB9, 0xFC,  // l..{.0..
                                /* 3E30 */  0xF9, 0xDE, 0x04, 0x9C, 0xAE, 0x96, 0xFC, 0x54,  // .......T
                                /* 3E38 */  0x81, 0x05, 0x7A, 0xAB, 0xC0, 0x7C, 0x30, 0x98,  // ..z..|0.
                                /* 3E40 */  0xF4, 0x3B, 0x06, 0x3A, 0xD8, 0xFA, 0x75, 0x8D,  // .;.:..u.
                                /* 3E48 */  0x62, 0x77, 0x0C, 0x98, 0x17, 0x4B, 0xF0, 0xDD,  // bw...K..
                                /* 3E50 */  0x31, 0xE0, 0x9D, 0x14, 0xE0, 0xDD, 0x2B, 0xC1,  // 1.....+.
                                /* 3E58 */  0x73, 0x52, 0x00, 0xDF, 0x69, 0x02, 0xBC, 0x83,  // sR..i...
                                /* 3E60 */  0x82, 0xF1, 0xFF, 0x3F, 0x4D, 0x00, 0xF6, 0x94,  // ...?M...
                                /* 3E68 */  0x5C, 0xEA, 0x80, 0xDE, 0x69, 0x02, 0x7E, 0x8C,  // \...i.~.
                                /* 3E70 */  0x0F, 0x97, 0x2F, 0x52, 0x5E, 0xBD, 0x84, 0xC3,  // ../R^...
                                /* 3E78 */  0xA0, 0x2E, 0x75, 0x80, 0xA9, 0xFF, 0x3F, 0x41,  // ..u...?A
                                /* 3E80 */  0xC1, 0xA3, 0x06, 0xCD, 0x35, 0xCA, 0x17, 0x04,  // ....5...
                                /* 3E88 */  0xDF, 0xE6, 0x7C, 0x33, 0xC5, 0x82, 0x3D, 0x15,  // ..|3..=.
                                /* 3E90 */  0xBC, 0x6B, 0xF9, 0x2E, 0x76, 0xD8, 0xBE, 0x25,  // .k..v..%
                                /* 3E98 */  0x3C, 0x85, 0xF9, 0x38, 0xE0, 0x91, 0xB3, 0x5B,  // <..8...[
                                /* 3EA0 */  0x1D, 0xEC, 0xC3, 0x57, 0xD8, 0xE7, 0xB9, 0x47,  // ...W...G
                                /* 3EA8 */  0x88, 0x83, 0x7A, 0x9C, 0x8B, 0xF2, 0x56, 0xC7,  // ..z...V.
                                /* 3EB0 */  0x8F, 0x11, 0xBE, 0xD5, 0x19, 0xC5, 0x78, 0x51,  // ......xQ
                                /* 3EB8 */  0x62, 0xBE, 0xD0, 0x85, 0x38, 0xB9, 0x28, 0xC1,  // b...8.(.
                                /* 3EC0 */  0x1E, 0xE9, 0x0C, 0x75, 0x7C, 0x61, 0xA3, 0xFB,  // ...u|a..
                                /* 3EC8 */  0x9A, 0x15, 0xE4, 0xDD, 0x2E, 0xD6, 0x5B, 0x1D,  // ......[.
                                /* 3ED0 */  0x8B, 0x7E, 0x62, 0xD1, 0x79, 0xC0, 0xB7, 0x3A,  // .~b.y..:
                                /* 3ED8 */  0x80, 0x1F, 0x87, 0x2C, 0x9F, 0x3F, 0x4C, 0xF0,  // ...,.?L.
                                /* 3EE0 */  0xFF, 0x3F, 0x70, 0xCC, 0x41, 0x01, 0x73, 0x44,  // .?p.A.sD
                                /* 3EE8 */  0xC7, 0x13, 0x8C, 0x78, 0xDD, 0xA5, 0x37, 0x5C,  // ...x..7\
                                /* 3EF0 */  0x1F, 0x4B, 0xF8, 0xA9, 0xC2, 0x07, 0x0A, 0x76,  // .K.....v
                                /* 3EF8 */  0x32, 0xE5, 0x97, 0x7B, 0xCC, 0xE0, 0xE0, 0x5F,  // 2..{..._
                                /* 3F00 */  0x65, 0x7C, 0x9A, 0x00, 0xF7, 0xE9, 0x07, 0x5C,  // e|.....\
                                /* 3F08 */  0x27, 0x87, 0xD7, 0x88, 0x04, 0xBE, 0x12, 0x82,  // '.......
                                /* 3F10 */  0x71, 0xD2, 0x38, 0xB0, 0x50, 0xE1, 0x7C, 0xD2,  // q.8.P.|.
                                /* 3F18 */  0xF6, 0x95, 0x10, 0x98, 0x0C, 0x19, 0x77, 0x22,  // ......w"
                                /* 3F20 */  0xF0, 0x10, 0xF8, 0x00, 0x1E, 0x96, 0xCF, 0xD0,  // ........
                                /* 3F28 */  0x07, 0x9F, 0xF3, 0xC2, 0x9D, 0x60, 0xF8, 0x45,  // .....`.E
                                /* 3F30 */  0x04, 0x73, 0xFE, 0xC1, 0x85, 0x39, 0xD0, 0xD0,  // .s...9..
                                /* 3F38 */  0x28, 0x0F, 0x02, 0xC9, 0x87, 0x41, 0x9D, 0x69,  // (....A.i
                                /* 3F40 */  0x60, 0xFF, 0xFF, 0xCF, 0x34, 0x80, 0x8D, 0xAB,  // `...4...
                                /* 3F48 */  0xB7, 0x8F, 0x0D, 0xE0, 0x50, 0x78, 0x23, 0xA2,  // ....Px#.
                                /* 3F50 */  0x48, 0xCF, 0x01, 0xEC, 0x40, 0xF3, 0xE0, 0xD0,  // H...@...
                                /* 3F58 */  0xE5, 0xD9, 0x84, 0x5C, 0x35, 0x3C, 0x92, 0xC0,  // ...\5<..
                                /* 3F60 */  0x87, 0xF5, 0x66, 0x03, 0xAE, 0x93, 0x0D, 0xEC,  // ..f.....
                                /* 3F68 */  0xC3, 0xAF, 0x4F, 0x10, 0xA7, 0x11, 0xE8, 0x01,  // ..O.....
                                /* 3F70 */  0xD8, 0xD7, 0x1A, 0x9F, 0x22, 0x9E, 0x66, 0x22,  // ....".f"
                                /* 3F78 */  0x44, 0x7A, 0xB2, 0x31, 0x5E, 0x9C, 0x68, 0x4F,  // Dz.1^.hO
                                /* 3F80 */  0x36, 0x3E, 0x27, 0x84, 0x78, 0xC1, 0x61, 0x67,  // 6>'.x.ag
                                /* 3F88 */  0x60, 0x43, 0xC7, 0x88, 0xF0, 0x84, 0x63, 0xE4,  // `C....c.
                                /* 3F90 */  0x08, 0x31, 0xA3, 0x3D, 0xD9, 0xB0, 0xD0, 0x27,  // .1.=...'
                                /* 3F98 */  0x1B, 0x40, 0xC6, 0xFF, 0xFF, 0x64, 0x03, 0x98,  // .@...d..
                                /* 3FA0 */  0x09, 0x7D, 0xD2, 0x43, 0x43, 0xFB, 0x58, 0x03,  // .}.CC.X.
                                /* 3FA8 */  0xB8, 0x3C, 0xFF, 0xF1, 0x63, 0x0D, 0x18, 0xEF,  // .<..c...
                                /* 3FB0 */  0x1B, 0xE7, 0xF0, 0xAE, 0x11, 0xE3, 0xB1, 0x06,  // ........
                                /* 3FB8 */  0x38, 0xFC, 0xFF, 0x8F, 0x35, 0xC0, 0x50, 0xA8,  // 8...5.P.
                                /* 3FC0 */  0x8A, 0x63, 0x1F, 0x46, 0x1A, 0x0C, 0xEA, 0xE4,  // .c.F....
                                /* 3FC8 */  0x07, 0x38, 0x05, 0xF3, 0x15, 0xE0, 0x41, 0xC1,  // .8....A.
                                /* 3FD0 */  0x10, 0xB1, 0xF8, 0xC5, 0x21, 0x46, 0xA8, 0x18,  // ....!F..
                                /* 3FD8 */  0x87, 0x12, 0xE8, 0x2D, 0xE4, 0x89, 0x26, 0x98,  // ...-..&.
                                /* 3FE0 */  0x0F, 0x22, 0x46, 0x62, 0x97, 0x11, 0x1F, 0x68,  // ."Fb...h
                                /* 3FE8 */  0xE0, 0x0F, 0x29, 0x4A, 0x84, 0x07, 0x98, 0x17,  // ..)J....
                                /* 3FF0 */  0x1A, 0x1F, 0x61, 0xE2, 0x3C, 0xD0, 0x18, 0xE7,  // ..a.<...
                                /* 3FF8 */  0xE4, 0x8E, 0xEB, 0x81, 0xC6, 0x47, 0x9A, 0xA3,  // .....G..
                                /* 4000 */  0x79, 0xAA, 0xF1, 0x11, 0xC3, 0x37, 0x9B, 0x07,  // y....7..
                                /* 4008 */  0x1A, 0x0F, 0x2B, 0x42, 0x94, 0x90, 0x91, 0xE2,  // ..+B....
                                /* 4010 */  0x44, 0x31, 0xDE, 0x01, 0x85, 0x3B, 0xC6, 0x07,  // D1...;..
                                /* 4018 */  0x1A, 0x16, 0x6E, 0x29, 0x3A, 0x06, 0xF8, 0x40,  // ..n):..@
                                /* 4020 */  0xC3, 0xFE, 0xFF, 0x07, 0x1A, 0x80, 0x19, 0xB1,  // ........
                                /* 4028 */  0x4F, 0xD9, 0x74, 0x3C, 0xFC, 0xB8, 0xE0, 0x13,  // O.t<....
                                /* 4030 */  0x02, 0xFE, 0xD2, 0xF1, 0x1C, 0xC3, 0x02, 0x1E,  // ........
                                /* 4038 */  0x69, 0x80, 0xF6, 0x29, 0x02, 0xC6, 0x0D, 0xD9,  // i..)....
                                /* 4040 */  0x17, 0x7F, 0x1F, 0x7B, 0xD9, 0x91, 0x06, 0x0C,  // ...{....
                                /* 4048 */  0xFF, 0x7F, 0xF4, 0x97, 0x88, 0xE3, 0xD3, 0xAA,  // ........
                                /* 4050 */  0x34, 0x56, 0xDC, 0x79, 0xC4, 0xC0, 0x47, 0xE2,  // 4V.y..G.
                                /* 4058 */  0x43, 0x81, 0x67, 0xED, 0xA9, 0xFA, 0x0C, 0xCC,  // C.g.....
                                /* 4060 */  0x80, 0x9E, 0x5D, 0x7C, 0x6F, 0x30, 0xC1, 0x98,  // ..]|o0..
                                /* 4068 */  0xC3, 0x05, 0xD5, 0xC9, 0x00, 0x1C, 0x07, 0x63,  // .......c
                                /* 4070 */  0xF0, 0x8C, 0x0B, 0x3B, 0x8B, 0x53, 0x64, 0xE3,  // ...;.Sd.
                                /* 4078 */  0xC2, 0x41, 0x9D, 0xB1, 0x47, 0x0C, 0xAE, 0x53,  // .A..G..S
                                /* 4080 */  0xA7, 0x47, 0x8C, 0x3B, 0x6A, 0xF8, 0xB0, 0x00,  // .G.;j...
                                /* 4088 */  0x03, 0xFE, 0x59, 0xE3, 0x94, 0x8E, 0xD7, 0xE7,  // ..Y.....
                                /* 4090 */  0x29, 0x70, 0x01, 0x7A, 0xBC, 0xF0, 0xCF, 0x47,  // )p.z...G
                                /* 4098 */  0xF8, 0xD3, 0x02, 0x98, 0x46, 0xC5, 0x8F, 0x0B,  // ....F...
                                /* 40A0 */  0x60, 0xB9, 0x20, 0x05, 0x7A, 0x78, 0xF2, 0x68,  // `. .zx.h
                                /* 40A8 */  0xFD, 0xA6, 0xF8, 0xFF, 0x1F, 0x2D, 0x76, 0x64,  // .....-vd
                                /* 40B0 */  0x3E, 0x64, 0xF1, 0x41, 0x9C, 0x2B, 0xE6, 0x02,  // >d.A.+..
                                /* 40B8 */  0xE5, 0xB1, 0x1F, 0x66, 0x02, 0x9F, 0x16, 0xC0,  // ...f....
                                /* 40C0 */  0x05, 0xEA, 0xD3, 0x02, 0xF0, 0x18, 0x16, 0x66,  // .......f
                                /* 40C8 */  0xB2, 0x18, 0x94, 0xC3, 0x62, 0x37, 0x68, 0x03,  // ....b7h.
                                /* 40D0 */  0x1F, 0x30, 0x18, 0x4F, 0x0B, 0x70, 0x4E, 0x48,  // .0.O.pNH
                                /* 40D8 */  0xEC, 0xCE, 0xC5, 0xCF, 0xBC, 0x98, 0xD3, 0x02,  // ........
                                /* 40E0 */  0xF8, 0x2C, 0x9C, 0x16, 0x80, 0xCA, 0xA8, 0xB0,  // .,......
                                /* 40E8 */  0xA7, 0x39, 0xCC, 0x69, 0x01, 0x18, 0xFC, 0xFF,  // .9.i....
                                /* 40F0 */  0xCF, 0x2A, 0xEC, 0x0C, 0x77, 0x32, 0xBE, 0x45,  // .*..w2.E
                                /* 40F8 */  0xB0, 0xC1, 0x1C, 0x91, 0x11, 0x4E, 0xF7, 0x55,  // .....N.U
                                /* 4100 */  0x22, 0xCA, 0x9B, 0x90, 0xEF, 0x55, 0x26, 0x18,  // "....U&.
                                /* 4108 */  0x72, 0xBC, 0xA0, 0x3A, 0xA7, 0x79, 0xBC, 0xF0,  // r..:.y..
                                /* 4110 */  0x8F, 0x7B, 0xB8, 0xB3, 0x2A, 0xEC, 0x71, 0xC1,  // .{..*.q.
                                /* 4118 */  0x38, 0x7F, 0x79, 0x5C, 0xFC, 0xA8, 0x02, 0x8E,  // 8.y\....
                                /* 4120 */  0x01, 0xE3, 0x04, 0x0D, 0x18, 0x7D, 0x68, 0xF3,  // .....}h.
                                /* 4128 */  0x69, 0x01, 0x3F, 0x68, 0x70, 0x84, 0x1D, 0x34,  // i.?hp..4
                                /* 4130 */  0xA8, 0x3C, 0x0C, 0x1A, 0x14, 0xA7, 0xB9, 0x67,  // .<.....g
                                /* 4138 */  0x06, 0xB0, 0x0E, 0x1C, 0xEC, 0xFF, 0xFF, 0x81,  // ........
                                /* 4140 */  0xC3, 0x38, 0x94, 0xE0, 0x0E, 0x95, 0x60, 0xC1,  // .8....`.
                                /* 4148 */  0x89, 0xDF, 0xE3, 0x19, 0x43, 0x03, 0x38, 0x03,  // ....C.8.
                                /* 4150 */  0xA3, 0x44, 0x3A, 0xB2, 0xA8, 0x71, 0x42, 0x3C,  // .D:..qB<
                                /* 4158 */  0x55, 0x02, 0x97, 0x11, 0xF0, 0x58, 0x27, 0x48,  // U....X'H
                                /* 4160 */  0x1A, 0xE0, 0x88, 0x20, 0x89, 0xCF, 0x01, 0x0A,  // ... ....
                                /* 4168 */  0xE3, 0x43, 0x24, 0xE0, 0xEA, 0xB6, 0xE0, 0xB3,  // .C$.....
                                /* 4170 */  0x12, 0x58, 0x8E, 0x02, 0xB0, 0x0F, 0x00, 0xC6,  // .X......
                                /* 4178 */  0x89, 0x14, 0xEF, 0x95, 0xD6, 0x03, 0x38, 0x9A,  // ......8.
                                /* 4180 */  0xC3, 0x79, 0x60, 0x30, 0x81, 0x4F, 0xD9, 0xF0,  // .y`0.O..
                                /* 4188 */  0x71, 0x5F, 0x22, 0xFD, 0xFF, 0x1F, 0xD4, 0xA3,  // q_".....
                                /* 4190 */  0xE3, 0x83, 0xE3, 0x13, 0xE4, 0xDB, 0xE3, 0x09,  // ........
                                /* 4198 */  0x45, 0x8A, 0xF7, 0x1E, 0x69, 0x88, 0x47, 0x48,  // E...i.GH
                                /* 41A0 */  0x43, 0x19, 0xEF, 0x79, 0xDB, 0x47, 0x82, 0x28,  // C..y.G.(
                                /* 41A8 */  0x0F, 0xD8, 0x46, 0x0D, 0x13, 0x22, 0x54, 0xA0,  // ..F.."T.
                                /* 41B0 */  0x10, 0x11, 0x8E, 0xD4, 0xA7, 0x6C, 0x1E, 0xF1,  // .....l..
                                /* 41B8 */  0x40, 0xA0, 0x33, 0x87, 0x4F, 0x91, 0x00, 0x3F,  // @.3.O..?
                                /* 41C0 */  0x6E, 0xC6, 0x3E, 0x87, 0x80, 0xFF, 0xB4, 0x80,  // n.>.....
                                /* 41C8 */  0x3B, 0x88, 0x00, 0x83, 0xFF, 0xFF, 0x41, 0x04,  // ;.....A.
                                /* 41D0 */  0x23, 0xF5, 0x65, 0xA3, 0xD1, 0x3A, 0xEA, 0xA3,  // #.e..:..
                                /* 41D8 */  0x40, 0x36, 0x96, 0x6B, 0x02, 0x1D, 0x5A, 0x1C,  // @6.k..Z.
                                /* 41E0 */  0x9F, 0x4A, 0xC3, 0x89, 0xFB, 0xD8, 0xE3, 0x43,  // .J.....C
                                /* 41E8 */  0x1F, 0x8C, 0x61, 0x9C, 0xC0, 0x59, 0x1C, 0xB6,  // ..a..Y..
                                /* 41F0 */  0x8F, 0x80, 0xBE, 0x7B, 0x61, 0xEE, 0xDC, 0x2C,  // ...{a..,
                                /* 41F8 */  0x22, 0xBC, 0x0E, 0x9B, 0x1E, 0x86, 0xC3, 0x51,  // "......Q
                                /* 4200 */  0xE8, 0x30, 0xE6, 0x81, 0xF9, 0x00, 0xC4, 0xE1,  // .0......
                                /* 4208 */  0x0C, 0x62, 0x40, 0x27, 0x39, 0x8C, 0x82, 0x66,  // .b@'9..f
                                /* 4210 */  0xB6, 0x9E, 0xDE, 0xE3, 0x03, 0x83, 0xF4, 0xC1,  // ........
                                /* 4218 */  0x80, 0x1F, 0x58, 0x8C, 0x69, 0x7C, 0xAB, 0x39,  // ..X.i|.9
                                /* 4220 */  0x15, 0xA1, 0xC0, 0x8C, 0xCD, 0x6E, 0x9D, 0xE0,  // .....n..
                                /* 4228 */  0xD3, 0x77, 0x37, 0x00, 0x05, 0x90, 0x0F, 0x02,  // .w7.....
                                /* 4230 */  0xBE, 0x74, 0xBF, 0x0B, 0xB0, 0x29, 0xBC, 0x77,  // .t...).w
                                /* 4238 */  0x1B, 0xCD, 0xE8, 0x3C, 0xE0, 0x4A, 0x35, 0x5A,  // ...<.J5Z
                                /* 4240 */  0x1E, 0x09, 0x46, 0xA3, 0x35, 0x88, 0x07, 0xE6,  // ..F.5...
                                /* 4248 */  0x50, 0xA3, 0x45, 0x9F, 0xA1, 0x7C, 0x09, 0x80,  // P.E..|..
                                /* 4250 */  0x77, 0x28, 0xC4, 0x1D, 0x54, 0xF8, 0xF9, 0x03,  // w(..T...
                                /* 4258 */  0xCE, 0x41, 0xE1, 0x00, 0x5E, 0x12, 0x3C, 0x19,  // .A..^.<.
                                /* 4260 */  0xC3, 0x79, 0xC8, 0x1C, 0xCE, 0x43, 0xE6, 0x23,  // .y...C.#
                                /* 4268 */  0xF2, 0x94, 0xD9, 0xFF, 0x7F, 0xCA, 0x60, 0x89,  // ......`.
                                /* 4270 */  0x36, 0x34, 0xF4, 0x69, 0xC7, 0x43, 0xC3, 0x9F,  // 64.i.C..
                                /* 4278 */  0xBE, 0xC0, 0x31, 0x3A, 0x70, 0x9F, 0x1C, 0x3C,  // ..1:p..<
                                /* 4280 */  0x3A, 0x70, 0x09, 0xBC, 0x1F, 0x80, 0x1C, 0x1E,  // :p......
                                /* 4288 */  0x73, 0x5A, 0xF4, 0xA0, 0x3C, 0x1E, 0x0F, 0x8B,  // sZ..<...
                                /* 4290 */  0x1F, 0x27, 0x7C, 0x64, 0x62, 0xD8, 0xAF, 0x1D,  // .'|db...
                                /* 4298 */  0x1E, 0xED, 0x09, 0xBE, 0x84, 0x3C, 0x28, 0x63,  // .....<(c
                                /* 42A0 */  0x60, 0x3D, 0x50, 0x0E, 0x6B, 0xB4, 0xB0, 0x8F,  // `=P.k...
                                /* 42A8 */  0x07, 0x8F, 0x2C, 0xBE, 0xEE, 0xF8, 0x6C, 0xCB,  // ..,...l.
                                /* 42B0 */  0x60, 0x3D, 0x58, 0x9F, 0x99, 0xC0, 0x73, 0x22,  // `=X...s"
                                /* 42B8 */  0x61, 0xCF, 0x92, 0xC7, 0x01, 0xEC, 0x31, 0x1E,  // a.....1.
                                /* 42C0 */  0xCE, 0x89, 0x04, 0xF7, 0x44, 0x61, 0xE2, 0x4F,  // ....Da.O
                                /* 42C8 */  0x29, 0xE8, 0x40, 0x6F, 0x00, 0x61, 0x1E, 0x84,  // ).@o.a..
                                /* 42D0 */  0xFF, 0xFF, 0xA7, 0x14, 0x30, 0x8A, 0x3E, 0xA5,  // ....0.>.
                                /* 42D8 */  0x50, 0x08, 0xCB, 0x85, 0x91, 0x58, 0x08, 0x1D,  // P....X..
                                /* 42E0 */  0x34, 0xB8, 0x3C, 0x38, 0x0A, 0xE2, 0x43, 0x93,  // 4.<8..C.
                                /* 42E8 */  0xC3, 0x9C, 0x52, 0x40, 0x75, 0x6E, 0x80, 0x77,  // ..R@un.w
                                /* 42F0 */  0x4A, 0x61, 0xE7, 0x06, 0xD8, 0xD7, 0x14, 0xF0,  // Ja......
                                /* 42F8 */  0x1D, 0x47, 0x80, 0xD3, 0xD0, 0xC0, 0x71, 0x1C,  // .G....q.
                                /* 4300 */  0x01, 0x7C, 0x80, 0xFF, 0xFF, 0x8F, 0x0E, 0x0C,  // .|......
                                /* 4308 */  0xC7, 0x11, 0xC0, 0xD3, 0xD0, 0xF8, 0x71, 0x04,  // ......q.
                                /* 4310 */  0xF8, 0x1C, 0x3D, 0xD8, 0x71, 0x04, 0xAC, 0x92,  // ..=.q...
                                /* 4318 */  0x5F, 0x1C, 0x06, 0xF1, 0x73, 0x41, 0x22, 0x61,  // _...sA"a
                                /* 4320 */  0x50, 0x67, 0x4B, 0xC0, 0xC4, 0xFF, 0xFF, 0x6C,  // PgK....l
                                /* 4328 */  0x09, 0x86, 0x63, 0x3D, 0x98, 0x2F, 0x14, 0x6C,  // ..c=./.l
                                /* 4330 */  0xEE, 0xEC, 0x50, 0x09, 0xFF, 0x18, 0x19, 0xB5,  // ..P.....
                                /* 4338 */  0x33, 0x04, 0x1D, 0x2A, 0x3D, 0xA8, 0x10, 0x2F,  // 3..*=../
                                /* 4340 */  0x93, 0x6F, 0x95, 0x47, 0xF2, 0x10, 0x11, 0xE8,  // .o.G....
                                /* 4348 */  0xA1, 0x92, 0x41, 0x44, 0x7D, 0xA8, 0xF4, 0x65,  // ..AD}..e
                                /* 4350 */  0x32, 0x48, 0x28, 0xA3, 0x1E, 0x58, 0xC4, 0x80,  // 2H(..X..
                                /* 4358 */  0x2F, 0x82, 0x8F, 0x96, 0x41, 0xC2, 0xC7, 0x88,  // /...A...
                                /* 4360 */  0x7D, 0x00, 0x3E, 0x54, 0xB2, 0xC8, 0x6F, 0x06,  // }.>T..o.
                                /* 4368 */  0x9D, 0x04, 0x7C, 0xA8, 0x04, 0xF8, 0x11, 0x58,  // ..|....X
                                /* 4370 */  0xC0, 0xFF, 0xFF, 0x20, 0x83, 0x85, 0xB6, 0xCB,  // ... ....
                                /* 4378 */  0xB1, 0x92, 0x5B, 0x11, 0x27, 0x18, 0xEF, 0xA8,  // ..[.'...
                                /* 4380 */  0x0D, 0xAA, 0x83, 0x8E, 0x47, 0x06, 0xFF, 0xE0,  // ....G...
                                /* 4388 */  0x82, 0x3B, 0x44, 0xC0, 0x1D, 0x12, 0xBB, 0x41,  // .;D....A
                                /* 4390 */  0xE0, 0xEE, 0x0E, 0xEC, 0x4C, 0x03, 0xAE, 0x33,  // ....L..3
                                /* 4398 */  0x36, 0x70, 0xC0, 0x8B, 0x16, 0xD1, 0xE7, 0x53,  // 6p.....S
                                /* 43A0 */  0x9F, 0x45, 0x81, 0xC7, 0x35, 0xC0, 0x43, 0xE0,  // .E..5.C.
                                /* 43A8 */  0x67, 0x09, 0x0F, 0x81, 0x0F, 0xE0, 0x95, 0xFC,  // g.......
                                /* 43B0 */  0x0C, 0x7D, 0xE6, 0x39, 0x31, 0xDC, 0xB9, 0x85,  // .}.91...
                                /* 43B8 */  0x83, 0x9D, 0x32, 0x3F, 0xFA, 0xE0, 0x42, 0x1D,  // ..2?..B.
                                /* 43C0 */  0x63, 0x68, 0x84, 0xF7, 0x80, 0x62, 0xC0, 0xA0,  // ch...b..
                                /* 43C8 */  0x4E, 0x32, 0x60, 0xF9, 0xFF, 0x9F, 0x64, 0x00,  // N2`...d.
                                /* 43D0 */  0x0B, 0xB7, 0x97, 0x27, 0x19, 0xF0, 0x0C, 0xD8,  // ...'....
                                /* 43D8 */  0x43, 0x31, 0xC4, 0x6B, 0x43, 0xCC, 0x63, 0x7C,  // C1.kC.c|
                                /* 43E0 */  0x19, 0x60, 0xE7, 0x82, 0x83, 0x7F, 0x2E, 0x38,  // .`.....8
                                /* 43E8 */  0x7C, 0x63, 0xC5, 0x89, 0x15, 0xE3, 0x4C, 0x5E,  // |c....L^
                                /* 43F0 */  0x9B, 0x8C, 0x1B, 0xE5, 0xEC, 0x71, 0x27, 0x1A,  // .....q'.
                                /* 43F8 */  0xD8, 0x73, 0xAA, 0xF1, 0x08, 0xA3, 0x43, 0xD8,  // .s....C.
                                /* 4400 */  0x73, 0x8C, 0xB1, 0x4F, 0xE2, 0x4D, 0xE6, 0x19,  // s..O.M..
                                /* 4408 */  0xC1, 0x13, 0x8B, 0xF3, 0x44, 0x63, 0x30, 0xDF,  // ....Dc0.
                                /* 4410 */  0xBB, 0x0D, 0xF2, 0x4E, 0xF3, 0x32, 0x13, 0xF5,  // ...N.2..
                                /* 4418 */  0xA9, 0xDB, 0xB8, 0x41, 0x5E, 0xBB, 0x19, 0x42,  // ...A^..B
                                /* 4420 */  0x8C, 0x08, 0x51, 0x43, 0x9C, 0xD5, 0x13, 0x0D,  // ..QC....
                                /* 4428 */  0x13, 0xF1, 0xF6, 0xD0, 0x89, 0x06, 0x30, 0xF4,  // ......0.
                                /* 4430 */  0xFF, 0x3F, 0xD1, 0x00, 0x06, 0x5E, 0x2F, 0x76,  // .?...^/v
                                /* 4438 */  0x72, 0x72, 0x44, 0xA3, 0x46, 0xEC, 0xFD, 0x22,  // rrD.F.."
                                /* 4440 */  0x41, 0x8E, 0x78, 0xD8, 0xA8, 0x67, 0x1A, 0xA0,  // A.x..g..
                                /* 4448 */  0x73, 0x28, 0xC7, 0x1D, 0x27, 0xC0, 0x74, 0x91,  // s(..'.t.
                                /* 4450 */  0x80, 0x3B, 0x60, 0x30, 0x1C, 0x6C, 0xF8, 0x1D,  // .;`0.l..
                                /* 4458 */  0xE2, 0x0D, 0xE2, 0x71, 0x9C, 0x9C, 0x6C, 0x40,  // ...q..l@
                                /* 4460 */  0x78, 0xDC, 0x80, 0x73, 0xB4, 0x01, 0xEF, 0xFF,  // x..s....
                                /* 4468 */  0xFF, 0x68, 0x03, 0x4C, 0xA3, 0x9C, 0x6B, 0xA8,  // .h.L..k.
                                /* 4470 */  0xFC, 0x67, 0x81, 0xC4, 0xC3, 0xA0, 0x8E, 0x36,  // .g.....6
                                /* 4478 */  0x80, 0x2B, 0xC1, 0x87, 0x07, 0x50, 0x4F, 0xFD,  // .+...PO.
                                /* 4480 */  0x4D, 0x27, 0xA6, 0x0F, 0x0F, 0x1E, 0xA0, 0x8F,  // M'......
                                /* 4488 */  0x1C, 0xA7, 0xE2, 0x83, 0x0D, 0xB8, 0x8E, 0x33,  // .......3
                                /* 4490 */  0x6F, 0x7A, 0xC6, 0x38, 0x98, 0x10, 0x46, 0x78,  // oz.8..Fx
                                /* 4498 */  0xE3, 0xF3, 0x7D, 0xE6, 0xB8, 0x42, 0x3D, 0xD8,  // ..}..B=.
                                /* 44A0 */  0x18, 0xF3, 0x21, 0xE2, 0x7D, 0x26, 0x4A, 0x9C,  // ..!.}&J.
                                /* 44A8 */  0x57, 0x3E, 0xA3, 0xB0, 0x5B, 0xCD, 0x4B, 0xA0,  // W>..[.K.
                                /* 44B0 */  0xB1, 0xC3, 0x45, 0x79, 0x4D, 0x38, 0x99, 0x20,  // ..EyM8. 
                                /* 44B8 */  0x31, 0x7C, 0xB0, 0x61, 0xF1, 0x4F, 0x7E, 0xE4,  // 1|.a.O~.
                                /* 44C0 */  0xFF, 0x7F, 0xB0, 0x01, 0x18, 0x12, 0x1E, 0x42,  // .......B
                                /* 44C8 */  0x07, 0x1B, 0x1C, 0xB4, 0x2F, 0xDD, 0xD8, 0x63,  // ..../..c
                                /* 44D0 */  0x0D, 0xE0, 0xEE, 0xFF, 0x7F, 0xAC, 0x81, 0x79,  // .......y
                                /* 44D8 */  0xFE, 0x03, 0xE3, 0x80, 0x0C, 0xE8, 0xFB, 0x4C,  // .......L
                                /* 44E0 */  0x90, 0xF8, 0x2F, 0x35, 0xD8, 0x53, 0x0D, 0x60,  // ../5.S.`
                                /* 44E8 */  0x25, 0xD0, 0x91, 0x06, 0x15, 0xE1, 0x54, 0x03,  // %.....T.
                                /* 44F0 */  0xC8, 0x1E, 0xC2, 0x63, 0x8A, 0x81, 0xFE, 0xFF,  // ...c....
                                /* 44F8 */  0xC7, 0x11, 0xD4, 0x48, 0x3E, 0xE9, 0xF3, 0xE3,  // ...H>...
                                /* 4500 */  0x03, 0xFE, 0x78, 0x0C, 0xFF, 0x4A, 0xE3, 0xA3,  // ..x..J..
                                /* 4508 */  0x8C, 0x6F, 0x06, 0x2F, 0xC7, 0xBE, 0xCD, 0xBC,  // .o./....
                                /* 4510 */  0x62, 0x18, 0x85, 0x8D, 0x2C, 0xD8, 0xFB, 0x8C,  // b...,...
                                /* 4518 */  0x8F, 0xC7, 0xEC, 0x56, 0x63, 0x94, 0xB3, 0x7B,  // ...Vc..{
                                /* 4520 */  0xBE, 0x09, 0x11, 0x32, 0xE2, 0xFB, 0xB1, 0xB1,  // ...2....
                                /* 4528 */  0x7C, 0x4E, 0x36, 0xC8, 0xD3, 0x1F, 0xC0, 0x96,  // |N6.....
                                /* 4530 */  0xE8, 0xA7, 0x1A, 0xF4, 0x28, 0x7C, 0x40, 0xE0,  // ....(|@.
                                /* 4538 */  0x87, 0x1A, 0xB0, 0xFD, 0xFF, 0x0F, 0x35, 0xC0,  // ......5.
                                /* 4540 */  0xED, 0x24, 0x01, 0xF3, 0x50, 0x03, 0xCE, 0xA3,  // .$..P...
                                /* 4548 */  0x06, 0xEE, 0x50, 0x03, 0x2E, 0xB0, 0xA7, 0x18,  // ..P.....
                                /* 4550 */  0xDF, 0x64, 0x7C, 0x6D, 0x09, 0x14, 0xCC, 0x23,  // .d|m...#
                                /* 4558 */  0xE1, 0xA7, 0x3F, 0xC0, 0x90, 0x42, 0x9B, 0x3E,  // ..?..B.>
                                /* 4560 */  0x35, 0x1A, 0xB5, 0x6A, 0x50, 0xA6, 0x46, 0x99,  // 5..jP.F.
                                /* 4568 */  0x06, 0xB5, 0xFA, 0x54, 0x6A, 0xCC, 0x58, 0xE2,  // ...Tj.X.
                                /* 4570 */  0xB7, 0x81, 0x04, 0x3D, 0x22, 0x74, 0x4A, 0xB0,  // ...="tJ.
                                /* 4578 */  0x7C, 0x10, 0x2A, 0x9B, 0x42, 0x20, 0x16, 0xF9,  // |.*.B ..
                                /* 4580 */  0x58, 0x10, 0x88, 0x05, 0x7A, 0x00, 0x61, 0xF1,  // X...z.a.
                                /* 4588 */  0x40, 0x68, 0xA0, 0x35, 0x08, 0xC4, 0x61, 0x4C,  // @h.5..aL
                                /* 4590 */  0x80, 0x30, 0xF1, 0x2A, 0x40, 0x98, 0xE0, 0xC7,  // .0.*@...
                                /* 4598 */  0x82, 0x40, 0xFE, 0xFF, 0xC1, 0xF5, 0x58, 0x10,  // .@....X.
                                /* 45A0 */  0x88, 0xC5, 0xD9, 0x00, 0x61, 0x92, 0x74, 0x9C,  // ....a.t.
                                /* 45A8 */  0x41, 0xA8, 0x0F, 0x10, 0x26, 0xE4, 0x2D, 0x20,  // A...&.- 
                                /* 45B0 */  0x10, 0x8B, 0x78, 0x4C, 0x08, 0xC4, 0x11, 0x40,  // ..xL...@
                                /* 45B8 */  0xA8, 0xEC, 0x47, 0x84, 0x40, 0x2C, 0xD3, 0x0A,  // ..G.@,..
                                /* 45C0 */  0x08, 0x93, 0xA8, 0x05, 0x84, 0x7A, 0x01, 0xA1,  // .....z..
                                /* 45C8 */  0x2F, 0x00, 0x81, 0x10, 0x33, 0xC3, 0xA2, 0x6A,  // /...3..j
                                /* 45D0 */  0x40, 0x98, 0x2C, 0x37, 0x43, 0xA1, 0xEB, 0x16,  // @.,7C...
                                /* 45D8 */  0x88, 0xC5, 0xD8, 0x01, 0x61, 0x12, 0xF4, 0x80,  // ....a...
                                /* 45E0 */  0xB0, 0xD8, 0x6F, 0x0A, 0x81, 0x58, 0xB4, 0x21,  // ..o..X.!
                                /* 45E8 */  0x40, 0xEA, 0xE8, 0x64, 0xCF, 0xA4, 0x81, 0x68,  // @..d...h
                                /* 45F0 */  0x10, 0xC4, 0x12, 0x10, 0x13, 0x0C, 0x22, 0x20,  // ......" 
                                /* 45F8 */  0x07, 0xF0, 0x04, 0xC4, 0xE2, 0x80, 0x08, 0xC8,  // ........
                                /* 4600 */  0x01, 0x4D, 0x01, 0xB1, 0xB8, 0x20, 0x02, 0x72,  // .M... .r
                                /* 4608 */  0x78, 0x57, 0x40, 0x4C, 0xCA, 0xF3, 0x5D, 0x40,  // xW@L..]@
                                /* 4610 */  0x16, 0xA4, 0x0B, 0x88, 0xC9, 0x03, 0x11, 0x90,  // ........
                                /* 4618 */  0xA5, 0x3D, 0x29, 0x04, 0x64, 0xA1, 0x20, 0x1A,  // .=).d. .
                                /* 4620 */  0x24, 0xF9, 0x4B, 0x08, 0xC8, 0xA2, 0x41, 0x34,  // $.K...A4
                                /* 4628 */  0x24, 0xF2, 0x2A, 0x12, 0x90, 0x23, 0x80, 0x08,  // $.*..#..
                                /* 4630 */  0xC8, 0x31, 0x1E, 0x37, 0x81, 0x48, 0x28, 0x10,  // .1.7.H(.
                                /* 4638 */  0x01, 0x39, 0xD8, 0x53, 0x5E, 0x40, 0x8E, 0x09,  // .9.S^@..
                                /* 4640 */  0x22, 0x20, 0x47, 0x57, 0x07, 0xC4, 0x84, 0xB8,  // " GW....
                                /* 4648 */  0x1B, 0x08, 0xB5, 0x37, 0x10, 0x0A, 0x22, 0x20,  // ...7.." 
                                /* 4650 */  0x0B, 0xF7, 0x07, 0xC4, 0x62, 0x80, 0x08, 0xC8,  // ....b...
                                /* 4658 */  0xE1, 0xBE, 0x0C, 0x81, 0x48, 0x54, 0x10, 0x0D,  // ....HT..
                                /* 4660 */  0x96, 0x3C, 0x20, 0x34, 0x58, 0x02, 0x22, 0x20,  // .< 4X." 
                                /* 4668 */  0x47, 0xFB, 0x48, 0x07, 0x22, 0x41, 0x41, 0x74,  // G.H."AAt
                                /* 4670 */  0x28, 0x20, 0x2F, 0x2A, 0x01, 0x59, 0x16, 0x88,  // ( /*.Y..
                                /* 4678 */  0x8E, 0x01, 0xE4, 0xE9, 0x1F, 0x88, 0xC8, 0x05,  // ........
                                /* 4680 */  0x11, 0x90, 0xA3, 0xFC, 0x21, 0x02, 0x91, 0x60,  // ....!..`
                                /* 4688 */  0x20, 0x3A, 0x22, 0x90, 0x27, 0x9A, 0x80, 0x2C,  //  :".'..,
                                /* 4690 */  0x0E, 0x44, 0x47, 0x06, 0xF2, 0xA0, 0x08, 0x44,  // .DG....D
                                /* 4698 */  0xA2, 0x81, 0x08, 0xE8, 0xFF, 0xFF, 0xB0, 0xA2,  // ........
                                /* 46A0 */  0x5F, 0x45, 0x20, 0x22, 0x0A, 0x44, 0x80, 0xE4,  // _E ".D..
                                /* 46A8 */  0x51, 0x11, 0x90, 0x81, 0xE8, 0xFC, 0x42, 0xD4,  // Q.....B.
                                /* 46B0 */  0x02, 0x31, 0x39, 0x20, 0x3A, 0x3E, 0x90, 0xD7,  // .19 :>..
                                /* 46B8 */  0x46, 0x20, 0x22, 0x1F, 0x44, 0x40, 0x8E, 0xA8,  // F ".D@..
                                /* 46C0 */  0x17, 0x88, 0x05, 0x06, 0xD1, 0x60, 0xC8, 0x9B,  // .....`..
                                /* 46C8 */  0xE3, 0x60, 0x18, 0x88, 0x80, 0x2C, 0xF6, 0xD1,  // .`...,..
                                /* 46D0 */  0x25, 0x20, 0x4B, 0x07, 0x11, 0x90, 0x23, 0xFD,  // % K...#.
                                /* 46D8 */  0x57, 0x04, 0xE4, 0x80, 0x20, 0x1A, 0x3C, 0xF9,  // W... .<.
                                /* 46E0 */  0x03, 0x69, 0xF0, 0xE4, 0xC5, 0xAE, 0x81, 0x10,  // .i......
                                /* 46E8 */  0xD5, 0x03, 0xA1, 0x20, 0x02, 0x72, 0xCC, 0x07,  // ... .r..
                                /* 46F0 */  0x95, 0x80, 0x1C, 0x1A, 0x44, 0x40, 0x16, 0xF5,  // ....D@..
                                /* 46F8 */  0x1C, 0x09, 0x44, 0x24, 0x82, 0x08, 0xC8, 0x41,  // ..D$...A
                                /* 4700 */  0x8C, 0x03, 0xB1, 0x58, 0x20, 0x1A, 0x04, 0xF9,  // ...X ...
                                /* 4708 */  0x14, 0x6A, 0x10, 0xE4, 0x0B, 0xA2, 0xA3, 0x05,  // .j......
                                /* 4710 */  0x79, 0x86, 0x09, 0xC8, 0x21, 0x40, 0x04, 0xE4,  // y...!@..
                                /* 4718 */  0x6C, 0xEF, 0xAF, 0x87, 0x00, 0x06, 0x22, 0x20,  // l....." 
                                /* 4720 */  0x87, 0x7E, 0x38, 0x09, 0xC8, 0x12, 0xD4, 0x1F,  // .~8.....
                                /* 4728 */  0x2B, 0xE8, 0x33, 0x49, 0x40, 0x16, 0x08, 0x22,  // +.3I@.."
                                /* 4730 */  0x20, 0x4B, 0xD6, 0x0F, 0xC4, 0x02, 0x80, 0x68,  //  K.....h
                                /* 4738 */  0x80, 0x24, 0xC0, 0x00, 0x29, 0x88, 0x80, 0x1C,  // .$..)...
                                /* 4740 */  0x37, 0x01, 0x10, 0x0B, 0x0F, 0xA2, 0x01, 0x90,  // 7.......
                                /* 4748 */  0x0A, 0x03, 0xA0, 0x20, 0x3A, 0x40, 0x90, 0x0E,  // ... :@..
                                /* 4750 */  0x07, 0x08, 0x0A, 0xA2, 0x43, 0x09, 0x29, 0x01,  // ....C.).
                                /* 4758 */  0xC4, 0xE2, 0x81, 0x68, 0x40, 0xA4, 0xC5, 0x80,  // ...h@...
                                /* 4760 */  0x68, 0x0C, 0x20, 0x26, 0x2F, 0x07, 0x10, 0x13,  // h. &/...
                                /* 4768 */  0x0B, 0xA2, 0x83, 0x06, 0x09, 0x72, 0xD0, 0xA0,  // .....r..
                                /* 4770 */  0x20, 0x1A, 0x34, 0x49, 0x32, 0x68, 0x0A, 0x22,  //  .4I2h."
                                /* 4778 */  0x20, 0x4B, 0xA9, 0x02, 0xC4, 0x84, 0x81, 0xE8,  //  K......
                                /* 4780 */  0x80, 0x41, 0xBA, 0x1C, 0x30, 0x28, 0x88, 0x80,  // .A..0(..
                                /* 4788 */  0x1C, 0xA7, 0x0C, 0x10, 0x0B, 0x07, 0xA2, 0xC1,  // ........
                                /* 4790 */  0x90, 0x36, 0x83, 0xA1, 0x71, 0x80, 0xFC, 0xFF,  // .6..q...
                                /* 4798 */  0x3F, 0x4C, 0x28, 0x0F, 0x10, 0x53, 0x06, 0x22,  // ?L(..S."
                                /* 47A0 */  0x20, 0xAB, 0xED, 0x03, 0xC4, 0xB4, 0x83, 0x08,  //  .......
                                /* 47A8 */  0xC8, 0xA9, 0x0A, 0x01, 0xB1, 0x8C, 0x20, 0x02,  // ...... .
                                /* 47B0 */  0x72, 0xCA, 0x46, 0x40, 0x2C, 0x33, 0x88, 0x80,  // r.F@,3..
                                /* 47B8 */  0xAC, 0x23, 0x13, 0x10, 0x53, 0x05, 0x22, 0x20,  // .#..S." 
                                /* 47C0 */  0x2B, 0x0E, 0x05, 0xC4, 0xF4, 0x83, 0x08, 0x98,  // +.......
                                /* 47C8 */  0xA4, 0x02, 0xA6, 0x20, 0x02, 0xB2, 0x8A, 0x5A,  // ... ...Z
                                /* 47D0 */  0x40, 0x4C, 0x13, 0x88, 0x06, 0x43, 0x7A, 0x0D,  // @L...Cz.
                                /* 47D8 */  0x86, 0x82, 0x08, 0xC8, 0x99, 0x8A, 0x01, 0xB1,  // ........
                                /* 47E0 */  0x84, 0x20, 0x02, 0x72, 0xEE, 0x66, 0x40, 0x4C,  // . .r.f@L
                                /* 47E8 */  0x45, 0x34, 0x20, 0xA6, 0x2A, 0x1B, 0x10, 0xD3,  // E4 .*...
                                /* 47F0 */  0x08, 0x22, 0x20, 0x0B, 0x0D, 0x07, 0xC4, 0x54,  // ." ....T
                                /* 47F8 */  0x83, 0x08, 0xC8, 0xFA, 0xCB, 0x01, 0xB1, 0x34,  // .......4
                                /* 4800 */  0x20, 0x1A, 0x30, 0x69, 0x07, 0xC4, 0xB2, 0x81,  //  .0i....
                                /* 4808 */  0x68, 0x50, 0x24, 0xDE, 0xA0, 0x28, 0x88, 0x80,  // hP$..(..
                                /* 4810 */  0x9C, 0x3E, 0x1F, 0x10, 0xD3, 0xD2, 0x6F, 0x20,  // .>....o 
                                /* 4818 */  0xB4, 0xE0, 0x40, 0x28, 0x88, 0x80, 0xAC, 0x3E,  // ..@(...>
                                /* 4820 */  0x22, 0x08, 0xCB, 0x0E, 0x42, 0x75, 0x64, 0x04,  // "...Bud.
                                /* 4828 */  0x61, 0xFA, 0x4A, 0x82, 0xB0, 0x74, 0x20, 0x34,  // a.J..t 4
                                /* 4830 */  0x71, 0x4A, 0x40, 0x9A, 0x13, 0x84, 0xA5, 0x00,  // qJ@.....
                                /* 4838 */  0xA1, 0x09, 0x7A, 0x82, 0xB0, 0x44, 0x49, 0x41,  // ..z..DIA
                                /* 4840 */  0x98, 0x9E, 0xA6, 0x20, 0x4C, 0xD3, 0xCB, 0x4C,  // ... L..L
                                /* 4848 */  0x83, 0x27, 0x5D, 0x41, 0x58, 0x5E, 0x10, 0x9A,  // .']AX^..
                                /* 4850 */  0x3C, 0x2C, 0x08, 0x53, 0x16, 0x17, 0x84, 0xE5,  // <,.S....
                                /* 4858 */  0x02, 0xE1, 0x75, 0x41, 0x58, 0x9A, 0xBC, 0x20,  // ..uAX.. 
                                /* 4860 */  0x2C, 0x75, 0x61, 0x10, 0xA6, 0x39, 0x31, 0x08,  // ,ua..91.
                                /* 4868 */  0xD3, 0xDE, 0x18, 0x84, 0x25, 0xCC, 0x3C, 0x30,  // ....%.<0
                                /* 4870 */  0xDA, 0x19, 0x84, 0x69, 0x0C, 0x7D, 0xDC, 0xA0,  // ...i.}..
                                /* 4878 */  0xAD, 0x87, 0x41, 0x63, 0x83, 0x30, 0x6D, 0xB5,  // ..Ac.0m.
                                /* 4880 */  0x41, 0xFC, 0xFF, 0x27, 0x98, 0x24, 0xF8, 0xF0,  // A..'.$..
                                /* 4888 */  0x68, 0x71, 0x10, 0xA6, 0x21, 0xF9, 0x00, 0x68,  // hq..!..h
                                /* 4890 */  0xF5, 0x81, 0x52, 0x10, 0xAA, 0xB4, 0xFB, 0xB0,  // ..R.....
                                /* 4898 */  0x99, 0x6E, 0x10, 0x01, 0x91, 0xF2, 0x40, 0x14,  // .n....@.
                                /* 48A0 */  0x44, 0x40, 0xA4, 0x3D, 0x10, 0x05, 0xD1, 0x30,  // D@.=...0
                                /* 48A8 */  0x49, 0xFD, 0x23, 0x03, 0x05, 0x11, 0x90, 0x95,  // I.#.....
                                /* 48B0 */  0x1F, 0xE1, 0x04, 0xE4, 0x1C, 0x20, 0x02, 0x22,  // ..... ."
                                /* 48B8 */  0x06, 0xDE, 0x58, 0x81, 0x08, 0x88, 0x80, 0xAC,  // ..X.....
                                /* 48C0 */  0x40, 0x01, 0x10, 0xD3, 0x03, 0xA2, 0x61, 0x11,  // @.....a.
                                /* 48C8 */  0x20, 0x9A, 0x0B, 0x88, 0x2A, 0x72, 0x00, 0xC4,  //  ...*r..
                                /* 48D0 */  0xF4, 0x81, 0x08, 0xC8, 0x4A, 0x2C, 0x00, 0x31,  // ....J,.1
                                /* 48D8 */  0x5D, 0x20, 0x3A, 0x08, 0x10, 0x20, 0x9A, 0x0F,  // ] :.. ..
                                /* 48E0 */  0x88, 0x2A, 0xD3, 0x00, 0xC4, 0x74, 0x82, 0x68,  // .*...t.h
                                /* 48E8 */  0xD8, 0x04, 0x88, 0xE6, 0x05, 0xA2, 0x49, 0x45,  // ......IE
                                /* 48F0 */  0x00, 0xB1, 0xDC, 0x20, 0x1A, 0x1C, 0x31, 0x01,  // ... ..1.
                                /* 48F8 */  0xC4, 0xF4, 0x83, 0xE8, 0x80, 0x40, 0x5C, 0x00,  // .....@\.
                                /* 4900 */  0xB1, 0x4C, 0x20, 0x02, 0xB2, 0x1A, 0x19, 0x40,  // .L ....@
                                /* 4908 */  0x4C, 0x1B, 0x88, 0x0E, 0x00, 0x44, 0x07, 0x10,  // L....D..
                                /* 4910 */  0x53, 0x0A, 0xA2, 0x63, 0x04, 0x01, 0xA2, 0x99,  // S..c....
                                /* 4918 */  0x81, 0xA8, 0x5E, 0x1F, 0x40, 0x4C, 0x3D, 0x88,  // ..^.@L=.
                                /* 4920 */  0x8E, 0x09, 0x04, 0x88, 0xEA, 0x10, 0x02, 0xC4,  // ........
                                /* 4928 */  0x74, 0x28, 0x01, 0x62, 0xAA, 0x40, 0x74, 0x68,  // t(.b.@th
                                /* 4930 */  0x20, 0x52, 0x80, 0x98, 0x42, 0x10, 0x1D, 0x08,  //  R..B...
                                /* 4938 */  0x88, 0x16, 0x20, 0xA6, 0x16, 0x44, 0x03, 0x21,  // .. ..D.!
                                /* 4940 */  0x40, 0x34, 0x33, 0x10, 0x55, 0xEB, 0x05, 0x88,  // @43.U...
                                /* 4948 */  0x69, 0x07, 0xD1, 0x21, 0x80, 0x98, 0x39, 0x04,  // i..!..9.
                                /* 4950 */  0x50, 0x10, 0x01, 0x39, 0x3F, 0x10, 0x55, 0xA3,  // P..9?.U.
                                /* 4958 */  0x06, 0x88, 0xE5, 0x00, 0x11, 0x90, 0x53, 0x01,  // ......S.
                                /* 4960 */  0xD1, 0x5C, 0x72, 0x80, 0xFC, 0xFF, 0x1F, 0x86,  // .\r.....
                                /* 4968 */  0x40, 0x74, 0xC0, 0x20, 0x7A, 0x80, 0x58, 0x7E,  // @t. z.X~
                                /* 4970 */  0x10, 0x1D, 0x0A, 0x88, 0xA1, 0x43, 0x01, 0x05,  // .....C..
                                /* 4978 */  0x11, 0x10, 0x71, 0x04, 0x44, 0x41, 0x04, 0x44,  // ..q.DA.D
                                /* 4980 */  0x2C, 0x01, 0x51, 0x10, 0x01, 0x11, 0x4F, 0x40,  // ,.Q...O@
                                /* 4988 */  0x14, 0x44, 0x83, 0x25, 0xA2, 0x06, 0x4B, 0x4D,  // .D.%..KM
                                /* 4990 */  0x01, 0xB1, 0x04, 0x20, 0x02, 0x72, 0x1E, 0x20,  // ... .r. 
                                /* 4998 */  0xAA, 0x44, 0xD5, 0x01, 0x81, 0x82, 0xE8, 0x80,  // .D......
                                /* 49A0 */  0x40, 0x80, 0x68, 0x3E, 0x20, 0x9A, 0x42, 0xD6,  // @.h> .B.
                                /* 49A8 */  0x81, 0x80, 0x82, 0xE8, 0x40, 0x40, 0x6C, 0x1D,  // ....@@l.
                                /* 49B0 */  0x08, 0x28, 0x88, 0x8E, 0x35, 0x04, 0x88, 0x66,  // .(..5..f
                                /* 49B8 */  0x04, 0xA2, 0xEA, 0x74, 0x01, 0x31, 0xAD, 0x20,  // ...t.1. 
                                /* 49C0 */  0x02, 0x72, 0x16, 0x63, 0x43, 0xA1, 0xCA, 0x40,  // .r.cC..@
                                /* 49C8 */  0x58, 0x6E, 0x10, 0x9A, 0xD3, 0x19, 0x08, 0xCB,  // Xn......
                                /* 49D0 */  0x2B, 0x6D, 0x68, 0xD4, 0xDA, 0xA1, 0x81, 0x8A,  // +mh.....
                                /* 49D8 */  0x03, 0x61, 0x3A, 0xCD, 0x81, 0x30, 0x3D, 0xEA,  // .a:..0=.
                                /* 49E0 */  0x40, 0x98, 0x0A, 0x77, 0x20, 0x4C, 0x8B, 0x3C,  // @..w L.<
                                /* 49E8 */  0x10, 0x96, 0x5D, 0xDF, 0x61, 0x80, 0xFA, 0x03,  // ..].a...
                                /* 49F0 */  0x61, 0x0A, 0x05, 0x82, 0x30, 0x5D, 0x06, 0x8F,  // a...0]..
                                /* 49F8 */  0x08, 0x54, 0x21, 0x08, 0x4B, 0x0F, 0x42, 0x53,  // .T!.K.BS
                                /* 4A00 */  0x3B, 0x04, 0x61, 0x69, 0x25, 0x1E, 0x29, 0xA8,  // ;.ai%.).
                                /* 4A08 */  0xC7, 0x83, 0x02, 0x15, 0x39, 0x30, 0x6A, 0x72,  // ....90jr
                                /* 4A10 */  0x60, 0x14, 0x84, 0x66, 0x56, 0x39, 0x20, 0x2A,  // `..fV9 *
                                /* 4A18 */  0x13, 0x84, 0x69, 0xB0, 0x09, 0x42, 0x75, 0x82,  // ..i..Bu.
                                /* 4A20 */  0x30, 0xA5, 0x3E, 0x0F, 0x01, 0x54, 0x28, 0x08,  // 0.>..T(.
                                /* 4A28 */  0xCB, 0x64, 0x14, 0x84, 0x65, 0x53, 0x3A, 0x4C,  // .d..eS:L
                                /* 4A30 */  0xEA, 0xF4, 0x90, 0x40, 0xA5, 0x0E, 0x94, 0x5A,  // ...@...Z
                                /* 4A38 */  0x1D, 0x12, 0xD5, 0x7A, 0x34, 0xA0, 0x62, 0x0F,  // ...z4.b.
                                /* 4A40 */  0x01, 0xD4, 0x2C, 0x88, 0xFF, 0xFF, 0x47, 0x0F,  // ..,...G.
                                /* 4A48 */  0xA9, 0x1D, 0x08, 0xB5, 0x3B, 0x0C, 0x0A, 0x42,  // ....;..B
                                /* 4A50 */  0x33, 0xEB, 0x3D, 0x04, 0xB0, 0xEF, 0xE5, 0xC1,  // 3.=.....
                                /* 4A58 */  0x52, 0x10, 0x1D, 0xEF, 0x08, 0x10, 0xD5, 0x2D,  // R......-
                                /* 4A60 */  0x18, 0x88, 0xA5, 0x00, 0xD1, 0x51, 0x86, 0x18,  // .....Q..
                                /* 4A68 */  0x06, 0x62, 0x8A, 0x41, 0x34, 0x18, 0x02, 0x44,  // .b.A4..D
                                /* 4A70 */  0x35, 0x28, 0x3E, 0x60, 0x50, 0x10, 0x1D, 0x30,  // 5(>`P..0
                                /* 4A78 */  0x08, 0x10, 0x97, 0x0C, 0x44, 0x41, 0x34, 0x58,  // ....DA4X
                                /* 4A80 */  0x22, 0x1A, 0x84, 0xA5, 0x01, 0xA1, 0xEA, 0x4D,  // "......M
                                /* 4A88 */  0x1F, 0x41, 0xA8, 0xEA, 0xC1, 0x53, 0xD7, 0x47,  // .A...S.G
                                /* 4A90 */  0x16, 0x2A, 0x7B, 0x80, 0xD4, 0xF6, 0x51, 0x80,  // .*{...Q.
                                /* 4A98 */  0x82, 0xD0, 0xC4, 0xBA, 0x87, 0x41, 0x7D, 0x83,  // .....A}.
                                /* 4AA0 */  0xB0, 0x74, 0xC2, 0x07, 0x4E, 0x8D, 0x83, 0xB0,  // .t..N...
                                /* 4AA8 */  0x3C, 0x8F, 0x99, 0xC7, 0x18, 0xE6, 0x7C, 0xA8,  // <.....|.
                                /* 4AB0 */  0x54, 0xFB, 0xD1, 0x83, 0x82, 0xD0, 0x94, 0xDE,  // T.......
                                /* 4AB8 */  0x8F, 0x1D, 0x54, 0x3C, 0x20, 0x75, 0x0F, 0x48,  // ..T< u.H
                                /* 4AC0 */  0x41, 0xA8, 0x6A, 0xFB, 0x83, 0x63, 0x19, 0x40,  // A.j..c.@
                                /* 4AC8 */  0x34, 0x1C, 0x02, 0x44, 0xB5, 0xE8, 0x3F, 0x5C,  // 4..D..?\
                                /* 4AD0 */  0x50, 0x10, 0x1D, 0x2E, 0x08, 0x10, 0x4D, 0x5E,  // P.....M^
                                /* 4AD8 */  0x60, 0xE8, 0x34, 0x01, 0x08, 0x53, 0xD9, 0xE0,  // `.4..S..
                                /* 4AE0 */  0xE8, 0x40, 0x23, 0x1C, 0x17, 0x68, 0x05, 0x50,  // .@#..h.P
                                /* 4AE8 */  0x0A, 0x42, 0x53, 0x67, 0x00, 0xA1, 0x1D, 0x40,  // .BSg...@
                                /* 4AF0 */  0x68, 0x08, 0x10, 0x5A, 0xE2, 0x50, 0x40, 0x53,  // h..Z.P@S
                                /* 4AF8 */  0x1C, 0x2D, 0x68, 0x8B, 0xC1, 0xD1, 0x18, 0x20,  // .-h.... 
                                /* 4B00 */  0x2C, 0x5F, 0x8D, 0x43, 0x07, 0x7D, 0x02, 0x3D,  // ,_.C.}.=
                                /* 4B08 */  0xAA, 0xB0, 0x22, 0xC7, 0x0B, 0x9A, 0x64, 0xD8,  // .."...d.
                                /* 4B10 */  0x34, 0xCA, 0x11, 0x80, 0x56, 0x39, 0xEA, 0xD0,  // 4...V9..
                                /* 4B18 */  0x2C, 0x07, 0x01, 0xDA, 0x05, 0xC4, 0xFF, 0xFF,  // ,.......
                                /* 4B20 */  0xA3, 0x87, 0xC2, 0x1C, 0x2B, 0x68, 0x99, 0xA1,  // ....+h..
                                /* 4B28 */  0xD0, 0x34, 0x03, 0xA0, 0x71, 0x0E, 0x1A, 0xB4,  // .4..q...
                                /* 4B30 */  0xCE, 0x80, 0x69, 0x9E, 0x81, 0xD0, 0x3E, 0x20,  // ..i...> 
                                /* 4B38 */  0x2C, 0x63, 0xA0, 0xE3, 0x05, 0x2D, 0x74, 0xF0,  // ,c...-t.
                                /* 4B40 */  0xA0, 0x8D, 0x8E, 0x06, 0x34, 0x12, 0x30, 0xAD,  // ....4.0.
                                /* 4B48 */  0x74, 0x18, 0xA0, 0x99, 0x0E, 0x05, 0xB4, 0xD3,  // t.......
                                /* 4B50 */  0xA0, 0x68, 0xA8, 0x81, 0xD0, 0x54, 0x47, 0x20,  // .h...TG 
                                /* 4B58 */  0xDA, 0xEA, 0x90, 0x43, 0x63, 0x81, 0x30, 0xCD,  // ...Cc.0.
                                /* 4B60 */  0xBD, 0x40, 0x29, 0x08, 0x4D, 0x17, 0xEC, 0x78,  // .@).M..x
                                /* 4B68 */  0x42, 0x8B, 0x81, 0xD1, 0x64, 0x47, 0x12, 0xDA,  // B...dG..
                                /* 4B70 */  0xEC, 0x90, 0x41, 0xAB, 0x81, 0xD0, 0x70, 0x20,  // ..A...p 
                                /* 4B78 */  0x4C, 0x3F, 0x08, 0x0D, 0x5E, 0xEE, 0x50, 0xC0,  // L?..^.P.
                                /* 4B80 */  0x54, 0xA4, 0x03, 0x62, 0x81, 0x41, 0x04, 0xE4,  // T..b.A..
                                /* 4B88 */  0xF8, 0x40, 0x34, 0x66, 0x3C, 0x20, 0x16, 0x1A,  // .@4f< ..
                                /* 4B90 */  0x44, 0x40, 0x96, 0x5B, 0x0F, 0x88, 0x89, 0x07,  // D@.[....
                                /* 4B98 */  0xD1, 0xF1, 0x91, 0xF4, 0x03, 0x62, 0x21, 0x40,  // .....b!@
                                /* 4BA0 */  0x74, 0x24, 0x25, 0x09, 0x41, 0x98, 0xB0, 0x86,  // t$%.A...
                                /* 4BA8 */  0x20, 0x2C, 0x4C, 0x44, 0x40, 0x96, 0x0C, 0x44,  //  ,LD@..D
                                /* 4BB0 */  0x40, 0xCE, 0x50, 0x11, 0x88, 0x25, 0x02, 0xD1,  // @.P..%..
                                /* 4BB8 */  0x80, 0x49, 0xC7, 0xC3, 0x03, 0x05, 0xD1, 0xE1,  // .I......
                                /* 4BC0 */  0x81, 0x00, 0x51, 0x2D, 0x21, 0x0F, 0x0D, 0xB4,  // ..Q-!...
                                /* 4BC8 */  0xE5, 0x11, 0x80, 0x82, 0xD0, 0x74, 0x31, 0x0F,  // .....t1.
                                /* 4BD0 */  0x01, 0xB4, 0xE7, 0x00, 0x68, 0xD0, 0xC3, 0x0A,  // ....h...
                                /* 4BD8 */  0x2D, 0x7A, 0x84, 0xA0, 0x51, 0x0F, 0x0D, 0x14,  // -z..Q...
                                /* 4BE0 */  0x84, 0xA6, 0xAD, 0x7A, 0x58, 0xA1, 0x59, 0x8F,  // ...zX.Y.
                                /* 4BE8 */  0x0D, 0xB4, 0x2B, 0x08, 0x0D, 0x3B, 0x0C, 0x5A,  // ..+..;.Z
                                /* 4BF0 */  0x16, 0x84, 0xA6, 0x3D, 0x26, 0xD0, 0xB6, 0x47,  // ...=&..G
                                /* 4BF8 */  0x05, 0x9A, 0xF7, 0x68, 0x40, 0xFB, 0x82, 0xF8,  // ...h@...
                                /* 4C00 */  0xFF, 0x4F, 0x30, 0x6B, 0xE0, 0x61, 0xB1, 0xE0,  // .O0k.a..
                                /* 4C08 */  0x20, 0x1A, 0x04, 0x29, 0x0C, 0xC4, 0xD2, 0x83,  //  ..)....
                                /* 4C10 */  0xE8, 0x80, 0x40, 0x5E, 0xD3, 0x3A, 0x92, 0x11,  // ..@^.:..
                                /* 4C18 */  0x10, 0x1D, 0x3C, 0x48, 0xE4, 0xE3, 0x13, 0x05,  // ..<H....
                                /* 4C20 */  0x11, 0x90, 0xB5, 0x56, 0x06, 0x62, 0xCA, 0x41,  // ...V.b.A
                                /* 4C28 */  0x74, 0x4C, 0x20, 0x99, 0x81, 0x98, 0x26, 0x10,  // tL ...&.
                                /* 4C30 */  0x0D, 0x90, 0x94, 0x3E, 0x20, 0x50, 0x10, 0x9A,  // ...> P..
                                /* 4C38 */  0x2C, 0xF5, 0x70, 0x68, 0x6D, 0x40, 0x9A, 0x1B,  // ,.phm@..
                                /* 4C40 */  0x84, 0xF6, 0x06, 0x61, 0xDA, 0x93, 0x1F, 0x3B,  // ...a...;
                                /* 4C48 */  0x28, 0x08, 0x4D, 0xDD, 0x7C, 0x18, 0xB4, 0xFB,  // (.M.|...
                                /* 4C50 */  0x51, 0x80, 0x82, 0x50, 0xF5, 0xE1, 0x41, 0xD8,  // Q..P..A.
                                /* 4C58 */  0xFF, 0x1F                                       // ..
                            })
                        }
                    }

                    Device (HKDV)
                    {
                        Name (_HID, "LHK2019")  // _HID: Hardware ID
                        Name (_UID, Zero)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }
                    }

                    Device (WMIU)
                    {
                        Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
                        Name (_UID, "LSK20")  // _UID: Unique ID
                        Name (_WDG, Buffer (0x3C)
                        {
                            /* 0000 */  0x74, 0x09, 0x6C, 0xCE, 0x07, 0x04, 0x50, 0x4F,  // t.l...PO
                            /* 0008 */  0x88, 0xBA, 0x4F, 0xC3, 0xB6, 0x55, 0x9A, 0xD8,  // ..O..U..
                            /* 0010 */  0x53, 0x4B, 0x01, 0x02, 0x0C, 0xDE, 0xC0, 0x8F,  // SK......
                            /* 0018 */  0xE4, 0xB4, 0xFD, 0x43, 0xB0, 0xF3, 0x88, 0x71,  // ...C...q
                            /* 0020 */  0x71, 0x1C, 0x12, 0x94, 0xD0, 0x00, 0x01, 0x08,  // q.......
                            /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                            /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                            /* 0038 */  0x44, 0x41, 0x01, 0x00                           // DA..
                        })
                        Method (WMSK, 3, NotSerialized)
                        {
                            If ((Arg1 == One))
                            {
                                If ((ToInteger (Arg2) == One))
                                {
                                    Return (0x03)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x02))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x03))
                                {
                                    Return (0x02)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x05))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x06))
                                {
                                    If ((MCSK == One))
                                    {
                                        Return (0x02)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                                ElseIf ((ToInteger (Arg2) == 0x07))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x08))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x0A))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x0B))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x0C))
                                {
                                    Return (0x15)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x0D))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x0E))
                                {
                                    Return (0x15)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x0F))
                                {
                                    Return (0x15)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x10))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x11))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x12))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x13))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x14))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x15))
                                {
                                    Return (0x1A)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x17))
                                {
                                    Return (0x1B)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x18))
                                {
                                    Return (0x1B)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x16))
                                {
                                    Return (0x1B)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }

                        Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
                        {
                            If ((Arg0 == 0xD0))
                            {
                                If ((LSKD == One))
                                {
                                    Return (One)
                                }
                                ElseIf ((LSKD == 0x04))
                                {
                                    If ((^^PCI0.LPC0.EC0.HKDB == Zero))
                                    {
                                        Return (0x02)
                                    }
                                    Else
                                    {
                                        Return (0x03)
                                    }
                                }
                                ElseIf ((LSKD == 0x06))
                                {
                                    Return (0x07)
                                }
                                ElseIf ((LSKD == 0x08))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((LSKD == 0x0B))
                                {
                                    Return (0x0C)
                                }
                                ElseIf ((LSKD == 0x0C))
                                {
                                    Return (0x0D)
                                }
                                ElseIf ((LSKD == 0x0D))
                                {
                                    Return (0x0E)
                                }
                                ElseIf ((LSKD == 0x0E))
                                {
                                    Return (0x0F)
                                }
                                ElseIf ((LSKD == 0x0F))
                                {
                                    Return (0x10)
                                }
                                ElseIf ((LSKD == 0x13))
                                {
                                    If ((CNFG == One))
                                    {
                                        Return (0x14)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                                ElseIf ((LSKD == 0x14))
                                {
                                    If ((CNFG == One))
                                    {
                                        Return (0x15)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                                ElseIf ((LSKD == 0x15))
                                {
                                    Return (0x16)
                                }
                                ElseIf ((LSKD == 0x16))
                                {
                                    Return (0x17)
                                }
                                ElseIf ((LSKD == 0x17))
                                {
                                    Return (0x18)
                                }
                                ElseIf ((LSKD == 0x18))
                                {
                                    Return (0x19)
                                }
                                ElseIf ((LSKD == 0x19))
                                {
                                    Return (0x1A)
                                }
                                ElseIf ((LSKD == 0x25))
                                {
                                    Return (0x26)
                                }
                                ElseIf ((LSKD == 0x1A))
                                {
                                    Return (0x1B)
                                }
                                ElseIf ((LSKD == 0x1B))
                                {
                                    Return (0x1C)
                                }
                                ElseIf ((LSKD == 0x1C))
                                {
                                    Return (0x1D)
                                }
                                ElseIf ((LSKD == 0x1D))
                                {
                                    Return (0x1E)
                                }
                                ElseIf ((LSKD == 0x1E))
                                {
                                    Return (0x1F)
                                }
                                ElseIf ((LSKD == 0x1F))
                                {
                                    Return (0x20)
                                }
                                ElseIf ((LSKD == 0x20))
                                {
                                    Return (0x21)
                                }
                                ElseIf ((LSKD == 0x21))
                                {
                                    Return (0x22)
                                }
                                ElseIf ((LSKD == 0x22))
                                {
                                    Return (0x23)
                                }
                                ElseIf ((LSKD == 0x23))
                                {
                                    Return (0x25)
                                }
                                ElseIf ((LSKD == 0x24))
                                {
                                    Return (0x24)
                                }
                                ElseIf ((LSKD == 0x29))
                                {
                                    Return (0x2A)
                                }
                                ElseIf ((LSKD == 0x2A))
                                {
                                    If ((CNFG == One))
                                    {
                                        Return (0x2F)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                                ElseIf ((LSKD == 0x2B))
                                {
                                    If ((CNFG == One))
                                    {
                                        Return (0x30)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                                ElseIf ((LSKD == 0x2C))
                                {
                                    Return (0x2D)
                                }
                                ElseIf ((LSKD == 0x2E))
                                {
                                    Return (0x2B)
                                }
                                ElseIf ((LSKD == 0x2F))
                                {
                                    Return (0x2C)
                                }
                                ElseIf ((LSKD == 0x30))
                                {
                                    Return (0x31)
                                }
                                ElseIf ((LSKD == 0x31))
                                {
                                    Return (0x32)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }

                        Name (WQDA, Buffer (0x0422)
                        {
                            /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                            /* 0008 */  0x12, 0x04, 0x00, 0x00, 0x66, 0x0C, 0x00, 0x00,  // ....f...
                            /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                            /* 0018 */  0xA8, 0x42, 0x86, 0x00, 0x01, 0x06, 0x18, 0x42,  // .B.....B
                            /* 0020 */  0x10, 0x05, 0x10, 0x8A, 0x29, 0x81, 0x42, 0x04,  // ....).B.
                            /* 0028 */  0x8A, 0x40, 0xA4, 0x60, 0x30, 0x28, 0x0D, 0x20,  // .@.`0(. 
                            /* 0030 */  0x92, 0x03, 0x21, 0x17, 0x4C, 0x4C, 0x80, 0x08,  // ..!.LL..
                            /* 0038 */  0x08, 0x79, 0x15, 0x60, 0x53, 0x80, 0x49, 0x10,  // .y.`S.I.
                            /* 0040 */  0xF5, 0xEF, 0x0F, 0x51, 0x12, 0x1C, 0x4A, 0x08,  // ...Q..J.
                            /* 0048 */  0x84, 0x24, 0x0A, 0x30, 0x2F, 0x40, 0xB7, 0x00,  // .$.0/@..
                            /* 0050 */  0xC3, 0x02, 0x6C, 0x0B, 0x30, 0x2D, 0xC0, 0x31,  // ..l.0-.1
                            /* 0058 */  0x24, 0x95, 0x06, 0x4E, 0x09, 0x2C, 0x05, 0x42,  // $..N.,.B
                            /* 0060 */  0x42, 0x05, 0x28, 0x17, 0xE0, 0x5B, 0x80, 0x76,  // B.(..[.v
                            /* 0068 */  0x44, 0x49, 0x16, 0x60, 0x19, 0x46, 0x04, 0x1E,  // DI.`.F..
                            /* 0070 */  0x45, 0x64, 0xA3, 0x71, 0x68, 0xEC, 0x30, 0x2C,  // Ed.qh.0,
                            /* 0078 */  0x13, 0x4C, 0x83, 0x38, 0x8C, 0xB2, 0x91, 0x45,  // .L.8...E
                            /* 0080 */  0xE0, 0x09, 0x75, 0x2A, 0x40, 0xAE, 0x00, 0x61,  // ..u*@..a
                            /* 0088 */  0x02, 0xC4, 0xA3, 0x0A, 0xA3, 0x39, 0x28, 0x22,  // .....9("
                            /* 0090 */  0x1A, 0x1A, 0x25, 0x66, 0x4C, 0x04, 0xB6, 0x73,  // ..%fL..s
                            /* 0098 */  0x6C, 0x8D, 0xE2, 0x34, 0x0A, 0x17, 0x20, 0x1D,  // l..4.. .
                            /* 00A0 */  0x43, 0x23, 0x38, 0xAE, 0x63, 0x30, 0x58, 0x90,  // C#8.c0X.
                            /* 00A8 */  0x43, 0x31, 0x44, 0x41, 0x02, 0xAC, 0xA2, 0x91,  // C1DA....
                            /* 00B0 */  0x61, 0x84, 0x08, 0x72, 0x7C, 0x81, 0xBA, 0xC4,  // a..r|...
                            /* 00B8 */  0x13, 0x88, 0xC7, 0xE4, 0x01, 0x18, 0x21, 0x4C,  // ......!L
                            /* 00C0 */  0x8B, 0xB0, 0x82, 0x36, 0x62, 0x02, 0xC3, 0x1E,  // ...6b...
                            /* 00C8 */  0x0A, 0xE6, 0x07, 0x20, 0x01, 0x9E, 0x05, 0x58,  // ... ...X
                            /* 00D0 */  0x1F, 0x23, 0x21, 0xB0, 0x7B, 0x01, 0xE2, 0x04,  // .#!.{...
                            /* 00D8 */  0x68, 0x1E, 0x8D, 0x46, 0x75, 0x9C, 0xC6, 0x88,  // h..Fu...
                            /* 00E0 */  0xD2, 0x96, 0x00, 0xC5, 0x23, 0x13, 0x4C, 0x88,  // ....#.L.
                            /* 00E8 */  0x28, 0x21, 0x3A, 0xC3, 0x13, 0x5A, 0x28, 0xC3,  // (!:..Z(.
                            /* 00F0 */  0x45, 0x89, 0x13, 0x25, 0x70, 0x84, 0xDE, 0x04,  // E..%p...
                            /* 00F8 */  0x18, 0x83, 0x20, 0x08, 0x81, 0x43, 0x54, 0x36,  // .. ..CT6
                            /* 0100 */  0x48, 0xA1, 0xB6, 0x3F, 0x08, 0x22, 0xCB, 0xC1,  // H..?."..
                            /* 0108 */  0x89, 0x80, 0x45, 0x1A, 0x0D, 0xEA, 0x14, 0x90,  // ..E.....
                            /* 0110 */  0xE0, 0xA9, 0xC0, 0x27, 0x82, 0x93, 0x3A, 0xAF,  // ...'..:.
                            /* 0118 */  0xA3, 0x3A, 0xEB, 0x20, 0xC1, 0x4F, 0xA4, 0xCE,  // .:. .O..
                            /* 0120 */  0xE3, 0x00, 0x19, 0x38, 0x9B, 0x9A, 0xD9, 0x75,  // ...8...u
                            /* 0128 */  0x3E, 0x80, 0xE0, 0x1A, 0x50, 0xFF, 0xFF, 0x79,  // >...P..y
                            /* 0130 */  0x3E, 0x16, 0xB0, 0x61, 0x86, 0xC3, 0x0C, 0xD1,  // >..a....
                            /* 0138 */  0x83, 0xF5, 0x04, 0x0E, 0x91, 0x01, 0x7A, 0x62,  // ......zb
                            /* 0140 */  0x4F, 0x04, 0x58, 0x87, 0x93, 0xD1, 0x71, 0xA0,  // O.X...q.
                            /* 0148 */  0x54, 0x01, 0x66, 0xC7, 0xAD, 0x49, 0x27, 0x38,  // T.f..I'8
                            /* 0150 */  0x1E, 0x9F, 0x03, 0x3C, 0x9F, 0x13, 0x4E, 0x60,  // ...<..N`
                            /* 0158 */  0xF9, 0x83, 0x40, 0x8D, 0xCC, 0xD0, 0x36, 0x38,  // ..@...68
                            /* 0160 */  0x2D, 0x1D, 0x04, 0x7C, 0x00, 0x30, 0x81, 0xC5,  // -..|.0..
                            /* 0168 */  0x1E, 0x26, 0xE8, 0x78, 0xC0, 0x7F, 0x00, 0x78,  // .&.x...x
                            /* 0170 */  0x3E, 0x88, 0xF0, 0xCE, 0xE0, 0xF9, 0x9A, 0xA0,  // >.......
                            /* 0178 */  0xA8, 0xB3, 0x85, 0x9C, 0x8C, 0x07, 0x75, 0xAC,  // ......u.
                            /* 0180 */  0xF0, 0x05, 0x01, 0x03, 0x7E, 0xB4, 0x2F, 0x0C,  // ....~./.
                            /* 0188 */  0x61, 0x5E, 0x1A, 0xE2, 0x1E, 0xBC, 0xB5, 0x5E,  // a^.....^
                            /* 0190 */  0x21, 0x08, 0x81, 0x83, 0x43, 0xE8, 0xAF, 0x61,  // !...C..a
                            /* 0198 */  0x51, 0x83, 0xA7, 0x27, 0x0B, 0x7E, 0xA8, 0x60,  // Q..'.~.`
                            /* 01A0 */  0xC0, 0x7C, 0x3C, 0xA7, 0xE5, 0xB3, 0x87, 0x87,  // .|<.....
                            /* 01A8 */  0x07, 0x7F, 0x26, 0x4F, 0x14, 0xC0, 0x41, 0xE3,  // ..&O..A.
                            /* 01B0 */  0x19, 0x41, 0x88, 0xAF, 0x14, 0x6F, 0x14, 0xD8,  // .A...o..
                            /* 01B8 */  0xF3, 0x01, 0xBB, 0x53, 0x60, 0x87, 0x0E, 0xFF,  // ...S`...
                            /* 01C0 */  0x5A, 0x61, 0x54, 0x5F, 0x25, 0xDE, 0x22, 0x12,  // ZaT_%.".
                            /* 01C8 */  0x18, 0x2B, 0xC1, 0xFF, 0x3F, 0x30, 0x6E, 0xEC,  // .+..?0n.
                            /* 01D0 */  0xF6, 0x2B, 0x00, 0x21, 0xF8, 0xC1, 0x3C, 0x1B,  // .+.!..<.
                            /* 01D8 */  0x3C, 0x85, 0x44, 0x38, 0x2E, 0xA3, 0x1F, 0x50,  // <.D8...P
                            /* 01E0 */  0x9F, 0x33, 0x17, 0x44, 0xB4, 0xE3, 0x3A, 0x87,  // .3.D..:.
                            /* 01E8 */  0xA3, 0x08, 0x15, 0xE2, 0x2C, 0x0C, 0x14, 0x2E,  // ....,...
                            /* 01F0 */  0x58, 0x40, 0xE3, 0x24, 0xB0, 0xC8, 0xC1, 0xA2,  // X@.$....
                            /* 01F8 */  0x07, 0xC1, 0x01, 0xCF, 0xE1, 0x90, 0x82, 0x1E,  // ........
                            /* 0200 */  0xC4, 0xC9, 0x44, 0x39, 0x8F, 0x63, 0xF2, 0x39,  // ..D9.c.9
                            /* 0208 */  0xC5, 0x08, 0xC7, 0xF4, 0x78, 0xF2, 0xDC, 0xE1,  // ....x...
                            /* 0210 */  0xFB, 0xC6, 0xE1, 0x9F, 0xD7, 0xD1, 0x3E, 0x85,  // ......>.
                            /* 0218 */  0xB0, 0xA1, 0x1F, 0x02, 0xE6, 0x74, 0xE1, 0x21,  // .....t.!
                            /* 0220 */  0xF0, 0x01, 0x1C, 0xD0, 0x29, 0x5A, 0xE9, 0xC4,  // ....)Z..
                            /* 0228 */  0x90, 0x27, 0x1A, 0x7E, 0x2C, 0xC1, 0x0E, 0x80,  // .'.~,...
                            /* 0230 */  0xAB, 0xF2, 0x00, 0xC2, 0xC4, 0x3F, 0x0E, 0x24,  // .....?.$
                            /* 0238 */  0xED, 0x95, 0x40, 0x61, 0x7C, 0xC6, 0x01, 0x5C,  // ..@a|..\
                            /* 0240 */  0x01, 0x3D, 0x42, 0x80, 0xE7, 0x6C, 0x00, 0x17,  // .=B..l..
                            /* 0248 */  0xFB, 0xE4, 0xA3, 0x84, 0x78, 0x7A, 0x88, 0x7E,  // ....xz.~
                            /* 0250 */  0x2E, 0x27, 0xF3, 0x08, 0x61, 0x82, 0xFF, 0xFF,  // .'..a...
                            /* 0258 */  0x03, 0x0E, 0xEC, 0x2B, 0x8C, 0xB5, 0x5D, 0x70,  // ...+..]p
                            /* 0260 */  0xC8, 0x94, 0x9E, 0x6A, 0xDE, 0x6E, 0x8C, 0x72,  // ...j.n.r
                            /* 0268 */  0x58, 0x86, 0x79, 0xC0, 0xF1, 0xED, 0xA0, 0x35,  // X.y....5
                            /* 0270 */  0x18, 0xDD, 0x6E, 0xD8, 0x89, 0xE4, 0x24, 0x42,  // ..n...$B
                            /* 0278 */  0x31, 0xDC, 0x07, 0x89, 0x38, 0xB1, 0xC3, 0x45,  // 1...8..E
                            /* 0280 */  0x88, 0xFD, 0xD0, 0x61, 0xBC, 0x07, 0x1C, 0x16,  // ...a....
                            /* 0288 */  0xEF, 0x38, 0xA0, 0x83, 0x88, 0x0F, 0x38, 0x00,  // .8....8.
                            /* 0290 */  0x3F, 0x4E, 0x07, 0x8F, 0x25, 0xE0, 0x3F, 0x2B,  // ?N..%.?+
                            /* 0298 */  0xF0, 0x53, 0x09, 0x18, 0xFE, 0xFF, 0xA7, 0x12,  // .S......
                            /* 02A0 */  0xF0, 0x24, 0x7E, 0x10, 0xE8, 0xB4, 0xE3, 0xB4,  // .$~.....
                            /* 02A8 */  0x20, 0xB2, 0xB1, 0x58, 0x1F, 0xAA, 0x0C, 0xA1,  //  ..X....
                            /* 02B0 */  0x9C, 0x0B, 0x96, 0x47, 0x5C, 0x61, 0x1E, 0x4F,  // ...G\a.O
                            /* 02B8 */  0xE4, 0x73, 0x88, 0xFC, 0x52, 0x11, 0xE1, 0x0C,  // .s..R...
                            /* 02C0 */  0x8E, 0x21, 0xD2, 0x69, 0xC5, 0x38, 0xB0, 0x57,  // .!.i.8.W
                            /* 02C8 */  0x0E, 0xDF, 0x03, 0x9E, 0x2C, 0x78, 0x22, 0x60,  // ....,x"`
                            /* 02D0 */  0x1D, 0xE5, 0x78, 0x16, 0x0A, 0x29, 0xA3, 0xD1,  // ..x..)..
                            /* 02D8 */  0xA8, 0x3C, 0x08, 0x6B, 0x81, 0x11, 0x9C, 0x41,  // .<.k...A
                            /* 02E0 */  0x0C, 0xE8, 0xA0, 0x10, 0x3A, 0x22, 0xE1, 0x94,  // ....:"..
                            /* 02E8 */  0x80, 0x68, 0x5A, 0x6F, 0x44, 0xEC, 0xDC, 0xE3,  // .hZoD...
                            /* 02F0 */  0x1B, 0x92, 0x09, 0xA6, 0xBA, 0x1D, 0xD1, 0x79,  // .......y
                            /* 02F8 */  0xFA, 0x46, 0xC0, 0xEF, 0x29, 0x3E, 0x23, 0x18,  // .F..)>#.
                            /* 0300 */  0xDC, 0x0A, 0xEF, 0x1F, 0xA0, 0x19, 0x71, 0x10,  // ......q.
                            /* 0308 */  0xDF, 0x18, 0x7C, 0x26, 0xF0, 0x46, 0x4F, 0x04,  // ..|&.FO.
                            /* 0310 */  0xA3, 0xE6, 0xD0, 0x84, 0x9A, 0x86, 0xA7, 0xFA,  // ........
                            /* 0318 */  0x62, 0x63, 0x02, 0xEB, 0xBA, 0x0C, 0x81, 0x4C,  // bc.....L
                            /* 0320 */  0xDF, 0x31, 0x01, 0x14, 0x40, 0xBE, 0x14, 0xF8,  // .1..@...
                            /* 0328 */  0xA4, 0xF3, 0x60, 0xC0, 0xC6, 0xF0, 0xB0, 0x63,  // ..`....c
                            /* 0330 */  0x34, 0xA3, 0x73, 0xC1, 0x93, 0x47, 0x49, 0x9C,  // 4.s..GI.
                            /* 0338 */  0x3C, 0x05, 0xF1, 0xE4, 0x1D, 0x7F, 0xF2, 0xE8,  // <.......
                            /* 0340 */  0x3B, 0x85, 0x8F, 0x57, 0x9C, 0xC0, 0x71, 0xC7,  // ;..W..q.
                            /* 0348 */  0x4E, 0xAF, 0x20, 0x98, 0xFF, 0xFF, 0x30, 0xD8,  // N. ...0.
                            /* 0350 */  0x64, 0x4F, 0xED, 0x51, 0xC1, 0xB3, 0xF0, 0xA5,  // dO.Q....
                            /* 0358 */  0x05, 0x37, 0x78, 0xB8, 0xB7, 0x8C, 0x23, 0x0F,  // .7x...#.
                            /* 0360 */  0xF3, 0x4C, 0xE5, 0xF3, 0x95, 0xC1, 0x82, 0x84,  // .L......
                            /* 0368 */  0x79, 0x5F, 0xC0, 0x01, 0xBD, 0xDF, 0xBD, 0x38,  // y_.....8
                            /* 0370 */  0x1C, 0x6E, 0x88, 0xF3, 0x3D, 0xF4, 0x08, 0x3E,  // .n..=..>
                            /* 0378 */  0x7E, 0xF8, 0xCC, 0x80, 0x1B, 0x12, 0xBB, 0x06,  // ~.......
                            /* 0380 */  0xF0, 0xD1, 0xF8, 0x1A, 0xC0, 0x47, 0xE9, 0x3B,  // .....G.;
                            /* 0388 */  0x16, 0xF8, 0x04, 0xDE, 0x03, 0x40, 0x0E, 0x8F,  // .....@..
                            /* 0390 */  0x09, 0x3F, 0x2A, 0x7A, 0xCF, 0xF0, 0xB8, 0xF8,  // .?*z....
                            /* 0398 */  0x90, 0x7D, 0x45, 0x62, 0xD8, 0xCF, 0x1A, 0xBE,  // .}Eb....
                            /* 03A0 */  0x47, 0x9E, 0xE0, 0x2B, 0xC5, 0x2B, 0x1B, 0x06,  // G..+.+..
                            /* 03A8 */  0xD6, 0x87, 0x00, 0x0E, 0x6B, 0xB4, 0xB0, 0x87,  // ....k...
                            /* 03B0 */  0xFC, 0x92, 0xE2, 0x13, 0x8E, 0x67, 0x66, 0x8C,  // .....gf.
                            /* 03B8 */  0xB0, 0x3E, 0x08, 0x38, 0xCC, 0x41, 0x00, 0x34,  // .>.8.A.4
                            /* 03C0 */  0x47, 0x36, 0xFC, 0x0D, 0xC0, 0x97, 0x80, 0x20,  // G6..... 
                            /* 03C8 */  0x6F, 0x22, 0xA7, 0xFB, 0xE4, 0x63, 0x54, 0x7E,  // o"...cT~
                            /* 03D0 */  0x23, 0xE0, 0xE7, 0x11, 0x2C, 0x50, 0x10, 0xDF,  // #...,P..
                            /* 03D8 */  0x30, 0x3C, 0xB6, 0x03, 0x89, 0x0D, 0xE7, 0x5A,  // 0<.....Z
                            /* 03E0 */  0xC2, 0xFE, 0xFF, 0x77, 0x02, 0x8C, 0x42, 0x9B,  // ...w..B.
                            /* 03E8 */  0x3E, 0x35, 0x1A, 0xB5, 0x6A, 0x50, 0xA6, 0x46,  // >5..jP.F
                            /* 03F0 */  0x99, 0x06, 0xB5, 0xFA, 0x54, 0x6A, 0xCC, 0x98,  // ....Tj..
                            /* 03F8 */  0x89, 0x2B, 0x9F, 0x5F, 0x11, 0x1A, 0xB1, 0x23,  // .+._...#
                            /* 0400 */  0x81, 0xD0, 0x98, 0x14, 0x02, 0x71, 0xE8, 0x1F,  // .....q..
                            /* 0408 */  0x87, 0x40, 0x2C, 0xF9, 0x1E, 0x26, 0x10, 0x4B,  // .@,..&.K
                            /* 0410 */  0xA2, 0x95, 0x91, 0x8B, 0x86, 0x41, 0x04, 0x64,  // .....A.d
                            /* 0418 */  0xFD, 0x2A, 0x80, 0x58, 0x1A, 0x10, 0x01, 0xF9,  // .*.X....
                            /* 0420 */  0xFF, 0x0F                                       // ..
                        })
                    }
                }

                Scope (\)
                {
                    Method (VDDC, 2, NotSerialized)
                    {
                        Local0 = Arg1
                        CreateField (Local0, Zero, 0x40, EDS1)
                        Local1 = EDS1 /* \VDDC.EDS1 */
                        If ((Local1 != Buffer (0x08)
                                    {
                                         0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00   // ........
                                    }))
                        {
                            Return (Zero)
                        }

                        CreateByteField (Local0, 0x7E, EBLK)
                        Local1 = EBLK /* \VDDC.EBLK */
                        Local1++
                        Local2 = (Local1 * 0x80)
                        Local3 = (Local2 * 0x08)
                        If ((SizeOf (Local0) < Local2))
                        {
                            Return (Zero)
                        }

                        If ((Arg0 == Local1))
                        {
                            CreateField (Local0, Zero, Local3, EBUF)
                            Return (EBUF) /* \VDDC.EBUF */
                        }

                        Return (Zero)
                    }

                    Method (ECHK, 1, NotSerialized)
                    {
                        OperationRegion (ERAE, SystemMemory, 0xFE0B0E00, 0x0100)
                        Field (ERAE, AnyAcc, NoLock, Preserve)
                        {
                            Offset (0xB8), 
                            CHKC,   32, 
                            CHKB,   32
                        }

                        CHKC = Arg0
                    }

                    OperationRegion (ECMS, SystemIO, 0x72, 0x02)
                    Field (ECMS, ByteAcc, Lock, Preserve)
                    {
                        ECMI,   8, 
                        ECMD,   8
                    }

                    Method (RECM, 1, Serialized)
                    {
                        ECMI = Arg0
                        Return (ECMD) /* \ECMD */
                    }

                    Method (WECM, 2, Serialized)
                    {
                        ECMI = Arg0
                        ECMD = Arg1
                    }
                }

                Device (KBC0)
                {
                    Name (_HID, EisaId ("KBC8042"))  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _CID: Compatible ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQ (Edge, ActiveLow, Shared, )
                            {1}
                    })
                }
            }
        }

        Method (GSMI, 1, NotSerialized)
        {
            APMD = Arg0
            APMC = 0xE4
            Sleep (0x02)
        }

        Method (S80H, 1, NotSerialized)
        {
            Local0 = (Arg0 & 0x00FFFFFF)
            P80H = (Local0 | 0xDB000000)
        }

        Method (BSMI, 1, NotSerialized)
        {
            APMD = Arg0
            APMC = 0xBE
            Sleep (One)
        }
    }

    Name (TSOS, 0x75)
    Name (UR0I, 0x03)
    Name (UR1I, 0x04)
    Name (UR2I, 0x03)
    Name (UR3I, 0x04)
    Name (UR4I, 0x0F)
    Name (IC0I, 0x0A)
    Name (IC1I, 0x0B)
    Name (IC2I, 0x04)
    Name (IC3I, 0x06)
    Name (IC4I, 0x0E)
    If (CondRefOf (\_OSI))
    {
        If (_OSI ("Windows 2009"))
        {
            TSOS = 0x50
        }

        If (_OSI ("Windows 2015"))
        {
            TSOS = 0x70
        }
    }

    Scope (_SB)
    {
        OperationRegion (SMIC, SystemMemory, 0xFED80000, 0x00800000)
        Field (SMIC, ByteAcc, NoLock, Preserve)
        {
            Offset (0x36A), 
            SMIB,   8
        }

        OperationRegion (SSMI, SystemIO, SMIB, 0x02)
        Field (SSMI, AnyAcc, NoLock, Preserve)
        {
            SMIW,   16
        }

        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            FRTB,   32
        }

        OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
        Field (FRTP, AnyAcc, NoLock, Preserve)
        {
            PEBA,   32, 
                ,   5, 
            IC0E,   1, 
            IC1E,   1, 
            IC2E,   1, 
            IC3E,   1, 
            IC4E,   1, 
            IC5E,   1, 
            UT0E,   1, 
            UT1E,   1, 
            I31E,   1, 
            I32E,   1, 
            I33E,   1, 
            UT2E,   1, 
                ,   1, 
            EMMD,   2, 
            UT4E,   1, 
            I30E,   1, 
                ,   1, 
            XHCE,   1, 
                ,   1, 
                ,   1, 
            UT3E,   1, 
            ESPI,   1, 
            EMME,   1, 
            HFPE,   1, 
            HD0E,   1, 
            Offset (0x08), 
            PCEF,   1, 
                ,   4, 
            IC0D,   1, 
            IC1D,   1, 
            IC2D,   1, 
            IC3D,   1, 
            IC4D,   1, 
            IC5D,   1, 
            UT0D,   1, 
            UT1D,   1, 
            I31D,   1, 
            I32D,   1, 
            I33D,   1, 
            UT2D,   1, 
                ,   1, 
            EHCD,   1, 
                ,   1, 
            UT4D,   1, 
            I30D,   1, 
                ,   1, 
            XHCD,   1, 
            SD_D,   1, 
                ,   1, 
            UT3D,   1, 
                ,   1, 
            EMD3,   1, 
                ,   2, 
            S03D,   1, 
            Offset (0x1C), 
            I30M,   1, 
            I31M,   1, 
            I32M,   1, 
            I33M,   1
        }

        OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
        Field (FCFG, DWordAcc, NoLock, Preserve)
        {
            Offset (0xA3078), 
                ,   2, 
            LDQ0,   1, 
            Offset (0xA30CB), 
                ,   7, 
            AUSS,   1
        }

        OperationRegion (IOMX, SystemMemory, 0xFED80D00, 0x0100)
        Field (IOMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x15), 
            IM15,   8, 
            IM16,   8, 
            Offset (0x1F), 
            IM1F,   8, 
            IM20,   8, 
            Offset (0x44), 
            IM44,   8, 
            Offset (0x46), 
            IM46,   8, 
            Offset (0x4A), 
            IM4A,   8, 
            IM4B,   8, 
            Offset (0x57), 
            IM57,   8, 
            IM58,   8, 
            Offset (0x68), 
            IM68,   8, 
            IM69,   8, 
            IM6A,   8, 
            IM6B,   8, 
            Offset (0x6D), 
            IM6D,   8
        }

        OperationRegion (FACR, SystemMemory, 0xFED81E00, 0x0100)
        Field (FACR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x80), 
                ,   28, 
            RD28,   1, 
                ,   1, 
            RQTY,   1, 
            Offset (0x84), 
                ,   28, 
            SD28,   1, 
                ,   1, 
            Offset (0xA0), 
            PG1A,   1
        }

        OperationRegion (LUIE, SystemMemory, 0xFEDC0020, 0x04)
        Field (LUIE, AnyAcc, NoLock, Preserve)
        {
            IER0,   1, 
            IER1,   1, 
            IER2,   1, 
            IER3,   1, 
            UOL0,   1, 
            UOL1,   1, 
            UOL2,   1, 
            UOL3,   1, 
            WUR0,   2, 
            WUR1,   2, 
            WUR2,   2, 
            WUR3,   2
        }

        Method (FRUI, 1, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (IUA0) /* \_SB_.IUA0 */
            }
            ElseIf ((Arg0 == One))
            {
                Return (IUA1) /* \_SB_.IUA1 */
            }
            ElseIf ((Arg0 == 0x02))
            {
                Return (IUA2) /* \_SB_.IUA2 */
            }
            ElseIf ((Arg0 == 0x03))
            {
                Return (IUA3) /* \_SB_.IUA3 */
            }
            Else
            {
                Return (0x03)
            }
        }

        Method (FUIO, 1, Serialized)
        {
            If ((IER0 == One))
            {
                If ((WUR0 == Arg0))
                {
                    Return (Zero)
                }
            }

            If ((IER1 == One))
            {
                If ((WUR1 == Arg0))
                {
                    Return (One)
                }
            }

            If ((IER2 == One))
            {
                If ((WUR2 == Arg0))
                {
                    Return (0x02)
                }
            }

            If ((IER3 == One))
            {
                If ((WUR3 == Arg0))
                {
                    Return (0x03)
                }
            }

            Return (0x0F)
        }

        Method (SRAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            ADIS = One
            ADSR = Zero
            Stall (Arg1)
            ADSR = One
            ADIS = Zero
            Stall (Arg1)
        }

        Method (DSAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        Method (HSAD, 2, Serialized)
        {
            Local3 = (One << Arg0)
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    PG1A = One
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    RQTY = One
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (!Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    RQTY = Zero
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }

                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    ADTD = 0x03
                    PG1A = Zero
                }
            }
        }

        OperationRegion (FPIC, SystemIO, 0x0C00, 0x02)
        Field (FPIC, AnyAcc, NoLock, Preserve)
        {
            FPII,   8, 
            FPID,   8
        }

        IndexField (FPII, FPID, ByteAcc, NoLock, Preserve)
        {
            Offset (0xF4), 
            IUA0,   8, 
            IUA1,   8, 
            Offset (0xF8), 
            IUA2,   8, 
            IUA3,   8
        }

        Device (HFP1)
        {
            Name (_HID, "AMDI0060")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HFPE)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC11000,         // Address Base
                        0x00000100,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.HFP1._CRS.RBUF */
            }
        }

        Device (HID0)
        {
            Name (_HID, "AMDI0063")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HD0E)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC13000,         // Address Base
                        0x00000200,         // Address Length
                        )
                    GpioInt (Edge, ActiveHigh, SharedAndWake, PullNone, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x00AB
                        }
                })
                Return (RBUF) /* \_SB_.HID0._CRS.RBUF */
            }
        }

        Device (GPIO)
        {
            Name (_HID, "AMDI0030")  // _HID: Hardware ID
            Name (_CID, "AMDI0030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000400,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (PPKG)
        {
            Name (_HID, "AMDI0052")  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (FUR0)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {3}
                    Memory32Fixed (ReadWrite,
                        0xFEDC9000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDC7000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR0I & 0x0F))
                Return (BUF0) /* \_SB_.FUR0._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT0E == One))
                    {
                        If ((FUIO (Zero) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT0D && UT0E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT0D && UT0E))
                {
                    DSAD (0x0B, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT0D && UT0E))
                {
                    DSAD (0x0B, 0x03)
                }
            }
        }

        Device (FUR1)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDCA000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDC8000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR1I & 0x0F))
                Return (BUF0) /* \_SB_.FUR1._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT1E == One))
                    {
                        If ((FUIO (One) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT1D && UT1E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT1D && UT1E))
                {
                    DSAD (0x0C, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT1D && UT1E))
                {
                    DSAD (0x0C, 0x03)
                }
            }
        }

        Device (FUR2)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {3}
                    Memory32Fixed (ReadWrite,
                        0xFEDCE000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDCC000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR2I & 0x0F))
                Return (BUF0) /* \_SB_.FUR2._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT2E == One))
                    {
                        If ((FUIO (0x02) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT2D && UT2E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT2D && UT2E))
                {
                    DSAD (0x10, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT2D && UT2E))
                {
                    DSAD (0x10, 0x03)
                }
            }
        }

        Device (FUR3)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDCF000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDCD000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR3I & 0x0F))
                Return (BUF0) /* \_SB_.FUR3._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT3E == One))
                    {
                        If ((FUIO (0x03) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT3D && UT3E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT3D && UT3E))
                {
                    DSAD (0x1A, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT3D && UT3E))
                {
                    DSAD (0x1A, 0x03)
                }
            }
        }

        Device (FUR4)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {15}
                    Memory32Fixed (ReadWrite,
                        0xFEDD1000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDD0000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR4I & 0x0F))
                Return (BUF0) /* \_SB_.FUR4._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT4E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT4D && UT4E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT4D && UT4E))
                {
                    DSAD (0x14, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT4D && UT4E))
                {
                    DSAD (0x14, 0x03)
                }
            }
        }

        Device (I2CA)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {10}
                    Memory32Fixed (ReadWrite,
                        0xFEDC2000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC0I & 0x0F))
                Return (BUF0) /* \_SB_.I2CA._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC0E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x05, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC0D && IC0E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC0D && IC0E))
                {
                    DSAD (0x05, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC0D && IC0E))
                {
                    DSAD (0x05, 0x03)
                }
            }
        }

        Device (I2CB)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {11}
                    Memory32Fixed (ReadWrite,
                        0xFEDC3000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC1I & 0x0F))
                Return (BUF0) /* \_SB_.I2CB._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC1E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x06, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC1D && IC1E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC1D && IC1E))
                {
                    DSAD (0x06, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC1D && IC1E))
                {
                    DSAD (0x06, 0x03)
                }
            }
        }

        Device (I2CC)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDC4000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC2I & 0x0F))
                Return (BUF0) /* \_SB_.I2CC._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC2E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x07, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC2D && IC2E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC2D && IC2E))
                {
                    DSAD (0x07, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC2D && IC2E))
                {
                    DSAD (0x07, 0x03)
                }
            }
        }

        Device (I2CD)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {6}
                    Memory32Fixed (ReadWrite,
                        0xFEDC5000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC3I & 0x0F))
                Return (BUF0) /* \_SB_.I2CD._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC3E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x08, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC3D && IC3E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC3D && IC3E))
                {
                    DSAD (0x08, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC3D && IC3E))
                {
                    DSAD (0x08, 0x03)
                }
            }
        }

        Name (I3ID, "AMDI0015")
        Name (I2ID, "AMDI0016")
        Device (I3CA)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I30M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {10}
                    Memory32Fixed (ReadWrite,
                        0xFEDD2000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC0I & 0x0F))
                Return (BUF0) /* \_SB_.I3CA._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I30E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x15, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I30D && I30E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I30D && I30E))
                {
                    DSAD (0x15, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I30D && I30E))
                {
                    DSAD (0x15, 0x03)
                }
            }
        }

        Device (I3CB)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I31M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {11}
                    Memory32Fixed (ReadWrite,
                        0xFEDD3000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC1I & 0x0F))
                Return (BUF0) /* \_SB_.I3CB._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I31E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0D, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I31D && I31E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I31D && I31E))
                {
                    DSAD (0x0D, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I31D && I31E))
                {
                    DSAD (0x0D, 0x03)
                }
            }
        }

        Device (I3CC)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I32M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDD4000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC2I & 0x0F))
                Return (BUF0) /* \_SB_.I3CC._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I32E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0E, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I32D && I32E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I32D && I32E))
                {
                    DSAD (0x0E, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I32D && I32E))
                {
                    DSAD (0x0E, 0x03)
                }
            }
        }

        Device (I3CD)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I33M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {6}
                    Memory32Fixed (ReadWrite,
                        0xFEDD6000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC3I & 0x0F))
                Return (BUF0) /* \_SB_.I3CD._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I33E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0F, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I33D && I33E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I33D && I33E))
                {
                    DSAD (0x0F, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I33D && I33E))
                {
                    DSAD (0x0F, 0x03)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (UAR1)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_DDN, "COM1")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (Zero) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02E8,             // Range Minimum
                        0x02E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y08)
                    IRQNoFlags (_Y09)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y08._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y08._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR1._CRS._Y09._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (Zero)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                IRQL = (One << (FRUI (Zero) & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR1._CRS.BUF0 */
            }
        }

        Device (UAR2)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_DDN, "COM2")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (One) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02F8,             // Range Minimum
                        0x02F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y0A)
                    IRQNoFlags (_Y0B)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y0A._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y0A._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR2._CRS._Y0B._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (One)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                IRQL = (One << (FRUI (One) & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR2._CRS.BUF0 */
            }
        }

        Device (UAR3)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_DDN, "COM3")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (0x02) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03E8,             // Range Minimum
                        0x03E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y0C)
                    IRQNoFlags (_Y0D)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y0C._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y0C._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR3._CRS._Y0D._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (0x02)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                IRQL = (One << (FRUI (0x02) & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR3._CRS.BUF0 */
            }
        }

        Device (UAR4)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_DDN, "COM4")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (0x03) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03F8,             // Range Minimum
                        0x03F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y0E)
                    IRQNoFlags (_Y0F)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y0E._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y0E._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR4._CRS._Y0F._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (0x03)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                IRQL = (One << (FRUI (0x03) & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR4._CRS.BUF0 */
            }
        }
    }

    Scope (_SB.I2CA)
    {
        Device (TPNL)
        {
            Name (_HID, EisaId ("PNP0C50") /* HID Protocol Device (I2C bus) */)  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x004A, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, SharedAndWake, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0008
                        }
                })
                Return (RBUF) /* \_SB_.I2CA.TPNL._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (THPN == Zero)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0){}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (Zero)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }

        Device (ELAN)
        {
            Name (_HID, EisaId ("PNP0C50") /* HID Protocol Device (I2C bus) */)  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0010, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, SharedAndWake, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0008
                        }
                })
                Return (RBUF) /* \_SB_.I2CA.ELAN._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (THPN == 0x10)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0){}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_SB.I2CB)
    {
        Device (TPNL)
        {
            Name (_HID, EisaId ("PNP0C50") /* HID Protocol Device (I2C bus) */)  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x004A, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, SharedAndWake, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0008
                        }
                })
                Return (RBUF) /* \_SB_.I2CB.TPNL._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (THPN == One)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0){}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (Zero)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }

        Device (ELAN)
        {
            Name (_HID, EisaId ("PNP0C50") /* HID Protocol Device (I2C bus) */)  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0010, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, SharedAndWake, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0008
                        }
                })
                Return (RBUF) /* \_SB_.I2CB.ELAN._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (THPN == 0x11)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0){}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_SB.I2CC)
    {
        Device (TPNL)
        {
            Name (_HID, EisaId ("PNP0C50") /* HID Protocol Device (I2C bus) */)  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x004A, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, SharedAndWake, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0008
                        }
                })
                Return (RBUF) /* \_SB_.I2CC.TPNL._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (THPN == 0x02)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0){}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (Zero)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }

        Device (ELAN)
        {
            Name (_HID, EisaId ("PNP0C50") /* HID Protocol Device (I2C bus) */)  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0010, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, SharedAndWake, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0008
                        }
                })
                Return (RBUF) /* \_SB_.I2CC.ELAN._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (THPN == 0x12)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0){}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_SB.I2CD)
    {
        Device (TPNL)
        {
            Name (_HID, EisaId ("PNP0C50") /* HID Protocol Device (I2C bus) */)  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x004A, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, SharedAndWake, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0008
                        }
                })
                Return (RBUF) /* \_SB_.I2CD.TPNL._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (THPN == 0x03)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0){}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (Zero)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }

        Device (ELAN)
        {
            Name (_HID, EisaId ("PNP0C50") /* HID Protocol Device (I2C bus) */)  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0010, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, SharedAndWake, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0008
                        }
                })
                Return (RBUF) /* \_SB_.I2CD.ELAN._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (THPN == 0x13)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0){}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_SB.I2CA)
    {
        Device (TPDD)
        {
            Name (_HID, "XXXX0000")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_SUB, "XXXX0000")  // _SUB: Subsystem ID
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((TPTY == One))
                {
                    _HID = "ELAN06FA"
                    _SUB = "ELAN0001"
                    Return (Zero)
                }

                If ((TPTY == 0x02))
                {
                    _HID = "SYNA2BA6"
                    _SUB = "SYNA0001"
                    Return (Zero)
                }

                If ((TPTY == 0x04))
                {
                    _HID = "GXTP5100"
                    _SUB = "GOOD0001"
                    Return (Zero)
                }

                If ((TPTY == 0x05))
                {
                    _HID = "FTCS0038"
                    _SUB = "FOCA0001"
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == One))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        If ((TPTY == One))
                        {
                            Return (One)
                        }

                        If ((TPTY == 0x02))
                        {
                            Return (0x20)
                        }

                        If ((TPTY == 0x04))
                        {
                            Return (One)
                        }

                        If ((TPTY == 0x05))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TPTY == Zero))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If ((TPTY == One))
                {
                    Name (SBFB, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CA",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                }

                If ((TPTY == 0x02))
                {
                    Name (SBFS, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x002C, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CA",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                }

                If ((TPTY == 0x04))
                {
                    Name (SBFF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x005D, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CA",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                }

                If ((TPTY == 0x05))
                {
                    Name (SBFG, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CA",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                }

                Name (SBFI, ResourceTemplate ()
                {
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0059
                        }
                })
                If ((TPTY == One))
                {
                    Return (ConcatenateResTemplate (SBFB, SBFI))
                }

                If ((TPTY == 0x02))
                {
                    Return (ConcatenateResTemplate (SBFS, SBFI))
                }

                If ((TPTY == 0x04))
                {
                    Return (ConcatenateResTemplate (SBFF, SBFI))
                }

                If ((TPTY == 0x05))
                {
                    Return (ConcatenateResTemplate (SBFG, SBFI))
                }
            }

            Method (TPRD, 0, Serialized)
            {
                Return (^^^PCI0.LPC0.EC0.ECTP) /* \_SB_.PCI0.LPC0.EC0_.ECTP */
            }

            Method (TPWR, 1, Serialized)
            {
                ^^^PCI0.LPC0.EC0.ECTP = Arg0
            }
        }
    }

    Scope (_SB.I2CB)
    {
    }

    Scope (_SB.I2CC)
    {
    }

    Scope (_SB.I2CD)
    {
    }

    Scope (_SB.I2CB)
    {
        Device (AMP0)
        {
            Name (_HID, "TIAS2781")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            OperationRegion (SKID, SystemMemory, 0xFED81576, One)
            Field (SKID, AnyAcc, NoLock, Preserve)
            {
                    ,   6, 
                SPKF,   1
            }

            Method (_SUB, 0, NotSerialized)  // _SUB: Subsystem ID
            {
                If ((SPKF == Zero))
                {
                    Return ("17AA38A7")
                }

                Return ("17AA38A8")
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Edge, ActiveLow, SharedAndWake, PullNone, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x000B
                        }
                })
                Return (RBUF) /* \_SB_.I2CB.AMP0._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MCSK == 0x02))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.I2CB)
    {
        Device (AI5K)
        {
            Name (_HID, "IDEA5002")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == One))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MCSK == 0x02))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBFB, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x005C, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Name (SBFI, ResourceTemplate ()
                {
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x005A
                        }
                })
                Return (ConcatenateResTemplate (SBFB, SBFI))
            }
        }
    }

    Scope (_SB.I2CD)
    {
        Device (TCON)
        {
            Name (_HID, "LTCN0001")  // _HID: Hardware ID
            Name (_CID, "LTCN0001")  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((LPUF == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBFB, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0061, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (SBFB) /* \_SB_.I2CD.TCON._CRS.SBFB */
            }
        }
    }
}



FACP
----
[000h 0000 004h]                   Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004 004h]                Table Length : 0000010C
[008h 0008 001h]                    Revision : 05
[009h 0009 001h]                    Checksum : 19
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]                FACS Address : BAE34000
[028h 0040 004h]                DSDT Address : BAFC4000
[02Ch 0044 001h]                       Model : 00
[02Dh 0045 001h]                  PM Profile : 02 [Mobile]
[02Eh 0046 002h]               SCI Interrupt : 0009
[030h 0048 004h]            SMI Command Port : 000000B0
[034h 0052 001h]           ACPI Enable Value : A0
[035h 0053 001h]          ACPI Disable Value : A1
[036h 0054 001h]              S4BIOS Command : 00
[037h 0055 001h]             P-State Control : 00
[038h 0056 004h]    PM1A Event Block Address : 00000400
[03Ch 0060 004h]    PM1B Event Block Address : 00000000
[040h 0064 004h]  PM1A Control Block Address : 00000404
[044h 0068 004h]  PM1B Control Block Address : 00000000
[048h 0072 004h]   PM2 Control Block Address : 00000800
[04Ch 0076 004h]      PM Timer Block Address : 00000408
[050h 0080 004h]          GPE0 Block Address : 00000420
[054h 0084 004h]          GPE1 Block Address : 00000000
[058h 0088 001h]      PM1 Event Block Length : 04
[059h 0089 001h]    PM1 Control Block Length : 02
[05Ah 0090 001h]    PM2 Control Block Length : 01
[05Bh 0091 001h]       PM Timer Block Length : 04
[05Ch 0092 001h]           GPE0 Block Length : 08
[05Dh 0093 001h]           GPE1 Block Length : 00
[05Eh 0094 001h]            GPE1 Base Offset : 00
[05Fh 0095 001h]                _CST Support : 00
[060h 0096 002h]                  C2 Latency : 0064
[062h 0098 002h]                  C3 Latency : 03E9
[064h 0100 002h]              CPU Cache Size : 0000
[066h 0102 002h]          Cache Flush Stride : 0000
[068h 0104 001h]           Duty Cycle Offset : 01
[069h 0105 001h]            Duty Cycle Width : 03
[06Ah 0106 001h]         RTC Day Alarm Index : 0D
[06Bh 0107 001h]       RTC Month Alarm Index : 00
[06Ch 0108 001h]           RTC Century Index : 00
[06Dh 0109 002h]  Boot Flags (decoded below) : 0003
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111 001h]                    Reserved : 00
[070h 0112 004h]       Flags (decoded below) : 000085AD
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 1
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116 00Ch]              Reset Register : [Generic Address Structure]
[074h 0116 001h]                    Space ID : 01 [SystemIO]
[075h 0117 001h]                   Bit Width : 08
[076h 0118 001h]                  Bit Offset : 00
[077h 0119 001h]        Encoded Access Width : 01 [Byte Access:8]
[078h 0120 008h]                     Address : 00000000000000B0

[080h 0128 001h]        Value to cause reset : FB
[081h 0129 002h]   ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131 001h]         FADT Minor Revision : 00
[084h 0132 008h]                FACS Address : 0000000000000000
[08Ch 0140 008h]                DSDT Address : 00000000BAFC4000
[094h 0148 00Ch]            PM1A Event Block : [Generic Address Structure]
[094h 0148 001h]                    Space ID : 01 [SystemIO]
[095h 0149 001h]                   Bit Width : 20
[096h 0150 001h]                  Bit Offset : 00
[097h 0151 001h]        Encoded Access Width : 03 [DWord Access:32]
[098h 0152 008h]                     Address : 0000000000000400

[0A0h 0160 00Ch]            PM1B Event Block : [Generic Address Structure]
[0A0h 0160 001h]                    Space ID : 00 [SystemMemory]
[0A1h 0161 001h]                   Bit Width : 00
[0A2h 0162 001h]                  Bit Offset : 00
[0A3h 0163 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164 008h]                     Address : 0000000000000000

[0ACh 0172 00Ch]          PM1A Control Block : [Generic Address Structure]
[0ACh 0172 001h]                    Space ID : 01 [SystemIO]
[0ADh 0173 001h]                   Bit Width : 10
[0AEh 0174 001h]                  Bit Offset : 00
[0AFh 0175 001h]        Encoded Access Width : 02 [Word Access:16]
[0B0h 0176 008h]                     Address : 0000000000000404

[0B8h 0184 00Ch]          PM1B Control Block : [Generic Address Structure]
[0B8h 0184 001h]                    Space ID : 00 [SystemMemory]
[0B9h 0185 001h]                   Bit Width : 00
[0BAh 0186 001h]                  Bit Offset : 00
[0BBh 0187 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188 008h]                     Address : 0000000000000000

[0C4h 0196 00Ch]           PM2 Control Block : [Generic Address Structure]
[0C4h 0196 001h]                    Space ID : 01 [SystemIO]
[0C5h 0197 001h]                   Bit Width : 08
[0C6h 0198 001h]                  Bit Offset : 00
[0C7h 0199 001h]        Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200 008h]                     Address : 0000000000000800

[0D0h 0208 00Ch]              PM Timer Block : [Generic Address Structure]
[0D0h 0208 001h]                    Space ID : 01 [SystemIO]
[0D1h 0209 001h]                   Bit Width : 20
[0D2h 0210 001h]                  Bit Offset : 00
[0D3h 0211 001h]        Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212 008h]                     Address : 0000000000000408

[0DCh 0220 00Ch]                  GPE0 Block : [Generic Address Structure]
[0DCh 0220 001h]                    Space ID : 01 [SystemIO]
[0DDh 0221 001h]                   Bit Width : 40
[0DEh 0222 001h]                  Bit Offset : 00
[0DFh 0223 001h]        Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224 008h]                     Address : 0000000000000420

[0E8h 0232 00Ch]                  GPE1 Block : [Generic Address Structure]
[0E8h 0232 001h]                    Space ID : 00 [SystemMemory]
[0E9h 0233 001h]                   Bit Width : 00
[0EAh 0234 001h]                  Bit Offset : 00
[0EBh 0235 001h]        Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236 008h]                     Address : 0000000000000000


[0F4h 0244 00Ch]      Sleep Control Register : [Generic Address Structure]
[0F4h 0244 001h]                    Space ID : 00 [SystemMemory]
[0F5h 0245 001h]                   Bit Width : 00
[0F6h 0246 001h]                  Bit Offset : 00
[0F7h 0247 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248 008h]                     Address : 0000000000000000

[100h 0256 00Ch]       Sleep Status Register : [Generic Address Structure]
[100h 0256 001h]                    Space ID : 00 [SystemMemory]
[101h 0257 001h]                   Bit Width : 00
[102h 0258 001h]                  Bit Offset : 00
[103h 0259 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260 008h]                     Address : 0000000000000000

/**** ACPI table terminates in the middle of a data structure! (dump table) 
CurrentOffset: 10C, TableLength: 10C ***/
Raw Table Data: Length 268 (0x10C)

    0000: 46 41 43 50 0C 01 00 00 05 19 4C 45 4E 4F 56 4F  // FACP......LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 00 40 E3 BA 00 40 FC BA 00 02 09 00  // .....@...@......
    0030: B0 00 00 00 A0 A1 00 00 00 04 00 00 00 00 00 00  // ................
    0040: 04 04 00 00 00 00 00 00 00 08 00 00 08 04 00 00  // ................
    0050: 20 04 00 00 00 00 00 00 04 02 01 04 08 00 00 00  //  ...............
    0060: 64 00 E9 03 00 00 00 00 01 03 0D 00 00 03 00 00  // d...............
    0070: AD 85 00 00 01 08 00 01 B0 00 00 00 00 00 00 00  // ................
    0080: FB 00 00 00 00 00 00 00 00 00 00 00 00 40 FC BA  // .............@..
    0090: 00 00 00 00 01 20 00 03 00 04 00 00 00 00 00 00  // ..... ..........
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 00 08 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 04 00 00 00 00 00 00 01 40 00 01  // . ...........@..
    00E0: 20 04 00 00 00 00 00 00 00 00 00 01 00 00 00 00  //  ...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00              // ............


FACS
----
[000h 0000 004h]                   Signature : "FACS"
[004h 0004 004h]                      Length : 00000040
[008h 0008 004h]          Hardware Signature : 1E02FC85
[00Ch 0012 004h]   32 Firmware Waking Vector : 00000000
[010h 0016 004h]                 Global Lock : 00000000
[014h 0020 004h]       Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024 008h]   64 Firmware Waking Vector : 0000000000000000
[020h 0032 001h]                     Version : 02
[021h 0033 003h]                    Reserved : 000000
[024h 0036 004h]   OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 85 FC 02 1E 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FPDT
----
[000h 0000 004h]                   Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004 004h]                Table Length : 00000044
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : C1
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000


[024h 0036 002h]               Subtable Type : 0000
[026h 0038 001h]                      Length : 10
[027h 0039 001h]                    Revision : 01
[028h 0040 004h]                    Reserved : 00000000
[02Ch 0044 008h]    FPDT Boot Record Address : 00000000B1F80000

[034h 0052 002h]               Subtable Type : 0001
[036h 0054 001h]                      Length : 10
[037h 0055 001h]                    Revision : 01
[038h 0056 004h]                    Reserved : 00000000
[03Ch 0060 008h]         S3PT Record Address : 00000000B1F7F000

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 C1 4C 45 4E 4F 56 4F  // FPDTD.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 00 00 10 01 00 00 00 00 00 00 F8 B1  // ................
    0030: 00 00 00 00 01 00 10 01 00 00 00 00 00 F0 F7 B1  // ................
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000 004h]                   Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 1C
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]           Hardware Block ID : 10228210

[028h 0040 00Ch]        Timer Block Register : [Generic Address Structure]
[028h 0040 001h]                    Space ID : 00 [SystemMemory]
[029h 0041 001h]                   Bit Width : 00
[02Ah 0042 001h]                  Bit Offset : 00
[02Bh 0043 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044 008h]                     Address : 00000000FED00000

[034h 0052 001h]             Sequence Number : 00
[035h 0053 002h]         Minimum Clock Ticks : 0080
[037h 0055 001h]       Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 1C 4C 45 4E 4F 56 4F  // HPET8.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 10 82 22 10 00 00 00 00 00 00 D0 FE  // ......".........
    0030: 00 00 00 00 00 80 00 00                          // ........


IVRS
----
[000h 0000 004h]                   Signature : "IVRS"    [I/O Virtualization Reporting Structure]
[004h 0004 004h]                Table Length : 000001A4
[008h 0008 001h]                    Revision : 02
[009h 0009 001h]                    Checksum : B9
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]         Virtualization Info : 00203043
[028h 0040 008h]                    Reserved : 0000000000000000

[030h 0048 001h]               Subtable Type : 10 [Hardware Definition Block (IVHD)]
[031h 0049 001h]       Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[032h 0050 002h]                      Length : 0048
[034h 0052 002h]                    DeviceId : 0002
[036h 0054 002h]           Capability Offset : 0040
[038h 0056 008h]                Base Address : 00000000E0400000
[040h 0064 002h]           PCI Segment Group : 0000
[042h 0066 002h]         Virtualization Info : 0000
[044h 0068 004h]           Feature Reporting : 80048F6E

[048h 0072 001h]               Subtable Type : 03 [Device Entry: Start of Range]
[049h 0073 002h]                   Device ID : 0003
[04Bh 0075 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[04Ch 0076 001h]               Subtable Type : 04 [Device Entry: End of Range]
[04Dh 0077 002h]                   Device ID : FFFE
[04Fh 0079 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[050h 0080 001h]               Subtable Type : 43 [Device Entry: Alias Start of Range]
[051h 0081 002h]                   Device ID : FF00
[053h 0083 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[054h 0084 001h]                    Reserved : 00
[055h 0085 002h]       Source Used Device ID : 00A5
[057h 0087 001h]                    Reserved : 00

[058h 0088 001h]               Subtable Type : 04 [Device Entry: End of Range]
[059h 0089 002h]                   Device ID : FFFF
[05Bh 0091 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[05Ch 0092 001h]               Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[05Dh 0093 002h]                   Device ID : 0000
[05Fh 0095 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[060h 0096 001h]               Subtable Type : 48 [Device Entry: Special Device]
[061h 0097 002h]                   Device ID : 0000
[063h 0099 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[064h 0100 001h]                      Handle : 00
[065h 0101 002h]       Source Used Device ID : 00A0
[067h 0103 001h]                     Variety : 02

[068h 0104 001h]               Subtable Type : 48 [Device Entry: Special Device]
[069h 0105 002h]                   Device ID : 0000
[06Bh 0107 001h] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[06Ch 0108 001h]                      Handle : 20
[06Dh 0109 002h]       Source Used Device ID : 00A0
[06Fh 0111 001h]                     Variety : 01

[070h 0112 001h]               Subtable Type : 48 [Device Entry: Special Device]
[071h 0113 002h]                   Device ID : 0000
[073h 0115 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[074h 0116 001h]                      Handle : 21
[075h 0117 002h]       Source Used Device ID : 0001
[077h 0119 001h]                     Variety : 01

[078h 0120 001h]               Subtable Type : 11 [Hardware Definition Block (IVHD)]
[079h 0121 001h]       Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[07Ah 0122 002h]                      Length : 0058
[07Ch 0124 002h]                    DeviceId : 0002
[07Eh 0126 002h]           Capability Offset : 0040
[080h 0128 008h]                Base Address : 00000000E0400000
[088h 0136 002h]           PCI Segment Group : 0000
[08Ah 0138 002h]         Virtualization Info : 0000
[08Ch 0140 004h]                  Attributes : 00040200
[090h 0144 008h]                   EFR Image : 246577EFA2254AFA
[098h 0152 008h]                    Reserved : 0000000000000000

[0A0h 0160 001h]               Subtable Type : 03 [Device Entry: Start of Range]
[0A1h 0161 002h]                   Device ID : 0003
[0A3h 0163 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A4h 0164 001h]               Subtable Type : 04 [Device Entry: End of Range]
[0A5h 0165 002h]                   Device ID : FFFE
[0A7h 0167 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A8h 0168 001h]               Subtable Type : 43 [Device Entry: Alias Start of Range]
[0A9h 0169 002h]                   Device ID : FF00
[0ABh 0171 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0ACh 0172 001h]                    Reserved : 00
[0ADh 0173 002h]       Source Used Device ID : 00A5
[0AFh 0175 001h]                    Reserved : 00

[0B0h 0176 001h]               Subtable Type : 04 [Device Entry: End of Range]
[0B1h 0177 002h]                   Device ID : FFFF
[0B3h 0179 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B4h 0180 001h]               Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[0B5h 0181 002h]                   Device ID : 0000
[0B7h 0183 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B8h 0184 001h]               Subtable Type : 48 [Device Entry: Special Device]
[0B9h 0185 002h]                   Device ID : 0000
[0BBh 0187 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0BCh 0188 001h]                      Handle : 00
[0BDh 0189 002h]       Source Used Device ID : 00A0
[0BFh 0191 001h]                     Variety : 02

[0C0h 0192 001h]               Subtable Type : 48 [Device Entry: Special Device]
[0C1h 0193 002h]                   Device ID : 0000
[0C3h 0195 001h] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[0C4h 0196 001h]                      Handle : 20
[0C5h 0197 002h]       Source Used Device ID : 00A0
[0C7h 0199 001h]                     Variety : 01

[0C8h 0200 001h]               Subtable Type : 48 [Device Entry: Special Device]
[0C9h 0201 002h]                   Device ID : 0000
[0CBh 0203 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0CCh 0204 001h]                      Handle : 21
[0CDh 0205 002h]       Source Used Device ID : 0001
[0CFh 0207 001h]                     Variety : 01

[0D0h 0208 001h]               Subtable Type : 40 [Hardware Definition Block - Mixed Format (IVHD)]
[0D1h 0209 001h]       Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[0D2h 0210 002h]                      Length : 00D4
[0D4h 0212 002h]                    DeviceId : 0002
[0D6h 0214 002h]           Capability Offset : 0040
[0D8h 0216 008h]                Base Address : 00000000E0400000
[0E0h 0224 002h]           PCI Segment Group : 0000
[0E2h 0226 002h]         Virtualization Info : 0000
[0E4h 0228 004h]                  Attributes : 00040200
[0E8h 0232 008h]                   EFR Image : 246577EFA2254AFA
[0F0h 0240 008h]                    Reserved : 0000000000000000

[0F8h 0248 001h]               Subtable Type : 03 [Device Entry: Start of Range]
[0F9h 0249 002h]                   Device ID : 0003
[0FBh 0251 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0FCh 0252 001h]               Subtable Type : 04 [Device Entry: End of Range]
[0FDh 0253 002h]                   Device ID : FFFE
[0FFh 0255 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[100h 0256 001h]               Subtable Type : 43 [Device Entry: Alias Start of Range]
[101h 0257 002h]                   Device ID : FF00
[103h 0259 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[104h 0260 001h]                    Reserved : 00
[105h 0261 002h]       Source Used Device ID : 00A5
[107h 0263 001h]                    Reserved : 00

[108h 0264 001h]               Subtable Type : 04 [Device Entry: End of Range]
[109h 0265 002h]                   Device ID : FFFF
[10Bh 0267 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[10Ch 0268 001h]               Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[10Dh 0269 002h]                   Device ID : 0000
[10Fh 0271 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[110h 0272 001h]               Subtable Type : 48 [Device Entry: Special Device]
[111h 0273 002h]                   Device ID : 0000
[113h 0275 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[114h 0276 001h]                      Handle : 00
[115h 0277 002h]       Source Used Device ID : 00A0
[117h 0279 001h]                     Variety : 02

[118h 0280 001h]               Subtable Type : 48 [Device Entry: Special Device]
[119h 0281 002h]                   Device ID : 0000
[11Bh 0283 001h] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[11Ch 0284 001h]                      Handle : 20
[11Dh 0285 002h]       Source Used Device ID : 00A0
[11Fh 0287 001h]                     Variety : 01

[120h 0288 001h]               Subtable Type : 48 [Device Entry: Special Device]
[121h 0289 002h]                   Device ID : 0000
[123h 0291 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[124h 0292 001h]                      Handle : 21
[125h 0293 002h]       Source Used Device ID : 0001
[127h 0295 001h]                     Variety : 01

[128h 0296 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[129h 0297 002h]                   Device ID : 00A5
[12Bh 0299 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[12Ch 0300 008h]                    ACPI HID : "AMDI0020"
[134h 0308 008h]                    ACPI CID : 0000000000000000
[13Ch 0316 001h]                  UID Format : 02
[13Dh 0317 001h]                  UID Length : 09
[13Eh 0318 009h]                         UID : "\_SB.FUR0"

[147h 0327 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[148h 0328 002h]                   Device ID : 00A5
[14Ah 0330 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[14Bh 0331 008h]                    ACPI HID : "AMDI0020"
[153h 0339 008h]                    ACPI CID : 0000000000000000
[15Bh 0347 001h]                  UID Format : 02
[15Ch 0348 001h]                  UID Length : 09
[15Dh 0349 009h]                         UID : "\_SB.FUR1"

[166h 0358 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[167h 0359 002h]                   Device ID : 00A5
[169h 0361 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[16Ah 0362 008h]                    ACPI HID : "AMDI0020"
[172h 0370 008h]                    ACPI CID : 0000000000000000
[17Ah 0378 001h]                  UID Format : 02
[17Bh 0379 001h]                  UID Length : 09
[17Ch 0380 009h]                         UID : "\_SB.FUR2"

[185h 0389 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[186h 0390 002h]                   Device ID : 00A5
[188h 0392 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[189h 0393 008h]                    ACPI HID : "AMDI0020"
[191h 0401 008h]                    ACPI CID : 0000000000000000
[199h 0409 001h]                  UID Format : 02
[19Ah 0410 001h]                  UID Length : 09
[19Bh 0411 009h]                         UID : "\_SB.FUR3"

Raw Table Data: Length 420 (0x1A4)

    0000: 49 56 52 53 A4 01 00 00 02 B9 4C 45 4E 4F 56 4F  // IVRS......LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 43 30 20 00 00 00 00 00 00 00 00 00  // ....C0 .........
    0030: 10 B0 48 00 02 00 40 00 00 00 40 E0 00 00 00 00  // ..H...@...@.....
    0040: 00 00 00 00 6E 8F 04 80 03 03 00 00 04 FE FF 00  // ....n...........
    0050: 43 00 FF 00 00 A5 00 00 04 FF FF 00 00 00 00 00  // C...............
    0060: 48 00 00 00 00 A0 00 02 48 00 00 D7 20 A0 00 01  // H.......H... ...
    0070: 48 00 00 00 21 01 00 01 11 B0 58 00 02 00 40 00  // H...!.....X...@.
    0080: 00 00 40 E0 00 00 00 00 00 00 00 00 00 02 04 00  // ..@.............
    0090: FA 4A 25 A2 EF 77 65 24 00 00 00 00 00 00 00 00  // .J%..we$........
    00A0: 03 03 00 00 04 FE FF 00 43 00 FF 00 00 A5 00 00  // ........C.......
    00B0: 04 FF FF 00 00 00 00 00 48 00 00 00 00 A0 00 02  // ........H.......
    00C0: 48 00 00 D7 20 A0 00 01 48 00 00 00 21 01 00 01  // H... ...H...!...
    00D0: 40 B0 D4 00 02 00 40 00 00 00 40 E0 00 00 00 00  // @.....@...@.....
    00E0: 00 00 00 00 00 02 04 00 FA 4A 25 A2 EF 77 65 24  // .........J%..we$
    00F0: 00 00 00 00 00 00 00 00 03 03 00 00 04 FE FF 00  // ................
    0100: 43 00 FF 00 00 A5 00 00 04 FF FF 00 00 00 00 00  // C...............
    0110: 48 00 00 00 00 A0 00 02 48 00 00 D7 20 A0 00 01  // H.......H... ...
    0120: 48 00 00 00 21 01 00 01 F0 A5 00 40 41 4D 44 49  // H...!......@AMDI
    0130: 30 30 32 30 00 00 00 00 00 00 00 00 02 09 5C 5F  // 0020..........\_
    0140: 53 42 2E 46 55 52 30 F0 A5 00 40 41 4D 44 49 30  // SB.FUR0...@AMDI0
    0150: 30 32 30 00 00 00 00 00 00 00 00 02 09 5C 5F 53  // 020..........\_S
    0160: 42 2E 46 55 52 31 F0 A5 00 40 41 4D 44 49 30 30  // B.FUR1...@AMDI00
    0170: 32 30 00 00 00 00 00 00 00 00 02 09 5C 5F 53 42  // 20..........\_SB
    0180: 2E 46 55 52 32 F0 A5 00 40 41 4D 44 49 30 30 32  // .FUR2...@AMDI002
    0190: 30 00 00 00 00 00 00 00 00 02 09 5C 5F 53 42 2E  // 0..........\_SB.
    01A0: 46 55 52 33                                      // FUR3


MCFG
----
[000h 0000 004h]                   Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004 004h]                Table Length : 0000003C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : CF
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 008h]                    Reserved : 0000000000000000

[02Ch 0044 008h]                Base Address : 00000000F0000000
[034h 0052 002h]        Segment Group Number : 0000
[036h 0054 001h]            Start Bus Number : 00
[037h 0055 001h]              End Bus Number : 7F
[038h 0056 004h]                    Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 CF 4C 45 4E 4F 56 4F  // MCFG<.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 F0  // ................
    0030: 00 00 00 00 00 00 00 7F 00 00 00 00              // ............


MSDM
----
[000h 0000 004h]                   Signature : "MSDM"    [Microsoft Data Management Table]
[004h 0004 004h]                Table Length : 00000055
[008h 0008 001h]                    Revision : 03
[009h 0009 001h]                    Checksum : 22
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 031h] Software Licensing Structure : 4D 53 44 4D 55 00 00 00 03 22 4C 45 4E 4F 56 4F /* MSDMU...."LENOVO */\
/* 034h 0052  16 */                            43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49 /* CB-01   ....ACPI */\
/* 044h 0068  16 */                            00 00 04 00 01 00 00 00 00 00 00 00 01 00 00 00 /* ................ */\
/* 054h 0084   1 */                            00                                              /* . */\

Raw Table Data: Length 85 (0x55)

    0000: 4D 53 44 4D 55 00 00 00 03 22 4C 45 4E 4F 56 4F  // MSDMU...."LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 01 00 00 00 00 00 00 00 01 00 00 00  // ................
    0030: 00 00 00 00 1D 00 00 00 43 38 4A 58 47 2D 54 4E  // ........C8JXG-TN
    0040: 50 32 44 2D 43 56 32 4B 52 2D 47 50 48 48 47 2D  // P2D-CV2KR-GPHHG-
    0050: 47 4D 56 43 4B                                   // GMVCK


SLIC
----
[000h 0000 004h]                   Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004 004h]                Table Length : 00000176
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 9B
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 152h] Software Licensing Structure : 53 4C 49 43 76 01 00 00 01 9B 4C 45 4E 4F 56 4F /* SLICv.....LENOVO */\
/* 034h 0052  16 */                            43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49 /* CB-01   ....ACPI */\
/* 044h 0068  16 */                            00 00 04 00 00 00 00 00 9C 00 00 00 06 02 00 00 /* ................ */\
/* 054h 0084  16 */                            00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 /* .$..RSA1........ */\
/* 064h 0100  16 */                            69 16 4A 9F B1 4B 3A FB 80 20 AA AF C4 F9 3E C1 /* i.J..K:.. ....>. */\
/* 074h 0116  16 */                            80 49 EE 6A 65 26 72 1E CD BF 5F 2F 96 D6 C0 0A /* .I.je&r..._/.... */\
/* 084h 0132  16 */                            92 F5 06 B5 00 B2 3B 29 02 E2 4C 8D C2 F2 BC 41 /* ......;)..L....A */\
/* 094h 0148  16 */                            77 9C 70 F0 F3 1B 09 D2 63 5A DC A8 83 F8 5E C9 /* w.p.....cZ....^. */\
/* 0A4h 0164  16 */                            15 95 F9 FA FD DC 05 B7 4D 67 7F 2D B3 84 33 20 /* ........Mg.-..3  */\
/* 0B4h 0180  16 */                            E1 D1 79 2A A7 6A 77 D1 B6 20 2A 76 42 C5 D5 E9 /* ..y*.jw.. *vB... */\
/* 0C4h 0196  16 */                            B6 43 40 55 44 C3 C9 37 99 5F 41 97 70 F3 D1 F6 /* .C@UD..7._A.p... */\
/* 0D4h 0212  16 */                            07 EC 7B 1A 29 A1 C1 F1 91 FD 48 86 6E 3E CE CB /* ..{.).....H.n>.. */\
/* 0E4h 0228  16 */                            01 00 00 00 B6 00 00 00 00 20 00 00 49 4E 53 59 /* ......... ..INSY */\
/* 0F4h 0244  16 */                            44 45 49 4E 53 59 44 45 30 30 57 49 4E 44 4F 57 /* DEINSYDE00WINDOW */\
/* 104h 0260  16 */                            53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00 /* S .............. */\
/* 114h 0276  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 124h 0292  16 */                            00 00 00 00 00 00 D9 54 93 7A 68 04 4A 44 81 CE /* .......T.zh.JD.. */\
/* 134h 0308  16 */                            0B F6 17 D8 90 DF 00 00 01 00 00 00 00 00 5F 46 /* .............._F */\
/* 144h 0324  16 */                            56 48 FF 8E FF FF 48 00 B1 4C 00 00 00 01 01 00 /* VH....H..L...... */\
/* 154h 0340  16 */                            00 00 00 00 01 00 00 00 00 00 00 00 00 00 54 F0 /* ..............T. */\
/* 164h 0356  16 */                            0C 6F 6A AE 8C 41 A7 CE 3C 7A 7C D7 4E C0 4E D4 /* .oj..A..<z|.N.N. */\
/* 174h 0372   2 */                            02 40                                           /* .@ */\

Raw Table Data: Length 374 (0x176)

    0000: 53 4C 49 43 76 01 00 00 01 9B 4C 45 4E 4F 56 4F  // SLICv.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 00 00 00 00 9C 00 00 00 06 02 00 00  // ................
    0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  // .$..RSA1........
    0040: 69 16 4A 9F B1 4B 3A FB 80 20 AA AF C4 F9 3E C1  // i.J..K:.. ....>.
    0050: 80 49 EE 6A 65 26 72 1E CD BF 5F 2F 96 D6 C0 0A  // .I.je&r..._/....
    0060: 92 F5 06 B5 00 B2 3B 29 02 E2 4C 8D C2 F2 BC 41  // ......;)..L....A
    0070: 77 9C 70 F0 F3 1B 09 D2 63 5A DC A8 83 F8 5E C9  // w.p.....cZ....^.
    0080: 15 95 F9 FA FD DC 05 B7 4D 67 7F 2D B3 84 33 20  // ........Mg.-..3 
    0090: E1 D1 79 2A A7 6A 77 D1 B6 20 2A 76 42 C5 D5 E9  // ..y*.jw.. *vB...
    00A0: B6 43 40 55 44 C3 C9 37 99 5F 41 97 70 F3 D1 F6  // .C@UD..7._A.p...
    00B0: 07 EC 7B 1A 29 A1 C1 F1 91 FD 48 86 6E 3E CE CB  // ..{.).....H.n>..
    00C0: 01 00 00 00 B6 00 00 00 00 20 00 00 49 4E 53 59  // ......... ..INSY
    00D0: 44 45 49 4E 53 59 44 45 30 30 57 49 4E 44 4F 57  // DEINSYDE00WINDOW
    00E0: 53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00  // S ..............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 D9 54 93 7A 68 04 4A 44 81 CE  // .......T.zh.JD..
    0110: 0B F6 17 D8 90 DF 00 00 01 00 00 00 00 00 5F 46  // .............._F
    0120: 56 48 FF 8E FF FF 48 00 B1 4C 00 00 00 01 01 00  // VH....H..L......
    0130: 00 00 00 00 01 00 00 00 00 00 00 00 00 00 54 F0  // ..............T.
    0140: 0C 6F 6A AE 8C 41 A7 CE 3C 7A 7C D7 4E C0 4E D4  // .oj..A..<z|.N.N.
    0150: 02 40 13 2D 00 F8 FB 2C 00 01 88 7D 00 00 01 EA  // .@.-...,...}....
    0160: 2C 00 00 88 7D 00 00 1C 28 87 6E FB B4 69 39 3F  // ,...}...(.n..i9?
    0170: DE FF CC CC 64 90                                // ....d.


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.GZFD.HTPL, MethodObj)    // 0 Arguments
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.GP17, DeviceObj)
    External (_SB_.PCI0.GPP0, DeviceObj)
    External (_SB_.PCI0.GPP0.HDAU._ADR, UnknownObj)
    External (_SB_.PCI0.GPP0.PEGP, DeviceObj)
    External (_SB_.PCI0.GPP0.PEGP.PCBA, FieldUnitObj)
    External (_SB_.PCI0.GPP0.VGA_._ADR, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.ACTY, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPC0.EC0_.BCAI, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.CTE0, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.CTMD, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.ECAV, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.F5D1, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.GATP, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.GATY, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.GPAB, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.GPTH, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.LFCM, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.PDAB, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.REJF, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.LPC0.EC0_.SGCB, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.SPMO, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.TGPP, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.WEJF, MethodObj)    // 2 Arguments
    External (_SB_.PLTF.C000, DeviceObj)
    External (_SB_.PLTF.C001, DeviceObj)
    External (_SB_.PLTF.C002, DeviceObj)
    External (_SB_.PLTF.C003, DeviceObj)
    External (_SB_.PLTF.C004, DeviceObj)
    External (_SB_.PLTF.C005, DeviceObj)
    External (_SB_.PLTF.C006, DeviceObj)
    External (_SB_.PLTF.C007, DeviceObj)
    External (_SB_.PLTF.C008, DeviceObj)
    External (_SB_.PLTF.C009, DeviceObj)
    External (_SB_.PLTF.C00A, DeviceObj)
    External (_SB_.PLTF.C00B, DeviceObj)
    External (_SB_.PLTF.C00C, DeviceObj)
    External (_SB_.PLTF.C00D, DeviceObj)
    External (_SB_.PLTF.C00E, DeviceObj)
    External (_SB_.PLTF.C00F, DeviceObj)
    External (BCTP, UnknownObj)
    External (CPTY, IntObj)
    External (EATL, UnknownObj)
    External (EPSW, UnknownObj)
    External (GTYP, IntObj)
    External (INSM, UnknownObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M009, MethodObj)    // 1 Arguments
    External (M010, MethodObj)    // 2 Arguments
    External (M017, MethodObj)    // 6 Arguments
    External (M402, MethodObj)    // 3 Arguments
    External (M403, MethodObj)    // 4 Arguments
    External (MCSK, IntObj)
    External (NVHC, UnknownObj)
    External (PRFT, IntObj)
    External (S4FG, UnknownObj)
    External (SUMD, IntObj)
    External (TCNT, FieldUnitObj)

    Scope (\_SB.PCI0.GPP0)
    {
        Device (PEGP)
        {
            Name (_ADR, Zero)  // _ADR: Address
        }

        Device (NHDA)
        {
            Name (_ADR, One)  // _ADR: Address
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PCI0)
    {
        OperationRegion (HGOP, SystemMemory, 0xB2F7DF18, 0x00000011)
        Field (HGOP, AnyAcc, Lock, Preserve)
        {
            DGDA,   32, 
            DGBA,   32, 
            DGPV,   16, 
            OPTF,   8, 
            NVGE,   8, 
            DSSV,   32, 
            DISM,   8
        }
    }

    Scope (\_SB.PCI0.GPP0.PEGP)
    {
        OperationRegion (VBOR, SystemMemory, 0xBADF0018, 0x00040004)
        Field (VBOR, DWordAcc, Lock, Preserve)
        {
            RVBS,   32, 
            VBS1,   262144, 
            VBS2,   262144, 
            VBS3,   262144, 
            VBS4,   262144, 
            VBS5,   262144, 
            VBS6,   262144, 
            VBS7,   262144, 
            VBS8,   262144
        }
    }

    Scope (\_SB.PCI0.GPP0.PEGP)
    {
        OperationRegion (NOPR, SystemMemory, 0xBADED018, 0x00002028)
        Field (NOPR, AnyAcc, Lock, Preserve)
        {
            DHPS,   8, 
            DPCS,   8, 
            GPSS,   8, 
            VENS,   8, 
            NBCS,   8, 
            GC6S,   8, 
            NVSR,   8, 
            NPCS,   8, 
            NCTP,   8, 
            SLVS,   8, 
            PBCM,   8, 
            EXMD,   8, 
            MXBS,   32, 
            MXMB,   32768, 
            SMXS,   32, 
            SMXB,   32768, 
            FBEN,   32, 
            ENVT,   32, 
            PWGD,   32, 
            DMMP,   32, 
            DLRP,   32
        }
    }

    Scope (\_SB.PCI0.GPP0.PEGP)
    {
        Name (GSV1, Buffer (One)
        {
             0x00                                             // .
        })
        Name (GSV2, Buffer (One)
        {
             0x00                                             // .
        })
        Name (GSDR, Buffer (0xA1)
        {
            /* 0000 */  0x57, 0x74, 0xDC, 0x86, 0x75, 0x84, 0xEC, 0xE7,  // Wt..u...
            /* 0008 */  0x52, 0x44, 0xA1, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
            /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
            /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
            /* 0038 */  0x51, 0x00, 0x00, 0x00, 0x04, 0x00, 0x4F, 0x00,  // Q.....O.
            /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x4D, 0x00, 0x00, 0x00,  // ....M...
            /* 0048 */  0x06, 0x00, 0x4B, 0x00, 0x00, 0x00, 0x07, 0x00,  // ..K.....
            /* 0050 */  0x49, 0x00, 0x00, 0x00, 0x08, 0x00, 0x47, 0x00,  // I.....G.
            /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
            /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
            /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x60, 0x68, 0x9E,  // .....`h.
            /* 0088 */  0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 5.......
            /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A0 */  0x00                                             // .
        })
        Method (NBCI, 4, Serialized)
        {
            Debug = "------- NV NBCI DSM --------"
            If ((Arg1 != 0x0102))
            {
                Debug = " NBCI DSM: NOT SUPPORTED!"
                Return (0x80000002)
            }

            If ((Arg2 == Zero))
            {
                Debug = "   NBCI fun0 NBCI_FUNC_SUPPORT"
                Return (Buffer (0x04)
                {
                     0x01, 0x00, 0x01, 0x00                           // ....
                })
            }

            If ((Arg2 == One))
            {
                Debug = "   NBCI fun1 NBCI_FUNC_PLATCAPS"
                Name (TEMP, Buffer (0x04)
                {
                     0x00, 0x00, 0x00, 0x00                           // ....
                })
                CreateDWordField (TEMP, Zero, STS0)
                STS0 |= Zero
                Return (TEMP) /* \_SB_.PCI0.GPP0.PEGP.NBCI.TEMP */
            }

            If ((Arg2 == 0x10))
            {
                Debug = "   NBCI fun16 NBCI_FUNC_GETOBJBYTYPE"
                CreateWordField (Arg3, 0x02, BFF0)
                If ((BFF0 == 0x564B)){}
                If ((BFF0 == 0x4452))
                {
                    Return (GSDR) /* \_SB_.PCI0.GPP0.PEGP.GSDR */
                }
            }

            If ((Arg2 == 0x14))
            {
                Debug = "   NBCI fun20 NBCI_FUNC_GETBACKLIGHT"
                Return (Package (0x20)
                {
                    0x8001A450, 
                    0x0200, 
                    Zero, 
                    Zero, 
                    0x05, 
                    One, 
                    0xC8, 
                    0x32, 
                    0x03E8, 
                    0x0B, 
                    0x32, 
                    0x64, 
                    0x96, 
                    0xC8, 
                    0x012C, 
                    0x0190, 
                    0x01FE, 
                    0x0276, 
                    0x02F8, 
                    0x0366, 
                    0x03E8, 
                    Zero, 
                    0x64, 
                    0xC8, 
                    0x012C, 
                    0x0190, 
                    0x01F4, 
                    0x0258, 
                    0x02BC, 
                    0x0320, 
                    0x0384, 
                    0x03E8
                })
            }
        }
    }

    Scope (\)
    {
        Name (REST, 0x28)
        Name (PWEN, 0x07)
        Name (PWEA, Zero)
        Name (PWOK, 0x0C)
        Name (GRDN, One)
        Name (GRFN, One)
    }

    Scope (\_SB.PCI0.GPP0)
    {
        Method (SGPC, 1, NotSerialized)
        {
            If ((Arg0 == One))
            {
                M000 (0x9D)
                Sleep (0x05)
                If ((M009 (PWEN) == (PWEA & One)))
                {
                    Return (Zero)
                }

                M010 (REST, Zero)
                Sleep (One)
                M010 (PWEN, (PWEA & One))
                Local0 = Zero
                While ((M009 (PWOK) == Zero))
                {
                    If ((Local0 > 0x64))
                    {
                        Break
                    }

                    Sleep (One)
                    Local0++
                }

                Sleep (0x04)
                M010 (REST, One)
                Sleep (0x32)
                M403 (Zero, One, One, One)
                Local1 = Zero
                While (((Local1 & 0x28) != 0x20))
                {
                    Local1 = M017 (Zero, One, One, 0x6B, Zero, 0x08)
                    Stall (0x63)
                }

                M403 (Zero, One, One, Zero)
                Sleep (0x14)
                \_SB.PCI0.GPP0.CMDR |= 0x04
                \_SB.PCI0.GPP0.D0ST = Zero
                While ((\_SB.PCI0.DGPV != 0x10DE))
                {
                    Sleep (One)
                }

                While ((\_SB.PCI0.GPP0.LREN != One))
                {
                    \_SB.PCI0.GPP0.LREN = One
                }

                \_SB.PCI0.GPP0.CEDR = One
                M000 (0xA0)
            }
            Else
            {
                M000 (0xA1)
                M010 (PWEN, (PWEA & One))
                \_SB.PCI0.GPP0.PEGP.LTRE = \_SB.PCI0.GPP0.LREN
                M402 (Zero, One, One)
                \_SB.PCI0.GPP0.D0ST = 0x03
                M010 (REST, Zero)
                Sleep (One)
                M010 (PWEN, (!PWEA & One))
                Sleep (0x64)
                M000 (0xA3)
            }
        }

        PowerResource (PG00, 0x00, 0x0000)
        {
            Name (M239, One)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((RVID == Ones))
                {
                    Return (Zero)
                }

                Return (GSTA ())
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                If ((\_SB.PCI0.LPC0.EC0.REJF (0x03) == Zero))
                {
                    If ((\_SB.PCI0.GPP0.GSTA () != Zero))
                    {
                        Return (Zero)
                    }
                }

                If ((\_SB.PCI0.TDGC == One))
                {
                    If ((\_SB.PCI0.DGCX == 0x03))
                    {
                        \_SB.PCI0.GC6O ()
                    }
                    ElseIf ((\_SB.PCI0.DGCX == 0x04))
                    {
                        \_SB.PCI0.GC6O ()
                    }

                    \_SB.PCI0.TDGC = Zero
                    \_SB.PCI0.DGCX = Zero
                }
                Else
                {
                    SGPC (One)
                    \_SB.PCI0.GPP0.CMDR = 0x06
                    \_SB.PCI0.GPP0.D0ST = Zero
                    \_SB.PCI0.GPP0.PEGP.SSSV = \_SB.PCI0.DSSV
                }

                If (\_SB.PCI0.LPC0.EC0.ECAV)
                {
                    If ((Acquire (\_SB.PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                    {
                        \_SB.PCI0.LPC0.EC0.GATY = 0x02
                        Sleep (0x0A)
                        Release (\_SB.PCI0.LPC0.EC0.LFCM)
                    }
                }

                M239 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                If ((S4FG == One))
                {
                    S4FG = Zero
                    Return (Zero)
                }

                If ((\_SB.PCI0.GPP0.GSTA () != One))
                {
                    Return (Zero)
                }

                If (\_SB.PCI0.LPC0.EC0.ECAV)
                {
                    If ((Acquire (\_SB.PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                    {
                        \_SB.PCI0.LPC0.EC0.GATY = Zero
                        Sleep (0x0A)
                        Release (\_SB.PCI0.LPC0.EC0.LFCM)
                    }
                }

                If ((\_SB.PCI0.TDGC == One))
                {
                    CreateField (\_SB.PCI0.TGPC, Zero, 0x03, GUPC)
                    If ((ToInteger (GUPC) == One))
                    {
                        \_SB.PCI0.GC6I ()
                    }
                    ElseIf ((ToInteger (GUPC) == 0x02))
                    {
                        \_SB.PCI0.GC6I ()
                    }
                }
                Else
                {
                    SGPC (Zero)
                }

                \_SB.GZFD.HTPL ()
                M239 = Zero
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PG00
        })
        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
        {
            PG00
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PG00
        })
        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
        OperationRegion (RPCX, SystemMemory, \_SB.PCI0.DGBA, 0x1000)
        Field (RPCX, DWordAcc, NoLock, Preserve)
        {
            RVID,   32, 
            CMDR,   8, 
            Offset (0x19), 
            PRBN,   8, 
            Offset (0x54), 
            D0ST,   2, 
            Offset (0x62), 
            CEDR,   1, 
            Offset (0x68), 
            ASPM,   2, 
                ,   2, 
            LNKD,   1, 
            Offset (0x80), 
            Offset (0x81), 
                ,   2, 
            LREN,   1
        }

        Method (GSTA, 0, NotSerialized)
        {
            If ((M009 (PWOK) == Zero))
            {
                Return (Zero)
            }
            Else
            {
                Return (One)
            }
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            Name (M432, Zero)
            Name (M433, Zero)
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Name (M435, Buffer (0x02)
                        {
                             0x00, 0x00                                       // ..
                        })
                        CreateBitField (M435, Zero, M436)
                        CreateBitField (M435, 0x0A, M437)
                        CreateBitField (M435, 0x0B, M438)
                        If ((Arg1 >= 0x04))
                        {
                            M436 = One
                            M437 = One
                            M438 = One
                        }
                        Else
                        {
                            M436 = One
                        }

                        Return (M435) /* \_SB_.PCI0.GPP0._DSM.M435 */
                    }
                    Case (0x0A)
                    {
                        Return (One)
                    }
                    Case (0x0B)
                    {
                        Local0 = ToInteger (Arg3)
                        If ((Local0 <= 0x2710))
                        {
                            Return (Local0)
                        }
                        Else
                        {
                            Local0 = 0x2710
                            Return (Local0)
                        }
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Method (_DSD, 0, Serialized)  // _DSD: Device-Specific Data
        {
            Return (Package (0x06)
            {
                ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "HotPlugSupportInD3", 
                        One
                    }
                }, 

                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                        One
                    }
                }, 

                ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                Package (0x00){}
            })
        }
    }

    Scope (\_SB.PCI0.GPP0.PEGP)
    {
        Name (LTRE, Zero)
        Name (DGPS, Zero)
        Name (_PSC, Zero)  // _PSC: Power State Current
        Name (GPRF, Zero)
        Name (OPCE, 0x02)
        Method (_EJ0, 1, NotSerialized)  // _EJx: Eject Device, x=0-9
        {
            SGPC (Zero)
            \_SB.PCI0.LPC0.EC0.WEJF (0x03, One)
            If (\_SB.PCI0.LPC0.EC0.ECAV)
            {
                If ((Acquire (\_SB.PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                {
                    \_SB.PCI0.LPC0.EC0.GATY = Zero
                    Sleep (0x0A)
                    Release (\_SB.PCI0.LPC0.EC0.LFCM)
                }
            }
        }

        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
        }

        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
        {
            Return (Zero)
        }

        OperationRegion (PCIM, SystemMemory, \_SB.PCI0.DGDA, 0x1000)
        Field (PCIM, DWordAcc, NoLock, Preserve)
        {
            NVID,   16, 
            NDID,   16, 
            CMDR,   8, 
            VGAR,   2008, 
            Offset (0x48B), 
                ,   1, 
            HDAE,   1
        }

        OperationRegion (DGPU, SystemMemory, \_SB.PCI0.DGDA, 0x0100)
        Field (DGPU, DWordAcc, NoLock, Preserve)
        {
            Offset (0x10), 
            PCBA,   32, 
            Offset (0x40), 
            SSSV,   32
        }

        OperationRegion (PCIS, PCI_Config, Zero, 0x0100)
        Field (PCIS, AnyAcc, NoLock, Preserve)
        {
            PVID,   16, 
            PDID,   16
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            _PSC = Zero
            If ((DGPS != Zero))
            {
                \_SB.PCI0.GPP0.PG00._ON ()
                DGPS = Zero
            }
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            If ((OPCE == 0x03))
            {
                If ((DGPS == Zero))
                {
                    \_SB.PCI0.GPP0.PG00._OFF ()
                    DGPS = One
                }

                OPCE = 0x02
            }

            _PSC = 0x03
        }

        Method (SGST, 0, Serialized)
        {
            If ((PVID != 0x0FFF))
            {
                Return (0x0F)
            }

            Return (Zero)
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("a486d8f8-0bda-471b-a72b-6042a6b5bee0") /* Unknown UUID */))
            {
                Return (\_SB.PCI0.GPP0.PEGP.NVOP (Arg0, Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("a3132d01-8cda-49ba-a52e-bc9d46df6b81") /* Unknown UUID */))
            {
                If ((\_SB.PCI0.GPP0.PEGP.GPSS != Zero))
                {
                    Return (\_SB.PCI0.GPP0.PEGP.GPS (Arg0, Arg1, Arg2, Arg3))
                }
            }

            If ((Arg0 == ToUUID ("cbeca351-067b-4924-9cbd-b46b00b86f34") /* Unknown UUID */))
            {
                If ((\_SB.PCI0.GPP0.PEGP.GC6S != Zero))
                {
                    Return (\_SB.PCI0.GPP0.PEGP.NVJT (Arg0, Arg1, Arg2, Arg3))
                }
            }

            If ((Arg0 == ToUUID ("d4a50b75-65c7-46f7-bfb7-41514cea0244") /* Unknown UUID */))
            {
                If ((\_SB.PCI0.GPP0.PEGP.NBCS != Zero))
                {
                    Return (\_SB.PCI0.GPP0.PEGP.NBCI (Arg0, Arg1, Arg2, Arg3))
                }
            }

            Return (0x80000001)
        }
    }

    Scope (\_SB.PCI0.GPP0.PEGP)
    {
        Method (NVOP, 4, Serialized)
        {
            If ((Arg2 == Zero))
            {
                Return (Buffer (0x04)
                {
                     0x01, 0x00, 0x00, 0x04                           // ....
                })
            }
            ElseIf ((Arg2 == 0x1A))
            {
                CreateField (Arg3, 0x18, 0x02, OMPR)
                CreateField (Arg3, Zero, One, FLCH)
                CreateField (Arg3, One, One, DVSR)
                CreateField (Arg3, 0x02, One, DVSC)
                If (ToInteger (FLCH))
                {
                    \_SB.PCI0.GPP0.PEGP.OPCE = OMPR /* \_SB_.PCI0.GPP0.PEGP.NVOP.OMPR */
                }

                Local0 = Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    }
                CreateField (Local0, Zero, One, OPEN)
                CreateField (Local0, 0x03, 0x02, CGCS)
                CreateField (Local0, 0x06, One, SHPC)
                CreateField (Local0, 0x08, One, SNSR)
                CreateField (Local0, 0x18, 0x03, DGPC)
                CreateField (Local0, 0x1B, 0x02, OHAC)
                OPEN = One
                SHPC = One
                DGPC = One
                OHAC = 0x03
                If (ToInteger (DVSC))
                {
                    If (ToInteger (DVSR))
                    {
                        \_SB.PCI0.GPP0.PEGP.GPRF = One
                    }
                    Else
                    {
                        \_SB.PCI0.GPP0.PEGP.GPRF = Zero
                    }
                }

                SNSR = \_SB.PCI0.GPP0.PEGP.GPRF
                If ((\_SB.PCI0.GPP0.PEGP.SGST () != Zero))
                {
                    CGCS = 0x03
                }

                Return (Local0)
            }

            Return (0x80000002)
        }
    }

    Scope (\_SB.PCI0.GPP0.PEGP)
    {
        Name (NLIM, One)
        Name (PSLS, Zero)
        Name (GPSP, Buffer (0x28){})
        CreateDWordField (GPSP, Zero, RETN)
        CreateDWordField (GPSP, 0x04, VRV1)
        CreateDWordField (GPSP, 0x08, TGPU)
        CreateDWordField (GPSP, 0x0C, PDTS)
        CreateDWordField (GPSP, 0x10, SFAN)
        CreateDWordField (GPSP, 0x14, SKNT)
        CreateDWordField (GPSP, 0x18, CPUE)
        CreateDWordField (GPSP, 0x1C, TMP1)
        CreateDWordField (GPSP, 0x20, TMP2)
        Method (GPS, 4, Serialized)
        {
            Debug = "------- NV GPS DSM --------"
            If ((Arg1 != 0x0200))
            {
                Return (0x80000002)
            }

            Switch (ToInteger (Arg2))
            {
                Case (Zero)
                {
                    Debug = "   GPS fun 0"
                    Return (Buffer (0x08)
                    {
                         0x01, 0x00, 0x08, 0x00, 0x01, 0x04, 0x00, 0x00   // ........
                    })
                }
                Case (0x13)
                {
                    Debug = "   GPS fun 19"
                    CreateDWordField (Arg3, Zero, TEMP)
                    If (((\_SB.PCI0.GPP0.PEGP.PCBA != Ones) && (\_SB.PCI0.GPP0.PEGP.PCBA != Zero)))
                    {
                        OperationRegion (AMSS, SystemMemory, (\_SB.PCI0.GPP0.PEGP.PCBA + 0x00022408), 0x10)
                        Field (AMSS, DWordAcc, NoLock, Preserve)
                        {
                                ,   30, 
                            HEVC,   2
                        }

                        If ((NVHC == One))
                        {
                            If ((HEVC != 0x03))
                            {
                                HEVC = 0x03
                            }
                        }
                    }

                    If ((TEMP == Zero))
                    {
                        Return (0x04)
                    }

                    If ((TEMP && 0x04))
                    {
                        Return (0x04)
                    }
                }
                Case (0x20)
                {
                    Debug = "   GPS fun 32"
                    Name (RET1, Zero)
                    CreateBitField (Arg3, 0x02, SPBI)
                    If (NLIM)
                    {
                        RET1 |= One
                    }

                    If (PSLS)
                    {
                        RET1 |= 0x02
                    }

                    Return (RET1) /* \_SB_.PCI0.GPP0.PEGP.GPS_.RET1 */
                }
                Case (0x2A)
                {
                    Debug = "   GPS fun 42"
                    CreateField (Arg3, Zero, 0x04, PSH0)
                    CreateBitField (Arg3, 0x08, GPUT)
                    VRV1 = 0x00010000
                    Switch (ToInteger (PSH0))
                    {
                        Case (Zero)
                        {
                            Return (GPSP) /* \_SB_.PCI0.GPP0.PEGP.GPSP */
                        }
                        Case (One)
                        {
                            RETN = 0x0100
                            RETN |= ToInteger (PSH0)
                            Return (GPSP) /* \_SB_.PCI0.GPP0.PEGP.GPSP */
                        }
                        Case (0x02)
                        {
                            RETN = 0x0102
                            If ((\_SB.PCI0.LPC0.EC0.CTMD == One))
                            {
                                If ((\_SB.PCI0.LPC0.EC0.CTE0 == One))
                                {
                                    TGPU = 0x57
                                }
                                Else
                                {
                                    TGPU = \_SB.PCI0.LPC0.EC0.GPTH /* External reference */
                                }
                            }
                            ElseIf ((EATL == One))
                            {
                                TGPU = 0x4B
                            }
                            Else
                            {
                                TGPU = 0x57
                            }

                            Return (GPSP) /* \_SB_.PCI0.GPP0.PEGP.GPSP */
                        }

                    }
                }
                Default
                {
                    Return (0x80000002)
                }

            }

            Return (0x80000002)
        }
    }

    Scope (\_SB.PCI0)
    {
        Method (RTL2, 0, NotSerialized)
        {
            Debug = "GC6I-Enter-L2"
            M402 (Zero, One, One)
        }

        Method (RTL0, 0, NotSerialized)
        {
            Debug = "GC6O-Resume-L0"
            M403 (Zero, One, One, One)
            Local1 = Zero
            While (((Local1 & 0x28) != 0x20))
            {
                Local1 = M017 (Zero, One, One, 0x6B, Zero, 0x08)
                Stall (0x63)
            }

            M403 (Zero, One, One, Zero)
        }

        Name (TGPC, Buffer (0x04)
        {
             0x00                                             // .
        })
        Name (TDGC, Zero)
        Name (DGCX, Zero)
        Name (L23B, Buffer (0x05){})
        Method (GC6I, 0, Serialized)
        {
            Debug = "   JT GC6I"
            \_SB.PCI0.GPP0.PEGP.LTRE = \_SB.PCI0.GPP0.LREN
            Sleep (0x14)
            ^RTL2 ()
            Sleep (0x14)
            M010 (REST, Zero)
            Sleep (0x14)
        }

        Method (GC6O, 0, Serialized)
        {
            Sleep (0x14)
            M010 (REST, One)
            ^RTL0 ()
            Sleep (0x14)
            \_SB.PCI0.GPP0.CMDR |= 0x04
            \_SB.PCI0.GPP0.D0ST = Zero
            While ((\_SB.PCI0.DGPV != 0x10DE))
            {
                Sleep (One)
            }

            While ((\_SB.PCI0.GPP0.LREN != One))
            {
                \_SB.PCI0.GPP0.LREN = One
            }

            \_SB.PCI0.GPP0.CEDR = One
        }
    }

    Scope (\_SB.PCI0.GPP0.PEGP)
    {
        Method (NVJT, 4, Serialized)
        {
            Debug = "------- NV JT DSM --------"
            If ((ToInteger (Arg1) < 0x0100))
            {
                Return (0x80000001)
            }

            Switch (ToInteger (Arg2))
            {
                Case (Zero)
                {
                    Debug = "   JT fun0 JT_FUNC_SUPPORT"
                    Return (Buffer (0x04)
                    {
                         0x1B, 0x00, 0x00, 0x00                           // ....
                    })
                }
                Case (One)
                {
                    Debug = "   JT fun1 JT_FUNC_CAPS"
                    Name (JTCA, Buffer (0x04)
                    {
                         0x00                                             // .
                    })
                    CreateField (JTCA, Zero, One, JTEN)
                    CreateField (JTCA, One, 0x02, SREN)
                    CreateField (JTCA, 0x03, 0x02, PLPR)
                    CreateField (JTCA, 0x05, One, SRPR)
                    CreateField (JTCA, 0x06, 0x02, FBPR)
                    CreateField (JTCA, 0x08, 0x02, GUPR)
                    CreateField (JTCA, 0x0A, One, GC6R)
                    CreateField (JTCA, 0x0B, One, PTRH)
                    CreateField (JTCA, 0x0D, One, MHYB)
                    CreateField (JTCA, 0x0E, One, RPCL)
                    CreateField (JTCA, 0x0F, 0x02, GC6V)
                    CreateField (JTCA, 0x11, One, GEIS)
                    CreateField (JTCA, 0x12, One, GSWS)
                    CreateField (JTCA, 0x14, 0x0C, JTRV)
                    JTEN = One
                    GC6R = Zero
                    RPCL = One
                    SREN = One
                    FBPR = Zero
                    MHYB = One
                    GC6V = 0x02
                    JTRV = 0x0200
                    Return (JTCA) /* \_SB_.PCI0.GPP0.PEGP.NVJT.JTCA */
                }
                Case (0x02)
                {
                    Debug = "   JT fun2 JT_FUNC_POLICYSELECT"
                    Return (0x80000002)
                }
                Case (0x03)
                {
                    Debug = "   JT fun3 JT_FUNC_POWERCONTROL"
                    CreateField (Arg3, Zero, 0x03, GPPC)
                    CreateField (Arg3, 0x04, One, PLPC)
                    CreateField (Arg3, 0x07, One, ECOC)
                    CreateField (Arg3, 0x0E, 0x02, DFGC)
                    CreateField (Arg3, 0x10, 0x03, GPCX)
                    \_SB.PCI0.TGPC = Arg3
                    If (((ToInteger (GPPC) != Zero) || (ToInteger (DFGC
                        ) != Zero)))
                    {
                        \_SB.PCI0.TDGC = ToInteger (DFGC)
                        \_SB.PCI0.DGCX = ToInteger (GPCX)
                    }

                    Name (JTPC, Buffer (0x04)
                    {
                         0x00                                             // .
                    })
                    CreateField (JTPC, Zero, 0x03, GUPS)
                    CreateField (JTPC, 0x03, One, GPWO)
                    CreateField (JTPC, 0x07, One, PLST)
                    If ((ToInteger (DFGC) != Zero))
                    {
                        GPWO = One
                        GUPS = One
                        Return (JTPC) /* \_SB_.PCI0.GPP0.PEGP.NVJT.JTPC */
                    }

                    Debug = "   JT fun3 GPPC="
                    Debug = ToInteger (GPPC)
                    If ((ToInteger (GPPC) == One))
                    {
                        \_SB.PCI0.GC6I ()
                        PLST = One
                        GUPS = Zero
                    }
                    ElseIf ((ToInteger (GPPC) == 0x02))
                    {
                        \_SB.PCI0.GC6I ()
                        If ((ToInteger (PLPC) == Zero))
                        {
                            PLST = Zero
                        }

                        GUPS = Zero
                    }
                    ElseIf ((ToInteger (GPPC) == 0x03))
                    {
                        \_SB.PCI0.GC6O ()
                        If ((ToInteger (PLPC) != Zero))
                        {
                            PLST = Zero
                        }

                        GPWO = One
                        GUPS = One
                    }
                    ElseIf ((ToInteger (GPPC) == 0x04))
                    {
                        \_SB.PCI0.GC6O ()
                        If ((ToInteger (PLPC) != Zero))
                        {
                            PLST = Zero
                        }

                        GPWO = One
                        GUPS = One
                    }
                    ElseIf ((M009 (PWGD) == One))
                    {
                        Debug = "   JT GETS() return 0x1"
                        GPWO = One
                        GUPS = One
                    }
                    Else
                    {
                        Debug = "   JT GETS() return 0x3"
                        GPWO = Zero
                        GUPS = 0x03
                    }

                    Return (JTPC) /* \_SB_.PCI0.GPP0.PEGP.NVJT.JTPC */
                }
                Case (0x04)
                {
                    Debug = "   JT fun4 JT_FUNC_PLATPOLICY"
                    CreateField (Arg3, 0x02, One, PAUD)
                    CreateField (Arg3, 0x03, One, PADM)
                    CreateField (Arg3, 0x04, 0x04, PDGS)
                    Local0 = Zero
                    Local0 = (\_SB.PCI0.GPP0.PEGP.HDAE << 0x02)
                    Return (Local0)
                }
                Case (0x05)
                {
                    Local0 = Zero
                    Local0 |= 0x00100010
                    Return (Local0)
                }
                Case (0x06)
                {
                    Name (TMP6, Package (0x0F)
                    {
                        Ones, 
                        0x2C, 
                        Ones, 
                        0x2C, 
                        Ones, 
                        0x2C, 
                        Ones, 
                        Ones, 
                        0x2C, 
                        Ones, 
                        Ones, 
                        0x2C, 
                        Ones, 
                        Ones, 
                        0x2C
                    })
                    Return (TMP6) /* \_SB_.PCI0.GPP0.PEGP.NVJT.TMP6 */
                }

            }

            Return (0x80000002)
        }
    }

    Scope (\_SB)
    {
        Device (NPCF)
        {
            Name (ACBT, 0x0118)
            Name (DCBT, Zero)
            Name (DBAC, Zero)
            Name (DBDC, Zero)
            Name (AMAT, Zero)
            Name (AMIT, Zero)
            Name (ATPP, 0x01E0)
            Name (DTPP, Zero)
            Name (TPPL, 0x0001D4C0)
            Name (DROS, Zero)
            Name (HPCT, Zero)
            Name (CDIS, Zero)
            Name (CUSL, Zero)
            Name (CUCT, Zero)
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                CDIS = Zero
                Return ("NVDA0820")
            }

            OperationRegion (ERA6, SystemMemory, 0xFE0B06F6, 0x04)
            Field (ERA6, AnyAcc, Lock, Preserve)
            {
                CPAT,   8, 
                GPAT,   8, 
                CPIX,   8, 
                GPIX,   8
            }

            Name (_UID, "NPCF")  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((CDIS == One))
                {
                    Return (0x0D)
                }

                Return (0x0F)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                CDIS = One
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("36b49710-2483-11e7-9598-0800200c9a66") /* Unknown UUID */))
                {
                    If ((\_SB.PCI0.GPP0.PEGP.NPCS != Zero))
                    {
                        Return (NPCF (Arg0, Arg1, Arg2, Arg3))
                    }
                }
            }

            Method (NPCF, 4, Serialized)
            {
                Debug = "------- NVPCF DSM --------"
                If ((ToInteger (Arg1) != 0x0200))
                {
                    Return (0x80000001)
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Debug = "   NVPCF sub-func#0"
                        If (((GTYP == One) || (GTYP == 0x05)))
                        {
                            Return (Buffer (0x04)
                            {
                                 0x3F, 0x07, 0x00, 0x00                           // ?...
                            })
                        }
                        Else
                        {
                            Return (Buffer (0x04)
                            {
                                 0x07, 0x07, 0x00, 0x00                           // ....
                            })
                        }
                    }
                    Case (One)
                    {
                        Debug = "   NVPCF sub-func#1"
                        Return (Buffer (0x0E)
                        {
                            /* 0000 */  0x20, 0x03, 0x01, 0x01, 0x23, 0x04, 0x05, 0x01,  //  ...#...
                            /* 0008 */  0x01, 0x01, 0x00, 0x00, 0x00, 0xAC               // ......
                        })
                    }
                    Case (0x02)
                    {
                        Debug = "   NVPCF sub-func#2"
                        Name (PBD2, Buffer (0x31)
                        {
                             0x00                                             // .
                        })
                        CreateByteField (PBD2, Zero, PTV2)
                        CreateByteField (PBD2, One, PHB2)
                        CreateByteField (PBD2, 0x02, GSB2)
                        CreateByteField (PBD2, 0x03, CTB2)
                        CreateByteField (PBD2, 0x04, NCE2)
                        PTV2 = 0x23
                        PHB2 = 0x05
                        GSB2 = 0x10
                        CTB2 = 0x1C
                        NCE2 = One
                        CreateWordField (PBD2, 0x05, TGPA)
                        CreateWordField (PBD2, 0x07, TGPD)
                        CreateByteField (PBD2, 0x15, PC01)
                        CreateByteField (PBD2, 0x16, PC02)
                        CreateWordField (PBD2, 0x19, TPPA)
                        CreateWordField (PBD2, 0x1B, TPPD)
                        CreateWordField (PBD2, 0x1D, MAGA)
                        CreateWordField (PBD2, 0x1F, MAGD)
                        CreateWordField (PBD2, 0x21, MIGA)
                        CreateWordField (PBD2, 0x23, MIGD)
                        CreateDWordField (PBD2, 0x25, DROP)
                        CreateDWordField (PBD2, 0x29, PA5O)
                        CreateDWordField (PBD2, 0x2D, PA6O)
                        CreateField (Arg3, 0x28, 0x02, NIGS)
                        CreateByteField (Arg3, 0x15, IORC)
                        CreateField (Arg3, 0xB0, One, PWCS)
                        CreateField (Arg3, 0xB1, One, PWTS)
                        CreateField (Arg3, 0xB2, One, CGPS)
                        If ((ToInteger (NIGS) == Zero))
                        {
                            Local0 = Zero
                            If ((Acquire (\_SB.PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                            {
                                Local0 = \_SB.PCI0.LPC0.EC0.PDAB /* External reference */
                                Release (\_SB.PCI0.LPC0.EC0.LFCM)
                            }

                            If (((Local0 > Zero) && (Local0 < 0x06)))
                            {
                                Switch (Local0)
                                {
                                    Case (One)
                                    {
                                        DBAC = One
                                        ACBT = Zero
                                        ATPP = Zero
                                        AMAT = Zero
                                        AMIT = Zero
                                    }
                                    Case (0x02)
                                    {
                                        DBAC = Zero
                                        ACBT = Zero
                                        ATPP = 0xA0
                                        AMAT = 0x50
                                        AMIT = 0xFF88
                                    }
                                    Case (0x03)
                                    {
                                        DBAC = Zero
                                        ACBT = Zero
                                        ATPP = 0x01B8
                                        AMAT = 0x50
                                        AMIT = Zero
                                    }
                                    Case (0x04)
                                    {
                                        DBAC = Zero
                                        ACBT = Zero
                                        ATPP = 0x78
                                        AMAT = 0x28
                                        AMIT = 0xFF88
                                    }
                                    Case (0x05)
                                    {
                                        DBAC = Zero
                                        ACBT = Zero
                                        ATPP = 0x01B8
                                        AMAT = 0xC8
                                        AMIT = Zero
                                    }

                                }
                            }
                            Else
                            {
                                If ((Acquire (\_SB.PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                {
                                    AMAT = Zero
                                    AMIT = Zero
                                    If ((\_SB.PCI0.LPC0.EC0.SPMO == One))
                                    {
                                        If (((PRFT == One) && (EPSW == One)))
                                        {
                                            DBAC = Zero
                                            If (((GTYP == 0x02) || (GTYP == 0x03)))
                                            {
                                                If (((CPTY == 0x07) || (CPTY == 0x05)))
                                                {
                                                    ATPP = 0x01E0
                                                    ACBT = 0x0280
                                                    AMAT = 0x28
                                                }
                                                ElseIf ((CPTY == 0x09))
                                                {
                                                    ATPP = 0x0258
                                                    ACBT = 0x0208
                                                    AMAT = 0xA0
                                                }
                                                Else
                                                {
                                                    ATPP = 0x0280
                                                    ACBT = 0x0208
                                                    AMAT = 0xA0
                                                }
                                            }
                                            ElseIf ((GTYP == One))
                                            {
                                                If ((CPTY == 0x07))
                                                {
                                                    DBAC = One
                                                    ACBT = 0x02F8
                                                    ATPP = 0x01E0
                                                }
                                                Else
                                                {
                                                    ACBT = 0x02A8
                                                    ATPP = 0x02A8
                                                    AMAT = 0x50
                                                }
                                            }
                                            ElseIf ((GTYP == 0x05))
                                            {
                                                If ((CPTY == 0x07))
                                                {
                                                    DBAC = One
                                                    ACBT = 0x02F8
                                                    ATPP = 0x01B8
                                                }
                                                Else
                                                {
                                                    ACBT = 0x0280
                                                    ATPP = 0x02A8
                                                    AMAT = 0x78
                                                }
                                            }
                                            ElseIf ((GTYP == 0x07))
                                            {
                                                If (((CPTY == 0x07) || (CPTY == 0x05)))
                                                {
                                                    ATPP = 0x01E0
                                                    ACBT = 0x0280
                                                    AMAT = 0x28
                                                }
                                                ElseIf ((CPTY == 0x09))
                                                {
                                                    ATPP = 0x0258
                                                    ACBT = 0x0208
                                                    AMAT = 0xA0
                                                }
                                                Else
                                                {
                                                    ATPP = 0x0280
                                                    ACBT = 0x0208
                                                    AMAT = 0xA0
                                                }
                                            }
                                            Else
                                            {
                                                DBAC = One
                                                If ((CPTY == 0x07))
                                                {
                                                    ACBT = 0x0118
                                                    ATPP = 0x0208
                                                }
                                                Else
                                                {
                                                    ACBT = 0x0118
                                                    ATPP = 0x0280
                                                }
                                            }
                                        }
                                        Else
                                        {
                                            DBAC = Zero
                                            If (((GTYP == 0x02) || (GTYP == 0x03)))
                                            {
                                                ACBT = 0x02A8
                                                If (((CPTY == 0x07) || (CPTY == 0x05)))
                                                {
                                                    ATPP = 0x01B8
                                                    ACBT = 0x0208
                                                    AMAT = 0xA0
                                                }
                                                Else
                                                {
                                                    ATPP = 0x0230
                                                    ACBT = 0x01E0
                                                    AMAT = 0xC8
                                                }
                                            }
                                            ElseIf ((GTYP == One))
                                            {
                                                If ((CPTY == 0x07))
                                                {
                                                    ACBT = 0x02A8
                                                    ATPP = 0x01B8
                                                    AMAT = 0x50
                                                }
                                                Else
                                                {
                                                    ACBT = 0x0230
                                                    ATPP = 0x0258
                                                    AMAT = 0xC8
                                                }
                                            }
                                            ElseIf ((GTYP == 0x05))
                                            {
                                                DBAC = Zero
                                                If ((CPTY == 0x07))
                                                {
                                                    ACBT = 0x02A8
                                                    ATPP = 0x01B8
                                                    AMAT = 0x50
                                                }
                                                Else
                                                {
                                                    ACBT = 0x0230
                                                    ATPP = 0x0258
                                                    AMAT = 0xC8
                                                }
                                            }
                                            ElseIf ((GTYP == 0x07))
                                            {
                                                ACBT = 0x02A8
                                                If (((CPTY == 0x07) || (CPTY == 0x05)))
                                                {
                                                    ATPP = 0x01B8
                                                    ACBT = 0x0208
                                                    AMAT = 0xA0
                                                }
                                                Else
                                                {
                                                    ATPP = 0x0230
                                                    ACBT = 0x01E0
                                                    AMAT = 0xC8
                                                }
                                            }
                                            Else
                                            {
                                                DBAC = One
                                                If ((CPTY == 0x07))
                                                {
                                                    ACBT = 0x0118
                                                    ATPP = 0x01B8
                                                }
                                                Else
                                                {
                                                    ACBT = 0x0118
                                                    ATPP = 0x0208
                                                }
                                            }
                                        }
                                    }
                                    ElseIf ((\_SB.PCI0.LPC0.EC0.SPMO == Zero))
                                    {
                                        DBAC = Zero
                                        If (((GTYP == One) || (GTYP == 0x05)))
                                        {
                                            ACBT = Zero
                                            ATPP = 0x01B8
                                            AMAT = 0x78
                                            If ((\_SB.PCI0.LPC0.EC0.BCAI != Zero))
                                            {
                                                AMAT = (\_SB.PCI0.LPC0.EC0.F5D1 * 0x08)
                                            }
                                        }
                                        ElseIf ((GTYP == 0x06))
                                        {
                                            ACBT = Zero
                                            ATPP = 0x01B8
                                            AMAT = 0x50
                                        }
                                        Else
                                        {
                                            ACBT = Zero
                                            ATPP = 0x0280
                                            AMAT = 0xC8
                                        }
                                    }
                                    ElseIf (((GTYP == One) || (GTYP == 0x05)))
                                    {
                                        DBAC = One
                                        ACBT = Zero
                                        ATPP = Zero
                                    }
                                    ElseIf ((GTYP == 0x06))
                                    {
                                        DBAC = Zero
                                        ACBT = Zero
                                        ATPP = 0x78
                                        AMAT = 0x28
                                        AMIT = 0xFF88
                                    }
                                    Else
                                    {
                                        DBAC = Zero
                                        ACBT = Zero
                                        ATPP = 0xA0
                                        AMAT = 0x50
                                        AMIT = 0xFF88
                                    }

                                    If ((\_SB.PCI0.LPC0.EC0.CTMD == One))
                                    {
                                        If ((\_SB.PCI0.LPC0.EC0.CTE0 == One))
                                        {
                                            If ((EPSW == One))
                                            {
                                                DBAC = Zero
                                                If (((GTYP == 0x02) || (GTYP == 0x03)))
                                                {
                                                    If (((CPTY == 0x07) || (CPTY == 0x05)))
                                                    {
                                                        ATPP = 0x01E0
                                                        ACBT = 0x0280
                                                        AMAT = 0x28
                                                    }
                                                    ElseIf ((CPTY == 0x09))
                                                    {
                                                        ATPP = 0x0258
                                                        ACBT = 0x0208
                                                        AMAT = 0xA0
                                                    }
                                                    Else
                                                    {
                                                        ATPP = 0x0280
                                                        ACBT = 0x0208
                                                        AMAT = 0xA0
                                                    }
                                                }
                                                ElseIf ((GTYP == One))
                                                {
                                                    If ((CPTY == 0x07))
                                                    {
                                                        DBAC = One
                                                        ACBT = 0x02F8
                                                        ATPP = 0x01E0
                                                    }
                                                    Else
                                                    {
                                                        ACBT = 0x02A8
                                                        ATPP = 0x02A8
                                                        AMAT = 0x50
                                                    }
                                                }
                                                ElseIf ((GTYP == 0x05))
                                                {
                                                    If ((CPTY == 0x07))
                                                    {
                                                        DBAC = One
                                                        ACBT = 0x02F8
                                                        ATPP = 0x01B8
                                                    }
                                                    Else
                                                    {
                                                        ACBT = 0x0280
                                                        ATPP = 0x02A8
                                                        AMAT = 0x78
                                                    }
                                                }
                                                ElseIf ((GTYP == 0x07))
                                                {
                                                    If (((CPTY == 0x07) || (CPTY == 0x05)))
                                                    {
                                                        ATPP = 0x01E0
                                                        ACBT = 0x0280
                                                        AMAT = 0x28
                                                    }
                                                    ElseIf ((CPTY == 0x09))
                                                    {
                                                        ATPP = 0x0258
                                                        ACBT = 0x0208
                                                        AMAT = 0xA0
                                                    }
                                                    Else
                                                    {
                                                        ATPP = 0x0280
                                                        ACBT = 0x0208
                                                        AMAT = 0xA0
                                                    }
                                                }
                                                Else
                                                {
                                                    DBAC = One
                                                    If ((CPTY == 0x07))
                                                    {
                                                        ACBT = 0x0118
                                                        ATPP = 0x0208
                                                    }
                                                    Else
                                                    {
                                                        ACBT = 0x0118
                                                        ATPP = 0x0280
                                                    }
                                                }
                                            }
                                            Else
                                            {
                                                DBAC = Zero
                                                If (((GTYP == 0x02) || (GTYP == 0x03)))
                                                {
                                                    ACBT = 0x02A8
                                                    If (((CPTY == 0x07) || (CPTY == 0x05)))
                                                    {
                                                        ATPP = 0x01B8
                                                        ACBT = 0x0208
                                                        AMAT = 0xA0
                                                    }
                                                    Else
                                                    {
                                                        ATPP = 0x0230
                                                        ACBT = 0x01E0
                                                        AMAT = 0xC8
                                                    }
                                                }
                                                ElseIf ((GTYP == One))
                                                {
                                                    If ((CPTY == 0x07))
                                                    {
                                                        ACBT = 0x02A8
                                                        ATPP = 0x01B8
                                                        AMAT = 0x50
                                                    }
                                                    Else
                                                    {
                                                        ACBT = 0x0230
                                                        ATPP = 0x0258
                                                        AMAT = 0xC8
                                                    }
                                                }
                                                ElseIf ((GTYP == 0x05))
                                                {
                                                    DBAC = Zero
                                                    If ((CPTY == 0x07))
                                                    {
                                                        ACBT = 0x02A8
                                                        ATPP = 0x01B8
                                                        AMAT = 0x50
                                                    }
                                                    Else
                                                    {
                                                        ACBT = 0x0230
                                                        ATPP = 0x0258
                                                        AMAT = 0xC8
                                                    }
                                                }
                                                ElseIf ((GTYP == 0x07))
                                                {
                                                    ACBT = 0x02A8
                                                    If (((CPTY == 0x07) || (CPTY == 0x05)))
                                                    {
                                                        ATPP = 0x01B8
                                                        ACBT = 0x0208
                                                        AMAT = 0xA0
                                                    }
                                                    Else
                                                    {
                                                        ATPP = 0x0230
                                                        ACBT = 0x01E0
                                                        AMAT = 0xC8
                                                    }
                                                }
                                                Else
                                                {
                                                    DBAC = One
                                                    If ((CPTY == 0x07))
                                                    {
                                                        ACBT = 0x0118
                                                        ATPP = 0x01B8
                                                    }
                                                    Else
                                                    {
                                                        ACBT = 0x0118
                                                        ATPP = 0x0208
                                                    }
                                                }
                                            }
                                        }
                                        Else
                                        {
                                            DBAC = Zero
                                            If (((GTYP == One) || (GTYP == 0x05)))
                                            {
                                                Local3 = (\_SB.PCI0.LPC0.EC0.TGPP - 0x50)
                                            }
                                            ElseIf ((GTYP == 0x06))
                                            {
                                                Local3 = (\_SB.PCI0.LPC0.EC0.TGPP - 0x3C)
                                            }
                                            Else
                                            {
                                                Local3 = (\_SB.PCI0.LPC0.EC0.TGPP - 0x37)
                                            }

                                            Local0 = (Local3 * 0x08)
                                            ACBT = Local0
                                            Local1 = (\_SB.PCI0.LPC0.EC0.GATP * 0x08)
                                            ATPP = Local1
                                            Local2 = (\_SB.PCI0.LPC0.EC0.GPAB * 0x08)
                                            AMAT = Local2
                                            Local2 = (\_SB.PCI0.LPC0.EC0.SGCB * 0x08)
                                            AMIT = Local2
                                        }
                                    }

                                    Release (\_SB.PCI0.LPC0.EC0.LFCM)
                                }

                                If (((\_SB.PCI0.LPC0.EC0.SPMO == Zero) && (BCTP == One)))
                                {
                                    If ((MCSK == One))
                                    {
                                        DBAC = Zero
                                        AMAT = Zero
                                        AMIT = Zero
                                        If ((INSM == 0x02))
                                        {
                                            If (((CPTY == 0x07) || (CPTY == 0x05)))
                                            {
                                                If ((GTYP == 0x06))
                                                {
                                                    DBAC = One
                                                    ACBT = 0x0118
                                                    ATPP = 0x01E0
                                                }
                                                Else
                                                {
                                                    ACBT = 0x0208
                                                    ATPP = 0x01E0
                                                    AMAT = 0xA0
                                                }
                                            }
                                            ElseIf ((GTYP == 0x06))
                                            {
                                                DBAC = One
                                                ACBT = 0x0118
                                                ATPP = 0x0230
                                            }
                                            Else
                                            {
                                                ACBT = 0x01E0
                                                ATPP = 0x0258
                                                AMAT = 0xC8
                                            }
                                        }

                                        If ((INSM == 0x03))
                                        {
                                            DBAC = One
                                            If (((CPTY == 0x07) || (CPTY == 0x05)))
                                            {
                                                If ((GTYP == 0x06))
                                                {
                                                    ACBT = 0xF0
                                                    ATPP = 0x0208
                                                }
                                                Else
                                                {
                                                    ACBT = 0x01E0
                                                    ATPP = 0x0208
                                                }
                                            }
                                            ElseIf ((GTYP == 0x06))
                                            {
                                                ACBT = 0xF0
                                                ATPP = 0x0258
                                            }
                                            Else
                                            {
                                                ACBT = 0x01E0
                                                ATPP = 0x0258
                                            }
                                        }

                                        If ((INSM == 0x04))
                                        {
                                            DBAC = One
                                            If (((CPTY == 0x07) || (CPTY == 0x05)))
                                            {
                                                If ((GTYP == 0x06))
                                                {
                                                    ACBT = 0xC8
                                                    ATPP = 0x0230
                                                }
                                                Else
                                                {
                                                    ACBT = 0x01E0
                                                    ATPP = 0x0208
                                                }
                                            }
                                            ElseIf ((GTYP == 0x06))
                                            {
                                                ACBT = 0xC8
                                                ATPP = 0x0280
                                            }
                                            Else
                                            {
                                                ACBT = 0x0230
                                                ATPP = 0x0208
                                            }
                                        }

                                        If ((INSM == 0x05))
                                        {
                                            If (((CPTY == 0x07) || (CPTY == 0x05)))
                                            {
                                                If ((GTYP == 0x06))
                                                {
                                                    ACBT = 0xF0
                                                    ATPP = 0x0208
                                                    AMAT = 0x28
                                                }
                                                Else
                                                {
                                                    DBAC = One
                                                    ACBT = 0x0230
                                                    ATPP = 0x01B8
                                                }
                                            }
                                            ElseIf ((GTYP == 0x06))
                                            {
                                                ACBT = 0xF0
                                                ATPP = 0x0258
                                                AMAT = 0x28
                                            }
                                            Else
                                            {
                                                DBAC = One
                                                ACBT = 0x0258
                                                ATPP = 0x01E0
                                            }
                                        }

                                        If ((INSM == 0x06))
                                        {
                                            If (((CPTY == 0x07) || (CPTY == 0x05)))
                                            {
                                                If ((GTYP == 0x06))
                                                {
                                                    ACBT = 0xC8
                                                    ATPP = 0x0230
                                                    AMAT = 0x50
                                                }
                                                Else
                                                {
                                                    DBAC = One
                                                    ACBT = 0x02A8
                                                    ATPP = 0x0140
                                                }
                                            }
                                            ElseIf ((GTYP == 0x06))
                                            {
                                                ACBT = 0xC8
                                                ATPP = 0x0280
                                                AMAT = 0x50
                                            }
                                            Else
                                            {
                                                DBAC = One
                                                ACBT = 0x02A8
                                                ATPP = 0x0190
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        DBAC = One
                                        AMAT = Zero
                                        AMIT = Zero
                                        If ((INSM == 0x02))
                                        {
                                            DBAC = Zero
                                            ACBT = 0x0230
                                            ATPP = 0x0258
                                            AMAT = 0xC8
                                        }

                                        If ((INSM == 0x03))
                                        {
                                            ACBT = 0x0230
                                            ATPP = 0x0258
                                        }

                                        If ((INSM == 0x04))
                                        {
                                            ACBT = 0x0280
                                            ATPP = 0x0208
                                        }

                                        If ((INSM == 0x05))
                                        {
                                            ACBT = 0x02A8
                                            ATPP = 0x01E0
                                        }

                                        If ((INSM == 0x06))
                                        {
                                            ACBT = 0x02F8
                                            ATPP = 0x0190
                                        }
                                    }
                                }
                            }

                            If ((Acquire (\_SB.PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                            {
                                If ((\_SB.PCI0.LPC0.EC0.SPMO == 0x02))
                                {
                                    If (((GTYP == One) || (GTYP == 0x05)))
                                    {
                                        DROS = 0xC350
                                    }
                                    Else
                                    {
                                        DROS = 0xFDE8
                                    }
                                }
                                ElseIf (((GTYP == One) || (GTYP == 0x05)))
                                {
                                    DROS = 0x7530
                                }
                                Else
                                {
                                    DROS = 0x88B8
                                }

                                Release (\_SB.PCI0.LPC0.EC0.LFCM)
                            }

                            TGPA = ACBT /* \_SB_.NPCF.ACBT */
                            TGPD = DCBT /* \_SB_.NPCF.DCBT */
                            PC01 = Zero
                            PC02 = (DBAC | (DBDC << One))
                            TPPA = ATPP /* \_SB_.NPCF.ATPP */
                            TPPD = DTPP /* \_SB_.NPCF.DTPP */
                            MAGA = AMAT /* \_SB_.NPCF.AMAT */
                            MIGA = AMIT /* \_SB_.NPCF.AMIT */
                            DROP = DROS /* \_SB_.NPCF.DROS */
                        }

                        If ((ToInteger (NIGS) == One))
                        {
                            If ((ToInteger (PWCS) == One)){}
                            Else
                            {
                            }

                            If ((ToInteger (PWTS) == One)){}
                            Else
                            {
                            }

                            If ((ToInteger (CGPS) == One)){}
                            Else
                            {
                            }

                            TGPA = Zero
                            TGPD = Zero
                            PC01 = Zero
                            PC02 = Zero
                            TPPA = Zero
                            TPPD = Zero
                            MAGA = Zero
                            MIGA = Zero
                            MAGD = Zero
                            MIGD = Zero
                        }

                        Return (PBD2) /* \_SB_.NPCF.NPCF.PBD2 */
                    }
                    Case (0x03)
                    {
                        Debug = "   NVPCF sub-func#3"
                        Return (Buffer (0x16)
                        {
                            /* 0000 */  0x11, 0x04, 0x09, 0x02, 0x00, 0xFF, 0x00, 0x3C,  // .......<
                            /* 0008 */  0x40, 0x40, 0x44, 0x44, 0x48, 0x05, 0xFF, 0x00,  // @@DDH...
                            /* 0010 */  0x30, 0x34, 0x34, 0x39, 0x39, 0x3F               // 04499?
                        })
                    }
                    Case (0x04)
                    {
                        Debug = "   NVPCF sub-func#4"
                        Return (Buffer (0x1D)
                        {
                            /* 0000 */  0x11, 0x04, 0x19, 0x01, 0x04, 0x00, 0x01, 0x02,  // ........
                            /* 0008 */  0x03, 0x03, 0x00, 0x01, 0x02, 0x00, 0x01, 0x02,  // ........
                            /* 0010 */  0x03, 0x01, 0x01, 0x02, 0x03, 0x02, 0x02, 0x02,  // ........
                            /* 0018 */  0x03, 0x03, 0x03, 0x03, 0x03                     // .....
                        })
                    }
                    Case (0x05)
                    {
                        Debug = "   NVPCF sub-func#5"
                        Name (PBD5, Buffer (0x28)
                        {
                             0x00                                             // .
                        })
                        CreateByteField (PBD5, Zero, PTV5)
                        CreateByteField (PBD5, One, PHB5)
                        CreateByteField (PBD5, 0x02, TEB5)
                        CreateByteField (PBD5, 0x03, NTE5)
                        PTV5 = 0x11
                        PHB5 = 0x04
                        TEB5 = 0x24
                        NTE5 = One
                        CreateDWordField (PBD5, 0x04, F5O0)
                        CreateDWordField (PBD5, 0x08, F5O1)
                        CreateDWordField (PBD5, 0x0C, F5O2)
                        CreateDWordField (PBD5, 0x10, F5O3)
                        CreateDWordField (PBD5, 0x14, F5O4)
                        CreateDWordField (PBD5, 0x18, F5O5)
                        CreateDWordField (PBD5, 0x1C, F5O6)
                        CreateDWordField (PBD5, 0x20, F5O7)
                        CreateDWordField (PBD5, 0x24, F5O8)
                        CreateField (Arg3, 0x20, 0x03, INC5)
                        CreateDWordField (Arg3, 0x08, F5P1)
                        CreateDWordField (Arg3, 0x0C, F5P2)
                        Switch (ToInteger (INC5))
                        {
                            Case (Zero)
                            {
                                F5O0 = One
                                F5O1 = Zero
                                F5O2 = Zero
                                F5O3 = Zero
                            }
                            Case (One)
                            {
                                F5O0 = 0x0C
                                F5O1 = Zero
                                F5O2 = Zero
                                F5O3 = Zero
                            }
                            Case (0x02)
                            {
                                F5O0 = Zero
                                F5O1 = Zero
                                Local0 = Zero
                                Local1 = Zero
                                Local0 = CPAT /* \_SB_.NPCF.CPAT */
                                Local1 = CPIX /* \_SB_.NPCF.CPIX */
                                Local0 <<= 0x10
                                Local1 &= 0x0F
                                F5O1 = (Local0 | Local1)
                                F5O2 = Zero
                                Local0 = Zero
                                Local1 = Zero
                                Local0 = GPAT /* \_SB_.NPCF.GPAT */
                                Local1 = GPIX /* \_SB_.NPCF.GPIX */
                                Local0 <<= 0x10
                                Local1 &= 0x0F
                                F5O2 = (Local0 | Local1)
                                F5O3 = Zero
                                F5O4 = Zero
                                F5O5 = Zero
                                F5O6 = Zero
                                F5O7 = Zero
                                F5O8 = Zero
                            }
                            Case (0x03)
                            {
                                CUSL = (F5P1 & 0xFF)
                            }
                            Case (0x04)
                            {
                                CUCT = F5P2 /* \_SB_.NPCF.NPCF.F5P2 */
                            }
                            Default
                            {
                                Return (0x80000002)
                            }

                        }

                        Return (PBD5) /* \_SB_.NPCF.NPCF.PBD5 */
                    }
                    Case (0x06)
                    {
                        Debug = "   NVPCF sub-func#6"
                        Return (0x80000002)
                    }
                    Case (0x07)
                    {
                        Debug = "   NVPCF sub-func#7"
                        CreateDWordField (Arg3, 0x05, AMAX)
                        CreateDWordField (Arg3, 0x09, ARAT)
                        CreateDWordField (Arg3, 0x0D, DMAX)
                        CreateDWordField (Arg3, 0x11, DRAT)
                        CreateDWordField (Arg3, 0x15, TGPM)
                        Return (Zero)
                    }
                    Case (0x08)
                    {
                        Debug = "   NVPCF sub-func#8"
                        Return (Buffer (0x59)
                        {
                            /* 0000 */  0x10, 0x04, 0x11, 0x05, 0x64, 0x08, 0x20, 0x00,  // ....d. .
                            /* 0008 */  0x00, 0x30, 0x75, 0x00, 0x00, 0xB8, 0x88, 0x00,  // .0u.....
                            /* 0010 */  0x00, 0xC8, 0xAF, 0x00, 0x00, 0x46, 0xFC, 0x21,  // .....F.!
                            /* 0018 */  0x00, 0x00, 0x30, 0x75, 0x00, 0x00, 0xB8, 0x88,  // ..0u....
                            /* 0020 */  0x00, 0x00, 0xC8, 0xAF, 0x00, 0x00, 0x32, 0x8C,  // ......2.
                            /* 0028 */  0x23, 0x00, 0x00, 0x30, 0x75, 0x00, 0x00, 0xB8,  // #..0u...
                            /* 0030 */  0x88, 0x00, 0x00, 0xC8, 0xAF, 0x00, 0x00, 0x1E,  // ........
                            /* 0038 */  0xB8, 0x24, 0x00, 0x00, 0x30, 0x75, 0x00, 0x00,  // .$..0u..
                            /* 0040 */  0xB8, 0x88, 0x00, 0x00, 0xC8, 0xAF, 0x00, 0x00,  // ........
                            /* 0048 */  0x0A, 0xA4, 0x1F, 0x00, 0x00, 0x30, 0x75, 0x00,  // .....0u.
                            /* 0050 */  0x00, 0xB8, 0x88, 0x00, 0x00, 0xC8, 0xAF, 0x00,  // ........
                            /* 0058 */  0x00                                             // .
                        })
                    }
                    Case (0x09)
                    {
                        Debug = "   NVPCF sub-func#9"
                        CreateDWordField (Arg3, 0x03, CPTD)
                        Name (XX11, Buffer (0x07){})
                        CreateWordField (XX11, Zero, SSZE)
                        CreateByteField (XX11, 0x02, SMUF)
                        CreateDWordField (XX11, 0x03, SMUD)
                        If ((Acquire (\_SB.PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                        {
                            If ((\_SB.PCI0.LPC0.EC0.ACTY () == 0x03))
                            {
                                SSZE = 0x07
                                SMUF = 0x05
                                SMUD = CPTD /* \_SB_.NPCF.NPCF.CPTD */
                                If ((CPTD != Zero))
                                {
                                    \_SB.ALIB (0x0C, XX11)
                                }
                            }

                            Release (\_SB.PCI0.LPC0.EC0.LFCM)
                        }

                        Return (Zero)
                    }
                    Case (0x0A)
                    {
                        Debug = "   NVPCF sub-func#10"
                        Name (PBDA, Buffer (0x08)
                        {
                             0x00                                             // .
                        })
                        CreateByteField (PBDA, Zero, DTTV)
                        CreateByteField (PBDA, One, DTSH)
                        CreateByteField (PBDA, 0x02, DTSE)
                        CreateByteField (PBDA, 0x03, DTTE)
                        CreateDWordField (PBDA, 0x04, DTTL)
                        DTTV = 0x10
                        DTSH = 0x04
                        DTSE = 0x04
                        DTTE = One
                        DTTL = TPPL /* \_SB_.NPCF.TPPL */
                        Return (PBDA) /* \_SB_.NPCF.NPCF.PBDA */
                    }

                }

                Return (0x80000002)
            }
        }
    }
}



SSDT10
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "CB-01   ", 0x00000001)
{
    Scope (\_SB)
    {
        Device (TPM2)
        {
            Name (_HID, "MSFT0101" /* TPM 2.0 Security Device */)  // _HID: Hardware ID
            Name (_CID, "MSFT0101" /* TPM 2.0 Security Device */)  // _CID: Compatible ID
            Name (_STR, Unicode ("TPM 2.0 Device"))  // _STR: Description String
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                Memory32Fixed (ReadWrite,
                    0xB2ED2000,         // Address Base
                    0x00004000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xB2ED6000,         // Address Base
                    0x00004000,         // Address Length
                    )
            })
            OperationRegion (SMIP, SystemIO, 0xB0, One)
            Field (SMIP, ByteAcc, NoLock, Preserve)
            {
                IOB2,   8
            }

            OperationRegion (TNVS, SystemMemory, 0xBAE39000, 0x27)
            Field (TNVS, AnyAcc, NoLock, Preserve)
            {
                PPIN,   8, 
                PPIP,   32, 
                PPRP,   32, 
                PPRQ,   32, 
                PPRM,   32, 
                LPPR,   32, 
                FRET,   32, 
                MCIN,   8, 
                MCIP,   32, 
                MORD,   32, 
                MRET,   32, 
                CAIN,   8
            }

            OperationRegion (CONA, SystemMemory, 0xBAE39027, 0x30)
            Field (CONA, DWordAcc, NoLock, Preserve)
            {
                HRTB,   32, 
                ERRR,   32, 
                CLFG,   32, 
                STA1,   32, 
                AccessAs (QWordAcc, 0x00), 
                INTC,   64, 
                AccessAs (DWordAcc, 0x00), 
                CMSZ,   32, 
                AccessAs (QWordAcc, 0x00), 
                CMDB,   64, 
                AccessAs (DWordAcc, 0x00), 
                RPSZ,   32, 
                AccessAs (QWordAcc, 0x00), 
                RESP,   64
            }

            Method (PTS, 1, Serialized)
            {
                Sleep (0x64)
                Return (Zero)
            }

            Method (HINF, 3, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        Name (TPMV, Package (0x02)
                        {
                            One, 
                            Package (0x02)
                            {
                                0x02, 
                                Zero
                            }
                        })
                        If ((_STA () == Zero))
                        {
                            Return (Package (0x01)
                            {
                                Zero
                            })
                        }

                        Return (TPMV) /* \_SB_.TPM2.HINF.TPMV */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Name (TPM2, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (TPM3, Package (0x03)
            {
                Zero, 
                Zero, 
                Zero
            })
            Method (TPPI, 3, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        Return ("1.3")
                    }
                    Case (0x02)
                    {
                        PPRQ = DerefOf (Arg2 [Zero])
                        PPIP = 0x02
                        IOB2 = PPIN /* \_SB_.TPM2.PPIN */
                        Return (FRET) /* \_SB_.TPM2.FRET */
                    }
                    Case (0x03)
                    {
                        TPM2 [One] = PPRQ /* \_SB_.TPM2.PPRQ */
                        Return (TPM2) /* \_SB_.TPM2.TPM2 */
                    }
                    Case (0x04)
                    {
                        Return (0x02)
                    }
                    Case (0x05)
                    {
                        PPIP = 0x05
                        IOB2 = PPIN /* \_SB_.TPM2.PPIN */
                        TPM3 [One] = LPPR /* \_SB_.TPM2.LPPR */
                        TPM3 [0x02] = PPRP /* \_SB_.TPM2.PPRP */
                        Return (TPM3) /* \_SB_.TPM2.TPM3 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        PPIP = 0x07
                        PPRQ = DerefOf (Arg2 [Zero])
                        PPRM = Zero
                        If ((PPRQ == 0x17))
                        {
                            PPRM = DerefOf (Arg2 [One])
                        }

                        IOB2 = PPIN /* \_SB_.TPM2.PPIN */
                        Return (FRET) /* \_SB_.TPM2.FRET */
                    }
                    Case (0x08)
                    {
                        PPIP = 0x08
                        PPRQ = DerefOf (Arg2 [Zero])
                        IOB2 = PPIN /* \_SB_.TPM2.PPIN */
                        Return (FRET) /* \_SB_.TPM2.FRET */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (One)
            }

            Method (OASM, 3, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        Return (Zero)
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (One)
            }

            Method (TMCI, 3, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        MORD = DerefOf (Arg2 [Zero])
                        MCIP = One
                        IOB2 = MCIN /* \_SB_.TPM2.MCIN */
                        Return (MRET) /* \_SB_.TPM2.MRET */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (One)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8") /* Unknown UUID */))
                {
                    Return (HINF (Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
                {
                    Return (TPPI (Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
                {
                    Return (TMCI (Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4") /* Unknown UUID */))
                {
                    Return (OASM (Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }
}



SSDT11
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.PCI0.LPC0.EC0_, DeviceObj)
    External (_SB_.PCI0.LPC0.EC0_.ECAV, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.LFCM, UnknownObj)

    Scope (\_SB.PCI0.LPC0.EC0)
    {
        Method (_Q4F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            \_SB.UBTC.NTFY ()
        }
    }

    Scope (\_SB)
    {
        Device (UBTC)
        {
            Name (_HID, EisaId ("USBC000"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0CA0"))  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_DDN, "USB Type C")  // _DDN: DOS Device Name
            Name (_ADR, Zero)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xBAF67000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.UBTC._CRS.RBUF */
            }

            Device (CR01)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x09, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "UNKNOWN",
                        PLD_VerticalPosition   = "UPPER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "UNKNOWN",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x1,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x0,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (CR02)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x09, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "UNKNOWN",
                        PLD_VerticalPosition   = "UPPER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "UNKNOWN",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x2,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x0,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            OperationRegion (E9FF, SystemMemory, 0xFE0B0980, 0x10)
            Field (E9FF, AnyAcc, Lock, Preserve)
            {
                Offset (0x09), 
                EC89,   8
            }

            OperationRegion (USBC, SystemMemory, 0xBAF67000, 0x30)
            Field (USBC, ByteAcc, Lock, Preserve)
            {
                VER1,   8, 
                VER2,   8, 
                RSV1,   8, 
                RSV2,   8, 
                CCI0,   8, 
                CCI1,   8, 
                CCI2,   8, 
                CCI3,   8, 
                CTL0,   8, 
                CTL1,   8, 
                CTL2,   8, 
                CTL3,   8, 
                CTL4,   8, 
                CTL5,   8, 
                CTL6,   8, 
                CTL7,   8, 
                MGI0,   8, 
                MGI1,   8, 
                MGI2,   8, 
                MGI3,   8, 
                MGI4,   8, 
                MGI5,   8, 
                MGI6,   8, 
                MGI7,   8, 
                MGI8,   8, 
                MGI9,   8, 
                MGIA,   8, 
                MGIB,   8, 
                MGIC,   8, 
                MGID,   8, 
                MGIE,   8, 
                MGIF,   8, 
                MGO0,   8, 
                MGO1,   8, 
                MGO2,   8, 
                MGO3,   8, 
                MGO4,   8, 
                MGO5,   8, 
                MGO6,   8, 
                MGO7,   8, 
                MGO8,   8, 
                MGO9,   8, 
                MGOA,   8, 
                MGOB,   8, 
                MGOC,   8, 
                MGOD,   8, 
                MGOE,   8, 
                MGOF,   8
            }

            OperationRegion (DBG0, SystemIO, 0x80, One)
            Field (DBG0, ByteAcc, NoLock, Preserve)
            {
                IO80,   8
            }

            Method (NTFY, 0, Serialized)
            {
                ECRD ()
                Sleep (One)
                Notify (\_SB.UBTC, 0x80) // Status Change
            }

            OperationRegion (H5FA, SystemMemory, 0xFE0B0421, One)
            Field (H5FA, AnyAcc, Lock, Preserve)
            {
                HNTF,   8
            }

            OperationRegion (ECSM, SystemMemory, 0xFE0B0460, 0x30)
            Field (ECSM, AnyAcc, Lock, Preserve)
            {
                HMPR,   8, 
                    ,   7, 
                HMDN,   1, 
                HADD,   8, 
                HCMD,   8, 
                HD00,   8, 
                HD01,   8, 
                HD02,   8, 
                HD03,   8, 
                HD04,   8, 
                HD05,   8, 
                HD06,   8, 
                HD07,   8, 
                HD08,   8, 
                HD09,   8, 
                HD0A,   8, 
                HD0B,   8, 
                HD0C,   8, 
                HD0D,   8, 
                HD0E,   8, 
                HD0F,   8, 
                Offset (0x24), 
                HCNT,   8
            }

            Method (CHKM, 0, NotSerialized)
            {
                Local0 = 0x03E8
                While (HMPR)
                {
                    Sleep (One)
                    Local0--
                    If (!Local0)
                    {
                        Return (0x8080)
                    }
                }

                If (HMDN)
                {
                    Return (Zero)
                }

                Return (0x8081)
            }

            Method (CHKS, 0, NotSerialized)
            {
                Local0 = 0x03E8
                While (HMPR)
                {
                    Sleep (One)
                    Local0--
                    If (!Local0)
                    {
                        Return (0x8080)
                    }
                }

                If (HMDN)
                {
                    Return (Zero)
                }

                Return (0x8081)
            }

            Name (RSTC, Zero)
            Mutex (UBSY, 0x00)
            Method (ECWR, 0, Serialized)
            {
                If (\_SB.PCI0.LPC0.EC0.ECAV)
                {
                    If ((Acquire (\_SB.PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                    {
                        Acquire (UBSY, 0xFFFF)
                        CHKM ()
                        HADD = 0x02
                        Sleep (One)
                        HCMD = 0x06
                        Sleep (One)
                        HD00 = MGO0 /* \_SB_.UBTC.MGO0 */
                        Sleep (One)
                        HD01 = MGO1 /* \_SB_.UBTC.MGO1 */
                        Sleep (One)
                        HD02 = MGO2 /* \_SB_.UBTC.MGO2 */
                        Sleep (One)
                        HD03 = MGO3 /* \_SB_.UBTC.MGO3 */
                        Sleep (One)
                        HD04 = MGO4 /* \_SB_.UBTC.MGO4 */
                        Sleep (One)
                        HD05 = MGO5 /* \_SB_.UBTC.MGO5 */
                        Sleep (One)
                        HD06 = MGO6 /* \_SB_.UBTC.MGO6 */
                        Sleep (One)
                        HD07 = MGO7 /* \_SB_.UBTC.MGO7 */
                        Sleep (One)
                        HD08 = MGO8 /* \_SB_.UBTC.MGO8 */
                        Sleep (One)
                        HD09 = MGO9 /* \_SB_.UBTC.MGO9 */
                        Sleep (One)
                        HD0A = MGOA /* \_SB_.UBTC.MGOA */
                        Sleep (One)
                        HD0B = MGOB /* \_SB_.UBTC.MGOB */
                        Sleep (One)
                        HD0C = MGOC /* \_SB_.UBTC.MGOC */
                        Sleep (One)
                        HD0D = MGOD /* \_SB_.UBTC.MGOD */
                        Sleep (One)
                        HD0E = MGOE /* \_SB_.UBTC.MGOE */
                        Sleep (One)
                        HD0F = MGOF /* \_SB_.UBTC.MGOF */
                        HCNT = 0x10
                        Sleep (One)
                        HMPR = 0x0A
                        EC89 = 0x08
                        Sleep (One)
                        CHKM ()
                        HADD = 0x02
                        Sleep (One)
                        HCMD = 0x04
                        Sleep (One)
                        HD00 = CTL0 /* \_SB_.UBTC.CTL0 */
                        Sleep (One)
                        HD01 = CTL1 /* \_SB_.UBTC.CTL1 */
                        Sleep (One)
                        HD02 = CTL2 /* \_SB_.UBTC.CTL2 */
                        Sleep (One)
                        HD03 = CTL3 /* \_SB_.UBTC.CTL3 */
                        Sleep (One)
                        HD04 = CTL4 /* \_SB_.UBTC.CTL4 */
                        Sleep (One)
                        HD05 = CTL5 /* \_SB_.UBTC.CTL5 */
                        Sleep (One)
                        HD06 = CTL6 /* \_SB_.UBTC.CTL6 */
                        Sleep (One)
                        HD07 = CTL7 /* \_SB_.UBTC.CTL7 */
                        Sleep (One)
                        HCNT = 0x08
                        Sleep (One)
                        HMPR = 0x0A
                        EC89 = 0x08
                        Sleep (One)
                        CHKM ()
                        Release (UBSY)
                        Release (\_SB.PCI0.LPC0.EC0.LFCM)
                    }
                }
            }

            Method (ECRD, 0, Serialized)
            {
                If (\_SB.PCI0.LPC0.EC0.ECAV)
                {
                    If ((Acquire (\_SB.PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                    {
                        Acquire (UBSY, 0xFFFF)
                        CHKM ()
                        HADD = 0x02
                        Sleep (One)
                        HCMD = 0x05
                        Sleep (One)
                        HCNT = 0x10
                        Sleep (One)
                        HMPR = 0x0B
                        EC89 = 0x07
                        Sleep (One)
                        CHKM ()
                        MGI0 = HD00 /* \_SB_.UBTC.HD00 */
                        Sleep (One)
                        MGI1 = HD01 /* \_SB_.UBTC.HD01 */
                        Sleep (One)
                        MGI2 = HD02 /* \_SB_.UBTC.HD02 */
                        Sleep (One)
                        MGI3 = HD03 /* \_SB_.UBTC.HD03 */
                        Sleep (One)
                        MGI4 = HD04 /* \_SB_.UBTC.HD04 */
                        Sleep (One)
                        MGI5 = HD05 /* \_SB_.UBTC.HD05 */
                        Sleep (One)
                        MGI6 = HD06 /* \_SB_.UBTC.HD06 */
                        Sleep (One)
                        MGI7 = HD07 /* \_SB_.UBTC.HD07 */
                        Sleep (One)
                        MGI8 = HD08 /* \_SB_.UBTC.HD08 */
                        Sleep (One)
                        MGI9 = HD09 /* \_SB_.UBTC.HD09 */
                        Sleep (One)
                        MGIA = HD0A /* \_SB_.UBTC.HD0A */
                        Sleep (One)
                        MGIB = HD0B /* \_SB_.UBTC.HD0B */
                        Sleep (One)
                        MGIC = HD0C /* \_SB_.UBTC.HD0C */
                        Sleep (One)
                        MGID = HD0D /* \_SB_.UBTC.HD0D */
                        Sleep (One)
                        MGIE = HD0E /* \_SB_.UBTC.HD0E */
                        Sleep (One)
                        MGIF = HD0F /* \_SB_.UBTC.HD0F */
                        CHKM ()
                        HADD = 0x02
                        Sleep (One)
                        HCMD = 0x03
                        Sleep (One)
                        HCNT = 0x04
                        Sleep (One)
                        HMPR = 0x0B
                        EC89 = 0x07
                        Sleep (One)
                        CHKM ()
                        CCI0 = HD00 /* \_SB_.UBTC.HD00 */
                        Sleep (One)
                        CCI1 = HD01 /* \_SB_.UBTC.HD01 */
                        Sleep (One)
                        CCI2 = HD02 /* \_SB_.UBTC.HD02 */
                        Sleep (One)
                        CCI3 = HD03 /* \_SB_.UBTC.HD03 */
                        Release (UBSY)
                        Release (\_SB.PCI0.LPC0.EC0.LFCM)
                    }
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("6f8398c2-7ca4-11e4-ad36-631042b5008f") /* Unknown UUID */))
                {
                    If ((ToInteger (Arg2) == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x0F                                             // .
                        })
                    }
                    ElseIf ((ToInteger (Arg2) == One))
                    {
                        ECWR ()
                    }
                    ElseIf ((ToInteger (Arg2) == 0x02))
                    {
                        ECRD ()
                        IO80 = 0xAB
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (Zero)
            }
        }
    }
}



SSDT12
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.PCI0.GP17.ACP_, DeviceObj)
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)

    Scope (\_SB.PCI0.GP17.ACP)
    {
        Method (_WOV, 0, NotSerialized)
        {
            Return (Zero)
        }
    }
}



SSDT13
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.LID_._LID, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M012, MethodObj)    // 5 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M020, MethodObj)    // 5 Arguments
    External (M021, MethodObj)    // 4 Arguments
    External (M023, MethodObj)    // 3 Arguments
    External (M024, MethodObj)    // 3 Arguments
    External (M025, MethodObj)    // 4 Arguments
    External (M026, MethodObj)    // 3 Arguments
    External (M037, DeviceObj)
    External (M043, MethodObj)    // 3 Arguments
    External (M046, IntObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M04A, MethodObj)    // 2 Arguments
    External (M04B, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M111, MethodObj)    // 2 Arguments
    External (M112, MethodObj)    // 2 Arguments
    External (M113, MethodObj)    // 1 Arguments
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)

    Scope (\_SB)
    {
        Name (MACO, Zero)
    }

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Name (M189, Buffer (0x0100){})
        Name (M190, 0xFFFFFFFF)
        Name (M191, 0xFFFFFFFF)
        Method (ATPX, 2, Serialized)
        {
            M460 ("  FEA-ASL-ATPX Function %d\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            If ((Arg0 == Zero))
            {
                Return (PX00 ())
            }

            If ((Arg0 == One))
            {
                Return (PX01 ())
            }

            If ((Arg0 == 0x02))
            {
                PX02 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x03))
            {
                PX03 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x04))
            {
                PX04 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x08))
            {
                Return (PX08 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (PX09 ())
            }

            If ((Arg0 == 0x0A))
            {
                PX10 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x0B))
            {
                PX11 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x0C))
            {
                PX12 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = Zero
            M158 = Zero
            M160 = Zero
            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX00, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = 0x08
            M158 = One
            M160 = M098 /* External reference */
            If (((M098 & 0x02) == 0x02))
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local0 = M019 (M095, M094, M093, 0x2C)
                Local1 = M019 (M095, M094, (M093 + One), 0x2C)
                If ((Local0 != Local5))
                {
                    M190 = Local0
                }

                If ((Local1 != Local5))
                {
                    M191 = Local1
                }
            }

            M460 ("    Return Supported Functions Bit Vector = 0x%X\n", M160, Zero, Zero, Zero, Zero, Zero)
            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX01, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateDWordField (M189, 0x02, M161)
            CreateDWordField (M189, 0x06, M162)
            M157 = 0x0A
            M161 = 0x000C4800
            M162 = M099 /* External reference */
            M460 ("    Return Valid Flags Mask = 0x%X  Flags = 0x%X\n", M161, M162, Zero, Zero, Zero, Zero)
            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX02, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & One)
            Local7 = Buffer (0x05){}
            CreateWordField (Local7, Zero, M197)
            CreateField (Local7, 0x10, 0x03, M200)
            CreateField (Local7, 0x13, 0x05, M199)
            CreateByteField (Local7, 0x03, M198)
            CreateByteField (Local7, 0x04, M201)
            M197 = 0x05
            M198 = Zero
            M199 = M091 /* External reference */
            M200 = M090 /* External reference */
            Name (HPOK, Zero)
            Local0 = M049 (M133, 0x11)
            Local6 = M113 (Local0)
            M023 (Zero, M091, M090)
            If ((M192 && Local6))
            {
                M000 (0x0D86)
                M112 (Local0, Zero)
                M111 (Local0, One)
                Sleep (0x20)
                M112 (Local0, 0x02)
                M112 (Local0, One)
                M000 (0x0D87)
                HPOK = Zero
                Sleep (0x14)
                M201 = One
                Local6 = \_SB.ALIB (0x06, Local7)
                Local2 = Zero
                While ((Local2 < 0x0F))
                {
                    M023 (Zero, M091, M090)
                    Local4 = One
                    Local5 = 0xC8
                    While ((Local4 && Local5))
                    {
                        Local0 = M021 (Zero, M091, M090, 0xA5)
                        Local0 &= 0x7F
                        If (((Local0 >= 0x10) && (Local0 != 0x7F)))
                        {
                            Local4 = Zero
                        }
                        Else
                        {
                            Sleep (0x05)
                            Local5--
                        }
                    }

                    If (!Local4)
                    {
                        Local5 = M024 (Zero, M091, M090)
                        If (Local5)
                        {
                            M026 (Zero, M091, M090)
                            Sleep (0x05)
                            Local2++
                        }
                        Else
                        {
                            Local0 = Zero
                            If ((M025 (Zero, M091, M090, Zero) == Ones))
                            {
                                Local0 = One
                            }

                            If (Local0)
                            {
                                M111 (M049 (M133, 0x17), One)
                                M111 (M049 (M133, 0x18), One)
                                HPOK = One
                                Local2 = 0x10
                            }
                            Else
                            {
                                HPOK = Zero
                                Local2 = 0x10
                            }
                        }
                    }
                    Else
                    {
                        Local2 = 0x10
                    }
                }

                If (!HPOK)
                {
                    M000 (0x0D88)
                    Local1 = M019 (M095, M094, M093, Zero)
                    Sleep (0x0A)
                    Local4 = One
                    Local5 = 0x05
                    While ((Local4 && Local5))
                    {
                        Local0 = M021 (Zero, M091, M090, 0xA5)
                        Local0 &= 0x7F
                        If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                        {
                            Local4 = Zero
                        }
                        Else
                        {
                            Local0 = M019 (M095, M094, M093, Zero)
                            Sleep (0x05)
                            Local5--
                        }
                    }

                    M201 = Zero
                    \_SB.ALIB (0x06, Local7)
                }

                If ((M097 != Zero))
                {
                    Local0 = M019 (Zero, M091, M090, 0x54)
                    M020 (Zero, M091, M090, 0x54, (Local0 & 0xFFFF7FFC))
                    M232 (M097, Zero, 0x10)
                    M020 (Zero, M091, M090, 0x54, (Local0 & 0xFFFF7FFF))
                }

                M000 (0x0D89)
            }
            Else
            {
                M000 (0x0D8A)
                M201 = Zero
                \_SB.ALIB (0x06, Local7)
                M000 (0x0D8B)
                M111 (M049 (M133, 0x17), Zero)
                M111 (M049 (M133, 0x18), Zero)
                M112 (Local0, Zero)
                Sleep (0x0A)
                M111 (Local0, Zero)
                M023 (Zero, M091, M090)
                Local1 = M019 (M095, M094, M093, Zero)
                Sleep (0x0A)
                Local4 = One
                Local5 = 0x05
                While ((Local4 && Local5))
                {
                    Local0 = M021 (Zero, M091, M090, 0xA5)
                    Local0 &= 0x7F
                    If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                    {
                        Local4 = Zero
                    }
                    Else
                    {
                        Local1 = M019 (M095, M094, M093, Zero)
                        Sleep (0x05)
                        Local5--
                    }
                }

                HPOK = 0x02
                M000 (0x0D8C)
            }

            If (HPOK)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local1 = M019 (Zero, M091, M090, 0x54)
                M020 (Zero, M091, M090, 0x54, (Local1 & 0xFFFF7FFC))
                Local0 = M019 (M095, M094, M093, Zero)
                If (((HPOK == One) && (Local0 != Local5)))
                {
                    M020 (M095, M094, M093, 0x4C, M190)
                    Sleep (0x0A)
                    If ((M191 != Local5))
                    {
                        M020 (M095, M094, (M093 + One), 0x4C, M191)
                    }

                    Sleep (0x0A)
                }

                M020 (Zero, M091, M090, 0x54, (Local1 & 0xFFFF7FFF))
            }
        }

        Method (PX03, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M195)
            M157 = 0x04
            M195 = (Arg0 & One)
            If (M195)
            {
                M111 (M049 (M133, 0x17), One)
            }
            Else
            {
                M111 (M049 (M133, 0x17), Zero)
            }
        }

        Method (PX04, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M196)
            M157 = 0x04
            M196 = (Arg0 & One)
            If (M196)
            {
                M111 (M049 (M133, 0x18), One)
            }
            Else
            {
                M111 (M049 (M133, 0x18), Zero)
            }
        }

        Method (PX08, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M193)
            CreateWordField (M189, 0x02, M157)
            Local0 = M049 (M133, 0x19)
            M193 = Local0
            M157 = 0x05
            Local0 *= M157 /* \_SB_.PCI0.GP17.VGA_.PX08.M157 */
            Local1 = Zero
            While ((Local1 < Local0))
            {
                Local2 = M049 (M133, (0x1A + Local1))
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX09, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M193)
            CreateWordField (M189, 0x02, M157)
            Local0 = M049 (M133, 0x7E)
            M193 = Local0
            M157 = 0x03
            Local0 *= M157 /* \_SB_.PCI0.GP17.VGA_.PX09.M157 */
            Local1 = Zero
            While ((Local1 < Local0))
            {
                Local2 = M049 (M133, (0x7F + Local1))
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX10, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & One)
            \_SB.MACO = (Arg0 & One)
            M460 ("    Set _SB.MACO to %d\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        }

        Method (PX11, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M162)
            M157 = 0x03
            M162 = (Arg0 & One)
            Local2 = M162 /* \_SB_.PCI0.GP17.VGA_.PX11.M162 */
            Local0 = M131 /* External reference */
            If (Local0)
            {
                Local0 = M049 (M131, 0x10)
                Local1 = M049 (M131, 0x11)
                Local1 = (M084 + ((Local0 * 0x0100) + Local1))
                M012 (Local1, 0x0E, Zero, One, Local2)
            }
        }

        Method (PX12, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M162)
            M157 = 0x03
            Local0 = M049 (M133, 0x17)
            If ((Local0 != Zero))
            {
                M111 (Local0, (Arg0 & One))
            }

            M460 ("    Set Display Panel Reset to %d\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        }

        Name (ATIB, Buffer (0x0100){})
        Name (M291, 0x81)
        Method (ATIF, 2, Serialized)
        {
            M460 ("  FEA-ASL-ATIF Function %d\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            If ((Arg0 == Zero))
            {
                Return (AF00 ())
            }

            If ((Arg0 == One))
            {
                Return (AF01 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (AF02 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (AF03 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x04])))
            }

            If ((Arg0 == 0x04))
            {
                Return (AF04 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (AF15 ())
            }

            If ((Arg0 == 0x10))
            {
                Return (AF16 (DerefOf (Arg1 [0x02])))
            }

            If ((Arg0 == 0x15))
            {
                Return (AF21 ())
            }

            If ((Arg0 == 0x16))
            {
                Return (AF22 ())
            }

            If ((Arg0 == 0x17))
            {
                Return (AF23 ())
            }

            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M158)
            CreateDWordField (ATIB, 0x04, M159)
            CreateDWordField (ATIB, 0x08, M160)
            M157 = Zero
            M158 = Zero
            M159 = Zero
            M160 = Zero
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF00, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M158)
            CreateDWordField (ATIB, 0x04, M159)
            CreateDWordField (ATIB, 0x08, M160)
            M157 = 0x0C
            M158 = One
            M159 = M101 /* External reference */
            If (!CondRefOf (\_SB.LID._LID))
            {
                M102 &= 0xFFFFFFF7
            }

            M160 = M102 /* External reference */
            M460 ("    Return Supported Notifications Mask = 0x%X  Supported Functions Bit Vector = 0x%X\n", M159, M160, Zero, Zero, Zero, Zero)
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF01, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M161)
            CreateDWordField (ATIB, 0x06, M162)
            CreateByteField (ATIB, 0x0A, M163)
            M161 = 0x03
            Local0 = ((M103 >> 0x18) & 0xFF)
            Local1 = (M103 & 0x03)
            M162 = Local1
            If (((Local0 >= 0xD0) && (Local0 <= 0xD9)))
            {
                M157 = 0x0B
                M163 = Local0
                M291 = Local0
            }
            Else
            {
                M157 = 0x0A
                If ((M291 != 0x81))
                {
                    M291 = 0x81
                }
            }

            M460 ("    Return Flags = 0x%X  Notify Command Code = 0x%X\n", M162, M291, Zero, Zero, Zero, Zero)
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Name (M164, Buffer (0x04)
        {
             0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (M210, Zero)
        Name (M211, Zero)
        Name (M212, Zero)
        Name (M213, Zero)
        Name (M214, Zero)
        Name (M215, Zero)
        Name (M303, Zero)
        Name (M304, Zero)
        Name (SSDM, 0x0A)
        Name (SCDY, Zero)
        Method (AF02, 0, NotSerialized)
        {
            CreateBitField (M164, Zero, M165)
            CreateBitField (M164, One, M166)
            CreateBitField (M164, 0x02, M167)
            CreateBitField (M164, 0x03, M168)
            CreateBitField (M164, 0x04, M169)
            CreateBitField (M164, 0x05, M170)
            CreateBitField (M164, 0x06, M171)
            CreateBitField (M164, 0x07, M172)
            CreateBitField (M164, 0x08, M173)
            CreateBitField (M164, 0x0C, M300)
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M174)
            CreateByteField (ATIB, 0x06, M175)
            CreateByteField (ATIB, 0x07, M176)
            CreateByteField (ATIB, 0x08, M177)
            CreateByteField (ATIB, 0x09, M178)
            CreateByteField (ATIB, 0x0A, M179)
            CreateByteField (ATIB, 0x0B, M180)
            CreateByteField (ATIB, 0x0C, M181)
            CreateByteField (ATIB, 0x0D, M301)
            CreateDWordField (ATIB, 0x0E, M302)
            ATIB = Zero
            M157 = 0x12
            M174 = M164 /* \_SB_.PCI0.GP17.VGA_.M164 */
            If (M165)
            {
                M165 = Zero
            }

            If (M166)
            {
                M175 = M210 /* \_SB_.PCI0.GP17.VGA_.M210 */
                M210 = Zero
                M166 = Zero
            }

            If (M167)
            {
                M176 = M211 /* \_SB_.PCI0.GP17.VGA_.M211 */
                M177 = M212 /* \_SB_.PCI0.GP17.VGA_.M212 */
                M211 = Zero
                M212 = Zero
                M167 = Zero
            }

            If (M168)
            {
                M178 = M213 /* \_SB_.PCI0.GP17.VGA_.M213 */
                M179 = M214 /* \_SB_.PCI0.GP17.VGA_.M214 */
                M213 = Zero
                M214 = Zero
                M168 = Zero
            }

            If (M169)
            {
                M180 = M215 /* \_SB_.PCI0.GP17.VGA_.M215 */
                M169 = Zero
            }

            If (M171)
            {
                M171 = Zero
            }

            If (M172)
            {
                M172 = Zero
            }

            If (M173)
            {
                M173 = Zero
            }

            If (M300)
            {
                M301 = M303 /* \_SB_.PCI0.GP17.VGA_.M303 */
                M302 = M304 /* \_SB_.PCI0.GP17.VGA_.M304 */
                M303 = Zero
                M304 = Zero
                M300 = Zero
            }

            M460 ("    Return Pending System BIOS Requests                        = 0x%X\n", M174, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Expansion Mode                                      = 0x%X\n", M175, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Thermal State: Target Graphics Controller           = 0x%X\n", M176, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Thermal State: State Id                             = 0x%X\n", M177, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Forced Power State: Target Graphics Controller      = 0x%X\n", M178, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Forced Power State: State Id                        = 0x%X\n", M179, Zero, Zero, Zero, Zero, Zero)
            M460 ("           System Power Source                                 = 0x%X\n", M180, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Panel Brightness Backlight Level                    = 0x%X\n", M181, Zero, Zero, Zero, Zero, Zero)
            M460 ("           GPU Package Power Limit: Target Graphics Controller = 0x%X\n", M301, Zero, Zero, Zero, Zero, Zero)
            M460 ("           GPU Package Power Limit: Value                      = 0x%X\n", M302, Zero, Zero, Zero, Zero, Zero)
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF03, 2, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M182)
            CreateWordField (ATIB, 0x04, M183)
            M182 = Arg0
            M183 = Arg1
            Name (M184, 0x06)
            Name (M185, 0x06)
            Name (M186, Buffer (0x14)
            {
                 0x00                                             // .
            })
            Name (M187, Zero)
            M187 = M049 (M133, 0xBF)
            Local1 = Zero
            While ((Local1 < M187))
            {
                Local2 = M049 (M133, (0xC0 + Local1))
                M186 [Local1] = Local2
                Local1++
            }

            Local1 = M182 /* \_SB_.PCI0.GP17.VGA_.AF03.M182 */
            Local1 &= 0x8B
            Local2 = M183 /* \_SB_.PCI0.GP17.VGA_.AF03.M183 */
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID ()
                Local2 &= 0xFFFFFFFFFFFFFFFE
                Local2 |= Local0
            }

            Local0 = Zero
            While ((Local0 < M187))
            {
                Local3 = DerefOf (M186 [Local0])
                If ((Local3 == Local1))
                {
                    M185 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GP17.VGA_.AF03.M187 */
                }
                Else
                {
                    Local0++
                }
            }

            Local0 = M185 /* \_SB_.PCI0.GP17.VGA_.AF03.M185 */
            While ((Local0 < M187))
            {
                Local0++
                If ((Local0 == M187))
                {
                    Local0 = Zero
                }

                Local3 = DerefOf (M186 [Local0])
                If (((Local3 & Local2) == Local3))
                {
                    M184 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GP17.VGA_.AF03.M187 */
                }
            }

            If ((M184 == M187))
            {
                M182 = Zero
            }
            Else
            {
                Local0 = M184 /* \_SB_.PCI0.GP17.VGA_.AF03.M184 */
                Local3 = DerefOf (M186 [Local0])
                M182 &= 0xFFFFFFFFFFFFFFF4
                M182 |= Local3
            }

            M157 = 0x04
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF04, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateByteField (ATIB, 0x02, M188)
            M157 = 0x03
            Local1 = Zero
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID ()
                Local1 = (Local0 ^ One)
            }

            M188 = Local1
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF15, 0, NotSerialized)
        {
            ATIB = M104 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF16, 1, NotSerialized)
        {
            Local0 = M04A (M133, 0xD4)
            If ((Local0 != Zero))
            {
                Local1 = Zero
                While ((Local1 < Local0))
                {
                    Local2 = M049 (M133, (0xD4 + Local1))
                    ATIB [Local1] = Local2
                    Local1++
                }
            }
            Else
            {
                Local3 = M043 (Zero, Arg0, Zero)
                If ((ObjectType (Local3) == 0x03))
                {
                    ATIB = Local3
                }
                Else
                {
                    ATIB [Zero] = 0x05
                    ATIB [One] = Zero
                    ATIB [0x02] = Zero
                    ATIB [0x03] = Zero
                    ATIB [0x04] = 0x02
                }
            }

            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M162)
            CreateByteField (ATIB, 0x04, M292)
            CreateByteField (ATIB, 0x05, M293)
            CreateByteField (ATIB, 0x06, M294)
            CreateByteField (ATIB, 0x07, M295)
            CreateByteField (ATIB, 0x08, M296)
            CreateByteField (ATIB, 0x09, M297)
            M460 ("    Return Structure Size         = 0x%X\n", M157, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Flags                  = 0x%X\n", M162, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Error Code             = 0x%X\n", M292, Zero, Zero, Zero, Zero, Zero)
            If ((M157 > 0x05))
            {
                M460 ("           AC Level               = 0x%X\n", M293, Zero, Zero, Zero, Zero, Zero)
                M460 ("           DC Level               = 0x%X\n", M294, Zero, Zero, Zero, Zero, Zero)
                M460 ("           Min Input Signal Level = 0x%X\n", M295, Zero, Zero, Zero, Zero, Zero)
                M460 ("           Max Input Signal Level = 0x%X\n", M296, Zero, Zero, Zero, Zero, Zero)
                M460 ("           Count                  = %d\n", M297, Zero, Zero, Zero, Zero, Zero)
                If ((M157 > 0x0A))
                {
                    Local1 = 0x0A
                    While ((Local1 < M157))
                    {
                        Local2 = DerefOf (ATIB [Local1])
                        Local1++
                        Local3 = DerefOf (ATIB [Local1])
                        Local1++
                        Local4 = ((Local1 - 0x0A) >> One)
                        M460 ("           Count[%d]  Luminance Level = 0x%X  Signal Level = %d\n", Local4, Local2, Local3, Zero, Zero, Zero)
                    }
                }
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF21, 0, NotSerialized)
        {
            ATIB = M29A /* External reference */
            CreateWordField (ATIB, Zero, M297)
            CreateWordField (ATIB, 0x02, M157)
            M460 ("    Return Num Devices            = 0x%X\n", M297, Zero, Zero, Zero, Zero, Zero)
            M460 ("    Return Device Structure size  = 0x%X\n", M157, Zero, Zero, Zero, Zero, Zero)
            Local0 = Zero
            If (((M297 > Zero) && (M297 < 0x04)))
            {
                While ((Local0 < M297))
                {
                    Local1 = ((Local0 << 0x02) + 0x04)
                    Local2 = (Local1 + 0x02)
                    Local3 = DerefOf (ATIB [Local1])
                    Local4 = DerefOf (ATIB [Local2])
                    M460 ("    Return Device Structure [%d] Flags              = 0x%X\n", Local0, Local3, Zero, Zero, Zero, Zero)
                    M460 ("    Return Device Structure [%d] Bus                = 0x%X\n", Local0, Local4, Zero, Zero, Zero, Zero)
                    Local0++
                }
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF22, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateByteField (ATIB, 0x02, M298)
            CreateDWordField (ATIB, 0x03, M299)
            Local0 = M049 (M133, 0x01F9)
            If ((Local0 >= One))
            {
                M157 = 0x07
                Local0--
                M298 = Local0
                M299 = M04B (M133, 0x01FA)
            }
            Else
            {
                M157 = Zero
                M298 = Zero
                M299 = Zero
            }

            M460 ("    Return Structure Size         = 0x%X\n", M157, Zero, Zero, Zero, Zero, Zero)
            M460 ("           GPU Package Power Limit: Target Graphics Controller = %d\n", M298, Zero, Zero, Zero, Zero, Zero)
            M460 ("           GPU Package Power Limit: Value                      = 0x%X\n", M299, Zero, Zero, Zero, Zero, Zero)
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF23, 0, NotSerialized)
        {
            ATIB = M449 /* External reference */
            CreateWordField (ATIB, Zero, M157)
            CreateByteField (ATIB, 0x02, M305)
            CreateByteField (ATIB, 0x03, M306)
            CreateByteField (ATIB, 0x04, M307)
            CreateByteField (ATIB, 0x05, M308)
            CreateByteField (ATIB, 0x06, M309)
            CreateByteField (ATIB, 0x07, M30A)
            CreateByteField (ATIB, 0x08, M30B)
            M460 ("    Return Structure Size               = %d\n", M157, Zero, Zero, Zero, Zero, Zero)
            If ((M157 >= 0x02))
            {
                M460 ("           AC Maximum Performance Limit = %d\n", M305, Zero, Zero, Zero, Zero, Zero)
                M460 ("           AC Better Performance Limit  = %d\n", M306, Zero, Zero, Zero, Zero, Zero)
                M460 ("           AC Better Battery Limit      = %d\n", M307, Zero, Zero, Zero, Zero, Zero)
                M460 ("           DC Maximum Performance Limit = %d\n", M308, Zero, Zero, Zero, Zero, Zero)
                M460 ("           DC Better Performance Limit  = %d\n", M309, Zero, Zero, Zero, Zero, Zero)
                M460 ("           DC Better Battery Limit      = %d\n", M30A, Zero, Zero, Zero, Zero, Zero)
                M460 ("           DC Battery Saver Limit       = %d\n", M30B, Zero, Zero, Zero, Zero, Zero)
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AFN0, 0, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN0  Supported Notification Mask = 0x%X\n", M101, Zero, Zero, Zero, Zero, Zero)
            If ((M101 & One))
            {
                CreateBitField (M164, Zero, M165)
                M165 = One
                M460 ("    Notify (VGA, 0x%X)\n", M291, Zero, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN1, 1, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN1  Supported Notification Mask = 0x%X  Save Expansion Mode = 0x%X\n", M101, Arg0, Zero, Zero, Zero, Zero)
            If ((M101 & 0x02))
            {
                Local0 = Arg0
                M210 = Local0
                CreateBitField (M164, One, M166)
                M166 = One
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN2, 2, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN2  Supported Notification Mask = 0x%X  Thermal State: State Id = 0x%X  Target Graphics Controller = 0x%X\n", M101, Arg0, Arg1, Zero, Zero, Zero)
            If ((M101 & 0x04))
            {
                Local0 = Arg0
                M212 = Local0
                Local0 = Arg1
                M211 = Local0 &= 0x03
                CreateBitField (M164, 0x02, M167)
                M167 = One
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN3, 2, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN3  Supported Notification Mask = 0x%X  Forced Power State: State Id = 0x%X  Target Graphics Controller = 0x%X\n", M101, Arg0, Arg1, Zero, Zero, Zero)
            If ((M101 & 0x08))
            {
                Local0 = Arg0
                M214 = Local0
                Local0 = Arg1
                M213 = Local0 &= 0x03
                CreateBitField (M164, 0x03, M168)
                M168 = One
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN4, 1, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN4  Supported Notification Mask = 0x%X  System Power Source = 0x%X\n", M101, Arg0, Zero, Zero, Zero, Zero)
            If ((M101 & 0x10))
            {
                Local0 = Arg0
                Local1 = M215 /* \_SB_.PCI0.GP17.VGA_.M215 */
                M215 = Local0
                If ((Local0 != Local1))
                {
                    CreateBitField (M164, 0x04, M169)
                    M169 = One
                    M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                    Notify (VGA, M291)
                }
            }
        }

        Method (AFN5, 0, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN5  Supported Notification Mask = 0x%X\n", M101, Zero, Zero, Zero, Zero, Zero)
            If ((M101 & 0x20))
            {
                CreateBitField (M164, 0x05, M170)
                M170 = One
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN6, 0, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN6  Supported Notification Mask = 0x%X\n", M101, Zero, Zero, Zero, Zero, Zero)
            If ((M101 & 0x40))
            {
                CreateBitField (M164, 0x06, M171)
                M171 = One
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN7, 1, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN7  Supported Notification Mask = 0x%X  Panel Brightness: Backlight Level = 0x%X\n", M101, Arg0, Zero, Zero, Zero, Zero)
            If ((M101 & 0x80))
            {
                CreateBitField (M164, 0x07, M172)
                M172 = One
                CreateByteField (ATIB, 0x0C, M181)
                M181 = Arg0
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN8, 0, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN8  Supported Notification Mask = 0x%X\n", M101, Zero, Zero, Zero, Zero, Zero)
            If ((M101 & 0x0100))
            {
                CreateBitField (M164, 0x08, M173)
                M173 = One
            }
        }

        Method (AFNC, 2, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFNC  Supported Notification Mask = 0x%X  Power Limit: Target Graphics Controller = 0x%X  Value = 0x%X\n", M101, Arg0, Arg1, Zero, Zero, Zero)
            If ((M101 & 0x1000))
            {
                Local0 = (Arg0 & 0x03)
                M303 = Local0
                Local0 = (Arg1 & 0xFFFFFFFF)
                M304 = Local0
                CreateBitField (M164, 0x0C, M300)
                M300 = One
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }
    }
}



SSDT14
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.GZFD.HTPE, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.PEGP, DeviceObj)
    External (_SB_.PCI0.LPC0.EC0_.REJF, MethodObj)    // 1 Arguments
    External (_SB_.UBTC, DeviceObj)
    External (DSMF, FieldUnitObj)
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M31D, MethodObj)    // 0 Arguments
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)

    Scope (\_SB.GPIO)
    {
        Method (_AEI, 0, NotSerialized)  // _AEI: ACPI Event Interrupts
        {
            Name (BUFF, ResourceTemplate ()
            {
                GpioInt (Edge, ActiveBoth, ExclusiveAndWake, PullDefault, 0x01F4,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0004
                    }
                GpioInt (Edge, ActiveLow, ExclusiveAndWake, PullDefault, 0x01F4,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0002
                    }
            })
            Return (BUFF) /* \_SB_.GPIO._AEI.BUFF */
        }

        Method (_EVT, 1, Serialized)  // _EVT: Event
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x0A)
                {
                    M31D ()
                    Notify (\_SB.UBTC, 0x80) // Status Change
                }
                Case (0x04)
                {
                    If (CondRefOf (\_SB.PCI0.GPP0.PEGP))
                    {
                        If (((DSMF == 0x03) || (DSMF == 0x04)))
                        {
                            If ((\_SB.PCI0.LPC0.EC0.REJF (0x03) == One))
                            {
                                \_SB.GZFD.HTPE ()
                            }
                        }

                        Notify (\_SB.PCI0.GPP0.PEGP, 0x81) // Information Change
                    }
                }

            }
        }
    }
}



SSDT15
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.PLTF.C000, DeviceObj)
    External (_SB_.PLTF.C001, DeviceObj)
    External (_SB_.PLTF.C002, DeviceObj)
    External (_SB_.PLTF.C003, DeviceObj)
    External (_SB_.PLTF.C004, DeviceObj)
    External (_SB_.PLTF.C005, DeviceObj)
    External (_SB_.PLTF.C006, DeviceObj)
    External (_SB_.PLTF.C007, DeviceObj)
    External (_SB_.PLTF.C008, DeviceObj)
    External (_SB_.PLTF.C009, DeviceObj)
    External (_SB_.PLTF.C00A, DeviceObj)
    External (_SB_.PLTF.C00B, DeviceObj)
    External (_SB_.PLTF.C00C, DeviceObj)
    External (_SB_.PLTF.C00D, DeviceObj)
    External (_SB_.PLTF.C00E, DeviceObj)
    External (_SB_.PLTF.C00F, DeviceObj)
    External (_SB_.PLTF.C010, DeviceObj)
    External (_SB_.PLTF.C011, DeviceObj)
    External (_SB_.PLTF.C012, DeviceObj)
    External (_SB_.PLTF.C013, DeviceObj)
    External (_SB_.PLTF.C014, DeviceObj)
    External (_SB_.PLTF.C015, DeviceObj)
    External (_SB_.PLTF.C016, DeviceObj)
    External (_SB_.PLTF.C017, DeviceObj)
    External (_SB_.PLTF.C018, DeviceObj)
    External (_SB_.PLTF.C019, DeviceObj)
    External (_SB_.PLTF.C01A, DeviceObj)
    External (_SB_.PLTF.C01B, DeviceObj)
    External (_SB_.PLTF.C01C, DeviceObj)
    External (_SB_.PLTF.C01D, DeviceObj)
    External (_SB_.PLTF.C01E, DeviceObj)
    External (_SB_.PLTF.C01F, DeviceObj)

    Scope (\_SB.PLTF.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C000.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x000009C5
        })
    }

    Scope (\_SB.PLTF.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C001.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x000009C5
        })
    }

    Scope (\_SB.PLTF.C002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C002.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x000009C5
        })
    }

    Scope (\_SB.PLTF.C003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C003.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x000009C5
        })
    }

    Scope (\_SB.PLTF.C004)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C004.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x000009C5
        })
    }

    Scope (\_SB.PLTF.C005)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C005.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x000009C5
        })
    }

    Scope (\_SB.PLTF.C006)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C006.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x000009C5
        })
    }

    Scope (\_SB.PLTF.C007)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C007.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x000009C5
        })
    }

    Scope (\_SB.PLTF.C008)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C008.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x000009C5
        })
    }

    Scope (\_SB.PLTF.C009)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C009.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x000009C5
        })
    }

    Scope (\_SB.PLTF.C00A)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00A.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x000009C5
        })
    }

    Scope (\_SB.PLTF.C00B)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00B.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x000009C5
        })
    }

    Scope (\_SB.PLTF.C00C)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00C.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x000009C5
        })
    }

    Scope (\_SB.PLTF.C00D)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00D.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x000009C5
        })
    }

    Scope (\_SB.PLTF.C00E)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00E.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x000009C5
        })
    }

    Scope (\_SB.PLTF.C00F)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00F.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x000009C5
        })
    }

    Scope (\_SB.PLTF.C010)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000008, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C010.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000008, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x000009C5
        })
    }

    Scope (\_SB.PLTF.C011)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000008, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C011.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000008, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x000009C5
        })
    }

    Scope (\_SB.PLTF.C012)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000009, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C012.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000009, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x000009C5
        })
    }

    Scope (\_SB.PLTF.C013)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000009, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C013.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000009, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x000009C5
        })
    }

    Scope (\_SB.PLTF.C014)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000A, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C014.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000A, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x000009C5
        })
    }

    Scope (\_SB.PLTF.C015)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000A, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C015.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000A, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x000009C5
        })
    }

    Scope (\_SB.PLTF.C016)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000B, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C016.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000B, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x000009C5
        })
    }

    Scope (\_SB.PLTF.C017)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000B, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C017.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000B, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x000009C5
        })
    }

    Scope (\_SB.PLTF.C018)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000C, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C018.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000C, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x000009C5
        })
    }

    Scope (\_SB.PLTF.C019)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000C, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C019.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000C, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x000009C5
        })
    }

    Scope (\_SB.PLTF.C01A)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000D, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C01A.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000D, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x000009C5
        })
    }

    Scope (\_SB.PLTF.C01B)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000D, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C01B.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000D, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x000009C5
        })
    }

    Scope (\_SB.PLTF.C01C)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000E, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C01C.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000E, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x000009C5
        })
    }

    Scope (\_SB.PLTF.C01D)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000E, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C01D.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000E, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x000009C5
        })
    }

    Scope (\_SB.PLTF.C01E)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000F, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C01E.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000F, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x000009C5
        })
    }

    Scope (\_SB.PLTF.C01F)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x02)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }
        })
        Name (XPSS, Package (0x02)
        {
            Package (0x08)
            {
                0x000009C4, 
                0x00000C35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000005DC, 
                0x000004FB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000F, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C01F.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000F, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x000009C5
        })
    }

    Method (NFPC, 0, NotSerialized)
    {
        Notify (\_SB.PLTF.C000, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C001, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C002, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C003, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C004, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C005, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C006, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C007, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C008, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C009, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00A, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00B, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00C, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00D, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00E, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00F, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C010, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C011, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C012, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C013, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C014, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C015, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C016, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C017, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C018, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C019, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C01A, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C01B, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C01C, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C01D, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C01E, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C01F, 0x85) // Device-Specific
    }
}



SSDT16
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (OBID, PkgObj)
    External (OBIE, PkgObj)
    External (OBIT, PkgObj)

    Name (OBID, Package (0xC1)
    {
        0x40, 
        0x00040001, 
        0x00040002, 
        0x00020027, 
        0x00020001, 
        0x00020002, 
        0x00020006, 
        0x00020005, 
        0x00020009, 
        0x00020010, 
        0x0002000B, 
        0x00020015, 
        0x0002000F, 
        0x0002000E, 
        0x0002000D, 
        0x00020012, 
        0x00020011, 
        0x00020017, 
        0x00020016, 
        0x00020018, 
        0x00020019, 
        0x0002001B, 
        0x0002001A, 
        0x0002001C, 
        0x0002001D, 
        0x0002001F, 
        0x0002001E, 
        0x0002002D, 
        0x00020007, 
        0x00020023, 
        0x00020024, 
        0x00020025, 
        0x00020036, 
        0x00020033, 
        0x00020035, 
        0x00030001, 
        0x00020031, 
        0x00020032, 
        0x00020034, 
        0x00020030, 
        0x00020038, 
        0x0002003A, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        One, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        Zero, 
        One, 
        One, 
        Zero, 
        One, 
        Zero, 
        Zero, 
        One, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        "Command Buffer Start", 
        "Command Buffer End", 
        "Software Downcore Config", 
        "Set Mem Clock", 
        "Set Tcl", 
        "Set Trp", 
        "Set Tras", 
        "Set Trc", 
        "Set Twr", 
        "Set Trfc2", 
        "Set Trtp", 
        "Set TrrdL", 
        "Set TrrdS", 
        "Set Tfaw", 
        "Set TwtrL", 
        "Set TwtrS", 
        "Set TrdrdScL", 
        "Set TrdrdSc", 
        "Set TrdrdSd", 
        "Set TrdrdDd", 
        "Set TwrwrScL", 
        "Set TwrwrSc", 
        "Set TwrwrSd", 
        "Set TwrwrDd", 
        "Set Twrrd", 
        "Set Trdwr", 
        "Set CadBusAddrCmdDrvStren", 
        "Set ProcODT", 
        "Set RttWr", 
        "Set RttPark", 
        "Set PowerDwonEn", 
        "Set CCLK Fmax", 
        "Set FCLK OC Mode", 
        "Set FCLK Frequency", 
        "Set VDDIO", 
        "Set Interleave Mode", 
        "Set Interleave Size", 
        "Set SOC VID", 
        "Set CLDO_VDDP", 
        "Set CLDO VDDG", 
        "Set ECO Mode", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        ""
    })
    Name (OBIE, Package (0xC1)
    {
        0x40, 
        0x00010003, 
        0x00010004, 
        0x00010005, 
        0x00010006, 
        0x00010007, 
        0x00010008, 
        0x0005000A, 
        0x00050010, 
        0x0002003B, 
        0x0002003C, 
        0x0002003D, 
        0x00020041, 
        0x00020042, 
        0x0002003E, 
        0x0002003F, 
        0x00020040, 
        0x00050001, 
        0x00050002, 
        0x00050003, 
        0x00050004, 
        0x00030007, 
        0x00030003, 
        0x00030004, 
        0x00020043, 
        0x00030006, 
        0x0005000B, 
        0x00020044, 
        0x00020048, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        "Get OC Disable", 
        "Get OC Voltage Max", 
        "Get OC Frequency Max", 
        "Get GFX OC Voltage Max", 
        "Get GFX OC Frequency Max", 
        "Get Interlevaing Cap", 
        "Set Curve Optimizer", 
        "Set GFX Curve Optimizer", 
        "Set Trcd", 
        "Set Trfc1", 
        "Set TrfcSb", 
        "Set ProcDataDriveStrength", 
        "Set DRAMDataDriveStrength", 
        "Set RttNomWr", 
        "Set RttNomRd", 
        "Set RttParkDqs", 
        "Set PPT Limit", 
        "Set TDC Limit", 
        "Set EDC Limit", 
        "Set Scalar", 
        "Set DIMM VDDQ", 
        "Set VPP", 
        "Set APU VDDIO", 
        "Set LCLK Freq", 
        "Set VDD_MISC", 
        "Set VDDG IOD", 
        "Set UCLK DIV1", 
        "Reset Mem Para", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        ""
    })
    Name (OBIT, Package (0x44)
    {
        0x43, 
        Package (0x04)
        {
            0x0002003A, 
            Zero, 
            0x44, 
            Buffer (0x019C)
            {
                /* 0000 */  0x3A, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // :.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020048, 
            Zero, 
            0x43, 
            Buffer (0x019C)
            {
                /* 0000 */  0x48, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // H.......
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00   // ........
            }
        }, 

        Package (0x04)
        {
            0x00020044, 
            Zero, 
            0x42, 
            Buffer (0x019C)
            {
                /* 0000 */  0x44, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // D.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0005000B, 
            One, 
            0x41, 
            Buffer (0x14)
            {
                /* 0000 */  0x0B, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x8A, 0x02, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  // ....r...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020038, 
            One, 
            0x40, 
            Buffer (0x14)
            {
                /* 0000 */  0x38, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                /* 0008 */  0x8A, 0x02, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  // ....r...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00030006, 
            One, 
            0x3F, 
            Buffer (0x14)
            {
                /* 0000 */  0x06, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x4C, 0x04, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  // L...r...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020043, 
            One, 
            0x3E, 
            Buffer (0x14)
            {
                /* 0000 */  0x43, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // C.......
                /* 0008 */  0x05, 0x04, 0x00, 0x00, 0xC4, 0x09, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020030, 
            One, 
            0x3D, 
            Buffer (0x14)
            {
                /* 0000 */  0x30, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 0.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x14, 0x05, 0x00, 0x00,  // ........
                /* 0010 */  0x05, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020034, 
            One, 
            0x3C, 
            Buffer (0x14)
            {
                /* 0000 */  0x34, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 4.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xC3, 0x01, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020032, 
            One, 
            0x3B, 
            Buffer (0x14)
            {
                /* 0000 */  0x32, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 2.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020031, 
            Zero, 
            0x3A, 
            Buffer (0x019C)
            {
                /* 0000 */  0x31, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 1.......
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            }
        }, 

        Package (0x04)
        {
            0x00030004, 
            One, 
            0x39, 
            Buffer (0x14)
            {
                /* 0000 */  0x04, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0xBC, 0x02, 0x00, 0x00, 0x6C, 0x0A, 0x00, 0x00,  // ....l...
                /* 0010 */  0x02, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00030003, 
            One, 
            0x38, 
            Buffer (0x14)
            {
                /* 0000 */  0x03, 0x00, 0x03, 0x00, 0x08, 0x07, 0x00, 0x00,  // ........
                /* 0008 */  0xDC, 0x05, 0x00, 0x00, 0x52, 0x08, 0x00, 0x00,  // ....R...
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00030007, 
            One, 
            0x37, 
            Buffer (0x14)
            {
                /* 0000 */  0x07, 0x00, 0x03, 0x00, 0x4C, 0x04, 0x00, 0x00,  // ....L...
                /* 0008 */  0x20, 0x03, 0x00, 0x00, 0x96, 0x05, 0x00, 0x00,  //  .......
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00030001, 
            One, 
            0x36, 
            Buffer (0x14)
            {
                /* 0000 */  0x01, 0x00, 0x03, 0x00, 0x4C, 0x04, 0x00, 0x00,  // ....L...
                /* 0008 */  0x20, 0x03, 0x00, 0x00, 0x96, 0x05, 0x00, 0x00,  //  .......
                /* 0010 */  0x0A, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020035, 
            Zero, 
            0x35, 
            Buffer (0x019C)
            {
                /* 0000 */  0x35, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 5.......
                /* 0008 */  0x34, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,  // 4...d...
                /* 0010 */  0xC8, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00,  // ........
                /* 0018 */  0xF4, 0x01, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00,  // .... ...
                /* 0020 */  0xA5, 0x03, 0x00, 0x00, 0x4C, 0x04, 0x00, 0x00,  // ....L...
                /* 0028 */  0x60, 0x04, 0x00, 0x00, 0x77, 0x04, 0x00, 0x00,  // `...w...
                /* 0030 */  0xB0, 0x04, 0x00, 0x00, 0xE2, 0x04, 0x00, 0x00,  // ........
                /* 0038 */  0xE9, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,  // ........
                /* 0040 */  0x14, 0x05, 0x00, 0x00, 0x28, 0x05, 0x00, 0x00,  // ....(...
                /* 0048 */  0x35, 0x05, 0x00, 0x00, 0x5B, 0x05, 0x00, 0x00,  // 5...[...
                /* 0050 */  0x78, 0x05, 0x00, 0x00, 0xA0, 0x05, 0x00, 0x00,  // x.......
                /* 0058 */  0xBB, 0x05, 0x00, 0x00, 0xCD, 0x05, 0x00, 0x00,  // ........
                /* 0060 */  0xDC, 0x05, 0x00, 0x00, 0x18, 0x06, 0x00, 0x00,  // ........
                /* 0068 */  0x40, 0x06, 0x00, 0x00, 0x72, 0x06, 0x00, 0x00,  // @...r...
                /* 0070 */  0x90, 0x06, 0x00, 0x00, 0xC5, 0x06, 0x00, 0x00,  // ........
                /* 0078 */  0xD6, 0x06, 0x00, 0x00, 0xE0, 0x06, 0x00, 0x00,  // ........
                /* 0080 */  0x08, 0x07, 0x00, 0x00, 0xD0, 0x07, 0x00, 0x00,  // ........
                /* 0088 */  0xF1, 0x07, 0x00, 0x00, 0x13, 0x08, 0x00, 0x00,  // ........
                /* 0090 */  0x34, 0x08, 0x00, 0x00, 0x55, 0x08, 0x00, 0x00,  // 4...U...
                /* 0098 */  0x77, 0x08, 0x00, 0x00, 0x98, 0x08, 0x00, 0x00,  // w.......
                /* 00A0 */  0xB9, 0x08, 0x00, 0x00, 0xDB, 0x08, 0x00, 0x00,  // ........
                /* 00A8 */  0x60, 0x09, 0x00, 0x00, 0x81, 0x09, 0x00, 0x00,  // `.......
                /* 00B0 */  0xA3, 0x09, 0x00, 0x00, 0xC4, 0x09, 0x00, 0x00,  // ........
                /* 00B8 */  0xF6, 0x09, 0x00, 0x00, 0x28, 0x0A, 0x00, 0x00,  // ....(...
                /* 00C0 */  0x8C, 0x0A, 0x00, 0x00, 0xBE, 0x0A, 0x00, 0x00,  // ........
                /* 00C8 */  0xF0, 0x0A, 0x00, 0x00, 0x22, 0x0B, 0x00, 0x00,  // ...."...
                /* 00D0 */  0x54, 0x0B, 0x00, 0x00, 0x86, 0x0B, 0x00, 0x00,  // T.......
                /* 00D8 */  0xB8, 0x0B, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020033, 
            Zero, 
            0x34, 
            Buffer (0x019C)
            {
                /* 0000 */  0x33, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 3.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020036, 
            One, 
            0x33, 
            Buffer (0x14)
            {
                /* 0000 */  0x36, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 6.......
                /* 0008 */  0x62, 0x11, 0x00, 0x00, 0x12, 0x16, 0x00, 0x00,  // b.......
                /* 0010 */  0x19, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050004, 
            One, 
            0x32, 
            Buffer (0x14)
            {
                /* 0000 */  0x04, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00,  // ........
                /* 0010 */  0x64, 0x00, 0x00, 0x00                           // d...
            }
        }, 

        Package (0x04)
        {
            0x00050003, 
            One, 
            0x31, 
            Buffer (0x14)
            {
                /* 0000 */  0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x80, 0xAF, 0x02, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050002, 
            One, 
            0x30, 
            Buffer (0x14)
            {
                /* 0000 */  0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x48, 0xE8, 0x01, 0x00,  // ....H...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050001, 
            One, 
            0x2F, 
            Buffer (0x14)
            {
                /* 0000 */  0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xA7, 0x02, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020025, 
            Zero, 
            0x2E, 
            Buffer (0x019C)
            {
                /* 0000 */  0x25, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // %.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020040, 
            One, 
            0x2D, 
            Buffer (0x14)
            {
                /* 0000 */  0x40, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00,  // @.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020024, 
            One, 
            0x2C, 
            Buffer (0x14)
            {
                /* 0000 */  0x24, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00,  // $.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020023, 
            One, 
            0x2B, 
            Buffer (0x14)
            {
                /* 0000 */  0x23, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00,  // #.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003F, 
            One, 
            0x2A, 
            Buffer (0x14)
            {
                /* 0000 */  0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ?.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003E, 
            One, 
            0x29, 
            Buffer (0x14)
            {
                /* 0000 */  0x3E, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // >.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020042, 
            Zero, 
            0x28, 
            Buffer (0x019C)
            {
                /* 0000 */  0x42, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // B.......
                /* 0008 */  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00   // ........
            }
        }, 

        Package (0x04)
        {
            0x00020007, 
            Zero, 
            0x27, 
            Buffer (0x019C)
            {
                /* 0000 */  0x07, 0x00, 0x02, 0x00, 0x0C, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                /* 0020 */  0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                /* 0028 */  0x07, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,  // ........
                /* 0030 */  0x0D, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00,  // ........
                /* 0038 */  0x0F, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00,  // ........
                /* 0040 */  0x1D, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,  // ........
                /* 0048 */  0x1F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00,  // ....<...
                /* 0050 */  0x3D, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00,  // =...>...
                /* 0058 */  0x3F, 0x00, 0x00, 0x00                           // ?...
            }
        }, 

        Package (0x04)
        {
            0x00020041, 
            Zero, 
            0x26, 
            Buffer (0x019C)
            {
                /* 0000 */  0x41, 0x00, 0x02, 0x00, 0x1C, 0x00, 0x00, 0x00,  // A.......
                /* 0008 */  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x06, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,  // ........
                /* 0020 */  0x0E, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00,  // ........
                /* 0028 */  0x1E, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002002D, 
            Zero, 
            0x25, 
            Buffer (0x019C)
            {
                /* 0000 */  0x2D, 0x00, 0x02, 0x00, 0x1E, 0x00, 0x00, 0x00,  // -.......
                /* 0008 */  0x04, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x28, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00,  // (...<...
                /* 0018 */  0x78, 0x00, 0x00, 0x00                           // x...
            }
        }, 

        Package (0x04)
        {
            0x0002001E, 
            One, 
            0x24, 
            Buffer (0x14)
            {
                /* 0000 */  0x1E, 0x00, 0x02, 0x00, 0x12, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001F, 
            One, 
            0x23, 
            Buffer (0x14)
            {
                /* 0000 */  0x1F, 0x00, 0x02, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001D, 
            One, 
            0x22, 
            Buffer (0x14)
            {
                /* 0000 */  0x1D, 0x00, 0x02, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001C, 
            One, 
            0x21, 
            Buffer (0x14)
            {
                /* 0000 */  0x1C, 0x00, 0x02, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001A, 
            One, 
            0x20, 
            Buffer (0x14)
            {
                /* 0000 */  0x1A, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001B, 
            One, 
            0x1F, 
            Buffer (0x14)
            {
                /* 0000 */  0x1B, 0x00, 0x02, 0x00, 0x13, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00,  // ....?...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020019, 
            One, 
            0x1E, 
            Buffer (0x14)
            {
                /* 0000 */  0x19, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020018, 
            One, 
            0x1D, 
            Buffer (0x14)
            {
                /* 0000 */  0x18, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020016, 
            One, 
            0x1C, 
            Buffer (0x14)
            {
                /* 0000 */  0x16, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020017, 
            One, 
            0x1B, 
            Buffer (0x14)
            {
                /* 0000 */  0x17, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020011, 
            One, 
            0x1A, 
            Buffer (0x14)
            {
                /* 0000 */  0x11, 0x00, 0x02, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020012, 
            One, 
            0x19, 
            Buffer (0x14)
            {
                /* 0000 */  0x12, 0x00, 0x02, 0x00, 0x1A, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x08, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,  // ....0...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000D, 
            One, 
            0x18, 
            Buffer (0x14)
            {
                /* 0000 */  0x0D, 0x00, 0x02, 0x00, 0x28, 0x00, 0x00, 0x00,  // ....(...
                /* 0008 */  0x14, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,  // ....P...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000E, 
            One, 
            0x17, 
            Buffer (0x14)
            {
                /* 0000 */  0x0E, 0x00, 0x02, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x04, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000F, 
            One, 
            0x16, 
            Buffer (0x14)
            {
                /* 0000 */  0x0F, 0x00, 0x02, 0x00, 0x0D, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x04, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,  // .... ...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020015, 
            One, 
            0x15, 
            Buffer (0x14)
            {
                /* 0000 */  0x15, 0x00, 0x02, 0x00, 0x14, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x05, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003D, 
            One, 
            0x14, 
            Buffer (0x14)
            {
                /* 0000 */  0x3D, 0x00, 0x02, 0x00, 0x52, 0x01, 0x00, 0x00,  // =...R...
                /* 0008 */  0x32, 0x00, 0x00, 0x00, 0xFF, 0x07, 0x00, 0x00,  // 2.......
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000B, 
            One, 
            0x13, 
            Buffer (0x14)
            {
                /* 0000 */  0x0B, 0x00, 0x02, 0x00, 0xA0, 0x01, 0x00, 0x00,  // ........
                /* 0008 */  0x32, 0x00, 0x00, 0x00, 0xFF, 0x0F, 0x00, 0x00,  // 2.......
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003C, 
            One, 
            0x12, 
            Buffer (0x14)
            {
                /* 0000 */  0x3C, 0x00, 0x02, 0x00, 0xFE, 0x02, 0x00, 0x00,  // <.......
                /* 0008 */  0x32, 0x00, 0x00, 0x00, 0xFF, 0x0F, 0x00, 0x00,  // 2.......
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020010, 
            One, 
            0x11, 
            Buffer (0x14)
            {
                /* 0000 */  0x10, 0x00, 0x02, 0x00, 0x4E, 0x00, 0x00, 0x00,  // ....N...
                /* 0008 */  0x30, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,  // 0...`...
                /* 0010 */  0x06, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020009, 
            One, 
            0x10, 
            Buffer (0x14)
            {
                /* 0000 */  0x09, 0x00, 0x02, 0x00, 0x7D, 0x00, 0x00, 0x00,  // ....}...
                /* 0008 */  0x20, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,  //  .......
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020005, 
            One, 
            0x0F, 
            Buffer (0x14)
            {
                /* 0000 */  0x05, 0x00, 0x02, 0x00, 0x54, 0x00, 0x00, 0x00,  // ....T...
                /* 0008 */  0x1E, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00,  // ....~...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020006, 
            One, 
            0x0E, 
            Buffer (0x14)
            {
                /* 0000 */  0x06, 0x00, 0x02, 0x00, 0x2A, 0x00, 0x00, 0x00,  // ....*...
                /* 0008 */  0x08, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00,  // ....>...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003B, 
            One, 
            0x0D, 
            Buffer (0x14)
            {
                /* 0000 */  0x3B, 0x00, 0x02, 0x00, 0x2A, 0x00, 0x00, 0x00,  // ;...*...
                /* 0008 */  0x08, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00,  // ....>...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020002, 
            One, 
            0x0C, 
            Buffer (0x14)
            {
                /* 0000 */  0x02, 0x00, 0x02, 0x00, 0x2A, 0x00, 0x00, 0x00,  // ....*...
                /* 0008 */  0x16, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,  // ....@...
                /* 0010 */  0x02, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020001, 
            Zero, 
            0x0B, 
            Buffer (0x019C)
            {
                /* 0000 */  0x01, 0x00, 0x02, 0x00, 0x28, 0x0A, 0x00, 0x00,  // ....(...
                /* 0008 */  0x2F, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00,  // /.......
                /* 0010 */  0xB0, 0x04, 0x00, 0x00, 0x40, 0x06, 0x00, 0x00,  // ....@...
                /* 0018 */  0xA4, 0x06, 0x00, 0x00, 0x08, 0x07, 0x00, 0x00,  // ........
                /* 0020 */  0x6C, 0x07, 0x00, 0x00, 0xD0, 0x07, 0x00, 0x00,  // l.......
                /* 0028 */  0x34, 0x08, 0x00, 0x00, 0x98, 0x08, 0x00, 0x00,  // 4.......
                /* 0030 */  0xFC, 0x08, 0x00, 0x00, 0x60, 0x09, 0x00, 0x00,  // ....`...
                /* 0038 */  0xC4, 0x09, 0x00, 0x00, 0x28, 0x0A, 0x00, 0x00,  // ....(...
                /* 0040 */  0x8C, 0x0A, 0x00, 0x00, 0xF0, 0x0A, 0x00, 0x00,  // ........
                /* 0048 */  0x54, 0x0B, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00,  // T.......
                /* 0050 */  0x1C, 0x0C, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x00,  // ........
                /* 0058 */  0xE4, 0x0C, 0x00, 0x00, 0x48, 0x0D, 0x00, 0x00,  // ....H...
                /* 0060 */  0xAC, 0x0D, 0x00, 0x00, 0x10, 0x0E, 0x00, 0x00,  // ........
                /* 0068 */  0x74, 0x0E, 0x00, 0x00, 0xD8, 0x0E, 0x00, 0x00,  // t.......
                /* 0070 */  0x3C, 0x0F, 0x00, 0x00, 0xA0, 0x0F, 0x00, 0x00,  // <.......
                /* 0078 */  0x04, 0x10, 0x00, 0x00, 0x68, 0x10, 0x00, 0x00,  // ....h...
                /* 0080 */  0xCC, 0x10, 0x00, 0x00, 0x30, 0x11, 0x00, 0x00,  // ....0...
                /* 0088 */  0x94, 0x11, 0x00, 0x00, 0xF8, 0x11, 0x00, 0x00,  // ........
                /* 0090 */  0x5C, 0x12, 0x00, 0x00, 0xC0, 0x12, 0x00, 0x00,  // \.......
                /* 0098 */  0x24, 0x13, 0x00, 0x00, 0x88, 0x13, 0x00, 0x00,  // $.......
                /* 00A0 */  0xEC, 0x13, 0x00, 0x00, 0x50, 0x14, 0x00, 0x00,  // ....P...
                /* 00A8 */  0xB4, 0x14, 0x00, 0x00, 0x18, 0x15, 0x00, 0x00,  // ........
                /* 00B0 */  0x7C, 0x15, 0x00, 0x00, 0xE0, 0x15, 0x00, 0x00,  // |.......
                /* 00B8 */  0x44, 0x16, 0x00, 0x00, 0xA8, 0x16, 0x00, 0x00,  // D.......
                /* 00C0 */  0x0C, 0x17, 0x00, 0x00, 0x70, 0x17, 0x00, 0x00   // ....p...
            }
        }, 

        Package (0x04)
        {
            0x00050010, 
            One, 
            0x0A, 
            Buffer (0x14)
            {
                /* 0000 */  0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0005000A, 
            One, 
            0x09, 
            Buffer (0x14)
            {
                /* 0000 */  0x0A, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020027, 
            One, 
            0x08, 
            Buffer (0x14)
            {
                /* 0000 */  0x27, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // '.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010008, 
            One, 
            0x07, 
            Buffer (0x14)
            {
                /* 0000 */  0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010007, 
            One, 
            0x06, 
            Buffer (0x14)
            {
                /* 0000 */  0x07, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010006, 
            One, 
            0x05, 
            Buffer (0x14)
            {
                /* 0000 */  0x06, 0x00, 0x01, 0x00, 0xF0, 0x0A, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010005, 
            One, 
            0x04, 
            Buffer (0x14)
            {
                /* 0000 */  0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010004, 
            One, 
            0x03, 
            Buffer (0x14)
            {
                /* 0000 */  0x04, 0x00, 0x01, 0x00, 0xF0, 0x0A, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010003, 
            One, 
            0x02, 
            Buffer (0x14)
            {
                /* 0000 */  0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }
    })
    Scope (\)
    {
        Name (GF01, Zero)
        Name (ASMI, 0x00B0)
        Name (DSMI, 0x9D)
        Name (AODV, 0x06)
        OperationRegion (AODE, SystemMemory, 0xBAE35018, 0x24AC)
        Field (AODE, AnyAcc, NoLock, Preserve)
        {
            OUTB,   1600, 
            SCMI,   32, 
            SCMD,   32, 
            DSPD,   68128, 
            RESV,   96, 
            RMPD,   1120, 
            WCNS,   4096
        }

        Device (AOD)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AOD")  // _UID: Unique ID
            Method (AM01, 0, NotSerialized)
            {
                Return (\AODV)
            }

            Method (AM02, 0, NotSerialized)
            {
                If ((GF01 == Zero))
                {
                    GF01 = One
                }

                Return (Zero)
            }

            Method (AM03, 0, NotSerialized)
            {
                Return (\OBID) /* External reference */
            }

            Method (AM04, 1, NotSerialized)
            {
                Name (LODT, Buffer (0x019C)
                {
                     0x00                                             // .
                })
                Name (TEMP, Buffer (0x0200)
                {
                     0x00                                             // .
                })
                Local0 = Arg0
                Local1 = DerefOf (\OBIT [Zero])
                Local2 = One
                While ((Local2 <= Local1))
                {
                    Local3 = DerefOf (DerefOf (\OBIT [Local2]) [Zero])
                    Local4 = DerefOf (DerefOf (\OBIT [Local2]) [One])
                    If (((Local3 == Local0) && (Local4 == Zero)))
                    {
                        LODT = DerefOf (DerefOf (\OBIT [Local2]) [0x03])
                        TEMP = WCNS /* \WCNS */
                        Local5 = DerefOf (DerefOf (\OBIT [Local2]) [0x02])
                        Local5 *= 0x04
                        CreateDWordField (TEMP, Local5, TEM1)
                        CreateDWordField (LODT, 0x04, CRUT)
                        CRUT = TEM1 /* \AOD_.AM04.TEM1 */
                        Break
                    }

                    Local2++
                }

                Return (LODT) /* \AOD_.AM04.LODT */
            }

            OperationRegion (PSMI, SystemIO, ASMI, 0x02)
            Field (PSMI, AnyAcc, NoLock, Preserve)
            {
                ASMO,   8
            }

            Mutex (SMLO, 0x00)
            Method (AM05, 1, NotSerialized)
            {
                Name (LODT, Buffer (0xC8)
                {
                     0x00                                             // .
                })
                CreateDWordField (Arg0, Zero, DCMI)
                CreateDWordField (Arg0, 0x04, DCMD)
                SCMI = DCMI /* \AOD_.AM05.DCMI */
                SCMD = DCMD /* \AOD_.AM05.DCMD */
                ASMO = DSMI /* \DSMI */
                LODT = OUTB /* \OUTB */
                Return (LODT) /* \AOD_.AM05.LODT */
            }

            Method (AM06, 1, NotSerialized)
            {
                Name (LODT, Buffer (0x14)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                Name (TEMP, Buffer (0x0200)
                {
                     0x00                                             // .
                })
                Local0 = Arg0
                Local1 = DerefOf (\OBIT [Zero])
                Local2 = One
                While ((Local2 <= Local1))
                {
                    Local3 = DerefOf (DerefOf (\OBIT [Local2]) [Zero])
                    Local4 = DerefOf (DerefOf (\OBIT [Local2]) [One])
                    If (((Local3 == Local0) && (Local4 == One)))
                    {
                        LODT = DerefOf (DerefOf (\OBIT [Local2]) [0x03])
                        TEMP = WCNS /* \WCNS */
                        Local5 = DerefOf (DerefOf (\OBIT [Local2]) [0x02])
                        Local5 *= 0x04
                        CreateDWordField (TEMP, Local5, TEM1)
                        CreateDWordField (LODT, 0x04, CRUT)
                        CRUT = TEM1 /* \AOD_.AM06.TEM1 */
                        Break
                    }

                    Local2++
                }

                Return (LODT) /* \AOD_.AM06.LODT */
            }

            Method (AM07, 1, NotSerialized)
            {
                Name (BSPD, Buffer (0x0214){})
                If ((Arg0 > 0x0F))
                {
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                If ((Arg0 == Zero))
                {
                    BSPD = DSPD /* \DSPD */
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                Local0 = Zero
                Local0 += (Arg0 * 0x0214)
                Local1 = 0x0214
                Local2 = Zero
                While (Local1)
                {
                    BSPD [Local2] = DerefOf (DSPD [Local0])
                    Local1--
                    Local0++
                    Local2++
                }

                Return (BSPD) /* \AOD_.AM07.BSPD */
            }

            Method (AM08, 0, NotSerialized)
            {
                Return (\OBIE) /* External reference */
            }

            Method (AM09, 0, NotSerialized)
            {
                Name (TEMP, Buffer (0x8C){})
                TEMP = RMPD /* \RMPD */
                Return (TEMP) /* \AOD_.AM09.TEMP */
            }

            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x6A, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // j.......
                /* 0008 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // AA..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x00   // ..).BA..
            })
            Method (WMAA, 3, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((((Arg1 != One) || (Arg1 != 0x02)) || 
                        (Arg1 != 0x06)))
                    {
                        CreateDWordField (Arg2, Zero, WIID)
                    }

                    If ((Arg1 == One))
                    {
                        Return (AM01 ())
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Return (AM02 ())
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Return (AM03 ())
                    }
                    ElseIf ((Arg1 == 0x04))
                    {
                        Return (AM04 (WIID))
                    }
                    ElseIf ((Arg1 == 0x05))
                    {
                        Return (AM05 (Arg2))
                    }
                    ElseIf ((Arg1 == 0x06))
                    {
                        Return (AM06 (WIID))
                    }
                    ElseIf ((Arg1 == 0x07))
                    {
                        Return (AM07 (WIID))
                    }
                    ElseIf ((Arg1 == 0x08))
                    {
                        Return (AM08 ())
                    }
                    ElseIf ((Arg1 == 0x09))
                    {
                        Return (AM09 ())
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Name (WQBA, Buffer (0x0C80)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x70, 0x0C, 0x00, 0x00, 0x6C, 0x45, 0x00, 0x00,  // p...lE..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xD4, 0xA1, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x11, 0x10, 0x22, 0x21, 0x30, 0x34, 0x32,  // ..."!042
                /* 0028 */  0x0B, 0x03, 0x63, 0x04, 0x8A, 0x0B, 0x21, 0x07,  // ..c...!.
                /* 0030 */  0x10, 0x12, 0x07, 0x85, 0x12, 0x02, 0xA1, 0xFE,  // ........
                /* 0038 */  0x04, 0xF2, 0x2B, 0x00, 0xE1, 0x16, 0xCA, 0x14,  // ..+.....
                /* 0040 */  0x60, 0x50, 0x80, 0x53, 0x04, 0x11, 0xF4, 0x2A,  // `P.S...*
                /* 0048 */  0xC0, 0xA6, 0x00, 0x93, 0x02, 0x2C, 0x0A, 0xD0,  // .....,..
                /* 0050 */  0x2E, 0xC0, 0xB2, 0x00, 0xDD, 0x02, 0xA4, 0xC3,  // ........
                /* 0058 */  0x12, 0x91, 0xE0, 0x28, 0x31, 0xE0, 0x28, 0x9D,  // ...(1.(.
                /* 0060 */  0xD8, 0xC2, 0x0D, 0x1B, 0xBC, 0x50, 0x14, 0xCD,  // .....P..
                /* 0068 */  0x20, 0x4A, 0x82, 0xCA, 0x05, 0xF8, 0x46, 0x10,  //  J....F.
                /* 0070 */  0x78, 0xB9, 0x02, 0x24, 0x4F, 0x40, 0x9A, 0x05,  // x..$O@..
                /* 0078 */  0x18, 0x16, 0x60, 0x5D, 0x80, 0xEC, 0x21, 0x50,  // ..`]..!P
                /* 0080 */  0xA9, 0x43, 0x40, 0xC9, 0x19, 0x02, 0x6A, 0x00,  // .C@...j.
                /* 0088 */  0xAD, 0x4E, 0x40, 0xF8, 0x95, 0x4E, 0x09, 0x49,  // .N@..N.I
                /* 0090 */  0x10, 0xCE, 0x58, 0xC5, 0xE3, 0x6B, 0x16, 0x4D,  // ..X..k.M
                /* 0098 */  0xCF, 0x49, 0xCE, 0x31, 0xE4, 0x78, 0x5C, 0xE8,  // .I.1.x\.
                /* 00A0 */  0x41, 0xF0, 0x50, 0x1A, 0x40, 0x98, 0xFC, 0x21,  // A.P.@..!
                /* 00A8 */  0x2B, 0x06, 0x0C, 0x4A, 0xC2, 0x58, 0xA8, 0x8B,  // +..J.X..
                /* 00B0 */  0x51, 0xA3, 0x46, 0xCA, 0x06, 0x64, 0x88, 0xD2,  // Q.F..d..
                /* 00B8 */  0x46, 0x8D, 0x1E, 0xD0, 0xF9, 0x1D, 0xC9, 0xD9,  // F.......
                /* 00C0 */  0x1D, 0xDD, 0x91, 0x24, 0x30, 0xEA, 0x31, 0x1D,  // ...$0.1.
                /* 00C8 */  0x63, 0x61, 0x33, 0x12, 0x6A, 0x8C, 0xE6, 0xA0,  // ca3.j...
                /* 00D0 */  0x48, 0xB8, 0x41, 0xA3, 0x25, 0xC2, 0x6A, 0x5C,  // H.A.%.j\
                /* 00D8 */  0xB1, 0xCF, 0xCC, 0xC2, 0x87, 0x25, 0x8C, 0x23,  // .....%.#
                /* 00E0 */  0x38, 0xB0, 0x83, 0xB5, 0x68, 0x18, 0xA1, 0x15,  // 8...h...
                /* 00E8 */  0x04, 0xA7, 0x41, 0x1C, 0x45, 0x94, 0x30, 0x0C,  // ..A.E.0.
                /* 00F0 */  0xCF, 0x98, 0x81, 0x8E, 0x92, 0x21, 0x85, 0x09,  // .....!..
                /* 00F8 */  0x7A, 0x02, 0x41, 0x4E, 0x9E, 0x61, 0x19, 0xE2,  // z.AN.a..
                /* 0100 */  0x0C, 0x38, 0x56, 0x8C, 0x50, 0x21, 0x31, 0x03,  // .8V.P!1.
                /* 0108 */  0x09, 0xFE, 0xFF, 0x3F, 0x81, 0xAE, 0x31, 0xE4,  // ...?..1.
                /* 0110 */  0x19, 0x88, 0xDC, 0x03, 0x4E, 0x20, 0x48, 0xF4,  // ....N H.
                /* 0118 */  0x28, 0xC1, 0x8D, 0x6B, 0x54, 0x36, 0xA6, 0xB3,  // (..kT6..
                /* 0120 */  0xC1, 0x0D, 0xCC, 0x04, 0x71, 0x0E, 0x0F, 0x23,  // ....q..#
                /* 0128 */  0x03, 0x42, 0x13, 0x88, 0x1F, 0x3B, 0x7C, 0x02,  // .B...;|.
                /* 0130 */  0xBB, 0x3F, 0x0E, 0x48, 0x21, 0x82, 0x2E, 0x04,  // .?.H!...
                /* 0138 */  0x67, 0x5A, 0xA3, 0x00, 0x6B, 0x67, 0x07, 0xD9,  // gZ..kg..
                /* 0140 */  0x82, 0xD0, 0x59, 0x20, 0x56, 0x63, 0x28, 0x82,  // ..Y Vc(.
                /* 0148 */  0x88, 0x10, 0x34, 0x8A, 0xF1, 0x22, 0x84, 0x0A,  // ..4.."..
                /* 0150 */  0x11, 0x25, 0xEA, 0x39, 0x07, 0xA9, 0x4D, 0x80,  // .%.9..M.
                /* 0158 */  0x32, 0x10, 0xA1, 0x05, 0x33, 0x02, 0xB3, 0x7F,  // 2...3...
                /* 0160 */  0x06, 0x60, 0x16, 0x20, 0xFE, 0x08, 0x2C, 0xE1,  // .`. ..,.
                /* 0168 */  0x44, 0x20, 0x23, 0xA3, 0xA1, 0x87, 0x05, 0x9F,  // D #.....
                /* 0170 */  0x04, 0xD8, 0x01, 0xC1, 0xF3, 0x39, 0x35, 0x13,  // .....95.
                /* 0178 */  0x38, 0x30, 0x84, 0x78, 0x25, 0x40, 0xD4, 0xD1,  // 80.x%@..
                /* 0180 */  0x82, 0x12, 0x58, 0xCA, 0xD1, 0x80, 0xD8, 0x1E,  // ..X.....
                /* 0188 */  0x98, 0xEE, 0x01, 0x47, 0x78, 0xEE, 0xBE, 0x1C,  // ...Gx...
                /* 0190 */  0x9C, 0x9A, 0x7F, 0x1A, 0x9E, 0xE6, 0x43, 0x02,  // ......C.
                /* 0198 */  0x66, 0x88, 0x1E, 0xEB, 0x41, 0x04, 0x3C, 0x44,  // f...A.<D
                /* 01A0 */  0x76, 0x4A, 0x30, 0x20, 0xDE, 0xFB, 0xB5, 0x80,  // vJ0 ....
                /* 01A8 */  0x8C, 0xE0, 0x25, 0xC1, 0x80, 0x9E, 0xC4, 0x03,  // ..%.....
                /* 01B0 */  0x02, 0x58, 0x0E, 0x1A, 0x07, 0x7E, 0x42, 0x15,  // .X...~B.
                /* 01B8 */  0xDF, 0x01, 0xE8, 0x91, 0x80, 0xCD, 0x28, 0xBE,  // ......(.
                /* 01C0 */  0x09, 0xCA, 0x3A, 0x3E, 0xA0, 0xE7, 0x1C, 0xED,  // ..:>....
                /* 01C8 */  0xD9, 0xE1, 0x65, 0xA1, 0xD9, 0x2B, 0x06, 0x21,  // ..e..+.!
                /* 01D0 */  0x78, 0x0D, 0xF0, 0x4D, 0xC1, 0xA7, 0x11, 0x8B,  // x..M....
                /* 01D8 */  0x5A, 0x9D, 0x9C, 0xAC, 0xCA, 0x23, 0xA6, 0xE0,  // Z....#..
                /* 01E0 */  0x1E, 0x02, 0x97, 0x01, 0xA7, 0xA1, 0x7B, 0xBC,  // ......{.
                /* 01E8 */  0xE0, 0x50, 0x30, 0x5E, 0xFA, 0xFF, 0x1F, 0x2F,  // .P0^.../
                /* 01F0 */  0xB8, 0xE7, 0x75, 0xBC, 0x60, 0x39, 0x26, 0x3C,  // ..u.`9&<
                /* 01F8 */  0x6C, 0x54, 0x05, 0xA1, 0x41, 0x1C, 0x70, 0xF3,  // lT..A.p.
                /* 0200 */  0x03, 0x20, 0x57, 0x0B, 0x8F, 0x98, 0xCD, 0xE5,  // . W.....
                /* 0208 */  0xAC, 0xD8, 0x11, 0x85, 0x0F, 0x8F, 0x0F, 0xC3,  // ........
                /* 0210 */  0x23, 0x7E, 0x6F, 0x28, 0x16, 0x44, 0x02, 0x21,  // #~o(.D.!
                /* 0218 */  0x74, 0x66, 0x38, 0x72, 0xB0, 0x38, 0x3B, 0x41,  // tf8r.8;A
                /* 0220 */  0x88, 0xC0, 0xD2, 0x86, 0x8E, 0x1E, 0xB2, 0x47,  // .......G
                /* 0228 */  0xF5, 0x12, 0x63, 0x8C, 0x27, 0x02, 0xA3, 0x9E,  // ..c.'...
                /* 0230 */  0xD2, 0xD1, 0x83, 0x0F, 0xD0, 0xA3, 0x07, 0x7C,  // .......|
                /* 0238 */  0xFE, 0xFF, 0x47, 0x8F, 0x93, 0x34, 0x66, 0x89,  // ..G..4f.
                /* 0240 */  0x18, 0x3D, 0xFA, 0x1C, 0xE1, 0xE9, 0xBC, 0xFD,  // .=......
                /* 0248 */  0xF0, 0xA3, 0x48, 0x02, 0xC7, 0x87, 0xD0, 0xE8,  // ..H.....
                /* 0250 */  0xC1, 0x73, 0xFA, 0xF1, 0xE8, 0xC1, 0x3F, 0x46,  // .s....?F
                /* 0258 */  0x8F, 0x1E, 0x3C, 0x63, 0x38, 0x37, 0xDC, 0xD5,  // ..<c87..
                /* 0260 */  0xC6, 0x23, 0x07, 0xFB, 0x78, 0xF1, 0xF2, 0x8E,  // .#..x...
                /* 0268 */  0x5B, 0xA0, 0xF0, 0x39, 0x7B, 0x32, 0x80, 0xF7,  // [..9{2..
                /* 0270 */  0x20, 0xDC, 0x79, 0x0B, 0xB8, 0x8C, 0x80, 0xCB,  //  .y.....
                /* 0278 */  0x3D, 0x57, 0xA1, 0x04, 0x1E, 0xAD, 0x40, 0xFB,  // =W....@.
                /* 0280 */  0xFF, 0x3F, 0x5A, 0x01, 0x4C, 0xB8, 0x3F, 0xBC,  // .?Z.L.?.
                /* 0288 */  0x5A, 0x3D, 0x5A, 0x81, 0x3D, 0xE2, 0x73, 0x40,  // Z=Z.=.s@
                /* 0290 */  0x3F, 0x02, 0xC7, 0x86, 0x90, 0x93, 0xA3, 0x15,  // ?.......
                /* 0298 */  0xEA, 0x64, 0x84, 0x0B, 0x7A, 0xB0, 0x02, 0xBA,  // .d..z...
                /* 02A0 */  0x07, 0x0D, 0xDC, 0xF1, 0x00, 0xCE, 0xFF, 0xFF,  // ........
                /* 02A8 */  0x78, 0xC0, 0x07, 0xC6, 0x4F, 0x2F, 0xE0, 0x3B,  // x...O/.;
                /* 02B0 */  0xB3, 0x78, 0xAC, 0x38, 0x68, 0x86, 0x79, 0x20,  // .x.8h.y 
                /* 02B8 */  0xA7, 0xE6, 0x6B, 0x20, 0x0B, 0x3B, 0x5A, 0x50,  // ..k .;ZP
                /* 02C0 */  0x1D, 0xAB, 0x80, 0xC3, 0xB9, 0x12, 0x37, 0x5A,  // ......7Z
                /* 02C8 */  0xB8, 0x43, 0xC3, 0x8F, 0x17, 0x7C, 0x22, 0x4E,  // .C...|"N
                /* 02D0 */  0x52, 0x3E, 0xD4, 0x41, 0x3F, 0x80, 0x7A, 0xBC,  // R>.A?.z.
                /* 02D8 */  0xE0, 0x39, 0x48, 0x01, 0x87, 0x43, 0x1D, 0xF8,  // .9H..C..
                /* 02E0 */  0xFE, 0xFF, 0x87, 0x3A, 0x38, 0x43, 0x06, 0x9F,  // ...:8C..
                /* 02E8 */  0xBC, 0xB3, 0x18, 0xFA, 0x3C, 0xE3, 0x29, 0xD4,  // ....<.).
                /* 02F0 */  0x7A, 0x89, 0x21, 0xB0, 0x07, 0xE4, 0x93, 0x48,  // z.!....H
                /* 02F8 */  0x90, 0x13, 0x89, 0x70, 0x2E, 0x3E, 0x8D, 0x81,  // ...p.>..
                /* 0300 */  0xED, 0x00, 0x05, 0x1C, 0x4E, 0x63, 0xE0, 0xB9,  // ....Nc..
                /* 0308 */  0xA4, 0xB0, 0xDB, 0x18, 0x18, 0x0E, 0x51, 0xF0,  // ......Q.
                /* 0310 */  0x26, 0xE5, 0xF1, 0x83, 0xEF, 0xD4, 0x84, 0x3B,  // &......;
                /* 0318 */  0x44, 0xC1, 0xF3, 0x38, 0x24, 0x21, 0x9F, 0xC7,  // D..8$!..
                /* 0320 */  0x4B, 0x00, 0xEE, 0x1E, 0x85, 0x3F, 0x47, 0x81,  // K....?G.
                /* 0328 */  0xF7, 0xFF, 0x7F, 0x8E, 0x82, 0x27, 0x6B, 0xA1,  // .....'k.
                /* 0330 */  0xF4, 0x10, 0x65, 0x21, 0x30, 0xA8, 0x73, 0x14,  // ..e!0.s.
                /* 0338 */  0xC0, 0x14, 0x6F, 0xB7, 0x0D, 0xDD, 0xA2, 0x7C,  // ..o....|
                /* 0340 */  0x1B, 0x78, 0x1A, 0x78, 0x8D, 0x88, 0xF2, 0x1C,  // .x.x....
                /* 0348 */  0xE5, 0x8B, 0xD4, 0x0B, 0x41, 0x84, 0x28, 0xC7,  // ....A.(.
                /* 0350 */  0x7B, 0x02, 0x11, 0x1E, 0xA6, 0x3C, 0xE1, 0x30,  // {....<.0
                /* 0358 */  0xE1, 0x4E, 0x36, 0xCA, 0x4B, 0x43, 0x18, 0x43,  // .N6.KC.C
                /* 0360 */  0xC7, 0x0A, 0x14, 0x39, 0x7E, 0x08, 0x5F, 0x2A,  // ...9~._*
                /* 0368 */  0x7C, 0x8E, 0x62, 0x51, 0xCE, 0x03, 0xFA, 0x11,  // |.bQ....
                /* 0370 */  0xF8, 0xFC, 0x61, 0x23, 0x67, 0x11, 0xD4, 0x49,  // ..a#g..I
                /* 0378 */  0xC0, 0x87, 0x0E, 0x0F, 0xEA, 0x09, 0x01, 0x13,  // ........
                /* 0380 */  0xFA, 0x60, 0x08, 0xAA, 0xFF, 0xFF, 0x49, 0x0A,  // .`....I.
                /* 0388 */  0x38, 0x1F, 0x40, 0xE0, 0x85, 0x3C, 0xF3, 0x82,  // 8.@..<..
                /* 0390 */  0xEE, 0x44, 0x0F, 0x8E, 0x33, 0x61, 0xE4, 0xB8,  // .D..3a..
                /* 0398 */  0x0F, 0x34, 0xD8, 0xB3, 0x07, 0xF0, 0x91, 0x76,  // .4.....v
                /* 03A0 */  0xF0, 0x40, 0x89, 0x39, 0x7B, 0x00, 0xBA, 0xFE,  // .@.9{...
                /* 03A8 */  0xFF, 0x67, 0x0F, 0xC0, 0xC2, 0x65, 0xE3, 0xDD,  // .g...e..
                /* 03B0 */  0xC3, 0x97, 0x9E, 0x33, 0x7D, 0xF6, 0xF0, 0x5C,  // ...3}..\
                /* 03B8 */  0xDF, 0x39, 0x7C, 0x2A, 0x34, 0x8A, 0x21, 0xDE,  // .9|*4.!.
                /* 03C0 */  0x3F, 0x7C, 0x28, 0x88, 0x12, 0xF1, 0x5C, 0xA3,  // ?|(...\.
                /* 03C8 */  0x1C, 0x72, 0x94, 0xB8, 0x11, 0xC2, 0x3C, 0x1E,  // .r....<.
                /* 03D0 */  0x1A, 0x27, 0x46, 0xA8, 0x08, 0x0C, 0xF4, 0xD9,  // .'F.....
                /* 03D8 */  0x83, 0xC5, 0x39, 0x7B, 0x40, 0xC5, 0x3E, 0x9B,  // ..9{@.>.
                /* 03E0 */  0x37, 0x8E, 0x08, 0xAF, 0x01, 0xE7, 0x78, 0x3E,  // 7.....x>
                /* 03E8 */  0x3E, 0x7B, 0x00, 0xDE, 0xA4, 0x3C, 0xFD, 0x74,  // >{...<.t
                /* 03F0 */  0xF6, 0x00, 0xD7, 0x09, 0x18, 0x77, 0xF6, 0xC0,  // .....w..
                /* 03F8 */  0xFD, 0xFF, 0xCF, 0x1E, 0xB8, 0x71, 0x63, 0x4F,  // .....qcO
                /* 0400 */  0x1F, 0xC0, 0x4E, 0x84, 0x87, 0xA3, 0x07, 0x26,  // ..N....&
                /* 0408 */  0xF6, 0xF9, 0x16, 0xA0, 0xD0, 0xE1, 0xE3, 0xF9,  // ........
                /* 0410 */  0x16, 0xAC, 0xFF, 0xFF, 0x83, 0x14, 0x17, 0xFE,  // ........
                /* 0418 */  0xB2, 0xD4, 0xA7, 0xC0, 0xC1, 0x0F, 0xA9, 0xE8,  // ........
                /* 0420 */  0xE1, 0xF8, 0x38, 0x87, 0x39, 0xE0, 0x02, 0x6C,  // ..8.9..l
                /* 0428 */  0x3E, 0x5A, 0xFB, 0xFF, 0x7F, 0xB4, 0xC6, 0x03,  // >Z......
                /* 0430 */  0x87, 0xF4, 0x51, 0x01, 0x6C, 0xC7, 0x5B, 0xE0,  // ..Q.l.[.
                /* 0438 */  0x70, 0x54, 0x00, 0xCF, 0xC0, 0xF8, 0x58, 0x81,  // pT....X.
                /* 0440 */  0xC5, 0xC4, 0x1E, 0x5D, 0x8E, 0x15, 0x6C, 0x87,  // ...]..l.
                /* 0448 */  0x5A, 0xE0, 0x30, 0x56, 0x30, 0x0D, 0x8C, 0x8D,  // Z.0V0...
                /* 0450 */  0x15, 0x7C, 0x12, 0x8E, 0xD5, 0xE8, 0x31, 0xFA,  // .|....1.
                /* 0458 */  0xD6, 0x73, 0x40, 0x9E, 0x47, 0x84, 0xB0, 0xBE,  // .s@.G...
                /* 0460 */  0xC2, 0x24, 0x70, 0x5C, 0x08, 0xFD, 0xFF, 0x87,  // .$p\....
                /* 0468 */  0x0B, 0x1E, 0x50, 0x0F, 0x17, 0xFC, 0xF2, 0x86,  // ..P.....
                /* 0470 */  0x0B, 0x9A, 0xB1, 0xC1, 0x19, 0x31, 0xF8, 0x4E,  // .....1.N
                /* 0478 */  0x5E, 0x3E, 0x06, 0x83, 0xE5, 0x12, 0xC1, 0xCE,  // ^>......
                /* 0480 */  0x02, 0x6C, 0x3A, 0xF8, 0x9B, 0x30, 0xFE, 0xC8,  // .l:..0..
                /* 0488 */  0x05, 0x8C, 0x02, 0x98, 0x00, 0x61, 0x32, 0x4F,  // .....a2O
                /* 0490 */  0x07, 0x92, 0x0C, 0x83, 0x3A, 0x72, 0x01, 0xA7,  // ....:r..
                /* 0498 */  0x10, 0x07, 0x02, 0x28, 0xFF, 0xFF, 0x23, 0x17,  // ...(..#.
                /* 04A0 */  0xF0, 0x53, 0x3A, 0x25, 0x4D, 0xFA, 0xFD, 0x1B,  // .S:%M...
                /* 04A8 */  0x77, 0xCC, 0x02, 0x1B, 0xC2, 0x63, 0x16, 0xBF,  // w....c..
                /* 04B0 */  0x30, 0xFA, 0x98, 0x05, 0x46, 0x31, 0x4B, 0xD1,  // 0...F1K.
                /* 04B8 */  0x58, 0x2C, 0xE7, 0xCC, 0xE8, 0x53, 0x07, 0xEA,  // X,...S..
                /* 04C0 */  0x6C, 0xE1, 0x33, 0xC0, 0x19, 0x1E, 0xD8, 0xB3,  // l.3.....
                /* 04C8 */  0xC6, 0xF1, 0x9E, 0x42, 0xED, 0xC3, 0x24, 0x73,  // ...B..$s
                /* 04D0 */  0xF5, 0x75, 0xFD, 0x09, 0x80, 0x9F, 0x1B, 0x7D,  // .u.....}
                /* 04D8 */  0xD6, 0x02, 0xAE, 0x27, 0x84, 0x67, 0x2D, 0xF0,  // ...'.g-.
                /* 04E0 */  0xDC, 0x07, 0x7C, 0x0D, 0xE0, 0x13, 0x39, 0x3E,  // ..|...9>
                /* 04E8 */  0x38, 0xE7, 0x46, 0xF0, 0xFC, 0xFF, 0xCF, 0x52,  // 8.F....R
                /* 04F0 */  0x96, 0x35, 0x6E, 0xB4, 0x24, 0x10, 0x1D, 0x32,  // .5n.$..2
                /* 04F8 */  0x22, 0x9E, 0xE9, 0x41, 0xBC, 0xD6, 0xF9, 0x04,  // "..A....
                /* 0500 */  0xFC, 0x8A, 0x10, 0xFB, 0x1D, 0xC3, 0x37, 0x05,  // ......7.
                /* 0508 */  0x4F, 0xC4, 0xF7, 0x3A, 0x13, 0x8C, 0x7E, 0xEC,  // O..:..~.
                /* 0510 */  0x02, 0xBA, 0xA7, 0x14, 0xDC, 0xC0, 0xE1, 0x8E,  // ........
                /* 0518 */  0x0F, 0x77, 0xA4, 0xC0, 0x0F, 0x11, 0xCE, 0xD8,  // .w......
                /* 0520 */  0xC1, 0x25, 0xFC, 0x14, 0x8B, 0x3E, 0x42, 0xF0,  // .%...>B.
                /* 0528 */  0x61, 0x60, 0xB1, 0x03, 0xBF, 0x13, 0x60, 0xE4,  // a`....`.
                /* 0530 */  0x41, 0xEB, 0x24, 0x0B, 0x9E, 0x33, 0x18, 0x70,  // A.$..3.p
                /* 0538 */  0x88, 0x30, 0x74, 0xD0, 0xDC, 0x44, 0xCE, 0xE2,  // .0t..D..
                /* 0540 */  0xFF, 0x1F, 0x2C, 0x4E, 0xB4, 0x93, 0x38, 0x9F,  // ..,N..8.
                /* 0548 */  0x48, 0xE7, 0x17, 0x2C, 0x4A, 0x75, 0x33, 0x87,  // H..,Ju3.
                /* 0550 */  0x00, 0x74, 0x90, 0x38, 0x9C, 0x37, 0x1F, 0x8F,  // .t.8.7..
                /* 0558 */  0xCE, 0x30, 0xBE, 0x61, 0xB2, 0x7B, 0x00, 0xBF,  // .0.a.{..
                /* 0560 */  0xEF, 0x78, 0x2E, 0x07, 0xE6, 0xE3, 0x2D, 0xBC,  // .x....-.
                /* 0568 */  0x23, 0x83, 0x0F, 0x03, 0xE0, 0x12, 0x3D, 0x7E,  // #.....=~
                /* 0570 */  0x29, 0x39, 0x0C, 0xA0, 0x06, 0x69, 0xD8, 0xD3,  // )9...i..
                /* 0578 */  0x39, 0xFD, 0x03, 0x3B, 0xB2, 0xE6, 0xE1, 0x35,  // 9..;...5
                /* 0580 */  0xAA, 0xD7, 0x1D, 0x9F, 0x8C, 0x1E, 0x05, 0xC0,  // ........
                /* 0588 */  0x76, 0x44, 0x03, 0x0E, 0x01, 0x8E, 0x02, 0x40,  // vD.....@
                /* 0590 */  0x68, 0x9A, 0x38, 0x9C, 0xE3, 0xC4, 0x1C, 0x5F,  // h.8...._
                /* 0598 */  0x7D, 0x0F, 0x62, 0xD7, 0x15, 0x63, 0xBE, 0x51,  // }.b..c.Q
                /* 05A0 */  0x55, 0x7F, 0x12, 0x80, 0x7E, 0xF8, 0x02, 0xCF,  // U...~...
                /* 05A8 */  0xFF, 0xFF, 0xF2, 0xF3, 0xFA, 0x93, 0xC0, 0x42,  // .......B
                /* 05B0 */  0x8F, 0x02, 0x50, 0xA0, 0x5F, 0xBD, 0x7C, 0xAB,  // ..P._.|.
                /* 05B8 */  0x79, 0x56, 0x60, 0xB8, 0xA7, 0x74, 0x56, 0x09,  // yV`..tV.
                /* 05C0 */  0x2C, 0xE9, 0x28, 0x00, 0xAA, 0xE3, 0x1B, 0x70,  // ,.(....p
                /* 05C8 */  0xB8, 0x49, 0x3D, 0x0A, 0x80, 0x7F, 0x8A, 0x0C,  // .I=.....
                /* 05D0 */  0xE4, 0x18, 0xB1, 0xF7, 0x0B, 0x7E, 0x6A, 0xB3,  // .....~j.
                /* 05D8 */  0xCB, 0x43, 0x00, 0xD0, 0x39, 0x4C, 0x91, 0x43,  // .C..9L.C
                /* 05E0 */  0x00, 0x6A, 0x98, 0x9E, 0x36, 0x3F, 0xCE, 0xF2,  // .j..6?..
                /* 05E8 */  0x13, 0x00, 0x78, 0x40, 0x7D, 0x02, 0x00, 0xFF,  // ..x@}...
                /* 05F0 */  0xBD, 0xD7, 0x27, 0x00, 0x38, 0xFF, 0xFF, 0x13,  // ..'.8...
                /* 05F8 */  0x00, 0xFE, 0x8A, 0x82, 0x1F, 0x1D, 0x6E, 0xE0,  // ......n.
                /* 0600 */  0xF0, 0x8E, 0x1C, 0x3E, 0xA5, 0x80, 0xEB, 0xC8,  // ...>....
                /* 0608 */  0x88, 0x3B, 0x17, 0xC2, 0x1B, 0x12, 0x3B, 0x10,  // .;....;.
                /* 0610 */  0x02, 0xC3, 0xA0, 0x7A, 0x8E, 0x84, 0xF4, 0x70,  // ...z...p
                /* 0618 */  0x20, 0x51, 0xEB, 0xA4, 0x30, 0x3E, 0x0D, 0xF8,  //  Q..0>..
                /* 0620 */  0x40, 0x08, 0xF7, 0xE4, 0x65, 0x38, 0x3E, 0x42,  // @...e8>B
                /* 0628 */  0x0F, 0xFD, 0x21, 0xE2, 0xC9, 0xC7, 0xF7, 0x03,  // ..!.....
                /* 0630 */  0x4F, 0xEE, 0xC9, 0x10, 0xC6, 0x39, 0xC1, 0x77,  // O....9.w
                /* 0638 */  0x15, 0x76, 0x37, 0x7B, 0xD6, 0xF3, 0xB9, 0xCA,  // .v7{....
                /* 0640 */  0x04, 0x3E, 0x2C, 0x30, 0x34, 0x7E, 0x4C, 0x04,  // .>,04~L.
                /* 0648 */  0xEB, 0x8D, 0xC1, 0x87, 0x67, 0xB0, 0xDC, 0x11,  // ....g...
                /* 0650 */  0x31, 0x58, 0xCF, 0x1D, 0x36, 0x2A, 0xE0, 0xFF,  // 1X..6*..
                /* 0658 */  0x7F, 0x4B, 0xF7, 0x5D, 0xC6, 0xBE, 0x86, 0xA1,  // .K.]....
                /* 0660 */  0x3B, 0xA7, 0x0F, 0x71, 0xBE, 0x74, 0xF0, 0xE3,  // ;..q.t..
                /* 0668 */  0x3A, 0xEE, 0x74, 0x08, 0x2E, 0xEC, 0x67, 0x7A,  // :.t...gz
                /* 0670 */  0xB0, 0x87, 0x3A, 0x70, 0xD2, 0x48, 0xA3, 0x41,  // ..:p.H.A
                /* 0678 */  0x1D, 0x15, 0x7C, 0x28, 0xF0, 0x31, 0xC5, 0x03,  // ..|(.1..
                /* 0680 */  0x7C, 0xA9, 0xF0, 0x09, 0xC5, 0xD3, 0x7A, 0x5C,  // |.....z\
                /* 0688 */  0x78, 0x1A, 0xF0, 0xB8, 0xD9, 0x35, 0xC1, 0x1F,  // x....5..
                /* 0690 */  0x04, 0x1F, 0x0F, 0xF0, 0x07, 0x88, 0x80, 0xAF,  // ........
                /* 0698 */  0x37, 0x3E, 0x7A, 0xC0, 0x39, 0x82, 0xE0, 0x8F,  // 7>z.9...
                /* 06A0 */  0x2A, 0xF0, 0xC7, 0xE3, 0x63, 0x80, 0x8F, 0xB5,  // *...c...
                /* 06A8 */  0x5C, 0xFE, 0x20, 0x50, 0x07, 0x78, 0x3E, 0xD2,  // \. P.x>.
                /* 06B0 */  0xD3, 0x7A, 0x1B, 0xF0, 0x21, 0xE1, 0xB0, 0xD8,  // .z..!...
                /* 06B8 */  0x09, 0x86, 0x8F, 0x07, 0xFC, 0x07, 0xB2, 0x87,  // ........
                /* 06C0 */  0x0C, 0x5F, 0x19, 0x3C, 0x5F, 0x1F, 0xDD, 0xB1,  // ._.<_...
                /* 06C8 */  0x47, 0x10, 0x78, 0xB7, 0x0E, 0x1F, 0x1A, 0x42,  // G.x....B
                /* 06D0 */  0x3D, 0x75, 0x78, 0x06, 0xEF, 0x17, 0x3E, 0x81,  // =ux...>.
                /* 06D8 */  0x60, 0xFF, 0xFF, 0x27, 0x10, 0x70, 0x47, 0x71,  // `..'.pGq
                /* 06E0 */  0x03, 0xF1, 0x73, 0x6B, 0xA1, 0xEB, 0x94, 0x8D,  // ..sk....
                /* 06E8 */  0xB3, 0x0E, 0x3D, 0x0F, 0x58, 0xEE, 0x01, 0x41,  // ..=.X..A
                /* 06F0 */  0xD7, 0x08, 0xCC, 0x0D, 0x22, 0x88, 0x8F, 0x45,  // ...."..E
                /* 06F8 */  0xBE, 0x51, 0x30, 0x82, 0x02, 0x01, 0x75, 0xF8,  // .Q0...u.
                /* 0700 */  0x34, 0x84, 0xA5, 0x51, 0x48, 0x18, 0x84, 0x46,  // 4..QH..F
                /* 0708 */  0xE4, 0xA3, 0x07, 0x81, 0xA3, 0x20, 0x1E, 0xBD,  // ..... ..
                /* 0710 */  0x63, 0x1E, 0xCF, 0xD1, 0x43, 0xF5, 0x31, 0xC0,  // c...C.1.
                /* 0718 */  0x93, 0xC0, 0x85, 0x3A, 0xA4, 0xD1, 0xE3, 0x02,  // ...:....
                /* 0720 */  0x1E, 0xEF, 0x88, 0x4E, 0xCD, 0xD3, 0xF0, 0xD8,  // ...N....
                /* 0728 */  0x71, 0x27, 0x0F, 0xB8, 0xE3, 0xC0, 0x9F, 0x76,  // q'.....v
                /* 0730 */  0xF0, 0x17, 0x80, 0x57, 0x20, 0x13, 0xB0, 0x53,  // ...W ..S
                /* 0738 */  0x35, 0xF8, 0x04, 0x1E, 0x0E, 0x40, 0x01, 0xE4,  // 5....@..
                /* 0740 */  0xFB, 0x80, 0x0F, 0x3C, 0xCF, 0x04, 0x6C, 0x0E,  // ...<..l.
                /* 0748 */  0x21, 0xC2, 0x44, 0x33, 0x3C, 0x26, 0xF0, 0x31,  // !.D3<&.1
                /* 0750 */  0x8C, 0x9E, 0x86, 0x3C, 0x2E, 0x3E, 0x4A, 0x9F,  // ...<.>J.
                /* 0758 */  0x61, 0xD8, 0x09, 0xCE, 0xD7, 0x62, 0x0F, 0xF0,  // a....b..
                /* 0760 */  0xE5, 0xE0, 0xB9, 0x16, 0x03, 0xEB, 0x71, 0x73,  // ......qs
                /* 0768 */  0x58, 0xA3, 0x3D, 0xEE, 0xFA, 0x8A, 0xF0, 0xFF,  // X.=.....
                /* 0770 */  0x7F, 0x98, 0xF3, 0xA1, 0xCB, 0x57, 0x27, 0xC3,  // .....W'.
                /* 0778 */  0xFA, 0xE4, 0x01, 0x8E, 0xB3, 0x14, 0xFC, 0xA1,  // ........
                /* 0780 */  0xE2, 0xCE, 0x02, 0x70, 0x0F, 0xE4, 0x6C, 0x0E,  // ...p..l.
                /* 0788 */  0x4F, 0x03, 0x78, 0x99, 0x87, 0x08, 0xD4, 0x40,  // O.x....@
                /* 0790 */  0x2C, 0x72, 0x81, 0x3A, 0xAE, 0x78, 0x24, 0x26,  // ,r.:.x$&
                /* 0798 */  0xF0, 0x51, 0xD1, 0x07, 0x08, 0x7E, 0x7E, 0xF0,  // .Q...~~.
                /* 07A0 */  0x01, 0xD7, 0x07, 0x08, 0x2E, 0x04, 0x8E, 0x82,  // ........
                /* 07A8 */  0xF8, 0x00, 0xE1, 0x90, 0x10, 0x3A, 0xE7, 0xE2,  // .....:..
                /* 07B0 */  0x8E, 0x03, 0x3E, 0xC0, 0x30, 0x88, 0x07, 0x83,  // ..>.0...
                /* 07B8 */  0x07, 0x56, 0x76, 0x94, 0xF1, 0x01, 0x02, 0x78,  // .Vv....x
                /* 07C0 */  0x8C, 0x03, 0x7F, 0x80, 0x80, 0x7B, 0xFA, 0x02,  // .....{..
                /* 07C8 */  0xD7, 0xF9, 0x01, 0x78, 0x04, 0x3F, 0x3F, 0xA0,  // ...x.??.
                /* 07D0 */  0xFF, 0xFF, 0xE7, 0x07, 0xF8, 0x87, 0x53, 0x7E,  // ......S~
                /* 07D8 */  0x7E, 0x00, 0x9E, 0x03, 0x7C, 0x14, 0x00, 0xCB,  // ~...|...
                /* 07E0 */  0x99, 0x8C, 0xCD, 0xE1, 0xA5, 0xE6, 0xB5, 0xD3,  // ........
                /* 07E8 */  0x87, 0x21, 0x76, 0x9C, 0x67, 0x47, 0x7A, 0xAE,  // .!v.gGz.
                /* 07F0 */  0x6B, 0x04, 0x24, 0xE2, 0x19, 0x02, 0x35, 0x08,  // k.$...5.
                /* 07F8 */  0xC7, 0x39, 0x36, 0xE8, 0x38, 0xC1, 0x6E, 0xD9,  // .96.8.n.
                /* 0800 */  0x0F, 0x41, 0x55, 0xA3, 0x08, 0xDE, 0xB7, 0x02,  // .AU.....
                /* 0808 */  0x16, 0xE1, 0x18, 0x81, 0x12, 0x4F, 0x21, 0xE9,  // .....O!.
                /* 0810 */  0xC7, 0x08, 0x94, 0x58, 0x38, 0x0A, 0xE2, 0x51,  // ...X8..Q
                /* 0818 */  0xFB, 0x20, 0x61, 0x1B, 0xC7, 0x08, 0xD4, 0x18,  // . a.....
                /* 0820 */  0x3D, 0xB0, 0x77, 0x3B, 0x76, 0x14, 0xE0, 0xA7,  // =.w;v...
                /* 0828 */  0x08, 0xF8, 0xA7, 0x30, 0xDC, 0xD1, 0x03, 0x1C,  // ...0....
                /* 0830 */  0x17, 0xB1, 0x43, 0x3B, 0xBB, 0x47, 0x4C, 0x63,  // ..C;.GLc
                /* 0838 */  0x9E, 0x41, 0xC4, 0x08, 0xAF, 0xAE, 0x46, 0xF3,  // .A....F.
                /* 0840 */  0x18, 0x71, 0xE7, 0x4D, 0x5F, 0x0F, 0x7D, 0xA4,  // .q.M_.}.
                /* 0848 */  0xF0, 0xA1, 0x1D, 0x73, 0xA4, 0x80, 0xF7, 0xFF,  // ...s....
                /* 0850 */  0x27, 0xF0, 0xB9, 0x11, 0x77, 0xA4, 0x80, 0x33,  // '...w..3
                /* 0858 */  0x93, 0xF3, 0xC0, 0xDC, 0x41, 0x8F, 0x25, 0xBC,  // ....A.%.
                /* 0860 */  0xAF, 0x85, 0xF8, 0x83, 0x05, 0xF0, 0x38, 0x2E,  // ......8.
                /* 0868 */  0xF9, 0x60, 0x01, 0x2E, 0x48, 0x1F, 0x2C, 0x80,  // .`..H.,.
                /* 0870 */  0xEB, 0xF9, 0xC0, 0xA7, 0x03, 0xB0, 0x5E, 0xC8,  // ......^.
                /* 0878 */  0xF8, 0xFD, 0x00, 0xC6, 0x09, 0x03, 0xC6, 0xF9,  // ........
                /* 0880 */  0x00, 0x73, 0xC3, 0x70, 0xAC, 0x95, 0xEA, 0x84,  // .s.p....
                /* 0888 */  0x81, 0x8B, 0xF5, 0xA0, 0xD0, 0x40, 0xD8, 0xF0,  // .....@..
                /* 0890 */  0x9E, 0x7F, 0x9E, 0x0C, 0xF9, 0x61, 0x86, 0x45,  // .....a.E
                /* 0898 */  0x81, 0xD3, 0xD1, 0xC2, 0x27, 0x0B, 0x87, 0xA0,  // ....'...
                /* 08A0 */  0xD0, 0x41, 0xCC, 0x27, 0x0C, 0x2E, 0xE6, 0x84,  // .A.'....
                /* 08A8 */  0x41, 0x41, 0x0C, 0xE8, 0xA4, 0x10, 0xFA, 0xFF,  // AA......
                /* 08B0 */  0x9F, 0xC3, 0x70, 0xA7, 0x4D, 0x1F, 0x1B, 0x58,  // ..p.M..X
                /* 08B8 */  0xB8, 0xFB, 0x05, 0x9D, 0x8B, 0xE7, 0xCC, 0xF1,  // ........
                /* 08C0 */  0x7C, 0x0E, 0x31, 0xAC, 0x6F, 0x26, 0xE0, 0xB9,  // |.1.o&..
                /* 08C8 */  0x52, 0xB0, 0x33, 0x8F, 0x2F, 0x04, 0xBE, 0x4D,  // R.3./..M
                /* 08D0 */  0xF2, 0x03, 0x27, 0x3B, 0x16, 0x18, 0xE5, 0x78,  // ..';...x
                /* 08D8 */  0x5F, 0x0B, 0xAD, 0xE6, 0xAE, 0x80, 0x9A, 0x11,  // _.......
                /* 08E0 */  0x86, 0xC0, 0x03, 0xF6, 0x49, 0x0C, 0x4C, 0xFA,  // ....I.L.
                /* 08E8 */  0x6E, 0x14, 0x20, 0x47, 0xE7, 0x67, 0x6E, 0x8F,  // n. G.gn.
                /* 08F0 */  0x9E, 0x1F, 0x00, 0x7C, 0xB4, 0xE3, 0xA3, 0x77,  // ...|...w
                /* 08F8 */  0x6C, 0x08, 0x1D, 0x57, 0xE0, 0x1E, 0xEE, 0x7C,  // l..W...|
                /* 0900 */  0x86, 0x02, 0xBE, 0x03, 0xF3, 0x0C, 0x9F, 0x50,  // .......P
                /* 0908 */  0xC0, 0x75, 0x7F, 0xE0, 0xE7, 0xC2, 0xFF, 0xFF,  // .u......
                /* 0910 */  0xFB, 0x03, 0xE6, 0x2C, 0x0C, 0xE3, 0x94, 0x02,  // ...,....
                /* 0918 */  0x3C, 0x46, 0xEF, 0x53, 0x0A, 0xB8, 0x0E, 0x00,  // <F.S....
                /* 0920 */  0x3E, 0xA5, 0x00, 0xD7, 0x39, 0x3E, 0xC8, 0x83,  // >...9>..
                /* 0928 */  0x07, 0xC5, 0xF7, 0x5F, 0x4F, 0xC4, 0xC6, 0x87,  // ..._O...
                /* 0930 */  0x4F, 0x2F, 0x28, 0x1E, 0xCB, 0x9B, 0x37, 0x0F,  // O/(...7.
                /* 0938 */  0x75, 0x36, 0x41, 0x47, 0x7B, 0x3D, 0x68, 0xD0,  // u6AG{=h.
                /* 0940 */  0x0F, 0x2A, 0x9E, 0x7D, 0xF8, 0xE3, 0x8B, 0xF0,  // .*.}....
                /* 0948 */  0x7C, 0xEA, 0x71, 0xB1, 0x38, 0x67, 0x13, 0x54,  // |.q.8g.T
                /* 0950 */  0x10, 0x0A, 0x1D, 0x3B, 0x7D, 0x9C, 0xE0, 0x92,  // ...;}...
                /* 0958 */  0x8E, 0x13, 0x14, 0xC4, 0x80, 0xCE, 0x7B, 0xC4,  // ......{.
                /* 0960 */  0xF3, 0x21, 0x1E, 0x7D, 0xEA, 0xF3, 0x2D, 0xE1,  // .!.}..-.
                /* 0968 */  0x38, 0x9E, 0x40, 0x12, 0xCC, 0x77, 0x12, 0xA0,  // 8.@..w..
                /* 0970 */  0x97, 0x13, 0x78, 0xA7, 0x71, 0xDC, 0x48, 0x71,  // ..x.q.Hq
                /* 0978 */  0xFF, 0xFF, 0xCB, 0x09, 0x8C, 0x03, 0x8D, 0x67,  // .......g
                /* 0980 */  0xC1, 0x10, 0xDE, 0xAC, 0xD9, 0x71, 0x1D, 0x1E,  // .....q..
                /* 0988 */  0x8C, 0xAF, 0x27, 0x30, 0xEF, 0x79, 0xE0, 0x3A,  // ..'0.y.:
                /* 0990 */  0x9E, 0x00, 0x0B, 0x99, 0x07, 0x00, 0xD4, 0xB1,  // ........
                /* 0998 */  0xD1, 0x07, 0x47, 0x7E, 0x00, 0x70, 0xE8, 0xE3,  // ..G~.p..
                /* 09A0 */  0x09, 0x7A, 0x26, 0x3E, 0x16, 0x3D, 0x95, 0xF8,  // .z&>.=..
                /* 09A8 */  0x02, 0xC0, 0xCF, 0x6E, 0x3A, 0x9F, 0x80, 0xE2,  // ...n:...
                /* 09B0 */  0x9C, 0x09, 0x9E, 0x71, 0xB0, 0x2B, 0x00, 0xFE,  // ...q.+..
                /* 09B8 */  0x84, 0x02, 0xFB, 0x48, 0x06, 0xBE, 0x89, 0xF8,  // ...H....
                /* 09C0 */  0x54, 0x71, 0x20, 0xD8, 0xD3, 0x09, 0xF8, 0xFE,  // Tq .....
                /* 09C8 */  0xFF, 0x27, 0x59, 0xE0, 0x01, 0xCB, 0x4F, 0xB2,  // .'Y...O.
                /* 09D0 */  0x80, 0x8F, 0xDB, 0x08, 0x76, 0x16, 0xCF, 0x24,  // ....v..$
                /* 09D8 */  0x8C, 0x60, 0xE4, 0xA3, 0x09, 0xEA, 0x88, 0xEC,  // .`......
                /* 09E0 */  0xA0, 0xA7, 0x30, 0xC4, 0x38, 0x1F, 0x2B, 0x8C,  // ..0.8.+.
                /* 09E8 */  0x11, 0xB9, 0xF8, 0x51, 0x6B, 0x32, 0x3E, 0x9B,  // ...Qk2>.
                /* 09F0 */  0xF9, 0xB2, 0xCE, 0x0E, 0x3F, 0x38, 0x82, 0x81,  // ....?8..
                /* 09F8 */  0x0E, 0x28, 0xA8, 0xE3, 0x98, 0xCF, 0x62, 0x80,  // .(....b.
                /* 0A00 */  0xB3, 0xFF, 0xFF, 0x59, 0x0C, 0xF8, 0x9F, 0xDD,  // ...Y....
                /* 0A08 */  0x3D, 0x7A, 0x7E, 0x6C, 0xE7, 0x20, 0x1E, 0xBD,  // =z~l. ..
                /* 0A10 */  0xC3, 0x9F, 0xC5, 0xA0, 0x87, 0x3D, 0x8B, 0x01,  // .....=..
                /* 0A18 */  0x6D, 0xC1, 0x67, 0x31, 0x50, 0xDE, 0x22, 0xE0,  // m.g1P.".
                /* 0A20 */  0x9E, 0x41, 0x81, 0xD7, 0xDA, 0x7C, 0x42, 0x81,  // .A...|B.
                /* 0A28 */  0xFF, 0xFF, 0x3F, 0xA1, 0xE0, 0xEE, 0x0C, 0x3E,  // ..?....>
                /* 0A30 */  0xA1, 0x00, 0xD7, 0x23, 0x00, 0xEE, 0x0C, 0x0A,  // ...#....
                /* 0A38 */  0x8E, 0x13, 0x00, 0xF3, 0x75, 0x03, 0xA0, 0x20,  // ....u.. 
                /* 0A40 */  0x8F, 0x00, 0xF8, 0x2B, 0xBC, 0x0F, 0x26, 0xB8,  // ...+..&.
                /* 0A48 */  0x78, 0x27, 0x15, 0x14, 0x87, 0xE3, 0x9D, 0x54,  // x'.....T
                /* 0A50 */  0x10, 0x53, 0x89, 0xFC, 0xD6, 0xE2, 0x09, 0x84,  // .S......
                /* 0A58 */  0x3F, 0xB8, 0x38, 0xEF, 0x67, 0xFC, 0x54, 0x06,  // ?.8.g.T.
                /* 0A60 */  0x43, 0xD4, 0xC1, 0x02, 0x25, 0xE3, 0x60, 0x41,  // C...%.`A
                /* 0A68 */  0x41, 0x0C, 0xE8, 0x8C, 0xA7, 0x14, 0xF4, 0xA9,  // A.......
                /* 0A70 */  0x8C, 0x5F, 0x46, 0x3C, 0xB0, 0x04, 0x33, 0x5D,  // ._F<..3]
                /* 0A78 */  0x53, 0xA0, 0x5F, 0x40, 0x70, 0x03, 0x86, 0x0B,  // S._@p...
                /* 0A80 */  0xF6, 0x20, 0x61, 0x84, 0xD7, 0x64, 0xCF, 0x03,  // . a..d..
                /* 0A88 */  0x73, 0x44, 0x01, 0x16, 0xFF, 0xFF, 0x23, 0x0A,  // sD....#.
                /* 0A90 */  0xF0, 0x90, 0x3C, 0x74, 0x94, 0xC8, 0xA1, 0x53,  // ..<t...S
                /* 0A98 */  0x10, 0x0F, 0xDD, 0x34, 0x3E, 0xA2, 0xE0, 0xC6,  // ...4>...
                /* 0AA0 */  0xCA, 0x2E, 0x04, 0xB0, 0xA2, 0x9E, 0x52, 0x40,  // ......R@
                /* 0AA8 */  0x21, 0x72, 0xF8, 0xA0, 0x19, 0xC7, 0xD1, 0x3D,  // !r.....=
                /* 0AB0 */  0xF5, 0x78, 0x1E, 0xFC, 0x4E, 0xEC, 0x63, 0x1E,  // .x..N.c.
                /* 0AB8 */  0xDC, 0x93, 0x0A, 0xEE, 0xD4, 0x88, 0x3B, 0xA9,  // ......;.
                /* 0AC0 */  0x80, 0x61, 0x8E, 0xD8, 0x53, 0x19, 0xF0, 0x3A,  // .a..S..:
                /* 0AC8 */  0x82, 0x82, 0xCF, 0xC3, 0x21, 0x05, 0x14, 0xFF,  // ....!...
                /* 0AD0 */  0xFF, 0x23, 0x28, 0x70, 0x3E, 0xA4, 0xF0, 0x63,  // .#(p>..c
                /* 0AD8 */  0x06, 0xE6, 0x6A, 0xC0, 0x8F, 0xA0, 0x98, 0x98,  // ..j.....
                /* 0AE0 */  0xCF, 0x07, 0x9D, 0x4F, 0xF8, 0xD1, 0xC0, 0x81,  // ...O....
                /* 0AE8 */  0x5E, 0x05, 0x02, 0x67, 0x67, 0x7D, 0xDC, 0xE5,  // ^..gg}..
                /* 0AF0 */  0xC0, 0x27, 0x0C, 0x13, 0x8C, 0x70, 0x9A, 0xA0,  // .'...p..
                /* 0AF8 */  0x10, 0x16, 0x4F, 0x21, 0xE9, 0x87, 0x0A, 0x94,  // ..O!....
                /* 0B00 */  0x58, 0x38, 0x0A, 0xE2, 0x43, 0x85, 0x85, 0x1C,  // X8..C...
                /* 0B08 */  0x2A, 0xD0, 0xC7, 0x28, 0x7C, 0xF0, 0x13, 0x05,  // *..(|...
                /* 0B10 */  0x28, 0x2E, 0x00, 0x8F, 0xEC, 0xE0, 0xBD, 0xAF,  // (.......
                /* 0B18 */  0xE3, 0x07, 0x89, 0xBB, 0xA8, 0x78, 0xC8, 0x3E,  // .....x.>
                /* 0B20 */  0xB0, 0x63, 0xE6, 0xE9, 0xA3, 0x05, 0x3C, 0x02,  // .c....<.
                /* 0B28 */  0x9F, 0x1E, 0xC1, 0x07, 0xEF, 0xC3, 0x14, 0xEE,  // ........
                /* 0B30 */  0xFF, 0x7F, 0x98, 0x02, 0x2E, 0x67, 0x3D, 0x1F,  // .....g=.
                /* 0B38 */  0x2C, 0xC0, 0x05, 0xEE, 0x83, 0x05, 0x70, 0xBD,  // ,.....p.
                /* 0B40 */  0xFD, 0xF8, 0x74, 0x00, 0xD6, 0xD1, 0x1E, 0xF3,  // ..t.....
                /* 0B48 */  0xF9, 0xC6, 0x79, 0x3F, 0x80, 0x71, 0x53, 0x79,  // ..y?.qSy
                /* 0B50 */  0x88, 0xF4, 0x3D, 0xC0, 0xF8, 0xEC, 0x7C, 0x80,  // ..=...|.
                /* 0B58 */  0xBD, 0x12, 0xF9, 0xEC, 0xA0, 0x33, 0x06, 0x6A,  // .....3.j
                /* 0B60 */  0x38, 0x3E, 0x57, 0x78, 0x24, 0xEC, 0x02, 0x70,  // 8>Wx$..p
                /* 0B68 */  0xAE, 0x3E, 0x50, 0xE1, 0x0E, 0x7D, 0x3E, 0x62,  // .>P..}>b
                /* 0B70 */  0xF0, 0x23, 0xBD, 0x4F, 0xB9, 0xE0, 0x3A, 0x62,  // .#.O..:b
                /* 0B78 */  0xE0, 0x43, 0x1E, 0x31, 0x40, 0xF1, 0xFF, 0x3F,  // .C.1@..?
                /* 0B80 */  0x40, 0xE0, 0x46, 0x0D, 0x8E, 0xC9, 0x3D, 0x22,  // @.F...="
                /* 0B88 */  0x9C, 0xF2, 0x99, 0xE2, 0x0E, 0x16, 0xC0, 0x65,  // .......e
                /* 0B90 */  0x1E, 0xEC, 0x60, 0x01, 0xBC, 0x22, 0x1F, 0x80,  // ..`.."..
                /* 0B98 */  0x40, 0x67, 0xE2, 0x60, 0x01, 0x74, 0xCF, 0x04,  // @g.`.t..
                /* 0BA0 */  0xC0, 0x41, 0xA1, 0x4D, 0x9F, 0x1A, 0x8D, 0x5A,  // .A.M...Z
                /* 0BA8 */  0x35, 0x28, 0x53, 0xA3, 0x4C, 0x83, 0x5A, 0x7D,  // 5(S.L.Z}
                /* 0BB0 */  0x2A, 0x35, 0x46, 0xF0, 0xDC, 0xE3, 0xB5, 0x6A,  // *5F....j
                /* 0BB8 */  0xB0, 0x0E, 0xF5, 0x66, 0x10, 0x88, 0xE3, 0xAE,  // ...f....
                /* 0BC0 */  0x58, 0x03, 0x26, 0x0F, 0x27, 0xFD, 0xFF, 0x41,  // X.&.'..A
                /* 0BC8 */  0x2C, 0x44, 0x05, 0x08, 0x93, 0xB1, 0x2E, 0x81,  // ,D......
                /* 0BD0 */  0x58, 0xCA, 0xBA, 0x04, 0x62, 0xA1, 0xEF, 0x08,  // X...b...
                /* 0BD8 */  0x81, 0x38, 0xC8, 0x6B, 0x40, 0x20, 0x8E, 0xF7,  // .8.k@ ..
                /* 0BE0 */  0xD6, 0x13, 0x88, 0x83, 0x6A, 0x01, 0x61, 0x31,  // ....j.a1
                /* 0BE8 */  0xBD, 0x80, 0xB0, 0x70, 0x6B, 0x13, 0x88, 0x23,  // ...pk..#
                /* 0BF0 */  0x99, 0x19, 0x0A, 0xFD, 0xD6, 0x09, 0xC4, 0x61,  // .......a
                /* 0BF8 */  0xED, 0x80, 0x30, 0x09, 0x7E, 0x40, 0x98, 0xF4,  // ..0.~@..
                /* 0C00 */  0x05, 0x0B, 0x8C, 0x18, 0x02, 0x61, 0xA2, 0x1C,  // .....a..
                /* 0C08 */  0x81, 0x30, 0x91, 0x92, 0x86, 0x44, 0x3D, 0x81,  // .0...D=.
                /* 0C10 */  0xB0, 0x18, 0x20, 0x54, 0x90, 0xA9, 0xD3, 0xBE,  // .. T....
                /* 0C18 */  0x40, 0x24, 0x0F, 0x44, 0x40, 0x16, 0xEC, 0x0A,  // @$.D@...
                /* 0C20 */  0x88, 0xC9, 0x07, 0x11, 0x90, 0x43, 0xDB, 0x02,  // .....C..
                /* 0C28 */  0x62, 0x12, 0x7E, 0x22, 0x02, 0x72, 0x86, 0x27,  // b.~".r.'
                /* 0C30 */  0xB2, 0x80, 0x1C, 0x08, 0x44, 0x40, 0x8E, 0xB5,  // ....D@..
                /* 0C38 */  0x5E, 0x01, 0x39, 0x24, 0x88, 0x80, 0x2C, 0x50,  // ^.9$..,P
                /* 0C40 */  0x1A, 0x10, 0x53, 0x0B, 0x22, 0x20, 0x0B, 0xB7,  // ..S." ..
                /* 0C48 */  0x06, 0xC4, 0x62, 0x80, 0x08, 0xC8, 0xC9, 0xBD,  // ..b.....
                /* 0C50 */  0x01, 0x31, 0x19, 0xAF, 0x57, 0x01, 0x59, 0x8C,  // .1..W.Y.
                /* 0C58 */  0x39, 0x20, 0x26, 0x0D, 0x44, 0x40, 0x4E, 0xE7,  // 9 &.D@N.
                /* 0C60 */  0x0E, 0x88, 0x45, 0x05, 0x11, 0x90, 0xE3, 0xCB,  // ..E.....
                /* 0C68 */  0x03, 0x62, 0x62, 0xEC, 0x0D, 0x98, 0xFA, 0x03,  // .bb.....
                /* 0C70 */  0x62, 0x01, 0x41, 0x04, 0x64, 0x89, 0x0F, 0x98,  // b.A.d...
                /* 0C78 */  0x40, 0x44, 0x30, 0x88, 0x80, 0xFC, 0xFF, 0x07   // @D0.....
            })
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    Scope (\_SB)
    {
        Name (AGRB, 0xF0000000)
        Name (ADBG, Buffer (0x0100){})
        Mutex (AM00, 0x00)
        Name (ADAT, Buffer (0x0520)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0028 */  0x0F, 0xFF, 0xFF, 0x00, 0x01, 0x01, 0x01, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0038 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0060 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x10,  // ........
            /* 0078 */  0x13, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0x02, 0x00,  // ........
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0088 */  0x00, 0x00, 0x01, 0x14, 0x17, 0xFF, 0xFF, 0x01,  // ........
            /* 0090 */  0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00B0 */  0x00, 0x00, 0x01, 0x18, 0x18, 0xFF, 0xFF, 0x03,  // ........
            /* 00B8 */  0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x19,  // ........
            /* 00C8 */  0x19, 0xFF, 0xFF, 0x04, 0x00, 0x03, 0x01, 0x00,  // ........
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00D8 */  0x00, 0x00, 0x00, 0x1A, 0x1A, 0xFF, 0xFF, 0x05,  // ........
            /* 00E0 */  0x00, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x1B,  // ........
            /* 00F0 */  0x1B, 0xFF, 0xFF, 0x06, 0x00, 0x03, 0x03, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0100 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        OperationRegion (A001, SystemIO, 0x80, 0x04)
        Field (A001, DWordAcc, NoLock, Preserve)
        {
            A002,   32
        }

        OperationRegion (A003, SystemIO, 0x80, 0x02)
        Field (A003, WordAcc, NoLock, Preserve)
        {
            A004,   16
        }

        OperationRegion (A005, SystemIO, 0x80, 0x01)
        Field (A005, ByteAcc, NoLock, Preserve)
        {
            A006,   8
        }

        Method (A007, 1, NotSerialized)
        {
            A002 = (Arg0 | 0xB0000000)
        }

        Method (ALIB, 2, Serialized)
        {
            If ((Arg0 == 0x00))
            {
                A007 (0xAA80)
                CreateWordField (Arg1, 0x00, A020)
                CreateWordField (Arg1, 0x02, A021)
                CreateDWordField (Arg1, 0x04, A022)
                Local0 = Buffer (0x0100){}
                CreateWordField (Local0, 0x00, A023)
                A023 = A020 /* \_SB_.ALIB.A020 */
                CreateWordField (Local0, 0x02, A024)
                A024 = A021 /* \_SB_.ALIB.A021 */
                CreateDWordField (Local0, 0x04, A025)
                A025 = A022 /* \_SB_.ALIB.A022 */
                A025 &= ~0x0F
                If ((DerefOf (\_SB.ADAT [0x00]) > 0x00))
                {
                    Local1 = 0x0F
                }
                Else
                {
                    Local1 = 0x01
                }

                A025 |= Local1
                A007 (0xAA81)
                Return (Local0)
            }

            If ((Arg0 == 0x01))
            {
                A007 (0xAA82)
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = A026 (Local0)
                A007 (0xAA83)
                Return (Local1)
            }

            If ((Arg0 == 0x02))
            {
                A007 (0xAA84)
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                A007 (0xAA85)
                Return (Local0)
            }

            If ((Arg0 == 0x03))
            {
                A007 (0xAA86)
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                A007 (0xAA87)
                Return (Local0)
            }

            If ((Arg0 == 0x06))
            {
                A007 (0xAA88)
                Local0 = DerefOf (Arg1 [0x04])
                Local1 = DerefOf (Arg1 [0x02])
                Local2 = A029 (Local0, Local1)
                A007 (0xAA89)
                Return (Local2)
            }

            If ((Arg0 == 0x0A))
            {
                A007 (0xAA8A)
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = A030 (Local0)
                A007 (0xAA8B)
                Return (Local1)
            }

            If ((Arg0 == 0x0B))
            {
                A007 (0xAA8C)
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = DerefOf (Arg1 [0x03])
                Local2 = DerefOf (Arg1 [0x04])
                Local2 |= (DerefOf (Arg1 [0x05]) << 0x08)
                Local2 |= (DerefOf (Arg1 [0x06]) << 0x10)
                Local2 |= (DerefOf (Arg1 [0x07]) << 0x18)
                Local3 = DerefOf (Arg1 [0x08])
                Local3 |= (DerefOf (Arg1 [0x09]) << 0x08)
                Local3 |= (DerefOf (Arg1 [0x0A]) << 0x10)
                Local3 |= (DerefOf (Arg1 [0x0B]) << 0x18)
                Local4 = DerefOf (Arg1 [0x0C])
                Local4 |= (DerefOf (Arg1 [0x0D]) << 0x08)
                Local4 |= (DerefOf (Arg1 [0x0E]) << 0x10)
                Local4 |= (DerefOf (Arg1 [0x0F]) << 0x18)
                Local5 = A031 (Local0, Local1, Local2, Local3, Local4)
                A007 (0xAA8D)
                Return (Local5)
            }

            If ((Arg0 == 0x0C))
            {
                A007 (0xAA8E)
                Local0 = A032 (Arg1)
                A007 (0xAA8F)
                Return (Local0)
            }

            If ((Arg0 == 0x10))
            {
                A007 (0xAA90)
                Local7 = Buffer (0x18){}
                CreateDWordField (Local7, 0x00, A033)
                CreateDWordField (Local7, 0x04, A034)
                CreateDWordField (Local7, 0x08, A035)
                CreateDWordField (Local7, 0x0C, A036)
                CreateDWordField (Local7, 0x10, A037)
                CreateDWordField (Local7, 0x14, A038)
                A033 = 0x00
                A034 = 0x00
                A035 = 0x00
                A036 = 0x00
                A037 = 0x00
                A038 = 0x00
                A018 (0x67, Local7)
                A007 (0xAA91)
            }

            If ((Arg0 == 0x11))
            {
                A007 (0xAA92)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A012)
                CreateDWordField (Local6, 0x04, A013)
                CreateDWordField (Local6, 0x08, A014)
                CreateDWordField (Local6, 0x0C, A015)
                CreateDWordField (Local6, 0x10, A016)
                CreateDWordField (Local6, 0x14, A017)
                A012 = 0x00
                A013 = 0x00
                A014 = 0x00
                A015 = 0x00
                A016 = 0x00
                A017 = 0x00
                A018 (0x66, Local6)
                A007 (0xAA93)
            }

            If ((Arg0 == 0x12))
            {
                A007 (0xAA94)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A039)
                CreateDWordField (Local6, 0x04, A040)
                CreateDWordField (Local6, 0x08, A041)
                CreateDWordField (Local6, 0x0C, A042)
                CreateDWordField (Local6, 0x10, A043)
                CreateDWordField (Local6, 0x14, A044)
                A039 = 0x00
                A040 = 0x00
                A041 = 0x00
                A042 = 0x00
                A043 = 0x00
                A044 = 0x00
                Local5 = A045 (Arg1)
                If ((0xFF != Local5))
                {
                    A039 = Local5
                    A040 = 0x02
                    A046 (0x24, Local6)
                }

                A007 (0xAA95)
            }

            If ((Arg0 == 0x13))
            {
                A007 (0xAA96)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A047)
                CreateDWordField (Local6, 0x04, A048)
                CreateDWordField (Local6, 0x08, A049)
                CreateDWordField (Local6, 0x0C, A050)
                CreateDWordField (Local6, 0x10, A051)
                CreateDWordField (Local6, 0x14, A052)
                A047 = 0x00
                A048 = 0x00
                A049 = 0x00
                A050 = 0x00
                A051 = 0x00
                A052 = 0x00
                Local5 = A045 (Arg1)
                If ((0xFF != Local5))
                {
                    A047 = Local5
                    A048 = 0x01
                    A046 (0x24, Local6)
                }

                A007 (0xAA97)
            }

            If ((Arg0 == 0xAA))
            {
                A007 (0xAA98)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A053)
                CreateDWordField (Local6, 0x04, A054)
                CreateDWordField (Local6, 0x08, A055)
                CreateDWordField (Local6, 0x0C, A056)
                CreateDWordField (Local6, 0x10, A057)
                CreateDWordField (Local6, 0x14, A058)
                A053 = 0x00
                A054 = 0x00
                A055 = 0x00
                A056 = 0x00
                A057 = 0x00
                A058 = 0x00
                A059 (Arg1)
                A007 (0xAA99)
            }

            Return (0x00)
        }

        Method (A029, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x0B))
            {
                Local1 = A110 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    Local2 = A111 (Local0, Arg0)
                    Break
                }

                Local0++
            }

            Local7 = Buffer (0x0A){}
            CreateWordField (Local7, 0x00, A023)
            CreateByteField (Local7, 0x02, A061)
            CreateByteField (Local7, 0x03, A112)
            A023 = 0x04
            A061 = 0x00
            If ((Local2 == 0x00))
            {
                A112 = 0x00
            }
            Else
            {
                A112 = 0x01
            }

            Return (Local7)
        }

        Method (A110, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A106 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A106 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A106 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A106 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A106 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A106 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A106 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A106 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A106 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A106 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A106 (Arg1))
            }
        }

        Method (A111, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A107 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A107 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A107 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A107 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A107 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A107 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A107 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A107 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A107 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A107 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A107 (Arg1))
            }
        }

        Name (AD00, 0x00)
        Name (DK00, 0x00)
        Method (A026, 1, NotSerialized)
        {
            AD00 = Arg0
            A011 ()
        }

        Method (A030, 1, NotSerialized)
        {
            DK00 = Arg0
        }

        Method (A031, 5, NotSerialized)
        {
        }

        Name (AP01, 0x00)
        Name (AP02, 0x00)
        Name (AP03, 0x00)
        Name (AP05, 0x00)
        Name (AP0B, 0xFF)
        Name (AP10, 0x00)
        Method (A060, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100){}
            CreateWordField (Local7, 0x00, A023)
            A023 = 0x03
            CreateByteField (Local7, 0x02, A061)
            A061 = 0x01
            If ((DerefOf (\_SB.ADAT [0x00]) == 0x01))
            {
                A061 = 0x02
                Return (Local7)
            }

            If ((DerefOf (\_SB.ADAT [0x00]) == 0x00))
            {
                A061 = 0x01
                Return (Local7)
            }

            A062 (Arg0)
            If ((AP05 != 0x01))
            {
                Return (Local7)
            }

            A063 ()
            A061 = 0x02
            Return (Local7)
        }

        Method (A064, 0, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            If ((AP05 != 0x01))
            {
                Return (0x00)
            }

            A063 ()
        }

        Method (A065, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                AP01 = 0x00
            }
        }

        Method (A066, 1, NotSerialized)
        {
            AP10 = 0x01
        }

        Method (A067, 1, NotSerialized)
        {
            AP05 = Arg0
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            Local1 = AP0B /* \_SB_.AP0B */
            If ((AP05 == 0x00))
            {
                Local0 = 0x00
                While ((Local0 < 0x0B))
                {
                    A068 (Local0)
                    Local0++
                }

                AP0B = 0x00
            }

            A063 ()
            AP0B = Local1
            Local7 = Buffer (0x0100){}
            Local7 [0x00] = 0x03
            Local7 [0x01] = 0x00
            Local7 [0x02] = 0x00
            Return (Local7)
        }

        Method (A069, 0, NotSerialized)
        {
            If ((AP0B != 0xFF))
            {
                Return (AP0B) /* \_SB_.AP0B */
            }

            Return (AD00) /* \_SB_.AD00 */
        }

        Method (A062, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Local0 = 0x00
            While ((Local0 < 0x0B))
            {
                If ((A070 (Local0, AP06) == 0x01))
                {
                    If (((AP07 & AP08) == 0x01))
                    {
                        Local1 = A071 (Local0)
                        A072 (Local0, Local1)
                    }
                    Else
                    {
                        A072 (Local0, AP0A)
                    }

                    Break
                }

                Local0++
            }
        }

        Method (A073, 0, NotSerialized)
        {
            AP02 = 0x01
            Local0 = 0x00
            While ((Local0 < 0x0B))
            {
                Local1 = A074 (Local0)
                If ((Local1 > AP02))
                {
                    AP02 = Local1
                }

                Local0++
            }
        }

        Method (A075, 0, NotSerialized)
        {
            AP03 = 0x00
            Local0 = 0x00
            While ((Local0 < 0x0B))
            {
                Local1 = A076 (Local0)
                If ((Local1 > AP03))
                {
                    AP03 = Local1
                }

                Local0++
            }
        }

        Method (A063, 0, NotSerialized)
        {
            A075 ()
            A073 ()
            If ((AP02 != AP01))
            {
                A019 (AP02, AP01)
            }

            If ((AP02 > AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            Local0 = 0x00
            While ((Local0 < 0x0B))
            {
                Local1 = A074 (Local0)
                Local2 = A077 (Local0)
                If ((Local1 != Local2))
                {
                    A078 (Local0, Local1)
                }
                ElseIf ((AP10 == 0x01))
                {
                    A078 (Local0, Local1)
                }

                Local0++
            }

            If ((AP02 < AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }
            ElseIf ((AP10 == 0x01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            AP10 = 0x00
        }

        Method (A078, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A079 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A079 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A079 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A079 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A079 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A079 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A079 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A079 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A079 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A079 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A079 (Arg1))
            }
        }

        Method (A077, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A080 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A080 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A080 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A080 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A080 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A080 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A080 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A080 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A080 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A080 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A080 ())
            }
        }

        Method (A074, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A081 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A081 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A081 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A081 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A081 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A081 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A081 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A081 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A081 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A081 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A081 ())
            }
        }

        Method (A076, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A082 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A082 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A082 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A082 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A082 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A082 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A082 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A082 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A082 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A082 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A082 ())
            }
        }

        Method (A071, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A083 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A083 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A083 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A083 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A083 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A083 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A083 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A083 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A083 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A083 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A083 ())
            }
        }

        Method (A072, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A084 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A084 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A084 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A084 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A084 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A084 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A084 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A084 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A084 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A084 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A084 (Arg1))
            }
        }

        Method (A070, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A085 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A085 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A085 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A085 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A085 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A085 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A085 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A085 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A085 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A085 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A085 (Arg1))
            }
        }

        Method (A068, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A086 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A086 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A086 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A086 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A086 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A086 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A086 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A086 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A086 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A086 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A086 ())
            }
        }

        OperationRegion (A155, SystemMemory, AGRB, 0x1000)
        Field (A155, DWordAcc, Lock, Preserve)
        {
            Offset (0xA0), 
            A156,   32
        }

        BankField (A155, A156, 0x03B10530, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A140,   32
        }

        BankField (A155, A156, 0x03B1057C, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A133,   32
        }

        BankField (A155, A156, 0x03B109C4, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A134,   32
        }

        BankField (A155, A156, 0x03B109C8, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A135,   32
        }

        BankField (A155, A156, 0x03B109CC, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A136,   32
        }

        BankField (A155, A156, 0x03B109D0, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A137,   32
        }

        BankField (A155, A156, 0x03B109D4, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A138,   32
        }

        BankField (A155, A156, 0x03B109D8, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A139,   32
        }

        BankField (A155, A156, 0x13B00084, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A115,   32
        }

        BankField (A155, A156, 0x11140280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A116,   32
        }

        BankField (A155, A156, 0x11141280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A117,   32
        }

        BankField (A155, A156, 0x11142280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A118,   32
        }

        BankField (A155, A156, 0x11143280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A119,   32
        }

        BankField (A155, A156, 0x11240280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A120,   32
        }

        BankField (A155, A156, 0x11241280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A121,   32
        }

        BankField (A155, A156, 0x11242280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A122,   32
        }

        BankField (A155, A156, 0x11143280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A123,   32
        }

        BankField (A155, A156, 0x11144280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A124,   32
        }

        BankField (A155, A156, 0x11145280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A125,   32
        }

        BankField (A155, A156, 0x11146280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A126,   32
        }

        BankField (A155, A156, 0x0C910554, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A154,   32
        }

        BankField (A155, A156, 0x0C9109C8, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A147,   32
        }

        BankField (A155, A156, 0x0C9109CC, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A148,   32
        }

        BankField (A155, A156, 0x0C9109D0, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A149,   32
        }

        BankField (A155, A156, 0x0C9109D4, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A150,   32
        }

        BankField (A155, A156, 0x0C9109D8, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A151,   32
        }

        BankField (A155, A156, 0x0C9109DC, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A152,   32
        }

        BankField (A155, A156, 0x0C9109E0, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A153,   32
        }

        BankField (A155, A156, 0x11140294, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A162,   32
        }

        BankField (A155, A156, 0x11141294, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A163,   32
        }

        BankField (A155, A156, 0x11142294, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A164,   32
        }

        BankField (A155, A156, 0x11143294, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A165,   32
        }

        Method (A113, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A094 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A094 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A094 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A094 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A094 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A094 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A094 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A094 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A094 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A094 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A094 (Arg1))
            }
        }

        Method (A114, 2, NotSerialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            If ((Arg1 == 0x01))
            {
                If ((Arg0 == 0x00))
                {
                    Local0 = 0x00190300
                }

                If ((Arg0 == 0x01))
                {
                    Local0 = 0x001A0300
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = 0x001B0300
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = 0x001C0300
                }

                If ((Arg0 == 0x04))
                {
                    Local0 = 0x001D0300
                }

                If ((Arg0 == 0x05))
                {
                    Local0 = 0x001E0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x001F0300
                }

                If ((Arg0 == 0x07))
                {
                    Local0 = 0x00090300
                }

                If ((Arg0 == 0x08))
                {
                    Local0 = 0x000A0300
                }

                If ((Arg0 == 0x09))
                {
                    Local0 = 0x000B0300
                }

                If ((Arg0 == 0x0A))
                {
                    Local0 = 0x000C0300
                }

                Local1 = A115 /* \_SB_.A115 */
                Local1 &= 0xFF00FCFF
                A115 = (Local0 | Local1)
                Local1 = A115 /* \_SB_.A115 */
                A115 = (0xFFFFFDFF & Local1)
            }
            ElseIf ((Arg1 == 0x00))
            {
                If ((Arg0 == 0x00))
                {
                    Local1 = A116 /* \_SB_.A116 */
                    A116 = (0x00400000 | Local1)
                    Local1 = A116 /* \_SB_.A116 */
                    A116 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x01))
                {
                    Local1 = A117 /* \_SB_.A117 */
                    A117 = (0x00400000 | Local1)
                    Local1 = A117 /* \_SB_.A117 */
                    A117 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x02))
                {
                    Local1 = A118 /* \_SB_.A118 */
                    A118 = (0x00400000 | Local1)
                    Local1 = A118 /* \_SB_.A118 */
                    A118 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x03))
                {
                    Local1 = A119 /* \_SB_.A119 */
                    A119 = (0x00400000 | Local1)
                    Local1 = A119 /* \_SB_.A119 */
                    A119 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x04))
                {
                    Local1 = A120 /* \_SB_.A120 */
                    A120 = (0x00400000 | Local1)
                    Local1 = A120 /* \_SB_.A120 */
                    A120 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x05))
                {
                    Local1 = A121 /* \_SB_.A121 */
                    A121 = (0x00400000 | Local1)
                    Local1 = A121 /* \_SB_.A121 */
                    A121 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x06))
                {
                    Local1 = A122 /* \_SB_.A122 */
                    A122 = (0x00400000 | Local1)
                    Local1 = A122 /* \_SB_.A122 */
                    A122 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x07))
                {
                    Local1 = A123 /* \_SB_.A123 */
                    A123 = (0x00400000 | Local1)
                    Local1 = A123 /* \_SB_.A123 */
                    A123 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x08))
                {
                    Local1 = A124 /* \_SB_.A124 */
                    A124 = (0x00400000 | Local1)
                    Local1 = A124 /* \_SB_.A124 */
                    A124 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x09))
                {
                    Local1 = A125 /* \_SB_.A125 */
                    A125 = (0x00400000 | Local1)
                    Local1 = A125 /* \_SB_.A125 */
                    A125 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x0A))
                {
                    Local1 = A126 /* \_SB_.A126 */
                    A126 = (0x00400000 | Local1)
                    Local1 = A126 /* \_SB_.A126 */
                    A126 = (0xFFBFFFFF & Local1)
                }
            }

            Release (\_SB.AM00)
        }

        Method (A010, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x0B))
            {
                Local1 = A113 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    A114 (Local0, Arg1)
                    Break
                }

                Local0++
            }
        }

        Method (A045, 1, NotSerialized)
        {
            Local0 = 0xFF
            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR0.A098 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR1.A098 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR2.A098 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR3.A098 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR1.ABR4.A098 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR1.ABR5.A098 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR1.ABR6.A098 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR1.ABR7.A098 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR1.ABR8.A098 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR1.ABR9.A098 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR1.ABRA.A098 (Arg0)
            }

            Return (Local0)
        }

        Method (A018, 2, Serialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            CreateDWordField (Arg1, 0x00, A127)
            CreateDWordField (Arg1, 0x04, A128)
            CreateDWordField (Arg1, 0x08, A129)
            CreateDWordField (Arg1, 0x0C, A130)
            CreateDWordField (Arg1, 0x10, A131)
            CreateDWordField (Arg1, 0x14, A132)
            A133 = 0x00
            While ((A133 != 0x00)){}
            A134 = A127 /* \_SB_.A018.A127 */
            A135 = A128 /* \_SB_.A018.A128 */
            A136 = A129 /* \_SB_.A018.A129 */
            A137 = A130 /* \_SB_.A018.A130 */
            A138 = A131 /* \_SB_.A018.A131 */
            A139 = A132 /* \_SB_.A018.A132 */
            A140 = Arg0
            While ((A133 == 0x00)){}
            Release (\_SB.AM00)
        }

        Method (A046, 2, Serialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            CreateDWordField (Arg1, 0x00, A141)
            CreateDWordField (Arg1, 0x04, A142)
            CreateDWordField (Arg1, 0x08, A143)
            CreateDWordField (Arg1, 0x0C, A144)
            CreateDWordField (Arg1, 0x10, A145)
            CreateDWordField (Arg1, 0x14, A146)
            Local0 = (0x80000000 & A147) /* \_SB_.A147 */
            While ((Local0 == 0x00))
            {
                Local0 = (0x80000000 & A147) /* \_SB_.A147 */
            }

            A148 = A141 /* \_SB_.A046.A141 */
            A149 = A142 /* \_SB_.A046.A142 */
            A150 = A143 /* \_SB_.A046.A143 */
            A151 = A144 /* \_SB_.A046.A144 */
            A152 = A145 /* \_SB_.A046.A145 */
            A153 = A146 /* \_SB_.A046.A146 */
            Local1 = (Arg0 & 0xFF)
            Local1 <<= 0x08
            A147 = Local1
            A154 = 0xFFFFFFFF
            Local0 = (0x80000000 & A147) /* \_SB_.A147 */
            While ((Local0 == 0x00))
            {
                Local0 = (0x80000000 & A147) /* \_SB_.A147 */
            }

            Release (\_SB.AM00)
        }

        Method (AMNR, 1, NotSerialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            BankField (A155, A156, Arg0, DWordAcc, NoLock, Preserve)
            {
                Offset (0xA4), 
                A157,   32
            }

            Release (\_SB.AM00)
            Return (A157) /* \_SB_.AMNR.A157 */
        }

        Method (AMNW, 2, NotSerialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            BankField (A155, A156, Arg0, DWordAcc, NoLock, Preserve)
            {
                Offset (0xA4), 
                A158,   32
            }

            A158 = Arg1
            Release (\_SB.AM00)
        }

        Method (A032, 1, Serialized)
        {
            CreateWordField (Arg0, 0x00, A159)
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            Local0 = 0x02
            While ((Local0 < A159))
            {
                Local1 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x10)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x18)
                Local0++
                A012 = 0x00
                A013 = 0x00
                A014 = 0x00
                A015 = 0x00
                A016 = 0x00
                A017 = 0x00
                If ((Local1 == 0x01))
                {
                    A012 = Local2
                    A018 (0x4E, Local7)
                }

                If ((Local1 == 0x03))
                {
                    A012 = Local2
                    A018 (0x3F, Local7)
                }

                If ((Local1 == 0x04))
                {
                    A012 = Local2
                    A018 (0x3E, Local7)
                }

                If ((Local1 == 0x05))
                {
                    A012 = Local2
                    A018 (0x4F, Local7)
                }

                If ((Local1 == 0x06))
                {
                    A012 = Local2
                    A018 (0x3E, Local7)
                }

                If ((Local1 == 0x07))
                {
                    A012 = Local2
                    A018 (0x5F, Local7)
                }

                If ((Local1 == 0x08))
                {
                    A012 = Local2
                    A018 (0x61, Local7)
                }

                If ((Local1 == 0x0B))
                {
                    A012 = Local2
                    A018 (0x3C, Local7)
                }

                If ((Local1 == 0x0C))
                {
                    A012 = Local2
                    A018 (0x3D, Local7)
                }

                If ((Local1 == 0x10))
                {
                    A012 = Local2
                    A018 (0x3F, Local7)
                }

                If ((Local1 == 0x11))
                {
                    A012 = Local2
                    A018 (0x2F, Local7)
                }

                If ((Local1 == 0x13))
                {
                    A012 = Local2
                    A018 (0x60, Local7)
                }

                If ((Local1 == 0x20))
                {
                    A012 = Local2
                    A018 (0x50, Local7)
                }

                If ((Local1 == 0x21))
                {
                    A012 = Local2
                    A018 (0x51, Local7)
                }

                If ((Local1 == 0x22))
                {
                    A012 = Local2
                    A018 (0x52, Local7)
                }

                If ((Local1 == 0x23))
                {
                    A012 = Local2
                    A018 (0x53, Local7)
                }

                If ((Local1 == 0x24))
                {
                    A012 = Local2
                    A018 (0x54, Local7)
                }

                If ((Local1 == 0x25))
                {
                    A012 = Local2
                    A018 (0x55, Local7)
                }

                If ((Local1 == 0x26))
                {
                    A012 = Local2
                    A018 (0x56, Local7)
                }

                If ((Local1 == 0x27))
                {
                    A012 = Local2
                    A018 (0x57, Local7)
                }

                If ((Local1 == 0x28))
                {
                    A012 = Local2
                    A018 (0x58, Local7)
                }

                If ((Local1 == 0x29))
                {
                    A012 = Local2
                    A018 (0x59, Local7)
                }

                If ((Local1 == 0x2A))
                {
                    A012 = Local2
                    A018 (0x5A, Local7)
                }

                If ((Local1 == 0x2B))
                {
                    A012 = Local2
                    A018 (0x5B, Local7)
                }

                If ((Local1 == 0x2C))
                {
                    A012 = Local2
                    A018 (0x5C, Local7)
                }

                If ((Local1 == 0x2D))
                {
                    A012 = Local2
                    A018 (0x5D, Local7)
                }

                If ((Local1 == 0x2E))
                {
                    A012 = Local2
                    A018 (0x5E, Local7)
                }

                If ((Local1 == 0x30))
                {
                    A012 = Local2
                    A018 (0x6B, Local7)
                    Local3 = Buffer (0x08){}
                    CreateDWordField (Local3, 0x00, A160)
                    CreateDWordField (Local3, 0x04, A161)
                    A160 = A134 /* \_SB_.A134 */
                    A161 = A135 /* \_SB_.A135 */
                    Return (Local3)
                }

                If ((Local1 == 0x31))
                {
                    A012 = Local2
                    A018 (0x6C, Local7)
                }

                If ((Local1 == 0x32))
                {
                    A012 = Local2
                    A018 (0x6D, Local7)
                }
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x8B)  // _UID: Unique ID
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A099, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A099, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A100,   2, 
                        ,   2, 
                    A101,   1, 
                    A102,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A103,   1, 
                    Offset (0x88), 
                    A104,   4, 
                        ,   1, 
                    A105,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR0.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR0.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A090 (0x00)
                    Name (A091, 0x00)
                    A090 (0x01)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A096 (Local0, 0x00)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), 0x00)
                                            A097 (0x64, Local5, 0x00)
                                            A097 (0x67, 0x00, 0x00)
                                            A097 (0x66, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A098, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR0.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR0.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A109, 2, NotSerialized)
                {
                    If ((A096 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A096 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A109 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A108 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A108 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A108, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR0.A096.ADRR */
                }

                Method (A106, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A094 (Arg0))
                }

                Method (A107, 1, NotSerialized)
                {
                    Name (A091, 0x00)
                    Local2 = 0x00
                    A091 = A100 /* \_SB_.AWR0.ABR0.A100 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A101 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A090 (0x00)
                        Local0 = A096 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A108 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A108 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A101 = 0x01
                        Local0 = 0x05
                    }

                    A100 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A100 = A091 /* \_SB_.AWR0.ABR0.A107.A091 */
                    If ((A091 != 0x00))
                    {
                        A090 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A099, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A099, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A100,   2, 
                        ,   2, 
                    A101,   1, 
                    A102,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A103,   1, 
                    Offset (0x88), 
                    A104,   4, 
                        ,   1, 
                    A105,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR1.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR1.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A090 (0x00)
                    Name (A091, 0x00)
                    A090 (0x01)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A096 (Local0, 0x00)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), 0x00)
                                            A097 (0x64, Local5, 0x00)
                                            A097 (0x67, 0x00, 0x00)
                                            A097 (0x66, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A098, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR1.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR1.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A109, 2, NotSerialized)
                {
                    If ((A096 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A096 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A109 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A108 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A108 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A108, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR1.A096.ADRR */
                }

                Method (A106, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A094 (Arg0))
                }

                Method (A107, 1, NotSerialized)
                {
                    Name (A091, 0x00)
                    Local2 = 0x00
                    A091 = A100 /* \_SB_.AWR0.ABR1.A100 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A101 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A090 (0x00)
                        Local0 = A096 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A108 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A108 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A101 = 0x01
                        Local0 = 0x05
                    }

                    A100 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A100 = A091 /* \_SB_.AWR0.ABR1.A107.A091 */
                    If ((A091 != 0x00))
                    {
                        A090 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A099, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A099, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A100,   2, 
                        ,   2, 
                    A101,   1, 
                    A102,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A103,   1, 
                    Offset (0x88), 
                    A104,   4, 
                        ,   1, 
                    A105,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR2.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR2.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A090 (0x00)
                    Name (A091, 0x00)
                    A090 (0x01)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A096 (Local0, 0x00)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), 0x00)
                                            A097 (0x64, Local5, 0x00)
                                            A097 (0x67, 0x00, 0x00)
                                            A097 (0x66, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A098, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR2.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR2.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A109, 2, NotSerialized)
                {
                    If ((A096 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A096 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A109 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A108 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A108 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A108, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR2.A096.ADRR */
                }

                Method (A106, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A094 (Arg0))
                }

                Method (A107, 1, NotSerialized)
                {
                    Name (A091, 0x00)
                    Local2 = 0x00
                    A091 = A100 /* \_SB_.AWR0.ABR2.A100 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A101 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A090 (0x00)
                        Local0 = A096 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A108 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A108 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A101 = 0x01
                        Local0 = 0x05
                    }

                    A100 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A100 = A091 /* \_SB_.AWR0.ABR2.A107.A091 */
                    If ((A091 != 0x00))
                    {
                        A090 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A099, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A099, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A100,   2, 
                        ,   2, 
                    A101,   1, 
                    A102,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A103,   1, 
                    Offset (0x88), 
                    A104,   4, 
                        ,   1, 
                    A105,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR3.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR3.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A090 (0x00)
                    Name (A091, 0x00)
                    A090 (0x01)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A096 (Local0, 0x00)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), 0x00)
                                            A097 (0x64, Local5, 0x00)
                                            A097 (0x67, 0x00, 0x00)
                                            A097 (0x66, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A098, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR3.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR3.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A109, 2, NotSerialized)
                {
                    If ((A096 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A096 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A109 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A108 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A108 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A108, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR3.A096.ADRR */
                }

                Method (A106, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A094 (Arg0))
                }

                Method (A107, 1, NotSerialized)
                {
                    Name (A091, 0x00)
                    Local2 = 0x00
                    A091 = A100 /* \_SB_.AWR0.ABR3.A100 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A101 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A090 (0x00)
                        Local0 = A096 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A108 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A108 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A101 = 0x01
                        Local0 = 0x05
                    }

                    A100 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A100 = A091 /* \_SB_.AWR0.ABR3.A107.A091 */
                    If ((A091 != 0x00))
                    {
                        A090 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Device (AWR1)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x8C)  // _UID: Unique ID
            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A099, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A099, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A100,   2, 
                        ,   2, 
                    A101,   1, 
                    A102,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A103,   1, 
                    Offset (0x88), 
                    A104,   4, 
                        ,   1, 
                    A105,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR4.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR4.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR4.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR4.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR4.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR4.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR4.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR4.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A090 (0x00)
                    Name (A091, 0x00)
                    A090 (0x01)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A096 (Local0, 0x00)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), 0x00)
                                            A097 (0x64, Local5, 0x00)
                                            A097 (0x67, 0x00, 0x00)
                                            A097 (0x66, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A098, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR1.ABR4.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR1.ABR4.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A109, 2, NotSerialized)
                {
                    If ((A096 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A096 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A109 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A108 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A108 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A108, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR4.A096.ADRR */
                }

                Method (A106, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A094 (Arg0))
                }

                Method (A107, 1, NotSerialized)
                {
                    Name (A091, 0x00)
                    Local2 = 0x00
                    A091 = A100 /* \_SB_.AWR1.ABR4.A100 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A101 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A090 (0x00)
                        Local0 = A096 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A108 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A108 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A101 = 0x01
                        Local0 = 0x05
                    }

                    A100 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A100 = A091 /* \_SB_.AWR1.ABR4.A107.A091 */
                    If ((A091 != 0x00))
                    {
                        A090 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR5)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x85)  // _UID: Unique ID
                Name (AB12, 0x84)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A099, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A099, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A100,   2, 
                        ,   2, 
                    A101,   1, 
                    A102,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A103,   1, 
                    Offset (0x88), 
                    A104,   4, 
                        ,   1, 
                    A105,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR5.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR5.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR5.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR5.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR5.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR5.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR5.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR5.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A090 (0x00)
                    Name (A091, 0x00)
                    A090 (0x01)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A096 (Local0, 0x00)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), 0x00)
                                            A097 (0x64, Local5, 0x00)
                                            A097 (0x67, 0x00, 0x00)
                                            A097 (0x66, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A098, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR1.ABR5.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR1.ABR5.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A109, 2, NotSerialized)
                {
                    If ((A096 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A096 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A109 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A108 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A108 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A108, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR5.A096.ADRR */
                }

                Method (A106, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A094 (Arg0))
                }

                Method (A107, 1, NotSerialized)
                {
                    Name (A091, 0x00)
                    Local2 = 0x00
                    A091 = A100 /* \_SB_.AWR1.ABR5.A100 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A101 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A090 (0x00)
                        Local0 = A096 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A108 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A108 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A101 = 0x01
                        Local0 = 0x05
                    }

                    A100 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A100 = A091 /* \_SB_.AWR1.ABR5.A107.A091 */
                    If ((A091 != 0x00))
                    {
                        A090 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR6)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x86)  // _UID: Unique ID
                Name (AB12, 0x98)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A099, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A099, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A100,   2, 
                        ,   2, 
                    A101,   1, 
                    A102,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A103,   1, 
                    Offset (0x88), 
                    A104,   4, 
                        ,   1, 
                    A105,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR6.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR6.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR6.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR6.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR6.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR6.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR6.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR6.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A090 (0x00)
                    Name (A091, 0x00)
                    A090 (0x01)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A096 (Local0, 0x00)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), 0x00)
                                            A097 (0x64, Local5, 0x00)
                                            A097 (0x67, 0x00, 0x00)
                                            A097 (0x66, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A098, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR1.ABR6.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR1.ABR6.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A109, 2, NotSerialized)
                {
                    If ((A096 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A096 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A109 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A108 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A108 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A108, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR6.A096.ADRR */
                }

                Method (A106, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A094 (Arg0))
                }

                Method (A107, 1, NotSerialized)
                {
                    Name (A091, 0x00)
                    Local2 = 0x00
                    A091 = A100 /* \_SB_.AWR1.ABR6.A100 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A101 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A090 (0x00)
                        Local0 = A096 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A108 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A108 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A101 = 0x01
                        Local0 = 0x05
                    }

                    A100 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A100 = A091 /* \_SB_.AWR1.ABR6.A107.A091 */
                    If ((A091 != 0x00))
                    {
                        A090 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR7)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x87)  // _UID: Unique ID
                Name (AB12, 0xAC)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A099, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A099, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A100,   2, 
                        ,   2, 
                    A101,   1, 
                    A102,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A103,   1, 
                    Offset (0x88), 
                    A104,   4, 
                        ,   1, 
                    A105,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR7.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR7.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR7.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR7.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR7.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR7.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR7.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR7.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A090 (0x00)
                    Name (A091, 0x00)
                    A090 (0x01)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A096 (Local0, 0x00)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), 0x00)
                                            A097 (0x64, Local5, 0x00)
                                            A097 (0x67, 0x00, 0x00)
                                            A097 (0x66, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A098, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR1.ABR7.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR1.ABR7.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A109, 2, NotSerialized)
                {
                    If ((A096 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A096 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A109 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A108 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A108 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A108, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR7.A096.ADRR */
                }

                Method (A106, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A094 (Arg0))
                }

                Method (A107, 1, NotSerialized)
                {
                    Name (A091, 0x00)
                    Local2 = 0x00
                    A091 = A100 /* \_SB_.AWR1.ABR7.A100 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A101 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A090 (0x00)
                        Local0 = A096 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A108 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A108 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A101 = 0x01
                        Local0 = 0x05
                    }

                    A100 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A100 = A091 /* \_SB_.AWR1.ABR7.A107.A091 */
                    If ((A091 != 0x00))
                    {
                        A090 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR8)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x88)  // _UID: Unique ID
                Name (AB12, 0xC0)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A099, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A099, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A100,   2, 
                        ,   2, 
                    A101,   1, 
                    A102,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A103,   1, 
                    Offset (0x88), 
                    A104,   4, 
                        ,   1, 
                    A105,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR8.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR8.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A090 (0x00)
                    Name (A091, 0x00)
                    A090 (0x01)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A096 (Local0, 0x00)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), 0x00)
                                            A097 (0x64, Local5, 0x00)
                                            A097 (0x67, 0x00, 0x00)
                                            A097 (0x66, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A098, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR1.ABR8.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR1.ABR8.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A109, 2, NotSerialized)
                {
                    If ((A096 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A096 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A109 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A108 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A108 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A108, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR8.A096.ADRR */
                }

                Method (A106, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A094 (Arg0))
                }

                Method (A107, 1, NotSerialized)
                {
                    Name (A091, 0x00)
                    Local2 = 0x00
                    A091 = A100 /* \_SB_.AWR1.ABR8.A100 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A101 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A090 (0x00)
                        Local0 = A096 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A108 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A108 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A101 = 0x01
                        Local0 = 0x05
                    }

                    A100 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A100 = A091 /* \_SB_.AWR1.ABR8.A107.A091 */
                    If ((A091 != 0x00))
                    {
                        A090 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR9)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x89)  // _UID: Unique ID
                Name (AB12, 0xD4)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A099, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A099, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A100,   2, 
                        ,   2, 
                    A101,   1, 
                    A102,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A103,   1, 
                    Offset (0x88), 
                    A104,   4, 
                        ,   1, 
                    A105,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR9.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR9.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A090 (0x00)
                    Name (A091, 0x00)
                    A090 (0x01)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A096 (Local0, 0x00)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), 0x00)
                                            A097 (0x64, Local5, 0x00)
                                            A097 (0x67, 0x00, 0x00)
                                            A097 (0x66, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A098, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR1.ABR9.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR1.ABR9.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A109, 2, NotSerialized)
                {
                    If ((A096 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A096 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A109 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A108 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A108 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A108, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR9.A096.ADRR */
                }

                Method (A106, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A094 (Arg0))
                }

                Method (A107, 1, NotSerialized)
                {
                    Name (A091, 0x00)
                    Local2 = 0x00
                    A091 = A100 /* \_SB_.AWR1.ABR9.A100 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A101 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A090 (0x00)
                        Local0 = A096 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A108 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A108 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A101 = 0x01
                        Local0 = 0x05
                    }

                    A100 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A100 = A091 /* \_SB_.AWR1.ABR9.A107.A091 */
                    If ((A091 != 0x00))
                    {
                        A090 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRA)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8A)  // _UID: Unique ID
                Name (AB12, 0xE8)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A099, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A099, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A092,   8, 
                    A093,   8, 
                    Offset (0x68), 
                    A100,   2, 
                        ,   2, 
                    A101,   1, 
                    A102,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A103,   1, 
                    Offset (0x88), 
                    A104,   4, 
                        ,   1, 
                    A105,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A087, 0, NotSerialized)
                {
                    Local0 = A069 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRA.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRA.AB0E */
                    }
                }

                Method (A082, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A088, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRA.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A081, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRA.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRA.AB0E */
                    }

                    Local0 = A088 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRA.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A087 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A080, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRA.AB02 */
                }

                Method (A083, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRA.AB00 */
                }

                Method (A079, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A089 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A090 (0x00)
                    Name (A091, 0x00)
                    A090 (0x01)
                }

                Method (A084, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A085, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A092) && (Local0 <= A093)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A094, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A086, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A089, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A095, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A096 (Local0, 0x00)
                    Local2 = A096 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A096 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A096 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A097 (0x63, (Local4 & 0xFFFFFFF0), 0x00)
                                            A097 (0x64, Local5, 0x00)
                                            A097 (0x67, 0x00, 0x00)
                                            A097 (0x66, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A097 (0x67, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A098, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR1.ABRA.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR1.ABRA.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A109, 2, NotSerialized)
                {
                    If ((A096 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A096 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A096 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A090, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A096 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A096 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A109 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A096 (Local0, (Local1 + 0x10))
                                A108 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A108 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A108, 3, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A096, 2, Serialized)
                {
                    Local0 = (AGRB + (A093 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRA.A096.ADRR */
                }

                Method (A106, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A094 (Arg0))
                }

                Method (A107, 1, NotSerialized)
                {
                    Name (A091, 0x00)
                    Local2 = 0x00
                    A091 = A100 /* \_SB_.AWR1.ABRA.A100 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A101 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A090 (0x00)
                        Local0 = A096 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A108 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A096 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A108 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A101 = 0x01
                        Local0 = 0x05
                    }

                    A100 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A096 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A100 = A091 /* \_SB_.AWR1.ABRA.A107.A091 */
                    If ((A091 != 0x00))
                    {
                        A090 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Method (A166, 1, Serialized)
        {
            If ((DerefOf (\_SB.ADAT [0x08]) == 0x01))
            {
                Local0 = 0x00
                While ((Local0 < 0x0B))
                {
                    A167 (Local0, Arg0)
                    Local0++
                }
            }
        }

        Method (A097, 3, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            A012 = Arg1
            A013 = Arg2
            A018 (Arg0, Local7)
        }

        Method (A167, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A095 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A095 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A095 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A095 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR1.ABR4.A095 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A095 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A095 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A095 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A095 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A095 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A095 (Arg1))
            }
        }

        Method (A059, 1, Serialized)
        {
            Local0 = 0x00
            Local6 = DerefOf (Arg0 [Local0])
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            Local0 = 0x02
            Local1 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
            A012 = 0x00
            A013 = 0x00
            A014 = 0x00
            A015 = 0x00
            A016 = 0x00
            A017 = 0x00
            If ((Local1 == 0x00))
            {
                A012 = Local2
                A166 (0x00)
            }

            If ((Local1 == 0x01))
            {
                A012 = Local2
                A166 (0x01)
            }

            If ((Local1 == 0x02))
            {
                A012 = Local2
                A018 (0x66, Local7)
            }

            If ((Local1 == 0x03))
            {
                A012 = Local2
                A018 (0x67, Local7)
            }
        }

        Name (A008, 0x01)
        Name (A009, 0x00)
        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (AWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (APPM, 1, NotSerialized)
        {
            Local0 = DerefOf (Arg0 [0x04])
            Local1 = DerefOf (Arg0 [0x02])
            A010 (Local0, Local1)
        }

        Method (A011, 0, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            A012 = 0x00
            A013 = 0x00
            A014 = 0x00
            A015 = 0x00
            A016 = 0x00
            A017 = 0x00
            If ((AD00 == 0x00))
            {
                A018 (0x68, Local7)
            }
            Else
            {
                A018 (0x69, Local7)
            }
        }

        Method (A019, 2, NotSerialized)
        {
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.PCI0.GP17.ACP_, DeviceObj)
    External (_SB_.PCI0.GP17.AZAL, DeviceObj)
    External (_SB_.PCI0.LPC0.EC0_.UBCC, UnknownObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M017, MethodObj)    // 6 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M249, MethodObj)    // 4 Arguments
    External (M250, MethodObj)    // 5 Arguments
    External (M251, FieldUnitObj)
    External (M276, MethodObj)    // 0 Arguments
    External (M277, MethodObj)    // 0 Arguments
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)

    Name (M278, One)
    Name (M279, One)
    Name (M27A, One)
    Name (M27B, One)
    Name (APGE, One)
    Name (ACGE, One)
    Mutex (M27E, 0x00)
    Method (M27D, 0, NotSerialized)
    {
        M460 ("FEA-ASL-CpmAcpRemovePowerGating-Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
        Local0 = M249 (Zero, Zero, Zero, 0x01240414)
        M460 ("  ACP_DSP0_RUNSTALL   = %d\n", Local0, Zero, Zero, Zero, Zero, Zero)
        If ((Local0 != Zero))
        {
            M250 (Zero, Zero, Zero, 0x0124101C, One)
            Local5 = 0x64
            Local1 = M249 (Zero, Zero, Zero, 0x01241020)
            While ((Local1 != Zero))
            {
                Local1 = M249 (Zero, Zero, Zero, 0x01241020)
                Local5--
                If ((Local5 == Zero))
                {
                    M460 ("  Wait PGFSM status timeout", Zero, Zero, Zero, Zero, Zero, Zero)
                    Break
                }

                Stall (0x63)
            }
        }

        M460 ("FEA-ASL-CpmAcpRemovePowerGating-End\n", Zero, Zero, Zero, Zero, Zero, Zero)
    }

    Method (M27C, 0, NotSerialized)
    {
        M460 ("FEA-ASL-CpmAcpApplyPowerGating-Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
        Local0 = M249 (Zero, Zero, Zero, 0x01240414)
        M460 ("  ACP_DSP0_RUNSTALL   = %d\n", Local0, Zero, Zero, Zero, Zero, Zero)
        If ((Local0 != Zero))
        {
            M250 (Zero, Zero, Zero, 0x0124101C, Zero)
            Local5 = 0x64
            Local1 = M249 (Zero, Zero, Zero, 0x01241020)
            While ((Local1 != 0x02))
            {
                Local1 = M249 (Zero, Zero, Zero, 0x01241020)
                Local5--
                If ((Local5 == Zero))
                {
                    M460 ("  Wait PGFSM status timeout", Zero, Zero, Zero, Zero, Zero, Zero)
                    Break
                }

                Stall (0x63)
            }
        }

        M460 ("FEA-ASL-CpmAcpApplyPowerGating-End\n", Zero, Zero, Zero, Zero, Zero, Zero)
    }

    Method (M276, 0, Serialized)
    {
        M460 ("FEA-ASL-CpmPowerGateOn-Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
        M460 ("  CpmAcpPresentState    = %d\n", M278, Zero, Zero, Zero, Zero, Zero)
        M460 ("  CpmAzaliaPresentState = %d\n", M279, Zero, Zero, Zero, Zero, Zero)
        M460 ("  ACGE                  = %d\n", ACGE, Zero, Zero, Zero, Zero, Zero)
        M460 ("  APGE                  = %d\n", APGE, Zero, Zero, Zero, Zero, Zero)
        If (!(M278 ^ M279))
        {
            M460 ("FEA-ASL-CpmPowerGateOn-1-End\n", Zero, Zero, Zero, Zero, Zero, Zero)
            Return (Zero)
        }

        If ((ACGE == One))
        {
            Local4 = M249 (Zero, Zero, Zero, 0x00058AE4)
            Local5 = 0x64
            While ((Local4 == Zero))
            {
                Local4 = M249 (Zero, Zero, Zero, 0x00058AE4)
                Local5--
                If ((Local5 == Zero))
                {
                    M460 ("  Wait ACLK Clock Start status timeout", Zero, Zero, Zero, Zero, Zero, Zero)
                    Break
                }

                Stall (0x63)
            }

            If ((Local4 == One))
            {
                M250 (Zero, Zero, Zero, 0x00058AE4, Zero)
                M250 (Zero, Zero, Zero, 0x00058AE0, 0xC8)
                M250 (Zero, Zero, Zero, 0x00058A30, 0x03)
                Local4 = M249 (Zero, Zero, Zero, 0x00058AE4)
                Local5 = 0x64
                While ((Local4 == Zero))
                {
                    Local4 = M249 (Zero, Zero, Zero, 0x00058AE4)
                    Local5--
                    If ((Local5 == Zero))
                    {
                        M460 ("  Wait ACLK Clock Start status timeout", Zero, Zero, Zero, Zero, Zero, Zero)
                        Break
                    }

                    Stall (0x63)
                }
            }
            Else
            {
                M460 ("FEA-ASL-CpmPowerGateOn-mmACP_RESP_REG = %d\n", Local4, Zero, Zero, Zero, Zero, Zero)
            }
        }

        If ((APGE == One))
        {
            M000 (0x0DB4)
            If ((M27A == One))
            {
                Local0 = M017 (Zero, 0x08, One, 0x19, Zero, 0x08)
                Local1 = M019 (Local0, Zero, 0x05, Zero)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        M27D ()
                    }
                }
            }
            ElseIf ((M27B == One))
            {
                M250 (Zero, Zero, Zero, 0x0900E784, 0x0303)
                Local5 = 0x64
                Local4 = M249 (Zero, Zero, Zero, 0x0900E790)
                Local4 &= 0x0F
                While ((Local4 != Zero))
                {
                    Local4 = M249 (Zero, Zero, Zero, 0x0900E790)
                    Local4 &= 0x0F
                    Local5--
                    If ((Local5 == Zero))
                    {
                        M460 ("  Wait mmRSMU_PGFSM_STATUS_ACP status timeout", Zero, Zero, Zero, Zero, Zero, Zero)
                        Break
                    }

                    Stall (0x63)
                }
            }

            M000 (0x0DB5)
        }

        M460 ("FEA-ASL-CpmPowerGateOn-End\n", Zero, Zero, Zero, Zero, Zero, Zero)
    }

    Method (M277, 0, Serialized)
    {
        M460 ("FEA-ASL-CpmPowerGateOff-Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
        M460 ("  CpmAcpPresentState    = %d\n", M278, Zero, Zero, Zero, Zero, Zero)
        M460 ("  CpmAzaliaPresentState = %d\n", M279, Zero, Zero, Zero, Zero, Zero)
        M460 ("  APGE                  = %d\n", APGE, Zero, Zero, Zero, Zero, Zero)
        M460 ("  ACGE                  = %d\n", ACGE, Zero, Zero, Zero, Zero, Zero)
        If (!((M278 == Zero) && (M279 == Zero)))
        {
            M460 ("FEA-ASL-CpmPowerGateOff-1-End\n", Zero, Zero, Zero, Zero, Zero, Zero)
            Return (Zero)
        }

        If ((APGE == One))
        {
            M000 (0x0DB6)
            If ((M27A == One))
            {
                Local0 = M017 (Zero, 0x08, One, 0x19, Zero, 0x08)
                Local1 = M019 (Local0, Zero, 0x05, Zero)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        M27C ()
                    }
                }
            }
            ElseIf ((M27B == One))
            {
                M250 (Zero, Zero, Zero, 0x0900E784, 0x0301)
                Local5 = 0x64
                Local4 = M249 (Zero, Zero, Zero, 0x0900E790)
                Local4 &= 0x0F
                While ((Local4 != 0x02))
                {
                    Local4 = M249 (Zero, Zero, Zero, 0x0900E790)
                    Local4 &= 0x0F
                    Local5--
                    If ((Local5 == Zero))
                    {
                        M460 ("  Wait mmRSMU_PGFSM_STATUS_ACP status timeout", Zero, Zero, Zero, Zero, Zero, Zero)
                        Break
                    }

                    Stall (0x63)
                }
            }

            M000 (0x0DB7)
        }

        If ((ACGE == One))
        {
            Local4 = M249 (Zero, Zero, Zero, 0x00058AE4)
            Local5 = 0x64
            While ((Local4 == Zero))
            {
                Local4 = M249 (Zero, Zero, Zero, 0x00058AE4)
                Local5--
                If ((Local5 == Zero))
                {
                    M460 ("  Wait ACLK Clock Start status timeout", Zero, Zero, Zero, Zero, Zero, Zero)
                    Break
                }

                Stall (0x63)
            }

            If ((Local4 == One))
            {
                M250 (Zero, Zero, Zero, 0x00058AE4, Zero)
                M250 (Zero, Zero, Zero, 0x00058AE0, Zero)
                M250 (Zero, Zero, Zero, 0x00058A30, 0x03)
                Local4 = M249 (Zero, Zero, Zero, 0x00058AE4)
                Local5 = 0x64
                While ((Local4 == Zero))
                {
                    Local4 = M249 (Zero, Zero, Zero, 0x00058AE4)
                    Local5--
                    If ((Local5 == Zero))
                    {
                        M460 ("  Wait mmRSMU_PGFSM_STATUS_ACP status timeout", Zero, Zero, Zero, Zero, Zero, Zero)
                        Break
                    }

                    Stall (0x63)
                }
            }
            Else
            {
                M460 ("FEA-ASL-CpmPowerGateOn-mmACP_RESP_REG = %d\n", Local4, Zero, Zero, Zero, Zero, Zero)
            }
        }

        M460 ("FEA-ASL-CpmPowerGateOff-End\n", Zero, Zero, Zero, Zero, Zero, Zero)
    }

    Scope (\_SB.PCI0.GP17.ACP)
    {
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            If ((\_SB.PCI0.LPC0.EC0.UBCC == 0xCC))
            {
                Sleep (0x03E8)
                Sleep (0x03E8)
            }

            Acquire (M27E, 0xFFFF)
            M460 ("FEA-ASL-\\_SB.PCI0.PBC.ACP._PS0 CpmAcpPresentState = 1\n", Zero, Zero, Zero, Zero, Zero, Zero)
            M278 = One
            M276 ()
            Release (M27E)
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            Acquire (M27E, 0xFFFF)
            M460 ("FEA-ASL-\\_SB.PCI0.PBC.ACP._PS3 CpmAcpPresentState = 0\n", Zero, Zero, Zero, Zero, Zero, Zero)
            M278 = Zero
            M277 ()
            Release (M27E)
        }

        Method (MSG0, 3, Serialized)
        {
            M460 ("FEA-ASL-MSG0-Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            M000 (0x0DEB)
            OperationRegion (VARM, SystemIO, 0x80, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            If ((Arg2 != 0x09))
            {
                Local4 = M249 (Zero, Zero, Zero, 0x00058AE4)
                Local5 = 0x64
                While ((Local4 == Zero))
                {
                    Local4 = M249 (Zero, Zero, Zero, 0x00058AE4)
                    Local5--
                    If ((Local5 == Zero))
                    {
                        M460 ("  Wait ACLK Clock Start status timeout", Zero, Zero, Zero, Zero, Zero, Zero)
                        Break
                    }

                    Stall (0x63)
                }

                If ((Local4 == One))
                {
                    M250 (Zero, Zero, Zero, 0x00058AE4, Arg0)
                    M250 (Zero, Zero, Zero, 0x00058AE0, Arg1)
                    M250 (Zero, Zero, Zero, 0x00058A30, Arg2)
                    Local0 = M249 (Zero, Zero, Zero, 0x00058AE4)
                    While ((Local0 == Zero))
                    {
                        Local0 = M249 (Zero, Zero, Zero, 0x00058AE4)
                        If ((Local0 != Zero))
                        {
                            Break
                        }
                    }

                    M000 (0x0DEC)
                    Local1 = M249 (Zero, Zero, Zero, 0x00058AE0)
                    M460 ("FEA-ASL-MSG0-End-1-Return 0x%X\n", Local1, Zero, Zero, Zero, Zero, Zero)
                    Return (Local1)
                }
                Else
                {
                    M460 ("FEA-ASL-CpmPowerGateOn-mmACP_RESP_REG = %d\n", Local4, Zero, Zero, Zero, Zero, Zero)
                    Return (0xFFFFFFFF)
                }
            }

            Name (MBOX, Buffer (0x04){})
            Local0 = M249 (Zero, Zero, Zero, 0x03810570)
            VARR = Local0
            MBOX = Local0
            CreateWordField (MBOX, Zero, STAS)
            CreateByteField (MBOX, 0x02, CMDI)
            CreateField (MBOX, 0x18, 0x05, RESV)
            CreateBitField (MBOX, 0x1D, RSET)
            CreateBitField (MBOX, 0x1E, RCOV)
            CreateBitField (MBOX, 0x1F, REDY)
            VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            While (((REDY != One) || (CMDI != Zero)))
            {
                Local0 = M249 (Zero, Zero, Zero, 0x03810570)
                MBOX = Local0
                VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            }

            Local0 = Zero
            MBOX = Local0
            REDY = Zero
            CMDI = 0x33
            Local0 = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            VARR = Local0
            M250 (Zero, Zero, Zero, 0x03810570, Local0)
            Sleep (One)
            Local0 = M249 (Zero, Zero, Zero, 0x03810570)
            MBOX = Local0
            VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            While ((CMDI != Zero))
            {
                Local0 = M249 (Zero, Zero, Zero, 0x03810570)
                MBOX = Local0
                VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            }

            If ((STAS != Zero))
            {
                M000 (0x0DEE)
                M460 ("FEA-ASL-MSG0-End-3-Return 0x%X-Command Fail\n", Local0, Zero, Zero, Zero, Zero, Zero)
            }
            Else
            {
                M000 (0x0DED)
                M460 ("FEA-ASL-MSG0-End-2-Return 0x%X\n", Local0, Zero, Zero, Zero, Zero, Zero)
            }

            Return (Local0)
        }
    }

    Scope (\_SB.PCI0.GP17.AZAL)
    {
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            If ((\_SB.PCI0.LPC0.EC0.UBCC == 0xCC))
            {
                Sleep (0x03E8)
                Sleep (0x03E8)
            }

            Acquire (M27E, 0xFFFF)
            M460 ("FEA-ASL-\\_SB.PCI0.PBC.AZAL._PS0 CpmAzaliaPresentState = 1\n", Zero, Zero, Zero, Zero, Zero, Zero)
            M279 = One
            M276 ()
            Release (M27E)
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            \_SB.PCI0.LPC0.EC0.UBCC = One
            Acquire (M27E, 0xFFFF)
            M460 ("FEA-ASL-\\_SB.PCI0.PBC.AZAL._PS3 CpmAzaliaPresentState = 0\n", Zero, Zero, Zero, Zero, Zero, Zero)
            M279 = Zero
            M277 ()
            Release (M27E)
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.PCI0.PB2_, DeviceObj)
    External (_SB_.PCI0.PB2_.M241, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PB2_.M434, IntObj)
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)

    Scope (\_SB.PCI0.PB2)
    {
        PowerResource (M237, 0x00, 0x0000)
        {
            Name (M239, One)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (M239) /* \_SB_.PCI0.PB2_.M237.M239 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                If ((M239 == Zero))
                {
                    If (CondRefOf (\_SB.PCI0.PB2.M241))
                    {
                        \_SB.PCI0.PB2.M241 (One)
                    }
                }

                M239 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                If ((M239 == One))
                {
                    If (CondRefOf (\_SB.PCI0.PB2.M241))
                    {
                        \_SB.PCI0.PB2.M241 (Zero)
                    }
                }

                M239 = Zero
            }
        }

        Name (XPR0, Package (0x01)
        {
            M237
        })
        Name (XPR2, Package (0x01)
        {
            M237
        })
        Name (XPR3, Package (0x01)
        {
            M237
        })
        Name (XS0W, 0x04)
        Device (VGA)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }
        }

        Device (HDAU)
        {
            Name (_ADR, One)  // _ADR: Address
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((M097 != Zero))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x0F)
                }
            }
        }

        Method (_DSD, 0, Serialized)  // _DSD: Device-Specific Data
        {
            Return (Package (0x06)
            {
                ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                Package (0x00){}, 
                ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "HotPlugSupportInD3", 
                        One
                    }
                }, 

                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                        One
                    }
                }
            })
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            Name (M432, Zero)
            Name (M433, Zero)
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Name (M435, Buffer (0x02)
                        {
                             0x00, 0x00                                       // ..
                        })
                        CreateBitField (M435, Zero, M436)
                        CreateBitField (M435, 0x05, M445)
                        CreateBitField (M435, 0x0A, M437)
                        CreateBitField (M435, 0x0B, M438)
                        If ((Arg1 >= 0x04))
                        {
                            M436 = One
                            M445 = One
                            M432 = ((M049 (M128, 0x66) >> 0x04) & One)
                            M433 = ((M049 (M128, 0x66) >> 0x05) & One)
                            If ((M432 == One))
                            {
                                M437 = One
                            }

                            If ((M433 == One))
                            {
                                M438 = One
                            }
                        }
                        Else
                        {
                            M436 = One
                            M445 = One
                        }

                        Return (M435) /* \_SB_.PCI0.PB2_._DSM.M435 */
                    }
                    Case (0x05)
                    {
                        Return (Zero)
                    }
                    Case (0x0A)
                    {
                        Return (One)
                    }
                    Case (0x0B)
                    {
                        Local0 = ToInteger (Arg3)
                        If ((Local0 <= 0x2710))
                        {
                            \_SB.PCI0.PB2.M434 = 0x2710
                        }
                        Else
                        {
                            Local0 = 0x2710
                        }

                        Return (Local0)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.M625, MethodObj)    // 2 Arguments
    External (DDEP, IntObj)
    External (DIMS, IntObj)
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)

    Scope (\_SB)
    {
        Name (M630, 0x5555)
        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            Name (MSDB, Zero)
            Name (U4PC, 0xFF)
            CreateDWordField (Arg0, Zero, UID0)
            CreateDWordField (Arg3, Zero, CDW1)
            If ((Arg2 >= 0x02))
            {
                CreateDWordField (Arg3, 0x04, CDW2)
            }

            If ((Arg2 >= 0x03))
            {
                CreateDWordField (Arg3, 0x08, CDW3)
            }

            If ((Arg2 == One))
            {
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Start  CDW1 = 0x%X\n", UID0, CDW1, Zero, Zero, Zero, Zero)
            }
            ElseIf ((Arg2 == 0x02))
            {
                Local2 = CDW2 /* \_SB_._OSC.CDW2 */
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Start  CDW1 = 0x%X CDW2 = 0x%X\n", UID0, CDW1, CDW2, Zero, Zero, Zero)
            }
            Else
            {
                Local3 = CDW3 /* \_SB_._OSC.CDW3 */
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Start  CDW1 = 0x%X CDW2 = 0x%X CDW3 = 0x%X\n", UID0, CDW1, CDW2, CDW3, Zero, Zero)
            }

            If ((Arg0 == ToUUID ("23a0d13a-26ab-486c-9c5f-0ffa525a575a") /* USB4 Capabilities */))
            {
                If ((Arg1 == One))
                {
                    Local5 = Zero
                    If ((U4PC != 0xFF))
                    {
                        Local5 = (U4PC & 0x0F)
                        Local3 &= 0xFFFFFFF0
                        Local3 |= Local5
                    }
                    ElseIf ((CondRefOf (\_SB.M625) && (M620 != Zero)))
                    {
                        If ((M049 (M620, 0x10) != Zero))
                        {
                            If ((\_SB.M630 == 0x5555))
                            {
                                Local1 = \_SB.M625 (0x0180, 0x03E8)
                                \_SB.M630 = Local1
                            }
                            Else
                            {
                                Local1 = \_SB.M630
                            }

                            If (((Local1 & 0xFF) == Zero))
                            {
                                Local5 = ((Local1 >> 0x10) & 0x0F)
                                Local3 &= 0xFFFFFFF0
                                Local3 |= Local5
                            }
                        }
                    }

                    If ((Local5 == Zero))
                    {
                        CDW1 |= 0x04
                    }
                    ElseIf ((Local3 != CDW3))
                    {
                        CDW3 = Local3
                        CDW1 |= 0x10
                    }
                }
                Else
                {
                    CDW1 |= 0x08
                }
            }
            ElseIf ((Arg0 == ToUUID ("0811b06e-4a27-44f9-8d60-3cbbc22e7b48") /* Platform-wide Capabilities */))
            {
                If ((Arg1 == One))
                {
                    If ((CondRefOf (\DIMS) && CondRefOf (\DDEP)))
                    {
                        If (((\DDEP == One) && ((CDW2 & 0x00040000) == 0x00040000)))
                        {
                            M460 ("    Disable USB4 ACPI _DEP\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Local1 = \DIMS /* External reference */
                            M232 (Local1, 0x55, Zero)
                            \DDEP = Zero
                        }
                    }

                    Local2 |= 0x04
                    If ((MSDB == One))
                    {
                        Local2 &= 0xFFFFFF7F
                    }

                    If ((U4PC != 0xFF))
                    {
                        Local2 |= 0x00040000
                    }
                    ElseIf ((M620 != Zero))
                    {
                        If ((M049 (M620, 0x10) != Zero))
                        {
                            If ((M049 (M620, 0x45) == Zero))
                            {
                                Local2 &= 0xFFFBFFFF
                            }
                        }
                    }

                    If ((Local2 != CDW2))
                    {
                        CDW2 = Local2
                        CDW1 |= 0x10
                    }

                    If ((((CDW1 & One) != One) && CondRefOf (\_SB.M625)))
                    {
                        If ((M620 != Zero))
                        {
                            If ((M049 (M620, 0x10) != Zero))
                            {
                                Local4 = M049 (M620, 0x43)
                                Local1 = \_SB.M625 ((0x0102 + (Local4 << 0x10)), 0x03E8)
                            }
                        }
                    }
                }
                Else
                {
                    CDW1 |= 0x08
                }
            }
            Else
            {
                CDW1 |= 0x04
            }

            If ((Arg2 == One))
            {
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Return CDW1 = 0x%X\n", UID0, CDW1, Zero, Zero, Zero, Zero)
            }
            ElseIf ((Arg2 == 0x02))
            {
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Return CDW1 = 0x%X CDW2 = 0x%X\n", UID0, CDW1, CDW2, Zero, Zero, Zero)
            }
            Else
            {
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Return CDW1 = 0x%X CDW2 = 0x%X CDW3 = 0x%X\n", UID0, CDW1, CDW2, CDW3, Zero, Zero)
            }

            Return (Arg3)
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (_SB_.PCI0.GP17.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.PB2_.SWUS.SWDS.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PB2_.SWUS.SWDS.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PB2_.SWUS.SWDS.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.PB2_.SWUS.SWDS.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.PB2_.SWUS.SWDS.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PB2_.SWUS.SWDS.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PB2_.SWUS.SWDS.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PB2_.SWUS.SWDS.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PB2_.SWUS.SWDS.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PB2_.SWUS.SWDS.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.PB2_.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PB2_.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PB2_.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.PB2_.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.PB2_.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PB2_.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PB2_.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PB2_.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PB2_.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PB2_.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (M000, MethodObj)    // 1 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M113, MethodObj)    // 1 Arguments
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Name (M207, Buffer (0xFF){})
        Name (M208, Buffer (0x03){})
        Name (M204, One)
        Method (ATCS, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                M000 (0x0D60)
                ATC0 ()
                M000 (0x0D70)
            }

            If ((Arg0 == One))
            {
                M000 (0x0D61)
                ATC1 ()
                M000 (0x0D71)
            }

            If ((Arg0 == 0x02))
            {
                M000 (0x0D62)
                ATC2 (Arg1)
                M000 (0x0D72)
            }

            If ((Arg0 == 0x03))
            {
                M000 (0x0D63)
                ATC3 ()
                M000 (0x0D73)
            }

            If ((Arg0 == 0x04))
            {
                M000 (0x0D64)
                ATC4 (Arg1)
                M000 (0x0D74)
            }

            If ((Arg0 == 0x06))
            {
                M000 (0x0D66)
                ATC6 (Arg1)
                M000 (0x0D76)
            }

            If ((Arg0 == 0x07))
            {
                M000 (0x0D67)
                ATC7 (Arg1)
                M000 (0x0D77)
            }

            If ((Arg0 == 0x08))
            {
                M000 (0x0D68)
                ATC8 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x03]), DerefOf (
                    Arg1 [0x04]), DerefOf (Arg1 [0x05]))
                M000 (0x0D78)
            }

            If ((Arg0 == 0x09))
            {
                M000 (0x0D69)
                ATC9 ()
                M000 (0x0D79)
            }

            If ((Arg0 == 0x0A))
            {
                M000 (0x0D6A)
                ATCA (Arg1)
                M000 (0x0D7A)
            }

            Return (M207) /* \_SB_.PCI0.GP17.VGA_.M207 */
        }

        Method (ATC0, 0, NotSerialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateWordField (M207, 0x02, M158)
            CreateDWordField (M207, 0x04, M160)
            M157 = 0x08
            M158 = One
            M160 = M100 /* External reference */
            M207 = \_SB.ALIB (Zero, M207)
        }

        Method (ATC1, 0, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateDWordField (M207, 0x02, M161)
            CreateDWordField (M207, 0x06, M162)
            CreateField (M207, 0x30, One, M203)
            M157 = 0x0A
            M161 = One
            M162 = M100 /* External reference */
            Local0 = M049 (M133, 0x15)
            If ((Local0 & 0x80))
            {
                M204 = (Local0 & One)
            }
            ElseIf ((Local0 & 0x7F))
            {
                M204 = M113 (Local0)
            }

            M203 = M204 /* \_SB_.PCI0.GP17.VGA_.M204 */
        }

        Method (ATC2, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M205)
            M157 = 0x03
            M205 = One
            M207 = \_SB.ALIB (0x02, Arg0)
        }

        Method (ATC3, 0, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M205)
            CreateWordField (M208, Zero, M197)
            CreateByteField (M208, 0x02, M206)
            M157 = 0x03
            M205 = One
            M197 = 0x03
            M206 = One
            M207 = \_SB.ALIB (0x03, M208)
        }

        Method (ATC4, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M209)
            M157 = 0x03
            M209 = One
            M207 = \_SB.ALIB (0x04, Arg0)
        }

        Method (ATC6, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateDWordField (M207, 0x02, M234)
            M157 = 0x06
            M234 = M233 /* External reference */
        }

        Method (ATC7, 1, Serialized)
        {
            M232 (M235, Zero, One)
        }

        Method (ATC8, 4, Serialized)
        {
            Local0 = Buffer (0x05){}
            CreateWordField (Local0, Zero, M157)
            CreateByteField (Local0, 0x02, M425)
            CreateWordField (Local0, 0x03, M426)
            M157 = 0x05
            Local1 = Arg0
            Local2 = Arg1
            M426 = ((Local2 << 0x08) + Local1)
            Local3 = Arg2
            Local4 = Arg3
            If (((Local3 == Zero) && (Local4 == Zero)))
            {
                M425 = One
                \_SB.ALIB (0xAA, Local0)
            }
            ElseIf (((Local3 == Zero) && (Local4 == One)))
            {
                M425 = Zero
                \_SB.ALIB (0xAA, Local0)
            }
            ElseIf (((Local3 == 0x03) && (Local4 == One)))
            {
                M425 = 0x03
                \_SB.ALIB (0xAA, Local0)
            }
        }

        Method (ATC9, 0, Serialized)
        {
            M207 = M444 /* External reference */
        }

        Method (ATCA, 1, Serialized)
        {
            CreateWordField (Arg0, Zero, M157)
            CreateWordField (Arg0, 0x02, M240)
            M232 (M23A, M240, One)
        }

        Method (XTRM, 2, Serialized)
        {
            If ((M105 == Zero))
            {
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Local4 = M105 /* External reference */
            If ((Local4 > 0x00010000))
            {
                Local4 = 0x00010000
            }

            Local5 = Arg0
            Local6 = Arg1
            If ((Local6 > 0x1000))
            {
                Local6 = 0x1000
            }

            If ((Local5 >= Local4))
            {
                Return (Buffer (Local6)
                {
                     0x00                                             // .
                })
            }

            If ((((Local5 & 0x0FFF) + Local6) > 0x1000))
            {
                Local6 = (0x1000 - (Local5 & 0x0FFF))
            }

            Name (M202, Buffer (0x1000)
            {
                 0x00                                             // .
            })
            If (((Local5 & 0xF000) == Zero))
            {
                M202 = M106 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x1000))
            {
                M202 = M378 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x2000))
            {
                M202 = M379 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x3000))
            {
                M202 = M380 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x4000))
            {
                M202 = M381 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x5000))
            {
                M202 = M382 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x6000))
            {
                M202 = M383 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x7000))
            {
                M202 = M384 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x8000))
            {
                M202 = M385 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x9000))
            {
                M202 = M386 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xA000))
            {
                M202 = M387 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xB000))
            {
                M202 = M388 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xC000))
            {
                M202 = M389 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xD000))
            {
                M202 = M390 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xE000))
            {
                M202 = M391 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xF000))
            {
                M202 = M392 /* External reference */
            }

            If (((Local5 + Local6) <= Local4))
            {
                If ((Local6 == 0x1000))
                {
                    Return (M202) /* \_SB_.PCI0.GP17.VGA_.XTRM.M202 */
                }
            }
            Else
            {
                Local6 = (Local4 - Local5)
            }

            Name (M393, Buffer (Local6)
            {
                 0x00                                             // .
            })
            CreateField (M202, ((Local5 & 0x0FFF) * 0x08), (Local6 * 0x08
                ), M394)
            M393 = M394 /* \_SB_.PCI0.GP17.VGA_.XTRM.M394 */
            Return (M393) /* \_SB_.PCI0.GP17.VGA_.XTRM.M393 */
        }
    }

    Method (AFN0, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN0))
            {
                \_SB.PCI0.GP17.VGA.AFN0 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.PB2.VGA.AFN0))
            {
                \_SB.PCI0.PB2.VGA.AFN0 ()
            }

            If (CondRefOf (\_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN0))
            {
                \_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN0 ()
            }
        }
    }

    Method (AFN1, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN1))
            {
                \_SB.PCI0.GP17.VGA.AFN1 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.PB2.VGA.AFN1))
            {
                \_SB.PCI0.PB2.VGA.AFN1 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN1))
            {
                \_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN1 (Arg0)
            }
        }
    }

    Method (AFN2, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN2))
            {
                \_SB.PCI0.GP17.VGA.AFN2 (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.PB2.VGA.AFN2))
            {
                \_SB.PCI0.PB2.VGA.AFN2 (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN2))
            {
                \_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN2 (Arg0, Arg1)
            }
        }
    }

    Method (AFN3, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN3))
            {
                \_SB.PCI0.GP17.VGA.AFN3 (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.PB2.VGA.AFN3))
            {
                \_SB.PCI0.PB2.VGA.AFN3 (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN3))
            {
                \_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN3 (Arg0, Arg1)
            }
        }
    }

    Method (AFN4, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN4))
            {
                \_SB.PCI0.GP17.VGA.AFN4 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.PB2.VGA.AFN4))
            {
                \_SB.PCI0.PB2.VGA.AFN4 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN4))
            {
                \_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN4 (Arg0)
            }
        }
    }

    Method (AFN5, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN5))
            {
                \_SB.PCI0.GP17.VGA.AFN5 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.PB2.VGA.AFN5))
            {
                \_SB.PCI0.PB2.VGA.AFN5 ()
            }

            If (CondRefOf (\_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN5))
            {
                \_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN5 ()
            }
        }
    }

    Method (AFN6, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN6))
            {
                \_SB.PCI0.GP17.VGA.AFN6 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.PB2.VGA.AFN6))
            {
                \_SB.PCI0.PB2.VGA.AFN6 ()
            }

            If (CondRefOf (\_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN6))
            {
                \_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN6 ()
            }
        }
    }

    Method (AFN7, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN7))
            {
                \_SB.PCI0.GP17.VGA.AFN7 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.PB2.VGA.AFN7))
            {
                \_SB.PCI0.PB2.VGA.AFN7 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN7))
            {
                \_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN7 (Arg0)
            }
        }
    }

    Method (AFN8, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN8))
            {
                \_SB.PCI0.GP17.VGA.AFN8 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.PB2.VGA.AFN8))
            {
                \_SB.PCI0.PB2.VGA.AFN8 ()
            }

            If (CondRefOf (\_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN8))
            {
                \_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN8 ()
            }
        }
    }

    Method (AFNC, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFNC))
            {
                \_SB.PCI0.GP17.VGA.AFNC (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.PB2.VGA.AFNC))
            {
                \_SB.PCI0.PB2.VGA.AFNC (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.PB2.SWUS.SWDS.VGA.AFNC))
            {
                \_SB.PCI0.PB2.SWUS.SWDS.VGA.AFNC (Arg0, Arg1)
            }
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_GPE, DeviceObj)
    External (_SB_.PCI0.GPP0, DeviceObj)
    External (_SB_.PCI0.GPP2, DeviceObj)
    External (_SB_.PCI0.GPPY, DeviceObj)
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)

    Scope (\_SB.PCI0.GPP0)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x08, 
            0x04
        })
    }

    Scope (\_SB.PCI0.GPP2)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x02, 
            0x04
        })
    }

    If (CondRefOf (\_SB.PCI0.GPPY))
    {
        Scope (\_SB.PCI0.GPPY)
        {
            PowerResource (PWR1, 0x00, 0x0000)
            {
                Name (PWR2, One)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (PWR2) /* \_SB_.PCI0.GPPY.PWR1.PWR2 */
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PWR2 = One
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    PWR2 = Zero
                }
            }

            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PWR1
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                PWR1
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PWR1
            })
        }
    }

    If (CondRefOf (\_SB.PCI0.GPP2))
    {
        Scope (\_SB.PCI0.GPP2)
        {
            PowerResource (PWR1, 0x00, 0x0000)
            {
                Name (PWR2, One)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (PWR2) /* \_SB_.PCI0.GPP2.PWR1.PWR2 */
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PWR2 = One
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    PWR2 = Zero
                }
            }

            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PWR1
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                PWR1
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PWR1
            })
        }
    }

    Scope (\_GPE)
    {
        Name (NGP0, 0x01)
        Name (NGP2, 0x01)
        Method (_L02, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            M460 ("  OEM-ASL-\\_GPE._L02\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If ((\_GPE.NGP2 != 0x55))
            {
                M460 ("    Notify (\\_SB.PCI0.GPP2, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GPP2, 0x02) // Device Wake
            }
        }

        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            M460 ("  OEM-ASL-\\_GPE._L08\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If ((\_GPE.NGP0 != 0x55))
            {
                M460 ("    Notify (\\_SB.PCI0.GPP0, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GPP0, 0x02) // Device Wake
            }
        }
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "CB-01   ", 0x00000001)
{
    Scope (\_SB)
    {
        Name (MDSZ, 0x01E0)
        OperationRegion (PDSP, SystemIO, 0xB0, One)
        Field (PDSP, ByteAcc, NoLock, Preserve)
        {
            IOB2,   8
        }

        OperationRegion (GPCD, SystemMemory, 0xB9BDF000, 0x0200)
        Field (GPCD, AnyAcc, NoLock, Preserve)
        {
            DTSZ,   32, 
            TKNO,   32, 
            PTYP,   8, 
            I_PS,   8, 
            PACT,   8, 
            RSVD,   40, 
            PGUI,   128, 
            DBUF,   3840
        }

        Method (PCDE, 2, Serialized)
        {
            PGUI = Arg0
            TKNO = Arg1
            Local0 = Zero
            IOB2 = 0x17
            If ((I_PS == Zero))
            {
                If ((DTSZ <= MDSZ))
                {
                    Mid (DBUF, Zero, DTSZ, Local0)
                }
            }

            Return (Local0)
        }

        Method (HBID, 0, NotSerialized)
        {
            Local0 = \_SB.PCDE (Buffer (0x10)
                    {
                        /* 0000 */  0x83, 0x18, 0x1F, 0xC5, 0x00, 0xDF, 0x6A, 0x4F,  // ......jO
                        /* 0008 */  0x08, 0xA0, 0x36, 0x9F, 0x60, 0x98, 0xFD, 0xAF   // ..6.`...
                    }, 0x20000032)
            Return (Local0)
        }
    }
}



SSDT9
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_GPE, DeviceObj)
    External (_GPE.AIE0, MethodObj)    // 0 Arguments
    External (_GPE.AIE1, MethodObj)    // 0 Arguments
    External (_GPE.AIE2, MethodObj)    // 0 Arguments
    External (_GPE.AIE3, MethodObj)    // 0 Arguments
    External (_GPE.BIE0, MethodObj)    // 0 Arguments
    External (_GPE.BIE1, MethodObj)    // 0 Arguments
    External (_GPE.BIE2, MethodObj)    // 0 Arguments
    External (_GPE.BIE3, MethodObj)    // 0 Arguments
    External (_GPE.PTS0, MethodObj)    // 1 Arguments
    External (_GPE.PTS1, MethodObj)    // 1 Arguments
    External (_GPE.PTS2, MethodObj)    // 1 Arguments
    External (_GPE.PTS3, MethodObj)    // 1 Arguments
    External (_GPE.SP00, MethodObj)    // 0 Arguments
    External (_GPE.SP01, MethodObj)    // 0 Arguments
    External (_GPE.SP02, MethodObj)    // 0 Arguments
    External (_GPE.SP03, MethodObj)    // 0 Arguments
    External (_GPE.SP04, MethodObj)    // 0 Arguments
    External (_GPE.SP05, MethodObj)    // 0 Arguments
    External (_GPE.SP06, MethodObj)    // 0 Arguments
    External (_GPE.SP07, MethodObj)    // 0 Arguments
    External (_GPE.SP10, MethodObj)    // 0 Arguments
    External (_GPE.SP11, MethodObj)    // 0 Arguments
    External (_GPE.SP12, MethodObj)    // 0 Arguments
    External (_GPE.SP13, MethodObj)    // 0 Arguments
    External (_GPE.SP14, MethodObj)    // 0 Arguments
    External (_GPE.SP15, MethodObj)    // 0 Arguments
    External (_GPE.SP16, MethodObj)    // 0 Arguments
    External (_GPE.SP17, MethodObj)    // 0 Arguments
    External (_GPE.SP20, MethodObj)    // 0 Arguments
    External (_GPE.SP21, MethodObj)    // 0 Arguments
    External (_GPE.SP22, MethodObj)    // 0 Arguments
    External (_GPE.SP23, MethodObj)    // 0 Arguments
    External (_GPE.SP24, MethodObj)    // 0 Arguments
    External (_GPE.SP25, MethodObj)    // 0 Arguments
    External (_GPE.SP26, MethodObj)    // 0 Arguments
    External (_GPE.SP27, MethodObj)    // 0 Arguments
    External (_GPE.SP30, MethodObj)    // 0 Arguments
    External (_GPE.SP31, MethodObj)    // 0 Arguments
    External (_GPE.SP32, MethodObj)    // 0 Arguments
    External (_GPE.SP33, MethodObj)    // 0 Arguments
    External (_GPE.SP34, MethodObj)    // 0 Arguments
    External (_GPE.SP35, MethodObj)    // 0 Arguments
    External (_GPE.SP36, MethodObj)    // 0 Arguments
    External (_GPE.SP37, MethodObj)    // 0 Arguments
    External (_GPE.SP40, MethodObj)    // 0 Arguments
    External (_GPE.SP41, MethodObj)    // 0 Arguments
    External (_GPE.SP42, MethodObj)    // 0 Arguments
    External (_GPE.SP43, MethodObj)    // 0 Arguments
    External (_GPE.SP44, MethodObj)    // 0 Arguments
    External (_GPE.SP45, MethodObj)    // 0 Arguments
    External (_GPE.SP46, MethodObj)    // 0 Arguments
    External (_GPE.SP47, MethodObj)    // 0 Arguments
    External (_GPE.SP50, MethodObj)    // 0 Arguments
    External (_GPE.SP51, MethodObj)    // 0 Arguments
    External (_GPE.SP52, MethodObj)    // 0 Arguments
    External (_GPE.SP53, MethodObj)    // 0 Arguments
    External (_GPE.SP54, MethodObj)    // 0 Arguments
    External (_GPE.SP55, MethodObj)    // 0 Arguments
    External (_GPE.SP56, MethodObj)    // 0 Arguments
    External (_GPE.SP57, MethodObj)    // 0 Arguments
    External (_GPE.SP60, MethodObj)    // 0 Arguments
    External (_GPE.SP61, MethodObj)    // 0 Arguments
    External (_GPE.SP62, MethodObj)    // 0 Arguments
    External (_GPE.SP63, MethodObj)    // 0 Arguments
    External (_GPE.SP64, MethodObj)    // 0 Arguments
    External (_GPE.SP65, MethodObj)    // 0 Arguments
    External (_GPE.SP66, MethodObj)    // 0 Arguments
    External (_GPE.SP67, MethodObj)    // 0 Arguments
    External (_GPE.SP70, MethodObj)    // 0 Arguments
    External (_GPE.SP71, MethodObj)    // 0 Arguments
    External (_GPE.SP72, MethodObj)    // 0 Arguments
    External (_GPE.SP73, MethodObj)    // 0 Arguments
    External (_GPE.SP74, MethodObj)    // 0 Arguments
    External (_GPE.SP75, MethodObj)    // 0 Arguments
    External (_GPE.SP76, MethodObj)    // 0 Arguments
    External (_GPE.SP77, MethodObj)    // 0 Arguments
    External (_GPE.WAK0, MethodObj)    // 1 Arguments
    External (_GPE.WAK1, MethodObj)    // 1 Arguments
    External (_GPE.WAK2, MethodObj)    // 1 Arguments
    External (_GPE.WAK3, MethodObj)    // 1 Arguments
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.AM00, MutexObj)
    External (_SB_.BPTS, MethodObj)    // 1 Arguments
    External (_SB_.BWAK, MethodObj)    // 1 Arguments
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.IPTS, MethodObj)    // 1 Arguments
    External (_SB_.IWAK, MethodObj)    // 1 Arguments
    External (_SB_.M263, MethodObj)    // 1 Arguments
    External (_SB_.M264, MethodObj)    // 1 Arguments
    External (_SB_.M284, MethodObj)    // 1 Arguments
    External (_SB_.OPTS, MethodObj)    // 1 Arguments
    External (_SB_.OWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PTBR.PTST.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PTBR.PTST.TWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.GPXX.SAXX.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.GPXX.SAXX.TWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.SAXX.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.SAXX.TWAK, MethodObj)    // 1 Arguments
    External (M038, MethodObj)    // 1 Arguments
    External (M039, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M127, DeviceObj)
    External (MOEM, MethodObj)    // 3 Arguments
    External (NFPC, MethodObj)    // 0 Arguments

    OperationRegion (CPNV, SystemMemory, 0xBAF68018, 0x00010113)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M221,   8, 
        M086,   16, 
        M229,   8, 
        M231,   16, 
        M235,   8, 
        M233,   32, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x19), 
        M087,   1, 
            ,   1, 
        Offset (0x1C), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   32768, 
        M378,   32768, 
        M379,   32768, 
        M380,   32768, 
        M381,   32768, 
        M382,   32768, 
        M383,   32768, 
        M384,   32768, 
        M385,   32768, 
        M386,   32768, 
        M387,   32768, 
        M388,   32768, 
        M389,   32768, 
        M390,   32768, 
        M391,   32768, 
        M392,   32768, 
        M107,   64, 
        M320,   32, 
        M321,   32, 
        M322,   32, 
        M323,   32, 
        M324,   32, 
        M325,   32, 
        M326,   32, 
        M327,   16, 
        M328,   8, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32, 
        M220,   32, 
        M226,   32, 
        M251,   32, 
        M310,   32, 
        M280,   32, 
        M290,   32, 
        M331,   32, 
        M414,   16, 
        M444,   72, 
        M453,   32, 
        M454,   16, 
        M455,   8, 
        M456,   8, 
        M457,   8, 
        M449,   72, 
        M4C0,   32, 
        M23A,   8, 
        M31C,   32, 
        M4F0,   32, 
        M610,   32, 
        M620,   32, 
        M29A,   128, 
        M631,   32
    }

    Name (CTMR, Zero)
    Name (M285, Buffer (0x04)
    {
         0x01, 0x03, 0x80, 0x00                           // ....
    })
    Method (M000, 1, Serialized)
    {
        CreateByteField (M285, Zero, M286)
        CreateByteField (M285, One, M287)
        CreateWordField (M285, 0x02, M288)
        Name (M450, Buffer (0x05)
        {
             0x00, 0x96, 0x05, 0x00, 0x00                     // .....
        })
        CreateDWordField (M450, Zero, M452)
        CreateByteField (M450, 0x04, M451)
        Local0 = (Arg0 + 0xB0000000)
        If ((ToInteger (M286) == One))
        {
            Local1 = ToInteger (M288)
            If ((ToInteger (M287) == 0x03))
            {
                OperationRegion (VARM, SystemIO, Local1, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }
            ElseIf ((ToInteger (M287) == 0x02))
            {
                OperationRegion (VARN, SystemIO, Local1, 0x02)
                Field (VARN, WordAcc, NoLock, Preserve)
                {
                    VARS,   16
                }

                VARS = (Local0 & 0xFFFF)
            }
            ElseIf ((ToInteger (M287) == One))
            {
                OperationRegion (VARO, SystemIO, Local1, One)
                Field (VARO, ByteAcc, NoLock, Preserve)
                {
                    VART,   8
                }

                VART = (Local0 & 0xFF)
            }
        }

        If ((ToInteger (M451) == One))
        {
            Local2 = ToInteger (M452)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }

        OperationRegion (VARP, SystemMemory, 0xFED80808, 0x04)
        Field (VARP, DWordAcc, NoLock, Preserve)
        {
            VARU,   32
        }

        Local1 = VARU /* \M000.VARU */
        If ((Local1 >= CTMR))
        {
            Local2 = (Local1 - CTMR) /* \CTMR */
        }
        Else
        {
            Local2 = (Local1 + ((0xFFFFFFFE - CTMR) + One))
        }

        Divide (Local2, 0x19, Local3, Local2)
        Divide ((Local2 * 0x07), 0x03E8, Local3, Local2)
        If ((Local3 >= 0x64))
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.%d ms\n", Local0, Local1, Local2, Local3, Zero, Zero)
        }
        ElseIf ((Local3 >= 0x0A))
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.0%d ms\n", Local0, Local1, Local2, Local3, Zero, Zero)
        }
        Else
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.00%d ms\n", Local0, Local1, Local2, Local3, Zero, Zero)
        }

        CTMR = Local1
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0700), Arg0, Zero, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0400), Arg0, Zero, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 ((M084 + 0x0400), Arg0, Zero, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, Zero, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, Zero, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 == 0x15))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (M004, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M004.VAR2 */
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg1
    }

    Method (M006, 3, Serialized)
    {
        Local0 = (M004 (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, Zero)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, Zero)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, Zero)
            }

            Sleep (One)
        }

        If ((Arg0 == One))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (One)
        }

        If ((Arg0 == Zero))
        {
            M008 (Arg1)
            Local0 = M004 (M003 (0x03, Arg1, 0xA5))
            Local0 &= 0xFF
            Local1 = 0x01F4
            While (((Local1 > Zero) && (Local0 != 0x10)))
            {
                Local0 = M004 (M003 (0x03, Arg1, 0xA5))
                Local0 &= 0xFF
                Local1--
                Sleep (One)
            }

            If ((Local0 != 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x02)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, One)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (One)
    }

    Method (M007, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | One)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, Zero)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (One)
    }

    Method (M111, 2, Serialized)
    {
        M460 ("  KER-ASL-CpmSetDevicePower (0x%X, %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local3 != Zero))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 ((Local5 & 0xFF00FFFF), Local6)
                                If ((Arg1 == Zero))
                                {
                                    M000 (0x0DD8)
                                }
                                Else
                                {
                                    M000 (0x0DDB)
                                }
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                While ((M009 ((Local5 & 0xFF00FFFF)) != Local6)){}
                                If ((Arg1 == Zero))
                                {
                                    M000 (0x0DD9)
                                }
                                Else
                                {
                                    M000 (0x0DDC)
                                }
                            }

                            If ((Local4 == 0x02))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Sleep (((Local5 + 0x03E7) / 0x03E8))
                                If ((Arg1 == Zero))
                                {
                                    M000 (0x0DDA)
                                }
                                Else
                                {
                                    M000 (0x0DDD)
                                }
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M470, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If (((Local3 == Zero) && (Local4 != Zero)))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 ((Local5 & 0xFF00FFFF)) == Local6))
                            {
                                Local7 = One
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }

        M460 ("  KER-ASL-CpmCheckDevicePowerState (0x%X, %d)  Return (%d)\n", Arg0, Arg1, Local7, Zero, Zero, Zero)
        Return (Local7)
    }

    Method (M228, 1, Serialized)
    {
        If ((Arg0 > 0x03))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                    If ((Local3 == Arg0))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        If ((Local4 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 ((Local5 & 0xFF00FFFF), Local6)
                        }

                        If ((Local4 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 ((Local5 & 0xFF00FFFF)) != Local6)){}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M219, 2, Serialized)
    {
        M460 ("  KER-ASL-CpmSetDeviceClock (0x%X, %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If ((Arg0 != Zero))
        {
            Local0 = M221 /* \M221 */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* \M220 */
                If (Local0)
                {
                    Local0 += 0x10
                    Local1 = Zero
                    Local2 = One
                    While ((Local2 != 0xFF))
                    {
                        Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                        Local5 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        Local7 = M013 ((Local0 + Local1), 0x08, Zero, 0x20)
                        If ((Local4 == Arg0))
                        {
                            If (((Local2 < 0x0A) && (Local5 & 0x80)))
                            {
                                If ((Arg1 == Zero))
                                {
                                    Local3 = Zero
                                }
                                ElseIf ((Local5 & 0x04))
                                {
                                    If ((Arg1 == One))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            Local3 = 0x03
                                        }
                                        Else
                                        {
                                            Local3 = 0x0F
                                        }
                                    }

                                    If ((Arg1 == 0x02))
                                    {
                                        Local6 = M017 (Zero, M013 ((Local0 + Local1), 0x05, Zero, 0x08), 
                                            M013 ((Local0 + Local1), 0x06, Zero, 0x08), 0x19, Zero, 0x08)
                                        If ((M265 (Local6, Zero, Zero) == One))
                                        {
                                            If ((M085 >= 0x04))
                                            {
                                                Local3 = One
                                            }
                                        }
                                        ElseIf ((M085 >= 0x04))
                                        {
                                            Local3 = 0x03
                                        }
                                        Else
                                        {
                                            Local3 = 0x0F
                                        }
                                    }
                                }
                                ElseIf ((M085 >= 0x04))
                                {
                                    Local3 = 0x03
                                }
                                Else
                                {
                                    Local3 = 0x0F
                                }

                                If ((M085 >= 0x04))
                                {
                                    If ((M085 == 0x08))
                                    {
                                        If (((Local7 & 0x0FF00000) > Zero))
                                        {
                                            Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                            Local6 &= (0xFFFFFFFF ^ (0x03 << (Local2 << One)))
                                            Local6 |= (Local3 << (Local2 << One))
                                            M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), (Local2 >> 0x02), ((Local2 & 
                                                0x03) << One), 0x02, Local3)
                                        }
                                    }
                                    ElseIf (((Local7 >> 0x1C) == 0x02))
                                    {
                                        M012 ((M084 + 0x1300), (Local2 >> 0x02), ((Local2 & 
                                            0x03) << One), 0x02, Local3)
                                    }
                                    Else
                                    {
                                        M012 ((M084 + 0x0E00), (Local2 >> 0x02), ((Local2 & 
                                            0x03) << One), 0x02, Local3)
                                    }
                                }
                                Else
                                {
                                    M012 ((M084 + 0x0E00), (Local2 >> One), ((Local2 & 
                                        One) << 0x02), 0x04, Local3)
                                }

                                If ((Arg1 == Zero))
                                {
                                    M000 (0x0DE0)
                                }

                                If ((Arg1 == One))
                                {
                                    M000 (0x0DE1)
                                }

                                If ((Arg1 == 0x02))
                                {
                                    M000 (0x0DE2)
                                }

                                Local2 = 0xFF
                            }
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }
    }

    Method (M112, 2, Serialized)
    {
        M460 ("  KER-ASL-CpmSetDeviceReset (0x%X, %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 ((Local5 & 0xFF00FFFF), Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 ((Local5 & 0xFF00FFFF), Local6)
                                Local7 = M009 ((Local5 & 0xFF00FFFF))
                                Local4 = 0x03F2
                                While (((Local4 > Zero) && (Local7 != Local6)))
                                {
                                    Local4 = (Local4 - One)
                                    Stall (0x63)
                                    Local7 = M009 ((Local5 & 0xFF00FFFF))
                                }
                            }

                            If ((Local3 == Zero))
                            {
                                M000 (0x0DD5)
                            }

                            If ((Local3 == One))
                            {
                                M000 (0x0DD6)
                            }
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                            M000 (0x0DD7)
                        }
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M275, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 ((Local5 & 0xFF00FFFF)) == Local6))
                            {
                                Local7 = One
                            }
                        }
                    }

                    Local1 += 0x08
                }
            }
        }

        M460 ("  KER-ASL-CpmCheckDeviceResetState (0x%X, %d)  Return (%d)\n", Arg0, Arg1, Local7, Zero, Zero, Zero)
        Return (Local7)
    }

    Method (M113, 1, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M108 /* \M108 */
            Local7 = One
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    If ((Local2 == Arg0))
                    {
                        Local2 = 0xFF
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        If ((Local3 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x0A, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x0C, Zero, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x03))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x04))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x0A, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x0C, Zero, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }
                    }
                    Else
                    {
                        Local1 += 0x0E
                    }
                }
            }
        }
        Else
        {
            Local7 = Zero
        }

        If (Local7)
        {
            Local7 = One
        }

        Return (Local7)
    }

    Name (M046, 0xAA)
    Method (M045, 0, Serialized)
    {
        Local0 = Zero
        If ((M046 == 0xAA))
        {
            M046 = Zero
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("Windows 2021"))
                {
                    M046 = 0x0B
                    M460 ("  KER-ASL-_OSI = Windows 11\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2020"))
                {
                    M046 = 0x0A
                    M460 ("  KER-ASL-_OSI = Windows 10, version 2004\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2019"))
                {
                    M046 = 0x09
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1903\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2018.2"))
                {
                    M046 = 0x08
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1809\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2018"))
                {
                    M046 = 0x07
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1803\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2017.2"))
                {
                    M046 = 0x06
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1709\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2017"))
                {
                    M046 = 0x05
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1703\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2016"))
                {
                    M046 = 0x04
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1607\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2015"))
                {
                    M046 = 0x03
                    M460 ("  KER-ASL-_OSI = Windows 10\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2013"))
                {
                    M046 = 0x02
                    M460 ("  KER-ASL-_OSI = Windows 8.1\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2012"))
                {
                    M046 = One
                    M460 ("  KER-ASL-_OSI = Windows 8, Win Server 2012\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
            }
        }

        If ((M046 >= One))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M22A, 1, Serialized)
    {
        M460 ("  KER-ASL-CpmTriggerSci (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        OperationRegion (VARP, SystemMemory, 0xFED8020C, 0x14)
        Field (VARP, DWordAcc, NoLock, Preserve)
        {
            VA0C,   32, 
            Offset (0x0C), 
            VA18,   32, 
            VA1C,   32
        }

        Local0 = (One << Arg0)
        Local1 = 0x7FFFFFFF
        Local1 |= 0x80000000
        Local1 ^= Local0
        VA0C &= Local1
        VA18 = ((VA18 & Local1) | Local0)
        VA1C = ((VA1C & Local1) | Local0)
        Sleep (One)
        VA1C &= Local1
        VA18 &= Local1
    }

    Mutex (M230, 0x00)
    Method (M232, 3, Serialized)
    {
        Local0 = Arg0
        Local1 = Arg1
        Local2 = Arg2
        M460 ("  KER-ASL-CpmTriggerSmi (0x%X, 0x%X, %d)\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
        Acquire (M230, 0xFFFF)
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, M231, 0x02)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VAR1,   8, 
            VAR2,   8
        }

        VAR2 = Local1
        VAR1 = Local0
        If ((Local2 > Zero))
        {
            Sleep (Local2)
        }

        Release (M230)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM (Arg0, Arg1, Arg2))
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MLIB, 2, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = DerefOf (Arg1 [0x02])
                Switch (ToInteger (Local0))
                {
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x05)
                    }
                    Case (0x04)
                    {
                        M228 (0x04)
                        M228 (0x06)
                    }
                    Case (0x05)
                    {
                        M228 (0x04)
                        M228 (0x07)
                    }

                }
            }

        }
    }

    Method (M458, 1, NotSerialized)
    {
        ToInteger (M453, Local0)
        If ((Local0 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local0, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                THRM,   8, 
                Offset (0x14), 
                LSRM,   8, 
                Offset (0x18), 
                MSRM,   8
            }

            Local1 = 0x001E8480
            While (((Local1 > Zero) && ((LSRM & 0x60) != 0x60)))
            {
                Local1 -= One
            }

            If ((M457 != Zero))
            {
                Local2 = 0x001E8480
                While (((Local2 > Zero) && ((MSRM & 0x10) != 0x10)))
                {
                    Local2 -= One
                }
            }

            If ((Local1 != Zero))
            {
                THRM = Arg0
                Return (Zero)
            }
        }
        ElseIf ((Local0 > Zero))
        {
            CreateWordField (M285, 0x02, M288)
            OperationRegion (VARN, SystemIO, Local0, 0x08)
            Field (VARN, ByteAcc, NoLock, Preserve)
            {
                THRI,   8, 
                Offset (0x05), 
                LSRI,   8
            }

            Local1 = 0x001E8480
            If ((ToInteger (M288) != Local0))
            {
                While (((Local1 > Zero) && ((LSRI & 0xE0) != 0x60)))
                {
                    If ((LSRI == 0xFF))
                    {
                        M453 = Zero
                        Local1 = One
                    }

                    Local1 -= One
                }
            }

            If ((Local1 != Zero))
            {
                THRI = Arg0
                Return (Zero)
            }
        }

        Return (0xFF)
    }

    Method (M459, 2, NotSerialized)
    {
        ToInteger (M453, Local0)
        If ((Local0 == Zero))
        {
            Return (0xFF)
        }
        ElseIf ((Local0 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local0, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                DLLM,   8, 
                Offset (0x04), 
                DLHM,   8, 
                Offset (0x08), 
                FCRM,   8, 
                Offset (0x0C), 
                LCRM,   8, 
                Offset (0x10), 
                MCRM,   8
            }

            If (((LCRM & 0x3F) != M455))
            {
                LCRM = 0x80
                DLHM = (M454 >> 0x08)
                DLLM = (M454 & 0xFF)
                LCRM = M455 /* \M455 */
                FCRM = Zero
                FCRM = M456 /* \M456 */
                DLHM = Zero
                MCRM = Zero
            }
        }

        Local0 = SizeOf (Arg0)
        ToInteger (Arg1, Local1)
        Local2 = Zero
        ToBuffer (Arg0, Local3)
        If ((Local0 != Zero))
        {
            While (((Local0 > Local1) && (Local2 == Zero)))
            {
                Local2 = M458 (DerefOf (Local3 [Local1]))
                Local1 += One
            }
        }

        Return (Local2)
    }

    Method (M460, 7, Serialized)
    {
        CreateWordField (M285, 0x02, M288)
        ToInteger (M453, Local7)
        If ((Local7 == Zero))
        {
            Return (0xFF)
        }
        ElseIf ((Local7 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local7, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                DLLM,   8, 
                Offset (0x04), 
                DLHM,   8, 
                Offset (0x08), 
                FCRM,   8, 
                Offset (0x0C), 
                LCRM,   8, 
                Offset (0x10), 
                MCRM,   8
            }

            If (((LCRM & 0x3F) != M455))
            {
                LCRM = 0x80
                DLHM = (M454 >> 0x08)
                DLLM = (M454 & 0xFF)
                LCRM = M455 /* \M455 */
                FCRM = Zero
                FCRM = M456 /* \M456 */
                DLHM = Zero
                MCRM = Zero
            }
        }
        ElseIf ((ToInteger (M288) == Local7))
        {
            OperationRegion (VARS, SystemIO, Local7, 0x04)
            Field (VARS, DWordAcc, NoLock, Preserve)
            {
                VART,   32
            }

            VART = 0x5F535452
        }

        Local0 = SizeOf (Arg0)
        Local1 = Zero
        Local2 = Zero
        Local5 = One
        ToBuffer (Arg0, Local3)
        If ((Local0 != Zero))
        {
            While (((Local0 > Local1) && (Local2 == Zero)))
            {
                Local4 = DerefOf (Local3 [Local1])
                If (((Local4 == 0x25) && (0x07 > Local5)))
                {
                    If ((Local5 == One))
                    {
                        Local6 = Arg1
                    }
                    ElseIf ((Local5 == 0x02))
                    {
                        Local6 = Arg2
                    }
                    ElseIf ((Local5 == 0x03))
                    {
                        Local6 = Arg3
                    }
                    ElseIf ((Local5 == 0x04))
                    {
                        Local6 = Arg4
                    }
                    ElseIf ((Local5 == 0x05))
                    {
                        Local6 = Arg5
                    }
                    ElseIf ((Local5 == 0x06))
                    {
                        Local6 = Arg6
                    }

                    Local5 += One
                    Local1 += One
                    Local4 = DerefOf (Local3 [Local1])
                    If (((Local4 == 0x58) || (Local4 == 0x78)))
                    {
                        Local2 = M459 (ToHexString (Local6), 0x02)
                    }
                    ElseIf (((Local4 == 0x44) || (Local4 == 0x64)))
                    {
                        Local2 = M459 (ToDecimalString (Local6), Zero)
                    }
                    ElseIf (((Local4 == 0x53) || (Local4 == 0x73)))
                    {
                        Local2 = M459 (Local6, Zero)
                    }
                    Else
                    {
                        Local2 = M458 (0x25)
                        Local5 -= One
                        Local1 -= One
                    }
                }
                ElseIf ((Local4 == 0x0A))
                {
                    Local2 = M458 (0x0D)
                    Local2 = M458 (0x0A)
                }
                Else
                {
                    Local2 = M458 (Local4)
                }

                Local1 += One
            }
        }

        If ((ToInteger (M288) == Local7))
        {
            OperationRegion (VARU, SystemIO, Local7, 0x04)
            Field (VARU, DWordAcc, NoLock, Preserve)
            {
                VARV,   32
            }

            VARV = 0x5F454E44
        }

        Return (Local2)
    }

    Name (M404, Buffer (0x07)
    {
         0x00, 0x02, 0x06, 0x08, 0x04, 0x0A, 0x0C         // .......
    })
    Method (M405, 5, Serialized)
    {
        If ((M085 >= 0x04))
        {
            If ((M085 == 0x08))
            {
                Local1 = DerefOf (M404 [Arg4])
                If (((Arg0 > Zero) || (Arg1 > Zero)))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                    Local0 >>= Local1
                    Local0 &= 0x03
                }
                Else
                {
                    Local0 = M011 ((M084 + 0x0E00), (Local1 >> 0x08), (
                        Local1 & 0x07), 0x02)
                }
            }
            ElseIf ((Arg3 == 0x02))
            {
                Local0 = M011 ((M084 + 0x1300), (Local1 >> 0x08), (
                    Local1 & 0x07), 0x02)
            }
            Else
            {
                Local0 = M011 ((M084 + 0x0E00), (Local1 >> 0x08), (
                    Local1 & 0x07), 0x02)
            }
        }
        Else
        {
            Local0 = M011 ((M084 + 0x0E00), (Arg4 >> One), (
                (Arg4 & One) << 0x02), 0x04)
        }

        M460 ("  KER-ASL-CpmReadClkReq  (%d, %d, %d, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Arg4, Local0)
        Return (Local0)
    }

    Method (M406, 6, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteClkReq (%d, %d, %d, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)
        If ((M085 >= 0x04))
        {
            If ((M085 == 0x08))
            {
                Local1 = DerefOf (M404 [Arg4])
                If (((Arg0 > Zero) || (Arg1 > Zero)))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                    Local0 &= (0xFFFFFFFF ^ (0x03 << Local1))
                    Local0 |= (Arg5 << Local1)
                    M250 (Arg0, Arg1, Arg2, 0x02D01E00, Local0)
                }
                Else
                {
                    M012 ((M084 + 0x0E00), (Local1 >> 0x08), (Local1 & 0x07
                        ), 0x02, Arg5)
                }
            }
            ElseIf ((Arg3 == 0x02))
            {
                M012 ((M084 + 0x1300), (Local1 >> 0x08), (Local1 & 0x07
                    ), 0x02, Arg5)
            }
            Else
            {
                M012 ((M084 + 0x0E00), (Local1 >> 0x08), (Local1 & 0x07
                    ), 0x02, Arg5)
            }
        }
        Else
        {
            M012 ((M084 + 0x0E00), (Arg4 >> One), ((Arg4 & 
                One) << 0x02), 0x04, Arg5)
        }
    }

    Method (M600, 2, Serialized)
    {
        Name (TEMP, Package (0x04)
        {
            0xFF, 
            0x09, 
            Zero, 
            Zero
        })
        If ((Arg0 == Zero))
        {
            TEMP [Zero] = Zero
        }

        If ((Arg1 != 0x09))
        {
            TEMP [One] = Arg1
        }

        Local0 = DerefOf (TEMP [Zero])
        Local1 = DerefOf (TEMP [One])
        Local2 = DerefOf (TEMP [0x02])
        Local3 = DerefOf (TEMP [0x03])
        M460 ("  KER-ASL-CpmGenerateUPC () Return Package (4) {0x%X, 0x%X, 0x%X, 0x%X}\n", Local0, Local1, Local2, Local3, Zero, Zero)
        Return (TEMP) /* \M600.TEMP */
    }

    Method (M601, 6, Serialized)
    {
        Name (TEMP, Package (0x01)
        {
            Buffer (0x14)
            {
                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
            }
        })
        CreateField (DerefOf (TEMP [Zero]), 0x20, 0x10, WIDH)
        CreateField (DerefOf (TEMP [Zero]), 0x30, 0x10, HIGT)
        CreateField (DerefOf (TEMP [Zero]), 0x40, One, VISI)
        CreateField (DerefOf (TEMP [Zero]), 0x42, One, FLID)
        CreateField (DerefOf (TEMP [Zero]), 0x43, 0x03, PANE)
        CreateField (DerefOf (TEMP [Zero]), 0x46, 0x02, VTPS)
        CreateField (DerefOf (TEMP [Zero]), 0x48, 0x02, HZPS)
        CreateField (DerefOf (TEMP [Zero]), 0x4A, 0x04, SHAP)
        CreateField (DerefOf (TEMP [Zero]), 0x4F, 0x08, GPTN)
        CreateField (DerefOf (TEMP [Zero]), 0x57, 0x08, GPPS)
        CreateField (DerefOf (TEMP [Zero]), 0x60, 0x02, EJTB)
        CreateField (DerefOf (TEMP [Zero]), 0x73, 0x04, ROTN)
        CreateField (DerefOf (TEMP [Zero]), 0x80, 0x20, OFST)
        If (((Arg0 == Zero) || (Arg0 == 0x02)))
        {
            SHAP = 0x03
            WIDH = 0x08
            HIGT = 0x0E
        }
        ElseIf (((Arg0 == One) || (Arg0 == 0x03)))
        {
            SHAP = One
            WIDH = 0x03
            HIGT = 0x08
        }
        ElseIf ((Arg0 == 0x02))
        {
            SHAP = 0x02
            WIDH = 0x08
            HIGT = 0x08
            FLID = One
        }

        If (((Arg0 == 0x02) || (Arg0 == 0x03)))
        {
            ROTN = 0x02
        }

        VISI = Arg1
        GPTN = ((Arg2 >> 0x08) & 0xFF)
        GPPS = (Arg2 & 0xFF)
        EJTB = Arg3
        PANE = (Arg4 & 0x07)
        VTPS = ((Arg4 >> 0x04) & 0x03)
        HZPS = ((Arg4 >> 0x08) & 0x03)
        If ((Arg5 != Zero))
        {
            OFST = Arg5
        }

        CreateDWordField (DerefOf (TEMP [Zero]), Zero, DW00)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x04, DW01)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x08, DW02)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x0C, DW03)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x10, DW04)
        M460 ("  KER-ASL-CpmGeneratePLD () Return 0x%X, 0x%X, 0x%X, 0x%X, 0x%X\n", DW00, DW01, DW02, DW03, DW04, Zero)
        Return (TEMP) /* \M601.TEMP */
    }

    Method (M643, 1, Serialized)
    {
        ToInteger (Arg0, Local0)
        Local1 = Zero
        If ((Local0 != Zero))
        {
            While (((Local1 < 0x20) && ((Local0 & One) == Zero)))
            {
                Local0 >>= One
                Local1 += One
            }
        }

        If ((Local1 >= 0x20))
        {
            Local1 = Zero
        }

        Return (Local1)
    }

    Method (MPTS, 1, NotSerialized)
    {
        M460 ("  KER-ASL-MPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        M000 (0x0DE7)
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TPTS))
                {
                    M460 ("    KER-ASL-Call \\_SB.PCXX.GPXX.SAXX.TPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCXX.GPXX.SAXX.TPTS (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TPTS))
                {
                    M460 ("    KER-ASL-Call ZERO_POWR_ODD_SATA_PATH.TPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCI0.PTBR.PTST.TPTS (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TPTS))
            {
                M460 ("    KER-ASL-Call \\_SB.PCXX.SAXX.TPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.PCXX.SAXX.TPTS (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M263))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmOtherHotplugCard_PTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.M263 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x21)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IPTS))
                {
                    M460 ("    KER-ASL-Call \\_SB.IPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.IPTS (Arg0)
                }
            }
        }

        If ((M620 != Zero))
        {
            Local0 = M049 (M620, 0x10)
            If ((Local0 != Zero))
            {
                If (CondRefOf (\_SB.BPTS))
                {
                    M460 ("    KER-ASL-Call \\_SB.BPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.BPTS (Arg0)
                }
            }
        }

        If ((M4F0 != Zero))
        {
            If (CondRefOf (\_GPE.PTS0))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS0 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS0 (Arg0)
            }

            If (CondRefOf (\_GPE.PTS1))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS1 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS1 (Arg0)
            }

            If (CondRefOf (\_GPE.PTS2))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS2 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS2 (Arg0)
            }

            If (CondRefOf (\_GPE.PTS3))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS3 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS3 (Arg0)
            }
        }

        If (CondRefOf (\_SB.OPTS))
        {
            M460 ("    KER-ASL-Call \\_SB.OPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            \_SB.OPTS (Arg0)
        }

        M000 (0x0DE8)
    }

    Method (MWAK, 1, NotSerialized)
    {
        M460 ("  KER-ASL-MWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        M000 (0x0DE9)
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TWAK))
                {
                    M460 ("    KER-ASL-Call \\_SB.PCXX.GPXX.SAXX.TWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCXX.GPXX.SAXX.TWAK (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TWAK))
                {
                    M460 ("    KER-ASL-Call ZERO_POWR_ODD_SATA_PATH.TWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCI0.PTBR.PTST.TWAK (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TWAK))
            {
                M460 ("    KER-ASL-Call \\_SB.PCXX.SAXX.TWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.PCXX.SAXX.TWAK (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M264))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmOtherHotplugCard_WAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.M264 (Arg0)
            }
        }

        If ((M280 != Zero))
        {
            If (CondRefOf (\_SB.M284))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmLowPowerEthernet_WAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.M284 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x21)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IWAK))
                {
                    M460 ("    KER-ASL-Call \\_SB.IWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.IWAK (Arg0)
                }
            }
        }

        If ((M620 != Zero))
        {
            Local0 = M049 (M620, 0x10)
            If ((Local0 != Zero))
            {
                If (CondRefOf (\_SB.BWAK))
                {
                    M460 ("    KER-ASL-Call \\_SB.BWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.BWAK (Arg0)
                }
            }
        }

        If ((M4F0 != Zero))
        {
            If (CondRefOf (\_GPE.WAK0))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK0 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK0 (Arg0)
            }

            If (CondRefOf (\_GPE.WAK1))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK1 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK1 (Arg0)
            }

            If (CondRefOf (\_GPE.WAK2))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK2 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK2 (Arg0)
            }

            If (CondRefOf (\_GPE.WAK3))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK3 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK3 (Arg0)
            }
        }

        If (CondRefOf (\_SB.OWAK))
        {
            M460 ("    KER-ASL-Call \\_SB.OWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            \_SB.OWAK (Arg0)
        }

        M000 (0x0DEA)
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20, Arg4)
    }

    Method (M021, 4, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M021.VAR2 */
        M460 ("  KER-ASL-CpmReadPcieRegister  (0x%X, 0x%X, 0x%X, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local0, Zero)
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWritePcieRegister (0x%X, 0x%X, 0x%X, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg4
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, One, Zero)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, One, One)
    }

    Method (M024, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x0128)
        If ((Local0 & 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Local0 = M021 (Arg0, Arg1, Arg2, 0xA2)
        Local0 &= 0xFFFFFFFFFFFFFFF8
        Local1 = (Local0 >> 0x04)
        Local1 &= 0x07
        Local0 |= Local1
        Local0 |= 0x0100
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 4, Serialized)
    {
        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (Arg3)
        {
            M429 (Arg0, Arg1, Arg2, 0x88, Zero, 0x04, Arg3)
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, One)
        Local1 = 0x64
        Local2 = One
        While ((Local1 && Local2))
        {
            Sleep (One)
            Local3 = M430 (Arg0, Arg1, Arg2)
            If ((Local3 & 0x0800))
            {
                Local1--
            }
            Else
            {
                Local2 = Zero
            }
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (!Local2)
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M430, 3, Serialized)
    {
        Local0 = M017 (Arg0, Arg1, Arg2, 0x68, 0x10, 0x10)
        Return (Local0)
    }

    Method (M017, 6, Serialized)
    {
        Local0 = M645 (Arg0, Arg1, Arg2)
        If ((Local0 == Zero))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            Local1 = ((Local3 >> Arg4) & (Local3 >> (0x20 - Arg5)
                ))
        }
        Else
        {
            Local1 = M013 (Local0, Arg3, Arg4, Arg5)
        }

        Return (Local1)
    }

    Method (M018, 7, Serialized)
    {
        Local0 = M645 (Arg0, Arg1, Arg2)
        If ((Local0 != Zero))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M014 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M428, 6, Serialized)
    {
        Local0 = M645 (Arg0, Arg1, Arg2)
        If ((Local0 == Zero))
        {
            Local3 = 0xFF
            Local1 = ((Local3 >> Arg4) & (Local3 >> (0x08 - Arg5)
                ))
        }
        Else
        {
            Local1 = M011 (Local0, Arg3, Arg4, Arg5)
        }

        Return (Local1)
    }

    Method (M429, 7, Serialized)
    {
        Local0 = M645 (Arg0, Arg1, Arg2)
        If ((Local0 != Zero))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M012 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M265, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M645 (Arg0, Arg1, Arg2)
        Local2 = M646 (Local1, 0x10)
        If ((Local2 != Zero))
        {
            Local3 = M013 (Local1, (Local2 + 0x0C), 0x12, One)
            Local4 = M013 (Local1, (Local2 + 0x10), 0x08, One)
            If (((Local3 == One) && (Local4 == One)))
            {
                Local0 = One
            }
        }

        Return (Local0)
    }

    Method (M033, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M645 (Arg0, Arg1, Arg2)
        Local2 = M646 (Local1, 0x10)
        If ((Local2 != Zero))
        {
            Local0 = M013 (Local1, (Local2 + 0x0C), 0x0A, 0x02)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M645 (Arg0, Arg1, Arg2)
        Local2 = M646 (Local1, 0x10)
        If ((Local2 != Zero))
        {
            Local0 = M013 (Local1, (Local2 + 0x10), Zero, 0x02)
        }

        M460 ("  KER-ASL-CpmGetPcieAspm (0x%X, 0x%X, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Local0, Zero, Zero)
        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        M460 ("  KER-ASL-CpmSetPcieAspm (0x%X, 0x%X, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
        Local1 = M645 (Arg0, Arg1, Arg2)
        Local2 = M646 (Local1, 0x10)
        If ((Local2 != Zero))
        {
            M014 (Local1, (Local2 + 0x10), Zero, 0x02, (Arg3 & 0x03))
        }
    }

    Method (M114, 4, Serialized)
    {
        Local7 = Zero
        If (!M001 (Arg0, Arg1))
        {
            Name (M115, Buffer (0x05){})
            CreateWordField (M115, Zero, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            M116 = 0x05
            M119 = Zero
            M118 = Arg0
            M117 = Arg1
            If ((Arg2 == Zero))
            {
                If ((Arg3 != One))
                {
                    M120 = Zero
                    \_SB.ALIB (0x06, M115)
                }
            }
            Else
            {
                If ((Arg3 != One))
                {
                    M120 = One
                    \_SB.ALIB (0x06, M115)
                }

                Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    Local1 = M019 (Local0, Zero, Zero, Zero)
                    Local2 = 0x7FFFFFFF
                    Local2 |= 0x80000000
                    If (((Local1 != Zero) && (Local1 != Local2)))
                    {
                        Local7 = One
                    }
                }
            }
        }
        ElseIf ((Arg2 == Zero))
        {
            M002 (One, Arg1)
        }
        Else
        {
            M002 (Zero, Arg1)
            Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                Local1 = M019 (Local0, Zero, Zero, Zero)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If (((Local1 != Zero) && (Local1 != Local2)))
                {
                    Local7 = One
                }
            }
        }

        Return (Local7)
    }

    Method (M248, 1, Serialized)
    {
        If ((M085 == 0x08))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x0B))
        {
            If ((M085 >= 0x0D))
            {
                Return (M017 (Zero, 0x08, (Arg0 + One), 0x19, Zero, 0x08))
            }
            ElseIf ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, Arg0, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, 0x02, 0x19, Zero, 0x08))
            }
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M401, 3, Serialized)
    {
        Local0 = (M430 (Arg0, Arg1, Arg2) & 0x0F)
        If (((Local0 == 0x0F) || (Local0 == Zero)))
        {
            Return (0xFF)
        }

        If (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            If ((Arg0 <= 0x03))
            {
                Local3 = (0x06 - Arg0)
            }
            Else
            {
                Local3 = 0x06
            }
        }
        Else
        {
            Local3 = 0x03
        }

        Local3 = (0x14001000 + (Local3 << 0x14))
        Local0 = (Arg1 & 0x1F)
        Local0 = ((Local0 << 0x03) | (Arg2 & 0x07))
        Local1 = Zero
        If (((M085 >= 0x09) && (M085 <= 0x0A)))
        {
            Local2 = 0x09
        }
        ElseIf (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            Local2 = 0x16
        }
        ElseIf ((M085 == 0x0D))
        {
            Local2 = 0x0D
        }
        ElseIf ((M085 == 0x0E))
        {
            Local2 = 0x0A
        }
        ElseIf ((M085 == 0x0F))
        {
            Local2 = 0x10
        }
        ElseIf ((M085 == 0x10))
        {
            Local2 = 0x15
        }
        ElseIf ((M085 == 0x12))
        {
            Local2 = 0x14
        }
        ElseIf ((M085 == 0x13))
        {
            Local2 = 0x0D
        }
        ElseIf ((M085 == 0x14))
        {
            Local2 = 0x12
        }
        Else
        {
            Local2 = 0x12
        }

        Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
            ))
        While (((Local1 < Local2) && (Local4 != Local0)))
        {
            Local1++
            Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
                ))
        }

        If ((Local1 <= Local2))
        {
            Return (Local1)
        }
        Else
        {
            Return (0xFF)
        }
    }

    Method (M471, 3, Serialized)
    {
        If (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            If ((Arg0 <= 0x03))
            {
                Local5 = (0x04 - Arg0)
            }
            Else
            {
                Local5 = 0x04
            }
        }
        Else
        {
            Local5 = (Arg0 + One)
        }

        ToInteger (Arg1, Local4)
        If (((M085 >= 0x0D) && (M085 <= 0x0E)))
        {
            If ((Local4 >= 0x03))
            {
                Local4 -= 0x03
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x0F))
        {
            If ((Local4 >= 0x0C))
            {
                Local4 -= 0x0C
                Local5 += 0x03
            }
            ElseIf ((Local4 == 0x0B))
            {
                Local4 -= 0x0B
                Local5 += 0x02
            }
            ElseIf ((Local4 >= 0x05))
            {
                Local4 -= 0x05
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x12))
        {
            If ((Local4 >= 0x10))
            {
                Local4 -= 0x10
                Local5 += 0x03
            }
            ElseIf ((Local4 >= 0x0C))
            {
                Local4 -= 0x0C
                Local5 += 0x02
            }
            ElseIf ((Local4 >= 0x06))
            {
                Local4 -= 0x06
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x10))
        {
            If ((Local4 >= 0x09))
            {
                Local4 -= 0x09
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x13))
        {
            If ((Local4 >= 0x05))
            {
                Local4 -= 0x05
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x14))
        {
            If ((Local4 >= 0x09))
            {
                Local4 -= 0x09
                Local5 += 0x03
            }
            ElseIf ((Local4 >= 0x03))
            {
                Local4 -= 0x03
                Local5 += One
            }
        }
        ElseIf ((Local4 >= 0x08))
        {
            Local4 -= 0x08
            If (((M085 >= 0x0B) && (M085 <= 0x0C)))
            {
                Local5 += 0x04
            }
            Else
            {
                Local5 += One
            }
        }

        Local6 = (0x11000000 + (Local5 << 0x14))
        Local6 += (Arg2 << 0x10)
        If (((Arg2 == Zero) || (Arg2 == 0x04)))
        {
            Local6 += (Local4 << 0x0C)
        }

        Return (Local6)
    }

    Method (M402, 3, Serialized)
    {
        Local4 = M401 (Arg0, Arg1, Arg2)
        If ((Local4 != 0xFF))
        {
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                Local7 = (M471 (Arg0, Local4, 0x08) + 0x0188)
                Local0 = M249 (Zero, Zero, Zero, Local7)
                Local0 &= 0xFFFFDFFF
                M250 (Zero, Zero, Zero, Local7, (Local0 | 0x2000))
            }

            Local1 = (M019 (Zero, Zero, Zero, 0x84) & 0xFF00FCFF)
            Local2 = ((Arg1 << 0x13) | (Arg2 << 0x10))
            Local1 |= Local2
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0300))
            If ((M085 >= 0x0C))
            {
                Local3 = M019 (Zero, Zero, Zero, 0x84)
                Local5 = 0x4EEA
                Local6 = M453 /* \M453 */
                M453 = Zero
                While (((Local5 > Zero) && ((Local3 & 0x0400) != 0x0400)))
                {
                    Local5 = (Local5 - One)
                    Stall (0x63)
                    If (((Local5 & 0x03FF) == Zero))
                    {
                        M453 = Local6
                    }

                    Local3 = M019 (Zero, Zero, Zero, 0x84)
                    If (((Local5 & 0x03FF) == Zero))
                    {
                        M453 = Zero
                    }
                }

                M453 = Local6
            }

            Local6 = (M471 (Arg0, Local4, 0x04) + 0x0294)
            Local3 = M249 (Zero, Zero, Zero, Local6)
            Local5 = 0x4EEA
            Local4 = M453 /* \M453 */
            M453 = Zero
            While (((Local5 > Zero) && ((Local3 & 0x3F) != 0x1F)))
            {
                Local5 = (Local5 - One)
                Stall (0x63)
                If (((Local5 & 0x03FF) == Zero))
                {
                    M453 = Local4
                }

                Local3 = M249 (Zero, Zero, Zero, Local6)
                If (((Local5 & 0x03FF) == Zero))
                {
                    M453 = Zero
                }
            }

            M453 = Local4
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                M250 (Zero, Zero, Zero, Local7, Local0)
            }
        }
    }

    Method (M403, 4, Serialized)
    {
        Local4 = M401 (Arg0, Arg1, Arg2)
        If ((Local4 != 0xFF))
        {
            Local2 = (M471 (Arg0, Local4, 0x04) + 0x0280)
            Local0 = M249 (Zero, Zero, Zero, Local2)
            Local0 &= 0xFFBFFFFF
            Local1 = Arg3
            Local0 |= (Local1 << 0x16)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }
    }

    Method (M472, 4, Serialized)
    {
        Local4 = M401 (Arg0, Arg1, Arg2)
        If ((Local4 != 0xFF))
        {
            Local7 = (M471 (Arg0, Local4, 0x08) + 0x0428)
            If (((M085 >= 0x0D) && (M085 <= 0x0E)))
            {
                If ((Local4 >= 0x03))
                {
                    Local4 -= 0x03
                }
            }
            ElseIf ((M085 == 0x0F))
            {
                If ((Local4 >= 0x05))
                {
                    Local4 -= 0x05
                }
            }
            ElseIf ((M085 == 0x12))
            {
                If ((Local4 >= 0x06))
                {
                    Local4 -= 0x06
                }
            }
            ElseIf ((M085 == 0x13))
            {
                If ((Local4 >= 0x05))
                {
                    Local4 -= 0x05
                }
            }
            ElseIf ((M085 == 0x10))
            {
                If ((Local4 >= 0x09))
                {
                    Local4 -= 0x09
                }
            }
            ElseIf ((M085 == 0x14))
            {
                If ((Local4 >= 0x09))
                {
                    Local4 -= 0x09
                }
                ElseIf ((Local4 >= 0x03))
                {
                    Local4 -= 0x03
                }
            }
            ElseIf ((Local4 >= 0x08))
            {
                Local4 -= 0x08
            }

            Local0 = M249 (Zero, Zero, Zero, Local7)
            Local1 = (One << Local4)
            Local2 = (Arg3 << Local4)
            If (((Local0 & Local1) != Local2))
            {
                Local3 = (Local0 & (0xFFFFFFFF ^ Local1))
                M250 (Zero, Zero, Zero, Local7, (Local3 | Local2))
                Local0 = M249 (Zero, Zero, Zero, Local7)
            }
        }
    }

    Method (M645, 3, Serialized)
    {
        Local3 = Zero
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Return (Local3)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (Local0)
    }

    Method (M646, 2, Serialized)
    {
        Local0 = Zero
        Local1 = M049 (Arg0, 0x34)
        While ((Local1 != Zero))
        {
            Local2 = M049 (Arg0, Local1)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == Arg1))
            {
                Local0 = Local1
                Break
            }

            Local1 = M049 (Arg0, (Local1 + One))
        }

        M460 ("  FEA-ASL-CpmSearchPcieCapability (0x%X, 0x%X) = 0x%X\n", Arg0, Arg1, Local0, Zero, Zero, Zero)
        Return (Local0)
    }

    Method (M647, 2, Serialized)
    {
        M460 ("  KER-ASL-CpmDumpPcieRegisters (0x%X, 0x%X)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If ((Arg0 != 0xEEEEEEEE))
        {
            Local0 = M04B (Arg0, Zero)
            Local1 = 0x7FFFFFFF
            Local1 |= 0x80000000
            If (((Local0 != Zero) && (Local0 != Local1)))
            {
                M644 (Arg0, 0x04, Arg1)
            }
        }
    }

    Method (M648, 3, Serialized)
    {
        Local2 = Zero
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local0 = Zero
        While ((Local0 <= Arg1))
        {
            Local1 = Zero
            While ((Local1 <= Arg2))
            {
                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                    0x0F) & 0x000F8000))
                Local3 |= ((Local1 << 0x0C) & 0x7000)
                Local4 = M04B (M083, Local3)
                If (((Local4 != Local5) && (Local4 != Zero)))
                {
                    Local2 |= (One << Local0)
                }
                ElseIf ((Local1 == Zero))
                {
                    Break
                }

                Local1++
            }

            Local0++
        }

        M460 ("  KER-ASL-CpmSearchPcieDevice (Bus 0x%X) = Device 0x%X Exist\n", Arg0, Local2, Zero, Zero, Zero, Zero)
        Return (Local2)
    }

    Method (M649, 1, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != 0xEEEEEEEE))
        {
            Local2 = M646 (Arg0, One)
            If ((Local2 != Zero))
            {
                Local0 = (M04A (Arg0, (Local2 + 0x04)) & 0x7FFF)
                Local1 = (Local0 & 0xFFFC)
                Local0 = M04A (Arg0, (Local2 + 0x04))
            }
        }

        M460 ("  FEA-ASL-CpmGetPCIePowerState (0x%X) = 0x%X\n", Arg0, Local0, Zero, Zero, Zero, Zero)
        Return (Local0)
    }

    Method (M650, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != 0xEEEEEEEE))
        {
            Local2 = M646 (Arg0, One)
            If ((Local2 != Zero))
            {
                Local0 = (M04A (Arg0, (Local2 + 0x04)) & 0x7FFF)
                Local1 = (Local0 & 0xFFFC)
                M04D (Arg0, (Local2 + 0x04), (Local1 | Arg1))
            }
        }

        M460 ("  FEA-ASL-CpmSetPCIePowerState (0x%X, 0x%X) = 0x%X\n", Arg0, Arg1, Local0, Zero, Zero, Zero)
        Return (Local0)
    }

    Method (M651, 4, Serialized)
    {
        Local0 = M04B (Arg0, Zero)
        Local1 = 0x7FFFFFFF
        Local1 |= 0x80000000
        If ((((Arg1 != Zero) && (Arg0 != 0xEEEEEEEE)) && (
            (Local0 != Zero) && (Local0 != Local1))))
        {
            M04E (Arg1, (Arg2 + Zero), M04B (Arg0, 0x18))
            M04E (Arg1, (Arg2 + 0x04), M04B (Arg0, 0x1C))
            M04E (Arg1, (Arg2 + 0x08), M04B (Arg0, 0x20))
            M04E (Arg1, (Arg2 + 0x0C), M04B (Arg0, 0x24))
            M04E (Arg1, (Arg2 + 0x10), M04B (Arg0, 0x28))
            M04E (Arg1, (Arg2 + 0x14), M04B (Arg0, 0x2C))
            M04D (Arg1, (Arg2 + 0x18), M04A (Arg0, 0x04))
            M04C (Arg1, (Arg2 + 0x1A), M049 (Arg0, 0x0C))
            M04C (Arg1, (Arg2 + 0x1B), M049 (Arg0, 0x3C))
            Local0 = (Arg0 + M646 (Arg0, One))
            If ((Local0 != Arg0))
            {
                M04D (Arg1, (Arg2 + 0x1C), M04A (Local0, 0x04))
            }
            Else
            {
                M04D (Arg1, (Arg2 + 0x1C), Zero)
            }

            If ((Arg3 == One))
            {
                Local0 = (Arg0 + M646 (Arg0, 0x15))
                If ((Local0 != Arg0))
                {
                    M04E (Arg1, (Arg2 + 0x20), M04B (Local0, 0x08))
                    M04E (Arg1, (Arg2 + 0x24), M04B (Local0, 0x0C))
                    M04E (Arg1, (Arg2 + 0x28), M04B (Local0, 0x10))
                    M04E (Arg1, (Arg2 + 0x2C), M04B (Local0, 0x14))
                    M04E (Arg1, (Arg2 + 0x30), M04B (Local0, 0x18))
                    M04E (Arg1, (Arg2 + 0x34), M04B (Local0, 0x1C))
                }
                Else
                {
                    M04E (Arg1, (Arg2 + 0x20), Zero)
                    M04E (Arg1, (Arg2 + 0x24), Zero)
                    M04E (Arg1, (Arg2 + 0x28), Zero)
                    M04E (Arg1, (Arg2 + 0x2C), Zero)
                    M04E (Arg1, (Arg2 + 0x30), Zero)
                    M04E (Arg1, (Arg2 + 0x34), Zero)
                }
            }
        }
        Else
        {
            M04E (Arg1, (Arg2 + Zero), Zero)
            M04E (Arg1, (Arg2 + 0x04), Zero)
            M04E (Arg1, (Arg2 + 0x08), Zero)
            M04E (Arg1, (Arg2 + 0x0C), Zero)
            M04E (Arg1, (Arg2 + 0x10), Zero)
            M04E (Arg1, (Arg2 + 0x14), Zero)
            M04E (Arg1, (Arg2 + 0x18), Zero)
            M04E (Arg1, (Arg2 + 0x1C), Zero)
            If ((Arg3 == One))
            {
                M04E (Arg1, (Arg2 + 0x20), Zero)
                M04E (Arg1, (Arg2 + 0x24), Zero)
                M04E (Arg1, (Arg2 + 0x28), Zero)
                M04E (Arg1, (Arg2 + 0x2C), Zero)
                M04E (Arg1, (Arg2 + 0x30), Zero)
                M04D (Arg1, (Arg2 + 0x34), Zero)
            }
        }

        M460 ("  FEA-ASL-CpmSavePcieBridgeData (0x%X, 0x%X, 0x%X, %d)\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
    }

    Mutex (M421, 0x00)
    Method (M422, 4, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 == Zero))
        {
            Return (0xFFFFFFFF)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xE0
        Acquire (M421, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M422.VAR1 */
        Local2 = VAR2 /* \M422.VAR2 */
        VAR1 = Local1
        Release (M421)
        M460 ("  KER-ASL-CpmReadBxbSmnRegister  (%d, %d, %d, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M423, 5, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 != Zero))
        {
            M460 ("  KER-ASL-CpmWriteBxbSmnRegister (%d, %d, %d, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xE0
            Acquire (M421, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M423.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M421)
        }
    }

    Mutex (M253, 0x00)
    Method (M249, 4, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 == 0xFFFFFFFF))
        {
            Return (0xFFFFFFFF)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xB8
        If (CondRefOf (\_SB.AM00))
        {
            Acquire (\_SB.AM00, 0xFFFF)
        }
        Else
        {
            Acquire (M253, 0xFFFF)
        }

        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M249.VAR1 */
        Local2 = VAR2 /* \M249.VAR2 */
        VAR1 = Local1
        If (CondRefOf (\_SB.AM00))
        {
            Release (\_SB.AM00)
        }
        Else
        {
            Release (M253)
        }

        M460 ("  KER-ASL-CpmReadSmnRegister  (%d, %d, %d, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M250, 5, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 != 0xFFFFFFFF))
        {
            M460 ("  KER-ASL-CpmWriteSmnRegister (%d, %d, %d, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xB8
            If (CondRefOf (\_SB.AM00))
            {
                Acquire (\_SB.AM00, 0xFFFF)
            }
            Else
            {
                Acquire (M253, 0xFFFF)
            }

            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M250.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            If (CondRefOf (\_SB.AM00))
            {
                Release (\_SB.AM00)
            }
            Else
            {
                Release (M253)
            }
        }
    }

    Method (M013, 4, Serialized)
    {
        Local1 = M04B (Arg0, Arg1)
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
            ))
        M460 ("  KER-ASL-CpmReadMem32  (0x%X, 0x%X, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteMem32 (0x%X, 0x%X, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local1 = M04B (Arg0, Arg1)
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        M04E (Arg0, Arg1, Local4)
    }

    Method (M011, 4, Serialized)
    {
        Local1 = M049 (Arg0, Arg1)
        Local2 = ((Local1 >> Arg2) & (0xFF >> (0x08 - Arg3)
            ))
        M460 ("  KER-ASL-CpmReadMem8  (0x%X, 0x%X, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteMem8 (0x%X, 0x%X, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local1 = M049 (Arg0, Arg1)
        Local2 = (Arg2 + Arg3)
        Local2 = (0x08 - Local2)
        Local2 = (((0xFF << Local2) & 0xFF) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (0xFF ^ Local2)) | Local3)
        M04C (Arg0, Arg1, Local4)
    }

    Method (M252, 3, Serialized)
    {
        If ((M085 >= 0x08))
        {
            Local0 = M251 /* \M251 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = Zero
                While ((Local2 != 0xFF))
                {
                    Local2 = M011 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M011 ((Local0 + Local1), One, Zero, 0x08)
                    Local4 = M011 ((Local0 + Local1), 0x02, Zero, 0x08)
                    Local5 = M011 ((Local0 + Local1), 0x03, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local4 == Arg2))
                        {
                            Return (Local5)
                        }
                    }

                    Local1 += 0x05
                }
            }
        }

        Return (0xFFFFFFFF)
    }

    Method (M624, 1, Serialized)
    {
        Local0 = Zero
        If ((M251 != Zero))
        {
            Local1 = (0x10 + (Arg0 * 0x05))
            Local0 = M049 (M251, Local1)
            If ((Local0 == 0xFF))
            {
                Local0 = Zero
            }
        }

        Return (Local0)
    }

    Method (M049, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, One)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                VARR,   8
            }

            Local0 = VARR /* \M049.VARR */
        }

        Return (Local0)
    }

    Method (M04A, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x02)
            Field (VARM, WordAcc, NoLock, Preserve)
            {
                VARR,   16
            }

            Local0 = VARR /* \M04A.VARR */
        }

        Return (Local0)
    }

    Method (M04B, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local0 = VARR /* \M04B.VARR */
        }

        Return (Local0)
    }

    Method (M04C, 3, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, One)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                VARR,   8
            }

            VARR = Arg2
        }
    }

    Method (M04D, 3, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x02)
            Field (VARM, WordAcc, NoLock, Preserve)
            {
                VARR,   16
            }

            VARR = Arg2
        }
    }

    Method (M04E, 3, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            VARR = Arg2
        }
    }

    Method (M644, 3, Serialized)
    {
        M460 ("  FEA-ASL-CpmDumpData (0x%X, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
        If (((Arg1 != One) && ((Arg1 != 0x02) && 
            (Arg1 != 0x04))))
        {
            M460 ("  Arg1: One Data Width is illegal", Zero, Zero, Zero, Zero, Zero, Zero)
        }
        ElseIf ((Arg2 > 0x1000))
        {
            M460 ("  Arg2: Total Data Size is illegal", Zero, Zero, Zero, Zero, Zero, Zero)
        }
        Else
        {
            Local0 = Zero
            Local1 = Arg0
            M460 ("  0x%X:", Local1, Zero, Zero, Zero, Zero, Zero)
            While ((Local0 < Arg2))
            {
                If ((Arg1 == One))
                {
                    M460 ("  %X", M049 (Arg0, Local0), Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf ((Arg1 == 0x02))
                {
                    M460 ("  %X", M04A (Arg0, Local0), Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf ((Arg1 == 0x04))
                {
                    M460 ("  %X", M04B (Arg0, Local0), Zero, Zero, Zero, Zero, Zero)
                }

                Local0 += Arg1
                Local1 = (Arg0 + Local0)
                If (((Local1 & 0x0F) == Zero))
                {
                    M460 ("\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    If ((Local0 < Arg2))
                    {
                        M460 ("  0x%X:", (Local1 & 0xFFFFFFF0), Zero, Zero, Zero, Zero, Zero)
                    }
                }
            }
        }

        M460 ("\n", Zero, Zero, Zero, Zero, Zero, Zero)
    }

    Method (M412, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x1F)
        Local0 &= One
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M409 (Local0, Local1, Local3)
        Local5 >>= Local4
        Local5 &= One
        Return (Local5)
    }

    Method (M4E3, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x15)
        Local0 &= 0x07
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M4E1 (Local0, Local1, Local3)
        Local5 >>= Local4
        Local5 &= One
        Return (Local5)
    }

    Method (M413, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x1F)
        Local0 &= One
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local2 = (Arg0 >> 0x06)
        Local2 &= 0x03
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M409 (Local0, Local1, (((Local2 + One) * One
            ) + Local3))
        Local6 = Local5
        Local5 &= (0xFFFFFFFF ^ (One << Local4))
        Local5 |= ((Arg1 & One) << Local4)
        If ((Local5 != Local6))
        {
            M410 (Local0, Local1, (((Local2 + One) * One) + Local3
                ), Local5)
        }
    }

    Method (M4E4, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x15)
        Local0 &= 0x07
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local2 = (Arg0 >> 0x06)
        Local2 &= 0x03
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M4E1 (Local0, Local1, (((Local2 + One) * One
            ) + Local3))
        Local6 = Local5
        Local5 &= (0xFFFFFFFF ^ (One << Local4))
        Local5 |= ((Arg1 & One) << Local4)
        If ((Local5 != Local6))
        {
            M4E2 (Local0, Local1, (((Local2 + One) * One) + Local3
                ), Local5)
        }
    }

    Method (M43A, 1, Serialized)
    {
        Local0 = Zero
        Local1 = M04B (M128, 0x33)
        Local2 = M04B (M128, 0x72)
        If (((Local1 == Zero) || (Local2 == Zero)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local1 = 0x%X  Local2 = 0x%X  ERROR ERROR ERROR\n", Arg0, Local1, Local2, Zero, Zero, Zero)
            Return (Local0)
        }

        Local3 = M011 (Local2, 0x19, Zero, 0x08)
        If (((Local3 == Zero) || (Local3 == 0xFF)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 1\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Local2 = (Local1 + (Local3 << 0x14))
        Local3 = M013 (Local2, 0x08, 0x08, 0x18)
        If ((Local3 != 0x00060400))
        {
            If ((Arg0 >= 0x08))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d >= 8)  Not PROM21  ERROR ERROR ERROR\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                Return (Local0)
            }

            Local3 = 0x02
            Local2 += (Local3 << 0x0C)
        }
        ElseIf ((Arg0 >= 0x18))
        {
            Local4 = M049 (M128, 0x93)
            If ((Local4 == Zero))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local4 = 0x%X  ERROR ERROR ERROR\n", Arg0, Local4, Zero, Zero, Zero, Zero)
                Return (Local0)
            }
            Else
            {
                Local4 &= 0x1F
            }

            Local3 = M011 (Local2, 0x19, Zero, 0x08)
            If (((Local3 == Zero) || (Local3 == 0xFF)))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 2\n", Arg0, Local3, Zero, Zero, Zero, Zero)
                Return (Local0)
            }

            Local2 = (Local1 + (Local3 << 0x14))
            Local2 += (Local4 << 0x0F)
            Local3 = M011 (Local2, 0x19, Zero, 0x08)
            If (((Local3 == Zero) || (Local3 == 0xFF)))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 3\n", Arg0, Local3, Zero, Zero, Zero, Zero)
                Return (Local0)
            }

            Local2 = (Local1 + (Local3 << 0x14))
        }

        Local3 = M011 (Local2, 0x04, Zero, 0x08)
        If (((Local3 == Zero) || (Local3 == 0xFF)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 4\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        If (((Local3 & 0x02) != 0x02))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 5\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Local3 = M013 (Local2, 0x40, Zero, 0x20)
        Local3 &= 0xFFFFFFFB
        If (((Local3 == Zero) || (Local3 == 0xFFFFFFFB)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 6\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }
        Else
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local3)
        }
    }

    Method (M440, 1, Serialized)
    {
        Local0 = M43A (Arg0)
        If ((Local0 == Zero))
        {
            M460 ("  KER-ASL-CpmPtReadGpio  (%d) = %d  MMIO = 0x%X  ERROR ERROR ERROR\n", Arg0, Local0, Local0, Zero, Zero, Zero)
            Return (Local0)
        }

        If ((Arg0 >= 0x18))
        {
            Local1 = (Arg0 - 0x18)
        }
        Else
        {
            Local1 = Arg0
        }

        Local2 = M013 (Local0, Zero, Local1, One)
        If ((Local2 == One))
        {
            M014 (Local0, Zero, Local1, One, Zero)
        }

        Local2 = M013 (Local0, 0x04, Local1, One)
        M460 ("  KER-ASL-CpmPtReadGpio  (%d) = %d  MMIO = 0x%X\n", Arg0, Local2, Local0, Zero, Zero, Zero)
        Return (Local2)
    }

    Method (M441, 2, Serialized)
    {
        Local0 = M43A (Arg0)
        If ((Local0 == Zero))
        {
            M460 ("  KER-ASL-CpmPtWriteGpio (%d, %d)   MMIO = 0x%X  ERROR ERROR ERROR\n", Arg0, Arg1, Local0, Zero, Zero, Zero)
            Return (Local0)
        }

        If ((Arg0 >= 0x18))
        {
            Local1 = (Arg0 - 0x18)
        }
        Else
        {
            Local1 = Arg0
        }

        Local2 = M013 (Local0, Zero, Local1, One)
        If ((Local2 != One))
        {
            M014 (Local0, Zero, Local1, One, One)
        }

        M014 (Local0, 0x08, Local1, One, Arg1)
        M460 ("  KER-ASL-CpmPtWriteGpio (%d, %d)   MMIO = 0x%X\n", Arg0, Arg1, Local0, Zero, Zero, Zero)
    }

    Method (M009, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        Local2 = Zero
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                If (((Arg0 & 0xF8000000) == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        Local2 = M011 ((M084 + 0x1502), (Local1 * 0x04), Zero, 
                            One)
                    }
                    Else
                    {
                        Local2 = M011 ((M084 + 0x1202), (Local1 * 0x04), Zero, 
                            One)
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x1F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x1D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x1B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 >>= 0x10
                    Local2 &= One
                }
            }
            Else
            {
                Local2 = M011 ((M084 + 0x0100), Local1, 0x07, One)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x1F)
            Local3 &= One
            Local4 = (Arg0 >> 0x1D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x1B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 >>= 0x10
            Local2 &= One
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                Local2 = M038 ((Local1 + 0x08))
            }
            Else
            {
                Local2 = 0xFF
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            Local2 = M440 (Local1)
        }
        ElseIf ((Local0 == 0x06))
        {
            Local2 = M412 (Arg0)
        }
        ElseIf ((Local0 == 0x07))
        {
            Local2 = M4E3 (Arg0)
        }

        M460 ("  KER-ASL-CpmReadGpio  (0x%X) = 0x%X\n", Arg0, Local2, Zero, Zero, Zero, Zero)
        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        M460 ("  KER-ASL-CpmWriteGpio (0x%X, 0x%X)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                If (((Arg0 & 0xF8000000) == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                    Else
                    {
                        M012 ((M084 + 0x1202), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x1F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x1D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x1B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 &= 0xCF3FFFFF
                    Local2 |= 0x00800000
                    Local2 |= (Arg1 << 0x16)
                    M250 (Local3, Local4, Local5, Local6, Local2)
                }
            }
            Else
            {
                M012 ((M084 + 0x0100), Local1, 0x06, One, Arg1)
                M012 ((M084 + 0x0100), Local1, 0x05, One, Zero)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x1F)
            Local3 &= One
            Local4 = (Arg0 >> 0x1D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x1B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 &= 0xCF3FFFFF
            Local2 |= 0x00800000
            Local2 |= (Arg1 << 0x16)
            M423 (Local3, Local4, Local5, Local6, Local2)
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                M039 ((Local1 + 0x08), Arg1)
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            M441 (Local1, Arg1)
        }
        ElseIf ((Local0 == 0x06))
        {
            M413 (Arg0, Arg1)
        }
        ElseIf ((Local0 == 0x07))
        {
            M4E4 (Arg0, Arg1)
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */  0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // ~.......
        /* 0008 */  0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // . ......
        /* 0010 */  0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09         // .......
    })
    Name (M227, Buffer (0x18)
    {
        /* 0000 */  0x41, 0x42, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // AB......
        /* 0008 */  0x02, 0x44, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .D......
        /* 0010 */  0x17, 0x45, 0x0B, 0x01, 0x0F, 0x0D, 0x09, 0x08   // .E......
    })
    Name (M329, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x12, 0x18,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32A, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M330, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32B, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x0B, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x1D, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // ........
        /* 0010 */  0x17, 0x20, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // . T.(...
    })
    Name (M32C, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Method (M029, 1, Serialized)
    {
        If ((M085 == 0x02))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M037 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 < 0x02))
        {
            Return (M011 ((M084 + 0x0160), Arg0, 0x07, One))
        }
        ElseIf (((M085 > 0x02) && (M085 < 0x08)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M227 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x08))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M329 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x09) || (M085 == 0x0A)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0B) || (M085 == 0x0C)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32A [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0D) || (M085 == 0x0E)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x0F))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x10))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x12))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x13))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x14))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32C [Arg0]) * 
                0x04), Zero, One))
        }
    }

    Method (M031, 1, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        Return (M011 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 
            0x07), One))
    }

    Method (M032, 2, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        M012 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 0x07
            ), One, Arg1)
    }

    Method (M477, 2, Serialized)
    {
        If ((Arg1 == Zero))
        {
            Return (Zero)
        }

        OperationRegion (VARM, SystemIO, Arg0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            SMB8,   8
        }

        Local0 = Arg1
        While ((Local0 > Zero))
        {
            SMB8 |= 0x40
            If ((Local0 < 0x00FFFFFF))
            {
                If ((Local0 > 0x05))
                {
                    Local0 = (Local0 - 0x05)
                }
                Else
                {
                    Local0 = Zero
                }
            }

            Stall (0x05)
            Local1 = SMB8 /* \M477.SMB8 */
            If (((Local1 & 0x50) == 0x40))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Method (M478, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, Arg0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            SMB8,   8
        }

        SMB8 |= 0x80
    }

    Method (M479, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, Arg0, 0x03)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8
        }

        Local0 = Arg1
        While ((Local0 > Zero))
        {
            Local1 = 0x64
            Local2 = One
            While (((Local1 > Zero) && ((Local2 & One) != Zero)))
            {
                SMB0 = 0x1F
                If ((Local0 < 0x00FFFFFF))
                {
                    If ((Local0 > 0x05))
                    {
                        Local0 = (Local0 - 0x05)
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local1--
                Stall (0x05)
                Local2 = SMB0 /* \M479.SMB0 */
            }

            If (((Local2 & One) != Zero))
            {
                SMB2 = 0x02
            }
            Else
            {
                Break
            }
        }

        If (((SMB0 & One) != Zero))
        {
            Return (One)
        }

        While ((Local0 > Zero))
        {
            Local1 = 0x64
            Local2 = One
            While (((Local1 > Zero) && ((Local2 & One) != Zero)))
            {
                SMB1 = 0x3F
                If ((Local0 < 0x00FFFFFF))
                {
                    If ((Local0 > 0x05))
                    {
                        Local0 = (Local0 - 0x05)
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local1--
                Stall (0x05)
                Local2 = SMB1 /* \M479.SMB1 */
            }

            If (((Local2 & One) != Zero))
            {
                SMB1 = 0x02
            }
            Else
            {
                Break
            }
        }

        If (((SMB1 & One) != Zero))
        {
            Return (One)
        }

        Return (Zero)
    }

    Mutex (M408, 0x00)
    Method (M47A, 6, Serialized)
    {
        Local0 = Buffer (0x22){}
        CreateByteField (Local0, Zero, STAT)
        CreateByteField (Local0, One, LEN)
        CreateByteField (Local0, 0x02, DATB)
        CreateWordField (Local0, 0x02, DATW)
        CreateField (Local0, 0x10, 0x0100, DTBF)
        STAT = 0xFF
        LEN = Zero
        DTBF = Zero
        M000 (0x0DE5)
        M460 ("  KER-ASL-CpmSmbusExecutor (Port%d, isRead %d, Potcl %d, DevAddr 0x%X, Cmd 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        If (((Arg0 != Zero) && (Arg0 != One)))
        {
            STAT = 0x80
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x80\n", Zero)
            Return (Local0)
        }

        If (((Arg1 != Zero) && (Arg1 != One)))
        {
            STAT = 0x81
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x81\n", Zero)
            Return (Local0)
        }

        Name (VALP, Package (0x05)
        {
            Zero, 
            One, 
            0x02, 
            0x03, 
            0x05
        })
        If ((Match (VALP, MEQ, Arg2, MTR, Zero, Zero) == Ones))
        {
            STAT = 0x82
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x82\n", Zero)
            Return (Local0)
        }

        If (((Arg1 == Zero) && (Arg2 == 0x05)))
        {
            Local7 = Arg5
            Local2 = DerefOf (Local7 [Zero])
            If (((Local2 < One) || (Local2 > 0x20)))
            {
                STAT = 0x83
                M460 ("  KER-ASL-CpmSmbusExecutor return 0x83, Length %d\n", Local2, Zero, Zero, Zero, Zero, Zero)
                Return (Local0)
            }
        }

        Acquire (M408, 0xFFFF)
        Local4 = (M414 + (Arg0 << 0x05))
        If ((Local4 == Zero))
        {
            Release (M408)
            STAT = 0x84
            M460 ("  KER-ASL-CpmSmbusExecutor return 0x84, Local4 %d\n", Local4, Zero, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        OperationRegion (VARM, SystemIO, Local4, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        }

        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M47A.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        If (M477 (Local4, 0x4E20))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            STAT = 0x85
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x85\n", Zero)
            Return (Local0)
        }

        If (M479 (Local4, 0x4E20))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            M478 (Local4)
            Release (M408)
            STAT = 0x86
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x86\n", Zero)
            Return (Local0)
        }

        Local7 = Arg5
        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg3 << One) | Arg1)
            SMB3 = Arg4
            SMB2 = (Arg2 << 0x02)
            Local1 = SMB2 /* \M47A.SMB2 */
            If ((Arg1 == Zero))
            {
                If (((Arg2 == One) || (Arg2 == 0x02)))
                {
                    SMB5 = DerefOf (Local7 [One])
                }

                If ((Arg2 == 0x03))
                {
                    SMB6 = DerefOf (Local7 [0x02])
                    SMB5 = DerefOf (Local7 [One])
                }

                If ((Arg2 == 0x05))
                {
                    Local2 = DerefOf (Local7 [Zero])
                    SMB5 = Local2
                    Local1 = One
                    While ((Local1 <= Local2))
                    {
                        SMB7 = DerefOf (Local7 [Local1])
                        Local1++
                    }
                }
            }
            ElseIf ((Arg2 == 0x05))
            {
                Local2 = DerefOf (Local7 [Zero])
                SMB5 = Local2
            }

            SMB2 = ((Arg2 << 0x02) | 0x40)
            If ((Arg2 == 0x05))
            {
                Local1 = 0x1B58
            }
            Else
            {
                Local1 = 0x03E8
            }

            Local2 = One
            While (((Local1 > Zero) && ((Local2 & 0x0E) == Zero)))
            {
                If (((Local2 & One) == Zero))
                {
                    Break
                }

                Local1--
                Stall (0x05)
                Local2 = SMB0 /* \M47A.SMB0 */
            }

            If (((Local1 == Zero) && ((Local2 & One) != Zero)))
            {
                SMB2 = 0x02
                If ((Arg0 == One))
                {
                    SMB2 = Local6
                }

                If (((Local5 & One) == Zero))
                {
                    M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                }

                M478 (Local4)
                Release (M408)
                STAT = 0x87
                M459 ("  KER-ASL-CpmSmbusExecutor return 0x87\n", Zero)
                Return (Local0)
            }

            If (((Local2 & 0x04) != Zero))
            {
                Local3 = Zero
            }
            ElseIf (((Local2 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3--
            }
            Else
            {
                Local3 = Zero
                STAT = Zero
                If ((Arg1 != Zero))
                {
                    If (((Arg2 == One) || (Arg2 == 0x02)))
                    {
                        DATB = SMB5 /* \M47A.SMB5 */
                        LEN = One
                    }

                    If ((Arg2 == 0x03))
                    {
                        Local0 [0x03] = SMB6 /* \M47A.SMB6 */
                        Local0 [0x02] = SMB5 /* \M47A.SMB5 */
                        LEN = 0x02
                    }

                    If ((Arg2 == 0x05))
                    {
                        Local2 = SMB2 /* \M47A.SMB2 */
                        Local2 = SMB5 /* \M47A.SMB5 */
                        If ((Local2 > 0x20))
                        {
                            Local2 = 0x20
                        }

                        LEN = Local2
                        Local1 = 0x02
                        Local2 += 0x02
                        While ((Local1 < Local2))
                        {
                            Local0 [Local1] = 0xCC
                            Local0 [Local1] = SMB7 /* \M47A.SMB7 */
                            Local1++
                        }
                    }
                }
            }
        }

        Local1 = (SMB0 & 0x1D)
        STAT = Local1
        SMB0 = 0x1F
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        }

        M478 (Local4)
        Release (M408)
        M460 ("  KER-ASL-CpmSmbusExecutor return St: 0x%X, Len %d, Data: 0x%X, 0x%X, 0x%X, 0x%X ...\n", STAT, LEN, DerefOf (Local0 [0x02]), DerefOf (Local0 [
            0x03]), DerefOf (Local0 [0x04]), DerefOf (Local0 [0x05]))
        M000 (0x0DE6)
        Return (Local0)
    }

    Method (M47B, 3, Serialized)
    {
        Local0 = M47A (Arg0, Arg1, Zero, Arg2, Zero, Zero)
        Return (DerefOf (Local0 [Zero]))
    }

    Method (M47C, 4, Serialized)
    {
        Local0 = Buffer (0x02){}
        CreateByteField (Local0, Zero, LEN)
        CreateByteField (Local0, One, DATB)
        LEN = One
        DATB = Arg3
        Local1 = M47A (Arg0, Arg1, One, Arg2, Zero, Local0)
        Return (Local1)
    }

    Method (M47D, 5, Serialized)
    {
        Local0 = Buffer (0x02){}
        CreateByteField (Local0, Zero, LEN)
        CreateByteField (Local0, One, DATB)
        LEN = One
        DATB = Arg4
        Local1 = M47A (Arg0, Arg1, 0x02, Arg2, Arg3, Local0)
        Return (Local1)
    }

    Method (M47E, 5, Serialized)
    {
        Local0 = Buffer (0x03){}
        CreateByteField (Local0, Zero, LEN)
        CreateByteField (Local0, One, DATL)
        CreateByteField (Local0, 0x02, DATH)
        LEN = 0x02
        DATL = (Arg4 & 0xFF)
        DATH = ((Arg4 >> 0x08) & 0xFF)
        Local1 = M47A (Arg0, Arg1, 0x03, Arg2, Arg3, Local0)
        Return (Local1)
    }

    Method (M47F, 5, Serialized)
    {
        Local1 = M47A (Arg0, Arg1, 0x05, Arg2, Arg3, Arg4)
        Return (Local1)
    }

    Method (M409, 3, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        }

        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M409.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M409.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 ERROR 1\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M409.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 ERROR 2\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg1 << One) | One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M409.SMB2 */
            SMB2 = 0x48
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M409.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    If (((Local5 & One) == Zero))
                    {
                        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    }

                    Release (M408)
                    M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 ERROR 3\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = SMB5 /* \M409.SMB5 */
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        }

        Release (M408)
        M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0x%X Success\n", Arg0, Arg1, Arg2, Local4, Zero, Zero)
        Return (Local4)
    }

    Method (M410, 4, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        }

        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M410.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M410.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) = 0 ERROR 1\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M410.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) = 0 ERROR 2\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = (Arg1 << One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M410.SMB2 */
            SMB5 = Arg3
            SMB2 = 0x48
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M410.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    If (((Local5 & One) == Zero))
                    {
                        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    }

                    Release (M408)
                    M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) = 0 ERROR 3\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = Zero
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        }

        Release (M408)
        M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) Success\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
        Return (Local4)
    }

    Method (M4F1, 1, Serialized)
    {
        M460 ("  KER-ASL-CpmCheckExpanderInputEvent (0x%X) Start\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        Local5 = Zero
        If (((Arg0 >= Zero) && (Arg0 <= 0x03)))
        {
            Local0 = M4F0 /* \M4F0 */
            If ((Local0 != Zero))
            {
                Local0 += 0x10
                Local0 += (Arg0 * 0x26)
                If ((M049 (Local0, Zero) == Arg0))
                {
                    Local1 = M049 (Local0, 0x15)
                    Local2 = M049 (Local0, 0x16)
                    Local3 = M049 (Local0, 0x1E)
                    Local4 = M409 (Local1, Local2, Zero)
                    M04C (Local0, 0x1E, Local4)
                    Local4 ^= Local3
                    Local4 &= M049 (Local0, 0x1C)
                    Local4 |= M049 (Local0, 0x1D)
                    If ((M049 (Local0, 0x17) >= One))
                    {
                        Local3 = M049 (Local0, 0x25)
                        Local5 = M409 (Local1, Local2, One)
                        M04C (Local0, 0x25, Local5)
                        Local5 ^= Local3
                        Local5 &= M049 (Local0, 0x23)
                        Local5 |= M049 (Local0, 0x24)
                        Local5 <<= 0x08
                    }

                    Local5 |= Local4
                }
            }
        }

        M460 ("  KER-ASL-CpmCheckExpanderInputEvent (0x%X) = 0x%X End\n", Arg0, Local5, Zero, Zero, Zero, Zero)
        Return (Local5)
    }

    Mutex (M4E5, 0x00)
    Name (M4E7, 0x5A)
    Name (M4E8, 0x5A)
    Name (M4E9, 0x5A)
    Name (M4EA, 0x5A5A5A5A)
    Name (M4EB, 0x5A5A5A5A)
    Name (M4EC, Package (0x07)
    {
        0x06, 
        Package (0x05)
        {
            0x0F, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                Zero, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                Zero, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x71, 
                0x72, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x13, 
                0x14, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }
        }, 

        Package (0x05)
        {
            0x13, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                Zero, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                Zero, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x71, 
                0x72, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x13, 
                0x14, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }
        }, 

        Package (0x05)
        {
            0x10, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                Zero, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                Zero, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x71, 
                0x72, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x13, 
                0x14, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }
        }, 

        Package (0x07)
        {
            0x11, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                One, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                One, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x95, 
                0x96, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x97, 
                0x98, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }, 

            Package (0x06)
            {
                "I2C4", 
                0x0D, 
                0x0E, 
                Zero, 
                0xFED81E52, 
                0xFEDC6000
            }, 

            Package (0x06)
            {
                "I2C5", 
                0x13, 
                0x14, 
                Zero, 
                0xFED81E54, 
                0xFEDCB000
            }
        }, 

        Package (0x05)
        {
            0x12, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                Zero, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                Zero, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x71, 
                0x72, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x13, 
                0x14, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }
        }, 

        Package (0x05)
        {
            0x14, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                Zero, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                Zero, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x71, 
                0x72, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x13, 
                0x14, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }
        }
    })
    Method (M4E6, 1, Serialized)
    {
        Local0 = M085 /* \M085 */
        Local1 = DerefOf (M4EC [Zero])
        Local2 = One
        While ((Local2 <= Local1))
        {
            Local3 = DerefOf (M4EC [Local2])
            Local4 = DerefOf (Local3 [Zero])
            If ((Local4 == Local0))
            {
                Break
            }

            Local2++
        }

        If ((Local2 > Local1))
        {
            Return (Zero)
        }

        Local2 = One
        Local1 = SizeOf (Local3)
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = "I2C0"
            }
            Case (One)
            {
                Local0 = "I2C1"
            }
            Case (0x02)
            {
                Local0 = "I2C2"
            }
            Case (0x03)
            {
                Local0 = "I2C3"
            }
            Case (0x04)
            {
                Local0 = "I2C4"
            }
            Case (0x05)
            {
                Local0 = "I2C5"
            }

        }

        While ((Local2 <= Local1))
        {
            Local4 = DerefOf (Local3 [Local2])
            Local5 = DerefOf (Local4 [Zero])
            If ((Local5 == Local0))
            {
                Break
            }

            Local2++
        }

        If ((Local2 > Local1))
        {
            Return (Zero)
        }

        M4E7 = DerefOf (Local4 [One])
        M4E8 = DerefOf (Local4 [0x02])
        M4E9 = DerefOf (Local4 [0x03])
        M4EA = DerefOf (Local4 [0x04])
        M4EB = DerefOf (Local4 [0x05])
        Return (One)
    }

    Method (M4E0, 5, Serialized)
    {
        Local0 = M4E6 (Arg0)
        If ((Local0 == Zero))
        {
            Return (0xFF00)
        }

        Name (RTFF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        Local0 = M4EA /* \M4EA */
        Local1 = M4EB /* \M4EB */
        OperationRegion (VAR0, SystemMemory, Local0, 0x02)
        Field (VAR0, ByteAcc, NoLock, Preserve)
        {
            ADTD,   2, 
            ADPS,   1, 
            ADPD,   1, 
            ADSO,   1, 
            ADSC,   1, 
            ADSR,   1, 
            ADIS,   1, 
            ADDS,   3
        }

        OperationRegion (VAR1, SystemMemory, Local1, 0x0100)
        Field (VAR1, DWordAcc, NoLock, Preserve)
        {
            IC00,   32, 
            IC04,   32, 
            Offset (0x10), 
            IC10,   32, 
            IC14,   32, 
            IC18,   32, 
            IC1C,   32, 
            IC20,   32, 
            Offset (0x30), 
            IC30,   32, 
            IC34,   32, 
            IC38,   32, 
            IC3C,   32, 
            IC40,   32, 
            IC44,   32, 
            IC48,   32, 
            Offset (0x54), 
            IC54,   32, 
            Offset (0x6C), 
            IC6C,   32, 
            IC70,   32, 
            IC74,   32, 
            IC78,   32, 
            IC7C,   32, 
            IC80,   32, 
            Offset (0x9C), 
            IC9C,   32, 
            Offset (0xF4), 
            ICF4,   32
        }

        Name (BUFF, Buffer (0x03)
        {
             0x00, 0x00, 0x00                                 // ...
        })
        CreateByteField (BUFF, Zero, AOAC)
        CreateByteField (BUFF, One, ISCL)
        CreateByteField (BUFF, 0x02, ISDA)
        Acquire (M4E5, 0xFFFF)
        Local1 = 0x000186A0
        Local0 = Zero
        AOAC = ADTD /* \M4E0.ADTD */
        ISCL = M011 (0xFED80D00, M4E7, Zero, 0x08)
        ISDA = M011 (0xFED80D00, M4E8, Zero, 0x08)
        M012 (0xFED80D00, M4E7, Zero, 0x08, M4E9)
        M012 (0xFED80D00, M4E8, Zero, 0x08, M4E9)
        Local2 = AOAC /* \M4E0.AOAC */
        If ((Local2 == 0x03))
        {
            ADTD = Zero
            ADPD = One
            Local3 = ADDS /* \M4E0.ADDS */
            While ((Local3 != 0x07))
            {
                Local1--
                Stall (0x0A)
                Local3 = ADDS /* \M4E0.ADDS */
                If ((Local1 == Zero))
                {
                    Local0 = 0xFF01
                    Break
                }
            }
        }

        If ((Local0 == Zero))
        {
            Local2 = IC70 /* \M4E0.IC70 */
            While ((0x20 == (Local2 & 0x20)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for IDE : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF02
                    Break
                }

                Local2 = IC70 /* \M4E0.IC70 */
                Local1--
                Stall (0x0A)
            }
        }

        If ((Local0 == Zero))
        {
            IC6C = Zero
            Local2 = IC9C /* \M4E0.IC9C */
            While ((Zero != (Local2 & One)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for fI2cDisable : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF03
                    Break
                }

                Local2 = IC9C /* \M4E0.IC9C */
                Local1--
                Stall (0x0A)
            }
        }

        If ((Local0 == Zero))
        {
            IC00 = 0x63
            IC04 = Arg1
            IC14 = 0x0285
            IC18 = 0x0357
            IC7C = 0x00400040
            IC38 = Zero
            IC34 = Zero
            IC30 = Zero
            Local2 = IC40 /* \M4E0.IC40 */
            Local2 = IC54 /* \M4E0.IC54 */
        }

        If ((Local0 == Zero))
        {
            IC6C = One
            Local2 = IC9C /* \M4E0.IC9C */
            While ((Zero == (Local2 & One)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for I2cEnable : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF04
                    Break
                }

                Local2 = IC9C /* \M4E0.IC9C */
                Local1--
                Stall (0x0A)
            }
        }

        If ((Local0 == Zero))
        {
            Local3 = Arg3
            Local4 = Arg2
            Local5 = Zero
            Local6 = Zero
            Local7 = 0x02
            While (((Local3 + Local4) > Zero))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for TxRx: (0x%X, 0x%X)\n", Local3, Local4, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF06
                    Break
                }

                Local2 = IC70 /* \M4E0.IC70 */
                If (((Local2 & 0x08) != Zero))
                {
                    Local2 = IC10 /* \M4E0.IC10 */
                    Local1--
                    Stall (0x0A)
                    Continue
                }

                Local2 = IC74 /* \M4E0.IC74 */
                If ((Local2 != Zero))
                {
                    Local1--
                    Stall (0x0A)
                    Continue
                }

                If ((Local3 > One))
                {
                    IC10 = (ToInteger (DerefOf (Arg4 [Local5])) & 0xFF)
                    Local3--
                    Local5++
                }
                ElseIf (((Local3 == One) && (Local4 != Zero)))
                {
                    IC10 = (ToInteger (DerefOf (Arg4 [Local5])) & 0xFF)
                    Local3--
                    Local5++
                }
                ElseIf (((Local3 == One) && (Local4 == Zero)))
                {
                    IC10 = ((ToInteger (DerefOf (Arg4 [Local5])) & 0xFF
                        ) | 0x0200)
                    Local3--
                    Local5++
                }
                ElseIf (((Local3 == Zero) && (Local4 > One)))
                {
                    IC10 = 0x0100
                    Local6 = One
                    Local4--
                }
                ElseIf (((Local3 == Zero) && (Local4 == One)))
                {
                    IC10 = 0x0300
                    Local6 = One
                    Local4--
                }

                Local1--
                Stall (0x0A)
                Local2 = IC34 /* \M4E0.IC34 */
                If ((Zero != (Local2 & 0x40)))
                {
                    Local7 = IC54 /* \M4E0.IC54 */
                    Local2 = IC80 /* \M4E0.IC80 */
                    M460 ("  I2cTX Abrt Source: (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF05
                    Break
                }

                If ((Local6 != Zero))
                {
                    Local2 = IC70 /* \M4E0.IC70 */
                    While (((Local2 & 0x08) != 0x08))
                    {
                        Local2 = IC70 /* \M4E0.IC70 */
                        If ((Local1 == Zero))
                        {
                            M460 ("  I2cTimeout for Rx : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                            Local0 = 0xFF07
                            Break
                        }

                        Local1--
                        Stall (0x0A)
                    }
                }

                If ((Local6 != Zero))
                {
                    Local2 = IC10 /* \M4E0.IC10 */
                    RTFF [Local7] = Local2
                    Local1--
                    Stall (0x14)
                    Local6 = Zero
                }
            }
        }

        Release (M4E5)
        If ((Local0 == Zero))
        {
            Local2 = IC70 /* \M4E0.IC70 */
            While ((0x20 == (Local2 & 0x20)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for IDE2 : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF08
                    Break
                }

                Local2 = IC70 /* \M4E0.IC70 */
                Local1--
                Stall (0x0A)
            }
        }

        If (((Local0 > 0xFF04) && (Local0 < 0xFF08)))
        {
            IC6C = Zero
            Local2 = IC9C /* \M4E0.IC9C */
            While ((Zero != (Local2 & One)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for fI2cDisable : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF09
                    Break
                }

                Local2 = IC9C /* \M4E0.IC9C */
                Local1--
                Stall (0x0A)
            }
        }

        Local3 = AOAC /* \M4E0.AOAC */
        If ((Local3 == 0x03))
        {
            ADPD = Zero
            Local2 = ADDS /* \M4E0.ADDS */
            While ((Local2 != Zero))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for AOAC Off : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF10
                    Break
                }

                Local1--
                Stall (0x0A)
                Local2 = ADDS /* \M4E0.ADDS */
            }

            ADTD = 0x03
        }

        M012 (0xFED80D00, M4E7, Zero, 0x08, ISCL)
        M012 (0xFED80D00, M4E8, Zero, 0x08, ISDA)
        CreateWordField (RTFF, Zero, STAT)
        STAT = Local0
        Return (RTFF) /* \M4E0.RTFF */
    }

    Method (M4E1, 3, Serialized)
    {
        Name (RTFF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        Name (WRFF, Buffer (One)
        {
             0x00                                             // .
        })
        CreateByteField (WRFF, Zero, WDAT)
        WDAT = Arg2
        RTFF = M4E0 (Arg0, Arg1, One, One, WRFF)
        CreateWordField (RTFF, Zero, STAT)
        CreateByteField (RTFF, 0x02, RDAT)
        Local0 = STAT /* \M4E1.STAT */
        Local1 = RDAT /* \M4E1.RDAT */
        M460 ("  Read I2C Byte (0x%X, 0x%X)\n", Local0, Local1, Zero, Zero, Zero, Zero)
        If ((Local0 == Zero))
        {
            Return ((RDAT & 0xFF))
        }

        Return (Zero)
    }

    Method (M4E2, 4, Serialized)
    {
        Name (WRFF, Buffer (0x02)
        {
             0x00, 0x00                                       // ..
        })
        CreateByteField (WRFF, Zero, WDA1)
        CreateByteField (WRFF, One, WDA2)
        WDA1 = Arg2
        WDA2 = (Arg3 & 0xFF)
        Local0 = M4E0 (Arg0, Arg1, Zero, 0x02, WRFF)
        CreateWordField (Local0, Zero, STAT)
        Local1 = STAT /* \M4E2.STAT */
        M460 ("  Write I2C Byte(0x%X)\n", Local1, Zero, Zero, Zero, Zero, Zero)
    }

    Scope (\_SB.GPIO)
    {
        Method (XINI, 0, NotSerialized)
        {
            M460 ("  KER-ASL-\\_SB.GPIO._INI Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If ((M4F0 != Zero))
            {
                Local0 = M4F1 (Zero)
                Local0 = M4F1 (One)
                Local0 = M4F1 (0x02)
                Local0 = M4F1 (0x03)
            }

            M460 ("  KER-ASL-\\_SB.GPIO._INI End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }
    }

    Scope (\_GPE)
    {
        Method (SIE0, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE0 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE0))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE0 ()
            }

            Local0 = M4F1 (Zero)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP00))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP00\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP00 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP01))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP01\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP01 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP02))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP02\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP02 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP03))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP03\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP03 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP04))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP04\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP04 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP05))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP05\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP05 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP06))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP06\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP06 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP07))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP07\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP07 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP10))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP10\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP10 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP11))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP11\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP11 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP12))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP12\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP12 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP13))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP13\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP13 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP14))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP14\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP14 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP15))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP15\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP15 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP16))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP16\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP16 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP17))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP17\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP17 ()
                }
            }

            If (CondRefOf (\_GPE.AIE0))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE0 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE0 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SIE1, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE1 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE1))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE1\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE1 ()
            }

            Local0 = M4F1 (One)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP20))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP20\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP20 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP21))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP21\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP21 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP22))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP22\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP22 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP23))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP23\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP23 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP24))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP24\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP24 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP25))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP25\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP25 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP26))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP26\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP26 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP27))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP27\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP27 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP30))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP30\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP30 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP31))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP31\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP31 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP32))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP32\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP32 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP33))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP33\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP33 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP34))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP34\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP34 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP35))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP35\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP35 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP36))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP36\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP36 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP37))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP37\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP37 ()
                }
            }

            If (CondRefOf (\_GPE.AIE1))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE1\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE1 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE1 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SIE2, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE2 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE2))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE2\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE2 ()
            }

            Local0 = M4F1 (0x02)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP40))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP40\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP40 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP41))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP41\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP41 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP42))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP42\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP42 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP43))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP43\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP43 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP44))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP44\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP44 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP45))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP45\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP45 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP46))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP46\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP46 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP47))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP47\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP47 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP50))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP50\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP50 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP51))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP51\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP51 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP52))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP52\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP52 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP53))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP53\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP53 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP54))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP54\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP54 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP55))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP55\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP55 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP56))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP56\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP56 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP57))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP57\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP57 ()
                }
            }

            If (CondRefOf (\_GPE.AIE2))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE2\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE2 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE2 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SIE3, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE3 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE3))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE3\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE3 ()
            }

            Local0 = M4F1 (0x03)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP60))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP60\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP60 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP61))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP61\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP61 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP62))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP62\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP62 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP63))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP63\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP63 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP64))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP64\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP64 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP65))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP65\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP65 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP66))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP66\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP66 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP67))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP67\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP67 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP70))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP70\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP70 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP71))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP71\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP71 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP72))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP72\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP72 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP73))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP73\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP73 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP74))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP74\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP74 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP75))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP75\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP75 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP76))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP76\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP76 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP77))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP77\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP77 ()
                }
            }

            If (CondRefOf (\_GPE.AIE3))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE3\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE3 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE3 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Name (M4D2, Buffer (0x08){})
        Method (_L1B, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Local3 = Buffer (0x08){}
            CreateWordField (Local3, Zero, M254)
            CreateByteField (Local3, 0x02, M255)
            CreateDWordField (Local3, 0x03, M256)
            M256 = Zero
            M254 = 0x07
            M255 = 0x30
            If (CondRefOf (\_SB.ALIB))
            {
                M460 ("  KER-ASL-Call \\_SB.ALIB (0x0C, 0x%X)\n", Local3, Zero, Zero, Zero, Zero, Zero)
                Local4 = \_SB.ALIB (0x0C, Local3)
                M4D2 = Local4
                CreateDWordField (M4D2, Zero, M4D0)
                CreateDWordField (M4D2, 0x04, M4D1)
                ToInteger (M4D0, Local0)
                ToInteger (M4D1, Local1)
                M460 ("  KER-ASL-ALIB Return Data (0x%X, 0x%X)\n", Local0, Local1, Zero, Zero, Zero, Zero)
                If ((Local0 == Zero))
                {
                    If (CondRefOf (\_SB.APAD))
                    {
                        \_SB.APAD.M446 [One] = Local1
                        M460 ("  KER-ASL-Notify \\_SB.APAD 0x80\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.APAD, 0x80) // Status Change
                    }
                }
                ElseIf ((Local0 == One))
                {
                    M460 ("  KER-ASL-Notify \\_SB.APAD 0x84\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf ((Local0 == 0x02))
                {
                    M460 ("  KER-ASL-Notify \\_SB.APAD 0x85\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    If (CondRefOf (NFPC))
                    {
                        NFPC ()
                    }
                }
            }
        }
    }

    Scope (\_SB)
    {
        Device (APAD)
        {
            Name (_HID, "ACPI000C" /* Processor Aggregator Device */)  // _HID: Hardware ID
            Name (M446, Package (0x02)
            {
                One, 
                Zero
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (\_OSI ("Processor Aggregator Device"))
                {
                    Local0 = M04A (M128, 0x91)
                    If (((Local0 & 0x80) == 0x80))
                    {
                        M460 ("  KER-ASL-\\_SB.APAD._STA = 0xF\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (0x0F)
                    }
                    Else
                    {
                        M460 ("  KER-ASL-\\_SB.APAD._STA = 0x0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (Zero)
                    }
                }
                Else
                {
                    M460 ("  KER-ASL-1-\\_SB.APAD._STA = 0x0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (Zero)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                M460 ("  KER-ASL-\\_SB.APAD._INI\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Local0 = M04A (M128, 0x91)
                If ((((Local0 & 0xC0) == 0xC0) && ((Local0 & 
                    0xFF00) != 0xFF00)))
                {
                    Local3 = Buffer (0x08){}
                    CreateWordField (Local3, Zero, M254)
                    CreateByteField (Local3, 0x02, M255)
                    CreateDWordField (Local3, 0x03, M256)
                    M256 = (Local0 >> 0x08)
                    M254 = 0x07
                    M255 = 0x31
                    If (CondRefOf (\_SB.ALIB))
                    {
                        M460 ("  KER-ASL-Call \\_SB.ALIB (0x0C, 0x%X)\n", Local3, Zero, Zero, Zero, Zero, Zero)
                        \_SB.ALIB (0x0C, Local3)
                    }
                }
            }

            Method (_PUR, 0, NotSerialized)  // _PUR: Processor Utilization Request
            {
                ToInteger (DerefOf (M446 [Zero]), Local0)
                ToInteger (DerefOf (M446 [One]), Local1)
                M460 ("  KER-ASL-\\_SB.APAD._PUR Return Package (2) (0x%X, 0x%X) to OSPM\n", Local0, Local1, Zero, Zero, Zero, Zero)
                Return (M446) /* \_SB_.APAD.M446 */
            }
        }
    }
}



TPM2
----
[000h 0000 004h]                   Signature : "TPM2"    [Trusted Platform Module hardware interface Table]
[004h 0004 004h]                Table Length : 00000034
[008h 0008 001h]                    Revision : 04
[009h 0009 001h]                    Checksum : 25
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 002h]              Platform Class : 0000
[026h 0038 002h]                    Reserved : 0000
[028h 0040 008h]             Control Address : 00000000E0210510
[030h 0048 004h]                Start Method : 02 [ACPI Start Method]

/**** ACPI table terminates in the middle of a data structure! (dump table) 
CurrentOffset: 34, TableLength: 34 ***/
Raw Table Data: Length 52 (0x34)

    0000: 54 50 4D 32 34 00 00 00 04 25 4C 45 4E 4F 56 4F  // TPM24....%LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 00 00 00 00 10 05 21 E0 00 00 00 00  // ..........!.....
    0030: 02 00 00 00                                      // ....


UEFI
----
[000h 0000 004h]                   Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004 004h]                Table Length : 00000236
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : D9
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 010h]             UUID Identifier : 9D4BF935-A674-4710-BA02-BF0AA1758C7B
[034h 0052 002h]                 Data Offset : 0036

Raw Table Data: Length 566 (0x236)

    0000: 55 45 46 49 36 02 00 00 01 D9 4C 45 4E 4F 56 4F  // UEFI6.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 35 F9 4B 9D 74 A6 10 47 BA 02 BF 0A  // ....5.K.t..G....
    0030: A1 75 8C 7B 36 00 24 42 56 44 54 24 00 00 00 24  // .u.{6.$BVDT$...$
    0040: 00 00 00 24 4C 50 43 4E 34 34 57 57 00 00 00 00  // ...$LPCN44WW....
    0050: 00 00 00 00 00 00 00 00 00 00 00 00 24 4C 65 67  // ............$Leg
    0060: 69 6F 6E 20 78 38 30 20 53 65 72 69 65 73 20 41  // ion x80 Series A
    0070: 4D 44 00 00 00 00 24 30 35 2E 35 32 2E 32 37 00  // MD....$05.52.27.
    0080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0090: 00 00 00 00 00 00 00 00 00 00 00 00 FF FF FF FF  // ................
    00A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0100: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0110: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0120: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0130: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0140: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0150: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0160: FF FF FF FF FF 24 42 4D 45 24 00 10 05 01 00 10  // .....$BME$......
    0170: 00 00 24 00 00 00 02 00 00 00 00 24 00 FF FF FF  // ..$........$....
    0180: FF FF FF FF FF 24 5F 4D 53 43 5F 56 45 52 3D 40  // .....$_MSC_VER=@
    0190: 06 24 52 44 41 54 45 23 06 28 24 45 53 52 54 44  // .$RDATE#.($ESRTD
    01A0: 50 23 71 59 84 24 BE F2 CA 09 4B AF 02 69 B6 A4  // P#qY.$....K..i..
    01B0: 99 74 C1 8B 01 00 00 24 45 4E 44 4F 46 42 56 44  // .t.....$ENDOFBVD
    01C0: 54 FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // T...............
    01D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    01E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    01F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0200: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0210: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0220: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0230: FF FF FF FF FF FF                                // ......


VFCT
----
[000h 0000 004h]                   Signature : "VFCT"    
[004h 0004 004h]                Table Length : 0000AE84
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 2F
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000


**** Unknown ACPI table signature [VFCT]


Raw Table Data: Length 44676 (0xAE84)

    0000: 56 46 43 54 84 AE 00 00 01 2F 4C 45 4E 4F 56 4F  // VFCT...../LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  // ....2..]...I....
    0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  // ..y.L...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 02 10 4E 16 00 00 00 00  // ..........N.....
    0060: 01 00 00 00 00 AE 00 00 55 AA 57 E9 4E 23 00 00  // ........U.W.N#..
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: B8 01 00 00 00 00 49 42 4D 03 24 A1 00 00 00 00  // ......IBM.$.....
    0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  // ........ 7612955
    00A0: 32 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // 20..............
    00B0: 8A 01 00 00 00 00 00 00 30 39 2F 32 36 2F 32 32  // ........09/26/22
    00C0: 2C 32 32 3A 31 39 3A 32 34 00 00 00 E9 83 24 00  // ,22:19:24.....$.
    00D0: E9 8D 24 00 00 00 70 00 31 30 32 2D 52 41 50 48  // ..$...p.102-RAPH
    00E0: 41 45 4C 2D 30 30 38 00 52 41 50 48 41 45 4C 00  // AEL-008.RAPHAEL.
    00F0: 50 43 49 5F 45 58 50 52 45 53 53 00 30 00 0D 0A  // PCI_EXPRESS.0...
    0100: 52 61 70 68 61 65 6C 20 47 65 6E 65 72 69 63 20  // Raphael Generic 
    0110: 56 42 49 4F 53 20 20 20 20 20 20 20 20 20 20 20  // VBIOS           
    0120: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0130: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0140: 20 20 20 20 20 20 20 20 20 20 20 20 0D 0A 00 0D  //             ....
    0150: 0A 20 0D 0A 00 28 43 29 20 31 39 38 38 2D 32 30  // . ...(C) 1988-20
    0160: 32 30 2C 20 41 64 76 61 6E 63 65 64 20 4D 69 63  // 20, Advanced Mic
    0170: 72 6F 20 44 65 76 69 63 65 73 2C 20 49 6E 63 2E  // ro Devices, Inc.
    0180: 00 41 54 4F 4D 42 49 4F 53 42 4B 2D 41 4D 44 20  // .ATOMBIOSBK-AMD 
    0190: 56 45 52 30 33 32 2E 30 31 39 2E 30 30 30 2E 30  // VER032.019.000.0
    01A0: 30 38 2E 30 30 30 30 30 30 00 52 70 6C 47 65 6E  // 08.000000.RplGen
    01B0: 65 72 69 63 56 62 00 32 33 39 34 30 31 32 20 00  // ericVb.2394012 .
    01C0: 36 31 32 31 32 37 20 20 00 20 20 20 20 20 20 20  // 612127  .       
    01D0: 20 00 41 4D 44 5F 52 41 50 48 41 45 4C 5F 47 45  //  .AMD_RAPHAEL_GE
    01E0: 4E 45 52 49 43 5C 63 6F 6E 66 69 67 2E 68 00 00  // NERIC\config.h..
    01F0: 00 90 2C 00 02 03 41 54 4F 4D 00 C0 56 24 42 01  // ..,...ATOM..V$B.
    0200: DD 01 96 00 C8 24 00 00 00 00 02 10 02 10 B8 01  // .....$..........
    0210: 70 A4 10 02 00 00 00 00 00 00 00 02 03 00 00 00  // p...............
    0220: 50 43 49 52 02 10 4E 16 00 00 18 00 00 00 00 03  // PCIR..N.........
    0230: 57 00 13 20 00 80 00 00 41 4D 44 20 41 54 4F 4D  // W.. ....AMD ATOM
    0240: 42 49 4F 53 00 7F E8 11 8E 00 00 00 00 00 00 00  // BIOS............
    0250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0270: 00 00 00 00 00 00 00 00 4A 00 02 01 00 00 00 00  // ........J.......
    0280: 00 00 28 20 5C 02 98 21 C8 02 18 03 14 05 00 00  // ..( \..!........
    0290: 00 00 30 05 3C 05 CC 21 90 05 00 00 00 00 70 22  // ..0.<..!......p"
    02A0: 00 00 00 00 00 00 00 00 84 22 20 20 00 00 BC 0A  // ........."  ....
    02B0: 00 00 E8 05 00 00 00 00 BC 06 00 00 00 00 00 00  // ................
    02C0: 00 00 00 00 6C 00 03 04 08 00 13 20 20 4E 00 00  // ....l......  N..
    02D0: 20 4E 00 00 01 00 00 00 00 00 00 00 4C 00 00 00  //  N..........L...
    02E0: 00 00 00 00 00 00 00 00 00 00 00 00 F4 00 00 00  // ................
    02F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0310: 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00  // ................
    0320: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 FC 13  // ................
    0330: 50 00 03 01 84 03 00 00 B8 0B 00 00 00 00 00 00  // P...............
    0340: 7D 12 3C 03 FF 00 00 00 00 00 00 00 00 00 00 00  // }.<.............
    0350: 00 00 00 00 84 03 00 00 B8 0B 00 00 00 00 00 00  // ................
    0360: 7D 12 3C 03 FF 00 00 00 00 00 00 00 00 00 00 00  // }.<.............
    0370: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0380: FC 01 05 04 10 00 38 00 4C 00 60 01 9B 01 48 00  // ......8.L.`...H.
    0390: 30 75 00 00 0C 00 1F 05 39 50 00 00 40 9C 00 00  // 0u......9P..@...
    03A0: 0C 00 1F 05 3E 00 00 00 FF FF FF 00 0C 00 1F 05  // ....>...........
    03B0: 6F A1 00 00 00 00 00 00 FF FF FF 00 0C 00 1F 02  // o...............
    03C0: 3E 00 00 00 00 00 00 00 00 00 00 00 48 3F 00 00  // >...........H?..
    03D0: 1F 00 44 00 00 16 00 00 00 05 01 1F 00 00 00 05  // ..D.............
    03E0: 02 2C 00 00 00 05 03 3E 00 00 00 05 08 1B 50 00  // .,.....>......P.
    03F0: 00 05 09 25 60 00 00 05 0A 35 90 00 00 05 10 21  // ...%`....5.....!
    0400: B0 00 00 05 11 2F F0 00 00 05 18 2A 40 01 00 05  // ...../.....*@...
    0410: 78 69 00 00 1F 00 44 00 00 16 00 00 00 05 01 1F  // xi....D.........
    0420: 00 00 00 05 02 2C 00 00 00 05 03 3E 00 00 00 05  // .....,.....>....
    0430: 08 1B 50 00 00 05 09 25 60 00 00 05 0A 35 90 00  // ..P....%`....5..
    0440: 00 05 10 21 B0 00 00 05 11 2F F0 00 00 05 18 2A  // ...!...../.....*
    0450: 40 01 00 05 F0 D2 00 00 1F 00 44 00 00 1E 00 00  // @.........D.....
    0460: 00 05 01 26 00 00 00 05 02 30 00 00 00 05 03 3E  // ...&.....0.....>
    0470: 00 00 00 05 08 22 40 00 00 05 09 2C 60 00 00 05  // ....."@....,`...
    0480: 0A 37 70 00 00 05 10 27 90 00 00 05 11 32 C0 00  // .7p....'.....2..
    0490: 00 05 18 2E 00 01 00 05 68 3C 01 00 1F 00 44 00  // ........h<....D.
    04A0: 00 1E 00 00 00 05 01 26 00 00 00 05 02 30 00 00  // .......&.....0..
    04B0: 00 05 03 3E 00 00 00 05 08 22 40 00 00 05 09 2C  // ...>....."@....,
    04C0: 60 00 00 05 0A 37 70 00 00 05 10 27 90 00 00 05  // `....7p....'....
    04D0: 11 32 C0 00 00 05 18 2E 00 01 00 05 00 00 00 00  // .2..............
    04E0: 00 01 02 03 00 01 02 03 00 07 05 00 00 01 02 03  // ................
    04F0: 00 01 02 03 00 07 05 00 00 01 02 03 00 01 02 03  // ................
    0500: 00 07 05 00 00 01 02 03 00 01 02 03 00 07 05 00  // ................
    0510: 01 02 03 00 01 02 03 00 07 05 00 08 30 00 00 87  // ............0...
    0520: 00 00 00 07 30 00 00 B2 25 00 00 08 31 00 00 87  // ....0...%...1...
    0530: 00 00 00 07 31 00 00 B2 25 00 00 08 32 00 00 87  // ....1...%...2...
    0540: 00 00 00 07 32 00 00 B2 25 00 00 08 33 00 00 87  // ....2...%...3...
    0550: 00 00 00 07 33 00 00 B2 25 00 00 5A 00 00 00 05  // ....3...%..Z....
    0560: 00 00 00 47 00 00 00 30 00 00 00 54 00 00 00 30  // ...G...0...T...0
    0570: 00 00 00 FF FF FF FF 00 00 00 00 00 1C 00 03 01  // ................
    0580: 00 0D 00 00 00 00 00 00 00 00 00 00 10 27 00 00  // .............'..
    0590: FF 00 FF 00 FF 00 00 00 0C 00 02 01 00 00 00 00  // ................
    05A0: 00 00 00 00 54 00 02 01 B5 5D 00 00 00 00 01 00  // ....T....]......
    05B0: B5 5D 00 00 08 08 02 00 B5 5D 00 00 10 10 03 00  // .].......]......
    05C0: B5 5D 00 00 18 14 04 00 B5 5D 00 00 1A 18 05 00  // .].......]......
    05D0: 91 5D 00 00 08 08 90 00 95 5D 00 00 08 08 91 00  // .].......]......
    05E0: 99 5D 00 00 08 08 92 00 9D 5D 00 00 08 08 93 00  // .].......]......
    05F0: A1 5D 00 00 08 08 94 00 58 00 02 06 03 0A 01 00  // .]......X.......
    0600: 04 01 02 02 64 C0 00 00 65 C0 00 00 66 C0 00 00  // ....d...e...f...
    0610: 67 C0 00 00 E8 C0 00 00 A0 21 00 00 2E 6A 01 00  // g........!...j..
    0620: 10 27 00 00 04 02 01 00 00 00 00 00 9F 0F 00 00  // .'..............
    0630: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0640: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0650: D4 00 04 04 40 00 00 00 24 F4 00 00 60 09 60 09  // ....@...$...`.`.
    0660: 00 00 00 00 00 00 00 00 5E 01 4E 0C 01 01 00 00  // ........^.N.....
    0670: 55 00 00 00 60 09 4E 16 01 03 04 01 00 05 05 00  // U...`.N.........
    0680: 00 00 00 00 00 46 C3 23 00 00 00 00 00 00 00 00  // .....F.#........
    0690: 00 00 00 00 54 00 01 00 00 00 00 00 00 00 00 00  // ....T...........
    06A0: 00 00 00 00 10 11 3D 10 4D 1C 02 00 00 45 00 00  // ......=.M....E..
    06B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 AA 0A  // ................
    06C0: 22 22 02 00 AA F2 01 00 00 00 00 00 00 00 00 00  // ""..............
    06D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0720: 00 00 00 00 00 04 02 02 00 00 00 00 00 00 00 00  // ................
    0730: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 22 02  // ..............".
    0740: 00 00 00 00 84 03 00 00 00 00 00 00 00 00 00 00  // ................
    0750: 00 12 3C 00 00 00 00 00 00 00 00 00 00 00 00 00  // ..<.............
    0760: 00 00 00 00 84 03 00 00 00 00 00 00 00 00 00 00  // ................
    0770: 00 12 3C 00 00 00 00 00 00 00 00 00 00 00 00 00  // ..<.............
    0780: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0790: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07A0: 00 00 00 00 8C 00 01 01 00 00 00 00 00 00 00 00  // ................
    07B0: 00 00 00 00 00 00 00 00 02 00 10 01 14 31 00 00  // .............1..
    07C0: 00 00 E4 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0810: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0820: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0830: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0850: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0860: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0870: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0880: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0890: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0920: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0930: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0940: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0950: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0960: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0970: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0980: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0990: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B20: 00 00 00 00 FC 13 01 00 00 1F 00 00 00 00 00 00  // ................
    0B30: 48 3F 00 00 05 02 00 07 03 00 00 16 00 00 00 00  // H?..............
    0B40: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 01 00  // ................
    0B50: 00 00 00 00 48 3F 00 00 05 02 00 07 03 00 00 1F  // ....H?..........
    0B60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B70: 00 1F 02 00 00 00 00 00 48 3F 00 00 05 02 00 07  // ........H?......
    0B80: 03 00 00 2C 00 00 00 00 00 00 00 00 00 00 00 00  // ...,............
    0B90: 00 00 00 00 00 1F 03 00 00 00 00 00 48 3F 00 00  // ............H?..
    0BA0: 05 02 00 07 03 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
    0BB0: 00 00 00 00 00 00 00 00 00 1F 08 00 00 00 00 00  // ................
    0BC0: 48 3F 00 00 05 02 00 07 03 00 00 1B 05 00 00 00  // H?..............
    0BD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 09 00  // ................
    0BE0: 00 00 00 00 48 3F 00 00 05 02 00 07 03 00 00 25  // ....H?.........%
    0BF0: 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C00: 00 1F 0A 00 00 00 00 00 48 3F 00 00 05 02 00 07  // ........H?......
    0C10: 03 00 00 35 09 00 00 00 00 00 00 00 00 00 00 00  // ...5............
    0C20: 00 00 00 00 00 1F 10 00 00 00 00 00 48 3F 00 00  // ............H?..
    0C30: 05 02 00 07 03 00 00 21 0B 00 00 00 00 00 00 00  // .......!........
    0C40: 00 00 00 00 00 00 00 00 00 1F 11 00 00 00 00 00  // ................
    0C50: 48 3F 00 00 05 02 00 07 03 00 00 2F 0F 00 00 00  // H?........./....
    0C60: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 18 00  // ................
    0C70: 00 00 00 00 48 3F 00 00 05 02 00 07 03 00 00 2A  // ....H?.........*
    0C80: 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C90: 00 1F 00 00 00 00 00 00 78 69 00 00 05 02 00 07  // ........xi......
    0CA0: 03 00 00 16 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CB0: 00 00 00 00 00 1F 01 00 00 00 00 00 78 69 00 00  // ............xi..
    0CC0: 05 02 00 07 03 00 00 1F 00 00 00 00 00 00 00 00  // ................
    0CD0: 00 00 00 00 00 00 00 00 00 1F 02 00 00 00 00 00  // ................
    0CE0: 78 69 00 00 05 02 00 07 03 00 00 2C 00 00 00 00  // xi.........,....
    0CF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 03 00  // ................
    0D00: 00 00 00 00 78 69 00 00 05 02 00 07 03 00 00 3E  // ....xi.........>
    0D10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D20: 00 1F 08 00 00 00 00 00 78 69 00 00 05 02 00 07  // ........xi......
    0D30: 03 00 00 1B 05 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D40: 00 00 00 00 00 1F 09 00 00 00 00 00 78 69 00 00  // ............xi..
    0D50: 05 02 00 07 03 00 00 25 06 00 00 00 00 00 00 00  // .......%........
    0D60: 00 00 00 00 00 00 00 00 00 1F 0A 00 00 00 00 00  // ................
    0D70: 78 69 00 00 05 02 00 07 03 00 00 35 09 00 00 00  // xi.........5....
    0D80: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 10 00  // ................
    0D90: 00 00 00 00 78 69 00 00 05 02 00 07 03 00 00 21  // ....xi.........!
    0DA0: 0B 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DB0: 00 1F 11 00 00 00 00 00 78 69 00 00 05 02 00 07  // ........xi......
    0DC0: 03 00 00 2F 0F 00 00 00 00 00 00 00 00 00 00 00  // .../............
    0DD0: 00 00 00 00 00 1F 18 00 00 00 00 00 78 69 00 00  // ............xi..
    0DE0: 05 02 00 07 03 00 00 2A 14 00 00 00 00 00 00 00  // .......*........
    0DF0: 00 00 00 00 00 00 00 00 00 1F 00 00 00 00 00 00  // ................
    0E00: F0 D2 00 00 05 02 00 07 03 00 00 1D 00 00 00 00  // ................
    0E10: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 01 00  // ................
    0E20: 00 00 00 00 F0 D2 00 00 05 02 00 07 03 00 00 26  // ...............&
    0E30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E40: 00 1F 02 00 00 00 00 00 F0 D2 00 00 05 02 00 07  // ................
    0E50: 03 00 00 30 00 00 00 00 00 00 00 00 00 00 00 00  // ...0............
    0E60: 00 00 00 00 00 1F 03 00 00 00 00 00 F0 D2 00 00  // ................
    0E70: 05 02 00 07 03 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
    0E80: 00 00 00 00 00 00 00 00 00 1F 08 00 00 00 00 00  // ................
    0E90: F0 D2 00 00 05 02 00 07 03 00 00 22 04 00 00 00  // ..........."....
    0EA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 09 00  // ................
    0EB0: 00 00 00 00 F0 D2 00 00 05 02 00 07 03 00 00 2C  // ...............,
    0EC0: 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0ED0: 00 1F 0A 00 00 00 00 00 F0 D2 00 00 05 02 00 07  // ................
    0EE0: 03 00 00 37 07 00 00 00 00 00 00 00 00 00 00 00  // ...7............
    0EF0: 00 00 00 00 00 1F 10 00 00 00 00 00 F0 D2 00 00  // ................
    0F00: 05 02 00 07 03 00 00 27 09 00 00 00 00 00 00 00  // .......'........
    0F10: 00 00 00 00 00 00 00 00 00 1F 11 00 00 00 00 00  // ................
    0F20: F0 D2 00 00 05 02 00 07 03 00 00 32 0C 00 00 00  // ...........2....
    0F30: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 18 00  // ................
    0F40: 00 00 00 00 F0 D2 00 00 05 02 00 07 03 00 00 2E  // ................
    0F50: 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F60: 00 1F 00 00 00 00 00 00 68 3C 01 00 05 02 00 07  // ........h<......
    0F70: 03 00 00 1D 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F80: 00 00 00 00 00 1F 01 00 00 00 00 00 68 3C 01 00  // ............h<..
    0F90: 05 02 00 07 03 00 00 26 00 00 00 00 00 00 00 00  // .......&........
    0FA0: 00 00 00 00 00 00 00 00 00 1F 02 00 00 00 00 00  // ................
    0FB0: 68 3C 01 00 05 02 00 07 03 00 00 30 00 00 00 00  // h<.........0....
    0FC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 03 00  // ................
    0FD0: 00 00 00 00 68 3C 01 00 05 02 00 07 03 00 00 3E  // ....h<.........>
    0FE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0FF0: 00 1F 08 00 00 00 00 00 68 3C 01 00 05 02 00 07  // ........h<......
    1000: 03 00 00 22 04 00 00 00 00 00 00 00 00 00 00 00  // ..."............
    1010: 00 00 00 00 00 1F 09 00 00 00 00 00 68 3C 01 00  // ............h<..
    1020: 05 02 00 07 03 00 00 2C 06 00 00 00 00 00 00 00  // .......,........
    1030: 00 00 00 00 00 00 00 00 00 1F 0A 00 00 00 00 00  // ................
    1040: 68 3C 01 00 05 02 00 07 03 00 00 37 07 00 00 00  // h<.........7....
    1050: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 10 00  // ................
    1060: 00 00 00 00 68 3C 01 00 05 02 00 07 03 00 00 27  // ....h<.........'
    1070: 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1080: 00 1F 11 00 00 00 00 00 68 3C 01 00 05 02 00 07  // ........h<......
    1090: 03 00 00 32 0C 00 00 00 00 00 00 00 00 00 00 00  // ...2............
    10A0: 00 00 00 00 00 1F 18 00 00 00 00 00 68 3C 01 00  // ............h<..
    10B0: 05 02 00 07 03 00 00 2E 10 00 00 00 00 00 00 00  // ................
    10C0: 00 00 00 00 00 00 00 00 08 1F 00 00 00 00 00 00  // ................
    10D0: A0 86 01 00 05 02 00 07 03 00 00 3E 00 00 00 00  // ...........>....
    10E0: 00 00 00 00 00 00 00 00 00 00 00 00 08 1F 01 00  // ................
    10F0: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 00 38  // ...............8
    1100: 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1110: 08 1F 02 00 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    1120: 03 00 00 33 0B 00 00 00 00 00 00 00 00 00 00 00  // ...3............
    1130: 00 00 00 00 08 1F 03 00 00 00 00 00 A0 86 01 00  // ................
    1140: 05 02 00 07 03 00 00 30 0E 00 00 00 00 00 00 00  // .......0........
    1150: 00 00 00 00 00 00 00 00 08 1F 04 00 00 00 00 00  // ................
    1160: A0 86 01 00 05 02 00 07 03 00 00 2B 13 00 00 00  // ...........+....
    1170: 00 00 00 00 00 00 00 00 00 00 00 00 08 1F 05 00  // ................
    1180: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 03 3B  // ...............;
    1190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    11A0: 08 1F 06 00 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    11B0: 03 00 03 35 06 00 00 00 00 00 00 00 00 00 00 00  // ...5............
    11C0: 00 00 00 00 08 1F 07 00 00 00 00 00 A0 86 01 00  // ................
    11D0: 05 02 00 07 03 00 03 31 0A 00 00 00 00 00 00 00  // .......1........
    11E0: 00 00 00 00 00 00 00 00 08 1F 08 00 00 00 00 00  // ................
    11F0: A0 86 01 00 05 02 00 07 03 00 03 2D 0E 00 00 00  // ...........-....
    1200: 00 00 00 00 00 00 00 00 00 00 00 00 08 1F 09 00  // ................
    1210: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 03 2A  // ...............*
    1220: 11 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1230: 08 1F 0A 00 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    1240: 03 00 06 38 00 00 00 00 00 00 00 00 00 00 00 00  // ...8............
    1250: 00 00 00 00 08 1F 0B 00 00 00 00 00 A0 86 01 00  // ................
    1260: 05 02 00 07 03 00 06 32 06 00 00 00 00 00 00 00  // .......2........
    1270: 00 00 00 00 00 00 00 00 08 1F 0C 00 00 00 00 00  // ................
    1280: A0 86 01 00 05 02 00 07 03 00 06 2F 09 00 00 00  // .........../....
    1290: 00 00 00 00 00 00 00 00 00 00 00 00 08 1F 0D 00  // ................
    12A0: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 06 2B  // ...............+
    12B0: 0D 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    12C0: 08 1F 0E 00 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    12D0: 03 00 0A 33 00 00 00 00 00 00 00 00 00 00 00 00  // ...3............
    12E0: 00 00 00 00 08 1F 0F 00 00 00 00 00 A0 86 01 00  // ................
    12F0: 05 02 00 07 03 00 03 22 03 00 00 00 00 00 00 00  // ......."........
    1300: 00 00 00 00 00 00 00 00 00 1F 00 00 00 00 00 00  // ................
    1310: 60 54 00 00 05 02 00 07 03 00 00 1E 00 00 00 00  // `T..............
    1320: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 01 00  // ................
    1330: 00 00 00 00 60 54 00 00 05 02 00 07 03 00 00 26  // ....`T.........&
    1340: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1350: 00 1F 02 00 00 00 00 00 60 54 00 00 05 02 00 07  // ........`T......
    1360: 03 00 00 30 00 00 00 00 00 00 00 00 00 00 00 00  // ...0............
    1370: 00 00 00 00 00 1F 03 00 00 00 00 00 60 54 00 00  // ............`T..
    1380: 05 02 00 07 03 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
    1390: 00 00 00 00 00 00 00 00 00 1F 08 00 00 00 00 00  // ................
    13A0: 60 54 00 00 05 02 00 07 03 00 00 22 04 00 00 00  // `T........."....
    13B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 09 00  // ................
    13C0: 00 00 00 00 60 54 00 00 05 02 00 07 03 00 00 2C  // ....`T.........,
    13D0: 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    13E0: 00 1F 0A 00 00 00 00 00 60 54 00 00 05 02 00 07  // ........`T......
    13F0: 03 00 00 37 07 00 00 00 00 00 00 00 00 00 00 00  // ...7............
    1400: 00 00 00 00 00 1F 10 00 00 00 00 00 60 54 00 00  // ............`T..
    1410: 05 02 00 07 03 00 00 27 09 00 00 00 00 00 00 00  // .......'........
    1420: 00 00 00 00 00 00 00 00 00 1F 11 00 00 00 00 00  // ................
    1430: 60 54 00 00 05 02 00 07 03 00 00 32 0C 00 00 00  // `T.........2....
    1440: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 18 00  // ................
    1450: 00 00 00 00 60 54 00 00 05 02 00 07 03 00 00 2E  // ....`T..........
    1460: 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1470: 00 1F 00 00 00 00 00 00 EC 5E 00 00 05 02 00 07  // .........^......
    1480: 03 00 00 1E 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1490: 00 00 00 00 00 1F 01 00 00 00 00 00 EC 5E 00 00  // .............^..
    14A0: 05 02 00 07 03 00 00 26 00 00 00 00 00 00 00 00  // .......&........
    14B0: 00 00 00 00 00 00 00 00 00 1F 02 00 00 00 00 00  // ................
    14C0: EC 5E 00 00 05 02 00 07 03 00 00 30 00 00 00 00  // .^.........0....
    14D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 03 00  // ................
    14E0: 00 00 00 00 EC 5E 00 00 05 02 00 07 03 00 00 3E  // .....^.........>
    14F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1500: 00 1F 08 00 00 00 00 00 EC 5E 00 00 05 02 00 07  // .........^......
    1510: 03 00 00 22 04 00 00 00 00 00 00 00 00 00 00 00  // ..."............
    1520: 00 00 00 00 00 1F 09 00 00 00 00 00 EC 5E 00 00  // .............^..
    1530: 05 02 00 07 03 00 00 2C 06 00 00 00 00 00 00 00  // .......,........
    1540: 00 00 00 00 00 00 00 00 00 1F 0A 00 00 00 00 00  // ................
    1550: EC 5E 00 00 05 02 00 07 03 00 00 37 07 00 00 00  // .^.........7....
    1560: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 10 00  // ................
    1570: 00 00 00 00 EC 5E 00 00 05 02 00 07 03 00 00 27  // .....^.........'
    1580: 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1590: 00 1F 11 00 00 00 00 00 EC 5E 00 00 05 02 00 07  // .........^......
    15A0: 03 00 00 32 0C 00 00 00 00 00 00 00 00 00 00 00  // ...2............
    15B0: 00 00 00 00 00 1F 18 00 00 00 00 00 EC 5E 00 00  // .............^..
    15C0: 05 02 00 07 03 00 00 2E 10 00 00 00 00 00 00 00  // ................
    15D0: 00 00 00 00 00 00 00 00 00 1F 00 00 00 00 00 00  // ................
    15E0: 90 7E 00 00 05 02 00 07 03 00 00 1E 00 00 00 00  // .~..............
    15F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 01 00  // ................
    1600: 00 00 00 00 90 7E 00 00 05 02 00 07 03 00 00 26  // .....~.........&
    1610: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1620: 00 1F 02 00 00 00 00 00 90 7E 00 00 05 02 00 07  // .........~......
    1630: 03 00 00 30 00 00 00 00 00 00 00 00 00 00 00 00  // ...0............
    1640: 00 00 00 00 00 1F 03 00 00 00 00 00 90 7E 00 00  // .............~..
    1650: 05 02 00 07 03 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
    1660: 00 00 00 00 00 00 00 00 00 1F 08 00 00 00 00 00  // ................
    1670: 90 7E 00 00 05 02 00 07 03 00 00 22 04 00 00 00  // .~........."....
    1680: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 09 00  // ................
    1690: 00 00 00 00 90 7E 00 00 05 02 00 07 03 00 00 2C  // .....~.........,
    16A0: 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    16B0: 00 1F 0A 00 00 00 00 00 90 7E 00 00 05 02 00 07  // .........~......
    16C0: 03 00 00 37 07 00 00 00 00 00 00 00 00 00 00 00  // ...7............
    16D0: 00 00 00 00 00 1F 10 00 00 00 00 00 90 7E 00 00  // .............~..
    16E0: 05 02 00 07 03 00 00 27 09 00 00 00 00 00 00 00  // .......'........
    16F0: 00 00 00 00 00 00 00 00 00 1F 11 00 00 00 00 00  // ................
    1700: 90 7E 00 00 05 02 00 07 03 00 00 32 0C 00 00 00  // .~.........2....
    1710: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 18 00  // ................
    1720: 00 00 00 00 90 7E 00 00 05 02 00 07 03 00 00 2E  // .....~..........
    1730: 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1740: 00 1F 00 00 00 00 00 00 C0 A8 00 00 05 02 00 07  // ................
    1750: 03 00 00 1E 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1760: 00 00 00 00 00 1F 01 00 00 00 00 00 C0 A8 00 00  // ................
    1770: 05 02 00 07 03 00 00 26 00 00 00 00 00 00 00 00  // .......&........
    1780: 00 00 00 00 00 00 00 00 00 1F 02 00 00 00 00 00  // ................
    1790: C0 A8 00 00 05 02 00 07 03 00 00 30 00 00 00 00  // ...........0....
    17A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 03 00  // ................
    17B0: 00 00 00 00 C0 A8 00 00 05 02 00 07 03 00 00 3E  // ...............>
    17C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    17D0: 00 1F 08 00 00 00 00 00 C0 A8 00 00 05 02 00 07  // ................
    17E0: 03 00 00 22 04 00 00 00 00 00 00 00 00 00 00 00  // ..."............
    17F0: 00 00 00 00 00 1F 09 00 00 00 00 00 C0 A8 00 00  // ................
    1800: 05 02 00 07 03 00 00 2C 06 00 00 00 00 00 00 00  // .......,........
    1810: 00 00 00 00 00 00 00 00 00 1F 0A 00 00 00 00 00  // ................
    1820: C0 A8 00 00 05 02 00 07 03 00 00 37 07 00 00 00  // ...........7....
    1830: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 10 00  // ................
    1840: 00 00 00 00 C0 A8 00 00 05 02 00 07 03 00 00 27  // ...............'
    1850: 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1860: 00 1F 11 00 00 00 00 00 C0 A8 00 00 05 02 00 07  // ................
    1870: 03 00 00 32 0C 00 00 00 00 00 00 00 00 00 00 00  // ...2............
    1880: 00 00 00 00 00 1F 18 00 00 00 00 00 C0 A8 00 00  // ................
    1890: 05 02 00 07 03 00 00 2E 10 00 00 00 00 00 00 00  // ................
    18A0: 00 00 00 00 00 00 00 00 00 1F 00 00 00 00 00 00  // ................
    18B0: 20 FD 00 00 05 02 00 07 03 00 00 1E 00 00 00 00  //  ...............
    18C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 01 00  // ................
    18D0: 00 00 00 00 20 FD 00 00 05 02 00 07 03 00 00 26  // .... ..........&
    18E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    18F0: 00 1F 02 00 00 00 00 00 20 FD 00 00 05 02 00 07  // ........ .......
    1900: 03 00 00 30 00 00 00 00 00 00 00 00 00 00 00 00  // ...0............
    1910: 00 00 00 00 00 1F 03 00 00 00 00 00 20 FD 00 00  // ............ ...
    1920: 05 02 00 07 03 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
    1930: 00 00 00 00 00 00 00 00 00 1F 08 00 00 00 00 00  // ................
    1940: 20 FD 00 00 05 02 00 07 03 00 00 22 04 00 00 00  //  .........."....
    1950: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 09 00  // ................
    1960: 00 00 00 00 20 FD 00 00 05 02 00 07 03 00 00 2C  // .... ..........,
    1970: 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1980: 00 1F 0A 00 00 00 00 00 20 FD 00 00 05 02 00 07  // ........ .......
    1990: 03 00 00 37 07 00 00 00 00 00 00 00 00 00 00 00  // ...7............
    19A0: 00 00 00 00 00 1F 10 00 00 00 00 00 20 FD 00 00  // ............ ...
    19B0: 05 02 00 07 03 00 00 27 09 00 00 00 00 00 00 00  // .......'........
    19C0: 00 00 00 00 00 00 00 00 00 1F 11 00 00 00 00 00  // ................
    19D0: 20 FD 00 00 05 02 00 07 03 00 00 32 0C 00 00 00  //  ..........2....
    19E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 18 00  // ................
    19F0: 00 00 00 00 20 FD 00 00 05 02 00 07 03 00 00 2E  // .... ...........
    1A00: 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A10: 00 1F 00 00 00 00 00 00 AC 07 01 00 05 02 00 07  // ................
    1A20: 03 00 00 1E 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A30: 00 00 00 00 00 1F 01 00 00 00 00 00 AC 07 01 00  // ................
    1A40: 05 02 00 07 03 00 00 26 00 00 00 00 00 00 00 00  // .......&........
    1A50: 00 00 00 00 00 00 00 00 00 1F 02 00 00 00 00 00  // ................
    1A60: AC 07 01 00 05 02 00 07 03 00 00 30 00 00 00 00  // ...........0....
    1A70: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 03 00  // ................
    1A80: 00 00 00 00 AC 07 01 00 05 02 00 07 03 00 00 3E  // ...............>
    1A90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1AA0: 00 1F 08 00 00 00 00 00 AC 07 01 00 05 02 00 07  // ................
    1AB0: 03 00 00 22 04 00 00 00 00 00 00 00 00 00 00 00  // ..."............
    1AC0: 00 00 00 00 00 1F 09 00 00 00 00 00 AC 07 01 00  // ................
    1AD0: 05 02 00 07 03 00 00 2C 06 00 00 00 00 00 00 00  // .......,........
    1AE0: 00 00 00 00 00 00 00 00 00 1F 0A 00 00 00 00 00  // ................
    1AF0: AC 07 01 00 05 02 00 07 03 00 00 37 07 00 00 00  // ...........7....
    1B00: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 10 00  // ................
    1B10: 00 00 00 00 AC 07 01 00 05 02 00 07 03 00 00 27  // ...............'
    1B20: 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B30: 00 1F 11 00 00 00 00 00 AC 07 01 00 05 02 00 07  // ................
    1B40: 03 00 00 32 0C 00 00 00 00 00 00 00 00 00 00 00  // ...2............
    1B50: 00 00 00 00 00 1F 18 00 00 00 00 00 AC 07 01 00  // ................
    1B60: 05 02 00 07 03 00 00 2E 10 00 00 00 00 00 00 00  // ................
    1B70: 00 00 00 00 00 00 00 00 02 1F 00 00 00 00 00 00  // ................
    1B80: 30 75 00 00 05 02 00 07 03 00 00 3E 00 00 00 00  // 0u.........>....
    1B90: 00 00 00 00 00 00 00 00 00 00 00 00 02 1F 00 00  // ................
    1BA0: 00 00 00 00 40 9C 00 00 05 02 00 07 03 00 00 3E  // ....@..........>
    1BB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1BC0: 02 1F 00 00 00 00 00 00 60 EA 00 00 05 02 00 07  // ........`.......
    1BD0: 03 00 00 3E 00 00 00 00 00 00 00 00 00 00 00 00  // ...>............
    1BE0: 00 00 00 00 03 1F 00 00 00 00 00 00 30 75 00 00  // ............0u..
    1BF0: 05 02 00 07 03 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
    1C00: 00 00 00 00 00 00 00 00 03 1F 00 00 00 00 00 00  // ................
    1C10: 40 9C 00 00 05 02 00 07 03 00 00 3E 00 00 00 00  // @..........>....
    1C20: 00 00 00 00 00 00 00 00 00 00 00 00 03 1F 00 00  // ................
    1C30: 00 00 00 00 60 EA 00 00 05 02 00 07 03 00 00 3E  // ....`..........>
    1C40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C50: 04 1F 00 00 00 00 00 00 30 75 00 00 05 02 00 07  // ........0u......
    1C60: 03 00 05 31 08 00 00 00 00 00 00 00 00 00 00 00  // ...1............
    1C70: 00 00 00 00 04 1F 01 00 00 00 00 00 30 75 00 00  // ............0u..
    1C80: 05 02 00 07 03 00 05 2F 0A 00 00 00 00 00 00 00  // ......./........
    1C90: 00 00 00 00 00 00 00 00 04 1F 02 00 00 00 00 00  // ................
    1CA0: 30 75 00 00 05 02 00 07 03 00 05 2C 0D 00 00 00  // 0u.........,....
    1CB0: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 03 00  // ................
    1CC0: 00 00 00 00 30 75 00 00 05 02 00 07 03 00 05 29  // ....0u.........)
    1CD0: 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1CE0: 04 1F 00 00 00 00 00 00 60 EA 00 00 05 02 00 07  // ........`.......
    1CF0: 03 00 05 31 08 00 00 00 00 00 00 00 00 00 00 00  // ...1............
    1D00: 00 00 00 00 04 1F 01 00 00 00 00 00 60 EA 00 00  // ............`...
    1D10: 05 02 00 07 03 00 05 2F 0A 00 00 00 00 00 00 00  // ......./........
    1D20: 00 00 00 00 00 00 00 00 04 1F 02 00 00 00 00 00  // ................
    1D30: 60 EA 00 00 05 02 00 07 03 00 05 2C 0D 00 00 00  // `..........,....
    1D40: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 03 00  // ................
    1D50: 00 00 00 00 60 EA 00 00 05 02 00 07 03 00 05 29  // ....`..........)
    1D60: 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D70: 04 1F 00 00 00 00 00 00 80 38 01 00 05 02 00 07  // .........8......
    1D80: 03 00 05 31 08 00 00 00 00 00 00 00 00 00 00 00  // ...1............
    1D90: 00 00 00 00 04 1F 01 00 00 00 00 00 80 38 01 00  // .............8..
    1DA0: 05 02 00 07 03 00 05 2F 0A 00 00 00 00 00 00 00  // ......./........
    1DB0: 00 00 00 00 00 00 00 00 04 1F 02 00 00 00 00 00  // ................
    1DC0: 80 38 01 00 05 02 00 07 03 00 05 2C 0D 00 00 00  // .8.........,....
    1DD0: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 03 00  // ................
    1DE0: 00 00 00 00 80 38 01 00 05 02 00 07 03 00 05 29  // .....8.........)
    1DF0: 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E00: 04 1F 00 00 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    1E10: 03 00 05 31 08 00 00 00 00 00 00 00 00 00 00 00  // ...1............
    1E20: 00 00 00 00 04 1F 01 00 00 00 00 00 A0 86 01 00  // ................
    1E30: 05 02 00 07 03 00 05 2F 0A 00 00 00 00 00 00 00  // ......./........
    1E40: 00 00 00 00 00 00 00 00 04 1F 02 00 00 00 00 00  // ................
    1E50: A0 86 01 00 05 02 00 07 03 00 05 2C 0D 00 00 00  // ...........,....
    1E60: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 03 00  // ................
    1E70: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 05 29  // ...............)
    1E80: 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E90: 04 1F 00 00 00 00 00 00 C0 D4 01 00 05 02 00 07  // ................
    1EA0: 03 00 05 31 08 00 00 00 00 00 00 00 00 00 00 00  // ...1............
    1EB0: 00 00 00 00 04 1F 01 00 00 00 00 00 C0 D4 01 00  // ................
    1EC0: 05 02 00 07 03 00 05 2F 0A 00 00 00 00 00 00 00  // ......./........
    1ED0: 00 00 00 00 00 00 00 00 04 1F 02 00 00 00 00 00  // ................
    1EE0: C0 D4 01 00 05 02 00 07 03 00 05 2C 0D 00 00 00  // ...........,....
    1EF0: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 03 00  // ................
    1F00: 00 00 00 00 C0 D4 01 00 05 02 00 07 03 00 05 29  // ...............)
    1F10: 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1FA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1FB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1FC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1FD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1FE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1FF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2080: 00 00 00 00 00 00 00 00 08 00 01 01 00 00 00 00  // ................
    2090: 70 01 02 01 D6 09 80 02 A0 00 E0 01 2D 00 10 00  // p...........-...
    20A0: 60 00 0A 00 02 00 00 00 00 00 08 08 06 00 12 3C  // `..............<
    20B0: A0 0F 20 03 00 01 58 02 1C 00 28 00 80 00 01 00  // .. ...X...(.....
    20C0: 04 00 00 00 00 00 00 00 00 00 6A 3C 64 19 00 04  // ..........j<d...
    20D0: 40 01 00 03 26 00 18 00 88 00 03 00 06 00 00 00  // @...&...........
    20E0: 00 00 00 00 06 00 55 3C 01 1D 00 05 72 01 D0 02  // ......U<....r...
    20F0: 1E 00 6E 00 28 00 05 00 05 00 00 00 00 00 00 00  // ..n.(...........
    2100: 00 00 E8 3C 30 2A 00 05 08 02 C0 03 28 00 60 00  // ...<0*......(.`.
    2110: 70 00 01 00 03 00 00 00 00 00 00 00 00 00 E9 3C  // p..............<
    2120: 30 2A 00 05 98 01 00 04 2A 00 30 00 70 00 01 00  // 0*......*.0.p...
    2130: 03 00 00 00 00 00 00 00 00 00 EA 3C 66 21 56 05  // ...........<f!V.
    2140: AA 01 00 03 1E 00 46 00 8F 00 03 00 03 00 00 00  // ......F.........
    2150: 00 00 00 00 02 00 ED 3C 8F 2F 78 05 D0 01 1A 04  // .......<./x.....
    2160: 27 00 58 00 90 00 03 00 04 00 00 00 00 00 00 00  // '.X.............
    2170: 02 00 EB 3C 48 3F 40 06 30 02 B0 04 32 00 40 00  // ...<H?@.0...2.@.
    2180: C0 00 01 00 03 00 00 00 00 00 00 00 00 00 EC 3C  // ...............<
    2190: 02 3A 80 07 18 01 38 04 2D 00 58 00 2C 00 04 00  // .:....8.-.X.,...
    21A0: 05 00 00 00 00 00 00 00 02 00 F3 3C 7D 4B 80 07  // ...........<}K..
    21B0: A0 02 B0 04 2D 00 88 00 C8 00 03 00 06 00 00 00  // ....-...........
    21C0: 00 00 00 00 02 00 F0 3C 68 5B 80 07 A8 02 A0 05  // .......<h[......
    21D0: 3C 00 80 00 D0 00 01 00 03 00 00 00 00 00 00 00  // <...............
    21E0: 02 00 F1 3C 32 96 00 0A B0 03 40 06 3A 00 C0 00  // ...<2.....@.:...
    21F0: 18 01 03 00 06 00 00 00 00 00 00 00 02 00 F2 3C  // ...............<
    2200: 34 00 02 01 00 00 00 00 00 2A 00 2A 00 00 2A 2A  // 4........*.*..**
    2210: 2A 00 00 2A 00 2A 2A 15 00 2A 2A 2A 15 15 15 15  // *..*.**..***....
    2220: 15 3F 15 3F 15 15 3F 3F 3F 15 15 3F 15 3F 3F 3F  // .?.?..???..?.???
    2230: 15 3F 3F 3F A4 00 01 01 10 01 06 12 11 01 16 12  // .???............
    2240: 21 01 0A 12 13 01 06 6A 14 01 16 6A 22 01 0A 6A  // !......j...j"..j
    2250: 16 01 06 55 17 01 16 55 23 01 0A 55 63 01 16 E8  // ...U...U#..Uc...
    2260: 64 01 0A E8 65 01 16 E9 66 01 0A E9 19 01 06 EA  // d...e...f.......
    2270: 1A 01 16 EA 24 01 0A EA 47 01 16 ED 48 01 0A ED  // ....$...G...H...
    2280: 45 01 16 EB 46 01 0A EB 75 01 16 EC 76 01 0A EC  // E...F...u...v...
    2290: A5 01 16 F3 A6 01 0A F3 A0 01 16 F0 A1 01 0A F0  // ................
    22A0: A2 01 16 F1 A3 01 0A F1 A4 01 16 F2 A5 01 0A F2  // ................
    22B0: D2 01 16 70 D4 01 0A 70 D8 01 16 71 D9 01 0A 71  // ...p...p...q...q
    22C0: E2 01 16 72 E4 01 0A 72 E8 01 16 73 E9 01 0A 73  // ...r...r...s...s
    22D0: F5 01 16 74 F6 01 0A 74 14 00 02 02 02 00 08 00  // ...t...t........
    22E0: 80 00 00 02 00 04 00 08 40 00 FF FF CD 00 01 04  // ........@.......
    22F0: 02 00 06 00 14 31 68 00 1E 21 00 00 95 00 00 00  // .....1h..!......
    2300: 02 00 00 00 00 00 71 00 1E 22 00 00 9C 00 00 00  // ......q.."......
    2310: 00 00 00 00 00 00 7A 00 20 21 00 00 A3 00 00 00  // ......z. !......
    2320: 00 00 00 00 00 00 83 00 20 22 00 00 AA 00 00 00  // ........ "......
    2330: 00 00 00 00 00 00 8C 00 21 21 00 00 B1 00 00 00  // ........!!......
    2340: 00 00 00 00 03 71 B8 00 00 00 00 00 00 00 00 00  // .....q..........
    2350: 00 00 00 00 01 04 90 00 02 04 01 00 FF 01 04 91  // ................
    2360: 00 02 04 00 00 FF 01 04 92 00 02 04 00 00 FF 01  // ................
    2370: 04 93 00 02 04 00 00 FF 01 04 94 00 02 04 00 00  // ................
    2380: FF 14 06 0F 00 00 00 FF 14 06 3F 1E 00 00 FF 14  // ..........?.....
    2390: 06 3F 1E 00 00 FF 14 06 3F 1E 00 00 FF 14 06 3F  // .?......?......?
    23A0: 1E 00 00 FF 10 0A 01 02 03 04 05 00 00 00 11 0A  // ................
    23B0: 90 91 92 93 94 00 00 00 FF 00 00 00 1E 06 66 50  // ..............fP
    23C0: 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F A3 14  // fQfRfSfUfVfW....
    23D0: 00 8C 0E 08 00 B2 20 E8 A6 1E 0B C0 75 14 A2 02  // ...... .....u...
    23E0: 00 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07  // .f_f^f]f[fZfYfX.
    23F0: 1F CB E8 C0 1F E8 F8 00 E8 8F 1D 32 D2 8D 3E 8A  // ...........2..>.
    2400: 01 89 55 16 E8 0C 0D E8 CF 0C E8 01 1C 75 19 E8  // ..U..........u..
    2410: 1A 0E E8 EF 02 E8 67 18 0B C0 74 0C E8 39 00 E8  // ......g...t..9..
    2420: BE 45 E8 C6 0C E8 0D 46 E8 A9 00 B4 80 E8 84 1D  // .E.....F........
    2430: 8A C7 66 C1 E0 10 8A E3 B0 20 66 A3 24 A1 E8 EF  // ..f...... f.$...
    2440: 02 E8 D9 0C E8 B1 1F 66 5F 66 5E 66 5D 66 5B 66  // .......f_f^f]f[f
    2450: 5A 66 59 66 58 07 1F CB 2E 8B 1E 08 00 83 3E 68  // ZfYfX.........>h
    2460: 24 00 75 04 89 1E 66 24 1E 2E 8E 1E 5E 24 9C FA  // $.u...f$....^$..
    2470: 66 C7 06 08 01 65 F0 00 F0 C7 06 40 00 C8 24 89  // f....e.....@..$.
    2480: 1E 42 00 C7 06 B4 01 C8 24 89 1E B6 01 C7 06 7C  // .B......$......|
    2490: 00 06 6F 89 1E 7E 00 C7 06 0C 01 19 73 89 1E 0E  // ..o..~......s...
    24A0: 01 C7 06 A8 04 3E 69 89 1E AA 04 2E 8E 1E 66 24  // .....>i.......f$
    24B0: 8B C3 A3 40 69 A3 50 69 A3 62 69 9D 1F C3 50 4D  // ...@i.Pi.bi...PM
    24C0: 49 44 C8 24 70 59 00 00 00 A0 00 B0 00 B8 00 C0  // ID.$pY..........
    24D0: 00 00 00 00 BB 00 00 E8 2C 0C 66 C1 E8 10 A3 BE  // ........,.f.....
    24E0: 01 BB 0B 00 E8 1F 0C 8D 3E 8A 01 66 89 45 18 C3  // ........>..f.E..
    24F0: 66 50 66 52 51 56 66 B8 52 54 53 5F BA 80 00 66  // fPfRQVf.RTS_...f
    2500: EF B0 56 EE B0 42 EE B0 49 EE B0 4F EE B0 53 EE  // ..V..B..I..O..S.
    2510: B0 20 EE BE 28 01 B9 19 00 AC E6 80 E2 FB 66 B8  // . ..(.........f.
    2520: 44 4E 45 5F BA 80 00 66 EF 5E 59 66 5A 66 58 C3  // DNE_...f.^YfZfX.
    2530: E8 A0 1E 80 FC A0 75 05 E8 3D 00 EB 11 80 FC 4F  // ......u..=.....O
    2540: 75 05 E8 B9 33 EB 07 E8 0E 39 EB 02 B4 01 E8 A7  // u...3....9......
    2550: 1E CF E8 7E 1E E8 20 00 EB 02 B4 01 E8 99 1E CB  // ...~.. .........
    2560: E8 70 1E 80 FC 4F 75 05 E8 93 33 EB 07 E8 E8 38  // .p...Ou...3....8
    2570: EB 02 B4 01 E8 81 1E CB 1E 06 66 50 66 51 66 52  // ..........fPfQfR
    2580: 66 53 66 55 66 56 66 57 0E 1F 3C 04 75 29 2E A1  // fSfUfVfW..<.u)..
    2590: 1A 00 66 C1 E0 10 2E A1 18 00 8D 36 97 00 8A 3C  // ..f........6...<
    25A0: 80 EF 30 B3 02 8B EC 89 5E 0C 89 46 04 66 C1 E8  // ..0.....^..F.f..
    25B0: 10 89 46 00 E9 2B 01 3C 05 75 18 E8 F6 1B E8 C9  // ..F..+.<.u......
    25C0: 1B 2E A1 08 00 8B EC 89 56 10 89 46 00 89 5E 04  // ........V..F..^.
    25D0: E9 0F 01 3C 06 75 32 E8 14 0B 66 D1 E0 8B EC 89  // ...<.u2...f.....
    25E0: 46 14 BB 02 00 E8 1E 0B 88 46 18 E8 08 0B 66 89  // F........F....f.
    25F0: 46 0C BB 09 00 E8 0E 0B 33 C0 66 89 46 00 2E 8B  // F.......3.f.F...
    2600: 16 BE 01 89 56 10 E9 D9 00 3C 0B 75 24 0A DB 75  // ....V....<.u$..u
    2610: 11 B9 80 00 BB 02 00 8B EC 89 5E 0C 89 4E 14 E9  // ..........^..N..
    2620: C0 00 8A C7 E8 D3 00 E8 38 01 0F 84 AC 00 E9 B1  // ........8.......
    2630: 00 3C 17 75 1D E8 9B 0D 74 06 E8 8D 09 E8 9E 12  // .<.u....t.......
    2640: E8 13 07 E8 82 0A 33 C9 8B C8 8B EC 89 4E 14 E9  // ......3......N..
    2650: 90 00 3C 18 75 45 0A FF 75 10 E8 22 0D 8B EC 89  // ..<.uE..u.."....
    2660: 46 0C E8 4F 07 89 4E 10 EB 78 E8 66 0D 75 6B BB  // F..O..N..x.f.uk.
    2670: 00 4C E8 FC 1C 66 0B C0 74 60 23 C9 74 5C E8 3A  // .L...f..t`#.t\.:
    2680: 0D BE 00 4C E8 AC 0A 74 51 BE 00 4C B0 40 E8 FB  // ...L...tQ..L.@..
    2690: 0A E8 EB 0C 8B EC 89 46 0C EB 47 3C 82 75 1A 80  // .......F..G<.u..
    26A0: FB 05 75 15 0A FF 75 0A E8 30 0C 8B EC 89 46 14  // ..u...u..0....F.
    26B0: EB 30 E8 0D 0C 74 1B EB 29 3C 8E 75 15 80 FF 01  // .0...t..)<.u....
    26C0: 74 08 80 FF 02 75 0B 80 C1 02 80 C1 02 E8 57 0C  // t....u........W.
    26D0: EB 10 8B EC C6 46 19 02 EB 0F 8B EC C6 46 19 01  // .....F.......F..
    26E0: EB 07 32 E4 8B EC 88 66 19 66 5F 66 5E 66 5D 66  // ..2....f.f_f^f]f
    26F0: 5B 66 5A 66 59 66 58 07 1F C3 51 8A C8 B8 01 00  // [fZfYfX...Q.....
    2700: D3 E0 59 C3 E8 17 1D C3 0C 01 C3 00 50 51 B0 B6  // ..Y.........PQ..
    2710: E6 43 B0 33 E6 42 B0 05 E6 42 E4 61 8A E0 0C 03  // .C.3.B...B.a....
    2720: E6 61 8A C4 B9 C8 00 E8 6D 18 E6 61 59 58 C3 00  // .a......m..aYX..
    2730: 1E 56 0E 1F 80 3E 02 00 80 76 05 C6 06 02 00 80  // .V...>...v......
    2740: 8A 0E 02 00 C1 E1 09 FC C6 06 21 00 00 33 F6 32  // ..........!..3.2
    2750: E4 AC 02 E0 E2 FB F6 D4 FE C4 88 26 21 00 5E 1F  // ...........&!.^.
    2760: C3 00 57 0B C0 75 0F E8 28 08 74 25 E8 24 00 F6  // ..W..u..(.t%.$..
    2770: C3 04 74 F3 EB 11 8B C8 E8 04 15 23 C1 74 12 E8  // ..t........#.t..
    2780: 11 00 F6 C3 04 74 0A 5F 8D 5C 28 E8 91 05 0B F6  // .....t._.\(.....
    2790: C3 5F C3 50 E8 DD 07 E8 56 14 0A C9 74 11 E8 DA  // ._.P....V...t...
    27A0: 11 3C 00 75 1F E8 CB 01 8A EB F6 C5 04 74 15 8D  // .<.u.........t..
    27B0: 9C A6 00 E8 BB 1B 0A C0 74 0A E8 88 04 74 05 33  // ........t....t.3
    27C0: C9 E8 51 05 E8 AC 01 58 C3 51 B9 5F 00 E8 76 17  // ..Q....X.Q._..v.
    27D0: 59 C3 51 E8 1A 00 75 14 E8 69 01 3C 01 75 0D B9  // Y.Q...u..i.<.u..
    27E0: 20 00 E8 27 00 75 05 80 C9 01 EB 02 33 C9 59 C3  //  ..'.u......3.Y.
    27F0: 53 E8 7D 1B 66 3D 00 FF FF FF 75 0E 83 C3 04 E8  // S.}.f=....u.....
    2800: 6F 1B 66 3D FF FF FF 00 75 00 5B C3 50 52 32 D2  // o.f=....u.[.PR2.
    2810: E8 5E 1B 02 D0 02 D4 66 C1 E8 10 02 D0 02 D4 83  // .^.....f........
    2820: C3 04 E2 EC 0A D2 5A 58 C3 E8 48 07 8D 9C A4 01  // ......ZX..H.....
    2830: E8 E9 00 A9 DD 0F 74 52 E8 38 01 F6 C3 08 74 0C  // ......tR.8....t.
    2840: 8D 5C 28 E8 DD 00 75 04 E8 62 00 C3 B5 02 E8 FC  // .\(...u..b......
    2850: 00 E8 1F 01 F6 C3 04 74 21 8D 5C 28 E8 22 01 E8  // .......t!.\(."..
    2860: 6D 03 74 05 B5 03 E8 E4 00 E8 41 04 E8 FA 00 80  // m.t.......A.....
    2870: FD 00 75 38 B5 02 E8 E6 00 C3 8D 9C C0 01 B8 00  // ..u8............
    2880: 55 E8 73 0D B5 02 E8 D6 00 C3 A9 02 00 74 1D B5  // U.s..........t..
    2890: 04 E8 B9 00 E8 DC 00 8D 5C 28 E8 E4 00 E8 67 18  // ........\(....g.
    28A0: E8 BC 00 8D 5C 28 E8 D8 00 E8 01 04 C3 B5 01 E8  // ....\(..........
    28B0: 9B 00 B5 02 E8 A8 00 E8 B9 00 F6 C3 04 75 10 8D  // .............u..
    28C0: 9C C0 01 B8 00 55 E8 2E 0D B5 02 E8 17 00 C3 E8  // .....U..........
    28D0: AF 00 B5 02 8D 5C 28 E8 57 00 75 02 B5 01 E8 04  // .....\(.W.u.....
    28E0: 00 E8 C9 03 C3 8D 9C AC 02 B1 02 E8 27 1A B5 02  // ............'...
    28F0: E8 6C 00 C3 8D 9C A4 01 E8 21 00 E8 75 00 F6 C3  // .l.......!..u...
    2900: 04 74 12 8D 5C 28 E8 78 00 E8 5D 00 E8 63 07 8D  // .t..\(.x..]..c..
    2910: 5C 28 E8 FE 17 B8 02 00 E8 0E FF C3 B9 48 00 E8  // \(...........H..
    2920: 24 16 C3 53 81 C3 05 01 E8 46 1A 24 06 3C 02 5B  // $..S.....F.$.<.[
    2930: C3 E8 10 00 3D 01 04 75 0A 53 83 C3 18 E8 31 1A  // ....=..u.S....1.
    2940: 5B A8 01 C3 53 83 C3 12 E8 26 1A 5B C3 8D 9C AC  // [...S....&.[....
    2950: 02 32 C9 E8 BF 19 C3 8D 9C AC 02 E8 13 1A C3 8D  // .2..............
    2960: 9C AC 02 B1 01 E8 AD 19 C3 8D 9C AC 02 B1 01 E8  // ................
    2970: BB 19 C3 66 50 8D 9C A0 01 E8 F5 19 8A D8 66 58  // ...fP.........fX
    2980: C3 55 57 51 B9 08 00 BD 00 00 BB 08 00 2B D9 D1  // .UWQ.........+..
    2990: E3 8D 58 4E E8 DA 19 E8 E3 01 E2 EE 8D 5C 4B E8  // ..XN.........\K.
    29A0: CF 19 B9 03 00 8B D0 BF F9 29 85 55 06 74 17 66  // .........).U.t.f
    29B0: 8B 05 8D 9A 4C 02 E8 18 19 8B 45 04 8D 9A 50 02  // ....L.....E...P.
    29C0: E8 26 19 83 C5 08 83 C7 08 E2 DF 8D 7C 5E B9 04  // .&..........|^..
    29D0: 00 33 ED 8B DF E8 99 19 0B C0 74 09 E8 5D 01 E8  // .3........t..]..
    29E0: 97 00 83 C5 1C 83 C7 12 E2 E9 55 32 ED E8 6F FF  // ..........U2..o.
    29F0: 8D 5C 28 E8 4E FF 3D 01 04 75 10 83 C3 14 E8 70  // .\(.N.=..u.....p
    2A00: 19 24 70 C0 E8 04 8A E8 E8 54 FF 5D 8D 9C A6 00  // .$p......T.]....
    2A10: E8 5E 19 0A C0 74 46 8D 9C A8 00 E8 53 19 3C 02  // .^...tF.....S.<.
    2A20: 75 3B 66 C1 E8 10 3C 04 72 33 8D 9C A8 00 32 E4  // u;f...<.r3....2.
    2A30: 03 D8 8B FB B9 04 00 8B DF E8 35 19 0B C0 74 15  // ..........5...t.
    2A40: E8 F9 00 A9 80 00 75 0D E8 2E 00 83 C5 1C 55 58  // ......u.......UX
    2A50: 83 F8 70 73 08 83 C7 12 49 0B C9 75 DA 59 5F 5D  // ..ps....I..u.Y_]
    2A60: C3 20 03 58 02 3C 00 01 00 00 04 00 03 3C 00 00  // . .X.<.......<..
    2A70: 08 80 02 E0 01 3C 00 20 00 51 8D 1D E8 F2 18 8D  // .....<. .Q......
    2A80: 9A C0 01 E8 63 18 8D 5D 02 E8 E5 18 8D 9A C2 01  // ....c..]........
    2A90: E8 89 00 8D 5D 05 E8 D8 18 8D 9A C6 01 E8 7C 00  // ....].........|.
    2AA0: 8D 5D 08 E8 CB 18 8B C8 8A DC 66 C1 C8 10 8A D0  // .]........f.....
    2AB0: 80 E2 0F 8A F0 C0 EE 04 8A EC C0 ED 06 8A FC C0  // ................
    2AC0: EF 04 80 E7 03 80 E4 0F C0 E4 04 0A D4 80 E2 3F  // ...............?
    2AD0: 80 E4 C0 C0 EC 02 0A F4 8B C3 8D 9A CC 01 E8 08  // ................
    2AE0: 18 8D 9A CA 01 8B C1 E8 FF 17 8D 9A CE 01 33 C0  // ..............3.
    2AF0: 8A C6 E8 F4 17 8D 9A D0 01 33 C0 8A C2 E8 E9 17  // .........3......
    2B00: 8D 5D 0C E8 6B 18 8D 9A D2 01 E8 0F 00 8D 5D 0F  // .]..k.........].
    2B10: E8 5E 18 8D 9A D6 01 E8 CF 17 59 C3 8B C8 8A D4  // .^........Y.....
    2B20: 66 C1 C8 10 8A F0 80 E6 0F 8A E8 C0 ED 04 8B C1  // f...............
    2B30: E8 B6 17 83 C3 02 8B C2 E8 AE 17 C3 8D 5D 11 E8  // .............]..
    2B40: 2F 18 8A E0 BA 06 00 C0 E8 07 74 03 80 CA 80 8A  // /.........t.....
    2B50: C4 C0 E8 03 24 03 3C 02 75 03 80 CA 40 3C 03 75  // ....$.<.u...@<.u
    2B60: 12 8A C4 D0 E8 A8 01 74 03 80 E2 FD A8 02 74 03  // .......t......t.
    2B70: 80 E2 FB 8B C2 8D 9A D8 01 E8 6D 17 C3 3C 01 74  // ..........m..<.t
    2B80: 3D 8B D0 0F B6 C6 24 3F 04 3C 8D 9A 50 02 E8 58  // =.....$?.<..P..X
    2B90: 17 0F B6 C2 83 C0 1F C1 E0 03 8D 9A 4C 02 E8 48  // ............L..H
    2BA0: 17 0F B6 DE C1 EB 06 C1 E3 02 2E F7 A7 59 2B 2E  // .............Y+.
    2BB0: F7 B7 57 2B 8D 9A 4E 02 E8 2E 17 83 C5 08 C3 10  // ..W+..N.........
    2BC0: 00 0A 00 04 00 03 00 05 00 04 00 10 00 09 00 8D  // ................
    2BD0: 9C A6 00 E8 9B 17 0A C0 74 1F 8D 9C A8 00 51 B1  // ........t.....Q.
    2BE0: 03 E8 18 00 59 0B DB 74 10 E8 85 17 32 C0 66 3D  // ....Y..t....2.f=
    2BF0: 00 03 0C 00 75 03 0B DB C3 33 DB C3 66 50 52 E8  // ....u....3..fPR.
    2C00: 6F 17 3C 02 75 39 80 FC 03 72 34 66 C1 E8 10 32  // o.<.u9...r4f...2
    2C10: E4 3C 04 76 2A 03 C3 8B D0 83 C3 04 3B DA 73 1F  // .<.v*.......;.s.
    2C20: E8 4E 17 8A E0 80 E4 E0 C0 EC 05 24 1F 38 CC 74  // .N.........$.8.t
    2C30: 08 32 E4 FE C0 03 D8 EB E3 0B DB 5A 66 58 C3 33  // .2.........ZfX.3
    2C40: DB 5A 66 58 C3 51 8D 9C A6 00 E8 24 17 0A C0 74  // .ZfX.Q.....$...t
    2C50: 1B 8D 9C A8 00 B1 12 E8 18 00 74 10 E8 12 17 66  // ..........t....f
    2C60: C1 E8 10 80 E4 07 75 04 B0 01 EB 02 32 C0 0A C0  // ......u.....2...
    2C70: 59 C3 66 50 52 E8 F9 16 3C 70 75 2B 66 C1 E8 10  // Y.fPR...<pu+f...
    2C80: 32 E4 83 C3 05 03 C3 8B D0 3B DA 73 1A E8 E1 16  // 2........;.s....
    2C90: 38 C8 74 0D 66 C1 E8 10 32 E4 83 C0 03 03 D8 EB  // 8.t.f...2.......
    2CA0: E8 0B DB 5A 66 58 C3 33 DB 5A 66 58 C3 57 66 51  // ...ZfX.3.ZfX.WfQ
    2CB0: 8D 9C C0 01 8B FB 8B DF E8 3D 00 0B C9 74 0B 66  // .........=...t.f
    2CC0: 8B D1 E8 E0 0B 83 C7 1C EB EC 66 59 5F C3 50 53  // ..........fY_.PS
    2CD0: 51 B9 07 00 53 8B DA E8 97 16 83 F8 00 5B 74 09  // Q...S........[t.
    2CE0: 66 C1 E3 10 8B DA E8 72 12 59 5B 58 C3 51 53 B9  // f......r.Y[X.QS.
    2CF0: 07 00 E8 7F 12 5B 59 C3 66 50 53 83 C3 06 E8 70  // .....[Y.fPS....p
    2D00: 16 5B 8B C8 66 C1 E1 10 53 83 C3 02 E8 62 16 8B  // .[..f...S....b..
    2D10: C8 5B 66 58 C3 8D 9C A0 01 32 C9 E8 F7 15 C3 57  // .[fX.....2.....W
    2D20: B9 20 00 E8 5A 12 5F C3 53 51 E8 19 00 32 E4 8A  // . ..Z._.SQ...2..
    2D30: C5 C1 E0 02 59 8D 9C 78 01 03 D8 E8 33 16 5B C3  // ....Y..x....3.[.
    2D40: B1 02 E8 07 00 C3 B1 01 E8 01 00 C3 53 8D 9C 98  // ............S...
    2D50: 01 E8 D9 15 5B C3 33 C9 E8 B3 12 75 3C 66 BA 22  // ....[.3....u<f."
    2D60: F0 FF FF 66 33 C0 E8 46 03 33 C0 E8 24 02 74 1C  // ...f3..F.3..$.t.
    2D70: A9 DD 0F 74 F6 E8 1B FA F6 C3 04 75 05 F6 C3 18  // ...t.......u....
    2D80: 74 E9 E8 1F 00 50 E8 A0 FA 58 EB DF E8 0B 00 75  // t....P...X.....u
    2D90: 08 E8 20 00 8B C1 E8 90 FA C3 66 50 E8 29 03 8B  // .. .......fP.)..
    2DA0: C8 66 58 C3 66 52 66 BA FF FF FF FF 33 D0 E8 FE  // .fX.fRf.....3...
    2DB0: 02 66 5A C3 50 53 52 E8 E0 FF 75 13 B9 08 00 E8  // .fZ.PSR...u.....
    2DC0: BD 0E 23 C8 75 19 33 C0 E8 C7 01 8B C8 EB 10 83  // ..#.u.3.........
    2DD0: F9 02 74 0B E8 7B 06 80 FB 01 75 03 83 E1 FD 5A  // ..t..{....u....Z
    2DE0: 5B 58 C3 56 66 33 C0 66 BA 00 F0 FF FF E8 9E 05  // [X.Vf3.f........
    2DF0: 66 C1 E6 10 E8 A8 01 0B C0 74 03 E8 05 00 E8 7E  // f........t.....~
    2E00: 05 5E C3 50 51 E8 6C 01 50 32 C0 E8 90 02 E8 CC  // .^.PQ.l.P2......
    2E10: 00 E8 7F 00 8D 9C 08 03 E8 56 15 38 E8 74 0A 8A  // .........V.8.t..
    2E20: C5 E8 AD 14 B0 02 E8 75 02 58 E8 79 00 66 51 8D  // .......u.X.y.fQ.
    2E30: 9C A4 01 E8 3B 15 66 8B C8 8B D3 8D 9C D0 02 E8  // ....;.f.........
    2E40: 2F 15 66 3B C1 75 16 53 8D 9C AA 01 E8 22 15 8B  // /.f;.u.S....."..
    2E50: C8 8D 9C D6 02 E8 19 15 3B C1 5B 74 05 B0 02 E8  // ........;.[t....
    2E60: 3C 02 66 59 E8 67 FE E8 FF 01 66 25 FF 0F 00 00  // <.fY.g....f%....
    2E70: 59 58 66 BA FF FF FF FF 33 D0 E8 11 05 33 D2 C3  // YXf.....3....3..
    2E80: 53 66 50 8D 9C C8 02 E8 E7 14 8A C4 E8 42 14 66  // SfP..........B.f
    2E90: 58 5B C3 53 66 50 8D 9C C8 02 E8 D4 14 8A E0 E8  // X[.SfP..........
    2EA0: 2F 14 66 58 5B C3 8D 9C C8 02 E8 C4 14 32 C0 E8  // /.fX[........2..
    2EB0: 1F 14 C3 66 52 52 32 ED 83 C1 02 B8 06 00 F7 E1  // ...fRR2.........
    2EC0: 66 33 C9 8B C8 5A 51 66 8B C2 8A CF 66 F7 E1 66  // f3...ZQf....f..f
    2ED0: C1 E0 03 59 66 F7 F1 66 8B C8 66 5A C3 53 E8 48  // ...Yf..f..fZ.S.H
    2EE0: 01 66 C1 E2 10 E8 36 01 8D 9C 98 01 E8 82 14 8A  // .f....6.........
    2EF0: E8 8D 9C AC 02 E8 79 14 8A C8 E8 9E 0B 8A EB 5B  // ......y........[
    2F00: C3 57 53 53 E8 D6 FF E8 14 01 5B E8 B0 0B 74 61  // .WSS......[...ta
    2F10: 80 FD 00 75 29 53 E8 0F FE 66 8B D0 E8 4A FA 8A  // ...u)S...f...J..
    2F20: CD 51 E8 1B FE 8A FD 59 E8 88 FF 5B E8 42 14 66  // .Q.....Y...[.B.f
    2F30: 25 FF FF 00 00 66 3B C8 73 34 32 DB EB 33 80 FD  // %....f;.s42..3..
    2F40: 02 75 11 E8 2C 01 8D 1F E8 26 14 3D 74 40 76 1E  // .u..,....&.=t@v.
    2F50: 32 DB EB 1D 80 FD 03 75 15 53 E8 C1 00 B3 03 E8  // 2......u.S......
    2F60: 18 0B 5B E8 0B 14 3B C2 76 04 32 DB EB 03 80 CB  // ..[...;.v.2.....
    2F70: 01 5B 5F C3 53 8B F0 E8 05 0D 23 F0 74 09 8B C6  // .[_.S.....#.t...
    2F80: E8 89 0B 8B F3 0B DB 5B C3 51 E8 27 FE E8 0F 00  // .......[.Q.'....
    2F90: 59 C3 51 50 E8 E8 0C 8B C8 58 E8 02 00 59 C3 57  // Y.QP.....X...Y.W
    2FA0: 53 E8 97 0E 0B C0 74 09 8B 1D 83 C7 02 3B C3 75  // S.....t......;.u
    2FB0: F7 8B 1D 83 FB FF 74 0B 83 C7 02 85 D9 74 F2 8B  // ......t......t..
    2FC0: C3 EB 02 33 C0 0B C0 5B 5F C3 33 C0 E8 C3 FF 74  // ...3...[_.3....t
    2FD0: 13 E8 A0 FF 8B DE B9 00 01 E8 6A 0F 83 C6 08 E8  // ..........j.....
    2FE0: 4D 0C EB E8 BB F0 46 B8 5A A5 E8 FC 12 C3 53 66  // M.....F.Z.....Sf
    2FF0: 50 8D 9C 08 03 E8 79 13 8A E8 66 58 5B C3 53 66  // P.....y...fX[.Sf
    3000: 50 8D 9C C8 02 E8 69 13 8A C8 66 58 5B C3 53 66  // P.....i...fX[.Sf
    3010: 50 8D 9C C9 02 E8 59 13 8A C8 66 58 5B C3 53 8D  // P.....Y...fX[.S.
    3020: 5C 14 E8 4C 13 8B D0 5B C3 53 66 50 8D 5C 16 E8  // \..L...[.SfP.\..
    3030: 3F 13 8B D0 66 58 5B C3 53 66 50 8D 9C 18 03 E8  // ?...fX[.SfP.....
    3040: 2F 13 66 8B D0 66 58 5B C3 53 66 50 8D 9C 1C 03  // /.f..fX[.SfP....
    3050: E8 1E 13 66 8B D0 66 58 5B C3 53 66 50 8D 5C 10  // ...f..fX[.SfP.\.
    3060: E8 0E 13 8B C8 66 58 5B C3 53 8D 5C 08 E8 01 13  // .....fX[.S.\....
    3070: 5B C3 53 66 50 8D 5C 0C E8 F6 12 8B D0 66 58 5B  // [.SfP.\......fX[
    3080: C3 8D 5C 04 E8 EA 12 C3 51 8D 5C 04 32 C9 E8 84  // ..\.....Q.\.2...
    3090: 12 59 C3 8D 9C 18 03 66 8B C2 E8 34 12 C3 53 51  // .Y.....f...4..SQ
    30A0: 8A E8 E8 DC FF 24 FD 0A E8 E8 DC FF 59 5B C3 53  // .....$......Y[.S
    30B0: 66 50 51 66 8B C8 BB 00 00 E8 2C 0A 23 C2 0B C1  // fPQf......,.#...
    30C0: E8 2E 0A 59 66 58 5B C3 BB 00 00 E8 1A 0A 66 25  // ...YfX[.......f%
    30D0: DF 0F 00 00 C3 80 FA 14 C3 E8 48 0E E8 D6 0D E8  // ..........H.....
    30E0: B4 0D 75 06 E8 AA 0B E8 B8 0D C3 B0 01 C3 55 B3  // ..u...........U.
    30F0: 01 E8 3B 10 5D C3 66 53 66 BB 04 00 00 00 E8 05  // ..;.].fSf.......
    3100: 00 33 C0 66 5B C3 55 66 C1 E3 10 BB 00 00 E8 1E  // .3.f[.Uf........
    3110: 10 5D C3 E8 D6 0E BB 0A 00 E8 D5 09 C3 BB 0A 00  // .]..............
    3120: E8 C5 09 66 8B C8 E8 C3 0E BB 0A 00 66 2B C1 E8  // ...f........f+..
    3130: BF 09 C3 E8 29 00 0B C9 74 22 E8 A6 FC E8 2A 07  // ....)...t"....*.
    3140: 66 51 66 8B C8 BB 07 00 E8 9D 09 66 25 00 FE 00  // fQf........f%...
    3150: 00 66 0B C1 E8 9A 09 66 59 0C 01 C3 32 C0 C3 E8  // .f.....fY...2...
    3160: 49 02 0B C9 75 06 E8 4B FC E8 4F 02 51 E8 44 FC  // I...u..K..O.Q.D.
    3170: 66 C1 E6 10 33 C0 E8 10 FE 74 09 E8 F4 02 75 F6  // f...3....t....u.
    3180: 33 C8 EB F2 58 23 C8 66 C1 EE 10 C3 A8 10 75 63  // 3...X#.f......uc
    3190: E8 E9 06 66 C1 E6 10 33 C0 E8 F6 FD 74 35 E8 D3  // ...f...3....t5..
    31A0: FD 50 51 8B C8 E8 D7 01 85 C1 59 58 74 0D 50 E8  // .PQ.......YXt.P.
    31B0: CF FE 24 03 3C 03 58 75 E0 EB 0C 50 E8 C2 FE A8  // ..$.<.Xu...P....
    31C0: 01 58 74 D5 E8 CC FC 50 E8 91 07 58 B5 00 E8 B7  // .Xt....P...X....
    31D0: FE EB C6 E8 A9 01 E8 9B FD E8 13 01 B1 00 E8 4B  // ...............K
    31E0: 07 66 C1 EE 10 E8 8D 06 A8 20 75 3B A8 40 75 03  // .f....... u;.@u.
    31F0: E8 1F 08 E8 74 06 0A C0 75 00 E8 82 01 E8 74 FD  // ....t...u.....t.
    3200: E8 6F FE E8 CF FE 75 14 E8 47 02 0A DB 74 0D E8  // .o....u..G...t..
    3210: 81 FC E8 47 07 B5 00 E8 6E FE EB 08 E8 2E 07 B5  // ...G....n.......
    3220: 01 E8 64 FE E8 CE 00 C3 E8 54 0A C3 E8 9B FD E8  // ..d......T......
    3230: AC 06 33 C9 E8 84 01 66 33 D2 66 33 C0 E8 6F FE  // ..3....f3.f3..o.
    3240: E8 83 07 E8 52 00 B1 FF E8 77 00 33 C0 E8 42 FD  // ....R....w.3..B.
    3250: 74 0A E8 1F FD 50 E8 21 07 58 EB F1 32 C9 E8 A6  // t....P.!.X..2...
    3260: 01 E8 1B 0A 0B C0 C3 E8 60 FD E8 71 06 66 33 C0  // ........`..q.f3.
    3270: 66 BA 00 F0 FF FF E8 15 01 51 B1 01 E8 6E 01 59  // f........Q...n.Y
    3280: E8 56 07 33 C0 E8 0A FD 74 0A E8 E7 FC 50 E8 DA  // .V.3....t....P..
    3290: 06 58 EB F1 E8 00 07 C3 B8 02 00 E8 D6 FC 74 21  // .X............t!
    32A0: B8 02 00 E8 ED F4 F6 C3 04 75 0A E8 D1 09 83 E0  // .........u......
    32B0: FD E8 D4 09 C3 66 B8 02 00 00 00 E8 F1 FD E8 33  // .....f.........3
    32C0: F6 C3 E8 35 08 74 13 BB 02 00 E8 1B 08 8A E1 E8  // ...5.t..........
    32D0: 1F 08 E8 DA 06 0C 01 C3 0C 01 C3 51 E8 1B 08 74  // ...........Q...t
    32E0: 0C 8A CC BB 02 00 E8 FF 07 8A C4 8A E1 59 C3 B0  // .............Y..
    32F0: 01 E8 16 06 C3 B0 00 E8 10 06 C3 E8 10 0D 75 18  // ..............u.
    3300: E8 7C 00 E8 6E FC 80 F9 01 75 0E 51 E8 3E 06 B5  // .|..n....u.Q.>..
    3310: 01 E8 74 FD 59 E8 DD FF C3 E8 D3 FF 51 E8 4B 06  // ..t.Y.......Q.K.
    3320: B5 00 E8 63 FD 59 C3 B8 02 00 E8 47 FC 74 03 E8  // ...c.Y.....G.t..
    3330: 6F 06 C3 E8 D3 04 3B C1 7C 35 8B C1 E8 13 05 E8  // o.....;.|5......
    3340: 29 07 8B C8 51 E8 43 05 E8 07 05 59 E8 1C 07 3B  // )...Q.C....Y...;
    3350: C8 72 02 8B C1 8D 5C 04 E8 8E 0F 32 C9 E8 DD 0B  // .r....\....2....
    3360: FE C1 38 C1 72 F7 8D 5C 04 E8 05 10 0B C0 C3 33  // ..8.r..\.......3
    3370: C0 C3 BB 00 48 33 C0 8A C2 C1 E0 02 03 D8 C3 53  // ....H3.........S
    3380: BB 03 00 E8 62 07 66 25 FF 0F 00 00 5B C3 53 66  // ....b.f%....[.Sf
    3390: 50 66 51 66 8B C8 BB 03 00 E8 4C 07 66 23 C2 66  // PfQf......L.f#.f
    33A0: 0B C1 E8 4C 07 66 59 66 58 5B C3 66 50 BB 05 00  // ...L.fYfX[.fP...
    33B0: E8 35 07 25 FF 0F 8B C8 66 58 C3 E8 C1 08 23 C8  // .5.%....fX....#.
    33C0: 66 50 BB 05 00 E8 20 07 25 00 F0 0B C1 E8 21 07  // fP.... .%.....!.
    33D0: 66 58 C3 66 50 53 BB 06 00 E8 0C 07 A8 10 75 09  // fX.fPS........u.
    33E0: BB F0 46 E8 8B 0F 3D 5A A5 5B 66 58 C3 66 50 53  // ..F...=Z.[fX.fPS
    33F0: BB 06 00 E8 F2 06 80 F1 01 C0 E1 04 24 EF 0A C1  // ............$...
    3400: E8 EE 06 5B 66 58 C3 53 66 50 BB F8 46 E8 61 0F  // ...[fX.SfP..F.a.
    3410: 8A C1 E8 BC 0E 66 58 5B C3 53 BB F8 46 E8 51 0F  // .....fX[.S..F.Q.
    3420: 83 E0 01 5B C3 53 66 50 BB 07 00 E8 BA 06 F6 C4  // ...[.SfP........
    3430: 01 66 58 B0 06 74 02 B0 08 5B C3 53 BB 07 00 E8  // .fX..t...[.S....
    3440: A6 06 80 E4 FE 80 FD 06 74 03 80 CC 01 E8 A1 06  // ........t.......
    3450: 5B C3 66 50 BB 06 00 E8 8E 06 24 40 C0 E8 06 8A  // [.fP......$@....
    3460: D8 66 58 C3 B3 81 E8 BB 0C 75 04 83 C8 01 C3 33  // .fX......u.....3
    3470: C0 C3 50 66 51 E8 FC FA 83 EC 04 8B EC 66 33 C0  // ..PfQ........f3.
    3480: 66 89 46 00 33 D2 8D BC C0 01 8D 1D E8 E2 0E 0B  // f.F.3...........
    3490: C0 74 3D 8B DF B0 00 E8 2D 01 74 2F 8B DF E8 57  // .t=.....-.t/...W
    34A0: F8 66 8B 46 00 3B C8 7F 10 72 20 66 C1 C8 10 66  // .f.F.;...r f...f
    34B0: C1 C9 10 3B C8 7F 0E EB 12 66 C1 C8 10 66 C1 C9  // ...;.....f...f..
    34C0: 10 3B C8 72 06 8B D7 66 89 4E 00 83 C7 1C EB BA  // .;.r...f.N......
    34D0: 0B D2 74 0A 8D 9C A4 01 E8 F3 F7 E9 88 00 66 33  // ..t...........f3
    34E0: C0 66 89 46 00 8D BC 4C 02 33 D2 8D 1D E8 81 0E  // .f.F...L.3......
    34F0: 0B C0 74 58 66 50 E8 5E F4 3C 01 66 58 74 05 3D  // ..tXfP.^.<.fXt.=
    3500: 40 06 73 43 66 52 66 8B D0 8D 5D 04 E8 62 0E E8  // @.sCfRf...]..b..
    3510: 5D 00 8B CA 66 5A 74 2F 56 8D 9C A4 01 8B F1 E8  // ]...fZt/V.......
    3520: CB F7 5E B0 00 E8 9F 00 74 1D 8D 1D E8 42 0E 8B  // ..^.....t....B..
    3530: D9 8B 47 06 66 C1 E0 10 8B 47 02 66 3B 46 00 72  // ..G.f....G.f;F.r
    3540: 06 8B D1 66 89 46 00 83 C7 08 EB 9F 0B D2 74 16  // ...f.F........t.
    3550: 56 8D 9C A4 01 8B F2 E8 93 F7 5E 53 8D 9C BA 01  // V.........^S....
    3560: 33 C0 E8 84 0D 5B 83 C4 04 0B D2 66 59 58 C3 57  // 3....[.....fYX.W
    3570: 53 51 E8 ED 08 3B 55 02 75 18 66 C1 CA 10 8B DA  // SQ...;U.u.f.....
    3580: 66 C1 CA 10 3B 5D 06 75 09 0A C0 74 0E 3A 45 1B  // f...;].u...t.:E.
    3590: 74 09 83 C7 1C E2 DE 33 D2 EB 02 8B D7 0B D2 59  // t......3.......Y
    35A0: 5B 5F C3 51 66 52 E8 B9 08 3A 65 1A 75 09 0A C0  // [_.QfR...:e.u...
    35B0: 74 0E 3A 45 1B 74 09 83 C7 1C E2 ED 33 FF EB 00  // t.:E.t......3...
    35C0: 0B FF 66 5A 59 C3 C3 66 51 66 52 53 53 66 C1 CE  // ..fZY..fQfRSSf..
    35D0: 10 8B DE 66 C1 CE 10 E8 97 0D 5B 66 8B D0 E8 17  // ...f......[f....
    35E0: F7 3B CA 72 0A 66 3B CA 72 05 E8 14 F9 75 02 32  // .;.r.f;.r....u.2
    35F0: C0 5B 66 5A 66 59 C3 56 57 E8 A7 FF 8B F7 E8 EC  // .[fZfY.VW.......
    3600: F6 5F 5E C3 66 50 53 66 51 52 57 56 51 8B DE B9  // ._^.fPSfQRWVQ...
    3610: 08 00 E8 31 09 59 8D 5C 08 8B C1 66 C1 E0 10 8A  // ...1.Y.\...f....
    3620: C2 E8 AD 0C F6 C2 03 75 24 8B C1 24 7F BF E7 36  // .......u$..$...6
    3630: 80 3D FF 0F 84 0F 01 3A 05 75 0D 66 8B 45 01 66  // .=.....:.u.f.E.f
    3640: B9 00 05 02 00 E9 96 00 83 C7 05 EB E3 F6 C2 01  // ................
    3650: 74 25 8B C1 E8 70 01 0F 84 EB 00 33 C9 8A CC 8A  // t%...p.....3....
    3660: D0 0A C0 75 12 8D 5C 08 66 25 FF FF 00 00 66 C1  // ...u..\.f%....f.
    3670: E0 08 E8 5C 0C EB B2 8A E1 8A CA 80 E1 0C C0 E9  // ...\............
    3680: 02 80 E2 F0 C0 EA 04 8A EA 80 FC 70 72 2A 80 FC  // ...........pr*..
    3690: 75 73 25 80 EC 70 8A C4 32 E4 50 E8 30 02 8B D8  // us%..p..2.P.0...
    36A0: 58 38 D8 72 05 33 C0 E9 9C 00 E8 28 02 E8 C1 0C  // X8.r.3.....(....
    36B0: 0B C0 0F 84 90 00 EB 1B 32 C0 E8 E6 FE 0F 84 85  // ........2.......
    36C0: 00 8D 5C 16 8B 05 E8 20 0C 8B 45 06 66 C1 E0 10  // ..\.... ..E.f...
    36D0: 8B 45 02 50 E8 94 03 66 C1 E1 10 8B C8 58 8D 1C  // .E.P...f.....X..
    36E0: E8 EE 0B 66 50 8D 5C 04 66 8B C1 E8 E3 0B 66 58  // ...fP.\.f.....fX
    36F0: 66 C1 E8 10 66 81 E1 FF FF 00 00 66 F7 E1 66 50  // f...f......f..fP
    3700: 8D 5C 06 E8 6B 0C 8B C8 66 58 66 D3 E0 66 C1 E8  // .\..k...fXf..f..
    3710: 10 40 8D 5C 14 E8 D1 0B BF 47 37 83 F9 01 74 11  // .@.\.....G7...t.
    3720: BF 4F 37 81 F9 01 01 74 08 BF 57 37 83 F9 02 75  // .O7....t..W7...u
    3730: 15 8D 5C 0C 66 8B 05 E8 97 0B 8D 5C 10 66 8B 45  // ..\.f......\.f.E
    3740: 04 E8 8D 0B 0B DB 5E 5F 5A 66 59 5B 66 58 C3 00  // ......^_ZfY[fX..
    3750: 40 01 90 01 01 40 01 90 01 02 80 02 90 01 03 80  // @....@..........
    3760: 02 90 01 04 40 01 90 01 05 40 01 90 01 06 80 02  // ....@....@......
    3770: 90 01 07 D0 02 5E 01 0D 40 01 90 01 0E 80 02 90  // .....^..@.......
    3780: 01 0F 80 02 5E 01 10 80 02 5E 01 11 80 02 E0 01  // ....^....^......
    3790: 12 80 02 E0 01 13 80 02 90 01 23 20 04 90 01 32  // ..........# ...2
    37A0: 20 04 B0 02 33 20 04 C0 02 62 80 02 E0 01 FF 05  //  ...3 ...b......
    37B0: 0A 05 05 05 00 00 00 05 0B 06 05 05 00 00 00 08  // ................
    37C0: 10 08 08 08 00 00 00 56 E8 2D 09 80 E4 01 3B 04  // .......V.-....;.
    37D0: 74 09 83 C6 04 E2 F7 33 C0 EB 05 8B 44 02 0B C0  // t......3....D...
    37E0: 5E C3 57 53 50 E8 10 09 83 E9 0A E8 E0 00 83 F8  // ^.WSP...........
    37F0: 05 76 03 B8 05 00 D1 E0 03 C8 FB A5 83 C6 02 E2  // .v..............
    3800: FA B8 FF FF AB 58 5B 5F C3 66 53 51 66 52 E8 41  // .....X[_.fSQfR.A
    3810: 00 E8 77 00 66 C1 E8 10 66 0F B7 D8 66 B8 00 00  // ..w.f...f...f...
    3820: 00 03 66 D3 E8 66 33 D2 66 F7 F3 E8 3D 02 66 5A  // ..f..f3.f...=.fZ
    3830: 59 66 5B C3 53 66 50 BB 07 00 E8 AB 02 0A C0 66  // Yf[.SfP........f
    3840: 58 5B C3 53 66 50 BB 07 00 E8 9C 02 A8 01 66 58  // X[.SfP........fX
    3850: 5B C3 53 66 50 8D 5C 06 E8 16 0B 8A C8 66 58 5B  // [.SfP.\......fX[
    3860: C3 51 B9 08 00 E8 F3 06 59 C3 53 8D 5C 08 E8 00  // .Q......Y.S.\...
    3870: 0B 24 03 5B C3 8D 5C 09 E8 F6 0A C3 51 53 B1 01  // .$.[..\.....QS..
    3880: 8A E8 8D 5C 08 E8 8D 0A 5B 59 C3 53 8D 1C E8 E0  // ...\....[Y.S....
    3890: 0A 5B C3 53 8D 5C 04 E8 D7 0A 5B C3 53 8D 5C 16  // .[.S.\....[.S.\.
    38A0: E8 CE 0A 5B C3 53 66 52 33 C0 E8 C2 FC 66 5A 75  // ...[.SfR3....fZu
    38B0: 1B E8 34 00 74 16 E8 15 00 40 83 F8 05 73 0D E8  // ..4.t....@...s..
    38C0: 0F 0A 48 E8 0F 00 66 8B C2 E8 05 0A 5B C3 BB 00  // ..H...f.....[...
    38D0: 4E E8 9D 0A C3 BB 08 4E C1 E0 03 03 D8 C3 BB 00  // N......N........
    38E0: 4E B9 32 00 E8 5F 06 C3 51 E8 E2 FF 0B C0 74 12  // N.2.._..Q.....t.
    38F0: 8B C8 BB 08 4E E8 79 0A 66 3B C2 74 07 83 C3 08  // ....N.y.f;.t....
    3900: E2 F3 0B DB 59 C3 C3 00 C3 00 8A E8 BB 20 DF 3C  // ....Y........ .<
    3910: 01 74 02 32 DB E8 45 2A E8 E3 F6 66 B8 80 06 00  // .t.2..E*...f....
    3920: 08 66 33 DB 8A D9 8A CD E8 B8 00 C3 66 51 66 52  // .f3.........fQfR
    3930: 66 57 66 B8 80 05 00 08 66 BB 00 4C 00 00 66 33  // fWf.....f..L..f3
    3940: C9 8B CE E8 9D 00 66 5F 66 5A 66 59 C3 66 B8 80  // ......f_fZfY.f..
    3950: 07 00 04 66 33 DB 8B DE E8 88 00 C3 66 B8 80 08  // ...f3.......f...
    3960: 00 04 66 33 DB 8B DE E8 79 00 C3 66 B8 80 09 00  // ..f3....y..f....
    3970: 04 66 33 DB 8B DE E8 6A 00 C3 C3 66 B8 80 0A 00  // .f3....j...f....
    3980: 04 66 33 DB 8B DE E8 5A 00 E8 E7 EF F6 C3 02 74  // .f3....Z.......t
    3990: 03 B0 00 C3 B0 01 C3 66 B8 80 0D 00 00 E8 43 00  // .......f......C.
    39A0: C3 66 B8 80 0F 00 04 66 33 DB 8A D9 E8 34 00 66  // .f.....f3....4.f
    39B0: B8 80 0F 00 04 66 33 DB 56 E8 76 04 03 74 04 8B  // .....f3.V.v..t..
    39C0: 1C 5E E8 1E 00 C3 66 B8 00 00 00 00 E8 14 00 66  // .^....f........f
    39D0: B8 80 0C 00 04 E8 0B 00 C3 66 B8 00 01 00 00 E8  // .........f......
    39E0: 01 00 C3 83 EC 1C 8B EC 66 89 46 00 66 89 5E 04  // ........f.F.f.^.
    39F0: 66 89 4E 08 66 89 56 0C 66 89 7E 10 66 89 76 14  // f.N.f.V.f.~.f.v.
    3A00: 8C D0 66 C1 E0 10 8B C4 BB 42 00 E8 67 04 83 C4  // ..f......B..g...
    3A10: 1C C3 51 8D 5C 14 E8 58 09 66 C1 E0 10 E8 02 00  // ..Q.\..X.f......
    3A20: 59 C3 83 EC 10 8B EC 66 3D F0 FF FF 03 76 06 66  // Y......f=....v.f
    3A30: B8 F0 FF FF 03 66 8B C8 66 33 C0 66 89 46 04 66  // .....f..f3.f.F.f
    3A40: 89 46 00 66 89 46 08 B0 01 88 46 09 66 B8 00 00  // .F.f.F....F.f...
    3A50: 00 D0 66 0B C1 66 89 46 0C 8C D0 66 C1 E0 10 8B  // ..f..f.F...f....
    3A60: C4 BB 35 00 E8 0E 04 83 C4 10 C3 3D C0 7F 76 04  // ..5........=..v.
    3A70: B8 C0 7F C3 83 C0 3F 24 C0 C3 53 51 66 50 B9 68  // ......?$..SQfP.h
    3A80: 74 80 FB 03 74 0B B9 A0 8C 80 FB 00 75 03 B9 78  // t...t.......u..x
    3A90: 69 66 33 D2 8B D1 66 58 59 5B C3 66 52 B3 00 66  // if3...fXY[.fR..f
    3AA0: F7 C2 00 00 FF FF 75 13 80 FD 13 74 0E 80 FD 14  // ......u....t....
    3AB0: 74 09 B3 03 80 F9 03 74 02 B3 02 66 5A C3 E8 B0  // t......t...fZ...
    3AC0: 08 66 C1 E8 10 0B C0 74 1C 53 83 C3 06 E8 A1 08  // .f.....t.S......
    3AD0: 5B 3D E0 01 72 0F 53 83 C3 18 E8 94 08 5B A8 80  // [=..r.S......[..
    3AE0: 75 03 0C 01 C3 32 C0 C3 53 83 C3 4C E8 50 08 5B  // u....2..S..L.P.[
    3AF0: C3 53 83 C3 4C E8 A2 07 5B C3 56 E8 34 03 83 C6  // .S..L...[.V.4...
    3B00: 04 8A 64 10 8A 44 10 83 3C 00 5E C3 BB 00 50 83  // ..d..D..<.^...P.
    3B10: F8 02 74 32 BB 00 54 83 F8 08 74 2A BB 00 58 3D  // ..t2..T...t*..X=
    3B20: 80 00 74 22 BB 00 5C 3D 00 02 74 1A BB 00 60 3D  // ..t"..\=..t...`=
    3B30: 00 04 74 12 BB 00 64 3D 00 08 74 0A BB 00 68 83  // ..t...d=..t...h.
    3B40: F8 40 74 02 33 DB C3 57 E8 56 00 74 0A 8B 5D 02  // .@t.3..W.V.t..].
    3B50: E8 08 00 0B DB 5F C3 33 DB 5F C3 52 51 0B DB 74  // ....._.3._.RQ..t
    3B60: 1B 56 E8 B4 02 03 DE 5E 33 C9 8A 4F 01 80 3F FF  // .V.....^3..O..?.
    3B70: 74 08 3A 07 74 06 03 D9 EB F0 33 DB 0B DB 59 5A  // t.:.t.....3...YZ
    3B80: C3 56 51 E8 93 02 32 C9 8D 7C 08 3B 5D 04 74 0C  // .VQ...2..|.;].t.
    3B90: 83 C7 10 FE C1 3A 4C 06 72 F1 33 FF 0B FF 59 5E  // .....:L.r.3...Y^
    3BA0: C3 56 51 E8 73 02 32 C9 8D 7C 08 3B 1D 74 0C 83  // .VQ.s.2..|.;.t..
    3BB0: C7 10 FE C1 3A 4C 06 72 F2 33 FF 0B FF 59 5E C3  // ....:L.r.3...Y^.
    3BC0: 56 51 E8 54 02 32 C9 8D 7C 08 3B 45 0C 74 0C 83  // VQ.T.2..|.;E.t..
    3BD0: C7 10 FE C1 3A 4C 06 72 F1 33 FF 0B FF 59 5E C3  // ....:L.r.3...Y^.
    3BE0: 57 50 E8 DB FF 8A C3 8B 5D 02 E8 6E FF 58 5F C3  // WP......]..n.X_.
    3BF0: 53 32 C9 B3 01 E8 E8 FF 74 03 8A 4F 02 0A C9 5B  // S2......t..O...[
    3C00: C3 53 32 ED B3 02 E8 D7 FF 74 03 8A 6F 02 0A ED  // .S2......t..o...
    3C10: 5B C3 50 57 8B DA E8 68 FF 75 04 33 DB EB 0D B0  // [.PW...h.u.3....
    3C20: 14 8B 5D 08 E8 34 FF 74 F2 8B 5F 02 5F 58 C3 66  // ..]..4.t.._._X.f
    3C30: 50 53 51 57 8D 1C 66 25 FF FF 00 00 E8 92 06 8B  // PSQW..f%........
    3C40: D8 E8 3B 00 23 C3 74 31 E8 75 FF 0B FF 74 2A 66  // ..;.#.t1.u...t*f
    3C50: 50 66 8B 45 04 8D 5C 0C E8 76 06 66 33 C0 8B 05  // Pf.E..\..v.f3...
    3C60: 8D 5C 04 E8 6B 06 66 58 E8 85 FF E8 93 FF 8D 5C  // .\..k.fX.......\
    3C70: 08 66 33 C0 8B C1 E8 58 06 5F 59 5B 66 58 C3 56  // .f3....X._Y[fX.V
    3C80: E8 96 01 8B 44 04 5E C3 56 E8 8D 01 89 44 04 5E  // ....D.^.V....D.^
    3C90: C3 E8 B3 01 8B F7 83 C6 38 BB 00 70 B9 23 00 E8  // ........8..p.#..
    3CA0: D2 02 E8 01 00 C3 51 66 57 56 E8 6C 01 66 33 FF  // ......QfWV.l.f3.
    3CB0: 8D 7C 08 33 C0 E8 D0 FF 32 C9 8B 15 B8 00 70 23  // .|.3....2.....p#
    3CC0: C2 3D 00 30 75 54 80 FA 15 74 0B E8 B1 FF 0B 45  // .=.0uT...t.....E
    3CD0: 0C E8 B4 FF EB 44 E8 5E 00 89 45 0C 0B C0 75 04  // .....D.^..E...u.
    3CE0: 89 05 EB 36 E8 98 FF 0B 45 0C E8 9B FF 83 7D 06  // ...6....E.....}.
    3CF0: 00 74 16 E8 4A 00 89 45 06 0B C0 74 0C 83 7D 06  // .t..J..E...t..}.
    3D00: 00 74 06 8B 5C 0A E8 A0 00 E8 40 00 89 05 8B 5D  // .t..\.....@....]
    3D10: 02 E8 95 00 8B 5D 08 E8 B0 00 83 C7 10 FE C1 3A  // .....].........:
    3D20: 4C 06 72 96 5E 66 5F 59 C3 08 00 80 00 00 02 00  // L.r.^f_Y........
    3D30: 04 00 08 40 00 00 00 53 E8 3D 00 E8 33 06 5B C3  // ...@...S.=..3.[.
    3D40: 53 E8 34 00 83 C3 08 E8 27 06 5B C3 53 57 52 E8  // S.4.....'.[.SWR.
    3D50: 26 00 83 C3 04 E8 19 06 8B D0 5A 5F 5B C3 E8 EB  // &.........Z_[...
    3D60: FF 66 C1 E8 10 B4 11 E8 25 00 C3 E8 DE FF 66 C1  // .f......%.....f.
    3D70: E8 18 B4 10 E8 18 00 C3 51 52 33 C9 8A CE 80 E1  // ........QR3.....
    3D80: 07 49 B8 10 00 F7 E1 BB 14 70 03 D8 5A 59 C3 57  // .I.......p..ZY.W
    3D90: 53 51 33 C9 8A C8 8A C4 BB 03 71 E8 A9 FD 83 C3  // SQ3.......q.....
    3DA0: 02 03 D9 8A 07 59 5B 5F C3 50 53 B0 01 E8 AB FD  // .....Y[_.PS.....
    3DB0: 74 15 E8 A9 FF 88 47 02 5B 53 B0 02 E8 9C FD 74  // t.....G.[S.....t
    3DC0: 06 E8 A7 FF 88 47 02 5B 58 C3 51 50 B0 14 E8 8A  // .....G.[X.QP....
    3DD0: FD 74 3A 53 E8 A1 FF 83 C3 0C E8 94 05 8B C8 5B  // .t:S...........[
    3DE0: F6 C1 01 74 05 66 83 67 02 FD F6 C1 80 74 05 66  // ...t.f.g.....t.f
    3DF0: 83 67 02 F7 F7 C1 00 01 74 08 66 81 4F 02 00 01  // .g......t.f.O...
    3E00: 00 00 F7 C1 00 02 74 05 66 83 67 02 FB 58 59 C3  // ......t.f.g..XY.
    3E10: BF AA 01 8B 3D 8B 7D 0C C3 BE AA 01 8B 34 8B 74  // ....=.}......4.t
    3E20: 30 C3 1E 0E 1F BF AA 01 8B 3D 8B 7D 0E 83 C7 04  // 0........=.}....
    3E30: 1F C3 BE AA 01 8B 34 8B 74 10 C3 BF AA 01 8B 3D  // ......4.t......=
    3E40: 8B 7D 26 83 C7 04 C3 BF AA 01 8B 3D 8B 7D 40 C3  // .}&........=.}@.
    3E50: BE AA 01 8B 34 8B 74 1A C3 BE AA 01 8B 34 8B 74  // ....4.t......4.t
    3E60: 3A C3 BF AA 01 8B 3D 8B 7D 0A 83 C7 04 B9 0D 00  // :.....=.}.......
    3E70: C3 E8 01 00 CB 83 EC 06 8B EC 89 46 00 66 33 C0  // ...........F.f3.
    3E80: C6 46 04 00 89 46 02 06 52 8A D3 8B C5 E8 4F 17  // .F...F..R.....O.
    3E90: 5A 07 83 C4 06 C3 E8 77 FF 66 F7 45 10 01 00 00  // Z......w.f.E....
    3EA0: 00 C3 50 E8 6A FF B8 01 00 09 45 10 58 C3 E8 5F  // ..P.j.....E.X.._
    3EB0: FF 88 45 10 C3 66 53 83 EC 48 8B EC 66 89 5E 00  // ..E..fS..H..f.^.
    3EC0: 66 89 4E 04 8C D0 66 C1 E0 10 8B C4 BB 00 00 E8  // f.N...f.........
    3ED0: A3 FF 83 C4 48 66 5B E8 49 01 E8 83 01 E8 0E 00  // ....Hf[.I.......
    3EE0: BB 04 00 E8 02 FC 66 C1 E8 10 E8 C1 FF C3 83 EC  // ......f.........
    3EF0: 0C 8B EC 8C D0 66 C1 E0 10 8B C4 BB 16 00 E8 74  // .....f.........t
    3F00: FF 66 BB 00 00 00 00 83 C4 0C E8 03 FF 66 8B C3  // .f...........f..
    3F10: 66 C1 E8 08 66 89 45 28 66 8B C3 66 C1 E0 18 66  // f...f.E(f..f...f
    3F20: 89 45 2C C3 E8 E9 FE 66 8B 5D 08 66 8B 4D 0C C3  // .E,....f.].f.M..
    3F30: 56 E8 25 FF 66 8B 44 08 5E C3 B0 05 C3 B0 01 C3  // V.%.f.D.^.......
    3F40: B0 04 C3 B0 08 C3 53 66 50 66 33 C0 E8 82 03 83  // ......SfPf3.....
    3F50: C3 04 E2 F8 66 58 5B C3 32 C0 C3 FC E8 12 04 66  // ....fX[.2......f
    3F60: C1 CB 10 E8 6B 03 66 C1 CB 10 66 81 C3 04 00 04  // ....k.f...f.....
    3F70: 00 E2 E9 C3 FC 66 AD E8 57 03 83 C3 04 E2 F6 C3  // .....f..W.......
    3F80: FC E8 ED 03 66 AB 83 C3 04 E2 F6 C3 66 50 B8 30  // ....f.......fP.0
    3F90: 00 E8 10 00 66 58 C3 66 50 B8 C0 5D D1 E1 E8 03  // ....fX.fP..]....
    3FA0: 00 66 58 C3 52 F7 E1 8B CA E8 DE 01 66 53 8B D9  // .fX.R.......fS..
    3FB0: 66 C1 E3 10 8B D8 66 B8 B8 A8 05 00 B2 00 66 EF  // f.....f.......f.
    3FC0: B2 04 66 ED 33 C9 66 03 D8 73 0A 66 ED 66 A9 00  // ..f.3.f..s.f.f..
    3FD0: 00 00 80 75 F6 66 ED 66 3B C3 73 0C 66 C1 E8 10  // ...u.f.f;.s.f...
    3FE0: 3B C1 72 04 8B C8 EB ED 66 5B 5A C3 66 52 E8 99  // ;.r.....f[Z.fR..
    3FF0: 01 66 B8 B8 A8 05 00 B2 00 66 EF B2 04 66 ED 66  // .f.......f...f.f
    4000: 33 D2 66 BB 30 00 00 00 66 F7 F3 66 5A C3 66 50  // 3.f.0...f..fZ.fP
    4010: 53 BB 07 00 E8 D1 FA 25 00 02 35 00 02 0B C0 5B  // S......%..5....[
    4020: 66 58 C3 66 51 B3 01 E8 05 01 E8 23 FE 66 33 C9  // fX.fQ......#.f3.
    4030: 8B 4C 08 66 C1 E0 0A 0B C9 75 03 B9 00 08 66 2B  // .L.f.....u....f+
    4040: C1 E8 0C FE 66 89 44 04 89 4C 08 66 59 C3 56 1E  // ....f.D..L.fY.V.
    4050: 0E 1F E8 FB FD 66 8B 44 04 66 C1 E0 0A 1F 5E C3  // .....f.D.f....^.
    4060: E8 C0 FF 06 E8 E0 FD 0E 07 66 BB 00 F8 1A 00 E8  // .........f......
    4070: DC FF 66 03 D8 E8 B8 03 66 3B 05 75 0F B9 00 01  // ..f.....f;.u....
    4080: FC E8 AC 03 66 AB 66 83 C3 04 E2 F5 E8 B8 FD BE  // ....f.f.........
    4090: AA 01 8B 34 8B 74 14 8B 45 14 89 44 0C E8 92 FD  // ...4.t..E..D....
    40A0: 0B F6 74 2B 57 56 83 C7 20 83 C6 04 B9 02 00 8B  // ..t+WV.. .......
    40B0: 05 89 04 8B 45 02 89 44 02 8A 45 0C 88 44 0C 8A  // ....E..D..E..D..
    40C0: 45 0D 88 44 0D 8A 45 0E 88 44 0E 47 46 E2 E0 5E  // E..D..E..D.GF..^
    40D0: 5F E8 85 FD 0B F6 74 1E 8A 85 06 01 88 44 2F BB  // _.....t......D/.
    40E0: 04 71 B0 09 E8 60 FA 74 0D 57 81 C7 80 00 8A 85  // .q...`.t.W......
    40F0: 85 00 88 47 04 5F 07 C3 BE AA 01 8B 34 8B 74 1E  // ...G._......4.t.
    4100: 83 C6 04 B9 28 00 C3 56 E8 27 FD 83 C6 04 8A 6C  // ....(..V.'.....l
    4110: 0F 5E C3 56 E8 1B FD 80 FD 00 74 06 83 C6 04 88  // .^.V......t.....
    4120: 6C 0F 5E C3 32 C0 C3 E8 1D FD 66 8B 45 08 C3 66  // l.^.2.....f.E..f
    4130: 53 83 EC 04 8B EC 8C D0 66 C1 E0 10 8B C4 66 89  // S.......f.....f.
    4140: 5E 00 BB 06 00 E8 2D FD 8B EC 66 8B 46 00 83 C4  // ^.....-...f.F...
    4150: 04 66 5B C3 83 EC 0C 8B EC 8C D0 66 C1 E0 10 8B  // .f[........f....
    4160: C4 BB 16 00 E8 0E FD 8B EC 66 8B 5E 00 66 8B 4E  // .........f.^.f.N
    4170: 00 66 8B 56 08 83 C4 0C C3 66 B8 00 00 00 00 C3  // .f.V.....f......
    4180: BF AA 01 8B 3D 8B 7D 12 C3 00 66 50 8C C8 3D 00  // ....=.}...fP..=.
    4190: C0 75 0C BA C3 03 EC 8A F0 0A F6 74 02 EB 0E 53  // .u.........t...S
    41A0: 2E 8B 1E 14 00 B2 20 E8 D6 00 8A F4 5B 32 D2 66  // ...... .....[2.f
    41B0: ED 66 58 C3 2E 8B 1E 14 00 C3 0B C9 75 1A 4B 74  // .fX.........u.Kt
    41C0: 16 43 3B DA 77 09 8B C8 8B C2 2B D2 F7 F3 91 F7  // .C;.w.....+.....
    41D0: F3 8B DA 8B D1 2B C9 C3 3B CA 72 1A 75 10 3B D8  // .....+..;.r.u.;.
    41E0: 77 0C 2B C3 8B D8 2B C9 2B D2 B8 01 00 C3 2B C9  // w.+...+.+.....+.
    41F0: 2B DB 93 87 CA C3 55 56 2B F6 8B EE 03 DB 13 C9  // +.....UV+.......
    4200: 72 11 45 3B CA 72 F5 77 04 3B D8 76 EF F8 13 F6  // r.E;.r.w.;.v....
    4210: 4D 78 20 D1 D9 D1 DB 2B C3 1B D1 F5 72 F0 03 F6  // Mx ....+....r...
    4220: 4D 78 0C D1 E9 D1 DB 03 C3 13 D1 73 F1 EB DF 03  // Mx.........s....
    4230: C3 13 D1 8B D8 8B CA 8B C6 33 D2 5E 5D C3 93 50  // .........3.^]..P
    4240: 92 0B C0 74 02 F7 E2 91 0B C0 74 04 F7 E3 03 C8  // ...t......t.....
    4250: 58 F7 E3 03 D1 C3 52 66 50 B4 80 8A C7 66 C1 E0  // X.....RfP....f..
    4260: 10 8A E3 8A C2 24 FC BA F8 0C 66 EF 66 58 5A C3  // .....$....f.fXZ.
    4270: 52 BA FC 0C 66 ED 5A C3 52 BA FC 0C 66 EF 5A C3  // R...f.Z.R...f.Z.
    4280: E8 31 FF 9C FA E8 CE FF E8 E5 FF 9D C3 E8 24 FF  // .1............$.
    4290: 9C FA E8 C1 FF E8 E0 FF 9D C3 52 66 53 66 50 E8  // ..........RfSfP.
    42A0: 06 00 66 58 66 5B 5A C3 66 C1 E3 10 66 C1 EB 0E  // ..fXf[Z.f...f...
    42B0: E8 D7 FE E8 BF 01 C3 66 50 66 C1 E3 10 66 C1 EB  // .......fPf...f..
    42C0: 10 E8 8A FD 66 03 D8 66 81 CB 00 00 00 80 66 58  // ....f..f......fX
    42D0: C3 52 66 53 E8 04 00 66 5B 5A C3 66 50 E8 AA FE  // .RfS...f[Z.fP...
    42E0: E8 D4 FF E8 8F 01 66 58 C3 52 51 66 53 66 50 8A  // ......fX.RQfSfP.
    42F0: CB 80 E3 FC 80 E1 03 C0 E1 03 E8 8D FE E8 B7 FF  // ................
    4300: E8 59 01 66 D3 C8 58 50 66 D3 C0 E8 67 01 66 58  // .Y.f..XPf...g.fX
    4310: 66 5B 59 5A C3 66 50 51 C0 E1 03 E8 53 00 66 D3  // f[YZ.fPQ....S.f.
    4320: C8 8A C5 66 D3 C0 E8 A8 FF 59 66 58 C3 66 50 51  // ...f.....YfX.fPQ
    4330: C0 E1 03 E8 3B 00 66 D3 C8 59 8A E8 66 58 C3 E8  // ....;.f..Y..fX..
    4340: 5F 00 C3 E8 44 FE 66 C1 E3 10 66 C1 EB 0E E8 0B  // _...D.f...f.....
    4350: 01 C3 E8 35 FE 66 C1 E3 02 E8 00 01 C3 52 66 53  // ...5.f.......RfS
    4360: E8 04 00 66 5B 5A C3 E8 20 FE E8 4A FF E8 EC 00  // ...f[Z.. ..J....
    4370: C3 51 66 52 8A EB 8A CB 80 E1 03 C0 E1 03 80 E3  // .QfR............
    4380: FC E8 D9 FF 80 F9 00 74 14 66 8B D0 83 C3 04 E8  // .......t.f......
    4390: CB FF 83 EB 04 66 92 66 0F AD D0 8A DD 66 5A 59  // .....f.f.....fZY
    43A0: C3 52 66 53 E8 9C FF 66 5B 5A C3 52 66 53 E8 A1  // .RfS...f[Z.RfS..
    43B0: FF 66 5B 5A C3 66 50 55 52 66 50 8B EC 8B 56 0C  // .f[Z.fPURfP...V.
    43C0: 89 56 08 E8 C4 FD B2 00 66 ED 66 89 46 0A 66 58  // .V......f.f.F.fX
    43D0: 5A 5D C3 66 50 55 52 66 50 8B EC 8B 56 0C 89 56  // Z].fPURfP...V..V
    43E0: 08 E8 A6 FD 2E A1 FD 01 B2 18 EF B2 00 66 ED 66  // .............f.f
    43F0: 89 46 0A 66 58 5A 5D C3 66 50 55 52 8B EC E8 89  // .F.fXZ].fPUR....
    4400: FD B2 00 66 8B 46 0A 66 EF 8B 56 08 89 56 0C 66  // ...f.F.f..V..V.f
    4410: 8B 46 04 66 89 46 08 5A 5D 66 58 66 58 C3 66 50  // .F.f.F.Z]fXfX.fP
    4420: 52 E8 66 FD B2 18 66 ED 2E A3 FD 01 5A 66 58 C3  // R.f...f.....ZfX.
    4430: 66 52 66 53 E8 53 FD 66 81 CB 00 00 00 80 E8 1B  // fRfS.S.f........
    4440: 00 66 5B 66 5A C3 66 52 66 53 E8 3D FD 66 81 CB  // .f[fZ.fRfS.=.f..
    4450: 00 00 00 80 E8 1E 00 66 5B 66 5A C3 66 81 FB FF  // .......f[fZ.f...
    4460: 00 00 00 77 04 8A D3 EB 09 66 8B C3 B2 00 66 EF  // ...w.....f....f.
    4470: B2 04 66 ED C3 66 81 FB FF 00 00 00 77 04 8A D3  // ..f..f......w...
    4480: EB 0A 66 93 B2 00 66 EF 66 93 B2 04 66 EF C3 C3  // ..f...f.f...f...
    4490: C3 55 8B EC 53 51 8B F0 26 8B 5C 14 26 8B 4C 16  // .U..SQ..&.\.&.L.
    44A0: E8 28 00 8D 66 FC 59 5B 5D C3 53 51 8B F0 26 8B  // .(..f.Y[].SQ..&.
    44B0: 5C 24 33 C9 E8 14 00 59 5B C3 55 8B EC 53 51 8B  // \$3....Y[.U..SQ.
    44C0: F0 26 8B 5C 08 26 8B 4C 0A EB D5 52 56 57 C8 06  // .&.\.&.L...RVW..
    44D0: 00 00 8B F0 89 4E FE 8C D0 8E C0 26 8B 7C 26 8A  // .....N.....&.|&.
    44E0: 45 01 32 E4 B9 20 00 2B C8 B8 FF FF 8B D0 E3 06  // E.2.. .+........
    44F0: D1 EA D1 D8 E2 FA 8A 4D 03 32 ED 8B FA E3 06 D1  // .......M.2......
    4500: E0 D1 D7 E2 FA F7 D0 F7 D7 26 21 44 1C 26 21 7C  // .........&!D.&!|
    4510: 1E 8C D0 8E C0 26 8B 7C 26 8A 4D 01 32 ED B8 20  // .....&.|&.M.2.. 
    4520: 00 2B C1 8B C8 66 C7 46 FA FF FF FF FF E3 08 D1  // .+...f.F........
    4530: 6E FC D1 5E FA E2 F8 8A 4D 02 32 ED 8B C3 8B 56  // n..^....M.2....V
    4540: FE E3 06 D1 EA D1 D8 E2 FA 23 46 FA 23 56 FC 8A  // .........#F.#V..
    4550: 4D 03 32 ED E3 06 D1 E0 D1 D2 E2 FA 26 09 44 1C  // M.2.........&.D.
    4560: 26 09 54 1E C9 5F 5E 5A C3 55 8B EC 53 51 52 57  // &.T.._^Z.U..SQRW
    4570: 50 8B D8 26 8B 7F 26 8A 45 01 32 E4 B9 20 00 2B  // P..&..&.E.2.. .+
    4580: C8 B8 FF FF 8B D0 E3 06 D1 EA D1 D8 E2 FA 8A 4D  // ...............M
    4590: 02 88 4E F6 C6 46 F7 00 8B FA 8B 4E F6 E3 06 D1  // ..N..F.....N....
    45A0: E0 D1 D7 E2 FA 26 09 47 1C 26 09 7F 1E 8D 66 F8  // .....&.G.&....f.
    45B0: 5F 5A E9 F1 FE 53 51 52 57 8B D8 8C D0 8E C0 26  // _Z...SQRW......&
    45C0: 8B 77 26 8A 4C 01 32 ED B8 20 00 2B C1 8B C8 BE  // .w&.L.2.. .+....
    45D0: FF FF 8B D6 E3 06 D1 EA D1 DE E2 FA 26 8B 7F 26  // ............&..&
    45E0: 8A 4D 02 32 ED 8B C6 E3 06 D1 E0 D1 D2 E2 FA F7  // .M.2............
    45F0: D0 F7 D2 26 21 47 1C 26 21 57 1E 5F E9 CC 05 53  // ...&!G.&!W._...S
    4600: 56 8B D8 8C D2 8E C2 26 8B 77 26 80 3C 00 74 73  // V......&.w&.<.ts
    4610: 80 3C 01 75 58 8A 44 01 32 E4 26 83 7F 1E 00 75  // .<.uX.D.2.&....u
    4620: 4C 26 3B 47 1C 75 46 8A 04 6B F0 03 8A 84 58 A2  // L&;G.uF..k....X.
    4630: 26 01 47 26 8C D0 8E C0 26 8B 77 26 80 3C 09 74  // &.G&....&.w&.<.t
    4640: 17 8A 04 32 E4 6B F0 03 8B C3 FF 94 56 A2 26 8B  // ...2.k......V.&.
    4650: 77 26 8A 04 32 E4 EB D1 8B 44 01 26 29 47 26 26  // w&..2....D.&)G&&
    4660: FF 47 26 26 8B 47 1C 26 8B 77 1E EB 1A 26 8B 77  // .G&&.G.&.w...&.w
    4670: 26 8A 04 32 E4 6B F0 03 8A 84 58 A2 26 01 47 26  // &..2.k....X.&.G&
    4680: E9 80 FF 33 C0 33 F6 8B D6 5E 5B C3 53 51 52 56  // ...3.3...^[.SQRV
    4690: 8B D8 8D 77 35 26 8B 54 02 26 89 57 14 26 C7 47  // ...w5&.T.&.W.&.G
    46A0: 16 00 00 8B F0 26 8B 47 20 33 D2 26 01 47 14 26  // .....&.G 3.&.G.&
    46B0: 11 54 16 8C D1 8E C1 26 F6 47 2F 06 0F 85 0A 05  // .T.....&.G/.....
    46C0: 26 80 7F 34 00 75 22 26 8B 77 16 26 0B 77 14 75  // &..4.u"&.w.&.w.u
    46D0: 10 26 D1 67 08 26 D1 57 0A 26 D1 67 08 26 D1 57  // .&.g.&.W.&.g.&.W
    46E0: 0A 8B C3 E8 79 11 E9 E1 04 26 8A 47 34 32 E4 05  // ....y....&.G42..
    46F0: 80 00 99 26 89 47 1C 26 89 57 1E 8B C3 E8 FF FE  // ...&.G.&.W......
    4700: E9 C7 04 53 56 8B D8 8D 77 35 26 8A 44 02 32 E4  // ...SV...w5&.D.2.
    4710: C1 E0 02 26 8B 37 26 8B 34 03 F0 26 8B 47 08 26  // ...&.7&.4..&.G.&
    4720: 8B 5F 0A 26 89 04 26 89 5C 02 5E 5B C3 53 52 56  // ._.&..&.\.^[.SRV
    4730: 8B D8 8C D0 8D 77 35 8E C0 26 8A 54 02 80 FA 40  // .....w5..&.T...@
    4740: 73 21 26 8B 77 02 32 F6 C1 E2 02 26 8B 74 04 03  // s!&.w.2....&.t..
    4750: F2 26 8B 57 08 26 8B 47 0A 26 89 14 26 89 44 02  // .&.W.&.G.&..&.D.
    4760: E9 7F 00 80 FA 41 75 12 26 8B 47 08 26 8B 57 0A  // .....Au.&.G.&.W.
    4770: 26 89 47 10 26 89 57 12 EB 68 80 FA 40 75 12 26  // &.G.&.W..h..@u.&
    4780: 8B 47 08 26 8B 57 0A 26 89 47 0C 26 89 57 0E EB  // .G.&.W.&.G.&.W..
    4790: 51 80 FA 42 75 0A 26 8B 47 08 26 89 47 22 EB 42  // Q..Bu.&.G.&.G".B
    47A0: 80 FA 43 75 0A 26 8A 47 08 26 88 47 33 EB 33 80  // ..Cu.&.G.&.G3.3.
    47B0: FA 46 75 12 26 8B 57 08 26 8B 47 0A 26 89 57 18  // .Fu.&.W.&.G.&.W.
    47C0: 26 89 47 1A EB 1C 80 FA 47 75 0A 26 8B 47 08 26  // &.G.....Gu.&.G.&
    47D0: 89 47 24 EB 0D 80 FA 48 75 08 26 8B 47 08 26 89  // .G$....Hu.&.G.&.
    47E0: 47 20 5E 5A 5B C3 53 56 8B D8 8D 77 35 26 8A 44  // G ^Z[.SV...w5&.D
    47F0: 02 32 E4 26 89 47 14 26 C7 47 16 00 00 5E 5B C3  // .2.&.G.&.G...^[.
    4800: 53 56 8B D8 26 8B 77 02 26 8B 74 02 8A 04 32 E4  // SV..&.w.&.t...2.
    4810: 26 89 47 14 26 C7 47 16 00 00 26 8B 5F 02 26 FF  // &.G.&.G...&._.&.
    4820: 47 02 5E 5B C3 53 56 8B D8 26 8B 77 02 26 8B 74  // G.^[.SV..&.w.&.t
    4830: 02 8B 34 26 89 77 14 26 C7 47 16 00 00 26 8B 5F  // ..4&.w.&.G...&._
    4840: 02 26 83 47 02 02 5E 5B C3 53 56 8B D8 26 8B 77  // .&.G..^[.SV..&.w
    4850: 02 26 8B 74 02 8B 04 8B 74 02 26 89 47 14 26 89  // .&.t....t.&.G.&.
    4860: 77 16 26 8B 5F 02 26 83 47 02 04 5E 5B C3 53 52  // w.&._.&.G..^[.SR
    4870: 56 8B D8 E8 70 FF 8B F3 26 8B 47 18 26 8B 57 1A  // V...p...&.G.&.W.
    4880: D1 EA D1 D8 D1 EA D1 D8 26 01 47 14 26 11 54 16  // ........&.G.&.T.
    4890: 8B C3 E8 2B 10 E9 4A FF 53 8B D8 26 8B 5F 02 26  // ...+..J.S..&._.&
    48A0: FF 47 02 5B C3 53 8B D8 26 8B 5F 02 26 83 47 02  // .G.[.S..&._.&.G.
    48B0: 02 5B C3 53 56 8B D8 E8 6B FF 8B F3 26 8B 57 20  // .[.SV...k...&.W 
    48C0: 33 C0 26 01 57 14 26 11 44 16 8C D2 8E C2 26 8B  // 3.&.W.&.D.....&.
    48D0: 47 2E 32 C0 80 E4 06 3D 00 02 75 07 32 E4 33 D2  // G.2....=..u.2.3.
    48E0: 5E 5B C3 26 8B 47 2E 32 C0 80 E4 06 3D 00 04 74  // ^[.&.G.2....=..t
    48F0: EB 26 80 7F 34 00 75 08 8B C3 E8 2F 0F 5E 5B C3  // .&..4.u..../.^[.
    4900: 26 8A 47 34 32 E4 26 89 47 1C 26 C7 47 1E 00 00  // &.G42.&.G.&.G...
    4910: 8B C3 E8 EA FC 5E 5B C3 53 8B D8 E8 E2 FE 26 8B  // .....^[.S.....&.
    4920: 47 14 C1 E0 02 26 8B 1F 26 8B 1F 03 D8 26 8B 07  // G....&..&....&..
    4930: 26 8B 57 02 5B C3 3C 49 31 49 47 49 96 49 4D 49  // &.W.[.<I1IGI.IMI
    4940: 65 49 7F 49 8A 49 90 49 53 51 56 8B D8 E8 B0 FE  // eI.I.I.ISQV.....
    4950: 8C D2 8E C2 26 83 7F 16 00 75 22 26 83 7F 14 40  // ....&....u"&...@
    4960: 73 1B 26 8B 77 02 26 8B 5F 14 C1 E3 02 26 8B 44  // s.&.w.&._....&.D
    4970: 04 03 D8 26 8B 07 26 8B 57 02 E9 7B 05 26 8B 77  // ...&..&.W..{.&.w
    4980: 14 26 8B 47 16 83 C6 C0 83 D0 FF 75 71 83 FE 08  // .&.G.......uq...
    4990: 77 6C 03 F6 2E FF A4 CE 48 26 8B 47 10 26 8B 57  // wl......H&.G.&.W
    49A0: 12 E9 54 05 26 8B 47 0C 26 8B 57 0E E9 49 05 26  // ..T.&.G.&.W..I.&
    49B0: 8B 47 22 EB 4B 26 8A 4F 33 32 ED BB 01 00 33 D2  // .G".K&.O32....3.
    49C0: E3 06 D1 E3 D1 D2 E2 FA 8B C3 E9 2B 05 26 8A 4F  // ...........+.&.O
    49D0: 33 32 ED B8 01 00 33 D2 E3 06 D1 E0 D1 D2 E2 FA  // 32....3.........
    49E0: F7 D0 F7 D2 E9 11 05 26 8B 47 18 26 8B 57 1A E9  // .......&.G.&.W..
    49F0: 06 05 26 8B 47 24 EB 08 26 8B 47 20 EB 02 33 C0  // ..&.G$..&.G ..3.
    4A00: 33 D2 E9 F3 04 53 56 8B D8 E8 F4 FD 8B F3 26 8B  // 3....SV.......&.
    4A10: 47 18 26 8B 57 1A D1 EA D1 D8 D1 EA D1 D8 26 01  // G.&.W.........&.
    4A20: 47 14 26 11 54 16 8B C3 E8 16 0E 5E 5B C3 33 C0  // G.&.T......^[.3.
    4A30: 33 D2 C3 53 56 8B D8 E8 EB FD 26 8B 77 14 26 03  // 3..SV.....&.w.&.
    4A40: 77 22 8B 04 8B 54 02 5E 5B C3 53 8B D8 26 C6 47  // w"...T.^[.S..&.G
    4A50: 2B 04 E8 AB FD 26 8B 47 14 26 8B 57 16 5B C3 53  // +....&.G.&.W.[.S
    4A60: 8B D8 26 C6 47 2B 01 E8 BB FD EB E9 53 8B D8 26  // ..&.G+......S..&
    4A70: C6 47 2B 00 E8 D2 FD EB DC 53 8B D8 83 C3 35 26  // .G+......S....5&
    4A80: 8A 5F 01 C0 EB 03 80 E3 07 32 FF 03 DB FF 97 E6  // ._.......2......
    4A90: A1 5B C3 53 52 56 8B D8 26 8A 47 2C 32 E4 8B F0  // .[.SRV..&.G,2...
    4AA0: 03 F0 8B C3 FF 94 02 A2 26 89 47 08 26 89 57 0A  // ........&.G.&.W.
    4AB0: 26 8A 47 2D 32 E4 8B F0 03 F0 8B C3 FF 94 1A A2  // &.G-2...........
    4AC0: 26 89 47 04 26 89 57 06 E9 17 FD 53 51 56 8B D8  // &.G.&.W....SQV..
    4AD0: 26 8A 4F 2B 32 ED 8B F1 8A 8C 4A A2 E3 0A 26 D1  // &.O+2.....J...&.
    4AE0: 6F 06 26 D1 5F 04 E2 F6 26 8A 4F 2B 32 ED 8B F1  // o.&._...&.O+2...
    4AF0: C1 E6 02 8B 8C 2A A2 8B B4 2C A2 26 21 4F 04 26  // .....*...,.&!O.&
    4B00: 21 77 06 26 8A 4F 2A 32 ED 8B F1 8A 8C 52 A2 E3  // !w.&.O*2.....R..
    4B10: 0A 26 D1 67 04 26 D1 57 06 E2 F6 26 8B 4F 08 26  // .&.g.&.W...&.O.&
    4B20: 8B 77 0A 26 89 4F 14 26 89 77 16 E9 CA 03 53 51  // .w.&.O.&.w....SQ
    4B30: 52 56 57 8B D8 8C D0 8E C0 26 8A 47 2B 32 E4 8B  // RVW......&.G+2..
    4B40: F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D 52 A2 32 ED  // ....&.G*....R.2.
    4B50: 8B 84 2A A2 8B 94 2C A2 E3 06 D1 E0 D1 D2 E2 FA  // ..*...,.........
    4B60: F7 D0 F7 D2 26 21 47 14 26 21 57 16 26 8A 47 2A  // ....&!G.&!W.&.G*
    4B70: 32 E4 8B F0 8A 8C 52 A2 32 ED E3 0A 26 D1 6F 0A  // 2.....R.2...&.o.
    4B80: 26 D1 5F 08 E2 F6 26 8A 47 2B 8B F0 C1 E6 02 8B  // &._...&.G+......
    4B90: 84 2A A2 8B 94 2C A2 26 21 47 08 26 21 57 0A 26  // .*...,.&!G.&!W.&
    4BA0: 8A 47 2A 32 E4 8B F0 8A 8C 52 A2 32 ED E3 0A 26  // .G*2.....R.2...&
    4BB0: D1 67 08 26 D1 57 0A E2 F6 26 8B 47 14 26 8B 57  // .g.&.W...&.G.&.W
    4BC0: 16 26 09 47 08 26 09 57 0A 5F 5E 5A 59 5B C3 53  // .&.G.&.W._^ZY[.S
    4BD0: 51 56 8B D8 26 8A 4F 2B 32 ED 8B F1 8A 8C 4A A2  // QV..&.O+2.....J.
    4BE0: E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 26 8A 4F 2B  // ..&.o.&._...&.O+
    4BF0: 32 ED 8B F1 C1 E6 02 8B 8C 2A A2 8B B4 2C A2 26  // 2........*...,.&
    4C00: 21 4F 04 26 21 77 06 26 8A 4F 2A 32 ED 8B F1 8A  // !O.&!w.&.O*2....
    4C10: 8C 52 A2 E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26  // .R...&.o.&._...&
    4C20: 8A 4F 2B 32 ED 8B F1 C1 E6 02 8B 8C 2A A2 8B B4  // .O+2........*...
    4C30: 2C A2 26 21 4F 08 26 21 77 0A E9 BB 02 51 52 57  // ,.&!O.&!w....QRW
    4C40: 8B D8 8C D0 8E C0 26 80 7F 2B 00 74 1A 26 8A 47  // ......&..+.t.&.G
    4C50: 2C 32 E4 8B F0 03 F0 8B C3 FF 94 02 A2 26 89 47  // ,2...........&.G
    4C60: 08 26 89 57 0A EB 10 26 8A 47 2C 32 E4 8B F0 03  // .&.W...&.G,2....
    4C70: F0 8B C3 FF 94 0E A2 26 8A 47 2D 32 E4 8B F0 03  // .......&.G-2....
    4C80: F0 8B C3 FF 94 1A A2 26 89 47 04 26 89 57 06 8C  // .......&.G.&.W..
    4C90: D2 8E C2 26 80 7F 2B 00 74 4A 26 8A 47 2B 32 E4  // ...&..+.tJ&.G+2.
    4CA0: 8B F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D 52 A2 32  // .....&.G*....R.2
    4CB0: ED 8B 84 2A A2 8B 94 2C A2 E3 06 D1 E0 D1 D2 E2  // ...*...,........
    4CC0: FA F7 D0 F7 D2 26 21 47 08 26 21 57 0A 8B C3 E8  // .....&!G.&!W....
    4CD0: F9 FD 26 8B 47 04 26 8B 57 06 26 09 47 08 26 09  // ..&.G.&.W.&.G.&.
    4CE0: 57 0A EB 10 26 8B 57 04 26 8B 47 06 26 89 57 08  // W...&.W.&.G.&.W.
    4CF0: 26 89 47 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3  // &.G.&.G,2.......
    4D00: FF 94 F6 A1 5F 5A 59 C3 53 51 52 56 57 8B D8 26  // ...._ZY.SQRVW..&
    4D10: 8A 47 2A 32 E4 8B F0 8A 8C 52 A2 32 ED E3 0A 26  // .G*2.....R.2...&
    4D20: D1 67 04 26 D1 57 06 E2 F6 8C D0 8E C0 26 8A 47  // .g.&.W.......&.G
    4D30: 2B 32 E4 8B F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D  // +2......&.G*....
    4D40: 52 A2 32 ED 8B 84 2A A2 8B 94 2C A2 E3 06 D1 E0  // R.2...*...,.....
    4D50: D1 D2 E2 FA F7 D0 F7 D2 26 09 47 04 26 09 57 06  // ........&.G.&.W.
    4D60: 26 8B 47 04 26 8B 57 06 26 21 47 08 26 21 57 0A  // &.G.&.W.&!G.&!W.
    4D70: E9 56 FE 55 8B EC 51 52 50 8B D8 26 8A 47 2C 32  // .V.U..QRP..&.G,2
    4D80: E4 8B F0 03 F0 8B C3 FF 94 02 A2 26 89 47 08 26  // ...........&.G.&
    4D90: 89 57 0A 26 8A 47 2B 88 46 FA 8B C3 E8 DA FC 26  // .W.&.G+.F......&
    4DA0: 89 47 04 26 89 57 06 26 8A 4F 2D 32 ED 8B F1 03  // .G.&.W.&.O-2....
    4DB0: F1 8B C3 FF 94 1A A2 26 89 47 14 26 89 57 16 8B  // .......&.G.&.W..
    4DC0: C3 E8 44 FF 8A 46 FA 32 E4 8B F0 8A 8C 4A A2 E3  // ..D..F.2.....J..
    4DD0: 0A 26 D1 6F 16 26 D1 5F 14 E2 F6 26 8A 57 2B 32  // .&.o.&._...&.W+2
    4DE0: F6 8B F2 C1 E6 02 8B 84 2A A2 8B 94 2C A2 26 21  // ........*...,.&!
    4DF0: 47 14 26 21 57 16 26 8A 47 2A 32 E4 8B F0 8A 8C  // G.&!W.&.G*2.....
    4E00: 52 A2 32 ED E3 0A 26 D1 67 14 26 D1 57 16 E2 F6  // R.2...&.g.&.W...
    4E10: 26 8B 47 14 26 8B 57 16 26 09 47 08 26 09 57 0A  // &.G.&.W.&.G.&.W.
    4E20: 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 F6 A1  // &.G,2...........
    4E30: 8D 66 FC 5A 59 5D C3 51 8B D8 E8 56 FC 26 8A 4F  // .f.ZY].Q...V.&.O
    4E40: 2B 32 ED 8B F1 8A 8C 4A A2 E3 0A 26 D1 6F 06 26  // +2.....J...&.o.&
    4E50: D1 5F 04 E2 F6 8B C3 E8 AE FE 26 8A 4F 2C 32 ED  // ._........&.O,2.
    4E60: 8B F1 03 F1 8B C3 FF 94 F6 A1 59 C3 8B D8 E8 22  // ..........Y...."
    4E70: FC 8B C3 E8 55 FC 26 8B 47 04 26 8B 77 06 26 09  // ....U.&.G.&.w.&.
    4E80: 47 08 26 09 77 0A 26 8A 47 2C 32 E4 8B F0 03 F0  // G.&.w.&.G,2.....
    4E90: 8B C3 FF 94 F6 A1 C3 53 56 8B D8 E8 F5 FB 8B C3  // .......SV.......
    4EA0: E8 28 FC 26 8B 47 04 26 8B 77 06 26 31 47 08 26  // .(.&.G.&.w.&1G.&
    4EB0: 31 77 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF  // 1w.&.G,2........
    4EC0: 94 F6 A1 5E 5B C3 53 51 56 8B D8 E8 C5 FB 8B C3  // ...^[.SQV.......
    4ED0: E8 F8 FB 26 8B 4F 04 E3 0A 26 D1 67 08 26 D1 57  // ...&.O...&.g.&.W
    4EE0: 0A E2 F6 8B C3 E8 46 FC 26 8A 4F 2C 32 ED 8B F1  // ......F.&.O,2...
    4EF0: 03 F1 8B C3 FF 94 F6 A1 5E 59 5B C3 53 51 56 8B  // ........^Y[.SQV.
    4F00: D8 E8 8F FB 8B C3 E8 C2 FB 26 8B 4F 04 E3 0A 26  // .........&.O...&
    4F10: D1 6F 0A 26 D1 5F 08 E2 F6 EB C8 52 8B D8 E8 72  // .o.&._.....R...r
    4F20: FB 8B C3 E8 A5 FB 8B F3 26 8B 47 04 26 8B 57 06  // ........&.G.&.W.
    4F30: 26 01 47 08 26 11 54 0A 8B C3 E8 F1 FB 26 8A 47  // &.G.&.T......&.G
    4F40: 2C 32 E4 8B F0 03 F0 8B C3 FF 94 F6 A1 5A C3 52  // ,2...........Z.R
    4F50: 8B D8 E8 3E FB 8B C3 E8 71 FB 8B F3 26 8B 47 04  // ...>....q...&.G.
    4F60: 26 8B 57 06 26 29 47 08 26 19 54 0A EB CA 51 52  // &.W.&)G.&.T...QR
    4F70: 8B F0 E8 1E FB 8B C6 E8 55 FC 26 8B 44 08 26 8B  // ........U.&.D.&.
    4F80: 54 0A 26 8B 5C 04 26 8B 4C 06 E8 B1 F2 26 89 44  // T.&.\.&.L....&.D
    4F90: 0C 26 89 54 0E 5A 59 C3 52 8B D0 E8 F5 FA 8B C2  // .&.T.ZY.R.......
    4FA0: E8 2C FC 8B C2 E8 5C 08 5A C3 51 52 57 8B F0 E8  // .,....\.Z.QRW...
    4FB0: E1 FA 8B C6 E8 18 FC 26 8B 44 08 26 8B 54 0A 26  // .......&.D.&.T.&
    4FC0: 8B 5C 04 26 8B 4C 06 E8 F0 F1 26 89 44 0C 26 89  // .\.&.L....&.D.&.
    4FD0: 54 0E 8C D7 8E C7 26 8B 44 08 26 8B 54 0A 26 8B  // T.....&.D.&.T.&.
    4FE0: 5C 04 26 8B 4C 06 E8 D1 F1 26 89 5C 10 26 89 4C  // \.&.L....&.\.&.L
    4FF0: 12 E9 10 FD 52 8B D0 E8 99 FA 8B C2 E8 D0 FB 8B  // ....R...........
    5000: C2 E8 D3 07 5A C3 51 52 8B D8 E8 86 FA 8B C3 E8  // ....Z.QR........
    5010: BD FB 8C D1 8E C1 26 8B 47 08 26 8B 57 0A 26 3B  // ......&.G.&.W.&;
    5020: 57 06 75 0E 26 3B 47 04 75 08 26 C6 47 30 01 5A  // W.u.&;G.u.&.G0.Z
    5030: 59 C3 8B D0 26 8B 47 0A 26 3B 47 06 72 08 75 0A  // Y...&.G.&;G.r.u.
    5040: 26 3B 57 04 73 04 33 C0 EB 03 B8 02 00 26 88 47  // &;W.s.3......&.G
    5050: 30 5A 59 C3 51 52 57 8B D8 26 8A 47 2C 32 E4 8B  // 0ZY.QRW..&.G,2..
    5060: F0 03 F0 8B C3 FF 94 02 A2 26 89 47 08 26 89 57  // .........&.G.&.W
    5070: 0A 8C D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02  // .....&.G+2......
    5080: 8B F8 8A 8D 4A A2 32 ED 8B 84 2A A2 8B 94 2C A2  // ....J.2...*...,.
    5090: E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47 08  // ............&!G.
    50A0: 26 21 57 0A E9 4D FC 55 8B EC 51 52 57 83 EC 06  // &!W..M.U..QRW...
    50B0: 8B D8 26 8A 47 2B 32 E4 8B F0 C1 E6 02 8B F8 8A  // ..&.G+2.........
    50C0: 8D 4A A2 32 ED 8B 84 2A A2 89 46 F4 8B 84 2C A2  // .J.2...*..F...,.
    50D0: 89 46 F6 E3 08 D1 66 F4 D1 56 F6 E2 F8 8B 7E F4  // .F....f..V....~.
    50E0: 8B 46 F6 89 46 F8 26 8A 47 2C 32 E4 8B F0 03 F0  // .F..F.&.G,2.....
    50F0: 8B C3 FF 94 02 A2 26 89 47 08 26 89 57 0A 8B C3  // ......&.G.&.W...
    5100: E8 47 F9 26 89 47 04 26 89 57 06 8B C7 F7 D0 8B  // .G.&.G.&.W......
    5110: 56 F6 F7 D2 26 23 47 08 26 23 57 0A 26 89 47 14  // V...&#G.&#W.&.G.
    5120: 26 89 57 16 26 21 7F 08 8B 46 F6 26 21 47 0A 8C  // &.W.&!...F.&!G..
    5130: D1 8D 77 35 8E C1 26 80 3C 19 73 12 26 8B 4F 04  // ..w5..&.<.s.&.O.
    5140: E3 0A 26 D1 67 08 26 D1 57 0A E2 F6 EB 10 26 8B  // ..&.g.&.W.....&.
    5150: 4F 04 E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26 21  // O...&.o.&._...&!
    5160: 7F 08 8B 46 F8 26 21 47 0A 26 8B 57 14 26 8B 47  // ...F.&!G.&.W.&.G
    5170: 16 26 09 57 08 26 09 47 0A 26 8A 47 2C 32 E4 8B  // .&.W.&.G.&.G,2..
    5180: F0 03 F0 8B C3 FF 94 F6 A1 8D 66 FA 5F E9 A3 FC  // ..........f._...
    5190: 52 8B D8 E8 FD F8 8B C3 E8 34 FA 26 8B 47 08 26  // R........4.&.G.&
    51A0: 8B 57 0A 26 85 57 06 75 06 26 85 47 04 74 05 B8  // .W.&.W.u.&.G.t..
    51B0: 03 00 EB 03 B8 01 00 26 88 47 30 5A C3 53 51 52  // .......&.G0Z.SQR
    51C0: 56 8B D8 26 8A 4F 2D 32 ED 8B F1 03 F1 FF 94 1A  // V..&.O-2........
    51D0: A2 26 89 47 04 26 89 57 06 26 8A 47 2B 32 E4 8B  // .&.G.&.W.&.G+2..
    51E0: F0 8A 8C 4A A2 E3 0A 26 D1 6F 06 26 D1 5F 04 E2  // ...J...&.o.&._..
    51F0: F6 26 8A 47 2B 8B F0 C1 E6 02 8B 84 2A A2 8B 94  // .&.G+.......*...
    5200: 2C A2 26 21 47 04 26 21 57 06 E9 BD F9 52 8B D8  // ,.&!G.&!W....R..
    5210: E8 AA FF 26 8B 47 04 26 8B 57 06 26 89 47 18 26  // ...&.G.&.W.&.G.&
    5220: 89 57 1A 5A C3 51 52 8B D8 E8 91 FF 8C D0 8E C0  // .W.Z.QR.........
    5230: 26 8B 77 02 26 8B 74 02 81 3C 5A 5A 74 5B 26 8B  // &.w.&.t..<ZZt[&.
    5240: 77 02 26 8B 74 02 80 3C 63 75 E1 26 8B 77 02 26  // w.&.t..<cu.&.w.&
    5250: FF 44 02 8B C3 E8 21 F8 26 89 47 08 26 89 57 0A  // .D....!.&.G.&.W.
    5260: 8B C3 E8 FA F7 26 89 47 14 26 89 57 16 8C D1 8E  // .....&.G.&.W....
    5270: C1 26 8B 57 04 26 8B 47 06 26 3B 47 0A 75 AD 26  // .&.W.&.G.&;G.u.&
    5280: 3B 57 08 75 A7 26 8B 77 02 26 8B 04 26 03 47 14  // ;W.u.&.w.&..&.G.
    5290: 8B DE 26 89 47 02 5A 59 C3 26 8B 5F 02 26 83 47  // ..&.G.ZY.&._.&.G
    52A0: 02 02 5A 59 C3 52 57 8B D8 8C D0 8E C0 26 8B 77  // ..ZY.RW......&.w
    52B0: 02 26 8B 74 02 8A 54 01 84 D2 75 08 26 C7 47 22  // .&.t..T...u.&.G"
    52C0: 00 00 EB 2F 80 FA FF 75 14 26 8B 77 02 26 8B 3F  // .../...u.&.w.&.?
    52D0: 26 8B 34 26 2B 75 02 26 89 77 22 EB 16 26 8B 07  // &.4&+u.&.w"..&..
    52E0: E8 E3 02 8B F0 8A C2 32 E4 03 C0 03 F0 8B 04 26  // .......2.......&
    52F0: 89 47 22 26 8B 5F 02 26 83 47 02 02 5F 5A C3 8B  // .G"&._.&.G.._Z..
    5300: D8 26 80 67 2F F9 26 8B 77 02 26 8B 74 02 8A 44  // .&.g/.&.w.&.t..D
    5310: 01 26 88 47 34 26 8B 5F 02 26 83 47 02 03 C3 8B  // .&.G4&._.&.G....
    5320: D8 26 8B 77 02 26 8B 74 02 8B 74 01 26 89 77 20  // .&.w.&.t..t.&.w 
    5330: EB E3 53 8B D8 26 8A 47 2C 32 E4 24 03 26 80 67  // ..S..&.G,2.$.&.g
    5340: 2F F9 C1 E0 09 26 09 47 2E E9 4F F5 8B D8 26 8B  // /....&.G..O...&.
    5350: 77 02 26 8B 74 02 8A 44 01 32 E4 26 89 47 04 26  // w.&.t..D.2.&.G.&
    5360: C7 47 06 00 00 8B C3 E8 40 04 26 8B 5F 02 26 83  // .G......@.&._.&.
    5370: 47 02 02 C3 8B D8 26 8B 77 02 26 8B 74 02 8A 44  // G.....&.w.&.t..D
    5380: 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B C3 E8  // .2.&.G.&.G......
    5390: 08 04 EB D6 53 56 8B D8 26 8B 77 02 26 8B 74 02  // ....SV..&.w.&.t.
    53A0: 8A 44 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B  // .D.2.&.G.&.G....
    53B0: C3 E8 06 04 E9 86 F4 53 56 8B D8 26 8B 77 02 26  // .......SV..&.w.&
    53C0: 8B 74 02 8A 44 01 32 E4 26 89 47 04 26 C7 47 06  // .t..D.2.&.G.&.G.
    53D0: 00 00 8B C3 E8 F0 03 E9 63 F4 53 56 8B D8 26 8B  // ........c.SV..&.
    53E0: 77 02 8B DE 26 8B 5F 02 8B 5F 01 83 C3 03 26 01  // w...&._.._....&.
    53F0: 5C 02 5E 5B C3 51 52 8B D8 26 8B 77 02 26 83 44  // \.^[.QR..&.w.&.D
    5400: 02 02 26 8B 07 E8 A0 01 8B C8 26 8B 77 28 8A 44  // ..&.......&.w(.D
    5410: 01 32 E4 03 C0 8B F1 03 F0 83 3C 00 74 4F 26 8B  // .2........<.tO&.
    5420: 77 28 8A 54 01 32 F6 8B C3 E8 B0 01 26 88 47 31  // w(.T.2......&.G1
    5430: 26 8B 77 02 26 8B 34 8B 44 04 C1 E8 08 32 E4 24  // &.w.&.4.D....2.$
    5440: 7F C1 E8 02 32 E4 24 1F 26 80 67 2F 07 C1 E0 0B  // ....2.$.&.g/....
    5450: 26 09 47 2E 26 8B 37 26 8B 47 2E C1 E8 0B C1 E0  // &.G.&.7&.G......
    5460: 02 26 01 04 26 C6 47 32 01 26 89 4F 28 5A 59 C3  // .&..&.G2.&.O(ZY.
    5470: 53 8B D8 26 C6 47 32 82 5B C3 57 8B D8 8C D6 8E  // S..&.G2.[.W.....
    5480: C6 26 80 7F 2C 05 74 0A 26 8A 47 2C 26 3A 47 30  // .&..,.t.&.G,&:G0
    5490: 75 1E 26 8B 77 02 26 8B 74 02 26 8B 7F 02 26 8B  // u.&.w.&.t.&...&.
    54A0: 3D 8B 74 01 03 F7 26 8B 5F 02 26 89 77 02 5F C3  // =.t...&._.&.w._.
    54B0: 26 8B 5F 02 26 83 47 02 03 5F C3 53 56 57 8B D8  // &._.&.G.._.SVW..
    54C0: 8C D6 8E C6 26 80 7F 30 01 74 0A 26 8A 47 30 26  // ....&..0.t.&.G0&
    54D0: 3A 47 2C 75 20 26 8B 77 02 26 8B 74 02 26 8B 7F  // :G,u &.w.&.t.&..
    54E0: 02 26 8B 3D 8B 74 01 03 F7 26 8B 5F 02 26 89 77  // .&.=.t...&._.&.w
    54F0: 02 5F 5E 5B C3 26 8B 5F 02 26 83 47 02 03 EB F1  // ._^[.&._.&.G....
    5500: 53 56 57 8B D8 8C D0 8E C0 26 80 7F 30 01 74 E5  // SVW......&..0.t.
    5510: EB C3 55 8B EC 53 51 52 57 8B D8 26 8B 77 02 26  // ..U..SQRW..&.w.&
    5520: 8B 74 02 8A 04 26 C6 47 3D 00 8C D1 8E C1 26 80  // .t...&.G=.....&.
    5530: 7F 3D 08 73 20 26 8B 77 02 26 8A 57 3D 32 F6 26  // .=.s &.w.&.W=2.&
    5540: 8B 7C 02 03 FA 8B F3 03 F2 8A 15 26 88 54 35 26  // .|.........&.T5&
    5550: FE 47 3D EB D5 26 8B 7F 02 8A D0 32 F6 8B F2 C1  // .G=..&.....2....
    5560: E6 02 8A 94 77 A2 26 01 55 02 26 8B 7F 28 8A 55  // ....w.&.U.&..(.U
    5570: 01 80 E2 07 26 88 57 2D 26 8B 7F 28 8A 55 01 C0  // ....&.W-&..(.U..
    5580: EA 03 80 E2 07 26 88 57 2B 26 8B 7F 28 8A 55 01  // .....&.W+&..(.U.
    5590: C0 EA 06 26 88 57 2A 8A 94 76 A2 26 88 57 2C 8D  // ...&.W*..v.&.W,.
    55A0: 66 F8 5F 5A 59 5B 5D C3 53 56 8B D8 26 8B 77 02  // f._ZY[].SV..&.w.
    55B0: 8B C6 8B 74 48 03 F0 8B D8 8B 74 1E 8B C6 03 C3  // ...tH.....t.....
    55C0: 83 C0 04 5E 5B C3 53 56 8B D8 26 8B 77 02 8B C6  // ...^[.SV..&.w...
    55D0: 8B 74 48 03 F0 8B D8 8B 74 20 EB E0 8A C2 C3 16  // .tH.....t ......
    55E0: 07 55 8B EC 53 51 56 57 83 EC 40 8B F8 89 46 B8  // .U..SQVW..@...F.
    55F0: E8 D3 FF 8B D8 89 46 E0 26 8B 45 02 8B 5F 2E 03  // ......F.&.E.._..
    5600: D8 89 5E DE 83 46 DE 04 8B C7 E8 9B FF 89 46 E0  // ..^..F........F.
    5610: 32 F6 8D 46 B8 E8 C4 FF 8A D0 32 F6 03 D2 8B 5E  // 2..F......2....^
    5620: E0 03 DA 83 3F 00 0F 84 65 01 88 46 E9 80 66 E7  // ....?...e..F..f.
    5630: F9 C6 46 EC 00 C7 46 D8 00 00 66 C7 46 D0 00 00  // ..F...F...f.F...
    5640: 00 00 C7 46 F6 00 00 C6 46 EA 01 EB 06 3C 01 0F  // ...F....F....<..
    5650: 85 8C 00 8A 56 E9 8A C2 32 E4 03 C0 8B 5E E0 03  // ....V...2....^..
    5660: D8 83 3F 00 74 75 26 8B 45 02 8B 1F 03 D8 8B 47  // ..?.tu&.E......G
    5670: 04 32 E4 8B C8 83 C1 09 32 ED 80 E1 FE 83 F9 00  // .2......2.......
    5680: 74 07 D1 E9 33 C0 50 E2 FD 8B C4 8B D8 89 46 BA  // t...3.P.......F.
    5690: 85 C0 74 41 83 C0 08 26 89 47 04 8A C2 32 E4 03  // ..tA...&.G...2..
    56A0: C0 8B 5E E0 03 D8 26 8B 45 02 03 07 8B 5E BA 26  // ..^...&.E....^.&
    56B0: 89 07 8B 5E BA 26 8B 07 83 C0 06 26 89 47 02 8B  // ...^.&.....&.G..
    56C0: 5E BA 8B 76 F6 26 89 77 06 8B 5E BA 89 5E F6 C6  // ^..v.&.w..^..^..
    56D0: 46 EA 00 EB 0A C6 46 EA 87 EB 04 C6 46 EA 83 8A  // F.....F.....F...
    56E0: 46 EA 32 E4 83 F8 10 0F 8F 99 00 88 66 EA 8A 46  // F.2.........f..F
    56F0: EA 32 E4 85 C0 0F 8F 83 00 8C D0 8B 5E BA 8E C0  // .2..........^...
    5700: 26 8B 5F 02 89 5E E0 8B 5E BA 26 8B 5F 02 80 3F  // &._..^..^.&._..?
    5710: 5B 75 4A C6 46 EA 10 8B 5E BA 26 8B 5F 06 89 5E  // [uJ.F...^.&._..^
    5720: F6 8B 5E BA 26 8B 1F 8B 47 04 32 E4 8B C8 83 C1  // ..^.&...G.2.....
    5730: 09 32 ED 80 E1 FE 03 E1 8B 5E F6 89 5E BA 85 DB  // .2.......^..^...
    5740: 74 AC 26 8B 1F 8B 47 04 C1 E8 08 32 E4 24 7F C1  // t.&...G....2.$..
    5750: E8 02 C1 E0 02 8B 5E B8 26 29 07 EB 91 8D 46 B8  // ......^.&)....F.
    5760: E8 AF FD 8A D0 8D 46 B8 E8 2E 00 8A DA 32 FF C1  // ......F......2..
    5770: E3 02 8D 46 B8 FF 97 74 A2 E9 72 FF 83 7E F6 00  // ...F...t..r..~..
    5780: 0F 85 C9 FE 80 7E EA 10 74 05 8A 46 EA EB 02 32  // .....~..t..F...2
    5790: C0 8D 66 F8 5F 5E E9 0B FE C3 53 51 8B D8 26 8A  // ..f._^....SQ..&.
    57A0: 4F 04 32 ED E8 E5 E7 59 5B C3 53 51 8B D8 26 8A  // O.2....Y[.SQ..&.
    57B0: 4F 04 32 ED E8 E0 E7 59 5B C3 53 8B D8 26 8A 47  // O.2....Y[.S..&.G
    57C0: 04 32 E4 E6 80 5B C3 53 51 8B D8 26 8A 4F 04 32  // .2...[.SQ..&.O.2
    57D0: ED E8 34 E1 59 5B C3 53 8B D8 66 50 66 52 66 51  // ..4.Y[.S..fPfRfQ
    57E0: 66 26 8B 47 08 66 26 8B 57 10 66 26 8B 4F 04 66  // f&.G.f&.W.f&.O.f
    57F0: F7 F1 66 26 89 47 0C 66 26 89 57 10 66 59 66 5A  // ..f&.G.f&.W.fYfZ
    5800: 66 58 5B C3 53 8B D8 66 50 66 52 66 51 66 26 8B  // fX[.S..fPfRfQf&.
    5810: 47 08 66 26 8B 4F 04 66 F7 E1 66 26 89 47 0C 66  // G.f&.O.f..f&.G.f
    5820: 26 89 57 10 66 59 66 5A 66 58 5B C3 53 57 8B D8  // &.W.fYfZfX[.SW..
    5830: 26 8B 5F 14 E8 0C EB 8B D0 66 C1 E8 10 92 5F 5B  // &._......f...._[
    5840: C3 53 57 8B D8 26 8B 47 14 26 8B 57 16 8B D8 87  // .SW..&.G.&.W....
    5850: D3 66 C1 E3 10 8B DA C1 E3 02 E8 0A EB EB D8 53  // .f.............S
    5860: 52 57 8B D8 26 8B 47 08 26 8B 57 0A 92 66 C1 E0  // RW..&.G.&.W..f..
    5870: 10 8B C2 26 8B 5F 14 E8 2E EA 5F 5A 5B C3 53 52  // ...&._...._Z[.SR
    5880: 8B D8 26 8B 47 1C 26 8B 57 1E 92 66 C1 E0 10 8B  // ..&.G.&.W..f....
    5890: C2 26 8B 5F 26 8B 5F 01 E8 0D EA 5A 5B C3 53 52  // .&._&._....Z[.SR
    58A0: 56 8B F0 26 8B 5C 26 8B 5F 01 E8 96 EA 8B D0 66  // V..&.\&._......f
    58B0: C1 E8 10 92 26 89 44 1C 26 89 54 1E 5E 5A 5B C3  // ....&.D.&.T.^Z[.
    58C0: 53 51 52 57 8B D8 26 8B 47 08 26 8B 57 0A 92 66  // SQRW..&.G.&.W..f
    58D0: C1 E0 10 8B C2 8B C8 26 8B 47 14 26 8B 57 16 8B  // .......&.G.&.W..
    58E0: D8 87 D3 66 C1 E3 10 8B DA C1 E3 02 8B C1 E8 EA  // ...f............
    58F0: E9 5F 5A 59 5B C3 8B D0 66 C1 E8 10 92 C3 1E 06  // ._ZY[...f.......
    5900: 66 50 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F  // fPfQfRfSfUfVfW..
    5910: 0A C0 75 06 E8 07 01 E9 A8 00 3C 01 75 06 E8 37  // ..u.......<.u..7
    5920: 01 E9 9E 00 3C 02 75 06 E8 5F 02 E9 94 00 3C 03  // ....<.u.._....<.
    5930: 75 0B E8 91 03 8B EC 89 5E 0C E9 85 00 3C 04 75  // u.......^....<.u
    5940: 02 EB 7D 3C 05 75 0A E8 0E 04 8B EC 89 56 10 EB  // ..}<.u.......V..
    5950: 71 3C 06 75 10 E8 8C 03 8B EC 89 5E 0C 89 4E 14  // q<.u.......^..N.
    5960: 89 56 10 EB 5D 3C 07 75 02 EB 55 3C 08 75 0A E8  // .V..]<.u..U<.u..
    5970: D0 03 8B EC 88 7E 0D EB 49 3C 09 75 02 EB 41 3C  // .....~..I<.u..A<
    5980: 0A 75 10 E8 65 04 8B EC 89 4E 14 89 7E 00 8C 46  // .u..e....N..~..F
    5990: 1C EB 2F 3C 0B 75 02 EB 27 3C 10 75 0A E8 5A 04  // ../<.u..'<.u..Z.
    59A0: 8B EC 89 5E 0C EB 1B 3C 11 75 02 EB 13 3C 15 75  // ...^...<.u...<.u
    59B0: 0F E8 80 04 8B EC 89 5E 0C EB 07 B8 4F 01 EB 02  // .......^....O...
    59C0: 32 C0 8B EC 89 46 18 66 5F 66 5E 66 5D 66 5B 66  // 2....F.f_f^f]f[f
    59D0: 5A 66 59 66 58 07 1F C3 50 1E 2E 8E 1E 66 24 8C  // ZfYfX...P....f$.
    59E0: D8 A3 40 69 A3 50 69 A3 62 69 2E 8E 1E 5E 24 A3  // ..@i.Pi.bi...^$.
    59F0: AA 04 1F 58 CB 00 30 31 2E 30 30 00 56 45 53 41  // ...X..01.00.VESA
    5A00: 00 03 D0 01 00 00 01 00 00 00 00 00 00 00 00 03  // ................
    5A10: 13 20 ED 00 00 00 80 00 00 00 8E 59 00 00 B9 3F  // . .........Y...?
    5A20: 00 8B DF 83 C7 04 FC 66 33 C0 F3 66 AB 8B FB BE  // .......f3..f....
    5A30: 94 59 B9 22 00 F3 A4 06 1F 8C 4F 08 8C 47 10 8C  // .Y."......O..G..
    5A40: 4F 18 8C 4F 1C 8C 4F 20 83 C7 22 89 7F 0E 0E 1F  // O..O..O ..".....
    5A50: E8 8F DD B0 4F 32 E4 C3 56 51 57 B9 10 00 66 33  // ....O2..VQW...f3
    5A60: C0 F3 66 AB 5F 59 8C DB 06 1F C7 05 BB 00 C6 45  // ..f._Y.........E
    5A70: 02 07 C7 45 04 40 00 C7 45 06 40 00 C6 45 1B 06  // ...E.@..E.@..E..
    5A80: C6 45 18 01 C6 45 1A 01 C6 45 1E 01 66 C7 45 3E  // .E...E...E..f.E>
    5A90: 00 84 D7 17 8E DB E8 5D D6 66 0B C0 0F 84 E1 00  // .......].f......
    5AA0: 06 1F 66 89 45 28 8C C8 66 C1 E0 10 B8 4D 5D 66  // ..f.E(..f....M]f
    5AB0: 89 45 0C 81 F9 FF 81 0F 84 C2 00 80 E5 03 B2 01  // .E..............
    5AC0: 53 8E DB BE 80 4C E8 3B DB 5B 06 1F 0F 84 B1 00  // S....L.;.[......
    5AD0: 53 E8 B7 DD 66 89 45 12 C7 45 16 08 10 8D 5C 0C  // S...f.E..E....\.
    5AE0: E8 8E E8 66 89 45 1F 66 89 45 36 8D 5C 10 E8 80  // ...f.E.f.E6.\...
    5AF0: E8 66 89 45 23 66 89 45 3A 8D 5C 08 E8 72 E8 0A  // .f.E#f.E:.\..r..
    5B00: C0 75 03 5B EB 7B E8 82 DD 66 C1 E8 10 3D 58 02  // .u.[.{...f...=X.
    5B10: 74 0D 3D 5E 01 74 08 77 0A C6 45 17 08 EB 04 C6  // t.=^.t.w..E.....
    5B20: 45 17 0E 2E A1 60 24 89 45 08 8D 5C 04 E8 41 E8  // E....`$.E..\..A.
    5B30: 66 8B C8 66 C1 E9 10 D3 E0 89 45 10 89 45 32 B0  // f..f......E..E2.
    5B40: 08 D2 E0 88 45 19 8D 5C 14 E8 25 E8 5B 3D 00 03  // ....E..\..%.[=..
    5B50: 77 2F 53 8B D8 B8 00 03 33 D2 F7 F3 5B FE C8 88  // w/S.....3...[...
    5B60: 45 1D 88 45 35 88 45 34 8E DB 57 53 BE 80 4C E8  // E..E5.E4..WS..L.
    5B70: ED D5 5B 5F 0B C9 75 05 06 1F 83 25 FE 32 E4 EB  // ..[_..u....%.2..
    5B80: 02 B4 03 B0 4F 8E DB 5E C3 00 81 FB FF 81 74 68  // ....O..^......th
    5B90: 0A FF 75 04 8B C3 EB 21 F6 C7 08 75 61 8B CB B2  // ..u....!...ua...
    5BA0: 01 BE 20 4C E8 5D DA 74 55 E8 BE DC 0A C0 75 0E  // .. L.].tU.....u.
    5BB0: 66 C1 E8 10 80 E7 80 0A C7 E8 D5 02 EB 3A E8 12  // f............:..
    5BC0: D8 74 06 E8 A1 D6 E8 8D D1 BE 20 4C E8 64 D5 74  // .t........ L.d.t
    5BD0: 2D E8 A5 00 E8 2C 00 66 BB 20 4C 00 4C E8 81 DC  // -....,.f. L.L...
    5BE0: BE 00 4C E8 84 DC 66 C1 E8 10 8B D8 32 C0 F6 C7  // ..L...f.....2...
    5BF0: 80 74 02 B0 40 E8 94 D5 B0 4F 32 E4 EB 04 B0 4F  // .t..@....O2....O
    5C00: B4 03 C3 56 06 33 C0 8E C0 BE 20 4C E8 7C DC 8B  // ...V.3.... L.|..
    5C10: C8 66 C1 E8 10 8B D0 C1 E9 03 26 89 0E 4A 04 C1  // .f........&..J..
    5C20: EA 04 FE CA 26 88 16 84 04 26 C6 06 51 04 00 26  // ....&....&..Q..&
    5C30: C6 06 50 04 00 26 C6 06 49 04 62 26 C7 06 4C 04  // ..P..&..I.b&..L.
    5C40: 00 A0 26 C6 06 85 04 10 26 C7 06 0C 01 19 73 8C  // ..&.....&.....s.
    5C50: C8 26 A3 0E 01 07 5E C3 01 0F 00 0A 00 00 00 00  // .&....^.........
    5C60: 00 40 05 0F FF 00 01 02 03 04 05 06 07 08 09 0A  // .@..............
    5C70: 0B 0C 0D 0E 0F 01 00 0F 00 FC BA C4 03 B8 00 01  // ................
    5C80: EF B9 04 00 B4 01 BE F0 5B AC 86 E0 EF 8A E0 FE  // ........[.......
    5C90: C4 E2 F6 B8 00 03 EF B9 09 00 BA CE 03 32 E4 BE  // .............2..
    5CA0: F4 5B 8A C4 EE AC 42 EE 4A FE C4 E2 F5 BA DA 03  // .[....B.J.......
    5CB0: EC B9 14 00 BA C0 03 32 E4 BE FD 5B 8A C4 EE AC  // .......2...[....
    5CC0: EE FE C4 E2 F7 C3 BE 00 4C E8 9E DB 66 C1 E8 10  // ........L...f...
    5CD0: 8B D8 E8 6E DB 75 05 E8 5A DB 75 04 B8 4F 00 C3  // ...n.u..Z.u..O..
    5CE0: B8 4F 03 C3 E8 5C DB 74 53 BE 00 4C 80 FB 00 74  // .O...\.tS..L...t
    5CF0: 18 80 FB 01 75 05 E8 9A DB EB 1D 80 FB 02 75 10  // ....u.........u.
    5D00: 8B C1 E8 4D DB D3 E8 8B C8 E8 27 D6 74 2E EB 08  // ...M......'.t...
    5D10: 80 FB 03 75 24 E8 F1 DA E8 37 DB 8B D8 D3 E3 50  // ...u$....7.....P
    5D20: 33 C0 BA 00 03 3B DA 77 05 BA FF FF EB 04 F7 F3  // 3....;.w........
    5D30: 8B D0 58 8B C8 B8 4F 00 C3 32 C0 C3 B0 4F B4 03  // ..X...O..2...O..
    5D40: C3 00 0A DB 75 07 8A EF E8 F0 D6 EB 05 E8 D5 D6  // ....u...........
    5D50: 8A F8 B0 4F 32 E4 C3 00 E8 E8 DA 74 2C BE 00 4C  // ...O2......t,..L
    5D60: E8 07 DB 66 C1 E8 10 F6 C4 40 75 1D 0A FF 75 05  // ...f.....@u...u.
    5D70: E8 1E 00 EB 0F 80 FF 01 75 14 BB 13 00 E8 BF E5  // ........u.......
    5D80: D1 E8 8B D0 B0 4F 32 E4 C3 B0 4F B4 03 C3 32 C0  // .....O2...O...2.
    5D90: C3 52 53 66 50 81 E2 FF 02 D1 E2 8B C2 40 66 C1  // .RSfP........@f.
    5DA0: E0 10 8B C2 BB 13 00 E8 F0 E4 BB 12 00 E8 EA E4  // ................
    5DB0: 66 58 5B 5A C3 9C 1E 06 66 50 66 51 66 52 66 53  // fX[Z....fPfQfRfS
    5DC0: 66 55 66 56 66 57 0E 1F E8 08 E6 E8 8A FF E8 27  // fUfVfW.........'
    5DD0: E6 8B EC 89 56 10 89 46 18 66 5F 66 5E 66 5D 66  // ....V..F.f_f^f]f
    5DE0: 5B 66 5A 66 59 66 58 07 1F 9D CB 0E 07 BF 1C A1  // [fZfYfX.........
    5DF0: 2E 8B 0E 1A A1 B8 4F 00 C3 00 0A DB 75 06 B7 04  // ......O.....u...
    5E00: B3 10 EB 26 80 FB 01 75 14 E8 C7 D5 75 21 53 B1  // ...&...u....u!S.
    5E10: 01 0A FF 74 02 B1 00 E8 E1 D4 5B EB 0D 80 FB 02  // ...t......[.....
    5E20: 75 0D E8 F4 D5 8A F8 C0 E7 02 B0 4F 32 E4 C3 B8  // u..........O2...
    5E30: 4F 03 C3 00 80 E3 01 0A DB 75 05 BB 02 01 EB 0E  // O........u......
    5E40: E8 90 D5 75 0E 33 C0 53 E8 17 C9 5B 74 05 B0 4F  // ...u.3.S...[t..O
    5E50: 32 E4 C3 B0 4F B4 03 C3 80 FC 1D 72 03 CD 42 C3  // 2...O......r..B.
    5E60: 1E 06 66 50 66 51 66 52 66 53 66 55 66 56 66 57  // ..fPfQfRfSfUfVfW
    5E70: 0E 1F 50 0F B6 C4 D1 E0 8B F0 58 2E FF 94 3A 5E  // ..P.......X...:^
    5E80: 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F  // f_f^f]f[fZfYfX..
    5E90: C3 0E 1F 50 0F B6 C4 D1 E0 8B F0 58 2E FF 94 3A  // ...P.......X...:
    5EA0: 5E C3 74 5E 84 97 9D 97 BA 97 67 5F BD 8E EF 8E  // ^.t^......g_....
    5EB0: 62 8F E5 8F 73 91 77 91 80 94 51 95 D4 95 3B 96  // b...s.w...Q...;.
    5EC0: D6 97 38 98 E1 9A 80 61 28 9F 28 5E 28 5E 28 5E  // ..8....a(.(^(^(^
    5ED0: 28 5E 28 5E 28 5E F8 9F FB 83 4F 85 2E 8E 1E 5E  // (^(^(^....O....^
    5EE0: 24 80 26 87 04 F3 50 8A E0 80 E4 7F E8 C4 01 3B  // $.&...P........;
    5EF0: D3 75 02 58 C3 BA CC 03 EC B2 B4 B1 30 26 F6 47  // .u.X........0&.G
    5F00: 09 01 74 0C B2 D4 B1 20 A8 01 75 49 B5 09 EB 06  // ..t.... ..uI....
    5F10: A8 01 74 41 B5 0B 53 E8 6A 41 0A FF 5B 75 0B 80  // ..tA..S.jA..[u..
    5F20: 26 88 04 F0 08 2E 88 04 EB 2B 58 80 0E 87 04 08  // &........+X.....
    5F30: 80 26 10 04 CF 08 0E 10 04 89 16 63 04 C7 06 85  // .&.........c....
    5F40: 04 08 00 C6 06 84 04 18 C7 06 0C 01 06 6B 8C 0E  // .............k..
    5F50: 0E 01 CD 42 C3 80 26 10 04 CF 08 0E 10 04 58 53  // ...B..&.......XS
    5F60: 50 0E 1F 33 C9 8A C8 E8 69 D4 74 06 E8 F8 D2 E8  // P..3....i.t.....
    5F70: E4 CD B2 08 BE 40 4C E8 8A D6 BE 40 4C E8 B3 D1  // .....@L....@L...
    5F80: 58 5B 0F 84 6E FF 2E 8E 1E 5E 24 0E 07 E8 13 29  // X[..n....^$....)
    5F90: 0E 1F 53 66 BB 40 4C 00 4C E8 C5 D8 BE 00 4C B0  // ..Sf.@L.L.....L.
    5FA0: 20 E8 E8 D1 5B 2E 8E 1E 5E 24 0E 07 E8 1C 2E E8  //  ...[...^$......
    5FB0: 24 00 E8 28 3D E8 D1 01 E8 8E 01 E8 AE 3E 0E 1F  // $..(=........>..
    5FC0: BE 00 4C B0 10 E8 C4 D1 E8 F7 2D E8 EF 2D C3 8B  // ..L.......-..-..
    5FD0: EC C6 46 1B 00 C3 E8 2F 00 E8 0A 00 E8 BD 00 E8  // ..F..../........
    5FE0: 52 00 E8 5C 0A C3 53 83 C3 0A 8B 16 63 04 B9 19  // R..\..S.....c...
    5FF0: 00 B8 11 30 EF 32 C0 26 8A 27 EF 43 FE C0 E2 F7  // ...0.2.&.'.C....
    6000: 5B 80 C2 06 32 C0 EE C3 53 BA C4 03 83 C3 05 B9  // [...2...S.......
    6010: 04 00 B0 01 26 8A 27 3C 01 75 03 80 CC 20 EF 43  // ....&.'<.u... .C
    6020: FE C0 E2 F0 5B 26 8A 47 09 BA C2 03 EE B2 C4 B8  // ....[&.G........
    6030: 00 03 EF C3 8B F3 83 C6 23 BA DA 03 26 F6 47 09  // ........#...&.G.
    6040: 01 75 02 B2 BA F6 06 89 04 08 74 1D 83 C6 10 EC  // .u........t.....
    6050: B9 04 00 B4 10 B2 C0 80 FC 11 74 07 8A C4 EE 26  // ..........t....&
    6060: 8A 04 EE 46 FE C4 E2 EF C3 53 EC 8B DE B9 14 00  // ...F.....S......
    6070: 32 E4 B2 C0 8A C4 EE FE C4 26 8A 07 EE 43 E2 F4  // 2........&...C..
    6080: 8A C4 EE 32 C0 EE 1E 06 E8 49 2D 0B ED 74 09 1F  // ...2.....I-..t..
    6090: 1E B9 10 00 F3 A4 46 A4 07 1F 5B C3 53 83 C3 37  // ......F...[.S..7
    60A0: B9 09 00 32 C0 BA CE 03 26 8A 27 EF 43 FE C0 E2  // ...2....&.'.C...
    60B0: F7 5B C3 BB 3E 63 0E 07 8B D3 0A E4 7D 01 C3 E8  // .[..>c......}...
    60C0: 01 00 C3 33 F6 80 FC 03 7F 3C 4A F6 06 89 04 10  // ...3.....<J.....
    60D0: 75 20 A0 88 04 24 0F 3C 02 7E 24 3C 08 74 20 3C  // u ...$.<.~$<.t <
    60E0: 06 74 1C 3C 07 74 18 B0 40 F6 E4 03 D8 81 C3 00  // .t.<.t..@.......
    60F0: 04 C3 B0 40 D0 EC F6 E4 03 D8 81 C3 80 04 C3 B0  // ...@............
    6100: 40 F6 E4 03 D8 C3 80 FC 07 75 11 F6 06 89 04 10  // @........u......
    6110: 75 05 81 C3 00 01 C3 81 C3 00 05 C3 BF C0 60 BE  // u.............`.
    6120: E1 60 33 C9 E8 4E 00 C3 04 80 00 05 80 00 06 C0  // .`3..N..........
    6130: 00 0D 80 02 0E C0 02 0F 80 03 10 C0 03 11 40 05  // ..............@.
    6140: 12 80 05 13 C0 05 62 40 01 53 8A 1E 49 04 80 FB  // ......b@.S..I...
    6150: 07 7F 10 32 FF D1 E3 2E 8B 87 FD 60 A2 65 04 88  // ...2.......`.e..
    6160: 26 66 04 5B C3 2C 30 28 30 2D 30 29 30 2A 30 2E  // &f.[.,0(0-0)0*0.
    6170: 30 1E 3F 29 30 2E 38 25 75 07 2E 03 5D 01 33 F6  // 0.?)0.8%u...].3.
    6180: C3 83 C7 03 3B FE 75 ED C3 1E 06 2E 8E 1E 5E 24  // ....;.u.......^$
    6190: F6 06 87 04 80 75 49 83 3E 4C 04 00 74 42 A0 49  // .....uI.>L..tB.I
    61A0: 04 B9 00 20 2E 8B 3E 64 24 26 F6 47 33 01 75 0E  // ... ..>d$&.G3.u.
    61B0: 26 F6 47 09 01 75 1B 2E 8B 3E 62 24 EB 14 3C 06  // &.G..u...>b$..<.
    61C0: 7E 0B 2E 8B 3E 60 24 26 8A 67 37 B5 40 66 33 C0  // ~...>`$&.g7.@f3.
    61D0: EB 06 66 B8 20 07 20 07 8E C7 66 33 FF F3 66 AB  // ..f. . ...f3..f.
    61E0: 80 26 87 04 7F 07 1F C3 2E 8E 1E 5E 24 80 FB 10  // .&.........^$...
    61F0: 75 03 E9 7A 01 80 FB 20 75 03 E9 9B 01 80 FB 32  // u..z... u......2
    6200: 75 1F BA CC 03 0A C0 75 09 EC 0C 02 B2 C2 EE E9  // u......u........
    6210: F3 00 FE C8 0F 85 F3 00 EC 24 FD B2 C2 EE E9 E4  // .........$......
    6220: 00 80 FB 35 75 28 3C 80 75 08 80 0E 89 04 40 E9  // ...5u(<.u.....@.
    6230: D3 00 F6 06 89 04 40 0F 84 D0 00 0A C0 0F 84 CA  // ......@.........
    6240: 00 FE C8 75 06 E8 98 07 E9 BA 00 E9 BD 00 80 FB  // ...u............
    6250: 30 74 03 E9 96 00 50 E8 2A 3E 8A EF BA CC 03 EC  // 0t....P.*>......
    6260: 8A C8 58 0A C0 75 30 B7 08 F6 C1 01 75 12 0A ED  // ..X..u0.....u...
    6270: 75 0B A0 10 04 24 30 3C 30 75 10 B7 02 E9 8B 00  // u....$0<0u......
    6280: A0 10 04 24 30 3C 30 75 02 B7 02 80 26 89 04 6F  // ...$0<0u....&..o
    6290: 80 0E 89 04 80 EB 36 3C 01 75 41 80 26 89 04 6F  // ......6<.uA.&..o
    62A0: B7 09 F6 C1 01 75 15 B7 0B A0 10 04 24 30 3C 30  // .....u......$0<0
    62B0: 74 1B B7 09 0A ED 74 15 B7 05 EB 11 A0 10 04 24  // t.....t........$
    62C0: 30 3C 30 75 08 B7 0B 0A ED 74 02 B7 03 8A 1E 88  // 0<0u.....t......
    62D0: 04 80 E3 F0 0A DF 88 1E 88 04 EB 29 3C 02 75 2B  // ...........)<.u+
    62E0: 80 26 89 04 6F 80 0E 89 04 10 EB B4 80 FB 31 75  // .&..o.........1u
    62F0: 1B 0A C0 74 0B 3C 01 75 0C 80 0E 89 04 08 EB 05  // ...t.<.u........
    6300: 80 26 89 04 F7 8B EC C6 46 1A 12 C3 80 FB 33 75  // .&......F.....3u
    6310: 16 3C 00 74 0B 3C 01 75 EC 80 26 89 04 FD EB E5  // .<.t.<.u..&.....
    6320: 80 0E 89 04 02 EB DE 80 FB 34 75 17 3C 00 75 07  // .........4u.<.u.
    6330: 80 26 87 04 FE EB CE 3C 01 75 07 80 0E 87 04 01  // .&.....<.u......
    6340: EB C3 C3 80 FB 36 75 26 BB 20 FF 3C 01 74 09 BB  // .....6u&. .<.t..
    6350: 00 DF 3C 00 74 02 EB AD E8 02 00 EB A8 9C FA BA  // ..<.t...........
    6360: C4 03 B0 01 EE 42 EC 22 C7 0A C3 EE 9D C3 C3 B3  // .....B."........
    6370: 03 B7 00 BA CC 03 EC A8 01 75 02 B7 01 A0 88 04  // .........u......
    6380: 8A E0 B1 04 D2 EC 25 0F 0F 8B C8 8B EC 89 5E 0E  // ......%.......^.
    6390: 89 4E 16 C6 46 1A 12 C3 9C FA C7 06 14 00 E8 88  // .N..F...........
    63A0: 8C 0E 16 00 9D C3 28 18 08 00 08 09 03 00 02 63  // ......(........c
    63B0: 2D 27 28 90 2B A0 BF 1F 00 C7 06 07 00 00 00 00  // -'(.+...........
    63C0: 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02 03 04 05 06  // ................
    63D0: 07 10 11 12 13 14 15 16 17 08 00 0F 00 00 00 00  // ................
    63E0: 00 00 10 0E 00 FF 50 18 08 00 10 01 03 00 02 63  // ......P........c
    63F0: 5F 4F 50 82 55 81 BF 1F 00 C7 06 07 00 00 00 00  // _OP.U...........
    6400: 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02 03 04 05 06  // ...(............
    6410: 07 10 11 12 13 14 15 16 17 08 00 0F 00 00 00 00  // ................
    6420: 00 00 10 0E 00 FF 28 18 08 00 40 09 03 00 02 63  // ......(...@....c
    6430: 2D 27 28 90 2B 80 BF 1F 00 C1 00 00 00 00 00 00  // -'(.+...........
    6440: 9C 8E 8F 14 00 96 B9 A2 FF 00 13 15 17 02 04 06  // ................
    6450: 07 10 11 12 13 14 15 16 17 01 00 03 00 00 00 00  // ................
    6460: 00 00 30 0F 00 FF 50 18 08 00 40 01 01 00 06 63  // ..0...P...@....c
    6470: 5F 4F 50 82 54 80 BF 1F 00 C1 00 00 00 00 00 00  // _OP.T...........
    6480: 9C 8E 8F 28 00 96 B9 C2 FF 00 17 17 17 17 17 17  // ...(............
    6490: 17 17 17 17 17 17 17 17 17 01 00 01 00 00 00 00  // ................
    64A0: 00 00 00 0D 00 FF 50 18 0E 00 10 00 03 00 03 A6  // ......P.........
    64B0: 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C 00 00 00 00  // _OP.U....M......
    64C0: 83 85 5D 28 0D 63 BA A3 FF 00 08 08 08 08 08 08  // ..](.c..........
    64D0: 08 10 18 18 18 18 18 18 18 0E 00 0F 08 00 00 00  // ................
    64E0: 00 00 10 0A 00 FF 50 1D 10 00 A0 01 0F 00 0A E3  // ......P.........
    64F0: 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00  // _OP.T..>.@......
    6500: EA 8C DF 50 00 E7 04 E3 FF 00 01 02 03 04 05 06  // ...P............
    6510: 07 08 09 0A 0B 0C 0D 0E 0F 01 00 0F 00 10 00 00  // ................
    6520: 00 00 40 05 0F FF 00 05 11 1C 08 0B 14 28 0E 18  // ..@..........(..
    6530: 2D 32 20 24 38 3F 00 05 08 0B 0E 11 14 18 1C 20  // -2 $8?......... 
    6540: 24 28 2D 32 38 3F 07 0C 10 15 1A 18 16 15 13 1C  // $(-28?..........
    6550: 25 2F 38 33 2E 2A 25 27 29 2A 2C 23 19 10 23 25  // %/83.*%')*,#..#%
    6560: 27 2A 2C 2B 2A 29 29 2D 32 37 3B 39 37 34 32 33  // '*,+*))-27;97423
    6570: 34 35 35 31 2C 27 2F 30 32 33 34 34 33 33 32 35  // 4551,'/023443325
    6580: 38 3A 3D 3C 3A 39 38 38 39 39 3A 37 34 31 03 05  // 8:=<:98899:741..
    6590: 07 09 0B 0B 0A 09 08 0D 11 15 19 17 15 13 11 11  // ................
    65A0: 12 13 14 0F 0B 07 10 10 12 13 14 13 13 13 12 14  // ................
    65B0: 16 18 1A 19 18 17 16 17 17 17 18 15 14 11 15 15  // ................
    65C0: 16 17 17 17 17 17 16 18 19 1A 1B 1B 1A 19 19 19  // ................
    65D0: 19 19 1A 18 17 16 02 03 04 05 07 06 06 05 05 07  // ................
    65E0: 0A 0C 0E 0D 0C 0B 09 0A 0A 0B 0B 09 06 04 09 09  // ................
    65F0: 0A 0B 0B 0B 0B 0B 0A 0C 0D 0E 0F 0F 0E 0D 0D 0D  // ................
    6600: 0D 0D 0E 0C 0B 0A 0C 0C 0C 0D 0D 0D 0D 0D 0C 0D  // ................
    6610: 0E 0F 0F 0F 0F 0E 0E 0E 0E 0E 0E 0E 0D 0C 00 00  // ................
    6620: 00 00 00 00 00 00 28 18 08 00 20 09 0F 00 06 63  // ......(... ....c
    6630: 2D 27 28 90 2B 80 BF 1F 00 C0 00 00 00 00 00 00  // -'(.+...........
    6640: 9C 8E 8F 14 00 96 B9 E3 FF 00 01 02 03 04 05 06  // ................
    6650: 07 10 11 12 13 14 15 16 17 01 00 0F 00 00 00 00  // ................
    6660: 00 00 00 05 0F FF 50 18 08 00 40 01 0F 00 06 63  // ......P...@....c
    6670: 5F 4F 50 82 54 80 BF 1F 00 C0 00 00 00 00 00 00  // _OP.T...........
    6680: 9C 8E 8F 28 00 96 B9 E3 FF 00 01 02 03 04 05 06  // ...(............
    6690: 07 10 11 12 13 14 15 16 17 01 00 0F 00 00 00 00  // ................
    66A0: 00 00 00 05 0F FF 00 05 11 1C 08 0B 25 28 02 07  // ............%(..
    66B0: 1B 20 0F 14 28 2C 0C 11 25 2A 14 1E 32 36 0F 13  // . ..(,..%*..26..
    66C0: 27 2C 1B 20 34 39 06 0B 1F 24 13 18 2C 30 09 0D  // ',. 49...$..,0..
    66D0: 21 26 15 1A 2E 33 13 17 2B 30 1F 24 38 3D 0E 18  // !&...3..+0.$8=..
    66E0: 2D 32 20 24 38 3F 00 05 11 1C 08 0B 14 18 00 05  // -2 $8?..........
    66F0: 11 1C 08 0B 14 18 0E 18 2D 32 20 24 38 3F 0E 18  // ........-2 $8?..
    6700: 2D 32 20 24 38 3F 00 05 11 1C 08 0B 14 18 00 05  // -2 $8?..........
    6710: 11 1C 08 0B 14 18 0E 18 2D 32 20 24 38 3F 0E 18  // ........-2 $8?..
    6720: 2D 32 20 24 38 3F 50 18 0E 00 80 01 0F 00 06 A2  // -2 $8?P.........
    6730: 5F 4F 50 82 54 80 BF 1F 00 40 00 00 00 00 00 00  // _OP.T....@......
    6740: 83 85 5D 28 0F 63 BA E3 FF 00 08 00 00 18 18 00  // ..](.c..........
    6750: 00 00 08 00 00 00 18 00 00 0B 00 05 00 00 00 00  // ................
    6760: 00 00 00 05 05 FF 50 18 0E 00 80 01 0F 00 06 A3  // ......P.........
    6770: 5F 4F 50 82 54 80 BF 1F 00 40 00 00 00 00 00 00  // _OP.T....@......
    6780: 83 85 5D 28 0F 63 BA E3 FF 00 01 02 03 04 05 14  // ..](.c..........
    6790: 07 38 39 3A 3B 3C 3D 3E 3F 01 00 0F 00 00 00 00  // .89:;<=>?.......
    67A0: 00 00 00 05 0F FF 28 18 0E 00 08 09 03 00 02 A3  // ......(.........
    67B0: 2D 27 28 90 2B A0 BF 1F 00 4D 0B 0C 00 00 00 00  // -'(.+....M......
    67C0: 83 85 5D 14 1F 63 BA A3 FF 00 01 02 03 04 05 14  // ..]..c..........
    67D0: 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00  // .89:;<=>?.......
    67E0: 00 00 10 0E 00 FF 50 18 0E 00 10 01 03 00 02 A3  // ......P.........
    67F0: 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C 00 00 00 00  // _OP.U....M......
    6800: 83 85 5D 28 1F 63 BA A3 FF 00 01 02 03 04 05 14  // ..](.c..........
    6810: 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00  // .89:;<=>?.......
    6820: 00 00 10 0E 00 FF 28 18 10 00 08 08 03 00 02 67  // ......(........g
    6830: 2D 27 28 90 2B A0 BF 1F 00 4F 0D 0E 00 00 00 00  // -'(.+....O......
    6840: 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02 03 04 05 14  // ................
    6850: 07 38 39 3A 3B 3C 3D 3E 3F 0C 00 0F 08 00 00 00  // .89:;<=>?.......
    6860: 00 00 10 0E 00 FF 50 18 10 00 10 00 03 00 02 67  // ......P........g
    6870: 5F 4F 50 82 55 81 BF 1F 00 4F 0D 0E 00 00 00 00  // _OP.U....O......
    6880: 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02 03 04 05 14  // ...(............
    6890: 07 38 39 3A 3B 3C 3D 3E 3F 0C 00 0F 08 00 00 00  // .89:;<=>?.......
    68A0: 00 00 10 0E 00 FF 50 18 10 00 10 00 03 00 02 66  // ......P........f
    68B0: 5F 4F 50 82 55 81 BF 1F 00 4F 0D 0E 00 00 00 00  // _OP.U....O......
    68C0: 9C 8E 8F 28 0F 96 B9 A3 FF 00 08 08 08 08 08 08  // ...(............
    68D0: 08 10 18 18 18 18 18 18 18 0E 00 0F 08 00 00 00  // ................
    68E0: 00 00 10 0A 00 FF 50 1D 10 00 A0 01 0F 00 06 E3  // ......P.........
    68F0: 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00  // _OP.T..>.@......
    6900: EA 8C DF 28 00 E7 04 C3 FF 00 3F 3F 3F 3F 3F 3F  // ...(......??????
    6910: 3F 3F 3F 3F 3F 3F 3F 3F 3F 01 00 0F 00 00 00 00  // ?????????.......
    6920: 00 00 00 05 01 FF 50 1D 10 00 A0 01 0F 00 06 E3  // ......P.........
    6930: 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00  // _OP.T..>.@......
    6940: EA 8C DF 28 00 E7 04 E3 FF 00 01 02 03 04 05 14  // ...(............
    6950: 07 38 39 3A 3B 3C 3D 3E 3F 01 00 0F 00 00 00 00  // .89:;<=>?.......
    6960: 00 00 00 05 0F FF 28 18 08 00 20 01 0F 00 0E 63  // ......(... ....c
    6970: 5F 4F 50 82 54 80 BF 1F 00 41 00 00 00 00 00 00  // _OP.T....A......
    6980: 9C 8E 8F 28 40 96 B9 A3 FF 00 01 02 03 04 05 06  // ...(@...........
    6990: 07 08 09 0A 0B 0C 0D 0E 0F 41 00 0F 00 00 00 00  // .........A......
    69A0: 00 00 40 05 0F FF 3E 63 00 C0 00 00 00 00 00 00  // ..@...>c........
    69B0: 00 00 00 00 00 00 5E 69 00 C0 00 00 00 00 00 00  // ......^i........
    69C0: 00 00 00 00 00 00 1A 00 F6 A0 00 C0 00 00 00 00  // ................
    69D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    69E0: 1E E8 10 00 2E 8E 1E 5E 24 E8 F8 36 E8 CF 36 E8  // .......^$..6..6.
    69F0: 70 1A 1F C3 2E 8E 1E 5E 24 C7 06 87 04 60 F9 C6  // p......^$....`..
    6A00: 06 8A 04 0B A0 89 04 0C 11 24 17 A2 89 04 B4 01  // .........$......
    6A10: E8 6D 1E A0 89 04 80 26 10 04 CF 80 0E 10 04 20  // .m.....&....... 
    6A20: C7 06 63 04 D4 03 0E 1F E8 89 C3 F7 C1 02 00 75  // ..c............u
    6A30: 03 E8 22 C3 C3 1E 2E 8E 1E 5E 24 0E 07 EB 00 1F  // .."......^$.....
    6A40: C3 F6 06 89 04 08 74 01 C3 53 BA C8 03 EC B0 FF  // ......t..S......
    6A50: B2 C6 EE B2 C8 80 3E 63 04 B4 75 2F BE BA 6A B9  // ......>c..u/..j.
    6A60: 40 00 33 DB 9C FA 8A C3 EE 8B FB C1 EF 03 83 E7  // @.3.............
    6A70: 03 03 FE 2E 8A 05 42 EE 2E 8A 45 04 EE 2E 8A 45  // ......B...E....E
    6A80: 08 EE FE C3 4A E2 DF 9D E9 85 00 26 8A 47 2B F6  // ....J......&.G+.
    6A90: 06 89 04 06 74 31 B9 F8 00 BF BE 64 3C 08 74 11  // ....t1.....d<.t.
    6AA0: B9 40 00 BF 3E 66 3C 38 74 07 3C 3F 74 03 BF 7E  // .@..>f<8t.<?t..~
    6AB0: 66 33 DB 9C FA 8A C3 EE 2E 8A 01 42 EE EE EE FE  // f3.........B....
    6AC0: C3 4A E2 F1 9D EB 49 3C 08 74 25 3C 38 74 2E 3C  // .J....I<.t%<8t.<
    6AD0: 3F 74 2A B9 08 00 33 DB 51 E8 46 D3 B9 08 00 F7  // ?t*...3.Q.F.....
    6AE0: C3 10 00 74 03 83 C7 18 E8 67 00 59 E2 EA EB 20  // ...t.....g.Y... 
    6AF0: E8 2F D3 B9 10 00 33 DB E8 57 00 EB 13 B9 40 00  // ./....3..W....@.
    6B00: 33 DB 51 E8 28 00 8A C3 E8 B7 2F FE C3 59 E2 F2  // 3.Q.(...../..Y..
    6B10: 5B C3 00 2A 00 2A 00 2A 00 2A 15 3F 15 3F 15 3F  // [..*.*.*.*.?.?.?
    6B20: 15 3F 00 2A 00 3F 00 2A 00 3F 00 2A 00 3F 8B FB  // .?.*.?.*.?.*.?..
    6B30: C1 EF 02 83 E7 0F 2E 8A B5 AA 6A 8B FB D1 EF 83  // ..........j.....
    6B40: E7 0F 2E 8A AD AA 6A 8B FB 83 E7 0F 2E 8A 8D AA  // ......j.........
    6B50: 6A C3 9C 8A C3 FA EE 2E 8A 05 42 EE 47 2E 8A 05  // j.........B.G...
    6B60: EE 47 2E 8A 05 EE 47 FE C3 4A E2 E7 9D C3 00 00  // .G....G..J......
    6B70: 00 00 00 00 00 00 7E 81 A5 81 BD 99 81 7E 7C FE  // ......~......~|.
    6B80: D6 BA C6 FE 7C 00 C6 EE FE FE 7C 38 10 00 10 38  // ....|.....|8...8
    6B90: 7C FE 7C 38 10 00 10 38 10 EE EE 10 38 00 38 7C  // |.|8...8....8.8|
    6BA0: FE FE 6C 10 38 00 00 18 3C 7E 3C 18 00 00 FF E7  // ..l.8...<~<.....
    6BB0: C3 81 C3 E7 FF FF 00 18 3C 66 66 3C 18 00 FF E7  // ........<ff<....
    6BC0: C3 99 99 C3 E7 FF 1E 0E 1E 36 78 CC CC 78 7E C3  // .........6x..x~.
    6BD0: C3 7E 18 7E 18 18 1E 1A 1E 18 18 70 F0 60 3E 3E  // .~.~.......p.`>>
    6BE0: 36 36 F6 66 1E 0C DB 3C 66 E7 66 3C DB 00 80 C0  // 66.f...<f.f<....
    6BF0: F0 F8 F0 C0 80 00 02 06 1E 3E 1E 06 02 00 18 3C  // .........>.....<
    6C00: 7E 18 7E 3C 18 00 66 66 66 66 66 00 66 00 7F DB  // ~.~<..fffff.f...
    6C10: 7B 3B 1B 1B 1B 00 3C 66 38 6C 6C 38 CC 78 00 00  // {;....<f8ll8.x..
    6C20: 00 00 FE FE FE 00 18 3C 7E 18 7E 3C 18 7E 18 3C  // .......<~.~<.~.<
    6C30: 7E 18 18 18 18 00 18 18 18 18 7E 3C 18 00 00 18  // ~.........~<....
    6C40: 1C FE 1C 18 00 00 00 30 70 FE 70 30 00 00 00 00  // .......0p.p0....
    6C50: C0 C0 C0 FE 00 00 00 24 66 FF 66 24 00 00 00 10  // .......$f.f$....
    6C60: 38 7C 7C FE 00 00 00 FE 7C 7C 38 10 00 00 00 00  // 8||.....||8.....
    6C70: 00 00 00 00 00 00 18 3C 3C 18 18 00 18 00 6C 6C  // .......<<.....ll
    6C80: 6C 00 00 00 00 00 6C 6C FE 6C FE 6C 6C 00 18 7E  // l.....ll.l.ll..~
    6C90: C0 7C 06 FC 18 00 00 C6 0C 18 30 60 C6 00 38 6C  // .|........0`..8l
    6CA0: 38 76 CC CC 76 00 18 18 30 00 00 00 00 00 18 30  // 8v..v...0......0
    6CB0: 60 60 60 30 18 00 60 30 18 18 18 30 60 00 00 EE  // ```0..`0...0`...
    6CC0: 7C FE 7C EE 00 00 00 18 18 7E 18 18 00 00 00 00  // |.|......~......
    6CD0: 00 00 18 18 30 00 00 00 00 FE 00 00 00 00 00 00  // ....0...........
    6CE0: 00 00 00 38 38 00 06 0C 18 30 60 C0 80 00 7C C6  // ...88....0`...|.
    6CF0: CE DE F6 E6 7C 00 18 78 18 18 18 18 7E 00 7C C6  // ....|..x....~.|.
    6D00: 0C 18 30 66 FE 00 7C C6 06 3C 06 C6 7C 00 0C 1C  // ..0f..|..<..|...
    6D10: 3C 6C FE 0C 0C 00 FE C0 FC 06 06 C6 7C 00 7C C6  // <l..........|.|.
    6D20: C0 FC C6 C6 7C 00 FE C6 06 0C 18 18 18 00 7C C6  // ....|.........|.
    6D30: C6 7C C6 C6 7C 00 7C C6 C6 7E 06 C6 7C 00 00 1C  // .|..|.|..~..|...
    6D40: 1C 00 00 1C 1C 00 00 18 18 00 00 18 18 30 0C 18  // .............0..
    6D50: 30 60 30 18 0C 00 00 00 FE 00 00 FE 00 00 60 30  // 0`0...........`0
    6D60: 18 0C 18 30 60 00 7C C6 06 0C 18 00 18 00 7C C6  // ...0`.|.......|.
    6D70: C6 DE DC C0 7E 00 38 6C C6 C6 FE C6 C6 00 FC 66  // ....~.8l.......f
    6D80: 66 7C 66 66 FC 00 3C 66 C0 C0 C0 66 3C 00 F8 6C  // f|ff..<f...f<..l
    6D90: 66 66 66 6C F8 00 FE C2 C0 F8 C0 C2 FE 00 FE 62  // fffl...........b
    6DA0: 60 7C 60 60 F0 00 7C C6 C0 C0 DE C6 7C 00 C6 C6  // `|``..|.....|...
    6DB0: C6 FE C6 C6 C6 00 3C 18 18 18 18 18 3C 00 3C 18  // ......<.....<.<.
    6DC0: 18 18 D8 D8 70 00 C6 CC D8 F0 D8 CC C6 00 F0 60  // ....p..........`
    6DD0: 60 60 60 62 FE 00 C6 EE FE D6 D6 C6 C6 00 C6 E6  // ```b............
    6DE0: E6 F6 DE CE C6 00 7C C6 C6 C6 C6 C6 7C 00 FC 66  // ......|.....|..f
    6DF0: 66 7C 60 60 F0 00 7C C6 C6 C6 C6 D6 7C 06 FC C6  // f|``..|.....|...
    6E00: C6 FC D8 CC C6 00 7C C6 C0 7C 06 C6 7C 00 7E 5A  // ......|..|..|.~Z
    6E10: 18 18 18 18 3C 00 C6 C6 C6 C6 C6 C6 7C 00 C6 C6  // ....<.......|...
    6E20: C6 C6 6C 38 10 00 C6 C6 D6 D6 FE EE C6 00 C6 6C  // ..l8...........l
    6E30: 38 38 38 6C C6 00 66 66 66 3C 18 18 3C 00 FE 86  // 888l..fff<..<...
    6E40: 0C 18 30 62 FE 00 7C 60 60 60 60 60 7C 00 C0 60  // ..0b..|`````|..`
    6E50: 30 18 0C 06 02 00 7C 0C 0C 0C 0C 0C 7C 00 10 38  // 0.....|.....|..8
    6E60: 6C C6 00 00 00 00 00 00 00 00 00 00 00 FF 30 30  // l.............00
    6E70: 18 00 00 00 00 00 00 00 78 0C 7C CC 7E 00 E0 60  // ........x.|.~..`
    6E80: 7C 66 66 66 FC 00 00 00 7C C6 C0 C6 7C 00 1C 0C  // |fff....|...|...
    6E90: 7C CC CC CC 7E 00 00 00 7C C6 FE C0 7C 00 1C 36  // |...~...|...|..6
    6EA0: 30 FC 30 30 78 00 00 00 76 CE C6 7E 06 7C E0 60  // 0.00x...v..~.|.`
    6EB0: 7C 66 66 66 E6 00 18 00 38 18 18 18 3C 00 0C 00  // |fff....8...<...
    6EC0: 1C 0C 0C 0C CC 78 E0 60 66 6C 78 6C E6 00 18 18  // .....x.`flxl....
    6ED0: 18 18 18 18 1C 00 00 00 6C FE D6 D6 C6 00 00 00  // ........l.......
    6EE0: DC 66 66 66 66 00 00 00 7C C6 C6 C6 7C 00 00 00  // .ffff...|...|...
    6EF0: DC 66 66 7C 60 F0 00 00 76 CC CC 7C 0C 1E 00 00  // .ff|`...v..|....
    6F00: DC 66 60 60 F0 00 00 00 7C C0 7C 06 7C 00 30 30  // .f``....|.|.|.00
    6F10: FC 30 30 36 1C 00 00 00 CC CC CC CC 76 00 00 00  // .006........v...
    6F20: C6 C6 6C 38 10 00 00 00 C6 C6 D6 FE 6C 00 00 00  // ..l8........l...
    6F30: C6 6C 38 6C C6 00 00 00 C6 C6 CE 76 06 7C 00 00  // .l8l.......v.|..
    6F40: FC 98 30 64 FC 00 0E 18 18 70 18 18 0E 00 18 18  // ..0d.....p......
    6F50: 18 00 18 18 18 00 70 18 18 0E 18 18 70 00 76 DC  // ......p.....p.v.
    6F60: 00 00 00 00 00 00 00 10 38 38 6C 6C FE 00 3C 66  // ........88ll..<f
    6F70: C0 66 3C 18 CC 78 00 C6 00 C6 C6 CE 76 00 0E 00  // .f<..x......v...
    6F80: 7C C6 FE C0 7C 00 7C C6 78 0C 7C CC 7E 00 C6 00  // |...|.|.x.|.~...
    6F90: 78 0C 7C CC 7E 00 E0 00 78 0C 7C CC 7E 00 38 38  // x.|.~...x.|.~.88
    6FA0: 78 0C 7C CC 7E 00 00 00 7C C0 7C 18 6C 38 7C C6  // x.|.~...|.|.l8|.
    6FB0: 7C C6 FE C0 7C 00 C6 00 7C C6 FE C0 7C 00 E0 00  // |...|...|...|...
    6FC0: 7C C6 FE C0 7C 00 66 00 38 18 18 18 3C 00 7C C6  // |...|.f.8...<.|.
    6FD0: 38 18 18 18 3C 00 00 00 38 18 18 18 3C 00 C6 38  // 8...<...8...<..8
    6FE0: 6C C6 FE C6 C6 00 38 38 00 7C C6 FE C6 00 0E 00  // l.....88.|......
    6FF0: FE C0 F8 C0 FE 00 00 00 6C 9A 7E D8 6E 00 7E D8  // ........l.~.n.~.
    7000: D8 FE D8 D8 DE 00 7C C6 00 7C C6 C6 7C 00 00 C6  // ......|..|..|...
    7010: 00 7C C6 C6 7C 00 00 E0 00 7C C6 C6 7C 00 7C C6  // .|..|....|..|.|.
    7020: 00 C6 C6 CE 76 00 00 E0 00 C6 C6 CE 76 00 18 00  // ....v.......v...
    7030: 3C 18 18 18 3C 00 C6 38 6C C6 C6 6C 38 00 C6 00  // <...<..8l..l8...
    7040: C6 C6 C6 C6 7C 00 00 18 7E D8 D8 7E 18 00 38 6C  // ....|...~..~..8l
    7050: 60 F0 66 F6 6C 00 C3 66 3C 7E 18 3C 18 00 3E 63  // `.f.l..f<~.<..>c
    7060: 38 0E 63 3E 00 1C 00 3E 61 3C 86 7C 00 1C 0E 00  // 8.c>...>a<.|....
    7070: 78 0C 7C CC 7E 00 1C 00 38 18 18 18 3C 00 00 0E  // x.|.~...8...<...
    7080: 00 7C C6 C6 7C 00 00 0E 00 CC CC DC 76 00 00 FC  // .|..|.......v...
    7090: 00 BC 66 66 E6 00 FE 00 C6 E6 F6 CE C6 00 3E 00  // ..ff..........>.
    70A0: 3E 60 67 63 3D 00 3E 00 76 CE C6 7E 06 7C 18 00  // >`gc=.>.v..~.|..
    70B0: 18 30 60 66 3C 00 00 00 00 7C 60 60 00 00 00 00  // .0`f<....|``....
    70C0: 00 7C 0C 0C 00 00 C0 CC D8 30 7C 36 0C 3E C0 CC  // .|.......0|6.>..
    70D0: D8 30 6C 3C 7E 0C 18 00 18 18 3C 3C 18 00 00 36  // .0l<~.....<<...6
    70E0: 6C D8 6C 36 00 00 00 D8 6C 36 6C D8 00 00 22 88  // l.l6....l6l...".
    70F0: 22 88 22 88 22 88 55 AA 55 AA 55 AA 55 AA DD 77  // ".".".U.U.U.U..w
    7100: DD 77 DD 77 DD 77 18 18 18 18 18 18 18 18 18 18  // .w.w.w..........
    7110: 18 18 F8 18 18 18 18 18 F8 18 F8 18 18 18 36 36  // ..............66
    7120: 36 36 F6 36 36 36 00 00 00 00 FE 36 36 36 00 00  // 66.666.....666..
    7130: F8 18 F8 18 18 18 36 36 F6 06 F6 36 36 36 36 36  // ......66...66666
    7140: 36 36 36 36 36 36 00 00 FE 06 F6 36 36 36 36 36  // 666666.....66666
    7150: F6 06 FE 00 00 00 36 36 36 36 FE 00 00 00 18 18  // ......6666......
    7160: F8 18 F8 00 00 00 00 00 00 00 F8 18 18 18 18 18  // ................
    7170: 18 18 1F 00 00 00 18 18 18 18 FF 00 00 00 00 00  // ................
    7180: 00 00 FF 18 18 18 18 18 18 18 1F 18 18 18 00 00  // ................
    7190: 00 00 FF 00 00 00 18 18 18 18 FF 18 18 18 18 18  // ................
    71A0: 1F 18 1F 18 18 18 36 36 36 36 37 36 36 36 36 36  // ......6666766666
    71B0: 37 30 3F 00 00 00 00 00 3F 30 37 36 36 36 36 36  // 70?.....?0766666
    71C0: F7 00 FF 00 00 00 00 00 FF 00 F7 36 36 36 36 36  // ...........66666
    71D0: 37 30 37 36 36 36 00 00 FF 00 FF 00 00 00 36 36  // 707666........66
    71E0: F7 00 F7 36 36 36 18 18 FF 00 FF 00 00 00 36 36  // ...666........66
    71F0: 36 36 FF 00 00 00 00 00 FF 00 FF 18 18 18 00 00  // 66..............
    7200: 00 00 FF 36 36 36 36 36 36 36 3F 00 00 00 18 18  // ...6666666?.....
    7210: 1F 18 1F 00 00 00 00 00 1F 18 1F 18 18 18 00 00  // ................
    7220: 00 00 3F 36 36 36 36 36 36 36 FF 36 36 36 18 18  // ..?6666666.666..
    7230: FF 18 FF 18 18 18 18 18 18 18 F8 00 00 00 00 00  // ................
    7240: 00 00 1F 18 18 18 FF FF FF FF FF FF FF FF 00 00  // ................
    7250: 00 00 FF FF FF FF F0 F0 F0 F0 F0 F0 F0 F0 0F 0F  // ................
    7260: 0F 0F 0F 0F 0F 0F FF FF FF FF 00 00 00 00 00 00  // ................
    7270: 66 DC D8 DC 66 00 00 78 CC F8 CC C6 CC 00 00 FE  // f...f..x........
    7280: 62 60 60 60 E0 00 00 FE 6C 6C 6C 6C 6C 00 FE C6  // b```....lllll...
    7290: 60 30 60 C6 FE 00 00 7E D8 CC CC D8 70 00 00 66  // `0`....~....p..f
    72A0: 66 66 66 7C C0 00 00 76 DC 18 18 18 38 00 FE 38  // fff|...v....8..8
    72B0: 6C C6 6C 38 FE 00 38 6C C6 FE C6 6C 38 00 38 6C  // l.l8..8l...l8.8l
    72C0: C6 C6 6C 6C EE 00 3E 60 38 66 C6 CC 78 00 00 00  // ..ll..>`8f..x...
    72D0: 7E DB DB 7E 00 00 06 7C DE F6 E6 7C C0 00 38 60  // ~..~...|...|..8`
    72E0: C0 F8 C0 60 38 00 7C C6 C6 C6 C6 C6 C6 00 00 FE  // ...`8.|.........
    72F0: 00 FE 00 FE 00 00 18 18 7E 18 18 00 7E 00 30 18  // ........~...~.0.
    7300: 0C 18 30 00 7E 00 0C 18 30 18 0C 00 7E 00 0C 1E  // ..0.~...0...~...
    7310: 18 18 18 18 18 18 18 18 18 18 18 78 30 00 00 00  // ...........x0...
    7320: 18 00 7E 00 18 00 00 76 DC 00 76 DC 00 00 7C C6  // ..~....v..v...|.
    7330: C6 7C 00 00 00 00 00 00 00 18 18 00 00 00 00 00  // .|..............
    7340: 00 00 18 00 00 00 1F 18 18 18 F8 38 18 00 D8 6C  // ...........8...l
    7350: 6C 6C 00 00 00 00 70 D8 30 F8 00 00 00 00 00 00  // ll....p.0.......
    7360: 7C 7C 7C 7C 00 00 00 00 00 00 00 00 00 00 1D 00  // ||||............
    7370: 00 00 00 24 66 FF 66 24 00 00 00 00 00 00 00 10  // ...$f.f$........
    7380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7390: 00 00 00 7E 81 A5 81 81 BD 99 81 81 7E 00 00 00  // ...~........~...
    73A0: 00 00 00 7C FE FE D6 FE FE BA C6 FE 7C 00 00 00  // ...|........|...
    73B0: 00 00 00 00 6C EE FE FE FE FE 7C 38 10 00 00 00  // ....l.....|8....
    73C0: 00 00 00 00 10 38 7C FE 7C 38 10 00 00 00 00 00  // .....8|.|8......
    73D0: 00 00 00 00 10 38 38 10 6C EE 6C 10 38 00 00 00  // .....88.l.l.8...
    73E0: 00 00 00 10 38 7C 7C FE FE FE 6C 10 38 00 00 00  // ....8||...l.8...
    73F0: 00 00 00 00 00 00 18 3C 3C 3C 18 00 00 00 00 00  // .......<<<......
    7400: 00 FF FF FF FF FF E7 C3 C3 C3 E7 FF FF FF FF FF  // ................
    7410: FF 00 00 00 00 18 3C 66 66 66 3C 18 00 00 00 00  // ......<fff<.....
    7420: 00 FF FF FF FF E7 C3 99 99 99 C3 E7 FF FF FF FF  // ................
    7430: FF 00 00 1E 0E 1E 36 78 CC CC CC CC 78 00 00 00  // ......6x....x...
    7440: 00 00 00 3C 66 66 66 3C 18 7E 18 18 18 00 00 00  // ...<fff<.~......
    7450: 00 00 00 1E 1A 1E 18 18 18 18 78 F8 70 00 00 00  // ..........x.p...
    7460: 00 00 00 3E 36 3E 36 36 76 F6 66 0E 1E 0C 00 00  // ...>6>66v.f.....
    7470: 00 00 00 18 DB 7E 3C 66 66 3C 7E DB 18 00 00 00  // .....~<ff<~.....
    7480: 00 00 00 00 80 E0 F0 FC FE FC F0 E0 80 00 00 00  // ................
    7490: 00 00 00 00 02 0E 3E 7E FE 7E 3E 0E 02 00 00 00  // ......>~.~>.....
    74A0: 00 00 00 18 3C 7E 18 18 18 18 7E 3C 18 00 00 00  // ....<~....~<....
    74B0: 00 00 00 66 66 66 66 66 66 66 00 66 66 00 00 00  // ...fffffff.ff...
    74C0: 00 00 00 7F DB DB DB DB 7B 1B 1B 1B 1B 00 00 00  // ........{.......
    74D0: 00 00 00 7C C6 C6 60 7C F6 DE 7C 0C C6 C6 7C 00  // ...|..`|..|...|.
    74E0: 00 00 00 00 00 00 00 00 00 FE FE FE FE 00 00 00  // ................
    74F0: 00 00 00 18 3C 7E 18 18 18 7E 3C 18 7E 00 00 00  // ....<~...~<.~...
    7500: 00 00 00 18 3C 7E 18 18 18 18 18 18 18 00 00 00  // ....<~..........
    7510: 00 00 00 18 18 18 18 18 18 18 7E 3C 18 00 00 00  // ..........~<....
    7520: 00 00 00 00 00 00 0C 0E FF 0E 0C 00 00 00 00 00  // ................
    7530: 00 00 00 00 00 00 30 70 FE 70 30 00 00 00 00 00  // ......0p.p0.....
    7540: 00 00 00 00 00 00 00 C0 C0 C0 FE 00 00 00 00 00  // ................
    7550: 00 00 00 00 00 00 24 66 FF 66 24 00 00 00 00 00  // ......$f.f$.....
    7560: 00 00 00 00 10 38 38 38 7C 7C FE FE 00 00 00 00  // .....888||......
    7570: 00 00 00 00 FE FE 7C 7C 7C 38 38 10 00 00 00 00  // ......|||88.....
    7580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7590: 00 00 00 18 3C 3C 3C 3C 18 18 00 18 18 00 00 00  // ....<<<<........
    75A0: 00 00 36 36 36 36 14 00 00 00 00 00 00 00 00 00  // ..6666..........
    75B0: 00 00 00 6C 6C 6C FE 6C 6C FE 6C 6C 6C 00 00 00  // ...lll.ll.lll...
    75C0: 00 00 00 18 18 7C C6 C0 78 3C 06 C6 7C 18 18 00  // .....|..x<..|...
    75D0: 00 00 00 00 00 00 62 66 0C 18 30 66 C6 00 00 00  // ......bf..0f....
    75E0: 00 00 00 38 6C 38 30 76 7E CC CC CC 76 00 00 00  // ...8l80v~...v...
    75F0: 00 00 0C 0C 0C 18 00 00 00 00 00 00 00 00 00 00  // ................
    7600: 00 00 00 0C 18 30 30 30 30 30 30 18 0C 00 00 00  // .....000000.....
    7610: 00 00 00 30 18 0C 0C 0C 0C 0C 0C 18 30 00 00 00  // ...0........0...
    7620: 00 00 00 00 00 00 6C 38 FE 38 6C 00 00 00 00 00  // ......l8.8l.....
    7630: 00 00 00 00 00 00 18 18 7E 18 18 00 00 00 00 00  // ........~.......
    7640: 00 00 00 00 00 00 00 00 00 00 0C 0C 0C 18 00 00  // ................
    7650: 00 00 00 00 00 00 00 00 FE 00 00 00 00 00 00 00  // ................
    7660: 00 00 00 00 00 00 00 00 00 00 00 18 18 00 00 00  // ................
    7670: 00 00 00 00 00 02 06 0C 18 30 60 C0 80 00 00 00  // .........0`.....
    7680: 00 00 00 7C C6 C6 CE DE F6 E6 C6 C6 7C 00 00 00  // ...|........|...
    7690: 00 00 00 18 78 18 18 18 18 18 18 18 7E 00 00 00  // ....x.......~...
    76A0: 00 00 00 7C C6 C6 06 0C 18 30 60 C6 FE 00 00 00  // ...|.....0`.....
    76B0: 00 00 00 7C C6 06 06 3C 06 06 06 C6 7C 00 00 00  // ...|...<....|...
    76C0: 00 00 00 0C 1C 3C 6C CC CC FE 0C 0C 1E 00 00 00  // .....<l.........
    76D0: 00 00 00 FE C0 C0 C0 FC 06 06 06 C6 7C 00 00 00  // ............|...
    76E0: 00 00 00 7C C6 C0 C0 FC C6 C6 C6 C6 7C 00 00 00  // ...|........|...
    76F0: 00 00 00 FE C6 06 0C 18 30 30 30 30 30 00 00 00  // ........00000...
    7700: 00 00 00 7C C6 C6 C6 7C C6 C6 C6 C6 7C 00 00 00  // ...|...|....|...
    7710: 00 00 00 7C C6 C6 C6 C6 7E 06 06 C6 7C 00 00 00  // ...|....~...|...
    7720: 00 00 00 00 00 00 0C 0C 00 00 0C 0C 00 00 00 00  // ................
    7730: 00 00 00 00 00 00 0C 0C 00 00 0C 0C 0C 18 00 00  // ................
    7740: 00 00 00 00 0C 18 30 60 C0 60 30 18 0C 00 00 00  // ......0`.`0.....
    7750: 00 00 00 00 00 00 00 FE 00 FE 00 00 00 00 00 00  // ................
    7760: 00 00 00 00 60 30 18 0C 06 0C 18 30 60 00 00 00  // ....`0.....0`...
    7770: 00 00 00 7C C6 C6 0C 18 18 18 00 18 18 00 00 00  // ...|............
    7780: 00 00 00 7C C6 C6 C6 DE DE DE DC C0 7E 00 00 00  // ...|........~...
    7790: 00 00 00 38 6C C6 C6 C6 FE C6 C6 C6 C6 00 00 00  // ...8l...........
    77A0: 00 00 00 FC 66 66 66 7C 66 66 66 66 FC 00 00 00  // ....fff|ffff....
    77B0: 00 00 00 3C 66 C2 C0 C0 C0 C0 C2 66 3C 00 00 00  // ...<f......f<...
    77C0: 00 00 00 F8 6C 66 66 66 66 66 66 6C F8 00 00 00  // ....lffffffl....
    77D0: 00 00 00 FE 66 60 64 7C 64 60 60 66 FE 00 00 00  // ....f`d|d``f....
    77E0: 00 00 00 FE 66 60 64 7C 64 60 60 60 F0 00 00 00  // ....f`d|d```....
    77F0: 00 00 00 7C C6 C6 C0 C0 C0 CE C6 C6 7C 00 00 00  // ...|........|...
    7800: 00 00 00 C6 C6 C6 C6 FE C6 C6 C6 C6 C6 00 00 00  // ................
    7810: 00 00 00 3C 18 18 18 18 18 18 18 18 3C 00 00 00  // ...<........<...
    7820: 00 00 00 3C 18 18 18 18 18 18 D8 D8 70 00 00 00  // ...<........p...
    7830: 00 00 00 C6 C6 CC D8 F0 F0 D8 CC C6 C6 00 00 00  // ................
    7840: 00 00 00 F0 60 60 60 60 60 60 62 66 FE 00 00 00  // ....``````bf....
    7850: 00 00 00 C6 C6 EE EE FE D6 D6 D6 C6 C6 00 00 00  // ................
    7860: 00 00 00 C6 C6 E6 E6 F6 DE CE CE C6 C6 00 00 00  // ................
    7870: 00 00 00 7C C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00  // ...|........|...
    7880: 00 00 00 FC 66 66 66 66 7C 60 60 60 F0 00 00 00  // ....ffff|```....
    7890: 00 00 00 7C C6 C6 C6 C6 C6 C6 D6 D6 7C 06 00 00  // ...|........|...
    78A0: 00 00 00 FC 66 66 66 7C 78 6C 66 66 E6 00 00 00  // ....fff|xlff....
    78B0: 00 00 00 7C C6 C0 C0 70 1C 06 06 C6 7C 00 00 00  // ...|...p....|...
    78C0: 00 00 00 7E 5A 18 18 18 18 18 18 18 3C 00 00 00  // ...~Z.......<...
    78D0: 00 00 00 C6 C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00  // ............|...
    78E0: 00 00 00 C6 C6 C6 C6 C6 C6 C6 6C 38 10 00 00 00  // ..........l8....
    78F0: 00 00 00 C6 C6 C6 D6 D6 D6 FE EE C6 C6 00 00 00  // ................
    7900: 00 00 00 C6 C6 C6 6C 38 38 6C C6 C6 C6 00 00 00  // ......l88l......
    7910: 00 00 00 66 66 66 66 66 3C 18 18 18 3C 00 00 00  // ...fffff<...<...
    7920: 00 00 00 FE C6 86 0C 18 30 60 C2 C6 FE 00 00 00  // ........0`......
    7930: 00 00 00 7C 60 60 60 60 60 60 60 60 7C 00 00 00  // ...|````````|...
    7940: 00 00 00 00 00 80 C0 60 30 18 0C 06 02 00 00 00  // .......`0.......
    7950: 00 00 00 7C 0C 0C 0C 0C 0C 0C 0C 0C 7C 00 00 00  // ...|........|...
    7960: 00 00 10 38 6C C6 00 00 00 00 00 00 00 00 00 00  // ...8l...........
    7970: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF 00  // ................
    7980: 00 00 18 18 18 0C 00 00 00 00 00 00 00 00 00 00  // ................
    7990: 00 00 00 00 00 00 78 0C 7C CC CC DC 76 00 00 00  // ......x.|...v...
    79A0: 00 00 00 E0 60 60 7C 66 66 66 66 66 FC 00 00 00  // ....``|fffff....
    79B0: 00 00 00 00 00 00 7C C6 C0 C0 C0 C6 7C 00 00 00  // ......|.....|...
    79C0: 00 00 00 1C 0C 0C 7C CC CC CC CC CC 7E 00 00 00  // ......|.....~...
    79D0: 00 00 00 00 00 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ......|.....|...
    79E0: 00 00 00 1C 36 30 30 FC 30 30 30 30 78 00 00 00  // ....600.0000x...
    79F0: 00 00 00 00 00 00 76 CE C6 C6 CE 76 06 C6 7C 00  // ......v....v..|.
    7A00: 00 00 00 E0 60 60 7C 66 66 66 66 66 E6 00 00 00  // ....``|fffff....
    7A10: 00 00 00 18 18 00 38 18 18 18 18 18 3C 00 00 00  // ......8.....<...
    7A20: 00 00 00 0C 0C 00 1C 0C 0C 0C 0C 0C CC CC 78 00  // ..............x.
    7A30: 00 00 00 E0 60 60 66 66 6C 78 6C 66 E6 00 00 00  // ....``fflxlf....
    7A40: 00 00 00 18 18 18 18 18 18 18 18 18 1C 00 00 00  // ................
    7A50: 00 00 00 00 00 00 6C FE D6 D6 C6 C6 C6 00 00 00  // ......l.........
    7A60: 00 00 00 00 00 00 DC 66 66 66 66 66 66 00 00 00  // .......ffffff...
    7A70: 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ......|.....|...
    7A80: 00 00 00 00 00 00 DC 66 66 66 66 7C 60 60 F0 00  // .......ffff|``..
    7A90: 00 00 00 00 00 00 76 CC CC CC CC 7C 0C 0C 1E 00  // ......v....|....
    7AA0: 00 00 00 00 00 00 DC 66 60 60 60 60 F0 00 00 00  // .......f````....
    7AB0: 00 00 00 00 00 00 7C C6 C0 7C 06 C6 7C 00 00 00  // ......|..|..|...
    7AC0: 00 00 00 30 30 30 FC 30 30 30 30 36 1C 00 00 00  // ...000.00006....
    7AD0: 00 00 00 00 00 00 CC CC CC CC CC CC 76 00 00 00  // ............v...
    7AE0: 00 00 00 00 00 00 C6 C6 C6 C6 6C 38 10 00 00 00  // ..........l8....
    7AF0: 00 00 00 00 00 00 C6 C6 D6 D6 D6 FE 6C 00 00 00  // ............l...
    7B00: 00 00 00 00 00 00 C6 C6 6C 38 6C C6 C6 00 00 00  // ........l8l.....
    7B10: 00 00 00 00 00 00 C6 C6 C6 C6 CE 76 06 C6 7C 00  // ...........v..|.
    7B20: 00 00 00 00 00 00 FE 86 0C 18 30 62 FE 00 00 00  // ..........0b....
    7B30: 00 00 00 0E 18 18 18 70 18 18 18 18 0E 00 00 00  // .......p........
    7B40: 00 00 00 18 18 18 18 00 18 18 18 18 18 00 00 00  // ................
    7B50: 00 00 00 70 18 18 18 0E 18 18 18 18 70 00 00 00  // ...p........p...
    7B60: 00 00 00 76 DC 00 00 00 00 00 00 00 00 00 00 00  // ...v............
    7B70: 00 00 00 00 00 00 10 38 38 6C 6C FE 00 00 00 00  // .......88ll.....
    7B80: 00 00 00 3C 66 C0 C0 C0 C6 66 3C 18 0C CC 38 00  // ...<f....f<...8.
    7B90: 00 00 00 C6 00 00 C6 C6 C6 C6 C6 CE 76 00 00 00  // ............v...
    7BA0: 00 00 0C 18 30 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ....0.|.....|...
    7BB0: 00 00 30 78 CC 00 78 0C 7C CC CC DC 76 00 00 00  // ..0x..x.|...v...
    7BC0: 00 00 00 CC 00 00 78 0C 7C CC CC DC 76 00 00 00  // ......x.|...v...
    7BD0: 00 00 60 30 18 00 78 0C 7C CC CC DC 76 00 00 00  // ..`0..x.|...v...
    7BE0: 00 00 38 6C 38 00 78 0C 7C CC CC DC 76 00 00 00  // ..8l8.x.|...v...
    7BF0: 00 00 00 00 00 7C C6 C0 C0 C6 7C 18 0C 6C 38 00  // .....|....|..l8.
    7C00: 00 00 30 78 CC 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ..0x..|.....|...
    7C10: 00 00 00 CC 00 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ......|.....|...
    7C20: 00 00 30 18 0C 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ..0...|.....|...
    7C30: 00 00 00 66 00 00 38 18 18 18 18 18 3C 00 00 00  // ...f..8.....<...
    7C40: 00 00 18 3C 66 00 38 18 18 18 18 18 3C 00 00 00  // ...<f.8.....<...
    7C50: 00 00 00 00 00 00 38 18 18 18 18 18 3C 00 00 00  // ......8.....<...
    7C60: 00 00 C6 00 38 6C C6 C6 C6 FE C6 C6 C6 00 00 00  // ....8l..........
    7C70: 00 38 6C 38 00 38 6C C6 C6 FE C6 C6 C6 00 00 00  // .8l8.8l.........
    7C80: 00 0C 18 30 00 FE 60 60 7C 60 60 60 FE 00 00 00  // ...0..``|```....
    7C90: 00 00 00 00 00 66 DB 1B 7F D8 D8 DF 76 00 00 00  // .....f......v...
    7CA0: 00 00 00 7E D8 D8 D8 D8 FE D8 D8 D8 DE 00 00 00  // ...~............
    7CB0: 00 00 30 78 CC 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ..0x..|.....|...
    7CC0: 00 00 00 C6 00 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ......|.....|...
    7CD0: 00 00 30 18 0C 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ..0...|.....|...
    7CE0: 00 00 30 78 CC 00 C6 C6 C6 C6 C6 CE 76 00 00 00  // ..0x........v...
    7CF0: 00 00 60 30 18 00 C6 C6 C6 C6 C6 CE 76 00 00 00  // ..`0........v...
    7D00: 00 00 18 00 3C 18 18 18 18 18 18 18 3C 00 00 00  // ....<.......<...
    7D10: 00 00 C6 00 7C C6 C6 C6 C6 C6 C6 C6 7C 00 00 00  // ....|.......|...
    7D20: 00 00 C6 00 C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00  // ............|...
    7D30: 00 00 00 18 18 7C C6 C0 C0 C6 7C 18 18 00 00 00  // .....|....|.....
    7D40: 00 00 38 6C 60 60 F0 60 60 60 66 F6 6C 00 00 00  // ..8l``.```f.l...
    7D50: 00 00 66 66 66 66 3C 18 7E 18 3C 18 18 00 00 00  // ..ffff<.~.<.....
    7D60: 00 00 00 3E 63 63 30 1C 06 63 63 3E 00 1C 00 00  // ...>cc0..cc>....
    7D70: 00 00 00 00 00 00 3E 63 38 0E 63 3E 00 1C 00 00  // ......>c8.c>....
    7D80: 00 00 0C 18 30 00 78 0C 7C CC CC DC 76 00 00 00  // ....0.x.|...v...
    7D90: 00 00 0C 18 30 00 38 18 18 18 18 18 3C 00 00 00  // ....0.8.....<...
    7DA0: 00 00 0C 18 30 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ....0.|.....|...
    7DB0: 00 00 18 30 60 00 CC CC CC CC CC DC 76 00 00 00  // ...0`.......v...
    7DC0: 00 00 00 76 DC 00 BC 66 66 66 66 66 E6 00 00 00  // ...v...fffff....
    7DD0: 00 00 76 DC 00 C6 C6 E6 F6 DE CE C6 C6 00 00 00  // ..v.............
    7DE0: 00 00 21 1E 00 1E 33 60 60 67 63 33 1D 00 00 00  // ..!...3``gc3....
    7DF0: 00 00 42 3C 00 3B 66 66 66 3E 06 66 3C 00 00 00  // ..B<.;fff>.f<...
    7E00: 00 00 00 30 30 00 30 30 30 60 C6 C6 7C 00 00 00  // ...00.000`..|...
    7E10: 00 00 00 00 00 00 00 00 7E 60 60 60 00 00 00 00  // ........~```....
    7E20: 00 00 00 00 00 00 00 00 7E 06 06 06 00 00 00 00  // ........~.......
    7E30: 00 00 60 60 62 66 6C 18 30 60 DC 36 0C 18 3E 00  // ..``bfl.0`.6..>.
    7E40: 00 00 60 60 62 66 6C 18 36 6E DE 36 7E 06 06 00  // ..``bfl.6n.6~...
    7E50: 00 00 00 18 18 00 18 18 3C 3C 3C 3C 18 00 00 00  // ........<<<<....
    7E60: 00 00 00 00 00 00 36 6C D8 6C 36 00 00 00 00 00  // ......6l.l6.....
    7E70: 00 00 00 00 00 00 D8 6C 36 6C D8 00 00 00 00 00  // .......l6l......
    7E80: 00 11 44 11 44 11 44 11 44 11 44 11 44 11 44 11  // ..D.D.D.D.D.D.D.
    7E90: 44 AA 55 AA 55 AA 55 AA 55 AA 55 AA 55 AA 55 AA  // D.U.U.U.U.U.U.U.
    7EA0: 55 DD 77 DD 77 DD 77 DD 77 DD 77 DD 77 DD 77 DD  // U.w.w.w.w.w.w.w.
    7EB0: 77 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // w...............
    7EC0: 18 18 18 18 18 18 18 18 F8 18 18 18 18 18 18 18  // ................
    7ED0: 18 18 18 18 18 18 F8 18 F8 18 18 18 18 18 18 18  // ................
    7EE0: 18 36 36 36 36 36 36 36 F6 36 36 36 36 36 36 36  // .6666666.6666666
    7EF0: 36 00 00 00 00 00 00 00 FE 36 36 36 36 36 36 36  // 6........6666666
    7F00: 36 00 00 00 00 00 F8 18 F8 18 18 18 18 18 18 18  // 6...............
    7F10: 18 36 36 36 36 36 F6 06 F6 36 36 36 36 36 36 36  // .66666...6666666
    7F20: 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  // 6666666666666666
    7F30: 36 00 00 00 00 00 FE 06 F6 36 36 36 36 36 36 36  // 6........6666666
    7F40: 36 36 36 36 36 36 F6 06 FE 00 00 00 00 00 00 00  // 666666..........
    7F50: 00 36 36 36 36 36 36 36 FE 00 00 00 00 00 00 00  // .6666666........
    7F60: 00 18 18 18 18 18 F8 18 F8 00 00 00 00 00 00 00  // ................
    7F70: 00 00 00 00 00 00 00 00 F8 18 18 18 18 18 18 18  // ................
    7F80: 18 18 18 18 18 18 18 18 1F 00 00 00 00 00 00 00  // ................
    7F90: 00 18 18 18 18 18 18 18 FF 00 00 00 00 00 00 00  // ................
    7FA0: 00 00 00 00 00 00 00 00 FF 18 18 18 18 18 18 18  // ................
    7FB0: 18 18 18 18 18 18 18 18 1F 18 18 18 18 18 18 18  // ................
    7FC0: 18 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    7FD0: 00 18 18 18 18 18 18 18 FF 18 18 18 18 18 18 18  // ................
    7FE0: 18 18 18 18 18 18 1F 18 1F 18 18 18 18 18 18 18  // ................
    7FF0: 18 36 36 36 36 36 36 36 37 36 36 36 36 36 36 36  // .666666676666666
    8000: 36 36 36 36 36 36 37 30 3F 00 00 00 00 00 00 00  // 66666670?.......
    8010: 00 00 00 00 00 00 3F 30 37 36 36 36 36 36 36 36  // ......?076666666
    8020: 36 36 36 36 36 36 F7 00 FF 00 00 00 00 00 00 00  // 666666..........
    8030: 00 00 00 00 00 00 FF 00 F7 36 36 36 36 36 36 36  // .........6666666
    8040: 36 36 36 36 36 36 37 30 37 36 36 36 36 36 36 36  // 6666667076666666
    8050: 36 00 00 00 00 00 FF 00 FF 00 00 00 00 00 00 00  // 6...............
    8060: 00 36 36 36 36 36 F7 00 F7 36 36 36 36 36 36 36  // .66666...6666666
    8070: 36 18 18 18 18 18 FF 00 FF 00 00 00 00 00 00 00  // 6...............
    8080: 00 36 36 36 36 36 36 36 FF 00 00 00 00 00 00 00  // .6666666........
    8090: 00 00 00 00 00 00 FF 00 FF 18 18 18 18 18 18 18  // ................
    80A0: 18 00 00 00 00 00 00 00 FF 36 36 36 36 36 36 36  // .........6666666
    80B0: 36 36 36 36 36 36 36 36 3F 00 00 00 00 00 00 00  // 66666666?.......
    80C0: 00 18 18 18 18 18 1F 18 1F 00 00 00 00 00 00 00  // ................
    80D0: 00 00 00 00 00 00 1F 18 1F 18 18 18 18 18 18 18  // ................
    80E0: 18 00 00 00 00 00 00 00 3F 36 36 36 36 36 36 36  // ........?6666666
    80F0: 36 36 36 36 36 36 36 36 FF 36 36 36 36 36 36 36  // 66666666.6666666
    8100: 36 18 18 18 18 18 FF 18 FF 18 18 18 18 18 18 18  // 6...............
    8110: 18 18 18 18 18 18 18 18 F8 00 00 00 00 00 00 00  // ................
    8120: 00 00 00 00 00 00 00 00 1F 18 18 18 18 18 18 18  // ................
    8130: 18 FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    8140: FF 00 00 00 00 00 00 00 00 FF FF FF FF FF FF FF  // ................
    8150: FF F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0  // ................
    8160: F0 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F  // ................
    8170: 0F FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00  // ................
    8180: 00 00 00 00 00 76 DC D8 D8 D8 D8 DC 76 00 00 00  // .....v......v...
    8190: 00 00 00 78 CC CC D8 FC C6 C6 C6 C6 CC 00 00 00  // ...x............
    81A0: 00 00 00 FE 66 62 60 60 60 60 60 60 60 00 00 00  // ....fb```````...
    81B0: 00 00 00 00 00 00 FE 6C 6C 6C 6C 6C 6C 00 00 00  // .......llllll...
    81C0: 00 00 00 FE C6 62 30 18 18 30 62 C6 FE 00 00 00  // .....b0..0b.....
    81D0: 00 00 00 00 00 00 7E D8 CC CC CC D8 70 00 00 00  // ......~.....p...
    81E0: 00 00 00 00 00 66 66 66 66 66 7C 60 C0 80 00 00  // .....fffff|`....
    81F0: 00 00 00 00 00 00 76 DC 18 18 18 18 18 00 00 00  // ......v.........
    8200: 00 00 00 FE 38 38 6C C6 C6 6C 38 38 FE 00 00 00  // ....88l..l88....
    8210: 00 00 00 00 38 6C C6 C6 FE C6 C6 6C 38 00 00 00  // ....8l.....l8...
    8220: 00 00 00 38 6C C6 C6 C6 C6 6C 6C 6C EE 00 00 00  // ...8l....lll....
    8230: 00 00 00 3E 60 60 3C 66 C6 C6 C6 CC 78 00 00 00  // ...>``<f....x...
    8240: 00 00 00 00 00 00 7E DB DB DB 7E 00 00 00 00 00  // ......~...~.....
    8250: 00 00 00 02 06 7C CE DE F6 F6 7C 60 C0 00 00 00  // .....|....|`....
    8260: 00 00 00 00 1C 30 60 60 7C 60 60 30 1C 00 00 00  // .....0``|``0....
    8270: 00 00 00 7C C6 C6 C6 C6 C6 C6 C6 C6 C6 00 00 00  // ...|............
    8280: 00 00 00 00 00 FE 00 00 FE 00 00 FE 00 00 00 00  // ................
    8290: 00 00 00 00 00 18 18 7E 18 18 00 00 7E 00 00 00  // .......~....~...
    82A0: 00 00 00 30 18 0C 06 0C 18 30 00 00 7E 00 00 00  // ...0.....0..~...
    82B0: 00 00 00 0C 18 30 60 30 18 0C 00 00 7E 00 00 00  // .....0`0....~...
    82C0: 00 00 00 00 00 0C 1E 1A 18 18 18 18 18 18 18 18  // ................
    82D0: 18 18 18 18 18 18 18 18 18 18 18 58 78 30 00 00  // ...........Xx0..
    82E0: 00 00 00 00 00 18 18 00 7E 00 18 18 00 00 00 00  // ........~.......
    82F0: 00 00 00 00 00 00 00 76 DC 00 76 DC 00 00 00 00  // .......v..v.....
    8300: 00 00 00 78 CC CC 78 00 00 00 00 00 00 00 00 00  // ...x..x.........
    8310: 00 00 00 00 00 00 00 00 18 18 00 00 00 00 00 00  // ................
    8320: 00 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00  // ................
    8330: 00 00 00 1F 18 18 18 18 18 D8 D8 78 38 18 00 00  // ...........x8...
    8340: 00 00 00 D8 6C 6C 6C 6C 6C 00 00 00 00 00 00 00  // ....lllll.......
    8350: 00 00 00 70 D8 18 30 60 F8 00 00 00 00 00 00 00  // ...p..0`........
    8360: 00 00 00 00 00 00 7E 7E 7E 7E 7E 7E 00 00 00 00  // ......~~~~~~....
    8370: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    8380: 00 1D 00 00 00 00 00 24 66 FF 66 24 00 00 00 00  // .......$f.f$....
    8390: 00 00 2F 00 00 00 01 03 06 0C 18 30 60 C0 80 00  // ../........0`...
    83A0: 00 00 00 30 00 00 7E C3 C3 C3 DB DB C3 C3 C3 7E  // ...0..~........~
    83B0: 00 00 00 00 4D 00 00 C3 C3 E7 FF FF DB DB C3 C3  // ....M...........
    83C0: C3 00 00 00 00 54 00 00 FF 99 18 18 18 18 18 18  // .....T..........
    83D0: 18 3C 00 00 00 00 56 00 00 C3 C3 C3 C3 C3 C3 C3  // .<....V.........
    83E0: 66 3C 18 00 00 00 00 57 00 00 C3 C3 C3 C3 DB DB  // f<.....W........
    83F0: DB DB FF 66 00 00 00 00 58 00 00 C3 C3 C3 66 3C  // ...f....X.....f<
    8400: 3C 66 C3 C3 C3 00 00 00 00 59 00 00 C3 C3 C3 C3  // <f.......Y......
    8410: 66 3C 18 18 18 3C 00 00 00 00 5C 00 00 00 80 C0  // f<...<....\.....
    8420: 60 30 18 0C 06 03 01 00 00 00 00 6D 00 00 00 00  // `0.........m....
    8430: 00 66 FF DB DB DB C3 C3 00 00 00 00 76 00 00 00  // .f..........v...
    8440: 00 00 C3 C3 C3 C3 66 3C 18 00 00 00 00 77 00 00  // ......f<.....w..
    8450: 00 00 00 C3 C3 DB DB DB FF 66 00 00 00 00 00 00  // .........f......
    8460: 19 73 C3 0B DB 74 03 E9 46 01 57 32 C0 B9 40 00  // .s...t..F.W2..@.
    8470: F3 AA 5F BB E6 A0 26 89 1D 26 8C 4D 02 2E 8E 1E  // .._...&..&.M....
    8480: 5E 24 57 BE 49 04 B9 1E 00 83 C7 04 FC 8A 04 26  // ^$W.I..........&
    8490: 88 05 46 47 E2 F7 5F A0 84 04 FE C0 26 88 45 22  // ..FG.._.....&.E"
    84A0: A1 85 04 26 89 45 23 57 E8 D9 1B 5F 26 88 5D 25  // ...&.E#W..._&.]%
    84B0: 26 88 7D 26 8A 1E 49 04 E8 FC 05 74 05 80 FB 13  // &.}&..I....t....
    84C0: 7F 1D 32 FF D1 E3 2E 8A 87 BE A0 32 E4 0A C0 74  // ..2........2...t
    84D0: 01 40 26 89 45 27 2E 8A 87 BF A0 26 88 45 29 A1  // .@&.E'.....&.E).
    84E0: 85 04 8A 16 84 04 FE C2 F6 E2 B2 00 3D C8 00 7E  // ............=..~
    84F0: 15 B2 01 3D 5E 01 7E 0E B2 02 3D 90 01 7E 07 B2  // ...=^.~...=..~..
    8500: 03 3D E0 01 7E 00 26 88 55 2A 8A 26 87 04 8A C4  // .=..~.&.U*.&....
    8510: 24 01 C0 E0 04 80 E4 02 D0 E4 0A E0 80 F4 10 A0  // $...............
    8520: 89 04 24 0A 0A E0 E8 94 08 B2 C0 B0 30 EE 42 EC  // ..$.........0.B.
    8530: 24 08 C0 E0 02 0A C4 0C 01 26 88 45 2D B0 03 26  // $........&.E-..&
    8540: 88 45 31 E8 77 08 1E 06 32 D2 C4 1E A8 04 8C C1  // .E1.w...2.......
    8550: 8C CE 3B CE 74 34 26 C5 77 04 8C D9 0B F1 74 03  // ..;.t4&.w.....t.
    8560: 80 CA 10 26 C5 77 0C 8C D9 0B F1 74 03 80 CA 08  // ...&.w.....t....
    8570: 26 C5 77 08 8C D9 0B F1 74 03 80 CA 04 26 C5 77  // &.w.....t....&.w
    8580: 10 8C D9 0B F1 74 03 80 CA 01 07 1F 26 88 55 32  // .....t......&.U2
    8590: B0 03 BA C4 03 E8 E4 04 8A E0 C0 EC 02 8A D4 8A  // ................
    85A0: F2 D0 EE 81 E2 04 04 25 03 03 0B C2 26 89 45 2B  // .......%....&.E+
    85B0: 8B EC C6 46 1A 1B C3 0A C0 74 0F FE C8 74 36 FE  // ...F.....t...t6.
    85C0: C8 74 56 8B EC C6 46 1A 00 C3 B8 20 00 F6 C1 01  // .tV...F.... ....
    85D0: 74 03 83 C0 60 F6 C1 02 74 03 83 C0 3A F6 C1 04  // t...`...t...:...
    85E0: 74 03 05 03 03 83 C0 3F C1 E8 06 8B EC 89 46 0E  // t......?......F.
    85F0: C6 46 1A 1C C3 8B FB 83 C7 20 F6 C1 01 74 03 E8  // .F....... ...t..
    8600: 85 00 F6 C1 02 74 03 E8 EF 00 F6 C1 04 74 03 E8  // .....t.......t..
    8610: F8 01 8B EC C6 46 1A 1C C3 F6 C1 01 74 06 E8 16  // .....F......t...
    8620: 15 E8 25 01 F6 C1 02 74 03 E8 85 01 F6 C1 04 74  // ..%....t.......t
    8630: 03 E8 12 02 EB DC 8A C4 EE 42 EC AA FE C4 4A E2  // .........B....J.
    8640: F5 C3 E8 6B 04 BD C0 03 B9 15 00 32 E4 EC 87 EA  // ...k.......2....
    8650: 8A C4 EE 42 EC AA FE C4 4A 87 EA E2 F0 EC 87 EA  // ...B....J.......
    8660: B0 20 EE C3 26 8A 05 88 04 47 46 E2 F7 C3 26 8A  // . ..&....GF...&.
    8670: 25 EF 47 FE C0 E2 F7 C3 B2 C0 8A C4 EE 26 8A 05  // %.G..........&..
    8680: 47 FE C4 EE E2 F4 C3 9C FA 51 57 8B C7 2B C3 26  // G........QW..+.&
    8690: 89 07 8B F7 E8 0A 04 EC 26 88 44 01 26 89 54 41  // ........&.D.&.TA
    86A0: B2 CE EC 26 88 44 02 B2 CC EC 26 88 44 09 B2 CA  // ...&.D....&.D...
    86B0: EC 26 88 44 04 B2 C4 EC 26 88 04 83 C7 05 B9 04  // .&.D....&.......
    86C0: 00 B4 01 E8 70 FF 26 8A 04 EE 8B FE 83 C7 0A 26  // ....p.&........&
    86D0: 8B 54 41 32 E4 B9 19 00 E8 5B FF 26 8A 44 01 EE  // .TA2.....[.&.D..
    86E0: E8 5F FF B2 CE 32 E4 B9 09 00 E8 49 FF 26 8A 44  // ._...2.....I.&.D
    86F0: 02 EE 5F 59 83 C7 60 9D C3 9C FA 8B C7 2B C3 26  // .._Y..`......+.&
    8700: 89 47 02 51 57 2E 8E 1E 5E 24 A0 10 04 24 30 AA  // .G.QW...^$...$0.
    8710: BE 49 04 B9 1E 00 F3 A4 BE 84 04 B1 07 F3 A4 BE  // .I..............
    8720: A8 04 B1 04 F3 A4 BE 14 00 B1 04 F3 A4 BE 74 00  // ..............t.
    8730: B1 04 F3 A4 BE 7C 00 B1 04 F3 A4 BE 0C 01 B1 04  // .....|..........
    8740: F3 A4 5F 59 83 C7 3A 9D C3 9C FA 26 8B 3F 03 FB  // .._Y..:....&.?..
    8750: 8B F7 51 8B FE 83 C7 05 BA C4 03 B8 00 01 EF B0  // ..Q.............
    8760: 01 B9 04 00 E8 07 FF 47 B2 C2 26 8A 44 09 EE B2  // .......G..&.D...
    8770: C4 B8 00 03 EF 26 8A 04 EE 26 8B 54 41 B8 11 00  // .....&...&.TA...
    8780: EF B1 19 32 C0 E8 E6 FE 26 8A 44 01 EE 80 C2 06  // ...2....&.D.....
    8790: 26 8A 44 04 EE EC B1 15 32 E4 E8 DB FE B0 20 EE  // &.D.....2..... .
    87A0: B1 09 32 C0 B2 CE E8 C5 FE 26 8A 44 02 EE 59 9D  // ..2......&.D..Y.
    87B0: C3 9C FA 26 8B 7F 02 03 FB 06 51 2E 8E 1E 5E 24  // ...&......Q...^$
    87C0: 26 8A 05 80 26 10 04 CF 08 06 10 04 47 BE 49 04  // &...&.......G.I.
    87D0: B9 1E 00 E8 8E FE BE 84 04 B1 07 E8 86 FE BE A8  // ................
    87E0: 04 B1 04 E8 7E FE BE 14 00 B1 04 E8 76 FE BE 74  // ....~.......v..t
    87F0: 00 B1 04 E8 6E FE BE 7C 00 B1 04 E8 66 FE BE 0C  // ....n..|....f...
    8800: 01 B1 04 E8 5E FE 59 07 9D C3 9C FA 8B C7 2B C3  // ....^.Y.......+.
    8810: 26 89 47 04 E8 A6 05 B2 C0 B0 34 EE 42 EC 26 88  // &.G.......4.B.&.
    8820: 05 BA C8 03 EC 26 88 45 01 50 4A 4A EC 26 88 45  // .....&.E.PJJ.&.E
    8830: 02 83 C7 03 B9 00 03 42 32 C0 EE 42 42 EC AA E2  // .......B2..BB...
    8840: FC 58 4A EE 9D C3 9C FA 26 8B 77 04 03 F3 E8 6C  // .XJ.....&.w....l
    8850: 05 B2 C0 B0 34 EE 26 8A 04 EE BA C6 03 26 8A 44  // ....4.&......&.D
    8860: 02 EE 56 42 42 83 C6 03 32 C0 EE 42 B9 00 03 26  // ..VBB...2..B...&
    8870: 8A 04 EE 46 E2 F9 5E FE CA 26 8A 44 01 EE 9D C3  // ...F..^..&.D....
    8880: BA CC 03 EC 24 FE 0A C4 B2 C2 EE C3 E8 A8 12 B2  // ....$...........
    8890: C0 86 C4 EE EB 00 EB 00 86 C4 EE EB 00 EB 00 B0  // ................
    88A0: 20 EE C3 50 8A E0 80 E4 80 80 26 87 04 7F 08 26  //  ..P......&....&
    88B0: 87 04 24 7F 8A E0 3C 07 7E 1E 26 F6 47 33 01 75  // ..$...<.~.&.G3.u
    88C0: 17 3C 23 74 13 3C 32 74 0F 3C 33 74 0B B4 03 26  // .<#t.<2t.<3t...&
    88D0: F6 47 09 01 75 02 B4 07 88 26 49 04 BA B4 03 80  // .G..u....&I.....
    88E0: 0E 87 04 02 26 F6 47 09 01 74 07 B2 D4 80 26 87  // ....&.G..t....&.
    88F0: 04 FD 89 16 63 04 C7 06 4E 04 00 00 C6 06 62 04  // ....c...N.....b.
    8900: 00 B9 08 00 BF 50 04 FC 06 1E 07 33 C0 F3 AB 07  // .....P.....3....
    8910: 26 8A 07 32 E4 A3 4A 04 26 8A 47 01 A2 84 04 26  // &..2..J.&.G....&
    8920: 8A 47 02 A3 85 04 26 8B 47 03 A3 4C 04 26 8B 47  // .G....&.G..L.&.G
    8930: 14 86 C4 A3 60 04 58 C3 52 32 E4 33 D2 B0 0D CD  // ....`.X.R2.3....
    8940: 17 F6 C4 29 75 08 32 E4 33 D2 B0 0A CD 17 5A C3  // ...)u.2.3.....Z.
    8950: 06 1E 60 2E 8E 1E 5E 24 2E 83 0E 68 24 00 75 6E  // ..`...^$...h$.un
    8960: 80 3E 00 05 01 74 67 C6 06 00 05 01 8A 1E 62 04  // .>...tg.......b.
    8970: 32 FF D1 E3 8B FB 8B 85 50 04 8A 3E 62 04 50 32  // 2.......P..>b.P2
    8980: F6 8A 0E 84 04 32 ED 41 51 8B 0E 4A 04 32 D2 E8  // .....2.AQ..J.2..
    8990: A6 FF F6 C4 29 75 3D 51 52 89 95 50 04 B4 08 E8  // ....)u=QR..P....
    89A0: B6 D4 0A C0 75 02 B0 20 33 D2 32 E4 CD 17 F6 C4  // ....u.. 3.2.....
    89B0: 29 75 1F 5A FE C2 59 E2 DE FE C6 59 E2 CA E8 77  // )u.Z..Y....Y...w
    89C0: FF 32 C0 A2 00 05 58 89 85 50 04 E8 AF 03 61 1F  // .2....X..P....a.
    89D0: 07 CF 5A 59 59 B0 FF EB EA 52 2A F5 38 C6 7D 02  // ..ZYY....R*.8.}.
    89E0: 32 C0 2E 8E 06 60 24 5A C3 A0 85 04 F6 E3 8A F7  // 2....`$Z........
    89F0: 8B D8 8B CA BA C4 03 B8 02 0F EF B4 02 E8 6D 00  // ..............m.
    8A00: 8B D1 32 ED 8A E6 8A C6 F3 AA 03 FD 8A CA 4B 75  // ..2...........Ku
    8A10: F7 32 E4 E8 57 00 C3 53 8A 1E 62 04 0B C0 75 04  // .2..W..S..b...u.
    8A20: 0A DB 74 03 E8 35 03 5B 8B F8 2B D1 81 C2 01 01  // ..t..5.[..+.....
    8A30: 8A C3 32 E4 C3 8A C6 32 F6 2B EA 0A DB 74 2A 2A  // ..2....2.+...t**
    8A40: C3 F6 26 85 04 8B C8 52 B4 01 E8 20 00 B2 C4 B8  // ..&....R... ....
    8A50: 02 0F EF 5A 1E 06 1F 8B C1 8B CA F3 A4 03 F5 03  // ...Z............
    8A60: FD 48 75 F5 1F E8 81 FF C3 8A D8 EB F8 BA CE 03  // .Hu.............
    8A70: B0 05 EE 42 EC 24 FC 0A C4 EE 4A C3 9C FA EE 42  // ...B.$....J....B
    8A80: EB 00 EC 4A 9D C3 1E 2E 8E 1E 5E 24 8B 16 63 04  // ...J......^$..c.
    8A90: 80 C2 06 1F C3 1E 2E 8E 1E 5E 24 8B 16 63 04 1F  // .........^$..c..
    8AA0: C3 50 BA CC 03 EC B2 D4 A8 01 75 02 B2 B4 58 C3  // .P........u...X.
    8AB0: E8 EE FF 80 C2 06 C3 1E 2E 8E 1E 5E 24 80 3E 49  // ...........^$.>I
    8AC0: 04 03 74 13 80 3E 49 04 02 74 0C 80 3E 49 04 01  // ..t..>I..t..>I..
    8AD0: 74 05 80 3E 49 04 00 1F C3 50 2E 8E 06 62 24 A0  // t..>I....P...b$.
    8AE0: 10 04 24 30 3C 30 74 05 2E 8E 06 64 24 58 0B C0  // ..$0<0t....d$X..
    8AF0: 74 03 E8 E1 01 03 06 4E 04 81 C2 01 01 2B D1 32  // t......N.....+.2
    8B00: ED 8B 2E 4A 04 8B F8 8B F0 8B C5 F6 E3 D1 E0 D1  // ...J............
    8B10: E5 0A DB 75 02 8A DE 38 F3 7E 02 8A DE C3 FC 8A  // ...u...8.~......
    8B20: D8 8B C1 E8 B3 FF 03 F0 3A 16 4A 04 74 06 06 1F  // ........:.J.t...
    8B30: E8 1B 00 C3 06 1F E8 40 00 C3 FC 8A D8 8A C1 8A  // .......@........
    8B40: E6 E8 95 FF F7 DD 2B F0 06 1F E8 01 00 C3 53 8A  // ......+.......S.
    8B50: CE 2A CB 32 ED 32 F6 2B EA 2B EA E3 0E 8A E1 8B  // .*.2.2.+.+......
    8B60: CA F3 A5 03 F5 03 FD FE CC 75 F4 58 B0 20 8A CA  // .........u.X. ..
    8B70: F3 AB 03 FD FE CB 75 F6 C3 53 8A C6 2A C3 74 06  // ......u..S..*.t.
    8B80: F6 E2 8B C8 F3 A5 58 8B C8 F6 E2 91 B0 20 F3 AB  // ......X...... ..
    8B90: C3 8B D8 E8 2E 00 2E 8E 1E 64 24 8A C3 22 DF D3  // .........d$.."..
    8BA0: E3 A8 80 74 03 30 1C C3 F6 D7 8A 34 22 F7 0A DE  // ...t.0.....4"...
    8BB0: 88 1C C3 8A FC E8 0C 00 2E 8E 1E 64 24 8A 04 D2  // ...........d$...
    8BC0: E8 22 C7 C3 B0 28 F6 E2 F6 C2 01 74 03 05 D8 1F  // ."...(.....t....
    8BD0: 8B F1 C1 EE 02 80 FF 05 7F 0C 03 F0 F6 D1 80 E1  // ................
    8BE0: 03 D0 E1 B7 03 C3 D1 EE 03 F0 F6 D1 80 E1 07 B7  // ................
    8BF0: 01 C3 FC 8A D8 2E 8E 06 64 24 8B C1 E8 86 00 75  // ........d$.....u
    8C00: 02 8A DE 03 F0 E8 24 00 C3 FC 8A D8 2E 8E 06 64  // ......$........d
    8C10: 24 8A C1 8A E6 E8 6D 00 75 02 8A DE F7 DD 81 C6  // $.....m.u.......
    8C20: F0 00 81 C7 F0 00 2B F0 E8 01 00 C3 8A CE 2A CB  // ......+.......*.
    8C30: E3 2C 51 8A CA 56 57 D1 E9 F3 A5 13 C9 F3 A4 8A  // .,Q..VW.........
    8C40: CA 2B F1 2B F9 81 C6 00 20 81 C7 00 20 D1 E9 F3  // .+.+.... ... ...
    8C50: A5 13 C9 F3 A4 5F 5E 03 F5 03 FD 59 E2 D4 8A C7  // ....._^....Y....
    8C60: 8A E7 8A CA 57 D1 E9 F3 AB 13 C9 F3 AA 8A CA 2B  // ....W..........+
    8C70: F9 81 C7 00 20 D1 E9 F3 AB 13 C9 F3 AA 5F 03 FD  // .... ........_..
    8C80: FE CB 75 DE C3 E8 B0 00 81 C2 01 01 2B D1 38 F3  // ..u.........+.8.
    8C90: 76 02 32 DB 51 B1 02 D2 E6 D2 E3 59 32 ED BD 50  // v.2.Q......Y2..P
    8CA0: 00 80 3E 49 04 06 74 04 D0 E2 D1 E0 06 1F 8B F8  // ..>I..t.........
    8CB0: 8B F0 B0 50 F6 E3 0A DB C3 52 53 8A DF 32 FF D1  // ...P.....RS..2..
    8CC0: E3 8B 87 50 04 E8 0E 00 50 D1 EB A1 4C 04 F7 E3  // ...P....P...L...
    8CD0: 5B 03 C3 5B 5A C3 52 8B D0 A0 4A 04 F6 E4 32 F6  // [..[Z.R...J...2.
    8CE0: 03 C2 D1 E0 5A C3 8B E8 83 E5 0F 2E 8A A6 96 8C  // ....Z...........
    8CF0: 8B E8 C1 ED 04 83 E5 0F 2E 8A 86 96 8C C3 00 03  // ................
    8D00: 0C 0F 30 33 3C 3F C0 C3 CC CF F0 F3 FC FF 26 8B  // ..03<?........&.
    8D10: 04 86 E0 BA 00 80 F6 C4 C0 74 02 0A D6 D0 EE C1  // .........t......
    8D20: E0 02 75 F2 88 56 00 45 C3 8B 16 63 04 8A C5 86  // ..u..V.E...c....
    8D30: E0 EF 8A E1 FE C0 EF C3 52 8B D0 8A C4 F6 26 4A  // ........R.....&J
    8D40: 04 C1 E0 02 32 F6 03 C2 5A C3 53 8A DF 32 FF D1  // ....2...Z.S..2..
    8D50: E3 8B 87 50 04 D1 EB E8 02 00 5B C3 52 8B D0 32  // ...P......[.R..2
    8D60: F6 52 8A C4 F6 26 85 04 F7 26 4A 04 5A 03 C2 0A  // .R...&...&J.Z...
    8D70: DB 74 08 03 06 4C 04 FE CB 75 F8 5A C3 52 8B D0  // .t...L...u.Z.R..
    8D80: A0 4A 04 F6 E4 32 F6 03 C2 D1 E0 03 06 4E 04 D1  // .J...2.......N..
    8D90: F8 8B C8 B4 0E E8 91 FF 5A C3 8B C2 F7 26 4A 04  // ........Z....&J.
    8DA0: 8B F9 C1 EF 03 03 F8 0A FF 74 0A 8A C7 32 E4 F7  // .........t...2..
    8DB0: 26 4C 04 03 F8 80 E1 07 B4 80 D2 EC C3 E8 F0 FC  // &L..............
    8DC0: EC C3 E8 F8 FF B2 C0 B0 20 EE C3 E8 EF FF B2 C0  // ........ .......
    8DD0: 32 C0 EE C3 C4 3E A8 04 26 C4 7D 04 8C C5 0B EF  // 2....>..&.}.....
    8DE0: C3 53 B0 0E E8 95 FC 8A E0 B0 0F E8 8E FC 8B D8  // .S..............
    8DF0: B8 0E AA EF B8 0F 55 EF B0 0E E8 7F FC 3C AA 74  // ......U......<.t
    8E00: 0D B0 0F E8 76 FC 3C 55 74 04 32 C0 5B C3 B0 0E  // ....v.<Ut.2.[...
    8E10: 8A E7 EF FE C0 8A E3 EF B0 01 0A C0 5B C3 8A EE  // ............[...
    8E20: 8A 36 85 04 06 1F 0A DB 74 25 8A C5 2A C3 F6 E6  // .6......t%..*...
    8E30: 8B C8 52 32 F6 C1 E2 02 8B C2 D1 E2 2B D5 51 8B  // ..R2........+.Q.
    8E40: C8 F3 A5 2B FA 2B F2 59 E2 F4 5A E8 05 00 C3 8A  // ...+.+.Y..Z.....
    8E50: DD EB F8 8A C6 F6 E3 8B C8 8A C7 8A E0 32 F6 C1  // .............2..
    8E60: E2 02 8B DA D1 E2 8B F1 2B D5 8B CB F3 AB 2B FA  // ........+.....+.
    8E70: 4E 75 F7 C3 2E 8E 1E 5E 24 89 0E 60 04 8A C5 24  // Nu.....^$..`...$
    8E80: 60 A8 20 74 06 B9 00 1E E9 94 00 F6 06 87 04 01  // `. t............
    8E90: 0F 85 8B 00 80 3E 49 04 07 74 06 E8 19 FC 74 01  // .....>I..t....t.
    8EA0: C3 F6 06 87 04 08 74 03 CD 42 C3 8A 36 85 04 8A  // ......t..B..6...
    8EB0: D6 FE CA 38 CD 7E 1F 0A C9 74 64 8A E9 8A CE FE  // ...8.~...td.....
    8EC0: C9 EB 5C 38 D1 74 58 8A CE 80 FD 03 7C 04 8A E9  // ..\8.tX.....|...
    8ED0: D0 ED FE C9 EB 49 80 F9 03 7E 44 8A E1 2A E5 0A  // .....I...~D..*..
    8EE0: E4 75 0A 38 CA 74 38 FE CA 38 CA 74 32 8A C5 0A  // .u.8.t8..8.t2...
    8EF0: C1 38 F0 7E 0A 80 FC 02 7E 12 80 FD 02 7F C8 80  // .8.~....~.......
    8F00: FC 03 7D BF 8A D6 FE CA 38 D1 74 13 8A CE FE C9  // ..}.....8.t.....
    8F10: FE C9 8A E9 2A EC 80 FE 08 7F 04 FE C1 FE C5 B4  // ....*...........
    8F20: 0A E8 05 FE C3 2E 8E 1E 5E 24 A2 62 04 32 E4 8B  // ........^$.b.2..
    8F30: F0 F7 26 4C 04 A3 4E 04 8B C8 E8 7A FB 74 07 80  // ..&L..N....z.t..
    8F40: 3E 49 04 07 77 02 D1 F9 B4 0C E8 DC FD D1 E6 8B  // >I..w...........
    8F50: 84 50 04 E8 27 FE C3 2E 8E 1E 5E 24 8A 26 49 04  // .P..'.....^$.&I.
    8F60: E8 D1 A8 74 07 C7 06 50 04 00 00 C3 E8 48 FB 74  // ...t...P.....H.t
    8F70: 0B 80 FC 07 74 06 77 08 E8 77 FC C3 E8 9F FB C3  // ....t.w..w......
    8F80: 80 FC 13 7C 03 74 1F C3 E8 4E FA 8A D8 8B C1 E8  // ...|.t...N......
    8F90: 85 FA 8B 2E 4A 04 52 F6 26 85 04 F7 E5 8B F7 03  // ....J.R.&.......
    8FA0: F0 5A E8 90 FA C3 E8 30 FA 8A D8 8B C1 E8 67 FA  // .Z.....0......g.
    8FB0: C1 E7 03 52 8B 2E 4A 04 C1 E5 03 F7 26 85 04 F7  // ...R..J.....&...
    8FC0: E5 8B F7 03 F0 5A E8 55 FE C3 2E 8E 1E 5E 24 8A  // .....Z.U.....^$.
    8FD0: 26 49 04 E8 E1 FA 74 0C 80 FC 07 74 07 77 40 80  // &I....t....t.w@.
    8FE0: FC 03 7F 04 E8 53 FB C3 E8 1E FC C3 E8 EA F9 8A  // .....S..........
    8FF0: D8 8A C1 8A E6 FE C4 E8 1D FA 2B 3E 4A 04 C1 E7  // ..........+>J...
    9000: 03 52 F7 26 85 04 F7 26 4A 04 C1 E0 03 8B F7 2B  // .R.&...&J......+
    9010: F0 5A 8B 2E 4A 04 C1 E5 03 F7 DD E8 00 FE C3 80  // .Z..J...........
    9020: FC 13 7C 03 74 C6 C3 E8 AF F9 8A D8 8A C1 8A E6  // ..|.t...........
    9030: FE C4 E8 E2 F9 52 8B 2E 4A 04 F7 26 85 04 F7 E5  // .....R..J..&....
    9040: 2B FD 8B F7 2B F0 5A F7 DD E8 E9 F9 C3 2E 8E 1E  // +...+.Z.........
    9050: 5E 24 2E 8E 06 64 24 E8 5D FA 74 11 80 3E 49 04  // ^$...d$.].t..>I.
    9060: 07 7C 18 2E 8E 06 62 24 74 03 E9 B1 00 E8 49 FC  // .|....b$t.....I.
    9070: 8B D8 26 8B 07 8B EC 89 46 1A C3 A1 50 04 E8 B7  // ..&.....F...P...
    9080: FC 8B F0 BB 08 00 2B E3 8B EC 80 3E 49 04 06 75  // ......+....>I..u
    9090: 1F B9 04 00 26 8A 04 88 46 00 45 26 8A 84 00 20  // ....&...F.E&... 
    90A0: 88 46 00 45 83 C6 50 E2 EB B8 00 02 B2 80 EB 17  // .F.E..P.........
    90B0: D1 E6 B9 04 00 E8 56 FC 81 C6 00 20 E8 4F FC 81  // ......V.... .O..
    90C0: EE B0 1F E2 F0 EB E2 2B EB C4 3E 0C 01 32 F6 80  // .......+..>..2..
    90D0: FB 0E 75 09 26 83 7D FE 10 75 02 B6 80 16 1F 8B  // ..u.&.}..u......
    90E0: F5 8B CB F6 C6 80 74 01 47 56 57 F3 A6 5F 5E 74  // ......t.GVW.._^t
    90F0: 23 FE C0 03 FB F6 C6 80 74 01 47 FE CA 75 E2 FE  // #.......t.G..u..
    9100: CC 74 0F 2E 8E 1E 5E 24 C4 3E 7C 00 B0 80 B2 80  // .t....^$.>|.....
    9110: EB CB 32 C0 8B E5 03 E3 8B EC 89 46 1A C3 80 3E  // ..2........F...>
    9120: 49 04 13 7C 05 75 02 EB 5A C3 2E 8E 06 60 24 E8  // I..|.u..Z....`$.
    9130: 18 FC 8B F0 8B 1E 85 04 2B E3 8B EC B8 05 08 B9  // ........+.......
    9140: 05 00 BA CE 03 80 3E 49 04 0F 72 1A F6 06 87 04  // ......>I..r.....
    9150: 60 75 13 B4 0A F7 C6 01 00 75 02 B4 05 B0 07 EF  // `u.......u......
    9160: B8 05 18 B9 05 01 EF 51 8B CB 26 8A 04 F6 D0 88  // .......Q..&.....
    9170: 46 00 45 03 36 4A 04 E2 F1 58 EF B8 00 01 32 D2  // F.E.6J...X....2.
    9180: E9 44 FF 2E 8E 06 60 24 A1 50 04 8B D0 32 F6 52  // .D....`$.P...2.R
    9190: 8A C4 32 E4 F7 26 4A 04 F7 26 85 04 5A 03 C2 8B  // ..2..&J..&..Z...
    91A0: F0 8B 1E 85 04 2B E3 8B EC 53 8B 3E 4A 04 4F C1  // .....+...S.>J.O.
    91B0: E7 03 C1 E6 03 B9 08 00 32 E4 26 8A 04 D0 E4 0A  // ........2.&.....
    91C0: C0 74 03 80 CC 01 46 E2 F1 88 66 00 45 03 F7 4B  // .t....F...f.E..K
    91D0: 75 E3 5B B8 00 01 32 D2 E9 EC FE 33 ED EB 03 BD  // u.[...2....3....
    91E0: 01 00 2E 8E 1E 5E 24 2E 8E 06 64 24 8A 26 49 04  // .....^$...d$.&I.
    91F0: E8 C4 F8 74 0F 2E 8E 06 62 24 80 FC 07 74 05 7C  // ...t....b$...t.|
    9200: 3D E9 0B 02 8A E3 8B F0 8A DF 32 FF D1 E3 8B 87  // =.........2.....
    9210: 50 04 8B D0 A0 4A 04 F6 E4 32 F6 03 C2 8B F8 D1  // P....J...2......
    9220: E7 0A DB 74 0B D0 EB A1 4C 04 03 F8 FE CB 75 FA  // ...t....L.....u.
    9230: 8B C6 0B ED 75 03 F3 AB C3 AA 47 E2 FC C3 50 2E  // ....u.....G...P.
    9240: 8E 06 64 24 A1 50 04 E8 EE FA 8B F8 A0 50 04 8A  // ..d$.P.......P..
    9250: 26 4A 04 8B E8 58 A8 80 74 08 24 7F C5 36 7C 00  // &J...X..t.$..6|.
    9260: EB 04 C5 36 0C 01 8A FC 32 E4 C1 E0 03 03 F0 80  // ...6....2.......
    9270: FF 06 74 69 D1 E7 8A F3 B0 55 80 E3 03 F6 E3 8A  // ..ti.....U......
    9280: D8 8A F8 8B C5 50 B2 04 F6 C6 80 75 27 AC E8 55  // .....P.....u'..U
    9290: FA 23 C3 AB AC E8 4E FA 23 C3 26 89 85 FE 1F 83  // .#....N.#.&.....
    92A0: C7 4E FE CA 75 E7 83 EE 08 81 EF 3E 01 58 E8 72  // .N..u......>.X.r
    92B0: 00 E2 D2 C3 AC E8 2E FA 23 C3 26 31 05 AC E8 25  // ........#.&1...%
    92C0: FA 23 C3 26 31 85 00 20 83 C7 50 FE CA 75 E5 83  // .#.&1.. ..P..u..
    92D0: EE 08 81 EF 3E 01 58 E8 49 00 E2 A9 C3 8B C5 50  // ....>.X.I......P
    92E0: B2 04 F6 C3 80 74 1F AC 26 30 05 AC 26 30 85 00  // .....t..&0..&0..
    92F0: 20 83 C7 50 FE CA 7F EF 83 EE 08 81 EF 3F 01 58  //  ..P.........?.X
    9300: E8 20 00 E2 DA C3 AC AA AC 26 88 85 FF 1F 83 C7  // . .......&......
    9310: 4F FE CA 7F F1 83 EE 08 81 EF 3F 01 58 E8 03 00  // O.........?.X...
    9320: E2 BD C3 FE C0 38 E0 72 06 32 C0 81 C7 F0 00 C3  // .....8.r.2......
    9330: 8A 16 85 04 F6 E2 8B F0 32 F6 8B EA 66 0F B6 06  // ........2...f...
    9340: 51 04 F6 E2 66 0F B7 16 4A 04 83 FA 64 75 03 BA  // Q...f...J...du..
    9350: 68 00 83 FA 5A 75 03 BA 60 00 81 FA AF 00 75 03  // h...Zu..`.....u.
    9360: BA B0 00 52 F7 E2 66 0F B7 F8 66 0F B6 06 50 04  // ...R..f...f...P.
    9370: 66 03 F8 66 C1 CF 10 03 FA 66 C1 C7 03 81 CF 00  // f..f.....f......
    9380: FF 66 C1 C7 10 5A 8A E2 4A C1 E2 03 A0 50 04 50  // .f...Z..J....P.P
    9390: C5 06 0C 01 03 F0 2E 8E 06 60 24 58 57 51 50 9C  // .........`$XWQP.
    93A0: FC 8B CD E8 3B 00 B5 08 AC 8A E0 8A C7 D0 E4 73  // ....;..........s
    93B0: 02 8A C3 26 88 05 66 47 FE CD 75 EF 66 03 FA E2  // ...&..fG..u.f...
    93C0: E2 9D 58 59 5F 83 C7 08 FE C0 38 E0 72 0E 51 32  // ..XY_.....8.r.Q2
    93D0: C0 8B CD 49 03 FA 83 C7 08 E2 F9 59 2B F5 E2 BC  // ...I.......Y+...
    93E0: C3 06 52 33 C0 8E C0 66 C1 C7 10 8B C7 66 C1 C7  // ..R3...f.....f..
    93F0: 10 E8 40 A4 74 16 38 E0 74 12 0F B6 D0 E8 91 C9  // ..@.t.8.t.......
    9400: 8A E0 66 C1 C7 10 8B F8 66 C1 C7 10 5A 07 C3 80  // ..f.....f...Z...
    9410: FC 13 7C 0B 0F 84 18 FF 80 FC 62 0F 84 11 FF E8  // ..|.......b.....
    9420: 01 00 C3 80 FC 11 75 06 80 E3 80 80 CB 0F 50 53  // ......u.......PS
    9430: 8A DF 32 FF D1 E3 8B 97 50 04 5B 2E 8E 06 60 24  // ..2.....P.[...`$
    9440: E8 07 F9 8B F8 8B 2E 85 04 58 32 F6 52 8B 36 4A  // .........X2.R.6J
    9450: 04 56 8A 26 85 04 C5 36 0C 01 80 FC 0E 75 09 83  // .V.&...6.....u..
    9460: 7C FE 10 75 03 B4 10 46 F6 E4 03 F0 B6 03 F6 C3  // |..u...F........
    9470: 80 75 6D B2 C4 B8 02 0F EF 5A 58 50 52 4A 8A E0  // .um......ZXPRJ..
    9480: 57 51 51 57 8B CD 32 C0 AA 03 FA E2 FB 5F 47 FE  // WQQW..2......_G.
    9490: C4 38 D4 76 0A 32 E4 8B CD 49 03 FA 47 E2 FB 59  // .8.v.2...I..G..Y
    94A0: E2 E0 59 5F BA C4 03 B0 02 8A E3 EF 5B 4B 5A 51  // ..Y_........[KZQ
    94B0: 57 8B CD AC 26 8A 25 AA 03 FB E2 F7 5F 47 2B F5  // W...&.%....._G+.
    94C0: 42 3B D3 76 0A 33 D2 8B CD 49 03 FB 47 E2 FB 59  // B;.v.3...I..G..Y
    94D0: E2 DD BA CE 03 B8 03 00 EF B2 C4 B8 02 0F EF C3  // ................
    94E0: B2 CE B8 03 18 EF EB BC 2E 8E 1E 5E 24 80 3E 63  // ...........^$.>c
    94F0: 04 B4 74 0B BA CC 03 EC A8 01 75 04 CD 42 C3 C3  // ..t.......u..B..
    9500: E8 D1 F8 0A FF 75 1C 8A E3 80 E4 1F 80 26 66 04  // .....u.......&f.
    9510: E0 08 26 66 04 E8 2D 00 8A 1E 66 04 80 E3 20 B1  // ..&f..-...f... .
    9520: 05 D2 EB E8 91 F5 74 19 A0 66 04 24 DF 80 E3 01  // ......t..f.$....
    9530: 74 02 0C 20 A2 66 04 24 10 0C 02 0A D8 E8 53 00  // t.. .f.$......S.
    9540: C3 E8 7E F8 C3 53 50 80 E3 0F 8A FB D0 E3 81 E3  // ..~..SP.........
    9550: 10 07 0A DF E8 60 F5 74 0E B4 00 8A C3 E8 2C F3  // .....`.t......,.
    9560: 0B ED 74 03 26 88 1D 8A C3 E8 0B 00 0B ED 74 04  // ..t.&.........t.
    9570: 26 88 5D 10 58 5B C3 8A E0 1E 2E 8E 1E 5E 24 80  // &.].X[.......^$.
    9580: 3E 49 04 33 1F 7F 08 8A C4 B4 11 E8 FE F2 C3 E8  // >I.3............
    9590: 30 F8 C3 9C FA E8 9F 05 B2 C0 B9 03 00 B4 01 8A  // 0...............
    95A0: C4 EE 8A C3 EE 0B ED 74 04 47 26 88 1D FE C4 80  // .......t.G&.....
    95B0: C3 02 E2 EB B0 20 EE 9D C3 2E 8E 1E 5E 24 8A 26  // ..... ......^$.&
    95C0: 49 04 E8 F2 F4 74 0A 80 FC 07 77 06 74 03 E8 C0  // I....t....w.t...
    95D0: F5 C3 80 FC 13 7C 03 74 4C C3 8A D8 E8 BB F7 BA  // .....|.tL.......
    95E0: CE 03 B0 08 EF 2E 8E 1E 60 24 F6 C3 80 75 1C B2  // ........`$...u..
    95F0: C4 B8 02 FF EF 8A 25 C6 05 00 8A E3 EF 8A 25 B4  // ......%.......%.
    9600: FF 88 25 EF B2 CE B8 08 FF EF C3 B8 03 18 EF B2  // ..%.............
    9610: C4 B0 02 8A E3 EF 8A 25 B4 FF 88 25 EF B2 CE B8  // .......%...%....
    9620: 03 00 EF EB E1 50 2E 8E 06 60 24 A1 4A 04 C1 E0  // .....P...`$.J...
    9630: 03 F7 E2 03 C1 8B F8 58 26 88 05 C3 2E 8E 1E 5E  // .......X&......^
    9640: 24 8A 26 49 04 E8 6F F4 74 0F 80 FC 07 77 0B 74  // $.&I..o.t....w.t
    9650: 08 E8 5F F5 8B EC 89 46 1A C3 80 FC 13 7C 03 74  // .._....F.....|.t
    9660: 29 C3 E8 35 F7 8A CC 2E 8E 1E 60 24 BA CE 03 32  // )..5......`$...2
    9670: FF B8 04 03 EF D0 E7 8A 1D 22 D9 74 03 80 CF 01  // .........".t....
    9680: FE CC 7D F0 8B EC 88 7E 1A C3 A1 4A 04 C1 E0 03  // ..}....~...J....
    9690: F7 E2 03 C1 8B F8 2E 8E 1E 60 24 8A 05 8B EC 88  // .........`$.....
    96A0: 46 1A C3 2E 8E 1E 5E 24 8A 3E 62 04 8A CF D0 E1  // F.....^$.>b.....
    96B0: 32 ED BE 50 04 03 F1 8B 14 8A 0E 49 04 3C 0D 76  // 2..P.......I.<.v
    96C0: 4A 2E 8E 06 64 24 E8 EE F3 75 33 8A 1E 4A 04 8A  // J...d$...u3..J..
    96D0: F8 8A C6 F6 E3 8A CA 03 C8 D1 E1 03 0E 4E 04 8B  // .............N..
    96E0: F9 8A C7 AA D1 E9 41 FE C2 38 DA 73 59 89 14 8B  // ......A..8.sY...
    96F0: 16 63 04 B0 0E 8A E5 EF 8A E1 FE C0 EF C3 2E 8E  // .c..............
    9700: 06 62 24 80 F9 07 74 C3 E9 83 00 75 04 32 D2 EB  // .b$...t....u.2..
    9710: 0F 3C 0A 75 1D 3A 36 84 04 75 03 E9 93 00 FE C6  // .<.u.:6..u......
    9720: 89 14 E8 92 F3 75 05 80 F9 07 7F 05 8B C2 E8 4C  // .....u.........L
    9730: F6 C3 3C 07 75 04 E8 D3 8F C3 3C 08 75 83 0A D2  // ..<.u.....<.u...
    9740: 74 DE FE CA EB DA 32 FF 32 D2 2B CB 3A 36 84 04  // t.....2.2.+.:6..
    9750: 74 06 FE C6 03 CB EB 95 89 14 8B 16 63 04 B0 0E  // t...........c...
    9760: 8A E5 EF 8A E1 FE C0 EF 2B FB 2B FB 26 8A 65 02  // ........+.+.&.e.
    9770: 50 8B 3E 4E 04 8B F3 D1 E6 03 F7 A0 84 04 F6 E3  // P.>N............
    9780: 8B C8 06 1F F3 A5 8B CB 58 B0 20 F3 AB C3 B9 01  // ........X. .....
    9790: 00 B4 0A E8 C2 C6 FE C2 3A 16 4A 04 74 03 89 14  // ........:.J.t...
    97A0: C3 32 FF 32 D2 89 14 3A 36 84 04 74 2E FE C6 EB  // .2.2...:6..t....
    97B0: ED 89 14 2E 8E 06 64 24 E8 FC F2 74 0E 2E 8E 06  // ......d$...t....
    97C0: 62 24 80 F9 07 74 04 32 FF EB 10 8B C2 E8 AD F5  // b$...t.2........
    97D0: 8B F9 D1 E7 4F 8B 1E 4A 04 EB 91 33 C9 8A 36 84  // ....O..J...3..6.
    97E0: 04 8A 16 4A 04 FE CA B0 01 E9 70 F7 2E 8E 1E 5E  // ...J......p....^
    97F0: 24 F6 06 87 04 08 74 03 CD 42 C3 E8 76 F6 8B EC  // $.....t..B..v...
    9800: C6 46 1B 00 C3 2E 8E 1E 5E 24 8A DF 32 FF D1 E3  // .F......^$..2...
    9810: 89 97 50 04 D0 EB 38 1E 62 04 75 05 8B C2 E8 5C  // ..P...8.b.u....\
    9820: F5 C3 2E 8E 1E 5E 24 8A DF 32 FF D1 E3 8B 97 50  // .....^$..2.....P
    9830: 04 8B 0E 60 04 8B EC 89 4E 16 89 56 12 C3 2E 8E  // ...`....N..V....
    9840: 1E 5E 24 A0 87 04 24 80 0A 06 49 04 8A 26 4A 04  // .^$...$...I..&J.
    9850: F6 06 87 04 08 75 2D E8 5D F2 74 07 80 3E 49 04  // .....u-.].t..>I.
    9860: 07 7F 21 51 8A CC 8A 2E 84 04 BE 2F 98 81 FE 38  // ..!Q......./...8
    9870: 98 74 10 2E 3B 0C 74 05 83 C6 03 EB F0 24 80 2E  // .t..;.t......$..
    9880: 0A 44 02 59 8A 3E 62 04 8B EC 89 46 1A 89 5E 0E  // .D.Y.>b....F..^.
    9890: 89 4E 16 89 56 12 C3 84 18 23 84 2B 33 84 2A 32  // .N..V....#.+3.*2
    98A0: 2E 8E 1E 5E 24 3C 04 7F 1B 50 52 BA CC 03 EC A8  // ...^$<...PR.....
    98B0: 01 5A 58 74 08 80 3E 63 04 D4 74 08 C3 80 3E 63  // .ZXt..>c..t...>c
    98C0: 04 B4 75 F8 3C 1C 73 F4 32 E4 8B E8 D1 E5 2E FF  // ..u.<.s.2.......
    98D0: A6 6B 98 A3 98 C3 98 D5 98 0A 99 54 98 54 98 54  // .k.........T.T.T
    98E0: 98 2F 99 47 99 4B 99 54 98 54 98 54 98 54 98 54  // ./.G.K.T.T.T.T.T
    98F0: 98 54 98 79 99 54 98 7D 99 98 99 54 98 D7 99 54  // .T.y.T.}...T...T
    9900: 98 E5 99 00 9A 07 9A 13 9A 37 9A 80 3E 49 04 13  // .........7..>I..
    9910: 74 15 E8 BF F4 8B C3 86 E0 E8 70 EF 0B ED 74 07  // t.........p...t.
    9920: 8A C7 32 FF 26 88 01 E8 93 F4 C3 E8 A6 F4 8A C7  // ..2.&...........
    9930: E8 44 FC 0B ED 74 F0 26 88 7D 11 EB EA 80 3E 49  // .D...t.&.}....>I
    9940: 04 13 74 E3 06 E8 8C F4 1F 0B ED 74 07 8B F2 B9  // ..t........t....
    9950: 11 00 F3 A4 8B F2 E8 DE 01 32 E4 B9 10 00 B2 C0  // .........2......
    9960: 9C FA 8A C4 EE AC EE 9D FE C4 E2 F4 AC E8 07 FC  // ................
    9970: EB B5 80 FB 01 77 B0 E8 43 F4 B2 C0 B0 30 E8 FB  // .....w..C....0..
    9980: F0 24 F7 80 26 65 04 DF 80 FB 00 74 07 0C 08 80  // .$..&e.....t....
    9990: 0E 65 04 20 EE EB 90 E8 9D 01 8A C3 B2 C0 E8 DB  // .e. ............
    99A0: F0 8B C8 EE B0 20 EE 8B EC 88 4E 0F E9 78 FF B3  // ..... ....N..x..
    99B0: 11 EB E4 8B FA E8 05 F4 B9 10 00 32 E4 B2 C0 8A  // ...........2....
    99C0: C4 9C FA EE 42 EC 26 88 05 FE C4 4A EE 9D 47 E2  // ....B.&....J..G.
    99D0: EE 9C FA B0 11 EE 42 EC 9D 26 88 05 E8 E3 F3 EB  // ......B..&......
    99E0: 5A E8 CE 00 C3 8B FA 51 8B C3 26 8A 35 26 8A 6D  // Z......Q..&.5&.m
    99F0: 01 26 8A 4D 02 E8 CA 00 83 C7 03 43 59 E2 E8 C3  // .&.M.......CY...
    9A00: 0A DB 75 1A E8 B6 F3 B2 C0 B0 30 E8 6E F0 24 7F  // ..u.......0.n.$.
    9A10: F6 C7 01 74 02 0C 80 B4 30 E8 70 EE EB 1D FE CB  // ...t....0.p.....
    9A20: 75 1C E8 98 F3 B2 C0 B0 30 E8 50 F0 EE A8 80 75  // u.......0.P....u
    9A30: 03 C0 E7 02 B4 34 8A C7 E8 51 EE E8 7F F3 C3 8A  // .....4...Q......
    9A40: C3 E8 D1 00 8B EC 89 4E 16 88 76 13 C3 8B FA 51  // .......N..v....Q
    9A50: 8B C3 E8 C3 00 26 88 35 26 88 6D 01 26 88 4D 02  // .....&.5&.m.&.M.
    9A60: 83 C7 03 43 59 E2 E8 C3 BA C6 03 8A C3 EE C3 BA  // ...CY...........
    9A70: C6 03 EC 32 E4 8B EC 89 46 0E C3 E8 3F F3 B2 C0  // ...2....F...?...
    9A80: B0 34 E8 F7 EF 8A F8 EE B0 30 E8 EF EF B3 01 A8  // .4.......0......
    9A90: 80 75 05 B3 00 C0 EF 02 8B EC 89 5E 0E EB 9C 51  // .u.........^...Q
    9AA0: 8B C3 E8 73 00 E8 2A 00 8A C3 E8 52 00 43 59 E2  // ...s..*....R.CY.
    9AB0: EE C3 F6 06 89 04 02 74 03 E8 16 00 8A C3 E8 39  // .......t.......9
    9AC0: 00 C3 F6 06 89 04 02 74 03 E8 06 00 8A C3 E8 2E  // .......t........
    9AD0: 00 C3 50 B0 1E F6 E6 50 B0 3B F6 E5 50 B0 0B F6  // ..P....P.;..P...
    9AE0: E1 59 03 C1 59 03 C1 B1 64 F6 F1 80 FC 32 7C 02  // .Y..Y...d....2|.
    9AF0: FE C0 8A F0 8A E8 8A C8 58 C3 52 E8 39 00 5A 53  // ........X.R.9.ZS
    9B00: 8B DA BA C8 03 9C FA EE 42 8A C7 EE 8A C5 EE 8A  // ........B.......
    9B10: C1 EE 9D 5B C3 E8 1F 00 53 9C FA BA C7 03 EE 42  // ...[....S......B
    9B20: 42 EC 8A F8 EB 00 EB 00 EC 8A E8 EB 00 EB 00 EC  // B...............
    9B30: 8A C8 8A F7 9D 5B C3 50 51 E8 81 F2 B9 FF 7F EC  // .....[.PQ.......
    9B40: A8 08 75 02 E2 F9 59 58 C3 2E 8E 1E 5E 24 8B F8  // ..u...YX....^$..
    9B50: 24 0F 81 E7 F0 00 C1 EF 03 83 FF 06 7F 18 2E FF  // $...............
    9B60: A5 FB 9A 03 9B 18 9B B6 9B 12 9C 3C 03 74 08 3C  // ...........<.t.<
    9B70: 04 7F 03 E8 CF 01 C3 BA C4 03 B0 03 8A E3 EF C3  // ................
    9B80: 3C 04 77 F2 50 53 50 52 8B 16 63 04 B0 07 E8 EB  // <.w.PSPR..c.....
    9B90: EE 8A E0 D0 EC 80 E4 01 A8 40 74 03 80 CC 02 B0  // .........@t.....
    9BA0: 12 E8 D8 EE 40 A3 85 04 B0 09 E8 CF EE A8 80 74  // ....@..........t
    9BB0: 04 D1 2E 85 04 A1 85 04 8B D0 3D F4 01 73 1B BA  // ..........=..s..
    9BC0: E0 01 3D C2 01 73 13 BA 90 01 3D 7C 01 73 0B BA  // ..=..s....=|.s..
    9BD0: 5E 01 3D 4A 01 73 03 BA C8 00 89 16 85 04 5A 58  // ^.=J.s........ZX
    9BE0: C6 06 84 04 FF E8 5D 01 5B 58 8A DF 32 FF 0A C0  // ......].[X..2...
    9BF0: 74 0E B3 0E 3C 01 74 08 B3 08 3C 02 74 02 B3 10  // t...<.t...<.t...
    9C00: 8A CB 8A E9 81 E9 01 02 80 F9 08 7E 04 81 E9 01  // ...........~....
    9C10: 01 87 1E 85 04 53 E8 5B F2 5B E8 85 02 C3 0A C0  // .....S.[.[......
    9C20: 74 11 FE C8 74 1A FE C8 74 38 FE C8 74 3C FE C8  // t...t...t8..t<..
    9C30: 74 40 C3 89 2E 7C 00 8C 06 7E 00 C3 8C C8 8E C0  // t@...|...~......
    9C40: FE CA 0A DB 74 07 32 FF 2E 8A 97 F6 9B 89 0E 85  // ....t.2.........
    9C50: 04 88 16 84 04 89 2E 0C 01 8C 06 0E 01 C3 00 0D  // ................
    9C60: 18 2A E8 09 03 B9 0E 00 EB D6 BD 06 6B B9 08 00  // .*..........k...
    9C70: EB CA BD 19 73 B9 10 00 EB C2 0A C0 75 BD 8B 0E  // ....s.......u...
    9C80: 85 04 8A 16 84 04 80 FF 07 77 35 80 FF 01 77 10  // .........w5...w.
    9C90: 0A FF 75 06 C4 2E 7C 00 EB 26 C4 2E 0C 01 EB 20  // ..u...|..&..... 
    9CA0: 80 FF 02 75 0B 8C CD 8E C5 2E 8B 2E F8 83 EB 10  // ...u............
    9CB0: 0E 07 8A DF 32 FF 80 EB 02 D1 E3 2E 8B AF 69 9C  // ....2.........i.
    9CC0: 8B C5 8B EC 89 4E 16 89 56 12 89 46 0A 8C 46 1E  // .....N..V..F..F.
    9CD0: C3 19 73 06 6B 06 6F 06 73 19 73 19 83 53 06 8A  // ..s.k.o.s.s..S..
    9CE0: 26 49 04 E8 CD C3 26 8A 47 02 26 8A 67 33 F6 C4  // &I....&.G.&.g3..
    9CF0: 01 74 22 BD 19 73 3C 10 7D 0E E8 71 02 8C 06 0E  // .t"..s<.}..q....
    9D00: 01 3C 0E 7D 07 BD 06 6B 8C 0E 0E 01 89 2E 0C 01  // .<.}...k........
    9D10: E8 10 01 EB 2D B4 84 3C 10 7D 13 B4 81 3C 0E 74  // ....-..<.}...<.t
    9D20: 0D 7F 15 B4 02 3C 08 74 05 80 CC 80 EB 0A 26 F6  // .....<.t......&.
    9D30: 47 05 01 74 03 80 E4 7F 86 C4 32 DB E8 06 00 E8  // G..t......2.....
    9D40: C9 01 07 5B C3 8B F8 8B F2 BA CE 03 EC B8 05 00  // ...[............
    9D50: EF B8 06 04 EF B2 C4 EC B8 02 04 EF B8 04 07 EF  // ................
    9D60: 8B D6 8B C7 50 24 7F 0A C0 74 22 0E 07 33 D2 B9  // ....P$...t"..3..
    9D70: 00 01 3C 04 75 07 B7 10 BD 19 73 EB 10 FE C8 75  // ..<.u.....s....u
    9D80: 07 B7 0E E8 E8 01 EB 05 B7 08 BD 06 6B E8 2D 00  // ............k.-.
    9D90: 58 A8 80 74 00 BA C4 03 B8 02 03 EF B8 04 02 EF  // X..t............
    9DA0: B2 CC EC A8 01 B8 06 0E 75 02 B4 0A B2 CE 50 EC  // ........u.....P.
    9DB0: 58 EF B0 04 EE 32 C0 EE B8 05 10 EF C3 FC 0B C9  // X....2..........
    9DC0: 75 01 C3 80 FF 0E 75 0A 26 83 7E FE 10 75 03 80  // u.....u.&.~..u..
    9DD0: CD 80 1E 06 1F 2E 8E 06 60 24 8B FA C1 E7 05 B0  // ........`$......
    9DE0: 40 53 80 E3 03 F6 E3 5B F6 C3 04 74 02 04 20 86  // @S.....[...t.. .
    9DF0: E0 8B D0 03 FA 8B F5 E3 28 32 C0 86 FB 32 FF 51  // ........(2...2.Q
    9E00: F6 C5 80 74 01 46 8B CB F3 A4 83 FB 20 74 07 B9  // ...t.F...... t..
    9E10: 20 00 2B CB F3 AA 59 F6 C5 80 74 01 46 FE C9 75  //  .+...Y...t.F..u
    9E20: DE 1F C3 8A 26 49 04 50 06 57 C4 3E A8 04 26 C4  // ....&I.P.W.>..&.
    9E30: 7D 0C 8C C5 0B EF 74 30 8B EF 83 C7 07 26 8A 05  // }.....t0.....&..
    9E40: 3C FF 74 24 38 E0 74 03 47 EB F2 8B FD 26 8A 05  // <.t$8.t.G....&..
    9E50: FE C8 A2 84 04 26 8B 45 01 A3 85 04 26 C4 7D 03  // .....&.E....&.}.
    9E60: 89 3E 0C 01 8C 06 0E 01 5F 07 58 C3 26 F6 47 33  // .>......_.X.&.G3
    9E70: 01 74 01 C3 C4 1E A8 04 26 C4 5F 08 8C C0 0B C3  // .t......&._.....
    9E80: 74 1F BF 0B 00 26 8A 01 3C FF 74 15 47 38 06 49  // t....&..<.t.G8.I
    9E90: 04 75 F2 26 8A 07 32 E4 87 06 85 04 8B D8 E8 01  // .u.&..2.........
    9EA0: 00 C3 8B 16 63 04 8A 26 85 04 FE CC 80 E4 1F 9C  // ....c..&........
    9EB0: FA 80 FA D4 74 0B B0 14 EE 42 EC 24 E0 0A C4 EE  // ....t....B.$....
    9EC0: 4A B0 09 EE 42 EC 24 E0 0A C4 EE 9D 8A C8 8B C3  // J...B.$.........
    9ED0: 8A 16 85 04 F6 F2 80 3E 84 04 FF 75 07 A2 84 04  // .......>...u....
    9EE0: FE 0E 84 04 F6 E2 F6 C1 80 74 02 D1 E0 48 8A E0  // .........t...H..
    9EF0: B0 12 8B 16 63 04 EF A0 4A 04 8A 26 84 04 FE C4  // ....c...J..&....
    9F00: F6 E4 D1 E0 05 00 01 A3 4C 04 C3 8A 26 49 04 50  // ........L...&I.P
    9F10: 06 57 C4 3E A8 04 26 C4 7D 08 8C C5 0B EF 74 4A  // .W.>..&.}.....tJ
    9F20: 8B EF 83 C7 0B 26 8A 05 3C FF 74 3E 38 E0 74 03  // .....&..<.t>8.t.
    9F30: 47 EB F2 8B FD 26 8A 3D 26 8A 5D 01 26 8B 4D 02  // G....&.=&.].&.M.
    9F40: 26 8B 55 04 26 8A 45 0A 3C FF 74 02 FE C8 50 A0  // &.U.&.E.<.t...P.
    9F50: 84 04 FE C0 F6 26 85 04 A3 85 04 58 A2 84 04 26  // .....&.....X...&
    9F60: C4 7D 06 8B EF 32 C0 E8 DB FD 5F 07 58 C3 50 53  // .}...2...._.X.PS
    9F70: 51 52 2E A1 68 24 0B C0 74 09 2E 8B 2E F8 83 0E  // QR..h$..t.......
    9F80: 07 EB 08 B8 30 11 B7 02 E8 CD BE 5A 59 5B 58 C3  // ....0......ZY[X.
    9F90: 3C 04 7C 01 C3 E3 FD 53 2E 8E 1E 5E 24 86 FB 32  // <.|....S...^$..2
    9FA0: FF D1 E3 8B FB 81 C7 50 04 8B 35 5B 89 15 56 8B  // .......P..5[..V.
    9FB0: F0 51 53 26 8A 46 00 45 3C 0D 7F 1F 75 04 32 D2  // .QS&.F.E<...u.2.
    9FC0: EB 40 3C 0A 74 32 3C 07 75 05 E8 3F 87 EB 62 3C  // .@<.t2<.u..?..b<
    9FD0: 08 75 08 0A D2 74 5A FE CA EB 27 F7 C6 02 00 74  // .u...tZ...'....t
    9FE0: 05 26 8A 5E 00 45 B9 01 00 B4 09 E8 6A BE FE C2  // .&.^.E......j...
    9FF0: 3A 16 4A 04 72 0C 32 D2 89 15 3A 36 84 04 73 06  // :.J.r.2...:6..s.
    A000: FE C6 89 15 EB 2B 50 E8 AD EA 75 08 B8 00 08 E8  // .....+P...u.....
    A010: 46 BE EB 09 80 3E 49 04 07 74 F1 32 E4 86 3E 62  // F....>I..t.2..>b
    A020: 04 53 8A FC 55 E8 25 00 5D 5B 86 3E 62 04 58 8B  // .S..U.%.][.>b.X.
    A030: 15 5B 59 E2 15 5A F7 C6 01 00 75 02 89 15 8B 05  // .[Y..Z....u.....
    A040: 3A 3E 62 04 75 03 E8 34 ED C3 E9 64 FF 33 C9 8A  // :>b.u..4...d.3..
    A050: 36 84 04 8A 16 4A 04 FE CA B8 01 06 E8 F9 BD C3  // 6....J..........
    A060: 2E 8E 1E 5E 24 0A C0 75 0D E8 18 00 8B EC 89 5E  // ...^$..u.......^
    A070: 0E C6 46 1A 1A C3 3C 01 75 09 E8 41 00 8B EC C6  // ..F...<.u..A....
    A080: 46 1A 1A C3 A0 8A 04 BF F6 A0 2E 3A 05 72 04 BB  // F..........:.r..
    A090: FF FF C3 32 E4 D1 E0 03 F8 2E 8B 5D 04 0A DB 74  // ...2.......]...t
    A0A0: 05 0A FF 75 04 C3 86 FB C3 A0 10 04 24 30 3C 30  // ...u........$0<0
    A0B0: 74 06 F6 C3 01 75 EF C3 F6 C3 01 74 E9 C3 BF F6  // t....u.....t....
    A0C0: A0 2E 8A 0D 32 C0 83 C7 04 2E 3B 1D 74 12 86 FB  // ....2.....;.t...
    A0D0: 2E 3B 1D 74 0B 83 C7 02 FE C0 38 C8 7E EB B0 FF  // .;.t......8.~...
    A0E0: A2 8A 04 C3 BB 08 00 F6 06 89 04 02 74 0E BB 07  // ............t...
    A0F0: 00 BA CC 03 EC A8 01 74 18 BB 08 00 BA B4 03 E8  // .......t........
    A100: DF EC 74 21 B7 01 E8 8C E9 80 FA D4 74 17 86 FB  // ..t!........t...
    A110: C3 BA D4 03 E8 CA EC 74 0C B7 02 E8 77 E9 80 FA  // .......t....w...
    A120: B4 74 02 86 FB C3 0F 08 0F 08 0F 08 0F 08 03 01  // .t..............
    A130: 03 01 01 01 00 08 01 01 01 01 01 01 01 01 0F 01  // ................
    A140: 0F 08 0F 04 00 02 0F 02 01 01 0F 01 FF 01 FF E0  // ................
    A150: 0F 00 00 00 00 07 02 08 FF 0E 00 00 3F 00 10 01  // ............?...
    A160: 08 00 00 00 00 01 00 02 02 01 00 04 04 01 00 05  // ................
    A170: 02 05 00 06 01 06 05 06 00 08 01 08 00 07 02 07  // ................
    A180: 06 07 CA 00 34 00 90 00 96 00 00 00 00 00 00 00  // ....4...........
    A190: 5F 57 C3 90 50 66 52 E8 F4 FF FF FF 81 EF 10 00  // _W..PfR.........
    A1A0: 00 00 2E 8B 07 66 BA F8 0C EF 66 BA FC 0C ED 32  // .....f....f....2
    A1B0: C0 66 8B F8 66 5A 58 C3 66 B8 4F 03 66 52 66 56  // .f..fZX.f.O.fRfV
    A1C0: 53 57 50 0A FF 75 44 E8 C8 FF FF FF 66 33 F6 66  // SWP..uD.....f3.f
    A1D0: BB 53 00 E8 48 00 00 00 C1 E8 10 F6 C4 40 75 2B  // .S..H........@u+
    A1E0: 66 81 E2 FF 02 66 D1 E2 66 8B C2 66 40 C1 E0 10  // f....f..f..f@...
    A1F0: 66 8B C2 66 BB 13 00 E8 30 00 00 00 66 BB 12 00  // f..f....0...f...
    A200: E8 27 00 00 00 66 58 32 E4 66 50 58 5F 5B 66 5E  // .'...fX2.fPX_[f^
    A210: 66 5A C3 90 66 B8 4F 03 C3 90 66 B8 4F 03 C3 90  // fZ..f.O...f.O...
    A220: 66 52 E8 11 00 00 00 ED 66 5A C3 90 66 52 E8 05  // fR......fZ..fR..
    A230: 00 00 00 EF 66 5A C3 90 66 8B D7 50 33 C0 66 8B  // ....fZ..f..P3.f.
    A240: C3 66 03 C6 C1 E0 02 EF 66 83 C2 04 58 C3 04 4A  // .f......f...X..J
    A250: F7 49 F7 49 F7 49 E2 49 E2 49 E2 49 E2 49 24 46  // .I.I.I.I.I.I.I$F
    A260: 9B 46 C5 46 06 48 05 48 05 48 4B 48 B0 48 E0 48  // .F.F.H.H.HKH.H.H
    A270: 9D 49 C6 49 C6 49 3D 48 30 48 30 48 30 48 30 48  // .I.I.I=H0H0H0H0H
    A280: 30 48 4B 48 B0 48 E0 48 9D 49 CB 49 11 4A C6 49  // 0HKH.H.H.I.I.J.I
    A290: C6 49 FF FF FF FF FF FF 00 00 FF FF 00 00 FF FF  // .I..............
    A2A0: 00 00 FF 00 00 00 FF 00 00 00 FF 00 00 00 FF 00  // ................
    A2B0: 00 00 00 00 08 10 00 08 10 18 00 08 10 18 28 44  // ..............(D
    A2C0: 01 28 44 02 36 58 03 16 58 03 4D 45 03 01 45 03  // .(D.6X..X.ME..E.
    A2D0: 29 44 04 42 44 04 52 44 04 28 44 03 00 00 00 00  // )D.BD.RD.(D.....
    A2E0: D5 4B 00 02 D5 4B 01 02 D5 4B 02 02 D5 4B 03 02  // .K...K...K...K..
    A2F0: D5 4B 04 02 D5 4B 05 02 CF 4D 00 02 CF 4D 01 02  // .K...K...M...M..
    A300: CF 4D 02 02 CF 4D 03 02 CF 4D 04 02 CF 4D 05 02  // .M...M...M...M..
    A310: 04 4E 00 02 04 4E 01 02 04 4E 02 02 04 4E 03 02  // .N...N...N...N..
    A320: 04 4E 04 02 04 4E 05 02 3F 50 00 02 3F 50 01 02  // .N...N..?P..?P..
    A330: 3F 50 02 02 3F 50 03 02 3F 50 04 02 3F 50 05 02  // ?P..?P..?P..?P..
    A340: 3F 50 00 02 3F 50 01 02 3F 50 02 02 3F 50 03 02  // ?P..?P..?P..?P..
    A350: 3F 50 04 02 3F 50 05 02 06 4F 00 02 06 4F 01 02  // ?P..?P...O...O..
    A360: 06 4F 02 02 06 4F 03 02 06 4F 04 02 06 4F 05 02  // .O...O...O...O..
    A370: 42 4F 00 02 42 4F 01 02 42 4F 02 02 42 4F 03 02  // BO..BO..BO..BO..
    A380: 42 4F 04 02 42 4F 05 02 B3 4E 00 02 B3 4E 01 02  // BO..BO...N...N..
    A390: B3 4E 02 02 B3 4E 03 02 B3 4E 04 02 B3 4E 05 02  // .N...N...N...N..
    A3A0: E7 4E 00 02 E7 4E 01 02 E7 4E 02 02 E7 4E 03 02  // .N...N...N...N..
    A3B0: E7 4E 04 02 E7 4E 05 02 97 52 00 00 CA 52 01 00  // .N...N...R...R..
    A3C0: CA 52 02 00 B7 52 00 00 A5 51 00 02 9E 4F 00 02  // .R...R...Q...O..
    A3D0: 9E 4F 01 02 9E 4F 02 02 9E 4F 03 02 9E 4F 04 02  // .O...O...O...O..
    A3E0: 9E 4F 05 02 BD 51 00 02 12 54 05 00 12 54 01 00  // .O...Q...T...T..
    A3F0: 12 54 00 00 12 54 02 00 53 54 00 00 53 54 02 00  // .T...T..ST..ST..
    A400: 98 54 00 00 28 51 00 02 28 51 01 02 28 51 02 02  // .T..(Q..(Q..(Q..
    A410: 28 51 03 02 28 51 04 02 28 51 05 02 E4 52 00 00  // (Q..(Q..(Q...R..
    A420: 0C 53 00 00 8D 53 00 00 08 54 00 00 EC 4F 00 02  // .S...S...T...O..
    A430: EC 4F 01 02 EC 4F 02 02 EC 4F 03 02 EC 4F 04 02  // .O...O...O...O..
    A440: EC 4F 05 02 07 54 00 01 07 54 00 01 0B 4D 00 02  // .O...T...T...M..
    A450: 0B 4D 01 02 0B 4D 02 02 0B 4D 03 02 0B 4D 04 02  // .M...M...M...M..
    A460: 0B 4D 05 02 2C 53 00 00 08 54 00 00 08 54 00 00  // .M..,S...T...T..
    A470: 08 54 00 00 3D 52 00 00 2F 4E 00 02 2F 4E 01 02  // .T..=R../N../N..
    A480: 2F 4E 02 02 2F 4E 03 02 2F 4E 04 02 2F 4E 05 02  // /N../N../N../N..
    A490: 5E 4E 00 02 5E 4E 01 02 5E 4E 02 02 5E 4E 03 02  // ^N..^N..^N..^N..
    A4A0: 5E 4E 04 02 5E 4E 05 02 94 4E 00 02 94 4E 01 02  // ^N..^N...N...N..
    A4B0: 94 4E 02 02 94 4E 03 02 94 4E 04 02 94 4E 05 02  // .N...N...N...N..
    A4C0: 4F 53 00 00 72 53 00 00 30 4F 01 02 30 4F 02 02  // OS..rS..0O..0O..
    A4D0: 8C 4F 01 02 8C 4F 02 02 A6 00 02 01 16 A5 00 00  // .O...O..........
    A4E0: 00 00 00 00 00 00 00 00 4A A5 00 00 00 00 00 00  // ........J.......
    A4F0: 00 00 00 00 00 00 44 AA 00 00 00 00 00 00 00 00  // ......D.........
    A500: 00 00 BE A5 00 00 00 00 96 A5 00 00 00 00 00 00  // ................
    A510: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A520: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 B2 AA  // ................
    A530: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A540: 00 00 00 00 00 00 70 AC 00 00 00 00 00 00 00 00  // ......p.........
    A550: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A560: 12 A6 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A570: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 33 00  // ..............3.
    A580: 02 01 00 08 37 00 00 52 0D 03 00 41 E3 0D 33 05  // ....7..R...A..3.
    A590: 41 01 00 00 00 1B 05 41 0B 01 02 06 00 41 0D 25  // A......A.....A.%
    A5A0: 20 0E 03 0D 25 05 0C 02 0D 05 53 00 00 02 00 00  //  ...%.....S.....
    A5B0: 5B 00 4B 00 01 01 00 00 37 00 00 42 21 00 63 00  // [.K.....7..B!.c.
    A5C0: 1F 00 63 01 39 00 63 03 3F 00 63 02 45 00 5A 5A  // ..c.9.c.?.c.E.ZZ
    A5D0: 5B 03 05 40 00 00 05 04 2D 19 40 00 15 05 40 02  // [..@....-.@...@.
    A5E0: 01 02 0C 00 40 02 00 00 0D 00 5B 02 00 00 E3 0D  // ....@.....[.....
    A5F0: 5B 02 00 00 E7 0D 5B 02 00 00 E8 0D 5B 00 28 00  // [.....[.....[.(.
    A600: 02 01 00 00 37 00 00 01 05 00 00 EC A8 01 00 02  // ....7...........
    A610: 00 00 01 00 02 01 01 00 01 05 00 00 ED A8 01 00  // ................
    A620: 02 00 02 01 00 5B 54 00 01 02 00 00 37 00 00 01  // .....[T.....7...
    A630: 05 00 00 9B 62 01 00 54 00 01 00 01 05 00 00 93  // ....b..T........
    A640: 62 01 00 01 01 01 00 01 56 00 41 03 09 41 00 01  // b.......V.A..A..
    A650: 05 00 00 83 62 01 00 01 02 01 00 41 01 05 00 00  // ....b......A....
    A660: 9B 62 01 00 3C 25 01 00 00 44 36 00 01 05 00 00  // .b..<%...D6.....
    A670: 93 62 01 00 02 00 01 01 00 5B 31 04 01 01 04 00  // .b.......[1.....
    A680: 37 00 00 3D 25 00 00 44 F5 00 4A 05 A3 36 02 00  // 7..=%..D..J..6..
    A690: 00 00 44 30 04 03 05 00 32 00 00 00 03 00 40 97  // ..D0....2.....@.
    A6A0: 36 03 05 46 00 31 00 00 04 02 04 40 03 03 41 05  // 6..F.1.....@..A.
    A6B0: 3E 02 41 40 48 4C 00 33 02 40 41 03 03 41 06 33  // >.A@HL.3.@A..A.3
    A6C0: 02 41 40 43 50 00 33 02 41 40 3E 05 41 00 00 00  // .A@CP.3.A@>.A...
    A6D0: 00 44 70 00 33 05 00 01 00 00 00 3E 05 00 00 00  // .Dp.3......>....
    A6E0: 00 00 44 30 04 51 14 43 22 00 03 03 40 05 03 02  // ..D0.Q.C"...@...
    A6F0: 41 40 2D 05 40 00 00 00 00 03 02 46 40 04 01 00  // A@-.@......F@...
    A700: 00 04 01 01 01 04 01 02 02 04 01 03 03 04 01 04  // ................
    A710: 04 04 01 05 05 04 01 06 06 2D 05 41 40 00 00 00  // .........-.A@...
    A720: 3E 05 41 00 20 00 00 45 B7 00 27 05 41 00 20 00  // >.A. ..E..'.A. .
    A730: 00 03 05 46 00 31 00 00 04 02 05 41 01 02 96 36  // ...F.1.....A...6
    A740: 41 03 05 00 80 1A 06 00 03 00 41 97 36 03 00 40  // A.........A.6..@
    A750: 96 36 3E 02 41 40 44 30 04 33 05 00 01 00 00 00  // .6>.A@D0.3......
    A760: 3E 05 00 00 00 00 00 44 30 04 51 14 43 CE 00 3D  // >......D0.Q.C..=
    A770: 65 00 01 44 32 01 4A 05 B6 36 00 00 01 00 49 32  // e..D2.J..6....I2
    A780: 01 4A 05 C0 36 01 00 00 00 44 32 01 01 05 0C 00  // .J..6....D2.....
    A790: 84 09 81 03 01 05 0D 00 00 00 06 00 01 05 0C 00  // ................
    A7A0: 84 09 81 03 3C E5 0D 00 80 49 2A 01 4A 05 C0 36  // ....<....I*.J..6
    A7B0: 01 00 00 00 49 D1 01 01 05 B8 36 00 00 02 10 03  // ....I.....6.....
    A7C0: 05 41 0A 00 00 00 33 05 41 01 00 00 00 3E 05 41  // .A....3.A....>.A
    A7D0: 00 00 00 00 44 8F 01 51 0A 3C 05 B8 36 00 00 02  // ....D..Q.<..6...
    A7E0: 00 49 4C 01 03 05 41 04 00 00 00 51 0A 33 05 41  // .IL...A....Q.3.A
    A7F0: 01 00 00 00 3E 05 41 00 00 00 00 44 8F 01 3C 05  // ....>.A....D..<.
    A800: AA 36 AD DE AD DE 49 71 01 01 05 B8 36 00 00 00  // .6....Iq....6...
    A810: 00 0D 05 C0 36 01 00 00 00 07 05 B6 36 FF FF FE  // ....6.......6...
    A820: FF 0D 05 02 38 00 01 00 00 51 0A 01 05 97 36 00  // ....8....Q....6.
    A830: 00 00 00 01 05 96 36 00 00 00 00 01 05 A3 36 00  // ......6.......6.
    A840: 00 00 00 07 05 02 38 FF FE FF FF 66 0B 03 04 00  // ......8....f....
    A850: 04 00 02 02 04 00 15 05 00 0A 1A 05 04 16 02 05  // ................
    A860: 00 00 00 00 00 02 02 01 00 2C 05 01 00 00 02 00  // .........,......
    A870: 55 00 02 02 89 02 04 02 05 03 00 00 05 D0 52 35  // U.............R5
    A880: 02 05 00 00 00 00 00 02 02 01 00 2C 05 01 00 00  // ...........,....
    A890: 00 00 55 00 02 02 89 02 04 02 05 03 00 20 00 D0  // ..U.......... ..
    A8A0: 52 35 66 16 3E 0D 42 00 00 44 9B 02 56 00 41 03  // R5f.>.B..D..V.A.
    A8B0: 0C 41 00 00 2D 05 41 0F 00 00 00 09 05 41 F0 FF  // .A..-.A......A..
    A8C0: 00 00 2D 0A 41 42 03 05 46 00 84 00 00 56 08 42  // ..-.AB..F....V.B
    A8D0: 04 04 00 00 00 2D 05 46 04 00 00 00 2D 05 42 04  // .....-.F....-.B.
    A8E0: 00 00 00 3E 02 42 41 45 56 02 02 05 00 00 84 00  // ...>.BAEV.......
    A8F0: 00 2C 02 00 00 02 02 01 00 2C 05 01 00 00 02 00  // .,.......,......
    A900: 02 89 02 04 02 09 02 04 02 05 03 00 00 00 40 02  // ..............@.
    A910: 0A 03 41 52 35 52 16 02 01 02 00 14 05 00 18 1A  // ..AR5R..........
    A920: 05 02 08 03 02 41 00 2D 05 41 00 00 02 00 2D 01  // .....A.-.A....-.
    A930: 41 00 01 02 7B 36 41 03 01 40 04 2D 01 40 02 01  // A...{6A..@.-.@..
    A940: 02 7C 36 40 01 05 68 36 00 00 00 03 01 05 70 36  // .|6@..h6......p6
    A950: FF FF 01 83 03 02 41 00 2D 05 41 00 00 04 00 2D  // ......A.-.A....-
    A960: 01 41 00 01 02 7D 36 41 03 01 40 04 2D 01 40 02  // .A...}6A..@.-.@.
    A970: 01 02 7E 36 40 01 05 69 36 00 00 00 04 01 05 71  // ..~6@..i6......q
    A980: 36 FF FF 00 84 03 02 41 00 2D 05 41 00 00 05 00  // 6......A.-.A....
    A990: 2D 01 41 00 01 02 7F 36 41 03 01 40 04 2D 01 40  // -.A....6A..@.-.@
    A9A0: 02 01 02 80 36 40 01 05 6A 36 00 00 00 05 01 05  // ....6@..j6......
    A9B0: 72 36 FF FF 00 85 03 02 41 00 2D 05 41 00 00 06  // r6......A.-.A...
    A9C0: 00 2D 01 41 00 01 02 81 36 41 03 01 40 04 2D 01  // .-.A....6A..@.-.
    A9D0: 40 02 01 02 82 36 40 01 05 6B 36 00 00 00 06 01  // @....6@..k6.....
    A9E0: 05 73 36 FF FF 00 86 03 05 46 00 31 00 00 03 02  // .s6......F.1....
    A9F0: 41 00 2D 05 41 00 00 00 00 2D 01 41 00 03 01 40  // A.-.A....-.A...@
    AA00: 04 2D 01 40 02 04 02 00 41 04 02 01 40 04 05 04  // .-.@....A...@...
    AA10: 00 00 00 00 04 05 05 00 00 00 00 04 05 06 00 20  // ............... 
    AA20: 00 00 01 05 94 36 00 00 00 80 01 05 95 36 00 20  // .....6.......6. 
    AA30: 00 00 01 02 56 36 41 01 02 57 36 40 01 05 61 36  // ....V6A..W6@..a6
    AA40: FF FF 00 80 01 05 97 36 00 00 00 00 01 05 96 36  // .......6.......6
    AA50: 00 00 00 00 03 00 41 96 36 01 05 B1 36 00 00 00  // ......A.6...6...
    AA60: 00 4A 25 48 00 01 44 F7 03 0D 05 B1 36 08 00 00  // .J%H..D.....6...
    AA70: 00 5C 05 B6 36 00 FF FF FF C6 00 09 00 07 05 C0  // .\..6...........
    AA80: 36 FE FF FF FF 03 05 41 50 C3 00 00 4A 05 A3 36  // 6......AP...J..6
    AA90: 02 00 00 00 49 30 04 51 14 33 05 41 01 00 00 00  // ....I0.Q.3.A....
    AAA0: 3E 05 41 00 00 00 00 49 12 04 5B 00 6D 00 02 01  // >.A....I..[.m...
    AAB0: 00 04 37 00 00 66 16 03 0C 41 04 00 4C 0D 41 02  // ..7..f...A..L.A.
    AAC0: 00 44 1D 00 0D A5 4C 00 02 52 16 01 01 35 39 02  // .D....L..R...59.
    AAD0: 01 01 36 39 03 01 05 00 00 D7 A8 01 00 01 00 37  // ..69...........7
    AAE0: 39 01 00 03 01 41 01 15 05 41 18 01 02 C4 00 41  // 9....A...A.....A
    AAF0: 03 01 41 01 1B 05 41 08 01 02 C9 00 41 03 00 41  // ..A...A.....A..A
    AB00: 37 39 01 02 3B 39 41 03 01 40 03 33 01 40 02 2D  // 79..;9A..@.3.@.-
    AB10: 02 40 41 01 02 3C 39 40 5B 00 BD 01 03 01 04 00  // .@A..<9@[.......
    AB20: 37 00 00 66 08 03 05 46 C0 12 00 00 3D A5 00 02  // 7..f...F....=...
    AB30: 49 1E 00 02 02 00 46 5B 03 05 40 0C 00 00 00 21  // I.....F[..@....!
    AB40: 21 40 00 66 FF 2D 0D 42 81 01 2D 0A 42 40 03 04  // !@.f.-.B..-.B@..
    AB50: 40 00 00 03 04 41 04 00 03 04 00 08 00 01 02 00  // @....A..........
    AB60: 00 40 03 88 40 01 00 03 18 40 01 00 09 8D 40 FF  // .@..@....@....@.
    AB70: 01 3E 8D 40 00 00 49 99 00 01 02 00 00 41 03 00  // .>.@..I......A..
    AB80: 40 01 00 09 05 40 FF 01 00 00 3E 0D 40 00 00 49  // @....@....>.@..I
    AB90: 82 00 03 05 46 00 71 02 00 43 BC 00 21 02 40 46  // ....F.q..C..!.@F
    ABA0: 03 00 41 01 00 09 05 41 00 1E 00 00 1B 05 41 09  // ..A....A......A.
    ABB0: 43 B4 00 7C 02 40 46 7E 05 40 00 00 01 00 03 00  // C..|.@F~.@......
    ABC0: 41 01 00 09 05 41 00 F0 00 00 1B 05 41 0C 75 02  // A....A......A.u.
    ABD0: 40 41 03 02 46 40 3D A5 00 01 49 C8 00 02 02 00  // @A..F@=...I.....
    ABE0: 46 5B 3D E5 00 00 49 0B 01 56 00 40 03 29 40 00  // F[=...I..V.@.)@.
    ABF0: 21 0D 40 09 00 03 02 41 00 2D 02 40 41 01 02 00  // !.@....A.-.@A...
    AC00: 00 40 03 00 41 01 00 09 05 41 00 00 F0 07 1B 05  // .@..A....A......
    AC10: 41 14 02 E2 00 41 3D E5 00 00 49 0B 01 02 05 00  // A....A=...I.....
    AC20: 00 46 C3 23 5B 56 00 40 03 39 40 00 55 38 00 66  // .F.#[V.@.9@.U8.f
    AC30: FF 2D 0D 42 59 01 3E 0C 40 02 00 47 2C 01 2D 0D  // .-.BY.>.@..G,.-.
    AC40: 42 08 00 43 1C 01 33 0C 40 04 00 21 0C 40 06 00  // B..C..3.@..!.@..
    AC50: 2D 0C 40 00 00 03 09 42 00 55 00 00 02 0A 00 40  // -.@....B.U.....@
    AC60: 7C 05 46 40 42 0F 00 7E 01 40 00 02 02 00 40 5B  // |.F@B..~.@....@[
    AC70: 7A 64 00 FF FF 07 00 00 00 00 00 C8 00 3F 00 08  // zd...........?..
    AC80: 00 19 00 40 06 5F 00 40 00 32 00 80 0C 7E 00 60  // ...@._.@.2...~.`
    AC90: 00 64 00 00 32 7F 00 7F 00 64 00 37 6C 01 00 00  // .d..2....d.7l...
    ACA0: 6C 01 00 66 6C 01 00 37 6E 01 00 00 6E 01 00 66  // l..fl..7n...n..f
    ACB0: 6E 01 00 00 00 00 00 00 00 00 00 00 00 00 00 37  // n..............7
    ACC0: 70 01 00 00 70 01 00 66 70 01 00 37 72 01 00 00  // p...p..fp..7r...
    ACD0: 72 01 00 66 72 01 00 00 D5 00 03 03 0C 00 37 00  // r..fr.........7.
    ACE0: 00 66 04 03 04 46 28 00 3E 05 46 00 00 00 00 49  // .f...F(.>.F....I
    ACF0: 3C 00 03 01 00 00 03 01 01 01 03 01 02 02 52 16  // <.............R.
    AD00: 03 01 46 00 1B 05 46 08 02 02 00 00 02 02 01 01  // ..F...F.........
    AD10: 02 02 02 02 3D 65 02 00 49 47 00 2C 22 02 46 3D  // ....=e..IG.,".F=
    AD20: E5 02 00 49 52 00 2C A2 02 46 03 01 40 03 09 05  // ...IR.,..F..@...
    AD30: 40 00 00 00 FC 3E 05 40 00 00 00 D0 49 75 00 01  // @....>.@....Iu..
    AD40: 05 63 C0 00 00 00 40 55 20 02 43 79 00 54 00 63  // .c....@U .Cy.T.c
    AD50: C0 01 01 64 C0 00 56 00 40 03 21 40 02 01 02 65  // ...d..V.@.!@...e
    AD60: C0 40 01 01 66 C0 01 03 31 40 02 01 02 67 C0 40  // .@..f...1@...g.@
    AD70: 01 01 E8 C0 03 3D 65 02 01 44 CC 00 3D E5 02 01  // .....=e..D..=...
    AD80: 44 CC 00 51 02 56 00 40 4A E5 A0 21 80 44 D4 00  // D..Q.V.@J..!.D..
    AD90: 51 14 2D 05 40 01 00 00 00 3E 05 40 A0 86 01 00  // Q.-.@....>.@....
    ADA0: 45 B0 00 5B 4A E5 A0 21 80 49 CC 00 5B FF FF FF  // E..[J..!.I..[...
    ADB0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    ADC0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    ADD0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    ADE0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    ADF0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AE00: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AE10: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AE20: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AE30: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AE40: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AE50: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    AE60: FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00  // ................
    AE70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AE80: 00 00 00 00                                      // ....


WDAT
----
[000h 0000 004h]                   Signature : "WDAT"    [Watchdog Action Table]
[004h 0004 004h]                Table Length : 0000017C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 42
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]               Header Length : 00000020
[028h 0040 002h]                 PCI Segment : 00FF
[02Ah 0042 001h]                     PCI Bus : FF
[02Bh 0043 001h]                  PCI Device : FF
[02Ch 0044 001h]                PCI Function : FF
[02Dh 0045 003h]                    Reserved : 000000
[030h 0048 004h]                Timer Period : 000003E8
[034h 0052 004h]                   Max Count : 000003FF
[038h 0056 004h]                   Min Count : 00000002
[03Ch 0060 001h]       Flags (decoded below) : 81
                                     Enabled : 1
                         Stopped When Asleep : 1
[03Dh 0061 003h]                    Reserved : 000000
[040h 0064 004h]        Watchdog Entry Count : 0000000D

[044h 0068 001h]             Watchdog Action : 01
[045h 0069 001h]                 Instruction : 82
[046h 0070 002h]                    Reserved : 0000

[048h 0072 00Ch]             Register Region : [Generic Address Structure]
[048h 0072 001h]                    Space ID : 00 [SystemMemory]
[049h 0073 001h]                   Bit Width : 20
[04Ah 0074 001h]                  Bit Offset : 00
[04Bh 0075 001h]        Encoded Access Width : 03 [DWord Access:32]
[04Ch 0076 008h]                     Address : 00000000FEB00000

[054h 0084 004h]                       Value : 00000080
[058h 0088 004h]               Register Mask : 00000080

[05Ch 0092 001h]             Watchdog Action : 04
[05Dh 0093 001h]                 Instruction : 01
[05Eh 0094 002h]                    Reserved : 0000

[060h 0096 00Ch]             Register Region : [Generic Address Structure]
[060h 0096 001h]                    Space ID : 00 [SystemMemory]
[061h 0097 001h]                   Bit Width : 20
[062h 0098 001h]                  Bit Offset : 00
[063h 0099 001h]        Encoded Access Width : 03 [DWord Access:32]
[064h 0100 008h]                     Address : 00000000FEB00004

[06Ch 0108 004h]                       Value : 00000000
[070h 0112 004h]               Register Mask : 0000FFFF

[074h 0116 001h]             Watchdog Action : 06
[075h 0117 001h]                 Instruction : 83
[076h 0118 002h]                    Reserved : 0000

[078h 0120 00Ch]             Register Region : [Generic Address Structure]
[078h 0120 001h]                    Space ID : 00 [SystemMemory]
[079h 0121 001h]                   Bit Width : 20
[07Ah 0122 001h]                  Bit Offset : 00
[07Bh 0123 001h]        Encoded Access Width : 03 [DWord Access:32]
[07Ch 0124 008h]                     Address : 00000000FEB00004

[084h 0132 004h]                       Value : 00000000
[088h 0136 004h]               Register Mask : 0000FFFF

[08Ch 0140 001h]             Watchdog Action : 08
[08Dh 0141 001h]                 Instruction : 00
[08Eh 0142 002h]                    Reserved : 0000

[090h 0144 00Ch]             Register Region : [Generic Address Structure]
[090h 0144 001h]                    Space ID : 00 [SystemMemory]
[091h 0145 001h]                   Bit Width : 20
[092h 0146 001h]                  Bit Offset : 00
[093h 0147 001h]        Encoded Access Width : 03 [DWord Access:32]
[094h 0148 008h]                     Address : 00000000FEB00000

[09Ch 0156 004h]                       Value : 00000001
[0A0h 0160 004h]               Register Mask : 00000001

[0A4h 0164 001h]             Watchdog Action : 09
[0A5h 0165 001h]                 Instruction : 82
[0A6h 0166 002h]                    Reserved : 0000

[0A8h 0168 00Ch]             Register Region : [Generic Address Structure]
[0A8h 0168 001h]                    Space ID : 00 [SystemMemory]
[0A9h 0169 001h]                   Bit Width : 20
[0AAh 0170 001h]                  Bit Offset : 00
[0ABh 0171 001h]        Encoded Access Width : 03 [DWord Access:32]
[0ACh 0172 008h]                     Address : 00000000FEB00000

[0B4h 0180 004h]                       Value : 00000001
[0B8h 0184 004h]               Register Mask : 00000001

[0BCh 0188 001h]             Watchdog Action : 0A
[0BDh 0189 001h]                 Instruction : 00
[0BEh 0190 002h]                    Reserved : 0000

[0C0h 0192 00Ch]             Register Region : [Generic Address Structure]
[0C0h 0192 001h]                    Space ID : 00 [SystemMemory]
[0C1h 0193 001h]                   Bit Width : 20
[0C2h 0194 001h]                  Bit Offset : 00
[0C3h 0195 001h]        Encoded Access Width : 03 [DWord Access:32]
[0C4h 0196 008h]                     Address : 00000000FEB00000

[0CCh 0204 004h]                       Value : 00000000
[0D0h 0208 004h]               Register Mask : 00000001

[0D4h 0212 001h]             Watchdog Action : 0B
[0D5h 0213 001h]                 Instruction : 82
[0D6h 0214 002h]                    Reserved : 0000

[0D8h 0216 00Ch]             Register Region : [Generic Address Structure]
[0D8h 0216 001h]                    Space ID : 00 [SystemMemory]
[0D9h 0217 001h]                   Bit Width : 20
[0DAh 0218 001h]                  Bit Offset : 00
[0DBh 0219 001h]        Encoded Access Width : 03 [DWord Access:32]
[0DCh 0220 008h]                     Address : 00000000FEB00000

[0E4h 0228 004h]                       Value : 00000000
[0E8h 0232 004h]               Register Mask : 00000001

[0ECh 0236 001h]             Watchdog Action : 10
[0EDh 0237 001h]                 Instruction : 00
[0EEh 0238 002h]                    Reserved : 0000

[0F0h 0240 00Ch]             Register Region : [Generic Address Structure]
[0F0h 0240 001h]                    Space ID : 00 [SystemMemory]
[0F1h 0241 001h]                   Bit Width : 20
[0F2h 0242 001h]                  Bit Offset : 00
[0F3h 0243 001h]        Encoded Access Width : 03 [DWord Access:32]
[0F4h 0244 008h]                     Address : 00000000FEB00000

[0FCh 0252 004h]                       Value : 00000000
[100h 0256 004h]               Register Mask : 00000004

[104h 0260 001h]             Watchdog Action : 11
[105h 0261 001h]                 Instruction : 82
[106h 0262 002h]                    Reserved : 0000

[108h 0264 00Ch]             Register Region : [Generic Address Structure]
[108h 0264 001h]                    Space ID : 00 [SystemMemory]
[109h 0265 001h]                   Bit Width : 20
[10Ah 0266 001h]                  Bit Offset : 00
[10Bh 0267 001h]        Encoded Access Width : 03 [DWord Access:32]
[10Ch 0268 008h]                     Address : 00000000FEB00000

[114h 0276 004h]                       Value : 00000000
[118h 0280 004h]               Register Mask : 00000004

[11Ch 0284 001h]             Watchdog Action : 12
[11Dh 0285 001h]                 Instruction : 00
[11Eh 0286 002h]                    Reserved : 0000

[120h 0288 00Ch]             Register Region : [Generic Address Structure]
[120h 0288 001h]                    Space ID : 00 [SystemMemory]
[121h 0289 001h]                   Bit Width : 20
[122h 0290 001h]                  Bit Offset : 00
[123h 0291 001h]        Encoded Access Width : 03 [DWord Access:32]
[124h 0292 008h]                     Address : 00000000FEB00000

[12Ch 0300 004h]                       Value : 00000004
[130h 0304 004h]               Register Mask : 00000004

[134h 0308 001h]             Watchdog Action : 13
[135h 0309 001h]                 Instruction : 82
[136h 0310 002h]                    Reserved : 0000

[138h 0312 00Ch]             Register Region : [Generic Address Structure]
[138h 0312 001h]                    Space ID : 00 [SystemMemory]
[139h 0313 001h]                   Bit Width : 20
[13Ah 0314 001h]                  Bit Offset : 00
[13Bh 0315 001h]        Encoded Access Width : 03 [DWord Access:32]
[13Ch 0316 008h]                     Address : 00000000FEB00000

[144h 0324 004h]                       Value : 00000004
[148h 0328 004h]               Register Mask : 00000004

[14Ch 0332 001h]             Watchdog Action : 20
[14Dh 0333 001h]                 Instruction : 00
[14Eh 0334 002h]                    Reserved : 0000

[150h 0336 00Ch]             Register Region : [Generic Address Structure]
[150h 0336 001h]                    Space ID : 00 [SystemMemory]
[151h 0337 001h]                   Bit Width : 20
[152h 0338 001h]                  Bit Offset : 00
[153h 0339 001h]        Encoded Access Width : 03 [DWord Access:32]
[154h 0340 008h]                     Address : 00000000FEB00000

[15Ch 0348 004h]                       Value : 00000002
[160h 0352 004h]               Register Mask : 00000002

[164h 0356 001h]             Watchdog Action : 21
[165h 0357 001h]                 Instruction : 82
[166h 0358 002h]                    Reserved : 0000

[168h 0360 00Ch]             Register Region : [Generic Address Structure]
[168h 0360 001h]                    Space ID : 00 [SystemMemory]
[169h 0361 001h]                   Bit Width : 20
[16Ah 0362 001h]                  Bit Offset : 00
[16Bh 0363 001h]        Encoded Access Width : 03 [DWord Access:32]
[16Ch 0364 008h]                     Address : 00000000FEB00000

[174h 0372 004h]                       Value : 00000002
[178h 0376 004h]               Register Mask : 00000002

Raw Table Data: Length 380 (0x17C)

    0000: 57 44 41 54 7C 01 00 00 01 42 4C 45 4E 4F 56 4F  // WDAT|....BLENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 20 00 00 00 FF 00 FF FF FF 00 00 00  // .... ...........
    0030: E8 03 00 00 FF 03 00 00 02 00 00 00 81 00 00 00  // ................
    0040: 0D 00 00 00 01 82 00 00 00 20 00 03 00 00 B0 FE  // ......... ......
    0050: 00 00 00 00 80 00 00 00 80 00 00 00 04 01 00 00  // ................
    0060: 00 20 00 03 04 00 B0 FE 00 00 00 00 00 00 00 00  // . ..............
    0070: FF FF 00 00 06 83 00 00 00 20 00 03 04 00 B0 FE  // ......... ......
    0080: 00 00 00 00 00 00 00 00 FF FF 00 00 08 00 00 00  // ................
    0090: 00 20 00 03 00 00 B0 FE 00 00 00 00 01 00 00 00  // . ..............
    00A0: 01 00 00 00 09 82 00 00 00 20 00 03 00 00 B0 FE  // ......... ......
    00B0: 00 00 00 00 01 00 00 00 01 00 00 00 0A 00 00 00  // ................
    00C0: 00 20 00 03 00 00 B0 FE 00 00 00 00 00 00 00 00  // . ..............
    00D0: 01 00 00 00 0B 82 00 00 00 20 00 03 00 00 B0 FE  // ......... ......
    00E0: 00 00 00 00 00 00 00 00 01 00 00 00 10 00 00 00  // ................
    00F0: 00 20 00 03 00 00 B0 FE 00 00 00 00 00 00 00 00  // . ..............
    0100: 04 00 00 00 11 82 00 00 00 20 00 03 00 00 B0 FE  // ......... ......
    0110: 00 00 00 00 00 00 00 00 04 00 00 00 12 00 00 00  // ................
    0120: 00 20 00 03 00 00 B0 FE 00 00 00 00 04 00 00 00  // . ..............
    0130: 04 00 00 00 13 82 00 00 00 20 00 03 00 00 B0 FE  // ......... ......
    0140: 00 00 00 00 04 00 00 00 04 00 00 00 20 00 00 00  // ............ ...
    0150: 00 20 00 03 00 00 B0 FE 00 00 00 00 02 00 00 00  // . ..............
    0160: 02 00 00 00 21 82 00 00 00 20 00 03 00 00 B0 FE  // ....!.... ......
    0170: 00 00 00 00 02 00 00 00 02 00 00 00              // ............


WDRT
----
[000h 0000 004h]                   Signature : "WDRT"    [Watchdog Resource Table]
[004h 0004 004h]                Table Length : 00000047
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 6B
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000


[024h 0036 00Ch]            Control Register : [Generic Address Structure]
[024h 0036 001h]                    Space ID : 00 [SystemMemory]
[025h 0037 001h]                   Bit Width : 20
[026h 0038 001h]                  Bit Offset : 00
[027h 0039 001h]        Encoded Access Width : 03 [DWord Access:32]
[028h 0040 008h]                     Address : 00000000FEB00000

[030h 0048 00Ch]              Count Register : [Generic Address Structure]
[030h 0048 001h]                    Space ID : 00 [SystemMemory]
[031h 0049 001h]                   Bit Width : 20
[032h 0050 001h]                  Bit Offset : 00
[033h 0051 001h]        Encoded Access Width : 03 [DWord Access:32]
[034h 0052 008h]                     Address : 00000000FEB00004

[03Ch 0060 002h]               PCI Device ID : FFFF
[03Eh 0062 002h]               PCI Vendor ID : FFFF
[040h 0064 001h]                     PCI Bus : 00
[041h 0065 001h]                  PCI Device : 00
[042h 0066 001h]                PCI Function : 00
[043h 0067 001h]                 PCI Segment : 00
[044h 0068 002h]                   Max Count : 03FF
[046h 0070 001h]               Counter Units : 00

Raw Table Data: Length 71 (0x47)

    0000: 57 44 52 54 47 00 00 00 01 6B 4C 45 4E 4F 56 4F  // WDRTG....kLENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 00 20 00 03 00 00 B0 FE 00 00 00 00  // ..... ..........
    0030: 00 20 00 03 04 00 B0 FE 00 00 00 00 FF FF FF FF  // . ..............
    0040: 00 00 00 00 FF 03 00                             // .......


WSMT
----
[000h 0000 004h]                   Signature : "WSMT"    [Windows SMM Security Mitigations Table]
[004h 0004 004h]                Table Length : 00000028
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 1D
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]            Protection Flags : 00000007
                          FIXED_COMM_BUFFERS : 1
           COMM_BUFFER_NESTED_PTR_PROTECTION : 1
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 1D 4C 45 4E 4F 56 4F  // WSMT(.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 07 00 00 00                          // ........


