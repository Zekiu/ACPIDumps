
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20230628
Copyright (c) 2000 - 2023 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00002BC4  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 02)  MCFG  0x0000003C  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 03)  ASF!  0x000000A5  0x20  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 04)  APIC  0x00000138  0x03  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 05)  CRAT  0x00000F10  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 06)  SLIC  0x00000176  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 07)  SSDT  0x00008416  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 08)  SSDT  0x000005D0  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 09)  TPM2  0x00000034  0x04  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 10)  VFCT  0x00003084  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 11)  BOOT  0x00000028  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 12)  SSDT  0x00000752  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 13)  SSDT  0x000015C0  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 14)  SSDT  0x00000EA5  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 15)  SSDT  0x00000901  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 16)  CDIT  0x00000029  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 17)  UEFI  0x00000236  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 18)  IVRS  0x000001A4  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 19)  DSDT  0x0001A38E  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 20)  SSDT  0x00000413  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 21)  SSDT  0x0000094E  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 22)  WSMT  0x00000028  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 23)  SSDT  0x00001D35  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 24)  SSDT  0x000000F8  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 25)  SSDT  0x00004FE3  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 26)  SSDT  0x00002A87  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 27)  SSDT  0x00000471  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 28)  SSDT  0x000094A1  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 29)  FACP  0x0000010C  0x05  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 30)  FPDT  0x00000044  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 31)  SSDT  0x0000082A  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 32)  SSDT  0x000007D5  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 33)  MSDM  0x00000055  0x03  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 34)  SSDT  0x000015B3  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 35)  SSDT  0x00000634  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 36)  SSDT  0x0000008D  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 37)  SSDT  0x000006D3  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 38)  HPET  0x00000038  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 39)  SSDT  0x0000547E  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 40)  SSDT  0x00000E77  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 41)  FACS  0x00000040  0x02
 42)  BGRT  0x00000038  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 43)  SSDT  0x000096E3  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000

Found 43 ACPI tables in acpidump

APIC
----
[000h 0000 004h]                   Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004 004h]                Table Length : 00000138
[008h 0008 001h]                    Revision : 03
[009h 0009 001h]                    Checksum : 2C
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]          Local Apic Address : FEE00000
[028h 0040 004h]       Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044 001h]               Subtable Type : 00 [Processor Local APIC]
[02Dh 0045 001h]                      Length : 08
[02Eh 0046 001h]                Processor ID : 00
[02Fh 0047 001h]               Local Apic ID : 00
[030h 0048 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052 001h]               Subtable Type : 00 [Processor Local APIC]
[035h 0053 001h]                      Length : 08
[036h 0054 001h]                Processor ID : 01
[037h 0055 001h]               Local Apic ID : 01
[038h 0056 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060 001h]               Subtable Type : 00 [Processor Local APIC]
[03Dh 0061 001h]                      Length : 08
[03Eh 0062 001h]                Processor ID : 02
[03Fh 0063 001h]               Local Apic ID : 02
[040h 0064 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068 001h]               Subtable Type : 00 [Processor Local APIC]
[045h 0069 001h]                      Length : 08
[046h 0070 001h]                Processor ID : 03
[047h 0071 001h]               Local Apic ID : 03
[048h 0072 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076 001h]               Subtable Type : 00 [Processor Local APIC]
[04Dh 0077 001h]                      Length : 08
[04Eh 0078 001h]                Processor ID : 04
[04Fh 0079 001h]               Local Apic ID : 04
[050h 0080 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084 001h]               Subtable Type : 00 [Processor Local APIC]
[055h 0085 001h]                      Length : 08
[056h 0086 001h]                Processor ID : 05
[057h 0087 001h]               Local Apic ID : 05
[058h 0088 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092 001h]               Subtable Type : 00 [Processor Local APIC]
[05Dh 0093 001h]                      Length : 08
[05Eh 0094 001h]                Processor ID : 06
[05Fh 0095 001h]               Local Apic ID : 06
[060h 0096 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100 001h]               Subtable Type : 00 [Processor Local APIC]
[065h 0101 001h]                      Length : 08
[066h 0102 001h]                Processor ID : 07
[067h 0103 001h]               Local Apic ID : 07
[068h 0104 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108 001h]               Subtable Type : 00 [Processor Local APIC]
[06Dh 0109 001h]                      Length : 08
[06Eh 0110 001h]                Processor ID : 08
[06Fh 0111 001h]               Local Apic ID : 08
[070h 0112 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[074h 0116 001h]               Subtable Type : 00 [Processor Local APIC]
[075h 0117 001h]                      Length : 08
[076h 0118 001h]                Processor ID : 09
[077h 0119 001h]               Local Apic ID : 09
[078h 0120 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[07Ch 0124 001h]               Subtable Type : 00 [Processor Local APIC]
[07Dh 0125 001h]                      Length : 08
[07Eh 0126 001h]                Processor ID : 0A
[07Fh 0127 001h]               Local Apic ID : 0A
[080h 0128 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[084h 0132 001h]               Subtable Type : 00 [Processor Local APIC]
[085h 0133 001h]                      Length : 08
[086h 0134 001h]                Processor ID : 0B
[087h 0135 001h]               Local Apic ID : 0B
[088h 0136 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[08Ch 0140 001h]               Subtable Type : 00 [Processor Local APIC]
[08Dh 0141 001h]                      Length : 08
[08Eh 0142 001h]                Processor ID : 0C
[08Fh 0143 001h]               Local Apic ID : 0C
[090h 0144 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[094h 0148 001h]               Subtable Type : 00 [Processor Local APIC]
[095h 0149 001h]                      Length : 08
[096h 0150 001h]                Processor ID : 0D
[097h 0151 001h]               Local Apic ID : 0D
[098h 0152 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[09Ch 0156 001h]               Subtable Type : 00 [Processor Local APIC]
[09Dh 0157 001h]                      Length : 08
[09Eh 0158 001h]                Processor ID : 0E
[09Fh 0159 001h]               Local Apic ID : 0E
[0A0h 0160 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0A4h 0164 001h]               Subtable Type : 00 [Processor Local APIC]
[0A5h 0165 001h]                      Length : 08
[0A6h 0166 001h]                Processor ID : 0F
[0A7h 0167 001h]               Local Apic ID : 0F
[0A8h 0168 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0ACh 0172 001h]               Subtable Type : 01 [I/O APIC]
[0ADh 0173 001h]                      Length : 0C
[0AEh 0174 001h]                 I/O Apic ID : 21
[0AFh 0175 001h]                    Reserved : 00
[0B0h 0176 004h]                     Address : FEC00000
[0B4h 0180 004h]                   Interrupt : 00000000

[0B8h 0184 001h]               Subtable Type : 01 [I/O APIC]
[0B9h 0185 001h]                      Length : 0C
[0BAh 0186 001h]                 I/O Apic ID : 22
[0BBh 0187 001h]                    Reserved : 00
[0BCh 0188 004h]                     Address : FEC01000
[0C0h 0192 004h]                   Interrupt : 00000018

[0C4h 0196 001h]               Subtable Type : 02 [Interrupt Source Override]
[0C5h 0197 001h]                      Length : 0A
[0C6h 0198 001h]                         Bus : 00
[0C7h 0199 001h]                      Source : 00
[0C8h 0200 004h]                   Interrupt : 00000002
[0CCh 0204 002h]       Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[0CEh 0206 001h]               Subtable Type : 02 [Interrupt Source Override]
[0CFh 0207 001h]                      Length : 0A
[0D0h 0208 001h]                         Bus : 00
[0D1h 0209 001h]                      Source : 09
[0D2h 0210 004h]                   Interrupt : 00000009
[0D6h 0214 002h]       Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

[0D8h 0216 001h]               Subtable Type : 04 [Local APIC NMI]
[0D9h 0217 001h]                      Length : 06
[0DAh 0218 001h]                Processor ID : 00
[0DBh 0219 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0DDh 0221 001h]        Interrupt Input LINT : 01

[0DEh 0222 001h]               Subtable Type : 04 [Local APIC NMI]
[0DFh 0223 001h]                      Length : 06
[0E0h 0224 001h]                Processor ID : 01
[0E1h 0225 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0E3h 0227 001h]        Interrupt Input LINT : 01

[0E4h 0228 001h]               Subtable Type : 04 [Local APIC NMI]
[0E5h 0229 001h]                      Length : 06
[0E6h 0230 001h]                Processor ID : 02
[0E7h 0231 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0E9h 0233 001h]        Interrupt Input LINT : 01

[0EAh 0234 001h]               Subtable Type : 04 [Local APIC NMI]
[0EBh 0235 001h]                      Length : 06
[0ECh 0236 001h]                Processor ID : 03
[0EDh 0237 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0EFh 0239 001h]        Interrupt Input LINT : 01

[0F0h 0240 001h]               Subtable Type : 04 [Local APIC NMI]
[0F1h 0241 001h]                      Length : 06
[0F2h 0242 001h]                Processor ID : 04
[0F3h 0243 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0F5h 0245 001h]        Interrupt Input LINT : 01

[0F6h 0246 001h]               Subtable Type : 04 [Local APIC NMI]
[0F7h 0247 001h]                      Length : 06
[0F8h 0248 001h]                Processor ID : 05
[0F9h 0249 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0FBh 0251 001h]        Interrupt Input LINT : 01

[0FCh 0252 001h]               Subtable Type : 04 [Local APIC NMI]
[0FDh 0253 001h]                      Length : 06
[0FEh 0254 001h]                Processor ID : 06
[0FFh 0255 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[101h 0257 001h]        Interrupt Input LINT : 01

[102h 0258 001h]               Subtable Type : 04 [Local APIC NMI]
[103h 0259 001h]                      Length : 06
[104h 0260 001h]                Processor ID : 07
[105h 0261 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[107h 0263 001h]        Interrupt Input LINT : 01

[108h 0264 001h]               Subtable Type : 04 [Local APIC NMI]
[109h 0265 001h]                      Length : 06
[10Ah 0266 001h]                Processor ID : 08
[10Bh 0267 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[10Dh 0269 001h]        Interrupt Input LINT : 01

[10Eh 0270 001h]               Subtable Type : 04 [Local APIC NMI]
[10Fh 0271 001h]                      Length : 06
[110h 0272 001h]                Processor ID : 09
[111h 0273 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[113h 0275 001h]        Interrupt Input LINT : 01

[114h 0276 001h]               Subtable Type : 04 [Local APIC NMI]
[115h 0277 001h]                      Length : 06
[116h 0278 001h]                Processor ID : 0A
[117h 0279 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[119h 0281 001h]        Interrupt Input LINT : 01

[11Ah 0282 001h]               Subtable Type : 04 [Local APIC NMI]
[11Bh 0283 001h]                      Length : 06
[11Ch 0284 001h]                Processor ID : 0B
[11Dh 0285 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[11Fh 0287 001h]        Interrupt Input LINT : 01

[120h 0288 001h]               Subtable Type : 04 [Local APIC NMI]
[121h 0289 001h]                      Length : 06
[122h 0290 001h]                Processor ID : 0C
[123h 0291 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[125h 0293 001h]        Interrupt Input LINT : 01

[126h 0294 001h]               Subtable Type : 04 [Local APIC NMI]
[127h 0295 001h]                      Length : 06
[128h 0296 001h]                Processor ID : 0D
[129h 0297 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[12Bh 0299 001h]        Interrupt Input LINT : 01

[12Ch 0300 001h]               Subtable Type : 04 [Local APIC NMI]
[12Dh 0301 001h]                      Length : 06
[12Eh 0302 001h]                Processor ID : 0E
[12Fh 0303 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[131h 0305 001h]        Interrupt Input LINT : 01

[132h 0306 001h]               Subtable Type : 04 [Local APIC NMI]
[133h 0307 001h]                      Length : 06
[134h 0308 001h]                Processor ID : 0F
[135h 0309 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[137h 0311 001h]        Interrupt Input LINT : 01

Raw Table Data: Length 312 (0x138)

    0000: 41 50 49 43 38 01 00 00 03 2C 4C 45 4E 4F 56 4F  // APIC8....,LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 01 01 01 00 00 00 00 08 02 02  // ................
    0040: 01 00 00 00 00 08 03 03 01 00 00 00 00 08 04 04  // ................
    0050: 01 00 00 00 00 08 05 05 01 00 00 00 00 08 06 06  // ................
    0060: 01 00 00 00 00 08 07 07 01 00 00 00 00 08 08 08  // ................
    0070: 01 00 00 00 00 08 09 09 01 00 00 00 00 08 0A 0A  // ................
    0080: 01 00 00 00 00 08 0B 0B 01 00 00 00 00 08 0C 0C  // ................
    0090: 01 00 00 00 00 08 0D 0D 01 00 00 00 00 08 0E 0E  // ................
    00A0: 01 00 00 00 00 08 0F 0F 01 00 00 00 01 0C 21 00  // ..............!.
    00B0: 00 00 C0 FE 00 00 00 00 01 0C 22 00 00 10 C0 FE  // ..........".....
    00C0: 18 00 00 00 02 0A 00 00 02 00 00 00 00 00 02 0A  // ................
    00D0: 00 09 09 00 00 00 0F 00 04 06 00 05 00 01 04 06  // ................
    00E0: 01 05 00 01 04 06 02 05 00 01 04 06 03 05 00 01  // ................
    00F0: 04 06 04 05 00 01 04 06 05 05 00 01 04 06 06 05  // ................
    0100: 00 01 04 06 07 05 00 01 04 06 08 05 00 01 04 06  // ................
    0110: 09 05 00 01 04 06 0A 05 00 01 04 06 0B 05 00 01  // ................
    0120: 04 06 0C 05 00 01 04 06 0D 05 00 01 04 06 0E 05  // ................
    0130: 00 01 04 06 0F 05 00 01                          // ........


ASF!
----
[000h 0000 004h]                   Signature : "ASF!"    [Alert Standard Format Table]
[004h 0004 004h]                Table Length : 000000A5
[008h 0008 001h]                    Revision : 20
[009h 0009 001h]                    Checksum : 0B
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 001h]               Subtable Type : 00 [ASF Information]
[025h 0037 001h]                    Reserved : 00
[026h 0038 002h]                      Length : 0010
[028h 0040 001h]         Minimum Reset Value : 00
[029h 0041 001h]    Minimum Polling Interval : FF
[02Ah 0042 002h]                   System ID : 0001
[02Ch 0044 004h]             Manufacturer ID : 57010000
[030h 0048 001h]                       Flags : 00
[031h 0049 003h]                    Reserved : 000000

[034h 0052 001h]               Subtable Type : 01 [ASF Alerts]
[035h 0053 001h]                    Reserved : 00
[036h 0054 002h]                      Length : 002C
[038h 0056 001h]                  AssertMask : 00
[039h 0057 001h]                DeassertMask : 00
[03Ah 0058 001h]                 Alert Count : 03
[03Bh 0059 001h]           Alert Data Length : 0C

[03Ch 0060 001h]                     Address : 80
[03Dh 0061 001h]                     Command : 23
[03Eh 0062 001h]                        Mask : 01
[03Fh 0063 001h]                       Value : 01
[040h 0064 001h]                  SensorType : 01
[041h 0065 001h]                        Type : 01
[042h 0066 001h]                      Offset : 00
[043h 0067 001h]                  SourceType : 39
[044h 0068 001h]                    Severity : 10
[045h 0069 001h]                SensorNumber : 00
[046h 0070 001h]                      Entity : 07
[047h 0071 001h]                    Instance : 00

[048h 0072 001h]                     Address : 80
[049h 0073 001h]                     Command : 23
[04Ah 0074 001h]                        Mask : 02
[04Bh 0075 001h]                       Value : 02
[04Ch 0076 001h]                  SensorType : 01
[04Dh 0077 001h]                        Type : 01
[04Eh 0078 001h]                      Offset : 00
[04Fh 0079 001h]                  SourceType : 39
[050h 0080 001h]                    Severity : 10
[051h 0081 001h]                SensorNumber : 01
[052h 0082 001h]                      Entity : 07
[053h 0083 001h]                    Instance : 00

[054h 0084 001h]                     Address : 80
[055h 0085 001h]                     Command : 23
[056h 0086 001h]                        Mask : 04
[057h 0087 001h]                       Value : 04
[058h 0088 001h]                  SensorType : 01
[059h 0089 001h]                        Type : 01
[05Ah 0090 001h]                      Offset : 00
[05Bh 0091 001h]                  SourceType : 39
[05Ch 0092 001h]                    Severity : 10
[05Dh 0093 001h]                SensorNumber : 02
[05Eh 0094 001h]                      Entity : 07
[05Fh 0095 001h]                    Instance : 00

[060h 0096 001h]               Subtable Type : 02 [ASF Remote Control]
[061h 0097 001h]                    Reserved : 00
[062h 0098 002h]                      Length : 0018
[064h 0100 001h]               Control Count : 04
[065h 0101 001h]         Control Data Length : 04
[066h 0102 002h]                    Reserved : 0000

[068h 0104 001h]                    Function : 00
[069h 0105 001h]                     Address : A9
[06Ah 0106 001h]                     Command : 50
[06Bh 0107 001h]                       Value : 00

[06Ch 0108 001h]                    Function : 01
[06Dh 0109 001h]                     Address : A9
[06Eh 0110 001h]                     Command : 52
[06Fh 0111 001h]                       Value : 00

[070h 0112 001h]                    Function : 02
[071h 0113 001h]                     Address : A9
[072h 0114 001h]                     Command : 51
[073h 0115 001h]                       Value : 00

[074h 0116 001h]                    Function : 03
[075h 0117 001h]                     Address : A9
[076h 0118 001h]                     Command : 53
[077h 0119 001h]                       Value : 00

[078h 0120 001h]               Subtable Type : 03 [ASF RMCP Boot Options]
[079h 0121 001h]                    Reserved : 00
[07Ah 0122 002h]                      Length : 0017
[07Ch 0124 007h]                Capabilities : 21 F8 00 00 00 1B F0
[083h 0131 001h]             Completion Code : 00
[084h 0132 004h]               Enterprise ID : 57010000
[088h 0136 001h]                     Command : 00
[089h 0137 002h]                   Parameter : 0000
[08Bh 0139 002h]                Boot Options : 0001
[08Dh 0141 002h]              Oem Parameters : 0000

[08Fh 0143 001h]               Subtable Type : 84 [ASF Address]
[090h 0144 001h]                    Reserved : 00
[091h 0145 002h]                      Length : 0016
[093h 0147 001h]               Eprom Address : 00
[094h 0148 001h]                Device Count : 10
[095h 0149 001h]                   Addresses : A0 A2 A4 00 00 00 00 00 00 00 00 00 00 00 00 00 


Raw Table Data: Length 165 (0xA5)

    0000: 41 53 46 21 A5 00 00 00 20 0B 4C 45 4E 4F 56 4F  // ASF!.... .LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 00 00 10 00 00 FF 01 00 00 00 01 57  // ...............W
    0030: 00 00 00 00 01 00 2C 00 00 00 03 0C 80 23 01 01  // ......,......#..
    0040: 01 01 00 39 10 00 07 00 80 23 02 02 01 01 00 39  // ...9.....#.....9
    0050: 10 01 07 00 80 23 04 04 01 01 00 39 10 02 07 00  // .....#.....9....
    0060: 02 00 18 00 04 04 00 00 00 A9 50 00 01 A9 52 00  // ..........P...R.
    0070: 02 A9 51 00 03 A9 53 00 03 00 17 00 21 F8 00 00  // ..Q...S.....!...
    0080: 00 1B F0 00 00 00 01 57 00 00 00 01 00 00 00 84  // .......W........
    0090: 00 16 00 00 10 A0 A2 A4 00 00 00 00 00 00 00 00  // ................
    00A0: 00 00 00 00 00                                   // .....


BGRT
----
[000h 0000 004h]                   Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : A0
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 002h]                     Version : 0001
[026h 0038 001h]      Status (decoded below) : 00
                                   Displayed : 0
                          Orientation Offset : 0
[027h 0039 001h]                  Image Type : 00
[028h 0040 008h]               Image Address : 00000000AA679018
[030h 0048 004h]               Image OffsetX : 000003CD
[034h 0052 004h]               Image OffsetY : 00000204

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 A0 4C 45 4E 4F 56 4F  // BGRT8.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 01 00 00 00 18 90 67 AA 00 00 00 00  // ..........g.....
    0030: CD 03 00 00 04 02 00 00                          // ........


BOOT
----
[000h 0000 004h]                   Signature : "BOOT"    [Simple Boot Flag Table]
[004h 0004 004h]                Table Length : 00000028
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : F7
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 001h]         Boot Register Index : 44
[025h 0037 003h]                    Reserved : 000000

Raw Table Data: Length 40 (0x28)

    0000: 42 4F 4F 54 28 00 00 00 01 F7 4C 45 4E 4F 56 4F  // BOOT(.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 44 00 00 00                          // ....D...


CDIT
----
[000h 0000 004h]                   Signature : "CDIT"    
[004h 0004 004h]                Table Length : 00000029
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 3F
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000


**** Unknown ACPI table signature [CDIT]


Raw Table Data: Length 41 (0x29)

    0000: 43 44 49 54 29 00 00 00 01 3F 4C 45 4E 4F 56 4F  // CDIT)....?LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 01 00 00 00 0A                       // .........


CRAT
----
[000h 0000 004h]                   Signature : "CRAT"    
[004h 0004 004h]                Table Length : 00000F10
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 71
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000


**** Unknown ACPI table signature [CRAT]


Raw Table Data: Length 3856 (0xF10)

    0000: 43 52 41 54 10 0F 00 00 01 71 4C 45 4E 4F 56 4F  // CRAT.....qLENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 3D 00 00 00 01 00 00 00 00 00 00 00  // ....=...........
    0030: 00 28 00 00 05 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0040: 10 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 01 28 00 00 01 00 00 00  // .........(......
    0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0A 00  // ................
    0070: 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00  // ....@...........
    0080: 01 28 00 00 01 00 00 00 00 00 00 00 00 00 0C 00  // .(..............
    0090: 00 00 00 00 00 00 F4 BF 00 00 00 00 40 00 00 00  // ............@...
    00A0: 00 00 00 00 00 00 00 00 01 28 00 00 01 00 00 00  // .........(......
    00B0: 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 40  // ...............@
    00C0: 07 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00  // ....@...........
    00D0: 02 40 00 00 0B 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    00E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0100: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0110: 02 40 00 00 0D 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0130: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0140: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0150: 02 40 00 00 0F 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0170: 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00  // ................
    0180: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0190: 02 40 00 00 0F 00 00 00 00 00 00 00 FF 00 00 00  // .@..............
    01A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00  // .............@..
    01C0: 03 01 40 00 10 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    01D0: 02 40 00 00 0B 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    01E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0200: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0210: 02 40 00 00 0D 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0220: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0230: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0240: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0250: 02 40 00 00 0F 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0270: 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00  // ................
    0280: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0290: 02 40 00 00 0B 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    02A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02B0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    02C0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    02D0: 02 40 00 00 0D 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    02E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0300: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0310: 02 40 00 00 0F 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0320: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0330: 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00  // ................
    0340: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0350: 02 40 00 00 0B 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0360: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0370: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0380: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0390: 02 40 00 00 0D 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    03A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03B0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    03C0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    03D0: 02 40 00 00 0F 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    03E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00  // ................
    0400: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0410: 02 40 00 00 0B 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0420: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0430: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0440: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0450: 02 40 00 00 0D 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0460: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0470: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0480: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0490: 02 40 00 00 0F 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    04A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00  // ................
    04C0: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    04D0: 02 40 00 00 0B 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    04E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0500: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0510: 02 40 00 00 0D 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0520: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0530: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0540: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0550: 02 40 00 00 0F 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0560: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0570: 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00  // ................
    0580: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0590: 02 40 00 00 0B 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    05A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05B0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    05C0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    05D0: 02 40 00 00 0D 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    05E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0600: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0610: 02 40 00 00 0F 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0620: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0630: 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00  // ................
    0640: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0650: 02 40 00 00 0B 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0660: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0670: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0680: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0690: 02 40 00 00 0D 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    06A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06B0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    06C0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    06D0: 02 40 00 00 0F 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    06E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00  // ................
    0700: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0710: 03 40 00 00 0B 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0730: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0740: FF 48 00 00 FF 48 00 00 0F 48 00 00 00 00 00 00  // .H...H...H......
    0750: 03 40 00 00 0D 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0760: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0770: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0780: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0790: 03 40 00 00 AB 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    07A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07B0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    07C0: 04 08 00 00 08 08 00 00 FF 48 00 00 00 00 00 00  // .........H......
    07D0: 03 40 00 00 AD 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    07E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0800: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    0810: 03 40 00 00 0B 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0820: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0830: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0840: FF 48 00 00 FF 48 00 00 0F 48 00 00 00 00 00 00  // .H...H...H......
    0850: 03 40 00 00 0D 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0860: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0870: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0880: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0890: 03 40 00 00 AB 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    08A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08B0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    08C0: 04 08 00 00 08 08 00 00 FF 48 00 00 00 00 00 00  // .........H......
    08D0: 03 40 00 00 AD 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    08E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0900: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    0910: 03 40 00 00 0B 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0920: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0930: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0940: FF 48 00 00 FF 48 00 00 0F 48 00 00 00 00 00 00  // .H...H...H......
    0950: 03 40 00 00 0D 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0960: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0970: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0980: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0990: 03 40 00 00 AB 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    09A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09B0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    09C0: 04 08 00 00 08 08 00 00 FF 48 00 00 00 00 00 00  // .........H......
    09D0: 03 40 00 00 AD 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    09E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0A00: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    0A10: 03 40 00 00 0B 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0A20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A30: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0A40: FF 48 00 00 FF 48 00 00 0F 48 00 00 00 00 00 00  // .H...H...H......
    0A50: 03 40 00 00 0D 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0A60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A70: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0A80: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0A90: 03 40 00 00 AB 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0AA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AB0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0AC0: 04 08 00 00 08 08 00 00 FF 48 00 00 00 00 00 00  // .........H......
    0AD0: 03 40 00 00 AD 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0AE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AF0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0B00: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    0B10: 03 40 00 00 0B 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0B20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B30: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0B40: FF 48 00 00 FF 48 00 00 0F 48 00 00 00 00 00 00  // .H...H...H......
    0B50: 03 40 00 00 0D 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0B60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B70: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0B80: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0B90: 03 40 00 00 AB 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0BA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BB0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0BC0: 04 08 00 00 08 08 00 00 FF 48 00 00 00 00 00 00  // .........H......
    0BD0: 03 40 00 00 AD 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0BE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BF0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0C00: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    0C10: 03 40 00 00 0B 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0C20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C30: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0C40: FF 48 00 00 FF 48 00 00 0F 48 00 00 00 00 00 00  // .H...H...H......
    0C50: 03 40 00 00 0D 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0C60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C70: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0C80: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0C90: 03 40 00 00 AB 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0CA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CB0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0CC0: 04 08 00 00 08 08 00 00 FF 48 00 00 00 00 00 00  // .........H......
    0CD0: 03 40 00 00 AD 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0CE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CF0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0D00: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    0D10: 03 40 00 00 0B 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0D20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D30: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0D40: FF 48 00 00 FF 48 00 00 0F 48 00 00 00 00 00 00  // .H...H...H......
    0D50: 03 40 00 00 0D 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0D60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D70: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0D80: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0D90: 03 40 00 00 AB 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0DA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DB0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0DC0: 04 08 00 00 08 08 00 00 FF 48 00 00 00 00 00 00  // .........H......
    0DD0: 03 40 00 00 AD 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0DE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DF0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0E00: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................
    0E10: 03 40 00 00 0B 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0E20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E30: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0E40: FF 48 00 00 FF 48 00 00 0F 48 00 00 00 00 00 00  // .H...H...H......
    0E50: 03 40 00 00 0D 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0E60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E70: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0E80: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0E90: 03 40 00 00 AB 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0EA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EB0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0EC0: 04 08 00 00 08 08 00 00 FF 48 00 00 00 00 00 00  // .........H......
    0ED0: 03 40 00 00 AD 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0EE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EF0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0F00: 00 00 02 02 00 00 04 02 00 00 00 00 00 00 00 00  // ................


DSDT
----
DefinitionBlock ("", "DSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.ACDC.HONR, IntObj)
    External (_SB_.ACDC.MINR, IntObj)
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.APTS, MethodObj)    // 1 Arguments
    External (_SB_.AWAK, MethodObj)    // 1 Arguments
    External (_SB_.CNFG, IntObj)
    External (_SB_.EPSW, UnknownObj)
    External (_SB_.GZFD.HTPL, MethodObj)    // 0 Arguments
    External (_SB_.KBLT, IntObj)
    External (_SB_.LSKD, UnknownObj)
    External (_SB_.M009, MethodObj)    // 1 Arguments
    External (_SB_.M010, MethodObj)    // 2 Arguments
    External (_SB_.NPCF, DeviceObj)
    External (_SB_.PCI0.GFX0.VGA_.LCD_, DeviceObj)
    External (_SB_.PCI0.GPP0.GSTA, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.PEGP, DeviceObj)
    External (_SB_.PCI0.GPP0.PEGP.EDP0, DeviceObj)
    External (_SB_.PCI0.GPP0.PG00._ON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPC0.EC0_.ADSL, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.CGTC, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.CPP1, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.CPP2, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.CPP3, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.ESLP, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.LFCM, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.TDC1, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.TDC2, UnknownObj)
    External (_SB_.PCI0.LPC0.INSM, UnknownObj)
    External (_SB_.PCI0.LPC0.TPOS, UnknownObj)
    External (_SB_.PCI0.VGA_.LCD_, DeviceObj)
    External (_SB_.TPM2.PTS_, MethodObj)    // 1 Arguments
    External (_SB_.YKBT, IntObj)
    External (AFN4, MethodObj)    // 1 Arguments
    External (AFN7, MethodObj)    // 1 Arguments
    External (M000, MethodObj)    // 1 Arguments
    External (M017, MethodObj)    // 6 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M020, MethodObj)    // 5 Arguments
    External (M034, MethodObj)    // 1 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M600, MethodObj)    // 2 Arguments
    External (M601, MethodObj)    // 6 Arguments
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (M652, FieldUnitObj)
    External (MPTS, MethodObj)    // 1 Arguments
    External (MWAK, MethodObj)    // 1 Arguments

    OperationRegion (DBG0, SystemIO, 0x80, One)
    Field (DBG0, ByteAcc, NoLock, Preserve)
    {
        IO80,   8
    }

    OperationRegion (DBG1, SystemIO, 0x80, 0x02)
    Field (DBG1, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    OperationRegion (DBG2, SystemIO, 0x80, 0x02)
    Field (DBG1, WordAcc, NoLock, Preserve)
    {
        P80B,   16
    }

    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ACMX,   8, 
        ACMA,   8
    }

    IndexField (ACMX, ACMA, ByteAcc, NoLock, Preserve)
    {
        Offset (0xB9), 
        IMEN,   8
    }

    OperationRegion (PSMI, SystemIO, 0xB0, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    OperationRegion (PMRG, SystemIO, 0x0CD6, 0x02)
    Field (PMRG, ByteAcc, NoLock, Preserve)
    {
        PMRI,   8, 
        PMRD,   8
    }

    IndexField (PMRI, PMRD, ByteAcc, NoLock, Preserve)
    {
            ,   6, 
        HPEN,   1, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1
    }

    OperationRegion (GSMG, SystemMemory, 0xFED81500, 0x03FF)
    Field (GSMG, AnyAcc, NoLock, Preserve)
    {
        Offset (0x5C), 
        Offset (0x5E), 
        GS23,   1, 
            ,   5, 
        GV23,   1, 
        GE23,   1, 
        Offset (0xA0), 
        Offset (0xA2), 
        GS40,   1, 
            ,   5, 
        GV40,   1, 
        GE40,   1
    }

    OperationRegion (GSMM, SystemMemory, 0xFED80000, 0x1000)
    Field (GSMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x288), 
            ,   1, 
        CLPS,   1, 
        Offset (0x2B0), 
            ,   2, 
        SLPS,   2, 
        Offset (0x3BB), 
            ,   6, 
        PWDE,   1
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
            ,   14, 
        PEWS,   1, 
        WSTA,   1, 
            ,   14, 
        PEWD,   1
    }

    OperationRegion (IOCC, SystemIO, 0x0400, 0x80)
    Field (IOCC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   2, 
        RTCS,   1
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        PRWP [One] = Arg1
        If ((DAS3 == Zero))
        {
            If ((Arg1 <= 0x03))
            {
                PRWP [One] = Zero
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Method (SPTS, 1, NotSerialized)
    {
        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        CLPS = One
        SLPS = One
        PEWS = PEWS /* \PEWS */
    }

    Method (SWAK, 1, NotSerialized)
    {
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        PEWS = PEWS /* \PEWS */
        PEWD = Zero
        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Method (TPST, 1, Serialized)
    {
        M000 (Arg0)
    }

    OperationRegion (GNVS, SystemMemory, 0xBAF3DA98, 0x00000196)
    Field (GNVS, AnyAcc, NoLock, Preserve)
    {
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        BRTL,   8, 
        TLST,   8, 
        IGDS,   8, 
        LCDA,   16, 
        CSTE,   16, 
        NSTE,   16, 
        CADL,   16, 
        PADL,   16, 
        LIDS,   8, 
        PWRS,   8, 
        BVAL,   32, 
        ADDL,   16, 
        BCMD,   8, 
        SBFN,   8, 
        DID,    32, 
        INFO,   2048, 
        TOML,   8, 
        TOMH,   8, 
        CEBP,   8, 
        C0LS,   8, 
        C1LS,   8, 
        C0HS,   8, 
        C1HS,   8, 
        ROMS,   32, 
        MUXF,   8, 
        PDDN,   8, 
        CNSB,   8, 
        RDHW,   8, 
        DAS3,   8, 
        TNBH,   8, 
        TCP0,   8, 
        TCP1,   8, 
        ATNB,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PWMN,   8, 
        LPTY,   8, 
        M92D,   8, 
        WKPM,   8, 
        ALST,   8, 
        AFUC,   8, 
        EXUS,   8, 
        GV0E,   8, 
        WLSH,   8, 
        TSSS,   8, 
        AOZP,   8, 
        TZFG,   8, 
        BPS0,   8, 
        NAPC,   8, 
        PCBA,   32, 
        PCBL,   32, 
        WLAN,   8, 
        BLTH,   8, 
        GPSS,   8, 
        NFCS,   8, 
        SBTY,   8, 
        BDID,   16, 
        MWTT,   8, 
        ACPM,   8, 
        KBCS,   8, 
        ACEC,   8, 
        DPTC,   8, 
        ECTL,   8, 
        MM64,   8, 
        HMB1,   64, 
        HMB2,   64, 
        HMM1,   64, 
        HMM2,   64, 
        HML1,   64, 
        HML2,   64, 
        WOVS,   8, 
        TCNT,   8, 
        TOPM,   32, 
        MB32,   32, 
        ML32,   32
    }

    OperationRegion (OGNS, SystemMemory, 0xBAF3DD18, 0x00000011)
    Field (OGNS, AnyAcc, Lock, Preserve)
    {
        OG00,   8, 
        OG01,   8, 
        M2WL,   8, 
        THPN,   8, 
        PBAR,   8, 
        THPD,   8, 
        DTEN,   8, 
        SDMO,   8, 
        TBEN,   8, 
        TBNH,   8, 
        RV2I,   8, 
        ISDS,   8, 
        PSEL,   8, 
        TPPL,   16, 
        TRCF,   16
    }

    Method (SCMP, 2, NotSerialized)
    {
        Name (STG1, Buffer (0x50){})
        Name (STG2, Buffer (0x50){})
        STG1 = Arg0
        STG2 = Arg1
        If ((SizeOf (Arg0) != SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = Zero
        While ((Local0 < SizeOf (Arg0)))
        {
            If ((DerefOf (STG1 [Local0]) != DerefOf (STG2 [Local0]
                )))
            {
                Return (Zero)
            }

            Local0++
        }

        Return (One)
    }

    Name (WNOS, Zero)
    Name (MYOS, Zero)
    Name (HTTS, Zero)
    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Name (LINX, Zero)
    Name (OSSP, Zero)
    Method (SEQL, 2, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Local1 = SizeOf (Arg1)
        If ((Local0 != Local1))
        {
            Return (Zero)
        }

        Name (BUF0, Buffer (Local0){})
        BUF0 = Arg0
        Name (BUF1, Buffer (Local0){})
        BUF1 = Arg1
        Local2 = Zero
        While ((Local2 < Local0))
        {
            Local3 = DerefOf (BUF0 [Local2])
            Local4 = DerefOf (BUF1 [Local2])
            If ((Local3 != Local4))
            {
                Return (Zero)
            }

            Local2++
        }

        Return (One)
    }

    Method (OSTP, 0, NotSerialized)
    {
        If ((OSTB == Ones))
        {
            If (CondRefOf (\_OSI, Local0))
            {
                M460 ("PLA-ASL-\\OSTP \\_OSI exist\n", Zero, Zero, Zero, Zero, Zero, Zero)
                OSTB = Zero
                TPOS = Zero
                If (_OSI ("Windows 2001"))
                {
                    M460 ("PLA-ASL-\\OSTP Call _OSI(%S) = TRUE\n", "Windows 2001", Zero, Zero, Zero, Zero, Zero)
                    OSTB = 0x08
                    TPOS = 0x08
                }

                If (_OSI ("Windows 2001.1"))
                {
                    M460 ("PLA-ASL-\\OSTP Call _OSI(%S) = TRUE\n", "Windows 2001.1", Zero, Zero, Zero, Zero, Zero)
                    OSTB = 0x20
                    TPOS = 0x20
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    M460 ("PLA-ASL-\\OSTP Call _OSI(%S) = TRUE\n", "Windows 2001 SP1", Zero, Zero, Zero, Zero, Zero)
                    OSTB = 0x10
                    TPOS = 0x10
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    M460 ("PLA-ASL-\\OSTP Call _OSI(%S) = TRUE\n", "Windows 2001 SP2", Zero, Zero, Zero, Zero, Zero)
                    OSTB = 0x11
                    TPOS = 0x11
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    M460 ("PLA-ASL-\\OSTP Call _OSI(%S) = TRUE\n", "Windows 2001 SP3", Zero, Zero, Zero, Zero, Zero)
                    OSTB = 0x12
                    TPOS = 0x12
                }

                If (_OSI ("Windows 2006"))
                {
                    M460 ("PLA-ASL-\\OSTP Call _OSI(%S) = TRUE\n", "Windows 2006", Zero, Zero, Zero, Zero, Zero)
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    M460 ("PLA-ASL-\\OSTP Call _OSI(%S) = TRUE\n", "Windows 2006 SP1", Zero, Zero, Zero, Zero, Zero)
                    OSTB = 0x41
                    TPOS = 0x41
                    OSSP = One
                }

                If (_OSI ("Windows 2009"))
                {
                    M460 ("PLA-ASL-\\OSTP Call _OSI(%S) = TRUE\n", "Windows 2009", Zero, Zero, Zero, Zero, Zero)
                    OSSP = One
                    OSTB = 0x50
                    TPOS = 0x50
                }

                If (_OSI ("Windows 2012"))
                {
                    M460 ("PLA-ASL-\\OSTP Call _OSI(%S) = TRUE\n", "Windows 2012", Zero, Zero, Zero, Zero, Zero)
                    OSSP = One
                    OSTB = 0x60
                    TPOS = 0x60
                }

                If (_OSI ("Windows 2013"))
                {
                    M460 ("PLA-ASL-\\OSTP Call _OSI(%S) = TRUE\n", "Windows 2013", Zero, Zero, Zero, Zero, Zero)
                    OSSP = One
                    OSTB = 0x61
                    TPOS = 0x61
                }

                If (_OSI ("Windows 2015"))
                {
                    M460 ("PLA-ASL-\\OSTP Call _OSI(%S) = TRUE\n", "Windows 2015", Zero, Zero, Zero, Zero, Zero)
                    OSSP = One
                    OSTB = 0x70
                    TPOS = 0x70
                }
            }
            Else
            {
                M460 ("PLA-ASL-\\OSTP \\_OSI does NOT exist\n", Zero, Zero, Zero, Zero, Zero, Zero)
                If (CondRefOf (\_OS, Local0))
                {
                    M460 ("PLA-ASL-\\OSTP \\_OS exist\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    If (SEQL (_OS, "Microsoft Windows"))
                    {
                        M460 ("PLA-ASL-\\OSTP Call SEQL \\_OS == (%S)\n", "Microsoft Windows", Zero, Zero, Zero, Zero, Zero)
                        OSTB = One
                        TPOS = One
                    }
                    ElseIf (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                    {
                        M460 ("PLA-ASL-\\OSTP Call SEQL \\_OS == (%S)\n", "Microsoft WindowsME: Millennium Edition", Zero, Zero, Zero, Zero, Zero)
                        OSTB = 0x02
                        TPOS = 0x02
                    }
                    ElseIf (SEQL (_OS, "Microsoft Windows NT"))
                    {
                        M460 ("PLA-ASL-\\OSTP Call SEQL \\_OS == (%S)\n", "Microsoft Windows NT", Zero, Zero, Zero, Zero, Zero)
                        OSTB = 0x04
                        TPOS = 0x04
                    }
                    Else
                    {
                        M460 ("PLA-ASL-\\OSTP Call SEQL \\_OS != (%S)\n", "Microsoft Windows", Zero, Zero, Zero, Zero, Zero)
                        OSTB = Zero
                        TPOS = Zero
                    }
                }
                Else
                {
                    M460 ("PLA-ASL-\\OSTP \\_OS does NOT exist\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    OSTB = Zero
                    TPOS = Zero
                }
            }
        }

        M460 ("PLA-ASL-\\OSTP TPOS = 0x%X, Return OSTB = 0x%X\n", TPOS, OSTB, Zero, Zero, Zero, Zero)
        Return (OSTB) /* \OSTB */
    }

    Name (BUFN, Zero)
    Name (MBUF, Buffer (0x1000){})
    OperationRegion (MDBG, SystemMemory, 0xBAEB1018, 0x00001004)
    Field (MDBG, AnyAcc, Lock, Preserve)
    {
        MDG0,   32768
    }

    Method (DB2H, 1, Serialized)
    {
        SHOW (Arg0)
        MDGC (0x20)
        MDG0 = MBUF /* \MBUF */
    }

    Method (DW2H, 1, Serialized)
    {
        Local0 = Arg0
        Local1 = (Arg0 >> 0x08)
        Local0 &= 0xFF
        Local1 &= 0xFF
        DB2H (Local1)
        BUFN--
        DB2H (Local0)
    }

    Method (DD2H, 1, Serialized)
    {
        Local0 = Arg0
        Local1 = (Arg0 >> 0x10)
        Local0 &= 0xFFFF
        Local1 &= 0xFFFF
        DW2H (Local1)
        BUFN--
        DW2H (Local0)
    }

    Method (MBGS, 1, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Name (BUFS, Buffer (Local0){})
        BUFS = Arg0
        MDGC (0x20)
        While (Local0)
        {
            MDGC (DerefOf (BUFS [(SizeOf (Arg0) - Local0)]))
            Local0--
        }

        MDG0 = MBUF /* \MBUF */
    }

    Method (MBGH, 1, Serialized)
    {
        ToHexString (Arg0, Local1)
        Local0 = SizeOf (Local1)
        Name (BUFS, Buffer (Local0){})
        BUFS = Local1
        MDGC (0x20)
        While (Local0)
        {
            MDGC (DerefOf (BUFS [(SizeOf (Local1) - Local0)]))
            Local0--
        }

        MDG0 = MBUF /* \MBUF */
    }

    Method (SHOW, 1, Serialized)
    {
        MDGC (NTOC ((Arg0 >> 0x04)))
        MDGC (NTOC (Arg0))
    }

    Method (LINE, 0, Serialized)
    {
        Local0 = BUFN /* \BUFN */
        Local0 &= 0x0F
        While (Local0)
        {
            MDGC (Zero)
            Local0++
            Local0 &= 0x0F
        }
    }

    Method (MDGC, 1, Serialized)
    {
        MBUF [BUFN] = Arg0
        BUFN += One
        If ((BUFN > 0x0FFF))
        {
            BUFN &= 0x0FFF
            UP_L (One)
        }
    }

    Method (UP_L, 1, Serialized)
    {
        Local2 = Arg0
        Local2 <<= 0x04
        MOVE (Local2)
        Local3 = (0x1000 - Local2)
        While (Local2)
        {
            MBUF [Local3] = Zero
            Local3++
            Local2--
        }
    }

    Method (MOVE, 1, Serialized)
    {
        Local4 = Arg0
        BUFN = Zero
        Local5 = (0x1000 - Local4)
        While (Local5)
        {
            Local5--
            MBUF [BUFN] = DerefOf (MBUF [Local4])
            BUFN++
            Local4++
        }
    }

    Method (NTOC, 1, Serialized)
    {
        Local0 = (Arg0 & 0x0F)
        If ((Local0 < 0x0A))
        {
            Local0 += 0x30
        }
        Else
        {
            Local0 += 0x37
        }

        Return (Local0)
    }

    Scope (_SB)
    {
        Device (PLTF)
        {
            Name (_HID, "ACPI0010" /* Processor Container Device */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A05") /* Generic Container Device */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Device (C000)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, Zero)  // _UID: Unique ID
            }

            Device (C001)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
            }

            Device (C002)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
            }

            Device (C003)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
            }

            Device (C004)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x04)  // _UID: Unique ID
            }

            Device (C005)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x05)  // _UID: Unique ID
            }

            Device (C006)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x06)  // _UID: Unique ID
            }

            Device (C007)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x07)  // _UID: Unique ID
            }

            Device (C008)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x08)  // _UID: Unique ID
            }

            Device (C009)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x09)  // _UID: Unique ID
            }

            Device (C00A)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0A)  // _UID: Unique ID
            }

            Device (C00B)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0B)  // _UID: Unique ID
            }

            Device (C00C)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0C)  // _UID: Unique ID
            }

            Device (C00D)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0D)  // _UID: Unique ID
            }

            Device (C00E)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0E)  // _UID: Unique ID
            }

            Device (C00F)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0F)  // _UID: Unique ID
            }
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If ((CNSB == Zero))
    {
        If ((DAS3 == One))
        {
            Name (_S3, Package (0x04)  // _S3_: S3 System State
            {
                0x03, 
                0x03, 
                Zero, 
                Zero
            })
        }
    }

    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        0x04, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        0x05, 
        Zero, 
        Zero
    })
    Scope (_GPE)
    {
        Method (XL08, 0, NotSerialized)
        {
            TPST (0x3908)
            M460 ("PLA-ASL-\\_GPE._L08\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If ((TBEN == Zero))
            {
                Notify (\_SB.PCI0.GPP0, 0x02) // Device Wake
                Notify (\_SB.PCI0.GPP1, 0x02) // Device Wake
            }

            Notify (\_SB.PCI0.GPP6, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP18, 0x02) // Device Wake
        }

        Method (_E04, 0, NotSerialized)  // _Exx: Edge-Triggered GPE, xx=0x00-0xFF
        {
            Sleep (0x64)
            P80H = 0x04
            Notify (\_SB.PCI0.GPP0.PEGP, 0x81) // Information Change
        }

        Method (_E05, 0, NotSerialized)  // _Exx: Edge-Triggered GPE, xx=0x00-0xFF
        {
            Sleep (0x64)
            P80H = 0x05
            Notify (\_SB.PCI0.GPP0.PEGP, 0x81) // Information Change
        }
    }

    Name (PICM, Zero)
    Name (GPIC, Zero)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        PICM = Arg0
        GPIC = Arg0
        M460 ("PLA-ASL-\\_PIC Arg0 = 0x%X\n", ToInteger (Arg0), Zero, Zero, Zero, Zero, Zero)
        If (PICM)
        {
            \_SB.DSPI ()
            If (NAPC)
            {
                \_SB.PCI0.NAPE ()
            }
        }
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        \_SB.PCI0.LPC0.EC0.ESLP = Zero
        \_SB.PCI0.LPC0.EC0.CTSD = Zero
        SPTS (Arg0)
        M460 ("PLA-ASL-\\_PTS Start Arg0 = 0x%X\n", ToInteger (Arg0), Zero, Zero, Zero, Zero, Zero)
        If ((Arg0 == One))
        {
            \_SB.S80H (0x51)
        }

        If ((Arg0 == 0x03))
        {
            \_SB.S80H (0x53)
            SLPS = One
            Local1 = 0x40
        }

        If ((Arg0 == 0x04))
        {
            \_SB.S80H (0x54)
            SLPS = One
            RSTU = One
            Local1 = 0x80
        }

        If ((Arg0 == 0x05))
        {
            \_SB.S80H (0x55)
            If ((WKPM == One))
            {
                PWDE = One
            }

            BCMD = 0x90
            M460 ("PLA-ASL-\\_PTS call \\_SB.BSMI(0x0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
            \_SB.BSMI (Zero)
            M460 ("PLA-ASL-\\_PTS call \\_SB.GSMI(0x3)\n", Zero, Zero, Zero, Zero, Zero, Zero)
            \_SB.GSMI (0x03)
            Local1 = 0xC0
        }

        If (CondRefOf (\_SB.TPM2.PTS))
        {
            M460 ("PLA-ASL-\\_PTS call \\_SB.TPM2.PTS\n", Zero, Zero, Zero, Zero, Zero, Zero)
            \_SB.TPM2.PTS (Arg0)
        }

        M460 ("PLA-ASL-\\_PTS call \\_SB.APTS\n", Zero, Zero, Zero, Zero, Zero, Zero)
        \_SB.APTS (Arg0)
        \_SB.PCI0.LPC0.EC0.UBCC = 0xCC
        M460 ("PLA-ASL-\\_PTS call MPTS\n", Zero, Zero, Zero, Zero, Zero, Zero)
        MPTS (Arg0)
        M460 ("PLA-ASL-\\_PTS End\n", Zero, Zero, Zero, Zero, Zero, Zero)
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        M460 ("PLA-ASL-\\_WAK Start Arg0 = 0x%X\n", ToInteger (Arg0), Zero, Zero, Zero, Zero, Zero)
        M460 ("PLA-ASL-\\_WAK call SWAK\n", Zero, Zero, Zero, Zero, Zero, Zero)
        SWAK (Arg0)
        If ((Arg0 == 0x04))
        {
            S4FG = One
        }

        \_SB.PCI0.LPC0.EC0.CTSD = Zero
        M460 ("PLA-ASL-\\_WAK call \\_SB.AWAK\n", Zero, Zero, Zero, Zero, Zero, Zero)
        \_SB.AWAK (Arg0)
        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If ((GPIC != Zero))
            {
                M460 ("PLA-ASL-\\_WAK call \\_SB.DSPI\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_SB.DSPI ()
                If (NAPC)
                {
                    M460 ("PLA-ASL-\\_WAK call \\_SB.PCI0.NAPE\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCI0.NAPE ()
                }
            }
        }

        If ((Arg0 == 0x03))
        {
            \_SB.S80H (0xE3)
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        If ((Arg0 == 0x04))
        {
            \_SB.S80H (0xE4)
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        M460 ("PLA-ASL-\\_WAK call MWAK\n", Zero, Zero, Zero, Zero, Zero, Zero)
        \_SB.PCI0.LPC0.EC0.ECWK (Arg0)
        If ((TPOS == 0x40))
        {
            Local0 = One
        }

        If ((TPOS == 0x80))
        {
            Local0 = 0x02
        }

        If ((TPOS == 0x50))
        {
            Local0 = 0x03
        }

        If ((TPOS == 0x60))
        {
            Local0 = 0x04
        }

        If ((TPOS == 0x61))
        {
            Local0 = 0x05
        }

        If ((TPOS == 0x70))
        {
            Local0 = 0x06
        }

        If ((Acquire (\_SB.PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
        {
            \_SB.PCI0.LPC0.EC0.OSTY = Local0
            Release (\_SB.PCI0.LPC0.EC0.LFCM)
        }

        MWAK (Arg0)
        M460 ("PLA-ASL-\\_WAK End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        Return (Zero)
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_BBN, Zero)  // _BBN: BIOS Bus Number
            Name (_ADR, Zero)  // _ADR: Address
            Name (NBRI, Zero)
            Name (NBAR, Zero)
            Name (NCMD, Zero)
            Name (PXDC, Zero)
            Name (PXLC, Zero)
            Name (PXD2, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                M460 ("PLA-ASL-\\_SB.PCI0._INI Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
                If ((GPIC != Zero))
                {
                    M460 ("PLA-ASL-\\_SB.PCI0._INI call \\_SB.DSPI\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    DSPI ()
                    If (NAPC)
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0._INI call \\_SB.PCI0.NAPE\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        NAPE ()
                    }
                }

                M460 ("PLA-ASL-\\_SB.PCI0._INI call \\OSTP\n", Zero, Zero, Zero, Zero, Zero, Zero)
                OSTP ()
                M460 ("PLA-ASL-\\_SB.PCI0._INI End\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Name (SUPP, Zero)
            Name (CTRL, Zero)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg0, Zero, UID0)
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg2 == One))
                {
                    M460 ("PLA-ASL-\\_SB.PCI0._OSC UUID 0x%X Start  CDW1 = 0x%X\n", UID0, CDW1, Zero, Zero, Zero, Zero)
                }
                ElseIf ((Arg2 == 0x02))
                {
                    Local2 = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    M460 ("PLA-ASL-\\_SB.PCI0._OSC UUID 0x%X Start  CDW1 = 0x%X CDW2 = 0x%X\n", UID0, CDW1, CDW2, Zero, Zero, Zero)
                }
                Else
                {
                    Local3 = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    M460 ("PLA-ASL-\\_SB.PCI0._OSC UUID 0x%X Start  CDW1 = 0x%X CDW2 = 0x%X CDW3 = 0x%X\n", UID0, CDW1, CDW2, CDW3, Zero, Zero)
                }

                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If ((TBEN == One))
                    {
                        If ((TBNH != Zero))
                        {
                            CTRL &= 0xFFFFFFF5
                        }
                        Else
                        {
                            CTRL &= 0xFFFFFFF4
                        }
                    }

                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0xFFFFFFFE
                    }

                    CTRL &= 0xFFFFFFF5
                    If (~(CDW1 & One))
                    {
                        If ((CTRL & One)){}
                        If ((CTRL & 0x04)){}
                        If ((CTRL & 0x10)){}
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                }
                Else
                {
                    CDW1 |= 0x04
                }

                If ((Arg2 == One))
                {
                    M460 ("PLA-ASL-\\_SB.PCI0._OSC UUID 0x%X Return CDW1 = 0x%X\n", UID0, CDW1, Zero, Zero, Zero, Zero)
                }
                ElseIf ((Arg2 == 0x02))
                {
                    M460 ("PLA-ASL-\\_SB.PCI0._OSC UUID 0x%X Return CDW1 = 0x%X CDW2 = 0x%X\n", UID0, CDW1, CDW2, Zero, Zero, Zero)
                }
                Else
                {
                    M460 ("PLA-ASL-\\_SB.PCI0._OSC UUID 0x%X Return CDW1 = 0x%X CDW2 = 0x%X CDW3 = 0x%X\n", UID0, CDW1, CDW2, CDW3, Zero, Zero)
                }

                Return (Arg3)
            }

            Method (TOM, 0, NotSerialized)
            {
                Local0 = (TOML * 0x00010000)
                Local1 = (TOMH * 0x01000000)
                Local0 += Local1
                Return (Local0)
            }

            Name (CRES, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, SubDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    0x00,, )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    0x00,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xF7FFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x78000000,         // Length
                    0x00,, _Y00, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFC000000,         // Range Minimum
                    0xFEAFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x02B00000,         // Length
                    0x00,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFED45000,         // Range Minimum
                    0xFED814FF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0003C500,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFED81900,         // Range Minimum
                    0xFED81FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000700,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFEDC0000,         // Range Minimum
                    0xFEDC0FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00001000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFEDC6000,         // Range Minimum
                    0xFEDC6FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00001000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.PCI0._CRS Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateDWordField (CRES, \_SB.PCI0._Y00._MIN, BTMN)  // _MIN: Minimum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y00._MAX, BTMX)  // _MAX: Maximum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y00._LEN, BTLN)  // _LEN: Length
                CreateDWordField (CRES, \_SB.PCI0._Y01._MIN, BTN1)  // _MIN: Minimum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y01._MAX, BTX1)  // _MAX: Maximum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y01._LEN, BTL1)  // _LEN: Length
                BTMN = MB32 /* \MB32 */
                BTMX = ((MB32 + ML32) - One)
                BTLN = ML32 /* \ML32 */
                If ((TOPM != Zero))
                {
                    BTX1 = TOPM /* \TOPM */
                }

                BTN1 = (PCBL + One)
                BTL1 = (BTX1 - BTN1) /* \_SB_.PCI0._CRS.BTN1 */
                BTL1 += One
                If ((MM64 == One))
                {
                    CreateQWordField (CRES, \_SB.PCI0._Y02._MIN, M1MN)  // _MIN: Minimum Base Address
                    CreateQWordField (CRES, \_SB.PCI0._Y02._MAX, M1MX)  // _MAX: Maximum Base Address
                    CreateQWordField (CRES, \_SB.PCI0._Y02._LEN, M1LN)  // _LEN: Length
                    M1MN = HMB1 /* \HMB1 */
                    M1MX = HMM1 /* \HMM1 */
                    M1LN = HML1 /* \HML1 */
                    CreateQWordField (CRES, \_SB.PCI0._Y03._MIN, M2MN)  // _MIN: Minimum Base Address
                    CreateQWordField (CRES, \_SB.PCI0._Y03._MAX, M2MX)  // _MAX: Maximum Base Address
                    CreateQWordField (CRES, \_SB.PCI0._Y03._LEN, M2LN)  // _LEN: Length
                    M2MN = HMB2 /* \HMB2 */
                    M2MX = HMM2 /* \HMM2 */
                    M2LN = HML2 /* \HML2 */
                }

                M460 ("PLA-ASL-\\_SB.PCI0._CRS End\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (CRES) /* \_SB_.PCI0.CRES */
            }

            Device (MEMR)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (MEM1, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y04)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y05)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        )
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    M460 ("PLA-ASL-\\_SB.PCI0.MEMR._CRS Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y04._BAS, MB01)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y04._LEN, ML01)  // _LEN: Length
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y05._BAS, MB02)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y05._LEN, ML02)  // _LEN: Length
                    If (GPIC)
                    {
                        MB01 = 0xFEC00000
                        MB02 = 0xFEE00000
                        ML01 = 0x1000
                        If (NAPC)
                        {
                            ML01 += 0x1000
                        }

                        ML02 = 0x1000
                    }

                    M460 ("PLA-ASL-\\_SB.PCI0.MEMR._CRS End\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (MEM1) /* \_SB_.PCI0.MEMR.MEM1 */
                }
            }

            Mutex (NAPM, 0x00)
            Method (NAPE, 0, NotSerialized)
            {
                Acquire (NAPM, 0xFFFF)
                Local0 = (PCBA + 0xB8)
                OperationRegion (VARM, SystemMemory, Local0, 0x08)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    NAPX,   32, 
                    NAPD,   32
                }

                Local1 = NAPX /* \_SB_.PCI0.NAPE.NAPX */
                NAPX = 0x14300000
                Local0 = NAPD /* \_SB_.PCI0.NAPE.NAPD */
                Local0 &= 0xFFFFFFEF
                NAPD = Local0
                NAPX = Local1
                Release (NAPM)
            }

            Method (PXCR, 3, Serialized)
            {
                M460 ("PLA-ASL-_SB.PCI0.GPPX.PXCR\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Local0 = Zero
                Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
                While ((Local1 != Zero))
                {
                    Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                    {
                        Break
                    }

                    If ((Local2 == 0x10))
                    {
                        Local0 = Local1
                        Break
                    }

                    Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
                }

                Return (Local0)
            }

            Method (SPCF, 1, NotSerialized)
            {
                M460 ("PLA-ASL-_SB.PCI0.GPPX.SPCF\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Local0 = M019 (Zero, (Arg0 >> 0x10), (Arg0 & 0xFF), 
                    0x18)
                NBRI = ((Local0 & 0xFF00) >> 0x08)
                NCMD = M019 (NBRI, Zero, Zero, 0x04)
                NBAR = M019 (NBRI, Zero, Zero, 0x10)
                Local1 = PXCR (NBRI, Zero, Zero)
                PXDC = M019 (NBRI, Zero, Zero, (Local1 + 0x08))
                PXLC = M019 (NBRI, Zero, Zero, (Local1 + 0x10))
                PXD2 = M019 (NBRI, Zero, Zero, (Local1 + 0x28))
            }

            Method (RPCF, 0, NotSerialized)
            {
                M460 ("PLA-ASL-_SB.PCI0.GPPX.RPCF\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Local1 = PXCR (NBRI, Zero, Zero)
                M020 (NBRI, Zero, Zero, (Local1 + 0x08), PXDC)
                M020 (NBRI, Zero, Zero, (Local1 + 0x10), (PXLC & 0xFFFFFEFC))
                M020 (NBRI, Zero, Zero, (Local1 + 0x28), PXD2)
                M020 (NBRI, Zero, Zero, 0x10, NBAR)
                M020 (NBRI, Zero, Zero, 0x04, 0x06)
            }

            Method (UPWD, 0, NotSerialized)
            {
                M460 ("PLA-ASL-_SB.PCI0.UPWD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                OperationRegion (PSMI, SystemIO, 0xB0, 0x02)
                Field (PSMI, ByteAcc, NoLock, Preserve)
                {
                    SMIC,   8, 
                    SMID,   8
                }

                SMIC = 0xE3
            }

            Name (PRB0, Package (0x14)
            {
                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    LNKE, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    One, 
                    LNKF, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    LNKG, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    LNKH, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    Zero, 
                    LNKE, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }
            })
            Name (ARB0, Package (0x14)
            {
                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    Zero, 
                    0x14
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    One, 
                    Zero, 
                    0x15
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    Zero, 
                    0x16
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    Zero, 
                    0x17
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    Zero, 
                    Zero, 
                    0x14
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }
            })
            Name (NRB0, Package (0x14)
            {
                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    Zero, 
                    0x18
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    Zero, 
                    0x19
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    Zero, 
                    0x1A
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x03, 
                    Zero, 
                    0x1B
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    Zero, 
                    0x1C
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    One, 
                    Zero, 
                    0x1D
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    Zero, 
                    0x1E
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    Zero, 
                    0x1F
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    Zero, 
                    Zero, 
                    0x20
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    One, 
                    Zero, 
                    0x21
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x02, 
                    Zero, 
                    0x22
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x03, 
                    Zero, 
                    0x23
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    Zero, 
                    Zero, 
                    0x24
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    Zero, 
                    Zero, 
                    0x28
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    One, 
                    Zero, 
                    0x29
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    0x02, 
                    Zero, 
                    0x2A
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    If (NAPC)
                    {
                        Return (NRB0) /* \_SB_.PCI0.NRB0 */
                    }
                    Else
                    {
                        Return (ARB0) /* \_SB_.PCI0.ARB0 */
                    }
                }
                Else
                {
                    Return (PRB0) /* \_SB_.PCI0.PRB0 */
                }
            }

            Device (GPP0)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((WKPM == One))
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0.GPP0.RHRW Return GPRW (0x8, 0x4)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (GPRW (0x08, 0x03))
                    }
                    Else
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0.GPP0.RHRW Return GPRW (0x8, 0x0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (GPRW (0x08, Zero))
                    }
                }

                Name (PR00, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR00, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR00, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x18
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x19
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x1A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x1B
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR00) /* \_SB_.PCI0.GPP0.NR00 */
                        }
                        Else
                        {
                            Return (AR00) /* \_SB_.PCI0.GPP0.AR00 */
                        }
                    }
                    Else
                    {
                        Return (PR00) /* \_SB_.PCI0.GPP0.PR00 */
                    }
                }
            }

            Device (GPP1)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Name (PR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }
                })
                Name (AR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }
                })
                Name (NR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x1C
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x1D
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x1E
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x1F
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR01) /* \_SB_.PCI0.GPP1.NR01 */
                        }
                        Else
                        {
                            Return (AR01) /* \_SB_.PCI0.GPP1.AR01 */
                        }
                    }
                    Else
                    {
                        Return (PR01) /* \_SB_.PCI0.GPP1.PR01 */
                    }
                }
            }

            Device (GPP2)
            {
                Name (_ADR, 0x00010003)  // _ADR: Address
                Name (PR02, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR02, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR02, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x20
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x21
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x23
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR02) /* \_SB_.PCI0.GPP2.NR02 */
                        }
                        Else
                        {
                            Return (AR02) /* \_SB_.PCI0.GPP2.AR02 */
                        }
                    }
                    Else
                    {
                        Return (PR02) /* \_SB_.PCI0.GPP2.PR02 */
                    }
                }

                Device (RTL8)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }

                Device (RUSB)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                }
            }

            Device (GPP3)
            {
                Name (_ADR, 0x00010004)  // _ADR: Address
                Name (PR03, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }
                })
                Name (AR03, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }
                })
                Name (NR03, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x25
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x27
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR03) /* \_SB_.PCI0.GPP3.NR03 */
                        }
                        Else
                        {
                            Return (AR03) /* \_SB_.PCI0.GPP3.AR03 */
                        }
                    }
                    Else
                    {
                        Return (PR03) /* \_SB_.PCI0.GPP3.PR03 */
                    }
                }
            }

            Device (GPP4)
            {
                Name (_ADR, 0x00010005)  // _ADR: Address
                Name (PR04, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR04, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR04, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x28
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x29
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x2A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x2B
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR04) /* \_SB_.PCI0.GPP4.NR04 */
                        }
                        Else
                        {
                            Return (AR04) /* \_SB_.PCI0.GPP4.AR04 */
                        }
                    }
                    Else
                    {
                        Return (PR04) /* \_SB_.PCI0.GPP4.PR04 */
                    }
                }
            }

            Device (GPP5)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                Name (PR06, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }
                })
                Name (AR06, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }
                })
                Name (NR06, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x2C
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x2D
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x2E
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x2F
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR06) /* \_SB_.PCI0.GPP5.NR06 */
                        }
                        Else
                        {
                            Return (AR06) /* \_SB_.PCI0.GPP5.AR06 */
                        }
                    }
                    Else
                    {
                        Return (PR06) /* \_SB_.PCI0.GPP5.PR06 */
                    }
                }

                Device (DEV0)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (GPP6)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                Device (WLAN)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (WLPC, PCI_Config, Zero, 0x90)
                    Field (WLPC, ByteAcc, NoLock, Preserve)
                    {
                        WVID,   16, 
                        WDID,   16, 
                        Offset (0x44), 
                        ICAP,   32, 
                        ICTR,   16, 
                        Offset (0x84), 
                        MCAP,   32, 
                        MCTR,   16
                    }

                    OperationRegion (WLGP, SystemMemory, 0xFEEC29B8, One)
                    Field (WLGP, AnyAcc, NoLock, Preserve)
                    {
                            ,   5, 
                        WLPP,   1
                    }

                    Method (MTDS, 0, Serialized)
                    {
                        Name (MTD6, Package (0x1F)
                        {
                            0x4D, 
                            0x54, 
                            0x44, 
                            0x53, 
                            One, 
                            Zero, 
                            0x02, 
                            One, 
                            0x1E, 
                            0x1C, 
                            0x1C, 
                            0x1C, 
                            0x1C, 
                            0x1A, 
                            0x1A, 
                            0x1A, 
                            0x1A, 
                            0x1A, 
                            0x1A, 
                            0x02, 
                            0x1E, 
                            0x1C, 
                            0x1C, 
                            0x1C, 
                            0x1C, 
                            0x1A, 
                            0x1A, 
                            0x1A, 
                            0x1A, 
                            0x1A, 
                            0x1A
                        })
                        Name (MTD5, Package (0x1F)
                        {
                            0x4D, 
                            0x54, 
                            0x44, 
                            0x53, 
                            One, 
                            Zero, 
                            0x02, 
                            One, 
                            0x1E, 
                            0x1C, 
                            0x1C, 
                            0x1C, 
                            0x1C, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            0x02, 
                            0x1E, 
                            0x1C, 
                            0x1C, 
                            0x1C, 
                            0x1C, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        If ((WDID == 0x0616))
                        {
                            Return (MTD6) /* \_SB_.PCI0.GPP6.WLAN.MTDS.MTD6 */
                        }
                        Else
                        {
                            Return (MTD5) /* \_SB_.PCI0.GPP6.WLAN.MTDS.MTD5 */
                        }
                    }

                    Method (MTCL, 0, Serialized)
                    {
                        Name (MTCL, Package (0x0C)
                        {
                            0x4D, 
                            0x54, 
                            0x43, 
                            0x4C, 
                            One, 
                            One, 
                            0xD9, 
                            0xCC, 
                            0xC1, 
                            0x18, 
                            Zero, 
                            Zero
                        })
                        Return (MTCL) /* \_SB_.PCI0.GPP6.WLAN.MTCL.MTCL */
                    }

                    PowerResource (WRST, 0x05, 0x0000)
                    {
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (One)
                        }

                        Method (_ON, 0, NotSerialized)  // _ON_: Power On
                        {
                        }

                        Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                        {
                        }

                        Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                        {
                            If ((WVID == 0x14C3))
                            {
                                If ((MCAP & 0x10000000))
                                {
                                    Local0 = MCTR /* \_SB_.PCI0.GPP6.WLAN.MCTR */
                                    Local0 |= 0x8000
                                    MCTR = Local0
                                }
                            }
                            Else
                            {
                                WLPP = Zero
                                Sleep (0x012C)
                                WLPP = One
                                Sleep (0x012C)
                            }
                        }
                    }

                    Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("d2a8c3e8-4b69-4f00-82bd-fe8607803aa7") /* Unknown UUID */))
                        {
                            If ((Arg2 == 0x04))
                            {
                                Return (Buffer (0x8C)
                                {
                                    /* 0000 */  0x00, 0xE0, 0x4C, 0x00, 0x01, 0x43, 0x43, 0x4C,  // ..L..CCL
                                    /* 0008 */  0x43, 0x52, 0x53, 0x56, 0x47, 0x54, 0x55, 0x53,  // CRSVGTUS
                                    /* 0010 */  0x41, 0x54, 0x42, 0x45, 0x43, 0x59, 0x43, 0x5A,  // ATBECYCZ
                                    /* 0018 */  0x44, 0x4B, 0x45, 0x45, 0x46, 0x49, 0x46, 0x52,  // DKEEFIFR
                                    /* 0020 */  0x44, 0x45, 0x47, 0x52, 0x48, 0x55, 0x49, 0x53,  // DEGRHUIS
                                    /* 0028 */  0x49, 0x45, 0x49, 0x54, 0x4C, 0x56, 0x4C, 0x49,  // IEITLVLI
                                    /* 0030 */  0x4C, 0x54, 0x4C, 0x55, 0x4D, 0x54, 0x4D, 0x43,  // LTLUMTMC
                                    /* 0038 */  0x4E, 0x4C, 0x4E, 0x4F, 0x50, 0x4C, 0x50, 0x54,  // NLNOPLPT
                                    /* 0040 */  0x53, 0x4B, 0x53, 0x49, 0x45, 0x53, 0x53, 0x45,  // SKSIESSE
                                    /* 0048 */  0x43, 0x48, 0x47, 0x42, 0x42, 0x48, 0x42, 0x47,  // CHGBBHBG
                                    /* 0050 */  0x48, 0x52, 0x47, 0x48, 0x49, 0x4C, 0x4A, 0x4F,  // HRGHILJO
                                    /* 0058 */  0x4B, 0x45, 0x4B, 0x57, 0x4B, 0x47, 0x4D, 0x41,  // KEKWKGMA
                                    /* 0060 */  0x51, 0x41, 0x52, 0x4F, 0x52, 0x53, 0x54, 0x52,  // QARORSTR
                                    /* 0068 */  0x41, 0x45, 0x48, 0x4B, 0x4D, 0x59, 0x41, 0x55,  // AEHKMYAU
                                    /* 0070 */  0x4E, 0x5A, 0x43, 0x41, 0x4A, 0x50, 0x41, 0x4D,  // NZCAJPAM
                                    /* 0078 */  0x42, 0x57, 0x42, 0x49, 0x54, 0x44, 0x4B, 0x4D,  // BWBITDKM
                                    /* 0080 */  0x47, 0x51, 0x4D, 0x47, 0x4D, 0x55, 0x54, 0x4A,  // GQMGMUTJ
                                    /* 0088 */  0x54, 0x47, 0x55, 0x5A                           // TGUZ
                                })
                            }

                            Return (Zero)
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                }

                Name (PR07, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKF, 
                        Zero
                    }
                })
                Name (AR07, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x15
                    }
                })
                Name (NR07, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x2E
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x2F
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x2C
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x2D
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR07) /* \_SB_.PCI0.GPP6.NR07 */
                        }
                        Else
                        {
                            Return (AR07) /* \_SB_.PCI0.GPP6.AR07 */
                        }
                    }
                    Else
                    {
                        Return (PR07) /* \_SB_.PCI0.GPP6.PR07 */
                    }
                }

                Device (BTH0)
                {
                    Name (_HID, "QCOM6390")  // _HID: Hardware ID
                    Name (_S4W, 0x02)  // _S4W: S4 Device Wake State
                    Name (_S0W, 0x02)  // _S0W: S0 Device Wake State
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((BLTH == Zero))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (UBUF, ResourceTemplate ()
                        {
                            UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                                0xC0, LittleEndian, ParityTypeNone, FlowControlHardware,
                                0x0020, 0x0020, "\\_SB.FUR0",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            GpioInt (Edge, ActiveLow, ExclusiveAndWake, PullUp, 0x0000,
                                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                                )
                                {   // Pin list
                                    0x0004
                                }
                        })
                        Return (UBUF) /* \_SB_.PCI0.GPP6.BTH0._CRS.UBUF */
                    }
                }
            }

            Device (GPP7)
            {
                Name (_ADR, 0x00020003)  // _ADR: Address
                Name (PR08, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKF, 
                        Zero
                    }
                })
                Name (AR08, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x15
                    }
                })
                Name (NR08, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x2E
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x2F
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x2C
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x2D
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR08) /* \_SB_.PCI0.GPP7.NR08 */
                        }
                        Else
                        {
                            Return (AR08) /* \_SB_.PCI0.GPP7.AR08 */
                        }
                    }
                    Else
                    {
                        Return (PR08) /* \_SB_.PCI0.GPP7.PR08 */
                    }
                }

                Device (WWAN)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (GPP8)
            {
                Name (_ADR, 0x00020004)  // _ADR: Address
                Name (PR09, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKB, 
                        Zero
                    }
                })
                Name (AR09, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x11
                    }
                })
                Name (NR09, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x2A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x2B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x28
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x29
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR09) /* \_SB_.PCI0.GPP8.NR09 */
                        }
                        Else
                        {
                            Return (AR09) /* \_SB_.PCI0.GPP8.AR09 */
                        }
                    }
                    Else
                    {
                        Return (PR09) /* \_SB_.PCI0.GPP8.PR09 */
                    }
                }
            }

            Device (GPP9)
            {
                Name (_ADR, 0x00020005)  // _ADR: Address
                Name (PR10, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKF, 
                        Zero
                    }
                })
                Name (AR10, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x15
                    }
                })
                Name (NR10, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x27
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x25
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR10) /* \_SB_.PCI0.GPP9.NR10 */
                        }
                        Else
                        {
                            Return (AR10) /* \_SB_.PCI0.GPP9.AR10 */
                        }
                    }
                    Else
                    {
                        Return (PR10) /* \_SB_.PCI0.GPP9.PR10 */
                    }
                }
            }

            Device (GPPA)
            {
                Name (_ADR, 0x00020006)  // _ADR: Address
                Name (PR11, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKB, 
                        Zero
                    }
                })
                Name (AR11, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x11
                    }
                })
                Name (NR11, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x23
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x20
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x21
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR11) /* \_SB_.PCI0.GPPA.NR11 */
                        }
                        Else
                        {
                            Return (AR11) /* \_SB_.PCI0.GPPA.AR11 */
                        }
                    }
                    Else
                    {
                        Return (PR11) /* \_SB_.PCI0.GPPA.PR11 */
                    }
                }
            }

            Device (GP11)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                Name (PR12, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKF, 
                        Zero
                    }
                })
                Name (AR12, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x15
                    }
                })
                Name (NR12, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x1E
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x1F
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x1C
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x1D
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR12) /* \_SB_.PCI0.GP11.NR12 */
                        }
                        Else
                        {
                            Return (AR12) /* \_SB_.PCI0.GP11.AR12 */
                        }
                    }
                    Else
                    {
                        Return (PR12) /* \_SB_.PCI0.GP11.PR12 */
                    }
                }
            }

            Device (GP12)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
                Name (PR16, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKB, 
                        Zero
                    }
                })
                Name (AR16, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x11
                    }
                })
                Name (NR16, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x23
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x20
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x21
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR16) /* \_SB_.PCI0.GP12.NR16 */
                        }
                        Else
                        {
                            Return (AR16) /* \_SB_.PCI0.GP12.AR16 */
                        }
                    }
                    Else
                    {
                        Return (PR16) /* \_SB_.PCI0.GP12.PR16 */
                    }
                }
            }

            Device (GP17)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Name (PR17, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKF, 
                        Zero
                    }
                })
                Name (AR17, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x15
                    }
                })
                Name (NR17, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x27
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x25
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR17) /* \_SB_.PCI0.GP17.NR17 */
                        }
                        Else
                        {
                            Return (AR17) /* \_SB_.PCI0.GP17.AR17 */
                        }
                    }
                    Else
                    {
                        Return (PR17) /* \_SB_.PCI0.GP17.PR17 */
                    }
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (DOSA, Zero)
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSA = Arg0
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0.GP17.VGA._DOD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (Package (0x07)
                        {
                            0x00010110, 
                            0x00010210, 
                            0x00010220, 
                            0x00010230, 
                            0x00010240, 
                            0x00031000, 
                            0x00032000
                        })
                    }

                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Name (BCLB, Package (0x34)
                        {
                            0x5A, 
                            0x3C, 
                            0x02, 
                            0x04, 
                            0x06, 
                            0x08, 
                            0x0A, 
                            0x0C, 
                            0x0E, 
                            0x10, 
                            0x12, 
                            0x14, 
                            0x16, 
                            0x18, 
                            0x1A, 
                            0x1C, 
                            0x1E, 
                            0x20, 
                            0x22, 
                            0x24, 
                            0x26, 
                            0x28, 
                            0x2A, 
                            0x2C, 
                            0x2E, 
                            0x30, 
                            0x32, 
                            0x34, 
                            0x36, 
                            0x38, 
                            0x3A, 
                            0x3C, 
                            0x3E, 
                            0x40, 
                            0x42, 
                            0x44, 
                            0x46, 
                            0x48, 
                            0x4A, 
                            0x4C, 
                            0x4E, 
                            0x50, 
                            0x52, 
                            0x54, 
                            0x56, 
                            0x58, 
                            0x5A, 
                            0x5C, 
                            0x5E, 
                            0x60, 
                            0x62, 
                            0x64
                        })
                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            M460 ("PLA-ASL-\\_SB.PCI0.GP17.VGA.LCD._BCL\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Return (BCLB) /* \_SB_.PCI0.GP17.VGA_.LCD_.BCLB */
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            M460 ("PLA-ASL-\\_SB.PCI0.GP17.VGA.LCD._BCM Arg0 = 0x%X\n", ToInteger (Arg0), Zero, Zero, Zero, Zero, Zero)
                            Divide ((Arg0 * 0xFF), 0x64, Local1, Local0)
                            AFN7 (Local0)
                            BRTL = Arg0
                        }
                    }
                }

                Device (PSP)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }

                Device (ACP)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }
                }

                Device (AZAL)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (PRT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                            {
                                Return (0x03)
                            }

                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT1._UPC\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (M600 (One, 0x03))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT1._PLD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (M601 (0x02, One, One, 0x03, 0x0112, Zero))
                            }
                        }

                        Device (PRT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                            {
                                Return (0x03)
                            }

                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT2._UPC\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (M600 (One, 0x03))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT2._PLD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (M601 (0x02, One, 0x02, 0x03, 0x0112, Zero))
                            }
                        }

                        Device (PRT3)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Device (CAM0)
                            {
                                Name (_ADR, One)  // _ADR: Address
                                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                                {
                                    M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT3.CAM0._PLD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                    Return (M601 (0x04, Zero, 0x08, Zero, 0x0104, 0x00AF00E1))
                                }
                            }

                            Device (CAM1)
                            {
                                Name (_ADR, 0x03)  // _ADR: Address
                                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                                {
                                    M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT3.CAM1._PLD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                    Return (M601 (0x04, Zero, 0x08, Zero, 0x0104, 0x00AF00E1))
                                }
                            }

                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT3._UPC\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (M600 (Zero, 0x03))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT3._PLD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (M601 (0x02, Zero, 0x0101, Zero, 0x0112, Zero))
                            }
                        }

                        Device (PRT4)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT4._UPC\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (M600 (Zero, Zero))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT4._PLD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (M601 (0x02, Zero, 0x04, Zero, 0x0112, Zero))
                            }
                        }

                        Device (PRT5)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT5._UPC\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (M600 (Zero, 0xFF))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT5._PLD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (M601 (0x02, Zero, 0x05, Zero, 0x0112, Zero))
                            }

                            OperationRegion (BTGP, SystemMemory, 0xFEEC29B8, One)
                            Field (BTGP, AnyAcc, NoLock, Preserve)
                            {
                                    ,   4, 
                                BTPP,   1
                            }

                            PowerResource (BTPR, 0x00, 0x0000)
                            {
                                Method (_STA, 0, NotSerialized)  // _STA: Status
                                {
                                    If ((BTPP == One))
                                    {
                                        Return (One)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                }

                                Method (_RST, 0, Serialized)  // _RST: Device Reset
                                {
                                    BTPP = Zero
                                    Sleep (0x012C)
                                    BTPP = One
                                    Sleep (0x012C)
                                }
                            }

                            Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
                            {
                                BTPR
                            })
                        }

                        Device (PRT6)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                            {
                                Return (0x03)
                            }

                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT6._UPC\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (M600 (One, 0x03))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT6._PLD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (M601 (0x02, One, One, 0x03, 0x0112, Zero))
                            }
                        }

                        Device (PRT7)
                        {
                            Name (_ADR, 0x07)  // _ADR: Address
                            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                            {
                                Return (0x03)
                            }

                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT7._UPC\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (M600 (One, 0x03))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT7._PLD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (M601 (0x02, One, 0x02, 0x03, 0x0112, Zero))
                            }
                        }
                    }
                }

                Device (XHC1)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (PRT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Device (CAM0)
                            {
                                Name (_ADR, One)  // _ADR: Address
                                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                                {
                                    M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC1.RHUB.PRT1.CAM0._PLD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                    Return (M601 (0x04, Zero, 0x08, Zero, 0x0104, 0x00AF00E1))
                                }
                            }

                            Device (CAM1)
                            {
                                Name (_ADR, 0x03)  // _ADR: Address
                                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                                {
                                    M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC1.RHUB.PRT1.CAM1._PLD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                    Return (M601 (0x04, Zero, 0x08, Zero, 0x0104, 0x00AF00E1))
                                }
                            }

                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC1.RHUB.PRT1._UPC\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (M600 (Zero, 0x03))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC1.RHUB.PRT1._PLD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (M601 (0x02, Zero, 0x0101, Zero, 0x0112, Zero))
                            }
                        }

                        Device (PRT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC1.RHUB.PRT2._UPC\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (M600 (Zero, Zero))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC1.RHUB.PRT2._PLD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (M601 (0x02, One, 0x0101, 0x03, 0x0112, Zero))
                            }
                        }
                    }
                }

                Device (MP2C)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                }
            }

            Device (GP18)
            {
                Name (_ADR, 0x00080002)  // _ADR: Address
                Name (PR18, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKB, 
                        Zero
                    }
                })
                Name (AR18, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x11
                    }
                })
                Name (NR18, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x2A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x2B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x28
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x29
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR18) /* \_SB_.PCI0.GP18.NR18 */
                        }
                        Else
                        {
                            Return (AR18) /* \_SB_.PCI0.GP18.AR18 */
                        }
                    }
                    Else
                    {
                        Return (PR18) /* \_SB_.PCI0.GP18.PR18 */
                    }
                }

                Device (IPU)
                {
                    Name (_ADR, One)  // _ADR: Address
                }
            }

            Device (GP19)
            {
                Name (_ADR, 0x00080003)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0xFF                                             // .
                                })
                            }
                            Case (0x05)
                            {
                                Return (Zero)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Name (PR19, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKF, 
                        Zero
                    }
                })
                Name (AR19, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x15
                    }
                })
                Name (NR19, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x2E
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x2F
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x2C
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x2D
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR19) /* \_SB_.PCI0.GP19.NR19 */
                        }
                        Else
                        {
                            Return (AR19) /* \_SB_.PCI0.GP19.AR19 */
                        }
                    }
                    Else
                    {
                        Return (PR19) /* \_SB_.PCI0.GP19.PR19 */
                    }
                }

                Device (XHC2)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (PRT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP19.XHC2.RHUB.PRT1._UPC\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (M600 (Zero, Zero))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP19.XHC2.RHUB.PRT1._PLD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (M601 (0x02, Zero, 0x08, Zero, 0x0104, Zero))
                            }
                        }

                        Device (PRT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP19.XHC2.RHUB.PRT2._UPC\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (M600 (Zero, Zero))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP19.XHC2.RHUB.PRT2._PLD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (M601 (0x02, Zero, 0x08, Zero, 0x0104, Zero))
                            }
                        }
                    }
                }

                Device (NHI0)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }

                Device (XHC3)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (PRT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP19.XHC3.RHUB.PRT1._UPC\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (M600 (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP19.XHC3.RHUB.PRT1._PLD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (M601 (0x03, One, 0x0301, 0x03, 0x0112, Zero))
                            }
                        }

                        Device (PRT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP19.XHC3.RHUB.PRT2._UPC\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (M600 (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP19.XHC3.RHUB.PRT2._PLD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (M601 (0x03, One, 0x0301, 0x03, 0x0112, Zero))
                            }
                        }
                    }
                }

                Device (NHI1)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }

                Device (XHC4)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (PRT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP19.XHC4.RHUB.PRT1._UPC\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (M600 (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP19.XHC4.RHUB.PRT1._PLD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (M601 (0x03, One, 0x0401, 0x03, 0x0112, Zero))
                            }
                        }

                        Device (PRT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP19.XHC4.RHUB.PRT2._UPC\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (M600 (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP19.XHC4.RHUB.PRT2._PLD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (M601 (0x03, One, 0x0401, 0x03, 0x0112, Zero))
                            }
                        }
                    }
                }
            }

            Device (HPET)
            {
                Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((HPEN == One))
                    {
                        If ((OSTB >= 0x40))
                        {
                            M460 ("PLA-ASL-\\_SB.PCI0.HPET._STA = 0xF\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Return (0x0F)
                        }

                        HPEN = Zero
                        M460 ("PLA-ASL-\\_SB.PCI0.HPET._STA = 0x1\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (One)
                    }

                    M460 ("PLA-ASL-\\_SB.PCI0.HPET._STA 1 = 0x1\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (One)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    M460 ("PLA-ASL-\\_SB.PCI0.HPET._CRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Name (BUF0, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {0}
                        IRQNoFlags ()
                            {8}
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y06)
                    })
                    CreateDWordField (BUF0, \_SB.PCI0.HPET._CRS._Y06._BAS, HPEB)  // _BAS: Base Address
                    Local0 = 0xFED00000
                    HPEB = (Local0 & 0xFFFFFC00)
                    Return (BUF0) /* \_SB_.PCI0.HPET._CRS.BUF0 */
                }
            }

            Device (SMBS)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
            }

            Device (LPC0)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (COPR)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPC0.RTC_.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPC0.RTC_.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPC0.TMR_.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPC0.TMR_.BUF1 */
                    }
                }

                Device (KBC0)
                {
                    Name (_HID, EisaId ("FUJ7401"))  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _CID: Compatible ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        Interrupt (ResourceConsumer, Edge, ActiveLow, Shared, ,, )
                        {
                            0x00000001,
                        }
                    })
                }

                Device (SYSR)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0xD0,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D6,             // Range Minimum
                            0x04D6,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C00,             // Range Minimum
                            0x0C00,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0C14,             // Range Minimum
                            0x0C14,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C50,             // Range Minimum
                            0x0C50,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0C6C,             // Range Minimum
                            0x0C6C,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C6F,             // Range Minimum
                            0x0C6F,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0CD0,             // Range Minimum
                            0x0CD0,             // Range Maximum
                            0x01,               // Alignment
                            0x0C,               // Length
                            )
                    })
                }

                Device (MEM)
                {
                    Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                    Name (MSRC, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x000E0000,         // Address Base
                            0x00020000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFFF00000,         // Address Base
                            0x00100000,         // Address Length
                            _Y07)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y07._LEN, PSIZ)  // _LEN: Length
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y07._BAS, PBAS)  // _BAS: Base Address
                        PSIZ = ROMS /* \ROMS */
                        Local0 = (ROMS - One)
                        PBAS = (0xFFFFFFFF - Local0)
                        Return (MSRC) /* \_SB_.PCI0.LPC0.MEM_.MSRC */
                    }
                }

                Name (FNQ0, Package (0x18)
                {
                    Package (0x08)
                    {
                        0x05, 
                        0x07, 
                        0x06, 
                        One, 
                        0x08, 
                        0x03, 
                        0x0C, 
                        0x0B
                    }, 

                    Package (0x08)
                    {
                        0x00013880, 
                        0x00015F90, 
                        0x000186A0, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x00025D78, 
                        0x000186A0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xEA60, 
                        0x00011170, 
                        0x64, 
                        0x0A, 
                        0x64, 
                        0x00025D78, 
                        0x000186A0
                    }, 

                    Package (0x08)
                    {
                        0xD2F0, 
                        0xD2F0, 
                        0xFDE8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xD2F0, 
                        0xFDE8, 
                        0x64, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xC350, 
                        0xEA60, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xC350, 
                        0xEA60, 
                        0x32, 
                        0x05, 
                        0x64, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0xC350, 
                        0xEA60, 
                        0x32, 
                        0x05, 
                        0x64, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xAFC8, 
                        0xD2F0, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0x2710, 
                        0x2710, 
                        0x61A8, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0x61A8, 
                        0x61A8, 
                        0x7530, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0x7530, 
                        0x88B8, 
                        0x9C40, 
                        0x32, 
                        0x05, 
                        0x64, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0x9C40, 
                        0xAFC8, 
                        0x32, 
                        0x05, 
                        0x64, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xC350, 
                        0xD6D8, 
                        0x32, 
                        0x05, 
                        0x64, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0xEA60, 
                        0xFDE8, 
                        0x32, 
                        0x05, 
                        0x64, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0x00014C08, 
                        0x00015F90, 
                        0x000186A0, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x00025D78, 
                        0x000186A0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xEA60, 
                        0x00011170, 
                        0x64, 
                        0x0A, 
                        0x64, 
                        0x00025D78, 
                        0x000186A0
                    }, 

                    Package (0x08)
                    {
                        0x4E20, 
                        0x4E20, 
                        0x4E20, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xEA60, 
                        0x00011170, 
                        0x64, 
                        0x0A, 
                        0x64, 
                        0x00025D78, 
                        0x000186A0
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0xEA60, 
                        0x00011170, 
                        0x64, 
                        0x0A, 
                        0x64, 
                        0x00025D78, 
                        0x000186A0
                    }, 

                    Package (0x08)
                    {
                        0x9C40, 
                        0xEA60, 
                        0x00011170, 
                        0x64, 
                        0x0A, 
                        0x64, 
                        0x00025D78, 
                        0x000186A0
                    }, 

                    Package (0x08)
                    {
                        0xC350, 
                        0xEA60, 
                        0x00011170, 
                        0x64, 
                        0x0A, 
                        0x64, 
                        0x00025D78, 
                        0x000186A0
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0xEA60, 
                        0x00011170, 
                        0x64, 
                        0x0A, 
                        0x64, 
                        0x00025D78, 
                        0x000186A0
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0xEA60, 
                        0x00011170, 
                        0x64, 
                        0x0A, 
                        0x64, 
                        0x00025D78, 
                        0x000186A0
                    }
                })
                Name (FNQ1, Package (0x18)
                {
                    Package (0x08)
                    {
                        0x05, 
                        0x07, 
                        0x06, 
                        One, 
                        0x08, 
                        0x03, 
                        0x0C, 
                        0x0B
                    }, 

                    Package (0x08)
                    {
                        0x00013880, 
                        0x00015F90, 
                        0x000186A0, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x00025D78, 
                        0x000186A0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xEA60, 
                        0x00011170, 
                        0x64, 
                        0x0A, 
                        0x64, 
                        0x00025D78, 
                        0x000186A0
                    }, 

                    Package (0x08)
                    {
                        0xD2F0, 
                        0xD2F0, 
                        0xFDE8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xD2F0, 
                        0xFDE8, 
                        0x64, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xC350, 
                        0xEA60, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xC350, 
                        0xEA60, 
                        0x32, 
                        0x05, 
                        0x64, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0x7530, 
                        0xC350, 
                        0xEA60, 
                        0x32, 
                        0x05, 
                        0x64, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xAFC8, 
                        0xD2F0, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0x2710, 
                        0x2710, 
                        0x61A8, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0x61A8, 
                        0x61A8, 
                        0x7530, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0x7530, 
                        0x88B8, 
                        0x9C40, 
                        0x32, 
                        0x05, 
                        0x64, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0x9C40, 
                        0xAFC8, 
                        0x32, 
                        0x05, 
                        0x64, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xC350, 
                        0xD6D8, 
                        0x32, 
                        0x05, 
                        0x64, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0xEA60, 
                        0xFDE8, 
                        0x32, 
                        0x05, 
                        0x64, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0x00014C08, 
                        0x00015F90, 
                        0x000186A0, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x00025D78, 
                        0x000186A0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xEA60, 
                        0x00011170, 
                        0x64, 
                        0x0A, 
                        0x64, 
                        0x00025D78, 
                        0x000186A0
                    }, 

                    Package (0x08)
                    {
                        0x4E20, 
                        0x4E20, 
                        0x4E20, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xEA60, 
                        0x00011170, 
                        0x64, 
                        0x0A, 
                        0x64, 
                        0x00025D78, 
                        0x000186A0
                    }, 

                    Package (0x08)
                    {
                        0xC350, 
                        0xEA60, 
                        0x00011170, 
                        0x64, 
                        0x0A, 
                        0x64, 
                        0x00025D78, 
                        0x000186A0
                    }, 

                    Package (0x08)
                    {
                        0x9C40, 
                        0xEA60, 
                        0x00011170, 
                        0x64, 
                        0x0A, 
                        0x64, 
                        0x00025D78, 
                        0x000186A0
                    }, 

                    Package (0x08)
                    {
                        0xC350, 
                        0xEA60, 
                        0x00011170, 
                        0x64, 
                        0x0A, 
                        0x64, 
                        0x00025D78, 
                        0x000186A0
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0xEA60, 
                        0x00011170, 
                        0x64, 
                        0x0A, 
                        0x64, 
                        0x00025D78, 
                        0x000186A0
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0xEA60, 
                        0x00011170, 
                        0x64, 
                        0x0A, 
                        0x64, 
                        0x00025D78, 
                        0x000186A0
                    }
                })
                Name (FNQ2, Package (0x18)
                {
                    Package (0x08)
                    {
                        0x05, 
                        0x07, 
                        0x06, 
                        One, 
                        0x08, 
                        0x03, 
                        0x0C, 
                        0x0B
                    }, 

                    Package (0x08)
                    {
                        0x00013880, 
                        0x00015F90, 
                        0x000186A0, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x00025D78, 
                        0x000186A0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xEA60, 
                        0x00011170, 
                        0x64, 
                        0x0A, 
                        0x64, 
                        0x00025D78, 
                        0x000186A0
                    }, 

                    Package (0x08)
                    {
                        0xD2F0, 
                        0xD2F0, 
                        0xFDE8, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xD2F0, 
                        0xFDE8, 
                        0x64, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xC350, 
                        0xEA60, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xC350, 
                        0xEA60, 
                        0x32, 
                        0x05, 
                        0x64, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0xC350, 
                        0xEA60, 
                        0x32, 
                        0x05, 
                        0x64, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xAFC8, 
                        0xD2F0, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0x2710, 
                        0x2710, 
                        0x61A8, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0x61A8, 
                        0x61A8, 
                        0x7530, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0x7530, 
                        0x88B8, 
                        0x9C40, 
                        0x32, 
                        0x05, 
                        0x64, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0x9C40, 
                        0xAFC8, 
                        0x32, 
                        0x05, 
                        0x64, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xC350, 
                        0xD6D8, 
                        0x32, 
                        0x05, 
                        0x64, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0xEA60, 
                        0xFDE8, 
                        0x32, 
                        0x05, 
                        0x64, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0x00014C08, 
                        0x00015F90, 
                        0x000186A0, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x00025D78, 
                        0x000186A0
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xEA60, 
                        0x00011170, 
                        0x64, 
                        0x0A, 
                        0x64, 
                        0x00025D78, 
                        0x000186A0
                    }, 

                    Package (0x08)
                    {
                        0x4E20, 
                        0x4E20, 
                        0x4E20, 
                        0x012C, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xEA60, 
                        0x00011170, 
                        0x64, 
                        0x0A, 
                        0x64, 
                        0x00025D78, 
                        0x000186A0
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0xEA60, 
                        0x00011170, 
                        0x64, 
                        0x0A, 
                        0x64, 
                        0x00025D78, 
                        0x000186A0
                    }, 

                    Package (0x08)
                    {
                        0xFDE8, 
                        0xEA60, 
                        0x00011170, 
                        0x64, 
                        0x0A, 
                        0x64, 
                        0x00025D78, 
                        0x000186A0
                    }, 

                    Package (0x08)
                    {
                        0xEA60, 
                        0xEA60, 
                        0x00011170, 
                        0x64, 
                        0x0A, 
                        0x64, 
                        0x00025D78, 
                        0x000186A0
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0xEA60, 
                        0x00011170, 
                        0x64, 
                        0x0A, 
                        0x64, 
                        0x00025D78, 
                        0x000186A0
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0xEA60, 
                        0x00011170, 
                        0x64, 
                        0x0A, 
                        0x64, 
                        0x00025D78, 
                        0x000186A0
                    }
                })
                Method (FTSW, 0, NotSerialized)
                {
                    If ((GTYP == One))
                    {
                        Local0 = FNQ1 /* \_SB_.PCI0.LPC0.FNQ1 */
                    }
                    ElseIf ((GTYP == 0x04))
                    {
                        Local0 = FNQ2 /* \_SB_.PCI0.LPC0.FNQ2 */
                    }
                    Else
                    {
                        Local0 = FNQ0 /* \_SB_.PCI0.LPC0.FNQ0 */
                    }

                    Return (Local0)
                }

                Method (FNQR, 1, NotSerialized)
                {
                    Local6 = FTSW ()
                    Local0 = SizeOf (Local6 [Zero])
                    Local1 = ((Local1 = (Local0 * 0x05)) + 0x02)
                    Name (BUFF, Buffer (0x07){})
                    BUFF [Zero] = 0x07
                    BUFF [One] = Zero
                    Local2 = One
                    Local3 = Zero
                    Local4 = Zero
                    While ((Local3 < Local0))
                    {
                        BUFF [0x02] = DerefOf (DerefOf (Local6 [Zero]) [
                            Local3])
                        Local4 = DerefOf (DerefOf (Local6 [Arg0]) [Local3])
                        BUFF [0x03] = (Local4 & 0xFF)
                        BUFF [0x04] = ((Local4 & 0xFF00) >> 0x08)
                        BUFF [0x05] = ((Local4 & 0x00FF0000) >> 0x10)
                        BUFF [0x06] = ((Local4 & 0xFF000000) >> 0x18)
                        ALIB (0x0C, BUFF)
                        Sleep (0x19)
                        Local3 += One
                    }
                }

                Name (XX11, Buffer (0x07){})
                CreateWordField (XX11, Zero, SSZE)
                CreateByteField (XX11, 0x02, SMUF)
                CreateDWordField (XX11, 0x03, SMUD)
                Method (FNQT, 2, Serialized)
                {
                    Local0 = ToInteger (^EC0.DCMB)
                    If (((Local0 > Zero) && (Local0 < 0x07)))
                    {
                        Local0 += 0x08
                        FNQR (Local0)
                        Return (Zero)
                    }

                    If ((Local0 == 0x07))
                    {
                        FNQR (0x11)
                        Return (Zero)
                    }

                    If ((Arg0 == One))
                    {
                        Local0 = Arg1
                        FNQR (Local0)
                        Return (Zero)
                    }

                    If ((Arg0 == 0x02))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Zero)
                        }

                        SSZE = 0x07
                        SMUF = 0x05
                        SMUD = Arg1
                        ALIB (0x0C, XX11)
                        Return (Zero)
                    }

                    If ((^EC0.ADPT == One))
                    {
                        If ((^EC0.ACMO != One))
                        {
                            Return (Zero)
                        }

                        If ((^EC0.ADSL == One))
                        {
                            Return (Zero)
                        }
                    }

                    If ((^EC0.ADPT == One))
                    {
                        If ((^EC0.CTMD == One))
                        {
                            If ((^EC0.CTE0 == One))
                            {
                                EMQT ()
                                Return (Zero)
                            }
                            Else
                            {
                                If ((DBFS == One))
                                {
                                    Local0 = 0x04
                                }
                                Else
                                {
                                    Local0 = 0x03
                                }

                                FNQR (Local0)
                                CMQT ()
                                Return (Zero)
                            }
                        }
                    }

                    Local0 = One
                    If ((^EC0.SPMO == One))
                    {
                        If ((PRFT == Zero))
                        {
                            If ((DBFS == One))
                            {
                                If ((BDPF == One))
                                {
                                    Local0 = 0x17
                                }
                                Else
                                {
                                    Local0 = 0x02
                                }
                            }
                            Else
                            {
                                Local0 = One
                            }
                        }
                        ElseIf ((EPSW == One))
                        {
                            If ((DBFS == One))
                            {
                                Local0 = 0x10
                            }
                            Else
                            {
                                Local0 = 0x0F
                            }
                        }
                        ElseIf ((DBFS == One))
                        {
                            Local0 = 0x02
                        }
                        Else
                        {
                            Local0 = One
                        }
                    }
                    ElseIf ((^EC0.SPMO == 0x02))
                    {
                        If ((^EC0.ADPT == Zero))
                        {
                            Local0 = 0x08
                        }
                        ElseIf ((DBFS == One))
                        {
                            Local0 = 0x07
                        }
                        Else
                        {
                            Local0 = 0x06
                        }
                    }
                    ElseIf ((^EC0.ADPT == Zero))
                    {
                        Local0 = 0x05
                    }
                    ElseIf ((INSM == Zero))
                    {
                        If ((DBFS == One))
                        {
                            Local0 = 0x04
                        }
                        Else
                        {
                            Local0 = 0x03
                        }
                    }
                    Else
                    {
                        Local0 = (0x11 + INSM) /* External reference */
                    }

                    FNQR (Local0)
                }

                Method (CMQT, 0, Serialized)
                {
                    Name (CMBU, Buffer (0x16){})
                    CreateWordField (CMBU, Zero, SSZ1)
                    CreateByteField (CMBU, 0x02, NUM1)
                    CreateDWordField (CMBU, 0x03, MUD1)
                    CreateByteField (CMBU, 0x07, NUM2)
                    CreateDWordField (CMBU, 0x08, MUD2)
                    CreateByteField (CMBU, 0x0C, NUM3)
                    CreateDWordField (CMBU, 0x0D, MUD3)
                    CreateByteField (CMBU, 0x11, NUM4)
                    CreateDWordField (CMBU, 0x12, MUD4)
                    If ((Acquire (^EC0.LFCM, 0xA000) == Zero))
                    {
                        SSZ1 = 0x16
                        NUM1 = 0x05
                        Local0 = ^EC0.CPP2 /* \_SB_.PCI0.LPC0.EC0_.CPP2 */
                        Local0 *= 0x03E8
                        MUD1 = Local0
                        NUM2 = 0x07
                        Local1 = ^EC0.CPP1 /* \_SB_.PCI0.LPC0.EC0_.CPP1 */
                        Local1 *= 0x03E8
                        MUD2 = Local1
                        NUM3 = 0x06
                        Local2 = ^EC0.CPP3 /* \_SB_.PCI0.LPC0.EC0_.CPP3 */
                        Local2 *= 0x03E8
                        MUD3 = Local2
                        NUM4 = 0x03
                        MUD4 = ^EC0.CGTC /* \_SB_.PCI0.LPC0.EC0_.CGTC */
                        ALIB (0x0C, CMBU)
                        Release (^EC0.LFCM)
                    }
                }

                Method (EMQT, 0, Serialized)
                {
                    If ((EPSW == One))
                    {
                        If ((DBFS == One))
                        {
                            Local0 = 0x10
                        }
                        Else
                        {
                            Local0 = 0x0F
                        }
                    }
                    ElseIf ((DBFS == One))
                    {
                        Local0 = 0x02
                    }
                    Else
                    {
                        Local0 = One
                    }

                    FNQR (Local0)
                }

                Method (CTCL, 0, Serialized)
                {
                    Name (X112, Buffer (0x07){})
                    CreateWordField (X112, Zero, S1ZE)
                    CreateByteField (X112, 0x02, S1UF)
                    CreateDWordField (X112, 0x03, S1UD)
                    If ((^EC0.TDC1 == One))
                    {
                        S1ZE = 0x07
                        S1UF = 0x0B
                        S1UD = 0x00014C08
                        If ((^EC0.SPMO == One))
                        {
                            If ((PRFT == One))
                            {
                                S1UD = 0x00014C08
                            }
                        }

                        If ((^EC0.CTMD == One))
                        {
                            If ((^EC0.CTE0 == One))
                            {
                                S1UD = 0x00014C08
                            }
                        }

                        ALIB (0x0C, X112)
                    }

                    If ((^EC0.TDC2 == One))
                    {
                        S1ZE = 0x07
                        S1UF = 0x0B
                        S1UD = 0x00011170
                        ALIB (0x0C, X112)
                    }
                }

                Scope (\)
                {
                    Name (ECON, One)
                    Name (DDTS, Zero)
                }

                Device (EC0)
                {
                    Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (ECAV, Zero)
                    Name (WEID, Zero)
                    Name (CTSD, Zero)
                    Mutex (LFCM, 0x00)
                    Name (_GPE, 0x09)  // _GPE: General Purpose Events
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BFFR, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0062,             // Range Minimum
                                0x0062,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0066,             // Range Minimum
                                0x0066,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0480,             // Range Minimum
                                0x0480,             // Range Maximum
                                0x00,               // Alignment
                                0x10,               // Length
                                )
                        })
                        Return (BFFR) /* \_SB_.PCI0.LPC0.EC0_._CRS.BFFR */
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((ECON == One))
                        {
                            Return (0x0F)
                        }

                        Return (Zero)
                    }

                    OperationRegion (ERA6, SystemMemory, 0xFEEC2600, 0xFF)
                    Field (ERA6, AnyAcc, Lock, Preserve)
                    {
                        Offset (0xFC), 
                        HT0L,   8, 
                        HT0H,   8
                    }

                    OperationRegion (COCD, SystemMemory, 0xFEEC2678, 0x10)
                    Field (COCD, ByteAcc, Lock, Preserve)
                    {
                        CGTH,   8, 
                        YLOG,   8, 
                        CST2,   8, 
                        RLS2,   8, 
                        COD3,   8, 
                        COD5,   8, 
                        GPAB,   8, 
                        TGPP,   8, 
                        GATP,   8
                    }

                    OperationRegion (F9FT, SystemMemory, 0xFEEC29F0, 0x20)
                    Field (F9FT, AnyAcc, Lock, Preserve)
                    {
                        F9F0,   8, 
                        F9F1,   8, 
                        F9F2,   8, 
                        F9F3,   8, 
                        F9F4,   8, 
                        F9F5,   8, 
                        F9F6,   8, 
                        F9F7,   8, 
                        F9F8,   8, 
                        F9F9,   8, 
                        F9FA,   8
                    }

                    OperationRegion (ECPW, SystemMemory, 0xFEEC22A7, One)
                    Field (ECPW, AnyAcc, Lock, Preserve)
                    {
                        ADSS,   1, 
                        ADSL,   1, 
                            ,   2, 
                        ADCS,   1, 
                        ADCL,   1, 
                            ,   1, 
                        ADNS,   1
                    }

                    OperationRegion (F9FF, SystemMemory, 0xFEEC25FF, One)
                    Field (F9FF, AnyAcc, Lock, Preserve)
                    {
                            ,   4, 
                        CTE0,   1, 
                        Offset (0x01)
                    }

                    OperationRegion (YYLG, SystemMemory, 0xFEEC29FD, One)
                    Field (YYLG, AnyAcc, Lock, Preserve)
                    {
                        YALG,   8
                    }

                    OperationRegion (CPUP, SystemMemory, 0xFEEC26B0, 0x10)
                    Field (CPUP, ByteAcc, NoLock, Preserve)
                    {
                        CPP1,   16, 
                        CPP2,   16, 
                        CPP3,   16, 
                        CPP4,   16, 
                        CGTC,   8
                    }

                    OperationRegion (ERAM, EmbeddedControl, Zero, 0xFF)
                    Field (ERAM, ByteAcc, Lock, Preserve)
                    {
                        VCMD,   8
                    }

                    OperationRegion (ECB2, SystemMemory, 0xFEEC2660, 0xFF)
                    Field (ECB2, AnyAcc, Lock, Preserve)
                    {
                        BAR1,   184, 
                        BAR2,   80
                    }

                    OperationRegion (ERA5, SystemMemory, 0xFEEC2500, 0xFF)
                    Field (ERA5, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x04), 
                        HWAK,   16, 
                        Offset (0xF0), 
                        IGPS,   2, 
                        IGF4,   1, 
                        Offset (0xF1), 
                        GPTH,   8, 
                        SGCB,   8, 
                        GPUF,   8, 
                        Offset (0xF5), 
                        Offset (0xFE), 
                        PDAB,   8
                    }

                    OperationRegion (ERAX, SystemMemory, 0xFEEC2400, 0xFF)
                    Field (ERAX, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x01), 
                        VDAT,   8, 
                        VSTA,   8, 
                        ENCM,   1, 
                        BSNC,   1, 
                        Offset (0x06), 
                        FANS,   8, 
                        BUSG,   1, 
                        BLEG,   1, 
                        BATF,   1, 
                        BNSM,   1, 
                        BTST,   1, 
                        BBAD,   1, 
                        AUTO,   1, 
                        FCHG,   1, 
                        STMM,   8, 
                        STMH,   8, 
                        EDCC,   1, 
                            ,   1, 
                        CDMB,   1, 
                        CCSB,   1, 
                        BTSM,   1, 
                        BTCM,   1, 
                            ,   1, 
                        Offset (0x0B), 
                        SGST,   1, 
                        HDMI,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                        Offset (0x0C), 
                        ODPO,   1, 
                        EODD,   1, 
                        ODPK,   1, 
                        CMEX,   1, 
                        CMON,   1, 
                        SODD,   1, 
                        ODFB,   1, 
                        EODS,   1, 
                        RTMP,   8, 
                        SBTS,   8, 
                        MPTS,   8, 
                        PINF,   3, 
                        SUPR,   1, 
                        GTMP,   1, 
                        QUIT,   1, 
                        LS35,   1, 
                        Offset (0x11), 
                        RMBT,   1, 
                        RSBT,   1, 
                            ,   2, 
                        Offset (0x12), 
                        FUSL,   8, 
                        FUSH,   8, 
                        FWBT,   64, 
                        Offset (0x1D), 
                        CTMD,   1, 
                        CAC1,   1, 
                        FNST,   1, 
                        YLSF,   1, 
                        EMFG,   1, 
                        APPF,   1, 
                        HPFF,   1, 
                        ACPS,   1, 
                        SSFM,   1, 
                        BLCF,   1, 
                        PABD,   1, 
                        ES3F,   1, 
                        ES5F,   1, 
                        TBOF,   1, 
                        GPOF,   1, 
                        RS8F,   1, 
                        LSKV,   8, 
                        SPMO,   4, 
                        MSMF,   1, 
                        GSFS,   1, 
                        MACF,   1, 
                        MCUD,   1, 
                        BTFW,   8, 
                        UBCC,   8, 
                        RGBS,   1, 
                        KBLT,   1, 
                            ,   5, 
                        LCON,   1, 
                        BACT,   16, 
                        KBGS,   32, 
                        FEPL,   8, 
                        FEPH,   8, 
                        KBSS,   32, 
                        Offset (0x31), 
                        GIRT,   8, 
                        PIRT,   8, 
                        KIRT,   8, 
                        IRTI,   8, 
                        Offset (0x36), 
                        DGPU,   8, 
                        GUST,   8, 
                        GDST,   8, 
                        FCST,   8, 
                        Offset (0x3E), 
                        APTS,   4, 
                            ,   3, 
                        IPRC,   1, 
                        PRRO,   1, 
                        PRWO,   1, 
                            ,   5, 
                        SPBL,   1, 
                        PCBV,   16, 
                        PCBS,   8, 
                        ECTP,   8, 
                            ,   3, 
                        ACPD,   1, 
                        SACS,   1, 
                        EACS,   1, 
                        STCS,   1, 
                        ETCS,   1, 
                        KBGC,   32, 
                        Offset (0x4A), 
                        ESMC,   1, 
                        Offset (0x4B), 
                        EMOD,   8, 
                        BFUD,   16, 
                        Offset (0x50), 
                        Offset (0x51), 
                        Offset (0x52), 
                        Offset (0x53), 
                        Offset (0x54), 
                            ,   3, 
                        PDMD,   1, 
                        Offset (0x55), 
                            ,   1, 
                        TPMD,   1, 
                        Offset (0x56), 
                        Offset (0x57), 
                            ,   5, 
                        BTSB,   3, 
                        BTHT,   4, 
                        BTTP,   4, 
                        BTLF,   4, 
                        Offset (0x5A), 
                        GPPW,   8, 
                        PATY,   8, 
                        BACA,   8, 
                        EXSI,   8, 
                        EXSB,   8, 
                        EXND,   8, 
                        SMPR,   8, 
                        SMST,   8, 
                        SMAD,   8, 
                        SMCM,   8, 
                        SMDA,   256, 
                        BCNT,   8, 
                        SMAA,   8, 
                        SAD0,   8, 
                        SAD1,   8, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                        FBDC,   1, 
                        FBFG,   1, 
                        Offset (0x8A), 
                        KBLO,   1, 
                        UCHE,   1, 
                        KLCH,   1, 
                            ,   1, 
                        KLFS,   1, 
                        KLOR,   1, 
                        CIBM,   1, 
                        UCER,   1, 
                        TPDV,   3, 
                        Offset (0x8C), 
                        QCHO,   1, 
                        BKLT,   1, 
                        BSFU,   1, 
                            ,   1, 
                            ,   1, 
                        OKBS,   1, 
                            ,   1, 
                        QCBX,   1, 
                        FLBT,   1, 
                            ,   2, 
                        LESR,   1, 
                            ,   3, 
                        ESLP,   1, 
                        Offset (0x8F), 
                        BMN0,   72, 
                        BDN0,   64, 
                        IBTL,   1, 
                        IBCL,   1, 
                        ISS0,   1, 
                        IRTC,   1, 
                        ISUP,   1, 
                        ISC2,   1, 
                        IWAK,   1, 
                        Offset (0xA1), 
                        FPFC,   1, 
                        VOUT,   1, 
                        TPAD,   1, 
                        HKDB,   1, 
                        NUML,   1, 
                        CALK,   1, 
                        CCPW,   1, 
                        EECP,   1, 
                        DCMB,   8, 
                        OSTY,   3, 
                        ACMO,   1, 
                        ADPI,   2, 
                            ,   1, 
                        ADPT,   1, 
                        PMEW,   1, 
                        MODW,   1, 
                        LANW,   1, 
                        RTCW,   1, 
                        WLAW,   1, 
                        USBW,   1, 
                        KEYW,   1, 
                        TPWK,   1, 
                        CHCR,   1, 
                        ADPP,   1, 
                        LERN,   1, 
                        ACMD,   1, 
                        BOVP,   1, 
                        LEAK,   1, 
                        AIRP,   1, 
                        ACOF,   1, 
                        Offset (0xA7), 
                        Offset (0xA8), 
                        Offset (0xA9), 
                        THRT,   8, 
                        Offset (0xAB), 
                        Offset (0xAC), 
                        Offset (0xAD), 
                        Offset (0xAE), 
                        TLVL,   4, 
                            ,   2, 
                        THSW,   1, 
                        TPIN,   1, 
                        NVHC,   8, 
                        CPUT,   8, 
                        CPUS,   8, 
                        PCHS,   8, 
                        GPUS,   8, 
                        GPUT,   8, 
                        SSDS,   8, 
                        PCHT,   8, 
                        CHIS,   8, 
                            ,   1, 
                        LSTE,   1, 
                        PMEE,   1, 
                        PWBE,   1, 
                        RNGE,   1, 
                        BTWE,   1, 
                        Offset (0xB9), 
                        LCBV,   8, 
                        DGDF,   8, 
                        WLAN,   1, 
                        BLUE,   1, 
                        WEXT,   1, 
                        BEXT,   1, 
                        KILL,   1, 
                        WLOK,   1, 
                        EN3G,   1, 
                        EX3G,   1, 
                        Offset (0xBD), 
                        CTYP,   3, 
                        CORE,   3, 
                        GATY,   2, 
                        BA1P,   1, 
                        BA2P,   1, 
                            ,   2, 
                        B1CH,   1, 
                        B2CH,   1, 
                        Offset (0xBF), 
                        PBY1,   1, 
                        PBY2,   1, 
                            ,   2, 
                        SMB1,   1, 
                        SMB2,   1, 
                        Offset (0xC0), 
                        B1TY,   1, 
                        B1MD,   1, 
                        B1LW,   1, 
                            ,   1, 
                        B1MF,   3, 
                        Offset (0xC1), 
                        B1ST,   8, 
                        B1RC,   16, 
                        B1SN,   16, 
                        B1FV,   16, 
                        B1DV,   16, 
                        B1DC,   16, 
                        B1FC,   16, 
                        B1GS,   8, 
                        Offset (0xD0), 
                        B1CR,   16, 
                        B1AC,   16, 
                        B1PC,   8, 
                        B1VL,   8, 
                        B1TM,   8, 
                        B1AT,   8, 
                        B1CC,   16, 
                        B1TC,   8, 
                        B1CI,   8, 
                        B1CU,   8, 
                        B1CA,   8, 
                        B1SM,   16, 
                        B1VC,   8, 
                        B1FA,   8, 
                        B1VA,   8, 
                        B1C1,   16, 
                        B1C2,   16, 
                        B1C3,   16, 
                        B1C4,   16, 
                        Offset (0xEC), 
                        MAXE,   16, 
                        B1CT,   16, 
                        B1EX,   1, 
                        B1FL,   1, 
                        B1EP,   1, 
                        B1FI,   1, 
                            ,   2, 
                        B1RE,   1, 
                        Offset (0xF1), 
                        B1LL,   1, 
                        B1CE,   1, 
                        B1SE,   1, 
                        B1S5,   1, 
                        B1SR,   1, 
                        B1SC,   1, 
                        Offset (0xF2), 
                        B1TO,   1, 
                        B1BC,   1, 
                        B1CF,   1, 
                        B1CS,   1, 
                        B1SG,   1, 
                        B1SU,   1, 
                        B1OV,   1, 
                        B1OT,   1, 
                        B1TT,   1, 
                        B1SA,   1, 
                        B1SS,   1, 
                            ,   1, 
                        B1SF,   1, 
                        B1WN,   1, 
                        Offset (0xF4), 
                        B1DA,   16, 
                        Offset (0xF8), 
                        B1CN,   8, 
                        ITMD,   1, 
                        Offset (0xFA), 
                        Offset (0xFB), 
                        Offset (0xFE), 
                        FA2S,   8
                    }

                    OperationRegion (ECMS, SystemIO, 0x72, 0x02)
                    Field (ECMS, ByteAcc, Lock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    OperationRegion (PRT0, SystemIO, 0x80, 0x02)
                    Field (PRT0, WordAcc, Lock, Preserve)
                    {
                        P80B,   16
                    }

                    Method (RECM, 1, Serialized)
                    {
                        INDX = Arg0
                        Return (DATA) /* \_SB_.PCI0.LPC0.EC0_.DATA */
                    }

                    Method (WECM, 2, Serialized)
                    {
                        INDX = Arg0
                        DATA = Arg1
                    }

                    Method (REJF, 1, NotSerialized)
                    {
                        If ((Acquire (LFCM, 0xA000) == Zero))
                        {
                            If ((Arg0 == One))
                            {
                                Local0 = IGPS /* \_SB_.PCI0.LPC0.EC0_.IGPS */
                            }

                            If ((Arg0 == 0x02))
                            {
                                Local0 = HPFF /* \_SB_.PCI0.LPC0.EC0_.HPFF */
                            }

                            If ((Arg0 == 0x03))
                            {
                                Local0 = APPF /* \_SB_.PCI0.LPC0.EC0_.APPF */
                            }

                            Release (LFCM)
                            Return (Local0)
                        }
                    }

                    Method (WEJF, 2, NotSerialized)
                    {
                        If ((Acquire (LFCM, 0xA000) == Zero))
                        {
                            If ((Arg0 == One))
                            {
                                IGPS = Arg1
                            }

                            If ((Arg0 == 0x02))
                            {
                                HPFF = Arg1
                            }

                            If ((Arg0 == 0x03))
                            {
                                APPF = Arg1
                            }

                            Release (LFCM)
                        }
                    }

                    Method (EOST, 0, Serialized)
                    {
                        OSTP ()
                        If ((TPOS == 0x40))
                        {
                            Local0 = One
                        }

                        If ((TPOS == 0x80))
                        {
                            Local0 = 0x02
                        }

                        If ((TPOS == 0x50))
                        {
                            Local0 = 0x03
                        }

                        If ((TPOS == 0x60))
                        {
                            Local0 = 0x04
                        }

                        If ((TPOS == 0x61))
                        {
                            Local0 = 0x05
                        }

                        If ((TPOS == 0x70))
                        {
                            Local0 = 0x06
                        }

                        If ((Acquire (LFCM, 0xA000) == Zero))
                        {
                            OSTY = Local0
                            Release (LFCM)
                        }
                    }

                    Method (ACTY, 0, NotSerialized)
                    {
                        If ((One == ADPT))
                        {
                            If ((One == ACMO))
                            {
                                If ((One == ACPS))
                                {
                                    Return (0x04)
                                }
                                Else
                                {
                                    Return (One)
                                }
                            }
                            Else
                            {
                                Return (0x02)
                            }
                        }
                        Else
                        {
                            Return (0x03)
                        }
                    }

                    OperationRegion (CMDE, SystemIO, 0x62, 0x0B)
                    Field (CMDE, ByteAcc, Lock, Preserve)
                    {
                        EC62,   8, 
                        Offset (0x02), 
                        Offset (0x03), 
                        Offset (0x04), 
                        EC66,   8, 
                        Offset (0x06), 
                        EC68,   8, 
                        Offset (0x08), 
                        Offset (0x09), 
                        Offset (0x0A), 
                        EC6C,   8
                    }

                    Method (WIBE, 1, Serialized)
                    {
                        Local0 = 0x00010000
                        While (Local0)
                        {
                            If ((Arg0 == One))
                            {
                                Local1 = EC66 /* \_SB_.PCI0.LPC0.EC0_.EC66 */
                            }
                            ElseIf ((Arg0 == 0x02))
                            {
                                Local1 = EC6C /* \_SB_.PCI0.LPC0.EC0_.EC6C */
                            }
                            Else
                            {
                                Return (0x02)
                            }

                            If (((Local1 & 0x02) == Zero))
                            {
                                Return (Zero)
                            }

                            Stall (0x0A)
                            Local0--
                        }

                        Return (One)
                    }

                    Method (WOBF, 1, Serialized)
                    {
                        Local0 = 0x00010000
                        While (Local0)
                        {
                            If ((Arg0 == One))
                            {
                                Local1 = EC66 /* \_SB_.PCI0.LPC0.EC0_.EC66 */
                            }
                            ElseIf ((Arg0 == 0x02))
                            {
                                Local1 = EC6C /* \_SB_.PCI0.LPC0.EC0_.EC6C */
                            }
                            Else
                            {
                                Return (0x02)
                            }

                            If (((Local1 & One) == One))
                            {
                                Return (Zero)
                            }

                            Stall (0x0A)
                            Local0--
                        }

                        Return (One)
                    }

                    Method (WOBE, 1, Serialized)
                    {
                        Local0 = 0x00010000
                        While (Local0)
                        {
                            If ((Arg0 == One))
                            {
                                Local1 = EC66 /* \_SB_.PCI0.LPC0.EC0_.EC66 */
                            }
                            ElseIf ((Arg0 == 0x02))
                            {
                                Local1 = EC6C /* \_SB_.PCI0.LPC0.EC0_.EC6C */
                            }
                            Else
                            {
                                Return (0x02)
                            }

                            If (((Local1 & One) == One))
                            {
                                If ((Arg0 == One))
                                {
                                    Local2 = EC62 /* \_SB_.PCI0.LPC0.EC0_.EC62 */
                                }
                                ElseIf ((Arg0 == 0x02))
                                {
                                    Local2 = EC68 /* \_SB_.PCI0.LPC0.EC0_.EC68 */
                                }
                                Else
                                {
                                    Return (0x02)
                                }
                            }
                            Else
                            {
                                Return (Zero)
                            }

                            Stall (0x0A)
                            Local0--
                        }

                        Return (One)
                    }

                    Method (GECF, 2, Serialized)
                    {
                        Name (LBUD, Zero)
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        If ((WOBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        EC6C = Arg0
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        If (((Arg1 != Zero) && (Arg1 != 0xFF)))
                        {
                            EC68 = Arg1
                            If ((WIBE (0x02) != Zero))
                            {
                                Return (One)
                            }
                        }

                        If ((WOBF (0x02) != Zero))
                        {
                            Return (One)
                        }

                        LBUD = EC68 /* \_SB_.PCI0.LPC0.EC0_.EC68 */
                        Return (LBUD) /* \_SB_.PCI0.LPC0.EC0_.GECF.LBUD */
                    }

                    Method (MBEI, 3, Serialized)
                    {
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        If ((WOBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        EC6C = Arg0
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        EC68 = Arg1
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        EC68 = Arg2
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        If ((WOBF (0x02) != Zero))
                        {
                            Return (One)
                        }

                        Local0 = EC68 /* \_SB_.PCI0.LPC0.EC0_.EC68 */
                        Return (Local0)
                    }

                    Method (LCMD, 2, Serialized)
                    {
                        Name (LBUF, Buffer (0x1E)
                        {
                             0x00                                             // .
                        })
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        If ((WOBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        EC6C = Arg0
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        If (((Arg1 != Zero) && (Arg1 != 0xFF)))
                        {
                            EC68 = Arg1
                            If ((WIBE (0x02) != Zero))
                            {
                                Return (One)
                            }
                        }

                        If ((WOBF (0x02) != Zero))
                        {
                            Return (One)
                        }

                        Local0 = EC68 /* \_SB_.PCI0.LPC0.EC0_.EC68 */
                        Local1 = Zero
                        While (Local0)
                        {
                            If ((WOBF (0x02) != Zero))
                            {
                                Return (One)
                            }

                            LBUF [Local1] = EC68 /* \_SB_.PCI0.LPC0.EC0_.EC68 */
                            Local1++
                            Local0--
                        }

                        Return (LBUF) /* \_SB_.PCI0.LPC0.EC0_.LCMD.LBUF */
                    }

                    Method (NCMD, 2, Serialized)
                    {
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        If ((WOBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        EC6C = Arg0
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        If (((Arg1 != Zero) && (Arg1 != 0xFF)))
                        {
                            EC68 = Arg1
                            If ((WIBE (0x02) != Zero))
                            {
                                Return (One)
                            }
                        }

                        Return (Zero)
                    }

                    Method (SCMD, 2, Serialized)
                    {
                        Name (LBUF, Buffer (0x1E)
                        {
                             0x00                                             // .
                        })
                        If ((WIBE (One) != Zero))
                        {
                            Return (One)
                        }

                        If ((WOBE (One) != Zero))
                        {
                            Return (One)
                        }

                        EC66 = Arg0
                        If ((WIBE (One) != Zero))
                        {
                            Return (One)
                        }

                        If (((Arg1 != Zero) && (Arg1 != 0xFF)))
                        {
                            EC62 = Arg1
                            If ((WIBE (One) != Zero))
                            {
                                Return (One)
                            }
                        }

                        If ((WOBF (One) != Zero))
                        {
                            Return (One)
                        }

                        Local0 = EC62 /* \_SB_.PCI0.LPC0.EC0_.EC62 */
                        Local1 = Zero
                        While (Local0)
                        {
                            If ((WOBF (One) != Zero))
                            {
                                Return (One)
                            }

                            LBUF [Local1] = EC62 /* \_SB_.PCI0.LPC0.EC0_.EC62 */
                            Local1++
                            Local0--
                        }

                        Return (LBUF) /* \_SB_.PCI0.LPC0.EC0_.SCMD.LBUF */
                    }

                    Method (TCMD, 2, Serialized)
                    {
                        If ((WIBE (One) != Zero))
                        {
                            Return (One)
                        }

                        If ((WOBE (One) != Zero))
                        {
                            Return (One)
                        }

                        EC66 = Arg0
                        If ((WIBE (One) != Zero))
                        {
                            Return (One)
                        }

                        If (((Arg1 != Zero) && (Arg1 != 0xFF)))
                        {
                            EC62 = Arg1
                            If ((WIBE (One) != Zero))
                            {
                                Return (One)
                            }
                        }

                        Return (Zero)
                    }

                    Method (LRAM, 2, Serialized)
                    {
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        If ((WOBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        EC6C = 0x7E
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        EC68 = Arg0
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        EC68 = Arg1
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        If ((WOBF (0x02) != Zero))
                        {
                            Return (One)
                        }

                        Return (EC68) /* \_SB_.PCI0.LPC0.EC0_.EC68 */
                    }

                    Method (SRAM, 2, Serialized)
                    {
                        If ((WIBE (One) != Zero))
                        {
                            Return (One)
                        }

                        If ((WOBE (One) != Zero))
                        {
                            Return (One)
                        }

                        EC66 = 0x7E
                        If ((WIBE (One) != Zero))
                        {
                            Return (One)
                        }

                        EC62 = Arg0
                        If ((WIBE (One) != Zero))
                        {
                            Return (One)
                        }

                        EC62 = Arg1
                        If ((WIBE (One) != Zero))
                        {
                            Return (One)
                        }

                        If ((WOBF (One) != Zero))
                        {
                            Return (One)
                        }

                        Return (EC62) /* \_SB_.PCI0.LPC0.EC0_.EC62 */
                    }

                    Device (BAT0)
                    {
                        Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                        Name (_UID, One)  // _UID: Unique ID
                        Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                        {
                            _SB
                        })
                        Name (PBIF, Package (0x0D)
                        {
                            Zero, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            One, 
                            0xFFFFFFFF, 
                            Zero, 
                            Zero, 
                            0x64, 
                            Zero, 
                            "LCFC", 
                            "BAT20101001", 
                            "LiP", 
                            "LENOVO"
                        })
                        Name (XBIF, Package (0x15)
                        {
                            One, 
                            Zero, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            One, 
                            0xFFFFFFFF, 
                            Zero, 
                            Zero, 
                            Zero, 
                            0x00017318, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0x03E8, 
                            0x03E8, 
                            0x64, 
                            Zero, 
                            "LCFC", 
                            "BAT20101001", 
                            "LiP", 
                            "LENOVO", 
                            One
                        })
                        Name (PBST, Package (0x04)
                        {
                            One, 
                            0x0A90, 
                            0x1000, 
                            0x2A30
                        })
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (ECAV)
                            {
                                If ((Acquire (LFCM, 0xA000) == Zero))
                                {
                                    Local0 = BA1P /* \_SB_.PCI0.LPC0.EC0_.BA1P */
                                    Release (LFCM)
                                }
                            }

                            If ((Local0 & One))
                            {
                                Return (0x1F)
                            }
                            Else
                            {
                                Return (0x0F)
                            }
                        }

                        Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
                        {
                            If ((ECAV == One))
                            {
                                If ((Acquire (LFCM, 0xA000) == Zero))
                                {
                                    Local0 = B1DC /* \_SB_.PCI0.LPC0.EC0_.B1DC */
                                    Local0 *= 0x0A
                                    PBIF [One] = Local0
                                    Local0 = B1FC /* \_SB_.PCI0.LPC0.EC0_.B1FC */
                                    Local0 *= 0x0A
                                    PBIF [0x02] = Local0
                                    PBIF [0x04] = B1DV /* \_SB_.PCI0.LPC0.EC0_.B1DV */
                                    If (B1FC)
                                    {
                                        PBIF [0x05] = ((B1FC * 0x0A) / 0x0A)
                                        PBIF [0x07] = ((B1DC * 0x0A) / 0x64)
                                    }

                                    PBIF [0x09] = ""
                                    PBIF [0x0A] = ""
                                    PBIF [0x0B] = ""
                                    PBIF [0x0C] = ""
                                    Name (BDNT, Buffer (0x09)
                                    {
                                         0x00                                             // .
                                    })
                                    BDNT = BDN0 /* \_SB_.PCI0.LPC0.EC0_.BDN0 */
                                    PBIF [0x09] = ToString (BDNT, Ones)
                                    Local0 = B1SN /* \_SB_.PCI0.LPC0.EC0_.B1SN */
                                    Name (SERN, Buffer (0x06)
                                    {
                                        "     "
                                    })
                                    Local2 = 0x04
                                    While (Local0)
                                    {
                                        Divide (Local0, 0x0A, Local1, Local0)
                                        SERN [Local2] = (Local1 + 0x30)
                                        Local2--
                                    }

                                    PBIF [0x0A] = SERN /* \_SB_.PCI0.LPC0.EC0_.BAT0._BIF.SERN */
                                    Name (DCH0, Buffer (0x0A)
                                    {
                                         0x00                                             // .
                                    })
                                    Name (DCH1, "LION")
                                    Name (DCH2, "LiP")
                                    If ((B1TY == One))
                                    {
                                        DCH0 = DCH1 /* \_SB_.PCI0.LPC0.EC0_.BAT0._BIF.DCH1 */
                                        PBIF [0x0B] = ToString (DCH0, Ones)
                                    }
                                    Else
                                    {
                                        DCH0 = DCH2 /* \_SB_.PCI0.LPC0.EC0_.BAT0._BIF.DCH2 */
                                        PBIF [0x0B] = ToString (DCH0, Ones)
                                    }

                                    Name (BMNT, Buffer (0x0A)
                                    {
                                         0x00                                             // .
                                    })
                                    BMNT = BMN0 /* \_SB_.PCI0.LPC0.EC0_.BMN0 */
                                    PBIF [0x0C] = ToString (BMNT, Ones)
                                    Release (LFCM)
                                }
                            }

                            Return (PBIF) /* \_SB_.PCI0.LPC0.EC0_.BAT0.PBIF */
                        }

                        Method (_BIX, 0, NotSerialized)  // _BIX: Battery Information Extended
                        {
                            If ((ECAV == One))
                            {
                                If ((Acquire (LFCM, 0xA000) == Zero))
                                {
                                    Local0 = B1DC /* \_SB_.PCI0.LPC0.EC0_.B1DC */
                                    Local0 *= 0x0A
                                    XBIF [0x02] = Local0
                                    Local0 = B1FC /* \_SB_.PCI0.LPC0.EC0_.B1FC */
                                    Local0 *= 0x0A
                                    XBIF [0x03] = Local0
                                    XBIF [0x05] = B1DV /* \_SB_.PCI0.LPC0.EC0_.B1DV */
                                    If (B1FC)
                                    {
                                        XBIF [0x06] = ((B1FC * 0x0A) / 0x0A)
                                        XBIF [0x0E] = ((B1DC * 0x0A) / 0x64)
                                    }

                                    XBIF [0x08] = B1CT /* \_SB_.PCI0.LPC0.EC0_.B1CT */
                                    XBIF [0x10] = ""
                                    XBIF [0x11] = ""
                                    XBIF [0x12] = ""
                                    XBIF [0x13] = ""
                                    Name (BDNT, Buffer (0x09)
                                    {
                                         0x00                                             // .
                                    })
                                    BDNT = BDN0 /* \_SB_.PCI0.LPC0.EC0_.BDN0 */
                                    XBIF [0x10] = ToString (BDNT, Ones)
                                    Local0 = B1SN /* \_SB_.PCI0.LPC0.EC0_.B1SN */
                                    Name (SERN, Buffer (0x06)
                                    {
                                        "     "
                                    })
                                    Local2 = 0x04
                                    While (Local0)
                                    {
                                        Divide (Local0, 0x0A, Local1, Local0)
                                        SERN [Local2] = (Local1 + 0x30)
                                        Local2--
                                    }

                                    XBIF [0x11] = SERN /* \_SB_.PCI0.LPC0.EC0_.BAT0._BIX.SERN */
                                    Name (DCH0, Buffer (0x0A)
                                    {
                                         0x00                                             // .
                                    })
                                    Name (DCH1, "LION")
                                    Name (DCH2, "LiP")
                                    If ((B1TY == One))
                                    {
                                        DCH0 = DCH1 /* \_SB_.PCI0.LPC0.EC0_.BAT0._BIX.DCH1 */
                                        XBIF [0x12] = ToString (DCH0, Ones)
                                    }
                                    Else
                                    {
                                        DCH0 = DCH2 /* \_SB_.PCI0.LPC0.EC0_.BAT0._BIX.DCH2 */
                                        XBIF [0x12] = ToString (DCH0, Ones)
                                    }

                                    Name (BMNT, Buffer (0x0A)
                                    {
                                         0x00                                             // .
                                    })
                                    BMNT = BMN0 /* \_SB_.PCI0.LPC0.EC0_.BMN0 */
                                    XBIF [0x13] = ToString (BMNT, Ones)
                                    Release (LFCM)
                                }
                            }

                            Return (XBIF) /* \_SB_.PCI0.LPC0.EC0_.BAT0.XBIF */
                        }

                        Name (OBST, Zero)
                        Name (OBAC, Zero)
                        Name (OBPR, Zero)
                        Name (OBRC, Zero)
                        Name (OBPV, Zero)
                        Method (_BST, 0, Serialized)  // _BST: Battery Status
                        {
                            If ((ECAV == One))
                            {
                                If ((Acquire (LFCM, 0xA000) == Zero))
                                {
                                    Sleep (0x10)
                                    Local0 = B1ST /* \_SB_.PCI0.LPC0.EC0_.B1ST */
                                    Local1 = DerefOf (PBST [Zero])
                                    Switch ((Local0 & 0x07))
                                    {
                                        Case (Zero)
                                        {
                                            OBST = (Local1 & 0xF8)
                                        }
                                        Case (One)
                                        {
                                            OBST = (One | (Local1 & 0xF8))
                                        }
                                        Case (0x02)
                                        {
                                            OBST = (0x02 | (Local1 & 0xF8))
                                        }
                                        Case (0x04)
                                        {
                                            OBST = (0x04 | (Local1 & 0xF8))
                                        }

                                    }

                                    Sleep (0x10)
                                    OBAC = B1AC /* \_SB_.PCI0.LPC0.EC0_.B1AC */
                                    If ((OBST & One))
                                    {
                                        If ((OBAC != Zero))
                                        {
                                            OBAC = (~OBAC & 0x7FFF)
                                        }
                                    }
                                    ElseIf ((FBFG != One))
                                    {
                                        If ((OBAC & 0x8000))
                                        {
                                            OBAC = Zero
                                        }
                                    }

                                    Sleep (0x10)
                                    OBRC = B1RC /* \_SB_.PCI0.LPC0.EC0_.B1RC */
                                    Sleep (0x10)
                                    OBPV = B1FV /* \_SB_.PCI0.LPC0.EC0_.B1FV */
                                    OBRC *= 0x0A
                                    OBPR = ((OBAC * OBPV) / 0x03E8)
                                    PBST [Zero] = OBST /* \_SB_.PCI0.LPC0.EC0_.BAT0.OBST */
                                    PBST [One] = OBPR /* \_SB_.PCI0.LPC0.EC0_.BAT0.OBPR */
                                    PBST [0x02] = OBRC /* \_SB_.PCI0.LPC0.EC0_.BAT0.OBRC */
                                    PBST [0x03] = OBPV /* \_SB_.PCI0.LPC0.EC0_.BAT0.OBPV */
                                    Release (LFCM)
                                }
                            }

                            Return (PBST) /* \_SB_.PCI0.LPC0.EC0_.BAT0.PBST */
                        }

                        Method (AJTP, 3, NotSerialized)
                        {
                            Local0 = Arg1
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                Local1 = B1RC /* \_SB_.PCI0.LPC0.EC0_.B1RC */
                                If ((Local0 >= Local1))
                                {
                                    Local0 = (Local1 - One)
                                }

                                Release (LFCM)
                            }

                            Return (Local0)
                        }

                        Method (_BTP, 1, NotSerialized)  // _BTP: Battery Trip Point
                        {
                            If (ECAV)
                            {
                                If ((Acquire (LFCM, 0xA000) == Zero))
                                {
                                    If (Arg0)
                                    {
                                        Local0 = Zero
                                        Local1 = Arg0
                                        Divide (Local1, 0x0A, Local0, Local1)
                                        Release (LFCM)
                                        Local1 = AJTP (Zero, Local1, Local0)
                                        HT0L = (Local1 & 0xFF)
                                        HT0H = ((Local1 >> 0x08) & 0xFF)
                                    }
                                }
                            }
                        }
                    }

                    Scope (\_SB.PCI0.LPC0.EC0)
                    {
                        Device (VPC0)
                        {
                            Name (_HID, "VPC2004")  // _HID: Hardware ID
                            Name (_UID, Zero)  // _UID: Unique ID
                            Name (_VPC, 0x7C0DF50A)
                            Name (VPCD, Zero)
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                Return (0x0F)
                            }

                            Method (_CFG, 0, NotSerialized)
                            {
                                Return (_VPC) /* \_SB_.PCI0.LPC0.EC0_.VPC0._VPC */
                            }

                            Method (VPCR, 1, Serialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        If ((Arg0 == One))
                                        {
                                            VPCD = VCMD /* \_SB_.PCI0.LPC0.EC0_.VCMD */
                                        }
                                        Else
                                        {
                                            VPCD = VDAT /* \_SB_.PCI0.LPC0.EC0_.VDAT */
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (VPCD) /* \_SB_.PCI0.LPC0.EC0_.VPC0.VPCD */
                            }

                            Method (VPCW, 2, Serialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        If ((Arg0 == One))
                                        {
                                            VCMD = Arg1
                                        }
                                        Else
                                        {
                                            VDAT = Arg1
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (Zero)
                            }

                            Method (SVCR, 1, Serialized)
                            {
                            }

                            Method (HALS, 0, NotSerialized)
                            {
                                Local0 = Zero
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        Local0 |= 0x08
                                        Local0 |= 0x40
                                        If ((One == UCHE))
                                        {
                                            Local0 |= 0x80
                                        }

                                        Local0 |= 0x0200
                                        If ((Zero == HKDB))
                                        {
                                            Local0 |= 0x0400
                                        }

                                        Local0 |= Zero
                                        If (ITMD)
                                        {
                                            Local0 |= 0x2000
                                        }

                                        Local0 |= 0x4000
                                        If ((One == CIBM))
                                        {
                                            Local0 |= 0x8000
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (Local0)
                            }

                            Method (SALS, 1, Serialized)
                            {
                                Local0 = ToInteger (Arg0)
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        If ((Local0 == 0x0A))
                                        {
                                            UCHE = One
                                            SMBB = 0x32
                                            SMBA = 0xCA
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        If ((Local0 == 0x0B))
                                        {
                                            UCHE = Zero
                                            SMBB = 0x33
                                            SMBA = 0xCA
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        If ((Local0 == 0x0E))
                                        {
                                            HKDB = Zero
                                            SMBB = 0x30
                                            SMBA = 0xCA
                                            Release (LFCM)
                                            TCMD (0x8D, 0x0A)
                                            Return (Zero)
                                        }

                                        If ((Local0 == 0x0F))
                                        {
                                            HKDB = One
                                            SMBB = 0x31
                                            SMBA = 0xCA
                                            Release (LFCM)
                                            TCMD (0x8D, 0x0B)
                                            Return (Zero)
                                        }

                                        If ((Local0 == 0x12))
                                        {
                                            CIBM = Zero
                                            SMBB = 0x34
                                            SMBA = 0xCA
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        If ((Local0 == 0x13))
                                        {
                                            CIBM = One
                                            SMBB = 0x35
                                            SMBA = 0xCA
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (Zero)
                            }

                            Method (GBMD, 0, NotSerialized)
                            {
                                Local0 = 0x10000000
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        If ((One == CDMB))
                                        {
                                            Local0 |= One
                                        }

                                        If ((One == QCBX))
                                        {
                                            If ((One == QCHO))
                                            {
                                                Local0 |= 0x04
                                            }
                                        }

                                        If ((One == BBAD))
                                        {
                                            Local0 |= 0x08
                                        }

                                        If ((One == BTSM))
                                        {
                                            Local0 |= 0x20
                                        }

                                        If ((One == BLEG))
                                        {
                                            Local0 |= 0x80
                                        }

                                        If ((One == BATF))
                                        {
                                            Local0 |= 0x0100
                                        }

                                        If ((Zero == BTSM))
                                        {
                                            Local0 |= 0x0200
                                        }

                                        If ((One == BUSG))
                                        {
                                            Local0 |= 0x0800
                                        }

                                        If ((Zero == ADPI))
                                        {
                                            Local0 &= 0xFFFE7FFF
                                        }

                                        If ((One == ADPI))
                                        {
                                            Local0 |= 0x8000
                                        }

                                        If ((0x02 == ADPI))
                                        {
                                            Local0 |= 0x00010000
                                        }

                                        If ((One == QCBX))
                                        {
                                            Local0 |= 0x00020000
                                        }

                                        Local0 |= 0x00040000
                                        If ((One == ESMC))
                                        {
                                            Local0 |= 0x00400000
                                        }

                                        Local0 |= 0x00800000
                                        Release (LFCM)
                                    }
                                }

                                Return (Local0)
                            }

                            Name (VBST, Zero)
                            Name (VBAC, Zero)
                            Name (VBPR, Zero)
                            Name (VBRC, Zero)
                            Name (VBPV, Zero)
                            Name (VBFC, Zero)
                            Name (VBCT, Zero)
                            Method (SMTF, 1, NotSerialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        If ((Arg0 == Zero))
                                        {
                                            If ((B1FV == Zero))
                                            {
                                                Release (LFCM)
                                                Return (0xFFFF)
                                            }

                                            If ((B1AC == Zero))
                                            {
                                                Release (LFCM)
                                                Return (0xFFFF)
                                            }

                                            Local0 = B1FC /* \_SB_.PCI0.LPC0.EC0_.B1FC */
                                            Local0 *= 0x0A
                                            VBFC = Local0
                                            Local1 = B1RC /* \_SB_.PCI0.LPC0.EC0_.B1RC */
                                            Local1 *= 0x0A
                                            VBRC = Local1
                                            If ((VBFC > VBRC))
                                            {
                                                VBPV = B1FV /* \_SB_.PCI0.LPC0.EC0_.B1FV */
                                                VBAC = B1AC /* \_SB_.PCI0.LPC0.EC0_.B1AC */
                                                Local0 -= Local1
                                                Local1 = (VBAC * VBPV)
                                                Local3 = (Local0 * 0x03E8)
                                                Local3 = (Local3 * 0x3C)
                                                VBCT = (Local3 / Local1)
                                                Release (LFCM)
                                                Return (VBCT) /* \_SB_.PCI0.LPC0.EC0_.VPC0.VBCT */
                                            }
                                            Else
                                            {
                                                Release (LFCM)
                                                Return (0xFFFF)
                                            }
                                        }

                                        If ((Arg0 == One))
                                        {
                                            Release (LFCM)
                                            Return (0xFFFF)
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (0xFFFF)
                            }

                            Name (QBST, Zero)
                            Name (QBAC, Zero)
                            Name (QBPR, Zero)
                            Name (QBRC, Zero)
                            Name (QBPV, Zero)
                            Name (QBFC, Zero)
                            Name (QBCT, Zero)
                            Method (SMTE, 1, NotSerialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        If ((Arg0 == Zero))
                                        {
                                            If ((B1FV == Zero))
                                            {
                                                Release (LFCM)
                                                Return (0xFFFF)
                                            }

                                            If ((B1AC == Zero))
                                            {
                                                Release (LFCM)
                                                Return (0xFFFF)
                                            }

                                            Local0 = B1RC /* \_SB_.PCI0.LPC0.EC0_.B1RC */
                                            Local0 *= 0x0A
                                            QBRC = Local0
                                            Local1 = B1FC /* \_SB_.PCI0.LPC0.EC0_.B1FC */
                                            Local1 *= 0x0A
                                            QBFC = Local1
                                            If ((QBFC > QBRC))
                                            {
                                                QBPV = B1FV /* \_SB_.PCI0.LPC0.EC0_.B1FV */
                                                If (((B1AC & 0x8000) == Zero))
                                                {
                                                    QBAC = B1AC /* \_SB_.PCI0.LPC0.EC0_.B1AC */
                                                }
                                                Else
                                                {
                                                    QBAC = (0xFFFF - B1AC)
                                                }

                                                Local1 = (QBAC * QBPV)
                                                Local3 = (Local0 * 0x03E8)
                                                Local3 = (Local3 * 0x3C)
                                                QBCT = (Local3 / Local1)
                                                Release (LFCM)
                                                Return (QBCT) /* \_SB_.PCI0.LPC0.EC0_.VPC0.QBCT */
                                            }
                                            Else
                                            {
                                                Release (LFCM)
                                                Return (0xFFFF)
                                            }
                                        }

                                        If ((Arg0 == One))
                                        {
                                            Release (LFCM)
                                            Return (0xFFFF)
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (0xFFFF)
                            }

                            Method (SBMC, 1, NotSerialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        If ((Arg0 == Zero))
                                        {
                                            CDMB = Zero
                                            EDCC = One
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        If ((Arg0 == One))
                                        {
                                            CDMB = One
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        If ((Arg0 == 0x03))
                                        {
                                            BTSM = One
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        If ((Arg0 == 0x05))
                                        {
                                            BTSM = Zero
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        If ((One == QCBX))
                                        {
                                            If ((Arg0 == 0x07))
                                            {
                                                QCHO = One
                                                BTSM = Zero
                                                Release (LFCM)
                                                Return (Zero)
                                            }
                                        }

                                        If ((One == QCBX))
                                        {
                                            If ((Arg0 == 0x08))
                                            {
                                                QCHO = Zero
                                                Release (LFCM)
                                                Return (Zero)
                                            }
                                        }

                                        If ((Arg0 == 0x09))
                                        {
                                            ESMC = One
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        If ((Arg0 == 0x10))
                                        {
                                            ESMC = Zero
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (Zero)
                            }

                            Method (MHCF, 1, NotSerialized)
                            {
                                P80H = 0x78
                                Local0 = Arg0
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        Local0 &= 0x20
                                        Local0 >>= 0x05
                                        RMBT = Local0
                                        Sleep (0x14)
                                        Release (LFCM)
                                    }
                                }

                                Return (Local0)
                            }

                            Method (MHPF, 1, NotSerialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        Name (BFWB, Buffer (0x25){})
                                        CreateByteField (BFWB, Zero, FB0)
                                        CreateByteField (BFWB, One, FB1)
                                        CreateByteField (BFWB, 0x02, FB2)
                                        CreateByteField (BFWB, 0x03, FB3)
                                        CreateField (BFWB, 0x20, 0x0100, FB4)
                                        CreateByteField (BFWB, 0x24, FB5)
                                        If ((SizeOf (Arg0) <= 0x25))
                                        {
                                            Sleep (One)
                                            If ((SMPR != Zero))
                                            {
                                                FB1 = SMST /* \_SB_.PCI0.LPC0.EC0_.SMST */
                                            }
                                            Else
                                            {
                                                BFWB = Arg0
                                                SMAD = FB2 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB2_ */
                                                SMCM = FB3 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB3_ */
                                                BCNT = FB5 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB5_ */
                                                Local0 = FB0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB0_ */
                                                If (((Local0 & One) == Zero))
                                                {
                                                    SMDA = FB4 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB4_ */
                                                }

                                                SMST = Zero
                                                SMPR = FB0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB0_ */
                                                BTFW = 0x80
                                                Local1 = 0x03E8
                                                While (Local1)
                                                {
                                                    Sleep (One)
                                                    Local1--
                                                    If (((SMST && 0x80) || (SMPR == Zero)))
                                                    {
                                                        Break
                                                    }
                                                }

                                                Local0 = FB0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB0_ */
                                                If (((Local0 & One) != Zero))
                                                {
                                                    FB4 = SMDA /* \_SB_.PCI0.LPC0.EC0_.SMDA */
                                                }

                                                FB1 = SMST /* \_SB_.PCI0.LPC0.EC0_.SMST */
                                                If (((Local1 == Zero) || !(SMST && 0x80)))
                                                {
                                                    SMPR = Zero
                                                    FB1 = 0x92
                                                }
                                            }

                                            Release (LFCM)
                                            Return (BFWB) /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.BFWB */
                                        }

                                        Release (LFCM)
                                    }
                                }
                            }

                            Method (MHIF, 1, NotSerialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        P80H = 0x50
                                        If ((Arg0 == Zero))
                                        {
                                            Name (RETB, Buffer (0x0A){})
                                            Name (BUF1, Buffer (0x08){})
                                            BUF1 = FWBT /* \_SB_.PCI0.LPC0.EC0_.FWBT */
                                            CreateByteField (BUF1, Zero, FW0)
                                            CreateByteField (BUF1, One, FW1)
                                            CreateByteField (BUF1, 0x02, FW2)
                                            CreateByteField (BUF1, 0x03, FW3)
                                            CreateByteField (BUF1, 0x04, FW4)
                                            CreateByteField (BUF1, 0x05, FW5)
                                            CreateByteField (BUF1, 0x06, FW6)
                                            CreateByteField (BUF1, 0x07, FW7)
                                            RETB [Zero] = FUSL /* \_SB_.PCI0.LPC0.EC0_.FUSL */
                                            RETB [One] = FUSH /* \_SB_.PCI0.LPC0.EC0_.FUSH */
                                            RETB [0x02] = FW0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FW0_ */
                                            RETB [0x03] = FW1 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FW1_ */
                                            RETB [0x04] = FW2 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FW2_ */
                                            RETB [0x05] = FW3 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FW3_ */
                                            RETB [0x06] = FW4 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FW4_ */
                                            RETB [0x07] = FW5 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FW5_ */
                                            RETB [0x08] = FW6 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FW6_ */
                                            RETB [0x09] = FW7 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FW7_ */
                                            Release (LFCM)
                                            Return (RETB) /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.RETB */
                                        }

                                        Release (LFCM)
                                    }
                                }
                            }

                            Method (GSBI, 1, NotSerialized)
                            {
                                Name (BIFB, Buffer (0x53)
                                {
                                    /* 0000 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0018 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0028 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0030 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0038 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0040 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0048 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0050 */  0xFF, 0xFF, 0xFF                                 // ...
                                })
                                CreateWordField (BIFB, Zero, DCAP)
                                CreateWordField (BIFB, 0x02, FCAP)
                                CreateWordField (BIFB, 0x04, RCAP)
                                CreateWordField (BIFB, 0x06, ATTE)
                                CreateWordField (BIFB, 0x08, ATTF)
                                CreateWordField (BIFB, 0x0A, BTVT)
                                CreateWordField (BIFB, 0x0C, BTCT)
                                CreateWordField (BIFB, 0x0E, BTMP)
                                CreateWordField (BIFB, 0x10, MDAT)
                                CreateWordField (BIFB, 0x12, FUDT)
                                CreateWordField (BIFB, 0x14, DVLT)
                                CreateField (BIFB, 0xB0, 0x50, DCHE)
                                CreateField (BIFB, 0x0100, 0x40, DNAM)
                                CreateField (BIFB, 0x0140, 0x60, MNAM)
                                CreateField (BIFB, 0x01A0, 0xB8, BRNB)
                                CreateQWordField (BIFB, 0x4B, BFW0)
                                If (((Arg0 == Zero) || (Arg0 == One)))
                                {
                                    If (ECAV)
                                    {
                                        If ((Acquire (LFCM, 0xA000) == Zero))
                                        {
                                            Local0 = B1DC /* \_SB_.PCI0.LPC0.EC0_.B1DC */
                                            Local0 *= 0x0A
                                            DCAP = Local0
                                            Local0 = B1FC /* \_SB_.PCI0.LPC0.EC0_.B1FC */
                                            Local0 *= 0x0A
                                            FCAP = Local0
                                            Local0 = B1RC /* \_SB_.PCI0.LPC0.EC0_.B1RC */
                                            Local0 *= 0x0A
                                            RCAP = Local0
                                            ATTE = SMTE (Zero)
                                            ATTF = SMTF (Zero)
                                            BTVT = B1FV /* \_SB_.PCI0.LPC0.EC0_.B1FV */
                                            BTCT = B1AC /* \_SB_.PCI0.LPC0.EC0_.B1AC */
                                            Local0 = B1AT /* \_SB_.PCI0.LPC0.EC0_.B1AT */
                                            Local0 += 0x0111
                                            Local0 *= 0x0A
                                            BTMP = Local0
                                            MDAT = B1DA /* \_SB_.PCI0.LPC0.EC0_.B1DA */
                                            If ((BFUD != Zero))
                                            {
                                                FUDT = BFUD /* \_SB_.PCI0.LPC0.EC0_.BFUD */
                                            }

                                            DVLT = B1DV /* \_SB_.PCI0.LPC0.EC0_.B1DV */
                                            Name (DCH0, Buffer (0x0A)
                                            {
                                                 0x00                                             // .
                                            })
                                            Name (DCH1, "LION")
                                            Name (DCH2, "LiP")
                                            If ((B1TY == One))
                                            {
                                                DCH0 = DCH1 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.DCH1 */
                                                DCHE = DCH0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.DCH0 */
                                            }
                                            Else
                                            {
                                                DCH0 = DCH2 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.DCH2 */
                                                DCHE = DCH0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.DCH0 */
                                            }

                                            Name (BDNT, Buffer (0x08)
                                            {
                                                 0x00                                             // .
                                            })
                                            BDNT = BDN0 /* \_SB_.PCI0.LPC0.EC0_.BDN0 */
                                            DNAM = BDNT /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.BDNT */
                                            Name (BMNT, Buffer (0x0C)
                                            {
                                                 0x00                                             // .
                                            })
                                            BMNT = BMN0 /* \_SB_.PCI0.LPC0.EC0_.BMN0 */
                                            MNAM = BMNT /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.BMNT */
                                            Name (BRN0, Buffer (0x17)
                                            {
                                                 0x00                                             // .
                                            })
                                            BRN0 = BAR1 /* \_SB_.PCI0.LPC0.EC0_.BAR1 */
                                            BRNB = BRN0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.BRN0 */
                                            BFW0 = FWBT /* \_SB_.PCI0.LPC0.EC0_.FWBT */
                                            Release (LFCM)
                                        }
                                    }

                                    Return (BIFB) /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.BIFB */
                                }

                                If ((Arg0 == 0x02))
                                {
                                    Return (BIFB) /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.BIFB */
                                }

                                Return (Zero)
                            }

                            Method (HODD, 0, NotSerialized)
                            {
                            }

                            Method (SODD, 1, Serialized)
                            {
                            }

                            Method (GBID, 0, Serialized)
                            {
                                Name (GBUF, Package (0x04)
                                {
                                    Buffer (0x02)
                                    {
                                         0x00, 0x00                                       // ..
                                    }, 

                                    Buffer (0x02)
                                    {
                                         0x00, 0x00                                       // ..
                                    }, 

                                    Buffer (0x08)
                                    {
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }, 

                                    Buffer (0x08)
                                    {
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        DerefOf (GBUF [Zero]) [Zero] = B1CT /* \_SB_.PCI0.LPC0.EC0_.B1CT */
                                        DerefOf (GBUF [One]) [Zero] = Zero
                                        Name (BUF1, Buffer (0x08){})
                                        BUF1 = FWBT /* \_SB_.PCI0.LPC0.EC0_.FWBT */
                                        CreateByteField (BUF1, Zero, FW0)
                                        CreateByteField (BUF1, One, FW1)
                                        CreateByteField (BUF1, 0x02, FW2)
                                        CreateByteField (BUF1, 0x03, FW3)
                                        CreateByteField (BUF1, 0x04, FW4)
                                        CreateByteField (BUF1, 0x05, FW5)
                                        CreateByteField (BUF1, 0x06, FW6)
                                        CreateByteField (BUF1, 0x07, FW7)
                                        DerefOf (GBUF [0x02]) [Zero] = FW0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FW0_ */
                                        DerefOf (GBUF [0x02]) [One] = FW1 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FW1_ */
                                        DerefOf (GBUF [0x02]) [0x02] = FW2 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FW2_ */
                                        DerefOf (GBUF [0x02]) [0x03] = FW3 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FW3_ */
                                        DerefOf (GBUF [0x02]) [0x04] = FW4 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FW4_ */
                                        DerefOf (GBUF [0x02]) [0x05] = FW5 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FW5_ */
                                        DerefOf (GBUF [0x02]) [0x06] = FW6 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FW6_ */
                                        DerefOf (GBUF [0x02]) [0x07] = FW7 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FW7_ */
                                        DerefOf (GBUF [0x03]) [Zero] = Zero
                                        Release (LFCM)
                                    }
                                }

                                Return (GBUF) /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.GBUF */
                            }

                            Name (APDT, Zero)
                            Method (APPC, 1, Serialized)
                            {
                                APDT = Arg0
                                Return (Zero)
                            }

                            Method (DBSL, 0, NotSerialized)
                            {
                                Return (Package (0x10)
                                {
                                    0xC9, 
                                    0xAE, 
                                    0x95, 
                                    0x7E, 
                                    0x69, 
                                    0x56, 
                                    0x45, 
                                    0x36, 
                                    0x29, 
                                    0x1E, 
                                    0x15, 
                                    0x0E, 
                                    0x09, 
                                    0x06, 
                                    0x05, 
                                    Zero
                                })
                            }

                            Method (SBSL, 1, Serialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        Local0 = Arg0
                                        If ((Local0 == One))
                                        {
                                            LCBV = 0x0E
                                        }

                                        If ((Local0 == 0x02))
                                        {
                                            LCBV = 0x07
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (Zero)
                            }

                            Method (KBLC, 1, NotSerialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        If ((Arg0 == One))
                                        {
                                            Local0 = KBGC /* \_SB_.PCI0.LPC0.EC0_.KBGC */
                                            Release (LFCM)
                                            Return ((Local0 | One))
                                        }
                                        ElseIf (((Arg0 & 0x0F) == 0x02))
                                        {
                                            Local0 = KBGC /* \_SB_.PCI0.LPC0.EC0_.KBGC */
                                            Local0 &= 0xFFFFFFFE
                                            Local1 = (Arg0 & 0xFFF0)
                                            Local1 >>= 0x03
                                            If ((Local0 != Local1))
                                            {
                                                Release (LFCM)
                                                Return (Zero)
                                            }
                                            Else
                                            {
                                                Local3 = KBGS /* \_SB_.PCI0.LPC0.EC0_.KBGS */
                                                Release (LFCM)
                                                Return ((Local3 | One))
                                            }
                                        }
                                        ElseIf (((Arg0 & 0x0F) == 0x03))
                                        {
                                            Local0 = KBGC /* \_SB_.PCI0.LPC0.EC0_.KBGC */
                                            Local0 &= 0xFFFFFFFE
                                            Local1 = (Arg0 & 0xFFF0)
                                            Local1 >>= 0x03
                                            If ((Local0 != Local1))
                                            {
                                                Release (LFCM)
                                                Return (Zero)
                                            }
                                            Else
                                            {
                                                Local3 = (Arg0 & 0xFFFFFFFF)
                                                KBSS = Local3
                                                Sleep (0x012C)
                                                Local3 = KBGS /* \_SB_.PCI0.LPC0.EC0_.KBGS */
                                                Release (LFCM)
                                                Return ((Local3 | One))
                                            }
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (Zero)
                            }

                            Method (BSIF, 1, NotSerialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        If (((Arg0 & 0x0F) == One))
                                        {
                                            Local0 = Arg0
                                            Local0 >>= 0x04
                                            Local1 = Zero
                                            If ((Local0 == One))
                                            {
                                                Local1 |= 0x0B80
                                                Return ((Local1 | One))
                                            }
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (Zero)
                            }

                            Method (BTMC, 1, NotSerialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        If (((Arg0 & 0x0F) == One))
                                        {
                                            Local0 = Arg0
                                            Local0 >>= 0x04
                                            Local1 = Zero
                                            If ((Local0 == One))
                                            {
                                                If ((TPMD == Zero))
                                                {
                                                    Local1 = Zero
                                                }
                                                ElseIf ((TPMD == One))
                                                {
                                                    If ((PDMD == One))
                                                    {
                                                        Local1 = One
                                                    }
                                                    ElseIf ((PDMD == Zero))
                                                    {
                                                        Local1 = 0x02
                                                    }
                                                }

                                                Local1 <<= 0x04
                                                Release (LFCM)
                                                Return ((Local1 | One))
                                            }
                                            ElseIf ((Local0 == 0x02))
                                            {
                                                Local1 = BTLF /* \_SB_.PCI0.LPC0.EC0_.BTLF */
                                                Local1 <<= 0x04
                                                Release (LFCM)
                                                Return ((Local1 | One))
                                            }
                                            ElseIf ((Local0 == 0x03))
                                            {
                                                Local1 = BTTP /* \_SB_.PCI0.LPC0.EC0_.BTTP */
                                                Local1 <<= 0x04
                                                Release (LFCM)
                                                Return ((Local1 | One))
                                            }
                                            ElseIf ((Local0 == 0x04))
                                            {
                                                Local1 = BTLF /* \_SB_.PCI0.LPC0.EC0_.BTLF */
                                                Local1 <<= 0x04
                                                Release (LFCM)
                                                Return ((Local1 | One))
                                            }
                                            Else
                                            {
                                                Release (LFCM)
                                                Return (Local1)
                                            }
                                        }
                                        ElseIf (((Arg0 & 0x0F) == 0x02))
                                        {
                                            Local0 = One
                                            Local0 <<= One
                                            Release (LFCM)
                                            Return (Local0)
                                        }
                                        ElseIf (((Arg0 & 0x0F) == 0x03))
                                        {
                                            Local0 = Arg0
                                            Local0 >>= 0x04
                                            Local1 = Zero
                                            Local2 = Zero
                                            If ((Local0 == One))
                                            {
                                                Local1 = One
                                                If ((BTSB == 0x04))
                                                {
                                                    Local2 = 0x03
                                                }

                                                Local1 <<= One
                                                Local2 <<= 0x02
                                                Local1 |= Local2
                                                Release (LFCM)
                                                Return ((Local1 | One))
                                            }
                                            ElseIf ((Local0 == 0x02))
                                            {
                                                If ((BTSB == 0x04))
                                                {
                                                    Local1 = One
                                                }
                                                Else
                                                {
                                                    Local1 = Zero
                                                }

                                                Local1 <<= One
                                                Release (LFCM)
                                                Return ((Local1 | One))
                                            }
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (Zero)
                            }

                            Method (BNMC, 1, Serialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        If (((Arg0 & 0x0F) == One))
                                        {
                                            Local1 = Zero
                                            If ((ENCM == One))
                                            {
                                                Local1 = One
                                            }
                                            Else
                                            {
                                                Local1 = Zero
                                            }

                                            Local1 <<= 0x04
                                            Release (LFCM)
                                            Return ((Local1 | 0x03))
                                        }
                                        ElseIf (((Arg0 & 0x0F) == 0x02))
                                        {
                                            Local0 = Arg0
                                            Local2 = Zero
                                            Local0 >>= 0x1F
                                            If ((Local0 == One))
                                            {
                                                ENCM = One
                                                Local2 = One
                                            }
                                            Else
                                            {
                                                ENCM = Zero
                                                Local2 = Zero
                                            }

                                            Local2 <<= 0x04
                                            Release (LFCM)
                                            Return ((Local2 | 0x03))
                                        }
                                        ElseIf (((Arg0 & 0x0F) == 0x03))
                                        {
                                            Local3 = Zero
                                            If ((BSNC == One))
                                            {
                                                Local3 = One
                                            }
                                            Else
                                            {
                                                Local3 = Zero
                                            }

                                            Local3 <<= 0x04
                                            Release (LFCM)
                                            Return ((Local3 | 0x03))
                                        }
                                    }
                                }

                                Return (Zero)
                            }

                            Method (STHT, 1, Serialized)
                            {
                                Return (Zero)
                            }
                        }
                    }

                    Scope (\)
                    {
                        OperationRegion (LFCN, SystemMemory, 0xB2E9F298, 0x02F2)
                        Field (LFCN, AnyAcc, Lock, Preserve)
                        {
                            PS2V,   8, 
                            KBID,   8, 
                            MCSZ,   8, 
                            OKRB,   8, 
                            EDID,   1024, 
                            TPTY,   8, 
                            TPTP,   16, 
                            TPNY,   8, 
                            TPNP,   16, 
                            UMAB,   8, 
                            ENQT,   8, 
                            DYTP,   32, 
                            FCAP,   16, 
                            VSTD,   1, 
                                ,   1, 
                            VFBC,   1, 
                            VMYH,   1, 
                            VSTP,   1, 
                            VAPM,   1, 
                            VAQM,   1, 
                            VIEP,   1, 
                            VIBS,   1, 
                            VCQL,   1, 
                            VAAA,   1, 
                            VMMC,   1, 
                                ,   1, 
                                ,   1, 
                                ,   1, 
                            Offset (0x94), 
                            MYHC,   8, 
                            MMCC,   8, 
                            SMYH,   8, 
                            SMMC,   8, 
                            CICF,   4, 
                            CICM,   4, 
                            MCSK,   8, 
                            CPTY,   8, 
                            GTYP,   8, 
                            PANT,   8, 
                            PMID,   16, 
                            PPID,   16, 
                            CMSP,   16, 
                            DGID,   32, 
                            SGID,   32, 
                            Offset (0xB7), 
                            GNCS,   8, 
                            GYCK,   1664, 
                            BDDN,   2048, 
                            PBID,   8, 
                            CAMS,   8, 
                            RGBD,   8, 
                            GSYN,   8, 
                            RDOC,   8, 
                            DSMF,   8, 
                            CNFG,   8, 
                            YKBT,   8, 
                            DGPT,   296, 
                            SCOC,   8, 
                            COCC,   8, 
                            GOCC,   8, 
                            PBOS,   32, 
                            MCBC,   8, 
                            CBCS,   8, 
                            CCOM,   16, 
                            PRFT,   8, 
                            BDPF,   8, 
                            RSVD,   384
                        }

                        OperationRegion (SMIO, SystemIO, 0xB0, 0x02)
                        Field (SMIO, ByteAcc, NoLock, Preserve)
                        {
                            SMBA,   8, 
                            SMBB,   8
                        }
                    }

                    Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                    {
                        If ((Arg0 == 0x03))
                        {
                            ECAV = Arg1
                        }

                        CTSD = Zero
                        EOST ()
                        If (((Arg0 == 0x03) && (Arg1 == One)))
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                LIDS = LSTE /* \_SB_.PCI0.LPC0.EC0_.LSTE */
                                Release (LFCM)
                            }
                        }

                        FNQT (Zero, Zero)
                        Notify (NPCF, 0xC0) // Hardware-Specific
                    }

                    Method (ECWK, 1, Serialized)
                    {
                        ^^^^ADP0.ACDC = 0xFF
                        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
                        {
                            LIDS = LSTE /* \_SB_.PCI0.LPC0.EC0_.LSTE */
                        }

                        EOST ()
                        If ((Arg0 == 0x04))
                        {
                            FNQT (Zero, Zero)
                        }

                        Notify (NPCF, 0xC0) // Hardware-Specific
                    }

                    Method (CMFC, 0, Serialized)
                    {
                        Return (EDID) /* \EDID */
                    }

                    Method (LFCI, 2, Serialized)
                    {
                        Switch (ToInteger (Arg0))
                        {
                            Case (One)
                            {
                                Return (OKRB) /* \OKRB */
                            }
                            Case (0x02)
                            {
                                Local0 = RECM (0x78)
                                P80B = Local0
                                Return (Local0)
                            }

                        }
                    }

                    Scope (\)
                    {
                        Name (LTGP, Zero)
                        Name (FMOD, Zero)
                        Name (DBFS, Zero)
                        Name (DTGP, Zero)
                        Name (LCK0, Zero)
                        Name (XXDF, Zero)
                        Name (S4FG, Zero)
                        Name (EPSW, One)
                    }

                    Method (SNTM, 0, NotSerialized)
                    {
                        STMM = FromBCD (M034 (0x02))
                        STMH = FromBCD (M034 (0x04))
                    }

                    Method (_Q74, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x74
                        FNQT (Zero, Zero)
                        Notify (NPCF, 0xC0) // Hardware-Specific
                    }

                    Method (_Q77, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        SNTM ()
                    }

                    OperationRegion (R62A, SystemMemory, 0xFEEC262A, One)
                    Field (R62A, ByteAcc, Lock, Preserve)
                    {
                            ,   2, 
                        TDC1,   1, 
                        TDC2,   1, 
                        Offset (0x01)
                    }

                    Method (_Q7A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (((TDC1 == Zero) && (TDC2 == Zero)))
                        {
                            FNQT (Zero, Zero)
                        }

                        CTCL ()
                    }

                    Method (_Q79, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x79
                        CTSD = One
                        Notify (\_TZ.TZ01, 0x80) // Thermal Status Change
                    }

                    Method (_Q11, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (IGDS)
                        {
                            P80H = 0x11
                            Notify (^^^GP17.VGA.LCD, 0x87) // Device-Specific
                        }
                        Else
                        {
                            P80H = 0x11
                            Notify (^^^GPP0.PEGP.EDP0, 0x87) // Device-Specific
                        }

                        Notify (VPC0, 0x80) // Status Change
                    }

                    Method (_Q12, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (IGDS)
                        {
                            P80H = 0x12
                            Notify (^^^GP17.VGA.LCD, 0x86) // Device-Specific
                        }
                        Else
                        {
                            P80H = 0x12
                            Notify (^^^GPP0.PEGP.EDP0, 0x86) // Device-Specific
                        }

                        Notify (VPC0, 0x80) // Status Change
                    }

                    Method (_Q13, 0, Serialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x13
                        EPSW = One
                        If ((Acquire (LFCM, 0xA000) == Zero))
                        {
                            PABD = Zero
                            CAC1 = Zero
                            EMFG = Zero
                            CTE0 = Zero
                            Release (LFCM)
                        }

                        Notify (GZFD, 0xE3) // Hardware-Specific
                        Sleep (0x01F4)
                        If (ECAV)
                        {
                            FNQT (Zero, Zero)
                        }

                        INSM = Zero
                        Notify (GZFD, 0xE7) // Hardware-Specific
                        Sleep (0x05)
                        Notify (NPCF, 0xC0) // Hardware-Specific
                        Notify (^^^GPP0.PEGP, 0xC0) // Hardware-Specific
                    }

                    Method (_Q15, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x15
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                LIDS = LSTE /* \_SB_.PCI0.LPC0.EC0_.LSTE */
                                Release (LFCM)
                            }
                        }

                        Notify (LID0, 0x80) // Status Change
                    }

                    Method (LIDO, 0, NotSerialized)
                    {
                        P80B = 0x15
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                LIDS = LSTE /* \_SB_.PCI0.LPC0.EC0_.LSTE */
                                Release (LFCM)
                            }
                        }

                        Notify (LID0, 0x80) // Status Change
                    }

                    Method (_Q16, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x16
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                LIDS = LSTE /* \_SB_.PCI0.LPC0.EC0_.LSTE */
                                Release (LFCM)
                            }
                        }

                        Notify (LID0, 0x80) // Status Change
                    }

                    Method (LIDC, 0, NotSerialized)
                    {
                        P80B = 0x16
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                LIDS = LSTE /* \_SB_.PCI0.LPC0.EC0_.LSTE */
                                Release (LFCM)
                            }
                        }

                        Notify (LID0, 0x80) // Status Change
                    }

                    Method (_Q17, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        EPSW = Zero
                        FNQT (Zero, Zero)
                        Notify (NPCF, 0xC0) // Hardware-Specific
                    }

                    Method (_Q18, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        EPSW = One
                        FNQT (Zero, Zero)
                        Notify (NPCF, 0xC0) // Hardware-Specific
                    }

                    Scope (\)
                    {
                        Name (GPSF, Zero)
                        Name (DCPS, Zero)
                    }

                    Name (DGST, 0xD1)
                    Method (_Q1E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x1E
                        If (((GATY == 0x02) || (MSMF == One)))
                        {
                            P80H = 0x91
                            If ((DGDF <= 0x04))
                            {
                                P80H = 0x92
                                Local0 = 0xD1
                                Local0 += DGDF /* \_SB_.PCI0.LPC0.EC0_.DGDF */
                                If ((Local0 == 0xD1))
                                {
                                    DCPS = Zero
                                    P80H = 0xD1
                                    If ((DGST != Local0))
                                    {
                                        DGST = Local0
                                        Notify (^^^GPP0.PEGP, Local0)
                                    }

                                    Sleep (0x0A)
                                }
                                Else
                                {
                                    DCPS = One
                                    P80H = 0xD2
                                    If ((DGST != Local0))
                                    {
                                        DGST = Local0
                                        Notify (^^^GPP0.PEGP, Local0)
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }
                    }

                    Method (_Q25, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80B = 0x25
                        Notify (ADP0, 0x80) // Status Change
                        Notify (BAT0, 0x80) // Status Change
                        Notify (BAT0, 0x81) // Information Change
                    }

                    Name (XX13, Buffer (0x07){})
                    CreateWordField (XX13, Zero, SSZ3)
                    CreateByteField (XX13, 0x02, SMN3)
                    CreateDWordField (XX13, 0x03, SMD3)
                    Method (_Q30, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x30
                        Sleep (0x05)
                        DBFS = One
                        If ((CTMD == One))
                        {
                            If ((CTE0 == One))
                            {
                                EMQT ()
                            }
                            Else
                            {
                                Local0 = CPP4 /* \_SB_.PCI0.LPC0.EC0_.CPP4 */
                                Local0 *= 0x03E8
                                FNQT (0x02, Local0)
                            }
                        }
                        Else
                        {
                            FNQT (Zero, Zero)
                        }
                    }

                    Method (_Q31, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x31
                        Sleep (0x05)
                        DBFS = Zero
                        If ((CTMD == One))
                        {
                            If ((CTE0 == One))
                            {
                                EMQT ()
                            }
                            Else
                            {
                                Local0 = CPP2 /* \_SB_.PCI0.LPC0.EC0_.CPP2 */
                                Local0 *= 0x03E8
                                FNQT (0x02, Local0)
                            }
                        }
                        Else
                        {
                            FNQT (Zero, Zero)
                        }
                    }

                    Method (_Q78, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Sleep (0x05)
                        If ((CNFG == One))
                        {
                            Notify (GZFD, 0xE9) // Hardware-Specific
                        }
                    }

                    Method (_Q37, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Sleep (0x012C)
                        P80B = 0x37
                        Notify (GZFD, 0xE5) // Hardware-Specific
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                If ((((SPMO == Zero) && (CAC1 == One)) && (ACTY () == One)))
                                {
                                    SSFM = One
                                    SPMO = One
                                    CTMD = One
                                    If ((CTE0 == One))
                                    {
                                        EMFG = Zero
                                    }

                                    CAC1 = Zero
                                    Sleep (0x05)
                                }

                                If ((((SPMO == 0x02) && (CAC1 == One)) && (ACTY () == One)))
                                {
                                    SSFM = One
                                    SPMO = 0x02
                                    CTMD = One
                                    If ((CTE0 == One))
                                    {
                                        EMFG = Zero
                                    }

                                    CAC1 = Zero
                                    Sleep (0x05)
                                }

                                If ((((SPMO == Zero) && (PABD == One)) && (ACTY () == One)))
                                {
                                    SSFM = One
                                    SPMO = One
                                    PABD = Zero
                                    Sleep (0x05)
                                }

                                Release (LFCM)
                            }

                            FNQT (Zero, Zero)
                        }

                        PWRS = One
                        Notify (ADP0, 0x80) // Status Change
                        Notify (BAT0, 0x80) // Status Change
                        Notify (NPCF, 0xC0) // Hardware-Specific
                        Notify (GZFD, 0xE7) // Hardware-Specific
                        If (((DSMF == 0x03) || (DSMF == 0x04)))
                        {
                            ^^^^GZFD.HTPL ()
                        }
                    }

                    Method (ACIN, 0, NotSerialized)
                    {
                        P80B = 0x37
                        FNQT (Zero, Zero)
                        Notify (NPCF, 0xC0) // Hardware-Specific
                        PWRS = One
                        Notify (ADP0, 0x80) // Status Change
                        Notify (BAT0, 0x80) // Status Change
                    }

                    Method (_Q38, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Sleep (0x012C)
                        EPSW = One
                        Notify (GZFD, 0xE5) // Hardware-Specific
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                If (((CTMD == One) && ((ACTY () == 0x02) || (ACTY () == 0x03))))
                                {
                                    SSFM = One
                                    If ((SPMO == 0x02))
                                    {
                                        SPMO = 0x02
                                    }
                                    Else
                                    {
                                        SPMO = Zero
                                    }

                                    CTMD = Zero
                                    If ((CTE0 == One))
                                    {
                                        EMFG = One
                                    }

                                    CAC1 = One
                                    Sleep (0x05)
                                }

                                If ((SPMO == One))
                                {
                                    SSFM = One
                                    SPMO = Zero
                                    PABD = One
                                    Sleep (0x05)
                                }

                                Release (LFCM)
                            }

                            FNQT (Zero, Zero)
                        }

                        PWRS = Zero
                        Notify (ADP0, 0x80) // Status Change
                        Notify (BAT0, 0x80) // Status Change
                        Notify (NPCF, 0xC0) // Hardware-Specific
                        Notify (GZFD, 0xE7) // Hardware-Specific
                        If (((DSMF == 0x03) || (DSMF == 0x04)))
                        {
                            ^^^^GZFD.HTPL ()
                        }
                    }

                    Method (ACOU, 0, NotSerialized)
                    {
                        P80B = 0x38
                        Sleep (0x012C)
                        FNQT (Zero, Zero)
                        Notify (NPCF, 0xC0) // Hardware-Specific
                        PWRS = Zero
                        Notify (ADP0, 0x80) // Status Change
                        Notify (BAT0, 0x80) // Status Change
                    }

                    Method (_Q32, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x32
                        Notify (PWRB, 0x80) // Status Change
                    }

                    Method (_Q3E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x3E
                    }

                    Method (_Q3F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x3F
                    }

                    Method (_Q44, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x44
                        Notify (VPC0, 0x80) // Status Change
                        WEID = 0xF4
                    }

                    Method (_Q58, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Notify (BAT0, 0x80) // Status Change
                    }

                    Method (_Q70, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x70
                        Sleep (0x05)
                    }

                    Method (_Q86, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x86
                        Sleep (0x05)
                    }

                    Method (_Q87, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x87
                        Sleep (0x05)
                    }

                    Method (_Q62, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x62
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                GUST = 0x03
                                Notify (GZFD, 0xD0) // Hardware-Specific
                                Release (LFCM)
                            }
                        }
                    }

                    Method (_Q63, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x63
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                GUST = One
                                Notify (GZFD, 0xD0) // Hardware-Specific
                                Release (LFCM)
                            }
                        }
                    }

                    Method (_Q66, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x66
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                GUST = 0x02
                                Notify (GZFD, 0xD0) // Hardware-Specific
                                Release (LFCM)
                            }
                        }
                    }

                    Method (_Q67, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x67
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                GUST = Zero
                                Notify (GZFD, 0xD0) // Hardware-Specific
                                Release (LFCM)
                            }
                        }
                    }

                    Method (_Q68, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x68
                        Notify (GZFD, 0xD1) // Hardware-Specific
                    }

                    Method (_Q69, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x69
                        Notify (GZFD, 0xE0) // Hardware-Specific
                    }

                    Method (_Q6A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x6A
                        Notify (GZFD, 0xE1) // Hardware-Specific
                    }

                    Method (_Q6B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x6B
                        Notify (GZFD, 0xE2) // Hardware-Specific
                    }

                    Method (_QAA, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80B = 0xAA
                        Sleep (0x03E8)
                        Notify (PCI0, Zero) // Bus Check
                    }

                    Method (_QD1, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80B = 0xD1
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                GUST = Zero
                                Notify (^^^GPP0.PEGP, 0xD1) // Hardware-Specific
                                Release (LFCM)
                            }
                        }

                        Sleep (0x0A)
                    }

                    Method (_QD2, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80B = 0xD2
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                GUST = Zero
                                Notify (^^^GPP0.PEGP, 0xD2) // Hardware-Specific
                                Release (LFCM)
                            }
                        }

                        Sleep (0x0A)
                    }

                    Method (_QD3, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80B = 0xD3
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                GUST = Zero
                                Notify (^^^GPP0.PEGP, 0xD3) // Hardware-Specific
                                Release (LFCM)
                            }
                        }

                        Sleep (0x0A)
                    }

                    Method (_QD4, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80B = 0xD4
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                GUST = Zero
                                Notify (^^^GPP0.PEGP, 0xD4) // Hardware-Specific
                                Release (LFCM)
                            }
                        }

                        Sleep (0x0A)
                    }

                    Method (_QD5, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80B = 0xD5
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                GUST = Zero
                                Notify (^^^GPP0.PEGP, 0xD5) // Hardware-Specific
                                Release (LFCM)
                            }
                        }

                        Sleep (0x0A)
                    }

                    Method (_Q6C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        SMBA = 0xCE
                    }

                    Scope (\)
                    {
                        Name (LSKD, Zero)
                    }

                    Method (_QDE, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xDE
                        Notify (GZFD, 0xE6) // Hardware-Specific
                        Notify (GZFD, 0xE8) // Hardware-Specific
                    }

                    Method (_QDF, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xDF
                        If ((LSKV != Zero))
                        {
                            If ((LSKV < 0x32))
                            {
                                LSKD = LSKV /* \_SB_.PCI0.LPC0.EC0_.LSKV */
                            }

                            If ((LSKD == 0x04))
                            {
                                If ((HKDB == Zero)){}
                                Else
                                {
                                }
                            }

                            LSKV = Zero
                        }

                        Notify (WMIU, 0xD0) // Hardware-Specific
                        If (((LSKD >= 0x13) && (LSKD <= 0x19)))
                        {
                            Notify (GZFD, 0xE8) // Hardware-Specific
                        }
                        ElseIf ((LSKD == 0x25))
                        {
                            Notify (GZFD, 0xE8) // Hardware-Specific
                        }
                    }
                }

                Scope (\_SB)
                {
                    Device (ADP0)
                    {
                        Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
                        Name (XX00, Buffer (0x03){})
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Name (ACDC, 0xFF)
                        Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
                        {
                            If (^^PCI0.LPC0.EC0.ECAV)
                            {
                                If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                {
                                    Local0 = One
                                    Local0 = ^^PCI0.LPC0.EC0.ADPT /* \_SB_.PCI0.LPC0.EC0_.ADPT */
                                    CreateWordField (XX00, Zero, SSZE)
                                    CreateByteField (XX00, 0x02, ACST)
                                    SSZE = 0x03
                                    If ((Local0 != ACDC))
                                    {
                                        If (Local0)
                                        {
                                            P80B = 0xECAC
                                            AFN4 (One)
                                            ACST = Zero
                                        }
                                        Else
                                        {
                                            P80B = 0xECDC
                                            AFN4 (0x02)
                                            ACST = One
                                        }

                                        ALIB (One, XX00)
                                        ACDC = Local0
                                    }

                                    Release (^^PCI0.LPC0.EC0.LFCM)
                                    Return (Local0)
                                }
                            }
                        }

                        Method (_PCL, 0, NotSerialized)  // _PCL: Power Consumer List
                        {
                            Return (Package (0x01)
                            {
                                _SB
                            })
                        }
                    }

                    Device (LID0)
                    {
                        Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
                        Name (_DEP, Package (0x01)  // _DEP: Dependencies
                        {
                            ^PCI0.LPC0.EC0
                        })
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_LID, 0, NotSerialized)  // _LID: Lid Status
                        {
                            Local0 = Zero
                            If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                            {
                                Local0 = ^^PCI0.LPC0.EC0.LSTE /* \_SB_.PCI0.LPC0.EC0_.LSTE */
                                Release (^^PCI0.LPC0.EC0.LFCM)
                            }

                            Return (Local0)
                        }
                    }

                    Device (PWRB)
                    {
                        Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }
                    }

                    Device (WMI4)
                    {
                        Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
                        Name (_UID, 0x04)  // _UID: Unique ID
                        Mutex (MWMI, 0x00)
                        Name (_WDG, Buffer (0x28)
                        {
                            /* 0000 */  0x76, 0x37, 0xA0, 0xC3, 0xAC, 0x51, 0xAA, 0x49,  // v7...Q.I
                            /* 0008 */  0xAD, 0x0F, 0xF2, 0xF7, 0xD6, 0x2C, 0x3F, 0x3C,  // .....,?<
                            /* 0010 */  0x41, 0x44, 0x03, 0x05, 0x21, 0x12, 0x90, 0x05,  // AD..!...
                            /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                            /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x44, 0x01, 0x00   // ..).BD..
                        })
                        Name (ITEM, Package (0x03)
                        {
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                "BAT0 BatMaker"
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                One, 
                                "BAT0 HwId "
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0x02, 
                                "BAT0 MfgDate "
                            }
                        })
                        Method (WQAD, 1, NotSerialized)
                        {
                            If (^^PCI0.LPC0.EC0.ECAV)
                            {
                                If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                {
                                    Local0 = PSAG (Arg0)
                                    Local1 = DerefOf (ITEM [Local0])
                                    Local2 = DerefOf (Local1 [Zero])
                                    Local3 = DerefOf (Local1 [One])
                                    Local4 = DerefOf (Local1 [0x02])
                                    Local5 = BATD (Local2, Local3)
                                    Concatenate (Local4, ",", Local6)
                                    Concatenate (Local6, Local5, Local7)
                                    Release (^^PCI0.LPC0.EC0.LFCM)
                                }
                            }

                            Return (Local7)
                        }

                        Method (PSAG, 1, NotSerialized)
                        {
                            Return (Arg0)
                        }

                        Method (BATD, 2, NotSerialized)
                        {
                            Name (STRB, Buffer (0x0A)
                            {
                                 0x00                                             // .
                            })
                            Name (BUFR, Buffer (0x08){})
                            BUFR = ^^PCI0.LPC0.EC0.FWBT /* \_SB_.PCI0.LPC0.EC0_.FWBT */
                            CreateWordField (BUFR, Zero, MID0)
                            CreateWordField (BUFR, 0x02, HID0)
                            CreateWordField (BUFR, 0x04, FIR0)
                            CreateWordField (BUFR, 0x06, DAT0)
                            If ((Arg0 == Zero))
                            {
                                If ((Arg1 == Zero))
                                {
                                    STRB = ToHexString (MID0)
                                }

                                If ((Arg1 == One))
                                {
                                    STRB = ToHexString (HID0)
                                }

                                If ((Arg1 == 0x02))
                                {
                                    Local0 = ^^PCI0.LPC0.EC0.B1DA /* \_SB_.PCI0.LPC0.EC0_.B1DA */
                                    Name (DATB, Buffer (0x09)
                                    {
                                        "00000000"
                                    })
                                    Local3 = 0x07
                                    Local1 = (Local0 & 0x1F)
                                    While (Local1)
                                    {
                                        Divide (Local1, 0x0A, Local2, Local1)
                                        DATB [Local3] = (Local2 + 0x30)
                                        Local3--
                                    }

                                    Local3 = 0x05
                                    Local1 = ((Local0 & 0x01E0) >> 0x05)
                                    While (Local1)
                                    {
                                        Divide (Local1, 0x0A, Local2, Local1)
                                        DATB [Local3] = (Local2 + 0x30)
                                        Local3--
                                    }

                                    Local3 = 0x03
                                    Local1 = (((Local0 & 0xFE00) >> 0x09) + 0x07BC)
                                    While (Local1)
                                    {
                                        Divide (Local1, 0x0A, Local2, Local1)
                                        DATB [Local3] = (Local2 + 0x30)
                                        Local3--
                                    }

                                    STRB = DATB /* \_SB_.WMI4.BATD.DATB */
                                }
                            }

                            Return (ToString (STRB, Ones))
                        }

                        Name (WQBD, Buffer (0x0275)
                        {
                            /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                            /* 0008 */  0x65, 0x02, 0x00, 0x00, 0xF8, 0x05, 0x00, 0x00,  // e.......
                            /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                            /* 0018 */  0x18, 0xD1, 0x82, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                            /* 0020 */  0x10, 0x05, 0x10, 0x8A, 0x0D, 0x21, 0x02, 0x0B,  // .....!..
                            /* 0028 */  0x83, 0x50, 0x50, 0x18, 0x14, 0xA0, 0x45, 0x41,  // .PP...EA
                            /* 0030 */  0xC8, 0x05, 0x14, 0x95, 0x02, 0x21, 0xC3, 0x02,  // .....!..
                            /* 0038 */  0x14, 0x0B, 0x70, 0x2E, 0x40, 0xBA, 0x00, 0xE5,  // ..p.@...
                            /* 0040 */  0x28, 0x72, 0x0C, 0x22, 0x02, 0xF7, 0xEF, 0x0F,  // (r."....
                            /* 0048 */  0x31, 0xD0, 0x18, 0xA8, 0x50, 0x08, 0x89, 0x00,  // 1...P...
                            /* 0050 */  0xA6, 0x42, 0xE0, 0x08, 0x41, 0xBF, 0x02, 0x10,  // .B..A...
                            /* 0058 */  0x3A, 0x14, 0x20, 0x53, 0x80, 0x41, 0x01, 0x4E,  // :. S.A.N
                            /* 0060 */  0x11, 0x44, 0x10, 0xA5, 0x65, 0x01, 0xBA, 0x05,  // .D..e...
                            /* 0068 */  0xF8, 0x16, 0xA0, 0x1D, 0x42, 0x68, 0x91, 0x9A,  // ....Bh..
                            /* 0070 */  0x9F, 0x04, 0x81, 0x6A, 0x5B, 0x80, 0x45, 0x01,  // ...j[.E.
                            /* 0078 */  0xB2, 0x41, 0x08, 0xA0, 0xC7, 0xC1, 0x44, 0x0E,  // .A....D.
                            /* 0080 */  0x02, 0x25, 0x66, 0x10, 0x28, 0x9D, 0x73, 0x90,  // .%f.(.s.
                            /* 0088 */  0x4D, 0x60, 0xE1, 0x9F, 0x4C, 0x94, 0xF3, 0x88,  // M`..L...
                            /* 0090 */  0x92, 0xE0, 0xA8, 0x0E, 0x22, 0x42, 0xF0, 0x72,  // ...."B.r
                            /* 0098 */  0x05, 0x48, 0x9E, 0x80, 0x34, 0x4F, 0x4C, 0xD6,  // .H..4OL.
                            /* 00A0 */  0x07, 0xA1, 0x21, 0xB0, 0x11, 0xF0, 0x88, 0x12,  // ..!.....
                            /* 00A8 */  0x40, 0x58, 0xA0, 0x75, 0x2A, 0x14, 0x0C, 0xCA,  // @X.u*...
                            /* 00B0 */  0x03, 0x88, 0xE4, 0x8C, 0x15, 0x05, 0x6C, 0xAF,  // ......l.
                            /* 00B8 */  0x13, 0x91, 0xC9, 0x81, 0x52, 0x49, 0x70, 0xA8,  // ....RIp.
                            /* 00C0 */  0x61, 0x5A, 0xE2, 0xEC, 0x34, 0xB2, 0x13, 0x39,  // aZ..4..9
                            /* 00C8 */  0xB6, 0xA6, 0x87, 0x2C, 0x48, 0x26, 0x6D, 0x28,  // ...,H&m(
                            /* 00D0 */  0xA8, 0xB1, 0x7B, 0x5A, 0x27, 0xE5, 0x99, 0x46,  // ..{Z'..F
                            /* 00D8 */  0x3C, 0x28, 0xC3, 0x24, 0xF0, 0x28, 0x18, 0x1A,  // <(.$.(..
                            /* 00E0 */  0x27, 0x28, 0x0B, 0x42, 0x0E, 0x06, 0x8A, 0x02,  // '(.B....
                            /* 00E8 */  0x3C, 0x09, 0xCF, 0xB1, 0x78, 0x01, 0xC2, 0x67,  // <...x..g
                            /* 00F0 */  0x4C, 0xA6, 0x1D, 0x23, 0x81, 0xCF, 0x04, 0x1E,  // L..#....
                            /* 00F8 */  0xE6, 0x31, 0x63, 0x47, 0x14, 0x2E, 0xE0, 0xF9,  // .1cG....
                            /* 0100 */  0x1C, 0x43, 0xE4, 0xB8, 0x87, 0x1A, 0xE3, 0x28,  // .C.....(
                            /* 0108 */  0x22, 0x3F, 0x08, 0x60, 0x05, 0x1D, 0x04, 0x90,  // "?.`....
                            /* 0110 */  0x38, 0xFF, 0xFF, 0xE3, 0x89, 0x76, 0xDA, 0xC1,  // 8....v..
                            /* 0118 */  0x42, 0xC7, 0x39, 0xBF, 0xD0, 0x18, 0xD1, 0xE3,  // B.9.....
                            /* 0120 */  0x40, 0xC9, 0x80, 0x90, 0x47, 0x01, 0x56, 0x61,  // @...G.Va
                            /* 0128 */  0x35, 0x91, 0x04, 0xBE, 0x07, 0x74, 0x76, 0x12,  // 5....tv.
                            /* 0130 */  0xD0, 0xA5, 0x21, 0x46, 0x6F, 0x08, 0xD2, 0x26,  // ..!Fo..&
                            /* 0138 */  0xC0, 0x96, 0x00, 0x6B, 0x02, 0x8C, 0xDD, 0x06,  // ...k....
                            /* 0140 */  0x08, 0xCA, 0xD1, 0x36, 0x87, 0x22, 0x84, 0x28,  // ...6.".(
                            /* 0148 */  0x21, 0xE2, 0x86, 0xAC, 0x11, 0x45, 0x10, 0x95,  // !....E..
                            /* 0150 */  0x41, 0x08, 0x35, 0x50, 0xD8, 0x28, 0xF1, 0x8D,  // A.5P.(..
                            /* 0158 */  0x13, 0x22, 0x48, 0x02, 0x8F, 0x1C, 0x77, 0x04,  // ."H...w.
                            /* 0160 */  0xF0, 0xD8, 0x0E, 0xE8, 0x04, 0x4F, 0xE9, 0x71,  // .....O.q
                            /* 0168 */  0xC1, 0x04, 0x9E, 0xF7, 0xC1, 0x1D, 0xEA, 0x21,  // .......!
                            /* 0170 */  0x1C, 0x70, 0xD4, 0x18, 0xC7, 0xF1, 0x4C, 0x40,  // .p....L@
                            /* 0178 */  0x16, 0x2E, 0x0D, 0x20, 0x8A, 0x04, 0x8F, 0x3A,  // ... ...:
                            /* 0180 */  0x32, 0xF8, 0x70, 0xE0, 0x41, 0x7A, 0x9E, 0x9E,  // 2.p.Az..
                            /* 0188 */  0x40, 0x90, 0x43, 0x38, 0x82, 0xC7, 0x86, 0xA7,  // @.C8....
                            /* 0190 */  0x02, 0x8F, 0x81, 0x5D, 0x17, 0x7C, 0x0E, 0xF0,  // ...].|..
                            /* 0198 */  0x31, 0x01, 0xEF, 0x1A, 0x50, 0xA3, 0x7E, 0x3A,  // 1...P.~:
                            /* 01A0 */  0x60, 0x93, 0x0E, 0x87, 0x19, 0xAE, 0x87, 0x1D,  // `.......
                            /* 01A8 */  0xEE, 0x04, 0x1E, 0x0E, 0x1E, 0x33, 0xF8, 0x91,  // .....3..
                            /* 01B0 */  0xC3, 0x83, 0xC3, 0xCD, 0xF0, 0x64, 0x8E, 0xAC,  // .....d..
                            /* 01B8 */  0x54, 0x01, 0x66, 0x4F, 0x08, 0x3A, 0x4D, 0xF8,  // T.fO.:M.
                            /* 01C0 */  0xCC, 0xC1, 0x6E, 0x00, 0xE7, 0xD3, 0x33, 0x24,  // ..n...3$
                            /* 01C8 */  0x91, 0x3F, 0x08, 0xD4, 0xC8, 0x0C, 0xED, 0x69,  // .?.....i
                            /* 01D0 */  0xBF, 0x7A, 0x18, 0xF2, 0xA1, 0xE0, 0xB0, 0x98,  // .z......
                            /* 01D8 */  0xD8, 0xB3, 0x07, 0x1D, 0x0F, 0xF8, 0xAF, 0x24,  // .......$
                            /* 01E0 */  0x0F, 0x1B, 0x9E, 0xBE, 0xE7, 0x6B, 0x82, 0x91,  // .....k..
                            /* 01E8 */  0x07, 0x8E, 0x1E, 0x88, 0xA1, 0x9F, 0x38, 0x0E,  // ......8.
                            /* 01F0 */  0xE3, 0x34, 0x7C, 0x09, 0xF1, 0x39, 0xE0, 0xFF,  // .4|..9..
                            /* 01F8 */  0x1F, 0x24, 0xC6, 0x31, 0x79, 0x70, 0x3C, 0xD8,  // .$.1yp<.
                            /* 0200 */  0xC8, 0xE9, 0x51, 0xC5, 0x47, 0x0A, 0x7E, 0xBE,  // ..Q.G.~.
                            /* 0208 */  0xF0, 0x91, 0x82, 0x5D, 0x10, 0x9E, 0x1C, 0x0C,  // ...]....
                            /* 0210 */  0x71, 0x38, 0x67, 0xE5, 0x13, 0x85, 0x0F, 0x2A,  // q8g....*
                            /* 0218 */  0xB8, 0x13, 0x05, 0x5C, 0x85, 0xE8, 0xE4, 0x36,  // ...\...6
                            /* 0220 */  0x61, 0xB4, 0x67, 0x81, 0xC7, 0x09, 0x98, 0x07,  // a.g.....
                            /* 0228 */  0x01, 0xF0, 0x8D, 0xDF, 0x07, 0x19, 0xB0, 0x4D,  // .......M
                            /* 0230 */  0x09, 0x3B, 0x24, 0x78, 0x47, 0x19, 0xE0, 0x71,  // .;$xG..q
                            /* 0238 */  0x32, 0xC1, 0x1D, 0x27, 0x3C, 0x04, 0x3E, 0x80,  // 2..'<.>.
                            /* 0240 */  0x87, 0x90, 0x93, 0xB4, 0xD2, 0xA9, 0x21, 0xCF,  // ......!.
                            /* 0248 */  0x3C, 0x60, 0x1B, 0x06, 0x57, 0x68, 0xD3, 0xA7,  // <`..Wh..
                            /* 0250 */  0x46, 0xA3, 0x56, 0x0D, 0xCA, 0xD4, 0x28, 0xD3,  // F.V...(.
                            /* 0258 */  0xA0, 0x56, 0x9F, 0x4A, 0x8D, 0x19, 0xFB, 0xE1,  // .V.J....
                            /* 0260 */  0x58, 0xDC, 0xBB, 0x40, 0x07, 0x03, 0x0B, 0x7B,  // X..@...{
                            /* 0268 */  0x21, 0xE8, 0x88, 0xE0, 0x58, 0x20, 0x34, 0x08,  // !...X 4.
                            /* 0270 */  0x9D, 0x40, 0xFC, 0xFF, 0x07                     // .@...
                        })
                    }

                    Name (IGPM, Zero)
                    Name (DGDO, One)
                    Scope (\)
                    {
                        Name (INSM, Zero)
                        Name (BCTP, Zero)
                        Name (GGTC, 0x57)
                        Name (DWMD, Zero)
                        Name (QGPS, Zero)
                        Name (BGPS, 0x11)
                        Name (PGPS, 0x11)
                        Name (MGPS, 0x12)
                        Name (GGP1, 0x0168)
                    }

                    Scope (\_SB)
                    {
                        Device (GZFD)
                        {
                            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
                            Name (_UID, "GMZN")  // _UID: Unique ID
                            Name (_WDG, Buffer (0x0280)
                            {
                                /* 0000 */  0xE3, 0x54, 0x7B, 0x88, 0xDC, 0xDD, 0x2C, 0x4B,  // .T{...,K
                                /* 0008 */  0x8B, 0x88, 0x68, 0xA2, 0x6A, 0x88, 0x35, 0xD0,  // ..h.j.5.
                                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x49, 0x95, 0x54, 0x92,  // AA..I.T.
                                /* 0018 */  0xDE, 0x4B, 0x06, 0x4F, 0xAC, 0x04, 0xCE, 0x8B,  // .K.O....
                                /* 0020 */  0xF8, 0x98, 0xDB, 0xAA, 0x42, 0x32, 0x01, 0x02,  // ....B2..
                                /* 0028 */  0x77, 0xD7, 0xAF, 0x14, 0x6F, 0x10, 0x9B, 0x4C,  // w...o..L
                                /* 0030 */  0xB3, 0x34, 0xD3, 0x88, 0xDC, 0x78, 0x09, 0xBE,  // .4...x..
                                /* 0038 */  0x42, 0x33, 0x01, 0x02, 0xF1, 0x47, 0x75, 0xDA,  // B3...Gu.
                                /* 0040 */  0x4D, 0x82, 0x5F, 0x40, 0xBE, 0x79, 0xD9, 0x90,  // M._@.y..
                                /* 0048 */  0x3E, 0x29, 0xCE, 0xD7, 0x42, 0x34, 0x01, 0x02,  // >)..B4..
                                /* 0050 */  0x05, 0x88, 0x2A, 0xDC, 0x8C, 0x3A, 0xBA, 0x41,  // ..*..:.A
                                /* 0058 */  0xA6, 0xF7, 0x09, 0x2E, 0x00, 0x89, 0xCD, 0x3B,  // .......;
                                /* 0060 */  0x42, 0x35, 0x01, 0x02, 0x27, 0x91, 0x5B, 0x8C,  // B5..'.[.
                                /* 0068 */  0xD4, 0xEC, 0x57, 0x46, 0x98, 0x0F, 0x85, 0x10,  // ..WF....
                                /* 0070 */  0x19, 0xF9, 0x9C, 0xA5, 0x42, 0x41, 0x01, 0x02,  // ....BA..
                                /* 0078 */  0x0A, 0xCA, 0xF3, 0xB7, 0xDC, 0xAC, 0xD2, 0x42,  // .......B
                                /* 0080 */  0x92, 0x17, 0x77, 0xC6, 0xC6, 0x28, 0xFB, 0xD2,  // ..w..(..
                                /* 0088 */  0x41, 0x30, 0x01, 0x01, 0xE2, 0x54, 0x7B, 0x88,  // A0...T{.
                                /* 0090 */  0xDC, 0xDD, 0x2C, 0x4B, 0x8B, 0x88, 0x68, 0xA2,  // ..,K..h.
                                /* 0098 */  0x6A, 0x88, 0x35, 0xD0, 0x41, 0x31, 0x02, 0x01,  // j.5.A1..
                                /* 00A0 */  0xD3, 0x7C, 0xA5, 0x93, 0xC6, 0xBB, 0xAB, 0x46,  // .|.....F
                                /* 00A8 */  0x95, 0x1D, 0x31, 0xF1, 0x7C, 0xC9, 0x68, 0xA0,  // ..1.|.h.
                                /* 00B0 */  0x41, 0x32, 0x12, 0x01, 0x6D, 0x2A, 0xFB, 0x87,  // A2..m*..
                                /* 00B8 */  0x02, 0xD8, 0xE7, 0x48, 0x92, 0x08, 0x45, 0x76,  // ...H..Ev
                                /* 00C0 */  0xC5, 0xF5, 0xC8, 0xD8, 0x41, 0x33, 0x0F, 0x01,  // ....A3..
                                /* 00C8 */  0x84, 0xBD, 0xD5, 0x4D, 0xA9, 0x15, 0xE2, 0x47,  // ...M...G
                                /* 00D0 */  0xAD, 0x65, 0xCC, 0x61, 0xA5, 0xC6, 0x2F, 0xD0,  // .e.a../.
                                /* 00D8 */  0x41, 0x34, 0x06, 0x01, 0xE6, 0x3C, 0xAF, 0xEC,  // A4...<..
                                /* 00E0 */  0xB2, 0xDC, 0x3D, 0x47, 0x94, 0xC3, 0x7B, 0xF4,  // ..=G..{.
                                /* 00E8 */  0xD9, 0x6E, 0x0D, 0x9A, 0x41, 0x35, 0x09, 0x01,  // .n..A5..
                                /* 00F0 */  0x6D, 0x25, 0x90, 0x4C, 0xEA, 0x44, 0xA8, 0xD6,  // m%.L.D..
                                /* 00F8 */  0x76, 0x50, 0x63, 0xDF, 0x4F, 0xEB, 0x2C, 0xFF,  // vPc.O.,.
                                /* 0100 */  0x41, 0x36, 0x03, 0x01, 0xFE, 0x3A, 0x2A, 0x36,  // A6...:*6
                                /* 0108 */  0x96, 0x3D, 0x65, 0x46, 0x85, 0x30, 0x96, 0xDA,  // .=eF.0..
                                /* 0110 */  0xD5, 0xBB, 0x30, 0x0E, 0x41, 0x37, 0x17, 0x01,  // ..0.A7..
                                /* 0118 */  0x07, 0x54, 0x8F, 0x7A, 0x67, 0xCB, 0x6E, 0x4D,  // .T.zg.nM
                                /* 0120 */  0xB5, 0x47, 0x39, 0xB3, 0xBE, 0x01, 0x81, 0x54,  // .G9....T
                                /* 0128 */  0x41, 0x38, 0x46, 0x01, 0xAD, 0xEC, 0x60, 0x62,  // A8F...`b
                                /* 0130 */  0x7D, 0x0D, 0x01, 0x42, 0xA8, 0xBD, 0x25, 0x52,  // }..B..%R
                                /* 0138 */  0xE8, 0x12, 0x50, 0x1F, 0x41, 0x39, 0x01, 0x01,  // ..P.A9..
                                /* 0140 */  0x17, 0x3B, 0x43, 0x91, 0xB7, 0xB7, 0x40, 0x46,  // .;C...@F
                                /* 0148 */  0xBB, 0x40, 0x34, 0xC6, 0x73, 0x49, 0xFB, 0xEC,  // .@4.sI..
                                /* 0150 */  0x41, 0x41, 0x14, 0x01, 0x81, 0x24, 0xD4, 0xBF,  // AA...$..
                                /* 0158 */  0xE3, 0xAE, 0x01, 0x45, 0xA1, 0x07, 0xAF, 0xB6,  // ...E....
                                /* 0160 */  0x84, 0x25, 0xC5, 0xF8, 0xD0, 0x00, 0x01, 0x08,  // .%......
                                /* 0168 */  0x81, 0x24, 0xD4, 0xBF, 0xE3, 0xAE, 0x02, 0x45,  // .$.....E
                                /* 0170 */  0xA1, 0x07, 0xAF, 0xB6, 0x84, 0x25, 0xC5, 0xF8,  // .....%..
                                /* 0178 */  0xE0, 0x00, 0x01, 0x08, 0x6B, 0x90, 0x62, 0xD0,  // ....k.b.
                                /* 0180 */  0xD4, 0x12, 0x10, 0x45, 0x99, 0x9D, 0x48, 0x31,  // ...E..H1
                                /* 0188 */  0xEE, 0x80, 0xE9, 0x85, 0xD1, 0x00, 0x01, 0x08,  // ........
                                /* 0190 */  0x35, 0xA4, 0x72, 0xBC, 0xC1, 0xE8, 0x75, 0x42,  // 5.r...uB
                                /* 0198 */  0xB3, 0xE2, 0xD8, 0xB8, 0x07, 0x4A, 0xBA, 0x59,  // .....J.Y
                                /* 01A0 */  0xE1, 0x00, 0x01, 0x08, 0xD9, 0xC6, 0xAF, 0x10,  // ........
                                /* 01A8 */  0x8B, 0xEA, 0x90, 0x45, 0xA2, 0xE7, 0x1C, 0xD3,  // ...E....
                                /* 01B0 */  0xC8, 0x4B, 0xB4, 0xB1, 0xE2, 0x00, 0x01, 0x08,  // .K......
                                /* 01B8 */  0x9E, 0x28, 0x20, 0xD3, 0xEA, 0x8F, 0xE0, 0x41,  // .( ....A
                                /* 01C0 */  0x86, 0xF9, 0x61, 0x1D, 0x83, 0x15, 0x1B, 0x5F,  // ..a...._
                                /* 01C8 */  0xE3, 0x00, 0x01, 0x08, 0x9E, 0x28, 0x20, 0xD3,  // .....( .
                                /* 01D0 */  0xEA, 0x8F, 0xE1, 0x41, 0x86, 0xF9, 0x61, 0x1D,  // ...A..a.
                                /* 01D8 */  0x83, 0x15, 0x1B, 0x5F, 0xE4, 0x00, 0x01, 0x08,  // ..._....
                                /* 01E0 */  0x9E, 0x28, 0x20, 0xD3, 0xEA, 0x8F, 0xE0, 0x41,  // .( ....A
                                /* 01E8 */  0x86, 0xF9, 0x71, 0x1D, 0x83, 0x15, 0x1B, 0x5F,  // ..q...._
                                /* 01F0 */  0xE5, 0x00, 0x01, 0x08, 0x9E, 0x28, 0x20, 0xD3,  // .....( .
                                /* 01F8 */  0xEA, 0x8F, 0xE0, 0x41, 0x86, 0xF9, 0x81, 0x1D,  // ...A....
                                /* 0200 */  0x83, 0x15, 0x1B, 0x5F, 0xE6, 0x00, 0x01, 0x08,  // ..._....
                                /* 0208 */  0x9E, 0x28, 0x20, 0xD3, 0xEA, 0x8F, 0xE0, 0x41,  // .( ....A
                                /* 0210 */  0x86, 0xF9, 0x91, 0x1D, 0x83, 0x15, 0x1B, 0x5F,  // ......._
                                /* 0218 */  0xE7, 0x00, 0x01, 0x08, 0xA1, 0x91, 0x33, 0x1E,  // ......3.
                                /* 0220 */  0x89, 0x2C, 0x4D, 0x46, 0x95, 0xD9, 0x30, 0x28,  // .,MF..0(
                                /* 0228 */  0xB7, 0x2E, 0x7A, 0x33, 0xE8, 0x00, 0x01, 0x08,  // ..z3....
                                /* 0230 */  0xE5, 0x46, 0x13, 0xBE, 0x32, 0x3A, 0x31, 0x4A,  // .F..2:1J
                                /* 0238 */  0xB8, 0xB0, 0x2C, 0xD1, 0x95, 0xE1, 0xF5, 0x72,  // ..,....r
                                /* 0240 */  0xE9, 0x00, 0x01, 0x08, 0xCC, 0xC6, 0xA6, 0x67,  // .......g
                                /* 0248 */  0x0A, 0x38, 0x25, 0x4D, 0xAA, 0x35, 0xA1, 0x39,  // .8%M.5.9
                                /* 0250 */  0x7D, 0x1F, 0xBD, 0xFB, 0xEA, 0x00, 0x01, 0x08,  // }.......
                                /* 0258 */  0xEC, 0x30, 0x7B, 0x0F, 0x90, 0xAC, 0x34, 0x4B,  // .0{...4K
                                /* 0260 */  0xB6, 0x2F, 0x87, 0xF8, 0x51, 0x15, 0x50, 0x5D,  // ./..Q.P]
                                /* 0268 */  0xEB, 0x00, 0x01, 0x08, 0x21, 0x12, 0x90, 0x05,  // ....!...
                                /* 0270 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                                /* 0278 */  0xC9, 0x06, 0x29, 0x10, 0x44, 0x44, 0x01, 0x00   // ..).DD..
                            })
                            OperationRegion (ECMS, SystemIO, 0x72, 0x02)
                            Field (ECMS, ByteAcc, Lock, Preserve)
                            {
                                INDX,   8, 
                                DATA,   8
                            }

                            Method (RECM, 1, Serialized)
                            {
                                INDX = Arg0
                                Return (DATA) /* \_SB_.GZFD.DATA */
                            }

                            Method (WECM, 2, Serialized)
                            {
                                INDX = Arg0
                                DATA = Arg1
                            }

                            Method (HTPE, 0, NotSerialized)
                            {
                                If (((DSMF != 0x03) && (DSMF != 0x04)))
                                {
                                    Return (Zero)
                                }

                                ^^PCI0.LPC0.EC0.WEJF (0x03, Zero)
                                Local0 = Zero
                                While ((Local0 < 0x06))
                                {
                                    Notify (^^PCI0.GPP0.PEGP, Zero) // Bus Check
                                    Sleep (0x01F4)
                                    If ((^^PCI0.GPP0.GSTA () == One))
                                    {
                                        Break
                                    }
                                    Else
                                    {
                                        ^^PCI0.GPP0.PG00._ON ()
                                        Sleep (0x01F4)
                                    }

                                    Local0++
                                }
                            }

                            Method (HTPL, 0, NotSerialized)
                            {
                                If (((DSMF != 0x03) && (DSMF != 0x04)))
                                {
                                    Return (Zero)
                                }

                                IGPM = ^^PCI0.LPC0.EC0.REJF (One)
                                If ((DGDO == One))
                                {
                                    If (((IGPM == One) && (^^PCI0.GPP0.GSTA () == Zero)))
                                    {
                                        ^^PCI0.LPC0.EC0.WEJF (0x03, Zero)
                                        Notify (^^PCI0.GPP0.PEGP, 0x03) // Eject Request
                                        Return (One)
                                    }
                                    ElseIf ((((IGPM == 0x02) && (^^PCI0.GPP0.GSTA () == Zero)) && ((
                                        (^^PCI0.LPC0.EC0.ADNS == One) || (^^PCI0.LPC0.EC0.ACTY () == 0x02)) || (^^PCI0.LPC0.EC0.ADPT == Zero))))
                                    {
                                        ^^PCI0.LPC0.EC0.WEJF (0x03, Zero)
                                        Notify (^^PCI0.GPP0.PEGP, 0x03) // Eject Request
                                        Return (One)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                                ElseIf ((DGDO == Zero))
                                {
                                    If (((IGPM == Zero) && (^^PCI0.GPP0.GSTA () == Zero)))
                                    {
                                        ^^PCI0.LPC0.EC0.WEJF (0x03, Zero)
                                        Local0 = Zero
                                        While ((Local0 < 0x06))
                                        {
                                            Notify (^^PCI0.GPP0.PEGP, Zero) // Bus Check
                                            Sleep (0x01F4)
                                            If ((^^PCI0.GPP0.GSTA () == One))
                                            {
                                                Break
                                            }
                                            Else
                                            {
                                                ^^PCI0.GPP0.PG00._ON ()
                                                Sleep (0x01F4)
                                            }
                                        }

                                        Return (One)
                                    }

                                    If ((((IGPM == 0x02) && (^^PCI0.GPP0.GSTA () == Zero)) && ((^^PCI0.LPC0.EC0.ADSS == 
                                        One) || (^^PCI0.LPC0.EC0.ADSL == One))))
                                    {
                                        ^^PCI0.LPC0.EC0.WEJF (0x03, Zero)
                                        Local0 = Zero
                                        While ((Local0 < 0x06))
                                        {
                                            Notify (^^PCI0.GPP0.PEGP, Zero) // Bus Check
                                            Sleep (0x01F4)
                                            If ((^^PCI0.GPP0.GSTA () == One))
                                            {
                                                Break
                                            }
                                            Else
                                            {
                                                ^^PCI0.GPP0.PG00._ON ()
                                                Sleep (0x01F4)
                                            }
                                        }

                                        Return (One)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Name (XX11, Buffer (0x07){})
                            CreateWordField (XX11, Zero, SSZE)
                            CreateByteField (XX11, 0x02, SMUF)
                            CreateDWordField (XX11, 0x03, SMUD)
                            Method (WSMI, 1, NotSerialized)
                            {
                                SMBB = Arg0
                                SMBA = 0xCB
                            }

                            Method (FTOI, 2, NotSerialized)
                            {
                                Name (OCVI, Zero)
                                Name (NORP, Zero)
                                Name (REMA, Zero)
                                Name (MANT, Zero)
                                Name (INDE, Zero)
                                Name (SHFT, Zero)
                                Name (RESU, Zero)
                                OCVI = Arg0
                                NORP = Arg1
                                Divide (OCVI, 0x02, REMA, OCVI) /* \_SB_.GZFD.FTOI.OCVI */
                                While ((OCVI != Zero))
                                {
                                    REMA <<= INDE /* \_SB_.GZFD.FTOI.INDE */
                                    MANT += REMA /* \_SB_.GZFD.FTOI.REMA */
                                    INDE += One
                                    Divide (OCVI, 0x02, REMA, OCVI) /* \_SB_.GZFD.FTOI.OCVI */
                                }

                                SHFT = (0x17 - INDE) /* \_SB_.GZFD.FTOI.INDE */
                                MANT <<= SHFT /* \_SB_.GZFD.FTOI.SHFT */
                                RESU |= MANT /* \_SB_.GZFD.FTOI.MANT */
                                INDE += 0x7F
                                INDE <<= 0x17
                                RESU |= INDE /* \_SB_.GZFD.FTOI.INDE */
                                If ((NORP == One))
                                {
                                    RESU |= 0x80000000
                                }

                                Return (RESU) /* \_SB_.GZFD.FTOI.RESU */
                            }

                            Method (IOT2, 1, NotSerialized)
                            {
                                Name (NOR2, Zero)
                                If ((Arg0 == Zero))
                                {
                                    Return (Zero)
                                }

                                NOR2 = (Arg0 & 0x80000000)
                                If ((NOR2 != Zero))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Method (IOTF, 1, NotSerialized)
                            {
                                Name (RES2, Zero)
                                If ((Arg0 == Zero))
                                {
                                    Return (Zero)
                                }
                                Else
                                {
                                    RES2 = (Arg0 & 0x7FFFFFFF)
                                    Return (RES2) /* \_SB_.GZFD.IOTF.RES2 */
                                }
                            }

                            Name (GOC0, Buffer (0x2C)
                            {
                                 0x00                                             // .
                            })
                            CreateDWordField (GOC0, Zero, GPST)
                            CreateDWordField (GOC0, 0x04, GOCI)
                            CreateDWordField (GOC0, 0x08, GDEV)
                            CreateDWordField (GOC0, 0x0C, GOCV)
                            CreateDWordField (GOC0, 0x10, GMIN)
                            CreateDWordField (GOC0, 0x14, GMAX)
                            CreateDWordField (GOC0, 0x18, GSCV)
                            CreateDWordField (GOC0, 0x1C, GOCO)
                            CreateDWordField (GOC0, 0x20, GNOC)
                            CreateDWordField (GOC0, 0x24, GDET)
                            CreateDWordField (GOC0, 0x28, GCAP)
                            Name (GOC1, Buffer (0x2C)
                            {
                                 0x00                                             // .
                            })
                            CreateDWordField (GOC1, Zero, MPST)
                            CreateDWordField (GOC1, 0x04, MOCI)
                            CreateDWordField (GOC1, 0x08, MDEV)
                            CreateDWordField (GOC1, 0x0C, MOCV)
                            CreateDWordField (GOC1, 0x10, MMIN)
                            CreateDWordField (GOC1, 0x14, MMAX)
                            CreateDWordField (GOC1, 0x18, MSCV)
                            CreateDWordField (GOC1, 0x1C, MOCO)
                            CreateDWordField (GOC1, 0x20, MNOC)
                            CreateDWordField (GOC1, 0x24, MDET)
                            CreateDWordField (GOC1, 0x28, MCAP)
                            Method (WQA1, 1, NotSerialized)
                            {
                                If ((Arg0 == Zero))
                                {
                                    GPST = Zero
                                    GOCI = Zero
                                    GDEV = Zero
                                    GOCV = 0x96
                                    GMIN = Zero
                                    GMAX = 0xC8
                                    GSCV = One
                                    GOCO = Zero
                                    GNOC = Zero
                                    GDET = Zero
                                    GCAP = Zero
                                    Return (GOC0) /* \_SB_.GZFD.GOC0 */
                                }

                                If ((Arg0 == One))
                                {
                                    MPST = Zero
                                    MOCI = One
                                    MDEV = Zero
                                    MOCV = 0xC8
                                    MMIN = Zero
                                    MMAX = 0x0190
                                    MSCV = One
                                    MOCO = Zero
                                    MNOC = Zero
                                    MDET = Zero
                                    MCAP = Zero
                                    Return (GOC1) /* \_SB_.GZFD.GOC1 */
                                }
                            }

                            Name (WTL1, Package (0x12)
                            {
                                Package (0x02)
                                {
                                    "dota2.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "csgo.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "TslGame.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "RainbowSix.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "SOTTR.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "RDR2.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "Cyberpunk2077.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "GTA5.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "ACValhalla.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "Warhammer3.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "F1_22.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "r5apex.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "NarakaBladepoint.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "bfv.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "VALORANT-Win64-Shipping.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "cod.exe", 
                                    "1"
                                }, 

                                Package (0x02)
                                {
                                    "LOSTARK.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "FortniteClient-Win64-Shipping.exe", 
                                    "3"
                                }
                            })
                            Name (WTL2, Package (0x12)
                            {
                                Package (0x02)
                                {
                                    "dota2.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "csgo.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "TslGame.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "RainbowSix.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "SOTTR.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "RDR2.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "Cyberpunk2077.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "GTA5.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "ACValhalla.exe", 
                                    "1"
                                }, 

                                Package (0x02)
                                {
                                    "Warhammer3.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "F1_22.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "r5apex.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "NarakaBladepoint.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "bfv.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "VALORANT-Win64-Shipping.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "cod.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "LOSTARK.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "FortniteClient-Win64-Shipping.exe", 
                                    "4"
                                }
                            })
                            Name (WTL3, Package (0x12)
                            {
                                Package (0x02)
                                {
                                    "dota2.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "csgo.exe", 
                                    "1"
                                }, 

                                Package (0x02)
                                {
                                    "TslGame.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "RainbowSix.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "SOTTR.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "RDR2.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "Cyberpunk2077.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "GTA5.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "ACValhalla.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "Warhammer3.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "F1_22.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "r5apex.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "NarakaBladepoint.exe", 
                                    "1"
                                }, 

                                Package (0x02)
                                {
                                    "bfv.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "VALORANT-Win64-Shipping.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "cod.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "LOSTARK.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "FortniteClient-Win64-Shipping.exe", 
                                    "1"
                                }
                            })
                            Name (WTL4, Package (0x12)
                            {
                                Package (0x02)
                                {
                                    "dota2.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "csgo.exe", 
                                    "1"
                                }, 

                                Package (0x02)
                                {
                                    "TslGame.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "RainbowSix.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "SOTTR.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "RDR2.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "Cyberpunk2077.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "GTA5.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "ACValhalla.exe", 
                                    "1"
                                }, 

                                Package (0x02)
                                {
                                    "Warhammer3.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "F1_22.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "r5apex.exe", 
                                    "1"
                                }, 

                                Package (0x02)
                                {
                                    "NarakaBladepoint.exe", 
                                    "1"
                                }, 

                                Package (0x02)
                                {
                                    "bfv.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "VALORANT-Win64-Shipping.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "cod.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "LOSTARK.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "FortniteClient-Win64-Shipping.exe", 
                                    "5"
                                }
                            })
                            Method (WQA2, 1, NotSerialized)
                            {
                                If ((GTYP == One))
                                {
                                    Local0 = Zero
                                    While ((Local0 < 0x12))
                                    {
                                        If ((Arg0 == Local0))
                                        {
                                            Return (DerefOf (WTL3 [Local0]))
                                        }

                                        Local0++
                                    }
                                }
                                ElseIf ((GTYP == 0x02))
                                {
                                    Local0 = Zero
                                    While ((Local0 < 0x12))
                                    {
                                        If ((Arg0 == Local0))
                                        {
                                            Return (DerefOf (WTL1 [Local0]))
                                        }

                                        Local0++
                                    }
                                }
                                ElseIf ((GTYP == 0x03))
                                {
                                    Local0 = Zero
                                    While ((Local0 < 0x12))
                                    {
                                        If ((Arg0 == Local0))
                                        {
                                            Return (DerefOf (WTL2 [Local0]))
                                        }

                                        Local0++
                                    }
                                }
                                Else
                                {
                                    Local0 = Zero
                                    While ((Local0 < 0x12))
                                    {
                                        If ((Arg0 == Local0))
                                        {
                                            Return (DerefOf (WTL4 [Local0]))
                                        }

                                        Local0++
                                    }
                                }
                            }

                            Name (LFT0, Package (0x0F)
                            {
                                Package (0x14)
                                {
                                    0x0834, 
                                    0x0960, 
                                    0x09C4, 
                                    0x0B54, 
                                    0x0CE4, 
                                    0x0DAC, 
                                    0x1068, 
                                    0x11F8, 
                                    0x16A8, 
                                    0x1900, 
                                    0x43, 
                                    0x43, 
                                    0x43, 
                                    0x43, 
                                    0x48, 
                                    0x4C, 
                                    0x50, 
                                    0x53, 
                                    0x58, 
                                    0x5C
                                }, 

                                Package (0x14)
                                {
                                    0x0834, 
                                    0x0960, 
                                    0x09C4, 
                                    0x0B54, 
                                    0x0CE4, 
                                    0x0DAC, 
                                    0x1068, 
                                    0x11F8, 
                                    0x16A8, 
                                    0x1900, 
                                    0x28, 
                                    0x2D, 
                                    0x32, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F
                                }, 

                                Package (0x14)
                                {
                                    0x0898, 
                                    0x09C4, 
                                    0x0A8C, 
                                    0x0BB8, 
                                    0x0CE4, 
                                    0x0E74, 
                                    0x1194, 
                                    0x12C0, 
                                    0x1770, 
                                    0x1900, 
                                    0x35, 
                                    0x35, 
                                    0x35, 
                                    0x35, 
                                    0x38, 
                                    0x3B, 
                                    0x3F, 
                                    0x44, 
                                    0x4A, 
                                    0x4A
                                }, 

                                Package (0x14)
                                {
                                    0x0834, 
                                    0x0960, 
                                    0x09C4, 
                                    0x0B54, 
                                    0x0CE4, 
                                    0x0DAC, 
                                    0x1068, 
                                    0x11F8, 
                                    0x16A8, 
                                    0x1900, 
                                    0x43, 
                                    0x43, 
                                    0x43, 
                                    0x43, 
                                    0x48, 
                                    0x4C, 
                                    0x50, 
                                    0x53, 
                                    0x58, 
                                    0x5C
                                }, 

                                Package (0x14)
                                {
                                    0x0834, 
                                    0x0960, 
                                    0x09C4, 
                                    0x0B54, 
                                    0x0CE4, 
                                    0x0DAC, 
                                    0x1068, 
                                    0x11F8, 
                                    0x16A8, 
                                    0x1900, 
                                    0x28, 
                                    0x2D, 
                                    0x32, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F
                                }, 

                                Package (0x14)
                                {
                                    0x0898, 
                                    0x09C4, 
                                    0x0A8C, 
                                    0x0BB8, 
                                    0x0CE4, 
                                    0x0E74, 
                                    0x1194, 
                                    0x12C0, 
                                    0x1770, 
                                    0x1900, 
                                    0x35, 
                                    0x35, 
                                    0x35, 
                                    0x35, 
                                    0x38, 
                                    0x3B, 
                                    0x3F, 
                                    0x44, 
                                    0x4A, 
                                    0x4A
                                }, 

                                Package (0x14)
                                {
                                    0x0834, 
                                    0x0960, 
                                    0x09C4, 
                                    0x0B54, 
                                    0x0CE4, 
                                    0x0DAC, 
                                    0x1068, 
                                    0x11F8, 
                                    0x16A8, 
                                    0x1900, 
                                    0x43, 
                                    0x43, 
                                    0x43, 
                                    0x43, 
                                    0x48, 
                                    0x4C, 
                                    0x50, 
                                    0x53, 
                                    0x58, 
                                    0x5C
                                }, 

                                Package (0x14)
                                {
                                    0x0834, 
                                    0x0960, 
                                    0x09C4, 
                                    0x0B54, 
                                    0x0CE4, 
                                    0x0DAC, 
                                    0x1068, 
                                    0x11F8, 
                                    0x16A8, 
                                    0x1900, 
                                    0x28, 
                                    0x2D, 
                                    0x32, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F
                                }, 

                                Package (0x14)
                                {
                                    0x0898, 
                                    0x09C4, 
                                    0x0A8C, 
                                    0x0BB8, 
                                    0x0CE4, 
                                    0x0E74, 
                                    0x1194, 
                                    0x12C0, 
                                    0x1770, 
                                    0x1900, 
                                    0x35, 
                                    0x35, 
                                    0x35, 
                                    0x35, 
                                    0x38, 
                                    0x3B, 
                                    0x3F, 
                                    0x44, 
                                    0x4A, 
                                    0x4A
                                }, 

                                Package (0x14)
                                {
                                    0x0834, 
                                    0x0960, 
                                    0x09C4, 
                                    0x0B54, 
                                    0x0CE4, 
                                    0x0DAC, 
                                    0x1068, 
                                    0x11F8, 
                                    0x16A8, 
                                    0x1900, 
                                    0x43, 
                                    0x43, 
                                    0x43, 
                                    0x43, 
                                    0x48, 
                                    0x4C, 
                                    0x50, 
                                    0x53, 
                                    0x58, 
                                    0x5C
                                }, 

                                Package (0x14)
                                {
                                    0x0834, 
                                    0x0960, 
                                    0x09C4, 
                                    0x0B54, 
                                    0x0CE4, 
                                    0x0DAC, 
                                    0x1068, 
                                    0x11F8, 
                                    0x16A8, 
                                    0x1900, 
                                    0x28, 
                                    0x2D, 
                                    0x32, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F
                                }, 

                                Package (0x14)
                                {
                                    0x0898, 
                                    0x09C4, 
                                    0x0A8C, 
                                    0x0BB8, 
                                    0x0CE4, 
                                    0x0E74, 
                                    0x1194, 
                                    0x12C0, 
                                    0x1770, 
                                    0x1900, 
                                    0x35, 
                                    0x35, 
                                    0x35, 
                                    0x35, 
                                    0x38, 
                                    0x3B, 
                                    0x3F, 
                                    0x44, 
                                    0x4A, 
                                    0x4A
                                }, 

                                Package (0x14)
                                {
                                    0x0834, 
                                    0x0960, 
                                    0x09C4, 
                                    0x0B54, 
                                    0x0CE4, 
                                    0x0DAC, 
                                    0x1068, 
                                    0x11F8, 
                                    0x16A8, 
                                    0x1900, 
                                    0x43, 
                                    0x43, 
                                    0x43, 
                                    0x43, 
                                    0x48, 
                                    0x4C, 
                                    0x50, 
                                    0x53, 
                                    0x58, 
                                    0x5C
                                }, 

                                Package (0x14)
                                {
                                    0x0834, 
                                    0x0960, 
                                    0x09C4, 
                                    0x0B54, 
                                    0x0CE4, 
                                    0x0DAC, 
                                    0x1068, 
                                    0x11F8, 
                                    0x16A8, 
                                    0x1900, 
                                    0x28, 
                                    0x2D, 
                                    0x32, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F
                                }, 

                                Package (0x14)
                                {
                                    0x0898, 
                                    0x09C4, 
                                    0x0A8C, 
                                    0x0BB8, 
                                    0x0CE4, 
                                    0x0E74, 
                                    0x1194, 
                                    0x12C0, 
                                    0x1770, 
                                    0x1900, 
                                    0x35, 
                                    0x35, 
                                    0x35, 
                                    0x35, 
                                    0x38, 
                                    0x3B, 
                                    0x3F, 
                                    0x44, 
                                    0x4A, 
                                    0x4A
                                }
                            })
                            Method (SFTW, 1, NotSerialized)
                            {
                                Return (DerefOf (LFT0 [Arg0]))
                            }

                            Method (WQA3, 1, NotSerialized)
                            {
                                Name (FACT, Buffer (0x48)
                                {
                                     0x00                                             // .
                                })
                                CreateWordField (FACT, Zero, FNMD)
                                CreateWordField (FACT, 0x02, FNID)
                                CreateDWordField (FACT, 0x04, FNLE)
                                CreateWordField (FACT, 0x08, FNS0)
                                CreateWordField (FACT, 0x0A, FNS1)
                                CreateWordField (FACT, 0x0C, FNS2)
                                CreateWordField (FACT, 0x0E, FNS3)
                                CreateWordField (FACT, 0x10, FNS4)
                                CreateWordField (FACT, 0x12, FNS5)
                                CreateWordField (FACT, 0x14, FNS6)
                                CreateWordField (FACT, 0x16, FNS7)
                                CreateWordField (FACT, 0x18, FNS8)
                                CreateWordField (FACT, 0x1A, FNS9)
                                CreateDWordField (FACT, 0x1C, SEID)
                                CreateDWordField (FACT, 0x20, STLE)
                                CreateWordField (FACT, 0x24, SST0)
                                CreateWordField (FACT, 0x26, SST1)
                                CreateWordField (FACT, 0x28, SST2)
                                CreateWordField (FACT, 0x2A, SST3)
                                CreateWordField (FACT, 0x2C, SST4)
                                CreateWordField (FACT, 0x2E, SST5)
                                CreateWordField (FACT, 0x30, SST6)
                                CreateWordField (FACT, 0x32, SST7)
                                CreateWordField (FACT, 0x34, SST8)
                                CreateWordField (FACT, 0x36, SST9)
                                CreateByteField (FACT, 0x38, SOUA)
                                CreateByteField (FACT, 0x39, EOUA)
                                CreateWordField (FACT, 0x3A, CFMX)
                                CreateByteField (FACT, 0x3C, DMFS)
                                CreateByteField (FACT, 0x3D, RESE)
                                CreateWordField (FACT, 0x3E, CFMN)
                                CreateWordField (FACT, 0x40, FSPS)
                                CreateWordField (FACT, 0x42, MXST)
                                CreateWordField (FACT, 0x44, MNST)
                                CreateWordField (FACT, 0x46, STTS)
                                If ((Arg0 == Zero))
                                {
                                    Local0 = SFTW (Zero)
                                    FNMD = One
                                    FNID = One
                                    SEID = 0x04
                                    DMFS = 0x07
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = SFTW (One)
                                    FNMD = One
                                    FNID = One
                                    SEID = One
                                    DMFS = 0x07
                                }

                                If ((Arg0 == 0x02))
                                {
                                    Local0 = SFTW (0x02)
                                    FNMD = One
                                    FNID = 0x02
                                    SEID = 0x05
                                    DMFS = 0x07
                                }

                                If ((Arg0 == 0x03))
                                {
                                    Local0 = SFTW (0x03)
                                    FNMD = 0x02
                                    FNID = One
                                    SEID = 0x04
                                    DMFS = 0x08
                                }

                                If ((Arg0 == 0x04))
                                {
                                    Local0 = SFTW (0x04)
                                    FNMD = 0x02
                                    FNID = One
                                    SEID = One
                                    DMFS = 0x08
                                }

                                If ((Arg0 == 0x05))
                                {
                                    Local0 = SFTW (0x05)
                                    FNMD = 0x02
                                    FNID = 0x02
                                    SEID = 0x05
                                    DMFS = 0x08
                                }

                                If ((Arg0 == 0x06))
                                {
                                    Local0 = SFTW (0x06)
                                    FNMD = 0x03
                                    FNID = One
                                    SEID = 0x04
                                    DMFS = 0x09
                                }

                                If ((Arg0 == 0x07))
                                {
                                    Local0 = SFTW (0x07)
                                    FNMD = 0x03
                                    FNID = One
                                    SEID = One
                                    DMFS = 0x09
                                }

                                If ((Arg0 == 0x08))
                                {
                                    Local0 = SFTW (0x08)
                                    FNMD = 0x03
                                    FNID = 0x02
                                    SEID = 0x05
                                    DMFS = 0x09
                                }

                                If ((Arg0 == 0x09))
                                {
                                    Local0 = SFTW (0x09)
                                    FNMD = 0xFF
                                    FNID = One
                                    SEID = 0x04
                                    DMFS = 0x08
                                }

                                If ((Arg0 == 0x0A))
                                {
                                    Local0 = SFTW (0x0A)
                                    FNMD = 0xFF
                                    FNID = One
                                    SEID = One
                                    DMFS = 0x08
                                }

                                If ((Arg0 == 0x0B))
                                {
                                    Local0 = SFTW (0x0B)
                                    FNMD = 0xFF
                                    FNID = 0x02
                                    SEID = 0x05
                                    DMFS = 0x08
                                }

                                If ((Arg0 == 0x0C))
                                {
                                    Local0 = SFTW (0x0C)
                                    FNMD = 0xE0
                                    FNID = One
                                    SEID = 0x04
                                    DMFS = 0x0A
                                }

                                If ((Arg0 == 0x0D))
                                {
                                    Local0 = SFTW (0x0D)
                                    FNMD = 0xE0
                                    FNID = One
                                    SEID = One
                                    DMFS = 0x0A
                                }

                                If ((Arg0 == 0x0E))
                                {
                                    Local0 = SFTW (0x0E)
                                    FNMD = 0xE0
                                    FNID = 0x02
                                    SEID = 0x05
                                    DMFS = 0x0A
                                }

                                FNLE = 0x0A
                                FNS0 = DerefOf (Local0 [Zero])
                                FNS1 = DerefOf (Local0 [One])
                                FNS2 = DerefOf (Local0 [0x02])
                                FNS3 = DerefOf (Local0 [0x03])
                                FNS4 = DerefOf (Local0 [0x04])
                                FNS5 = DerefOf (Local0 [0x05])
                                FNS6 = DerefOf (Local0 [0x06])
                                FNS7 = DerefOf (Local0 [0x07])
                                FNS8 = DerefOf (Local0 [0x08])
                                FNS9 = DerefOf (Local0 [0x09])
                                CFMN = DerefOf (Local0 [Zero])
                                CFMX = DerefOf (Local0 [0x09])
                                STLE = 0x0A
                                SST0 = DerefOf (Local0 [0x0A])
                                SST1 = DerefOf (Local0 [0x0B])
                                SST2 = DerefOf (Local0 [0x0C])
                                SST3 = DerefOf (Local0 [0x0D])
                                SST4 = DerefOf (Local0 [0x0E])
                                SST5 = DerefOf (Local0 [0x0F])
                                SST6 = DerefOf (Local0 [0x10])
                                SST7 = DerefOf (Local0 [0x11])
                                SST8 = DerefOf (Local0 [0x12])
                                SST9 = DerefOf (Local0 [0x13])
                                MNST = DerefOf (Local0 [0x0A])
                                MXST = DerefOf (Local0 [0x13])
                                SOUA = Zero
                                EOUA = 0x0A
                                RESE = Zero
                                FSPS = Zero
                                STTS = Zero
                                Return (FACT) /* \_SB_.GZFD.WQA3.FACT */
                            }

                            Method (WQA4, 1, NotSerialized)
                            {
                                Name (LTDA, Buffer (0x07)
                                {
                                     0x00                                             // .
                                })
                                CreateByteField (LTDA, Zero, LTID)
                                CreateByteField (LTDA, One, COTI)
                                CreateByteField (LTDA, 0x02, LTTP)
                                CreateByteField (LTDA, 0x03, STTN)
                                CreateByteField (LTDA, 0x04, DFST)
                                CreateByteField (LTDA, 0x05, BNLE)
                                CreateByteField (LTDA, 0x06, DBNL)
                                If ((^^PCI0.LPC0.EC0.KBLT == Zero))
                                {
                                    If ((Arg0 == Zero))
                                    {
                                        LTID = Zero
                                        COTI = One
                                        If ((YKBT == One))
                                        {
                                            LTTP = 0x02
                                        }
                                        Else
                                        {
                                            LTTP = Zero
                                        }

                                        STTN = 0x02
                                        DFST = One
                                        BNLE = 0x03
                                        DBNL = One
                                        Return (LTDA) /* \_SB_.GZFD.WQA4.LTDA */
                                    }
                                }
                                ElseIf ((^^PCI0.LPC0.EC0.KBLT == One))
                                {
                                    If ((Arg0 == Zero))
                                    {
                                        LTID = Zero
                                        COTI = Zero
                                        LTTP = One
                                        STTN = 0x05
                                        DFST = Zero
                                        BNLE = 0x04
                                        DBNL = 0x03
                                        Return (LTDA) /* \_SB_.GZFD.WQA4.LTDA */
                                    }
                                }

                                If ((Arg0 == One))
                                {
                                    LTID = 0xFF
                                    COTI = Zero
                                    LTTP = Zero
                                    STTN = Zero
                                    DFST = Zero
                                    BNLE = Zero
                                    DBNL = Zero
                                    Return (LTDA) /* \_SB_.GZFD.WQA4.LTDA */
                                }

                                If ((Arg0 == 0x02))
                                {
                                    LTID = 0xFF
                                    COTI = Zero
                                    LTTP = Zero
                                    STTN = Zero
                                    DFST = Zero
                                    BNLE = Zero
                                    DBNL = Zero
                                    Return (LTDA) /* \_SB_.GZFD.WQA4.LTDA */
                                }

                                If ((Arg0 == 0x03))
                                {
                                    LTID = 0xFF
                                    COTI = Zero
                                    LTTP = Zero
                                    STTN = Zero
                                    DFST = Zero
                                    BNLE = Zero
                                    DBNL = Zero
                                    Return (LTDA) /* \_SB_.GZFD.WQA4.LTDA */
                                }

                                If ((Arg0 == 0x04))
                                {
                                    LTID = 0x04
                                    COTI = One
                                    LTTP = Zero
                                    STTN = 0x04
                                    DFST = One
                                    BNLE = Zero
                                    DBNL = Zero
                                    Return (LTDA) /* \_SB_.GZFD.WQA4.LTDA */
                                }

                                If ((Arg0 == 0x05))
                                {
                                    LTID = 0xFF
                                    COTI = Zero
                                    LTTP = Zero
                                    STTN = Zero
                                    DFST = Zero
                                    BNLE = Zero
                                    DBNL = Zero
                                    Return (LTDA) /* \_SB_.GZFD.WQA4.LTDA */
                                }
                            }

                            Name (COC0, Buffer (0x28)
                            {
                                 0x00                                             // .
                            })
                            CreateByteField (COC0, Zero, CMOD)
                            CreateByteField (COC0, One, CTP1)
                            CreateWordField (COC0, 0x02, CRES)
                            CreateDWordField (COC0, 0x04, CTUN)
                            CreateDWordField (COC0, 0x08, CDEF)
                            CreateDWordField (COC0, 0x0C, CVAL)
                            CreateDWordField (COC0, 0x10, CMIN)
                            CreateDWordField (COC0, 0x14, CMAX)
                            CreateDWordField (COC0, 0x18, CSCA)
                            CreateDWordField (COC0, 0x1C, CORI)
                            CreateDWordField (COC0, 0x20, CNOC)
                            CreateDWordField (COC0, 0x24, CINT)
                            Method (WQA6, 1, NotSerialized)
                            {
                                If ((Arg0 == Zero))
                                {
                                    CMOD = Zero
                                    CTP1 = One
                                    CTUN = 0x414D4401
                                    CDEF = 0x40E00000
                                    Divide (PBOS, 0x64, Local1, Local0)
                                    CVAL = FTOI (Local0, Zero)
                                    CMIN = 0x3F800000
                                    CMAX = 0x41200000
                                    CSCA = 0x3F800000
                                    CORI = One
                                    CNOC = 0x04
                                    CINT = 0xC8
                                    Return (COC0) /* \_SB_.GZFD.COC0 */
                                }

                                If ((Arg0 == One))
                                {
                                    CMOD = Zero
                                    CTP1 = One
                                    CTUN = 0x414D4402
                                    CDEF = 0x43480000
                                    CVAL = FTOI (MCBC, Zero)
                                    CMIN = Zero
                                    CMAX = 0x43480000
                                    CSCA = 0x3F800000
                                    CORI = One
                                    CNOC = 0x04
                                    CINT = 0xC8
                                    Return (COC0) /* \_SB_.GZFD.COC0 */
                                }

                                If ((Arg0 == 0x02))
                                {
                                    CMOD = Zero
                                    CTP1 = One
                                    CTUN = 0x414D4403
                                    CDEF = 0x80000000
                                    CVAL = FTOI (CCOM, CBCS)
                                    CMIN = 0xC1F00000
                                    CMAX = 0x41F00000
                                    CSCA = 0x3F800000
                                    CORI = One
                                    CNOC = 0x04
                                    CINT = 0xC8
                                    Return (COC0) /* \_SB_.GZFD.COC0 */
                                }
                            }

                            Method (WQA7, 1, NotSerialized)
                            {
                                If ((Arg0 == Zero))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x01, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == One))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x01, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x02))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x03))
                                {
                                    If (((PANT & 0x04) == 0x04))
                                    {
                                        Return (Buffer (0x0C)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x01, 0x00, 0x00, 0x00                           // ....
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x0C)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
                                        })
                                    }
                                }

                                If ((Arg0 == 0x04))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x05))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x06))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x07))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x01, 0x00, 0x01, 0x03, 0x07, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x08))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x02, 0x00, 0x01, 0x03, 0x07, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x09))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x0A))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x01, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x0B))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x01, 0x04, 0x01, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x01, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x0C))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x02, 0x04, 0x07, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x0D))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x01, 0x00, 0x03, 0x04, 0x07, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x01, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x0E))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x02, 0x00, 0x03, 0x04, 0x07, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x01, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x0F))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x01, 0x05, 0x03, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x01, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x10))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x04, 0x05, 0x03, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x01, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x11))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x05, 0x05, 0x03, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x01, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x12))
                                {
                                    If ((DSMF == 0x02))
                                    {
                                        Return (Buffer (0x0C)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x0B, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
                                        })
                                    }
                                    ElseIf (((DSMF == 0x03) || (DSMF == 0x04)))
                                    {
                                        Return (Buffer (0x0C)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
                                        })
                                    }
                                }

                                If ((Arg0 == 0x13))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x14))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x15))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x05, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x01, 0x00, 0x00, 0x00                           // ....
                                    })
                                }

                                If ((Arg0 == 0x16))
                                {
                                    Return (Buffer (0x0C)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
                                    })
                                }
                            }

                            Method (WQA8, 1, NotSerialized)
                            {
                                If ((GTYP == One))
                                {
                                    If ((Arg0 == Zero))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x32, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 2.......
                                            /* 0010 */  0x2D, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00   // -..._...
                                        })
                                    }

                                    If ((Arg0 == One))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x02, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x36, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 6.......
                                            /* 0010 */  0x2D, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00   // -..._...
                                        })
                                    }

                                    If ((Arg0 == 0x02))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x5A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // Z.......
                                            /* 0010 */  0x2D, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00   // -..._...
                                        })
                                    }

                                    If ((Arg0 == 0x03))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xFF, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x36, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 6.......
                                            /* 0010 */  0x2D, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00   // -..._...
                                        })
                                    }

                                    If ((Arg0 == 0x04))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xE0, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x5A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // Z.......
                                            /* 0010 */  0x2D, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00   // -..._...
                                        })
                                    }

                                    If ((Arg0 == 0x05))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x2D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // -.......
                                            /* 0010 */  0x28, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00   // (...Z...
                                        })
                                    }

                                    If ((Arg0 == 0x06))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x36, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 6.......
                                            /* 0010 */  0x28, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00   // (...Z...
                                        })
                                    }

                                    If ((Arg0 == 0x07))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x03, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                            /* 0010 */  0x28, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00   // (...Z...
                                        })
                                    }

                                    If ((Arg0 == 0x08))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xFF, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x36, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 6.......
                                            /* 0010 */  0x28, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00   // (...Z...
                                        })
                                    }

                                    If ((Arg0 == 0x09))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xE0, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // U.......
                                            /* 0010 */  0x28, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00   // (...Z...
                                        })
                                    }

                                    If ((Arg0 == 0x0A))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x3C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // <.......
                                            /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // 7...d...
                                        })
                                    }

                                    If ((Arg0 == 0x0B))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x02, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // A.......
                                            /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // 7...d...
                                        })
                                    }

                                    If ((Arg0 == 0x0C))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                            /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // 7...d...
                                        })
                                    }

                                    If ((Arg0 == 0x0D))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xFF, 0x03, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // A.......
                                            /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // 7...d...
                                        })
                                    }

                                    If ((Arg0 == 0x0E))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xE0, 0x03, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                            /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // 7...d...
                                        })
                                    }

                                    If ((Arg0 == 0x0F))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x01, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                            /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                        })
                                    }

                                    If ((Arg0 == 0x10))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x02, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                            /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                        })
                                    }

                                    If ((Arg0 == 0x11))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x03, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                            /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                        })
                                    }

                                    If ((Arg0 == 0x12))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xFF, 0x04, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                            /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                        })
                                    }

                                    If ((Arg0 == 0x13))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xE0, 0x04, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                            /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                        })
                                    }

                                    If ((Arg0 == 0x14))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x01, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x15))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x02, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x16))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x03, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x17))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xFF, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x18))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xE0, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x19))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x01, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x1E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x19, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00   // ....7...
                                        })
                                    }

                                    If ((Arg0 == 0x1A))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x02, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x2D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // -.......
                                            /* 0010 */  0x19, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00   // ....7...
                                        })
                                    }

                                    If ((Arg0 == 0x1B))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x03, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x2D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // -.......
                                            /* 0010 */  0x19, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00   // ....7...
                                        })
                                    }

                                    If ((Arg0 == 0x1C))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xFF, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x2D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // -.......
                                            /* 0010 */  0x19, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00   // ....7...
                                        })
                                    }

                                    If ((Arg0 == 0x1D))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xE0, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x2D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // -.......
                                            /* 0010 */  0x19, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00   // ....7...
                                        })
                                    }

                                    If ((Arg0 == 0x1E))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x01, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x1F))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x02, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x20))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x03, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x21))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xFF, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x22))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xE0, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x23))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x01, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                            /* 0008 */  0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x24))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x02, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                            /* 0008 */  0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x25))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x03, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                            /* 0008 */  0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x26))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xFF, 0x01, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                            /* 0008 */  0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x27))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xE0, 0x01, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x28))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x01, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                            /* 0008 */  0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // <.......
                                            /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00   // <..._...
                                        })
                                    }

                                    If ((Arg0 == 0x29))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x02, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                            /* 0008 */  0x3C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // <.......
                                            /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00   // <..._...
                                        })
                                    }

                                    If ((Arg0 == 0x2A))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x03, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                            /* 0008 */  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // U.......
                                            /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00   // <..._...
                                        })
                                    }

                                    If ((Arg0 == 0x2B))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xFF, 0x02, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                            /* 0008 */  0x3C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // <.......
                                            /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00   // <..._...
                                        })
                                    }

                                    If ((Arg0 == 0x2C))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xE0, 0x02, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                            /* 0008 */  0x5F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // _.......
                                            /* 0010 */  0x3C, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00   // <..._...
                                        })
                                    }

                                    If ((Arg0 == 0x2D))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x01, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                            /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                        })
                                    }

                                    If ((Arg0 == 0x2E))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x02, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                            /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                        })
                                    }

                                    If ((Arg0 == 0x2F))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x03, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                            /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                        })
                                    }

                                    If ((Arg0 == 0x30))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xFF, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                            /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                        })
                                    }

                                    If ((Arg0 == 0x31))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xE0, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                            /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                        })
                                    }

                                    If ((Arg0 == 0x32))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x01, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x0F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00   // ....-...
                                        })
                                    }

                                    If ((Arg0 == 0x33))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x02, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x2D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // -.......
                                            /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00   // ....-...
                                        })
                                    }

                                    If ((Arg0 == 0x34))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x03, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x2D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // -.......
                                            /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00   // ....-...
                                        })
                                    }

                                    If ((Arg0 == 0x35))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xFF, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x2D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // -.......
                                            /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00   // ....-...
                                        })
                                    }

                                    If ((Arg0 == 0x36))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xE0, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x2D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // -.......
                                            /* 0010 */  0x0F, 0x00, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00   // ....-...
                                        })
                                    }

                                    If ((Arg0 == 0x37))
                                    {
                                        If ((SCOC == One))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }

                                    If ((Arg0 == 0x38))
                                    {
                                        If ((SCOC == One))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }

                                    If ((Arg0 == 0x39))
                                    {
                                        If ((SCOC == One))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }

                                    If ((Arg0 == 0x3A))
                                    {
                                        If ((SCOC == One))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xFF, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xFF, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }

                                    If ((Arg0 == 0x3B))
                                    {
                                        If ((SCOC == One))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xE0, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xE0, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }

                                    If ((Arg0 == 0x3C))
                                    {
                                        If ((GOCC == One))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }

                                    If ((Arg0 == 0x3D))
                                    {
                                        If ((GOCC == One))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x05, 0x02, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }

                                    If ((Arg0 == 0x3E))
                                    {
                                        If ((GOCC == One))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x05, 0x02, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }

                                    If ((Arg0 == 0x3F))
                                    {
                                        If ((GOCC == One))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xFF, 0x05, 0x02, 0x97, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xFF, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }

                                    If ((Arg0 == 0x40))
                                    {
                                        If ((GOCC == One))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xE0, 0x05, 0x02, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xE0, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }

                                    If ((Arg0 == 0x41))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x01, 0x0B, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                            /* 0008 */  0x0F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x42))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x02, 0x0B, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x43))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x03, 0x0B, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x44))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xFF, 0x0B, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x45))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xE0, 0x0B, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                        })
                                    }
                                }
                                Else
                                {
                                    If ((Arg0 == Zero))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x32, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 2.......
                                            /* 0010 */  0x2D, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00   // -..._...
                                        })
                                    }

                                    If ((Arg0 == One))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x02, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x36, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 6.......
                                            /* 0010 */  0x2D, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00   // -..._...
                                        })
                                    }

                                    If ((Arg0 == 0x02))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x5A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // Z.......
                                            /* 0010 */  0x2D, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00   // -..._...
                                        })
                                    }

                                    If ((Arg0 == 0x03))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xFF, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x36, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 6.......
                                            /* 0010 */  0x2D, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00   // -..._...
                                        })
                                    }

                                    If ((Arg0 == 0x04))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xE0, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x5A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // Z.......
                                            /* 0010 */  0x2D, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00   // -..._...
                                        })
                                    }

                                    If ((Arg0 == 0x05))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x2D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // -.......
                                            /* 0010 */  0x28, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00   // (...Z...
                                        })
                                    }

                                    If ((Arg0 == 0x06))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x36, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 6.......
                                            /* 0010 */  0x28, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00   // (...Z...
                                        })
                                    }

                                    If ((Arg0 == 0x07))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x03, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // P.......
                                            /* 0010 */  0x28, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00   // (...Z...
                                        })
                                    }

                                    If ((Arg0 == 0x08))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xFF, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x36, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 6.......
                                            /* 0010 */  0x28, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00   // (...Z...
                                        })
                                    }

                                    If ((Arg0 == 0x09))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xE0, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // U.......
                                            /* 0010 */  0x28, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00   // (...Z...
                                        })
                                    }

                                    If ((Arg0 == 0x0A))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x3C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // <.......
                                            /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // 7...i...
                                        })
                                    }

                                    If ((Arg0 == 0x0B))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x02, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // A.......
                                            /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // 7...i...
                                        })
                                    }

                                    If ((Arg0 == 0x0C))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                            /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // 7...i...
                                        })
                                    }

                                    If ((Arg0 == 0x0D))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xFF, 0x03, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // A.......
                                            /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // 7...i...
                                        })
                                    }

                                    If ((Arg0 == 0x0E))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xE0, 0x03, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                            /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00   // 7...i...
                                        })
                                    }

                                    If ((Arg0 == 0x0F))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x01, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                            /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                        })
                                    }

                                    If ((Arg0 == 0x10))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x02, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                            /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                        })
                                    }

                                    If ((Arg0 == 0x11))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x03, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                            /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                        })
                                    }

                                    If ((Arg0 == 0x12))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xFF, 0x04, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                            /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                        })
                                    }

                                    If ((Arg0 == 0x13))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xE0, 0x04, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                            /* 0010 */  0x55, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // U...d...
                                        })
                                    }

                                    If ((Arg0 == 0x14))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x01, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x15))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x02, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x16))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x03, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x17))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xFF, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x18))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xE0, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x19))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x01, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x23, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // #.......
                                            /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                        })
                                    }

                                    If ((Arg0 == 0x1A))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x02, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x2D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // -.......
                                            /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                        })
                                    }

                                    If ((Arg0 == 0x1B))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x03, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x2D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // -.......
                                            /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                        })
                                    }

                                    If ((Arg0 == 0x1C))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xFF, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x2D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // -.......
                                            /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                        })
                                    }

                                    If ((Arg0 == 0x1D))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xE0, 0x06, 0x01, 0x07, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x2D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // -.......
                                            /* 0010 */  0x1E, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                        })
                                    }

                                    If ((Arg0 == 0x1E))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x01, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x1F))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x02, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x20))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x03, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x21))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xFF, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x22))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xE0, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 8.......
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x23))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x01, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                            /* 0008 */  0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x05, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x24))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x02, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                            /* 0008 */  0x0F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x05, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x25))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x03, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                            /* 0008 */  0x0F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x05, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x26))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xFF, 0x01, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                            /* 0008 */  0x0F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x05, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x27))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xE0, 0x01, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                            /* 0008 */  0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x05, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x28))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x01, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                            /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 7.......
                                            /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // 7...d...
                                        })
                                    }

                                    If ((Arg0 == 0x29))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x02, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                            /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                            /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // 7...d...
                                        })
                                    }

                                    If ((Arg0 == 0x2A))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x03, 0x02, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                            /* 0008 */  0x55, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // U.......
                                            /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // 7...d...
                                        })
                                    }

                                    If ((Arg0 == 0x2B))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xFF, 0x02, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                            /* 0008 */  0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 7.......
                                            /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // 7...d...
                                        })
                                    }

                                    If ((Arg0 == 0x2C))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xE0, 0x02, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                            /* 0008 */  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // d.......
                                            /* 0010 */  0x37, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00   // 7...d...
                                        })
                                    }

                                    If ((Arg0 == 0x2D))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x01, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                            /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                        })
                                    }

                                    If ((Arg0 == 0x2E))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x02, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                            /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                        })
                                    }

                                    If ((Arg0 == 0x2F))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x03, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                            /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                        })
                                    }

                                    If ((Arg0 == 0x30))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xFF, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                            /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                        })
                                    }

                                    If ((Arg0 == 0x31))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xE0, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // W.......
                                            /* 0010 */  0x4B, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00   // K...W...
                                        })
                                    }

                                    If ((Arg0 == 0x32))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x01, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x14, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00   // ....2...
                                        })
                                    }

                                    If ((Arg0 == 0x33))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x02, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x32, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 2.......
                                            /* 0010 */  0x14, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00   // ....2...
                                        })
                                    }

                                    If ((Arg0 == 0x34))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x03, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x2D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // -.......
                                            /* 0010 */  0x14, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00   // ....2...
                                        })
                                    }

                                    If ((Arg0 == 0x35))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xFF, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x32, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // 2.......
                                            /* 0010 */  0x14, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00   // ....2...
                                        })
                                    }

                                    If ((Arg0 == 0x36))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xE0, 0x04, 0x02, 0x07, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x2D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // -.......
                                            /* 0010 */  0x14, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00   // ....2...
                                        })
                                    }

                                    If ((Arg0 == 0x37))
                                    {
                                        If ((SCOC == One))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }

                                    If ((Arg0 == 0x38))
                                    {
                                        If ((SCOC == One))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }

                                    If ((Arg0 == 0x39))
                                    {
                                        If ((SCOC == One))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }

                                    If ((Arg0 == 0x3A))
                                    {
                                        If ((SCOC == One))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xFF, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xFF, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }

                                    If ((Arg0 == 0x3B))
                                    {
                                        If ((SCOC == One))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xE0, 0x08, 0x01, 0x10, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xE0, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }

                                    If ((Arg0 == 0x3C))
                                    {
                                        If ((GOCC == One))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x01, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }

                                    If ((Arg0 == 0x3D))
                                    {
                                        If ((GOCC == One))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x05, 0x02, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x02, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }

                                    If ((Arg0 == 0x3E))
                                    {
                                        If ((GOCC == One))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x05, 0x02, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0x03, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }

                                    If ((Arg0 == 0x3F))
                                    {
                                        If ((GOCC == One))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xFF, 0x05, 0x02, 0x97, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xFF, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }

                                    If ((Arg0 == 0x40))
                                    {
                                        If ((GOCC == One))
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xE0, 0x05, 0x02, 0x57, 0x00, 0x00, 0x00,  // ....W...
                                                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x18)
                                            {
                                                /* 0000 */  0x00, 0xE0, 0x05, 0x02, 0x10, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }

                                    If ((Arg0 == 0x41))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x01, 0x0B, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                            /* 0008 */  0x0F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x42))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x02, 0x0B, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x43))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0x03, 0x0B, 0x02, 0x01, 0x04, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x44))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xFF, 0x0B, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x45))
                                    {
                                        Return (Buffer (0x18)
                                        {
                                            /* 0000 */  0x00, 0xE0, 0x0B, 0x02, 0x07, 0x04, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00   // ........
                                        })
                                    }
                                }
                            }

                            Method (WQA9, 1, NotSerialized)
                            {
                                Name (YPAT, Buffer (0x0C){})
                                CreateWordField (YPAT, Zero, YPMD)
                                CreateWordField (YPAT, 0x02, YPDE)
                                CreateWordField (YPAT, 0x04, YPMI)
                                CreateWordField (YPAT, 0x06, YPMX)
                                CreateDWordField (YPAT, 0x08, YPHW)
                                If ((Arg0 == Zero))
                                {
                                    If (((PANT & 0x04) == 0x04))
                                    {
                                        YPMD = One
                                        YPDE = 0xA5
                                        YPMI = 0x3C
                                        YPMX = 0xA5
                                        Local0 = (PPID << 0x10)
                                        Local1 = (Local0 & 0xFFFF0000)
                                        Local2 = (Local1 | PMID) /* \PMID */
                                        YPHW = Local2
                                    }
                                    Else
                                    {
                                        YPMD = One
                                        YPDE = 0xF0
                                        YPMI = 0x3C
                                        YPMX = 0x78
                                        Local0 = (PPID << 0x10)
                                        Local1 = (Local0 & 0xFFFF0000)
                                        Local2 = (Local1 | PMID) /* \PMID */
                                        YPHW = Local2
                                    }

                                    Return (YPAT) /* \_SB_.GZFD.WQA9.YPAT */
                                }
                            }

                            Method (WQAA, 1, NotSerialized)
                            {
                                If ((GTYP == One))
                                {
                                    If ((Arg0 == Zero))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == One))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x01, 0x02, 0x05, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x02))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x01, 0x02, 0x0A, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x03))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x0B, 0x02, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x04))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x0B, 0x02, 0x05, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x05))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x0B, 0x02, 0x0A, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x06))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x0B, 0x02, 0x0F, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x07))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x02, 0x02, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                        })
                                    }

                                    If ((Arg0 == 0x08))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x02, 0x02, 0x41, 0x00, 0x00, 0x00   // ....A...
                                        })
                                    }

                                    If ((Arg0 == 0x09))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x02, 0x02, 0x46, 0x00, 0x00, 0x00   // ....F...
                                        })
                                    }

                                    If ((Arg0 == 0x0A))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x02, 0x02, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                        })
                                    }

                                    If ((Arg0 == 0x0B))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x02, 0x02, 0x50, 0x00, 0x00, 0x00   // ....P...
                                        })
                                    }

                                    If ((Arg0 == 0x0C))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x02, 0x02, 0x55, 0x00, 0x00, 0x00   // ....U...
                                        })
                                    }

                                    If ((Arg0 == 0x0D))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x02, 0x02, 0x5A, 0x00, 0x00, 0x00   // ....Z...
                                        })
                                    }

                                    If ((Arg0 == 0x0E))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x02, 0x02, 0x5F, 0x00, 0x00, 0x00   // ...._...
                                        })
                                    }

                                    If ((Arg0 == 0x0F))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x10))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x11))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x12))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x13))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }
                                }
                                Else
                                {
                                    If ((Arg0 == Zero))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == One))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x01, 0x02, 0x05, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x02))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x01, 0x02, 0x0A, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x03))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x01, 0x02, 0x0F, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x04))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x0B, 0x02, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x05))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x0B, 0x02, 0x05, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x06))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x0B, 0x02, 0x0A, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x07))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x0B, 0x02, 0x0F, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x08))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x02, 0x02, 0x37, 0x00, 0x00, 0x00   // ....7...
                                        })
                                    }

                                    If ((Arg0 == 0x09))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x02, 0x02, 0x3C, 0x00, 0x00, 0x00   // ....<...
                                        })
                                    }

                                    If ((Arg0 == 0x0A))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x02, 0x02, 0x41, 0x00, 0x00, 0x00   // ....A...
                                        })
                                    }

                                    If ((Arg0 == 0x0B))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x02, 0x02, 0x46, 0x00, 0x00, 0x00   // ....F...
                                        })
                                    }

                                    If ((Arg0 == 0x0C))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x02, 0x02, 0x4B, 0x00, 0x00, 0x00   // ....K...
                                        })
                                    }

                                    If ((Arg0 == 0x0D))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x02, 0x02, 0x50, 0x00, 0x00, 0x00   // ....P...
                                        })
                                    }

                                    If ((Arg0 == 0x0E))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x02, 0x02, 0x55, 0x00, 0x00, 0x00   // ....U...
                                        })
                                    }

                                    If ((Arg0 == 0x0F))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x02, 0x02, 0x5A, 0x00, 0x00, 0x00   // ....Z...
                                        })
                                    }

                                    If ((Arg0 == 0x10))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x02, 0x02, 0x5F, 0x00, 0x00, 0x00   // ...._...
                                        })
                                    }

                                    If ((Arg0 == 0x11))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0x02, 0x02, 0x64, 0x00, 0x00, 0x00   // ....d...
                                        })
                                    }

                                    If ((Arg0 == 0x12))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }

                                    If ((Arg0 == 0x13))
                                    {
                                        Return (Buffer (0x08)
                                        {
                                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }
                                }
                            }

                            Method (WMAA, 3, NotSerialized)
                            {
                                If ((Arg1 == 0x04))
                                {
                                    If ((GOCC == One))
                                    {
                                        Return (0x05)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }

                                If ((Arg1 == 0x0B))
                                {
                                    Return (0x0F)
                                }

                                If ((Arg1 == 0x0C))
                                {
                                    Return (Zero)
                                }

                                If ((Arg1 == 0x0D))
                                {
                                    If ((ToInteger (Arg2) == One))
                                    {
                                        ^^PCI0.LPC0.EC0.NCMD (0x59, 0x77)
                                    }
                                    Else
                                    {
                                        ^^PCI0.LPC0.EC0.NCMD (0x59, 0x76)
                                    }
                                }

                                If ((Arg1 == 0x0E))
                                {
                                    Return (Zero)
                                }

                                If ((Arg1 == 0x0F))
                                {
                                    Return (Zero)
                                }

                                If ((Arg1 == 0x10))
                                {
                                    Return (Zero)
                                }

                                If ((Arg1 == 0x12))
                                {
                                    Return (Zero)
                                }

                                If ((Arg1 == 0x13))
                                {
                                    Return (Zero)
                                }

                                If ((Arg1 == 0x14))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.FCST & One))
                                            {
                                                Release (^^PCI0.LPC0.EC0.LFCM)
                                                Return (One)
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Zero)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x15))
                                {
                                    Return (One)
                                }

                                If ((Arg1 == 0x16))
                                {
                                    If ((ToInteger (Arg2) == One))
                                    {
                                        ^^PCI0.LPC0.EC0.NCMD (0x59, 0x78)
                                    }
                                    Else
                                    {
                                        ^^PCI0.LPC0.EC0.NCMD (0x59, 0x79)
                                    }
                                }

                                If ((Arg1 == 0x17))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.GDST & 0x02))
                                            {
                                                Release (^^PCI0.LPC0.EC0.LFCM)
                                                Return (One)
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Zero)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x18))
                                {
                                    Return (One)
                                }

                                If ((Arg1 == 0x19))
                                {
                                    If ((ToInteger (Arg2) == One))
                                    {
                                        ^^PCI0.LPC0.EC0.NCMD (0x59, 0x7B)
                                    }
                                    Else
                                    {
                                        ^^PCI0.LPC0.EC0.NCMD (0x59, 0x7A)
                                    }
                                }

                                If ((Arg1 == 0x1A))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.GDST & 0x04))
                                            {
                                                Release (^^PCI0.LPC0.EC0.LFCM)
                                                Return (One)
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Zero)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x1E))
                                {
                                    Local1 = Zero
                                    Local1 |= 0xF000
                                    Local1 |= 0x04
                                    Local1 |= 0x40
                                    Return (Local1)
                                }

                                If ((Arg1 == 0x1F))
                                {
                                    Local1 = 0x0C80
                                    Local2 = 0x0C80
                                    Local1 |= (Local2 << 0x10)
                                    Return (Local1)
                                }

                                If ((Arg1 == 0x20))
                                {
                                    Return (Zero)
                                }

                                If ((Arg1 == 0x21))
                                {
                                    Return (Zero)
                                }

                                If ((Arg1 == 0x22))
                                {
                                    Return (Zero)
                                }

                                If ((Arg1 == 0x23))
                                {
                                    If ((^^PCI0.LPC0.EC0.KBLT == One))
                                    {
                                        Return (0x04)
                                    }
                                    Else
                                    {
                                        Return (0xF0)
                                    }
                                }

                                If ((Arg1 == 0x24))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((ToInteger (Arg2) == One))
                                            {
                                                ^^PCI0.LPC0.EC0.KLOR = One
                                                ^^PCI0.LPC0.EC0.KLCH = One
                                            }
                                            Else
                                            {
                                                ^^PCI0.LPC0.EC0.KLOR = Zero
                                                ^^PCI0.LPC0.EC0.KLCH = One
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Zero)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x25))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local1 = ^^PCI0.LPC0.EC0.KLOR /* \_SB_.PCI0.LPC0.EC0_.KLOR */
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x26))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local1 = Zero
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x27))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local1 = Zero
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x28))
                                {
                                    Return (0x02)
                                }

                                If ((Arg1 == 0x29))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.MSMF == One))
                                            {
                                                Local1 = One
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.MSMF == Zero))
                                            {
                                                Local1 = Zero
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x2A))
                                {
                                    If ((ToInteger (Arg2) == One))
                                    {
                                        SMBB = 0x26
                                        SMBA = 0xCA
                                    }
                                    ElseIf ((ToInteger (Arg2) == Zero))
                                    {
                                        SMBB = 0x25
                                        SMBA = 0xCA
                                    }

                                    Return (Zero)
                                }

                                If ((Arg1 == 0x2B))
                                {
                                    Return (0x06)
                                }

                                If ((Arg1 == 0x2C))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((ToInteger (Arg2) == One))
                                            {
                                                EPSW = One
                                                If ((^^PCI0.LPC0.EC0.SPMO != 0x02))
                                                {
                                                    ^^PCI0.LPC0.EC0.SSFM = One
                                                }

                                                If ((^^PCI0.LPC0.EC0.CTMD == One))
                                                {
                                                    ^^PCI0.LPC0.EC0.SSFM = One
                                                    ^^PCI0.LPC0.EC0.CTMD = Zero
                                                }

                                                ^^PCI0.LPC0.EC0.CTE0 = Zero
                                                ^^PCI0.LPC0.EC0.SPMO = 0x02
                                                ^^PCI0.LPC0.EC0.PABD = Zero
                                                ^^PCI0.LPC0.EC0.CAC1 = Zero
                                                ^^PCI0.LPC0.EC0.EMFG = Zero
                                            }
                                            ElseIf ((ToInteger (Arg2) == 0x02))
                                            {
                                                EPSW = One
                                                If ((^^PCI0.LPC0.EC0.SPMO != Zero))
                                                {
                                                    ^^PCI0.LPC0.EC0.SSFM = One
                                                }

                                                If ((^^PCI0.LPC0.EC0.CTMD == One))
                                                {
                                                    ^^PCI0.LPC0.EC0.SSFM = One
                                                    ^^PCI0.LPC0.EC0.CTMD = Zero
                                                }

                                                ^^PCI0.LPC0.EC0.CTE0 = Zero
                                                ^^PCI0.LPC0.EC0.SPMO = Zero
                                                ^^PCI0.LPC0.EC0.PABD = Zero
                                                ^^PCI0.LPC0.EC0.CAC1 = Zero
                                                ^^PCI0.LPC0.EC0.EMFG = Zero
                                            }
                                            ElseIf ((ToInteger (Arg2) == 0x03))
                                            {
                                                EPSW = One
                                                If ((^^PCI0.LPC0.EC0.ACTY () == One))
                                                {
                                                    If ((^^PCI0.LPC0.EC0.SPMO != One))
                                                    {
                                                        ^^PCI0.LPC0.EC0.SSFM = One
                                                    }

                                                    If ((^^PCI0.LPC0.EC0.CTMD == One))
                                                    {
                                                        ^^PCI0.LPC0.EC0.SSFM = One
                                                        ^^PCI0.LPC0.EC0.CTMD = Zero
                                                    }

                                                    ^^PCI0.LPC0.EC0.SPMO = One
                                                    ^^PCI0.LPC0.EC0.PABD = Zero
                                                    ^^PCI0.LPC0.EC0.CTE0 = Zero
                                                    ^^PCI0.LPC0.EC0.CAC1 = Zero
                                                    ^^PCI0.LPC0.EC0.EMFG = Zero
                                                }
                                                Else
                                                {
                                                    If ((^^PCI0.LPC0.EC0.SPMO != Zero))
                                                    {
                                                        ^^PCI0.LPC0.EC0.SSFM = One
                                                    }

                                                    ^^PCI0.LPC0.EC0.SPMO = Zero
                                                    If ((^^PCI0.LPC0.EC0.CTMD == One))
                                                    {
                                                        ^^PCI0.LPC0.EC0.SSFM = One
                                                        ^^PCI0.LPC0.EC0.CTMD = Zero
                                                    }

                                                    ^^PCI0.LPC0.EC0.CTE0 = Zero
                                                    ^^PCI0.LPC0.EC0.PABD = One
                                                    ^^PCI0.LPC0.EC0.CAC1 = Zero
                                                    ^^PCI0.LPC0.EC0.EMFG = Zero
                                                }
                                            }
                                            ElseIf ((ToInteger (Arg2) == 0xFF))
                                            {
                                                EPSW = One
                                                If ((^^PCI0.LPC0.EC0.ACTY () == One))
                                                {
                                                    If ((^^PCI0.LPC0.EC0.CTMD != One))
                                                    {
                                                        ^^PCI0.LPC0.EC0.SSFM = One
                                                        ^^PCI0.LPC0.EC0.CTMD = One
                                                    }

                                                    If ((^^PCI0.LPC0.EC0.CTE0 != One))
                                                    {
                                                        If ((DBFS == One))
                                                        {
                                                            ^^PCI0.LPC0.FNQT (One, 0x04)
                                                        }
                                                        Else
                                                        {
                                                            ^^PCI0.LPC0.FNQT (One, 0x03)
                                                        }
                                                    }

                                                    ^^PCI0.LPC0.EC0.CAC1 = Zero
                                                    ^^PCI0.LPC0.EC0.EMFG = Zero
                                                    ^^PCI0.LPC0.EC0.CTE0 = Zero
                                                    ^^PCI0.LPC0.EC0.PABD = Zero
                                                }
                                                Else
                                                {
                                                    If ((^^PCI0.LPC0.EC0.SPMO == Zero))
                                                    {
                                                        ^^PCI0.LPC0.EC0.SPMO = Zero
                                                    }
                                                    Else
                                                    {
                                                        ^^PCI0.LPC0.EC0.SPMO = 0x02
                                                    }

                                                    ^^PCI0.LPC0.FNQT (One, 0x05)
                                                    ^^PCI0.LPC0.EC0.CAC1 = One
                                                    ^^PCI0.LPC0.EC0.CTMD = Zero
                                                    ^^PCI0.LPC0.EC0.CTE0 = Zero
                                                    ^^PCI0.LPC0.EC0.PABD = Zero
                                                    ^^PCI0.LPC0.EC0.EMFG = Zero
                                                }
                                            }
                                            ElseIf ((ToInteger (Arg2) == 0xE0))
                                            {
                                                If ((^^PCI0.LPC0.EC0.ACTY () == One))
                                                {
                                                    If ((^^PCI0.LPC0.EC0.CTMD != One))
                                                    {
                                                        ^^PCI0.LPC0.EC0.SSFM = One
                                                    }

                                                    ^^PCI0.LPC0.EC0.CTMD = One
                                                    ^^PCI0.LPC0.EC0.CTE0 = One
                                                    ^^PCI0.LPC0.EC0.NCMD (0x8C, Zero)
                                                    If ((DBFS == One))
                                                    {
                                                        ^^PCI0.LPC0.FNQT (One, 0x10)
                                                    }
                                                    Else
                                                    {
                                                        ^^PCI0.LPC0.FNQT (One, 0x0F)
                                                    }

                                                    ^^PCI0.LPC0.EC0.EMFG = Zero
                                                    ^^PCI0.LPC0.EC0.CAC1 = Zero
                                                    ^^PCI0.LPC0.EC0.PABD = Zero
                                                }
                                                Else
                                                {
                                                    If ((^^PCI0.LPC0.EC0.SPMO == Zero))
                                                    {
                                                        ^^PCI0.LPC0.EC0.SPMO = Zero
                                                    }
                                                    Else
                                                    {
                                                        ^^PCI0.LPC0.EC0.SPMO = 0x02
                                                    }

                                                    ^^PCI0.LPC0.EC0.CTMD = Zero
                                                    ^^PCI0.LPC0.EC0.CTE0 = Zero
                                                    ^^PCI0.LPC0.FNQT (One, 0x05)
                                                    ^^PCI0.LPC0.EC0.CAC1 = One
                                                    ^^PCI0.LPC0.EC0.EMFG = One
                                                    ^^PCI0.LPC0.EC0.PABD = Zero
                                                }
                                            }

                                            If ((((ToInteger (Arg2) == One) || (ToInteger (Arg2) == 
                                                0x02)) || (ToInteger (Arg2) == 0x03)))
                                            {
                                                ^^PCI0.LPC0.FNQT (Zero, Zero)
                                            }

                                            INSM = Zero
                                            Sleep (0x05)
                                            Notify (GZFD, 0xE7) // Hardware-Specific
                                            Notify (NPCF, 0xC0) // Hardware-Specific
                                            Sleep (0x05)
                                            Notify (^^PCI0.GPP0.PEGP, 0xC0) // Hardware-Specific
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Zero)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x2D))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.SPMO == 0x02))
                                            {
                                                If ((^^PCI0.LPC0.EC0.CAC1 == One))
                                                {
                                                    If ((^^PCI0.LPC0.EC0.EMFG == One))
                                                    {
                                                        Local1 = 0xE0
                                                    }
                                                    Else
                                                    {
                                                        Local1 = 0xFF
                                                    }
                                                }
                                                Else
                                                {
                                                    Local1 = One
                                                }
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.SPMO == Zero))
                                            {
                                                If ((^^PCI0.LPC0.EC0.PABD == One))
                                                {
                                                    Local1 = 0x03
                                                }
                                                ElseIf ((^^PCI0.LPC0.EC0.CAC1 == One))
                                                {
                                                    If ((^^PCI0.LPC0.EC0.EMFG == One))
                                                    {
                                                        Local1 = 0xE0
                                                    }
                                                    Else
                                                    {
                                                        Local1 = 0xFF
                                                    }
                                                }
                                                Else
                                                {
                                                    Local1 = 0x02
                                                }
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.SPMO == One))
                                            {
                                                Local1 = 0x03
                                            }

                                            If ((^^PCI0.LPC0.EC0.CTMD == One))
                                            {
                                                If ((^^PCI0.LPC0.EC0.CTE0 == One))
                                                {
                                                    Local1 = 0xE0
                                                }
                                                Else
                                                {
                                                    Local1 = 0xFF
                                                }
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x2E))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.GSFS == One))
                                            {
                                                Local1 = One
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.GSFS == Zero))
                                            {
                                                Local1 = 0x02
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x2F))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.ACTY () == One))
                                            {
                                                Local1 = One
                                            }
                                            Else
                                            {
                                                Local1 = 0x02
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x30))
                                {
                                    Return (0x64)
                                }

                                If ((Arg1 == 0x31))
                                {
                                    If ((PANT & 0x02))
                                    {
                                        Return (One)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }

                                If ((Arg1 == 0x32))
                                {
                                    If ((PANT & 0x02))
                                    {
                                        If ((M009 (0x90) == One))
                                        {
                                            Return (One)
                                        }
                                        Else
                                        {
                                            Return (Zero)
                                        }
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }

                                If ((Arg1 == 0x33))
                                {
                                    If ((PANT & 0x02))
                                    {
                                        If ((ToInteger (Arg2) == One))
                                        {
                                            WECM (0x7F, One)
                                            M010 (0x90, One)
                                        }
                                        Else
                                        {
                                            WECM (0x7F, Zero)
                                            M010 (0x90, Zero)
                                        }
                                    }
                                    Else
                                    {
                                        WECM (0x7F, Zero)
                                        M010 (0x90, Zero)
                                    }

                                    Return (Zero)
                                }

                                If ((Arg1 == 0x34))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            ^^PCI0.LPC0.EC0.LCON = ToInteger (Arg2)
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Zero)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x35))
                                {
                                    Return (Zero)
                                }

                                If ((Arg1 == 0x36))
                                {
                                    Local0 = Zero
                                    If ((ToInteger (Arg2) == One))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If (((^^PCI0.LPC0.EC0.RS8F == One) || (^^PCI0.LPC0.EC0.COD5 == One)))
                                            {
                                                Local0 = One
                                            }

                                            RDOC = Zero
                                            ^^PCI0.LPC0.EC0.RS8F = Zero
                                            ^^PCI0.LPC0.EC0.COD5 = Zero
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }
                                    }

                                    Return (Local0)
                                }

                                If ((Arg1 == 0x37))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.SPMO == 0x02))
                                            {
                                                Local1 = One
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.SPMO == Zero))
                                            {
                                                Local1 = 0x02
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.SPMO == One))
                                            {
                                                Local1 = 0x03
                                            }

                                            If ((^^PCI0.LPC0.EC0.CTMD == One))
                                            {
                                                If ((^^PCI0.LPC0.EC0.CTE0 == One))
                                                {
                                                    Local1 = 0xE0
                                                }
                                                Else
                                                {
                                                    Local1 = 0xFF
                                                }
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x39))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((^^PCI0.LPC0.EC0.SPMO == Zero))
                                        {
                                            INSM = ToInteger (Arg2)
                                            If ((INSM == Zero))
                                            {
                                                If ((BCTP == One))
                                                {
                                                    BCTP = Zero
                                                    ^^PCI0.LPC0.EC0.NCMD (0x8B, Zero)
                                                    ^^PCI0.LPC0.FNQT (Zero, Zero)
                                                    Notify (NPCF, 0xC0) // Hardware-Specific
                                                }
                                            }
                                            Else
                                            {
                                                If ((INSM > 0x05))
                                                {
                                                    INSM = One
                                                }

                                                BCTP = One
                                                ^^PCI0.LPC0.EC0.NCMD (0x8A, Zero)
                                                ^^PCI0.LPC0.FNQT (Zero, Zero)
                                                Notify (NPCF, 0xC0) // Hardware-Specific
                                            }
                                        }

                                        Return (Zero)
                                    }
                                }

                                If ((Arg1 == 0x3A))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        Local1 = INSM /* \INSM */
                                        Return (Local1)
                                    }
                                }

                                If ((Arg1 == 0x3B))
                                {
                                    Return (One)
                                }

                                If ((Arg1 == 0x3C))
                                {
                                    Name (CCFQ, Buffer (0x04)
                                    {
                                         0x00                                             // .
                                    })
                                    CreateWordField (CCFQ, Zero, CCF1)
                                    CreateWordField (CCFQ, 0x02, CCF2)
                                    Local1 = CMSP /* \CMSP */
                                    Local2 = CMSP /* \CMSP */
                                    If ((COCC == Zero))
                                    {
                                        CCF1 = Local1
                                        CCF2 = Local2
                                    }
                                    ElseIf ((COCC == One))
                                    {
                                        Local1 += 0xC8
                                        CCF1 = Local1
                                        CCF2 = Local2
                                    }
                                    Else
                                    {
                                        CCF1 = Local1
                                        CCF2 = Local2
                                    }

                                    Return (CCFQ) /* \_SB_.GZFD.WMAA.CCFQ */
                                }

                                If ((Arg1 == 0x3D))
                                {
                                    Return (0x06)
                                }

                                If ((Arg1 == 0x3E))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((^^PCI0.LPC0.EC0.ACTY () == One))
                                        {
                                            Local1 = One
                                        }
                                        Else
                                        {
                                            Local1 = Zero
                                        }

                                        Return (Local1)
                                    }
                                }

                                If ((Arg1 == 0x3F))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        Return (0x03)
                                    }
                                }

                                If ((Arg1 == 0x40))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        Return (^^PCI0.LPC0.EC0.REJF (One))
                                    }
                                }

                                If ((Arg1 == 0x41))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        Local0 = ToInteger (Arg2)
                                        ^^PCI0.LPC0.EC0.WEJF (One, Local0)
                                        Local1 = HTPL ()
                                        Return (Local1)
                                    }
                                }

                                If ((Arg1 == 0x42))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        DGDO = ToInteger (Arg2)
                                        HTPL ()
                                    }
                                }

                                If ((Arg1 == 0x43))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        Return (Zero)
                                    }
                                }

                                If ((Arg1 == 0x44))
                                {
                                    Return (ToString (DGPT, Ones))
                                }
                            }

                            Method (WMB2, 3, NotSerialized)
                            {
                                If ((Arg1 == 0x05))
                                {
                                    Name (LFGT, Buffer (0x58)
                                    {
                                         0x00                                             // .
                                    })
                                    CreateDWordField (LFGT, Zero, LFFL)
                                    CreateDWordField (LFGT, 0x04, LFF0)
                                    CreateDWordField (LFGT, 0x08, LFF1)
                                    CreateDWordField (LFGT, 0x0C, LFF2)
                                    CreateDWordField (LFGT, 0x10, LFF3)
                                    CreateDWordField (LFGT, 0x14, LFF4)
                                    CreateDWordField (LFGT, 0x18, LFF5)
                                    CreateDWordField (LFGT, 0x1C, LFF6)
                                    CreateDWordField (LFGT, 0x20, LFF7)
                                    CreateDWordField (LFGT, 0x24, LFF8)
                                    CreateDWordField (LFGT, 0x28, LFF9)
                                    CreateDWordField (LFGT, 0x2C, LFFA)
                                    LFFL = 0x0A
                                    LFF0 = ^^PCI0.LPC0.EC0.F9F0 /* \_SB_.PCI0.LPC0.EC0_.F9F0 */
                                    LFF1 = ^^PCI0.LPC0.EC0.F9F1 /* \_SB_.PCI0.LPC0.EC0_.F9F1 */
                                    LFF2 = ^^PCI0.LPC0.EC0.F9F2 /* \_SB_.PCI0.LPC0.EC0_.F9F2 */
                                    LFF3 = ^^PCI0.LPC0.EC0.F9F3 /* \_SB_.PCI0.LPC0.EC0_.F9F3 */
                                    LFF4 = ^^PCI0.LPC0.EC0.F9F4 /* \_SB_.PCI0.LPC0.EC0_.F9F4 */
                                    LFF5 = ^^PCI0.LPC0.EC0.F9F5 /* \_SB_.PCI0.LPC0.EC0_.F9F5 */
                                    LFF6 = ^^PCI0.LPC0.EC0.F9F6 /* \_SB_.PCI0.LPC0.EC0_.F9F6 */
                                    LFF7 = ^^PCI0.LPC0.EC0.F9F7 /* \_SB_.PCI0.LPC0.EC0_.F9F7 */
                                    LFF8 = ^^PCI0.LPC0.EC0.F9F8 /* \_SB_.PCI0.LPC0.EC0_.F9F8 */
                                    LFF9 = ^^PCI0.LPC0.EC0.F9F9 /* \_SB_.PCI0.LPC0.EC0_.F9F9 */
                                    LFFA = 0x0A
                                    Return (LFGT) /* \_SB_.GZFD.WMB2.LFGT */
                                }

                                If ((Arg1 == 0x06))
                                {
                                    CreateByteField (Arg2, Zero, FSTM)
                                    CreateByteField (Arg2, One, FSID)
                                    CreateDWordField (Arg2, 0x02, FSTL)
                                    CreateByteField (Arg2, 0x06, FSS0)
                                    CreateByteField (Arg2, 0x08, FSS1)
                                    CreateByteField (Arg2, 0x0A, FSS2)
                                    CreateByteField (Arg2, 0x0C, FSS3)
                                    CreateByteField (Arg2, 0x0E, FSS4)
                                    CreateByteField (Arg2, 0x10, FSS5)
                                    CreateByteField (Arg2, 0x12, FSS6)
                                    CreateByteField (Arg2, 0x14, FSS7)
                                    CreateByteField (Arg2, 0x16, FSS8)
                                    CreateByteField (Arg2, 0x18, FSS9)
                                    If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                    {
                                        ^^PCI0.LPC0.EC0.F9F0 = FSS0 /* \_SB_.GZFD.WMB2.FSS0 */
                                        ^^PCI0.LPC0.EC0.F9F1 = FSS1 /* \_SB_.GZFD.WMB2.FSS1 */
                                        ^^PCI0.LPC0.EC0.F9F2 = FSS2 /* \_SB_.GZFD.WMB2.FSS2 */
                                        ^^PCI0.LPC0.EC0.F9F3 = FSS3 /* \_SB_.GZFD.WMB2.FSS3 */
                                        ^^PCI0.LPC0.EC0.F9F4 = FSS4 /* \_SB_.GZFD.WMB2.FSS4 */
                                        ^^PCI0.LPC0.EC0.F9F5 = FSS5 /* \_SB_.GZFD.WMB2.FSS5 */
                                        ^^PCI0.LPC0.EC0.F9F6 = FSS6 /* \_SB_.GZFD.WMB2.FSS6 */
                                        ^^PCI0.LPC0.EC0.F9F7 = FSS7 /* \_SB_.GZFD.WMB2.FSS7 */
                                        ^^PCI0.LPC0.EC0.F9F8 = FSS8 /* \_SB_.GZFD.WMB2.FSS8 */
                                        ^^PCI0.LPC0.EC0.F9F9 = FSS9 /* \_SB_.GZFD.WMB2.FSS9 */
                                        ^^PCI0.LPC0.EC0.NCMD (0x8C, Zero)
                                        Release (^^PCI0.LPC0.EC0.LFCM)
                                    }

                                    Return (Zero)
                                }
                            }

                            Method (WMB3, 3, NotSerialized)
                            {
                                If ((Arg1 == 0x0E))
                                {
                                    CreateDWordField (Arg2, Zero, LTT1)
                                    CreateDWordField (Arg2, 0x04, CNID)
                                    CreateDWordField (Arg2, 0x08, CVA1)
                                    If ((ToInteger (CNID) == 0x414D4401))
                                    {
                                        WECM (0xCC, IOTF (ToInteger (CVA1)))
                                    }
                                    ElseIf ((ToInteger (CNID) == 0x414D4402))
                                    {
                                        WECM (0xCD, IOTF (ToInteger (CVA1)))
                                    }
                                    ElseIf ((ToInteger (CNID) == 0x414D4403))
                                    {
                                        WECM (0xBE, IOT2 (ToInteger (CVA1)))
                                        WECM (0xCE, IOTF (ToInteger (CVA1)))
                                    }

                                    WSMI (0x03)
                                }
                            }

                            Method (WMB5, 3, NotSerialized)
                            {
                                If ((Arg1 == 0x11))
                                {
                                    If ((ToInteger (Arg2) == 0x00080000))
                                    {
                                        Return (0x0101)
                                    }

                                    If ((ToInteger (Arg2) == 0x00070000))
                                    {
                                        Return (0x0001001F)
                                    }

                                    If ((ToInteger (Arg2) == 0x00010000))
                                    {
                                        Return (^^PCI0.LPC0.EC0.REJF (One))
                                    }

                                    If ((ToInteger (Arg2) == 0x00020000))
                                    {
                                        Return (One)
                                    }

                                    If ((ToInteger (Arg2) == 0x00030000))
                                    {
                                        Local0 = Zero
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local0 = ^^PCI0.LPC0.EC0.FLBT /* \_SB_.PCI0.LPC0.EC0_.FLBT */
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Local0)
                                    }

                                    If ((ToInteger (Arg2) == 0x03010001))
                                    {
                                        Local0 = Zero
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local0 = ^^PCI0.LPC0.EC0.EACS /* \_SB_.PCI0.LPC0.EC0_.EACS */
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Local0)
                                    }

                                    If ((ToInteger (Arg2) == 0x03010002))
                                    {
                                        Local0 = Zero
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local0 = ^^PCI0.LPC0.EC0.ETCS /* \_SB_.PCI0.LPC0.EC0_.ETCS */
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Local0)
                                    }

                                    If ((ToInteger (Arg2) == 0x00090000))
                                    {
                                        Return (0x03)
                                    }

                                    If ((ToInteger (Arg2) == 0x02090000))
                                    {
                                        Return (DGID) /* \DGID */
                                    }

                                    If ((ToInteger (Arg2) == 0x020A0000))
                                    {
                                        Local0 = Zero
                                        If ((GTYP == One))
                                        {
                                            Local0 = 0x3C
                                        }
                                        Else
                                        {
                                            Local0 = 0x37
                                        }

                                        Return (Local0)
                                    }

                                    If ((ToInteger (Arg2) == 0x020B0000))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local0 = ^^PCI0.LPC0.EC0.SGCB /* \_SB_.PCI0.LPC0.EC0_.SGCB */
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local0)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x03030000))
                                    {
                                        Local0 = Zero
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If (((^^PCI0.LPC0.EC0.ACTY () == One) || (^^PCI0.LPC0.EC0.ACTY () == 0x04)))
                                            {
                                                Local0 |= ^^PCI0.LPC0.EC0.APTS /* \_SB_.PCI0.LPC0.EC0_.APTS */
                                            }

                                            If ((^^PCI0.LPC0.EC0.ACTY () == 0x02))
                                            {
                                                Local0 |= ^^PCI0.LPC0.EC0.APTS /* \_SB_.PCI0.LPC0.EC0_.APTS */
                                                Local0 |= 0x0100
                                            }

                                            If ((^^PCI0.LPC0.EC0.APTS == 0x03))
                                            {
                                                If ((^^PCI0.LPC0.EC0.ACMO == One))
                                                {
                                                    Local0 |= ^^PCI0.LPC0.EC0.APTS /* \_SB_.PCI0.LPC0.EC0_.APTS */
                                                }
                                                Else
                                                {
                                                    Local0 |= ^^PCI0.LPC0.EC0.APTS /* \_SB_.PCI0.LPC0.EC0_.APTS */
                                                    Local0 |= 0x0100
                                                }
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Local0)
                                    }

                                    If ((ToInteger (Arg2) == 0x03020000)){}
                                    If ((ToInteger (Arg2) == 0x02080000))
                                    {
                                        Name (QPOW, Zero)
                                        Name (BPOW, Zero)
                                        Name (PPOW, Zero)
                                        Name (ATAB, Zero)
                                        Name (P4TP, Zero)
                                        Name (TPP4, Zero)
                                        Name (BAPW, Zero)
                                        If ((GTYP == One))
                                        {
                                            QPOW = 0x5A
                                            BPOW = 0x69
                                            PPOW = 0x82
                                            BAPW = 0x3C
                                        }
                                        Else
                                        {
                                            QPOW = 0x5A
                                            BPOW = 0x69
                                            PPOW = 0x82
                                            BAPW = 0x37
                                        }

                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.TGPP < BAPW))
                                            {
                                                Local1 = (^^PCI0.LPC0.EC0.TGPP + ^^PCI0.LPC0.EC0.CPP4) /* \_SB_.PCI0.LPC0.EC0_.CPP4 */
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.CPP4 >= ^^PCI0.LPC0.EC0.GATP))
                                            {
                                                Local0 = (^^PCI0.LPC0.EC0.TGPP + ^^PCI0.LPC0.EC0.GPAB) /* \_SB_.PCI0.LPC0.EC0_.GPAB */
                                                ATAB = (^^PCI0.LPC0.EC0.GATP - ^^PCI0.LPC0.EC0.GPAB) /* \_SB_.PCI0.LPC0.EC0_.GPAB */
                                                P4TP = (^^PCI0.LPC0.EC0.CPP4 - ^^PCI0.LPC0.EC0.GATP) /* \_SB_.PCI0.LPC0.EC0_.GATP */
                                                Local1 = (Local0 + ATAB) /* \_SB_.GZFD.WMB5.ATAB */
                                                Local1 += P4TP /* \_SB_.GZFD.WMB5.P4TP */
                                            }
                                            Else
                                            {
                                                TPP4 = (^^PCI0.LPC0.EC0.GATP - ^^PCI0.LPC0.EC0.CPP4) /* \_SB_.PCI0.LPC0.EC0_.CPP4 */
                                                Local1 = (^^PCI0.LPC0.EC0.CPP4 + ^^PCI0.LPC0.EC0.TGPP) /* \_SB_.PCI0.LPC0.EC0_.TGPP */
                                                Local1 += TPP4 /* \_SB_.GZFD.WMB5.TPP4 */
                                            }

                                            Local2 = Zero
                                            If ((Local1 <= QPOW))
                                            {
                                                Local2 = One
                                            }
                                            ElseIf (((Local1 <= BPOW) && (Local1 > QPOW)))
                                            {
                                                Local2 = 0x02
                                            }
                                            ElseIf (((Local1 <= PPOW) && (Local1 > BPOW)))
                                            {
                                                Local2 = 0x03
                                            }
                                            Else
                                            {
                                                Local2 = 0x04
                                            }

                                            ^^PCI0.LPC0.EC0.F9FA = Local2
                                            ^^PCI0.LPC0.EC0.NCMD (0x8C, Zero)
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local2)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x04020000))
                                    {
                                        Local0 = Zero
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local0 = ^^PCI0.LPC0.EC0.FNST /* \_SB_.PCI0.LPC0.EC0_.FNST */
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Local0)
                                    }

                                    If ((ToInteger (Arg2) == 0x04030001))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local0 = (^^PCI0.LPC0.EC0.FANS * 0x64)
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Local0)
                                    }

                                    If ((ToInteger (Arg2) == 0x04030002))
                                    {
                                        Local0 = Zero
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local0 = (^^PCI0.LPC0.EC0.FA2S * 0x64)
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Local0)
                                    }

                                    If ((ToInteger (Arg2) == 0x05010000))
                                    {
                                        Local0 = Zero
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local0 = ^^PCI0.LPC0.EC0.CPUS /* \_SB_.PCI0.LPC0.EC0_.CPUS */
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Local0)
                                    }

                                    If ((ToInteger (Arg2) == 0x05040000))
                                    {
                                        Local0 = Zero
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local0 = ^^PCI0.LPC0.EC0.CPUT /* \_SB_.PCI0.LPC0.EC0_.CPUT */
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Local0)
                                    }

                                    If ((ToInteger (Arg2) == 0x05050000))
                                    {
                                        Local0 = Zero
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local0 = ^^PCI0.LPC0.EC0.GPUT /* \_SB_.PCI0.LPC0.EC0_.GPUT */
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Local0)
                                    }

                                    If ((ToInteger (Arg2) == 0x01080100))
                                    {
                                        Return (Zero)
                                    }

                                    If ((ToInteger (Arg2) == 0x01080200))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.ACTY () == One))
                                            {
                                                If ((SCOC == One))
                                                {
                                                    If ((COCC == One))
                                                    {
                                                        Local0 = 0x11
                                                    }
                                                    Else
                                                    {
                                                        Local0 = 0x10
                                                    }
                                                }
                                                Else
                                                {
                                                    Local0 = Zero
                                                }
                                            }
                                            Else
                                            {
                                                Local0 = 0x10
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local0)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x01080300))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.ACTY () == One))
                                            {
                                                If ((SCOC == One))
                                                {
                                                    If ((COCC == One))
                                                    {
                                                        Local0 = 0x11
                                                    }
                                                    Else
                                                    {
                                                        Local0 = 0x10
                                                    }
                                                }
                                                Else
                                                {
                                                    Local0 = Zero
                                                }
                                            }
                                            Else
                                            {
                                                Local0 = Zero
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local0)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x0108FF00))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.ACTY () == One))
                                            {
                                                If ((SCOC == One))
                                                {
                                                    If ((COCC == One))
                                                    {
                                                        Local0 = 0x12
                                                    }
                                                    Else
                                                    {
                                                        Local0 = 0x10
                                                    }
                                                }
                                                Else
                                                {
                                                    Local0 = Zero
                                                }
                                            }
                                            Else
                                            {
                                                Local0 = Zero
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local0)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x01010000))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.CPP1 == Zero))
                                            {
                                                Local0 = 0x36
                                            }
                                            Else
                                            {
                                                Local0 = ^^PCI0.LPC0.EC0.CPP1 /* \_SB_.PCI0.LPC0.EC0_.CPP1 */
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local0)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x01020000))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.CPP2 == Zero))
                                            {
                                                Local0 = 0x36
                                            }
                                            Else
                                            {
                                                Local0 = ^^PCI0.LPC0.EC0.CPP2 /* \_SB_.PCI0.LPC0.EC0_.CPP2 */
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local0)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x01030000))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.CPP3 == Zero))
                                            {
                                                Local0 = 0x41
                                            }
                                            Else
                                            {
                                                Local0 = ^^PCI0.LPC0.EC0.CPP3 /* \_SB_.PCI0.LPC0.EC0_.CPP3 */
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local0)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x01040000))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.CGTC == Zero))
                                            {
                                                Local0 = 0x64
                                            }
                                            Else
                                            {
                                                Local0 = ^^PCI0.LPC0.EC0.CGTC /* \_SB_.PCI0.LPC0.EC0_.CGTC */
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local0)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x01060000))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.CPP4 == Zero))
                                            {
                                                Local0 = 0x2D
                                            }
                                            Else
                                            {
                                                Local0 = ^^PCI0.LPC0.EC0.CPP4 /* \_SB_.PCI0.LPC0.EC0_.CPP4 */
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local0)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x02010000))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.CPP1 == Zero))
                                            {
                                                If ((GTYP == One))
                                                {
                                                    Local0 = 0x0A
                                                }
                                                Else
                                                {
                                                    Local0 = 0x0F
                                                }
                                            }
                                            Else
                                            {
                                                Local0 = ^^PCI0.LPC0.EC0.GPAB /* \_SB_.PCI0.LPC0.EC0_.GPAB */
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local0)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x02020000))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.TGPP == Zero))
                                            {
                                                If ((GTYP == One))
                                                {
                                                    Local0 = 0x3C
                                                }
                                                Else
                                                {
                                                    Local0 = 0x37
                                                }
                                            }
                                            Else
                                            {
                                                Local0 = ^^PCI0.LPC0.EC0.TGPP /* \_SB_.PCI0.LPC0.EC0_.TGPP */
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local0)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x02030000))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.GPTH == Zero))
                                            {
                                                Local0 = GGTC /* \GGTC */
                                            }
                                            Else
                                            {
                                                Local0 = ^^PCI0.LPC0.EC0.GPTH /* \_SB_.PCI0.LPC0.EC0_.GPTH */
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local0)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x02040000))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.GATP == Zero))
                                            {
                                                If ((GTYP == One))
                                                {
                                                    Local0 = 0x2D
                                                }
                                                Else
                                                {
                                                    Local0 = 0x32
                                                }
                                            }
                                            Else
                                            {
                                                Local0 = ^^PCI0.LPC0.EC0.GATP /* \_SB_.PCI0.LPC0.EC0_.GATP */
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local0)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x02050100))
                                    {
                                        Return (Zero)
                                    }

                                    If ((ToInteger (Arg2) == 0x02050200))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.ACTY () == One))
                                            {
                                                Return (BGPS) /* \BGPS */
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x02050300))
                                    {
                                        If ((^^PCI0.LPC0.EC0.ACTY () == One))
                                        {
                                            Return (PGPS) /* \PGPS */
                                        }
                                        Else
                                        {
                                            Return (Zero)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x0205FF00))
                                    {
                                        If ((^^PCI0.LPC0.EC0.ACTY () == One))
                                        {
                                            Return (MGPS) /* \MGPS */
                                        }
                                        Else
                                        {
                                            Return (Zero)
                                        }
                                    }

                                    If ((ToInteger (Arg2) == 0x000C0000))
                                    {
                                        Return (One)
                                    }

                                    If ((ToInteger (Arg2) == 0x000F0000))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local0 = ^^PCI0.LPC0.EC0.REJF (0x03)
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Local0)
                                    }
                                }

                                If ((Arg1 == 0x12))
                                {
                                    CreateDWordField (Arg2, Zero, SFV0)
                                    CreateDWordField (Arg2, 0x04, SFV1)
                                    If ((SFV0 == 0x00010000))
                                    {
                                        If (^^PCI0.LPC0.EC0.ECAV)
                                        {
                                            Local0 = ToInteger (SFV1)
                                            ^^PCI0.LPC0.EC0.WEJF (One, Local0)
                                            Local1 = HTPL ()
                                            Return (Local1)
                                        }
                                    }

                                    If ((SFV0 == 0x00020000))
                                    {
                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x00030000))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((ToInteger (SFV1) == One))
                                            {
                                                WSMI (0x05)
                                                ^^PCI0.LPC0.EC0.FLBT = One
                                            }
                                            Else
                                            {
                                                WSMI (0x06)
                                                ^^PCI0.LPC0.EC0.FLBT = Zero
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x03010001))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((ToInteger (SFV1) == One))
                                            {
                                                WSMI (0x07)
                                                ^^PCI0.LPC0.EC0.EACS = One
                                            }
                                            Else
                                            {
                                                WSMI (0x08)
                                                ^^PCI0.LPC0.EC0.EACS = Zero
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x03010002))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((ToInteger (SFV1) == One))
                                            {
                                                WSMI (0x09)
                                                ^^PCI0.LPC0.EC0.ETCS = One
                                            }
                                            Else
                                            {
                                                WSMI (0x0A)
                                                ^^PCI0.LPC0.EC0.ETCS = Zero
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x000A0000))
                                    {
                                        If ((ToInteger (SFV1) == One))
                                        {
                                            LSKD = 0x30
                                            Notify (WMIU, 0xD0) // Hardware-Specific
                                        }

                                        If ((ToInteger (SFV1) == 0x02))
                                        {
                                            LSKD = 0x31
                                            Notify (WMIU, 0xD0) // Hardware-Specific
                                        }

                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x02070000))
                                    {
                                        If (^^PCI0.LPC0.EC0.ECAV)
                                        {
                                            DGDO = ToInteger (SFV1)
                                            HTPL ()
                                        }

                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x03020000))
                                    {
                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x04020000))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((SFV1 == One))
                                            {
                                                ^^PCI0.LPC0.EC0.FNST = One
                                            }
                                            Else
                                            {
                                                ^^PCI0.LPC0.EC0.FNST = Zero
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x04030001))
                                    {
                                        Divide (SFV1, 0x64, Local0, Local1)
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            ^^PCI0.LPC0.EC0.FANS = Local1
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x04030002))
                                    {
                                        Divide (SFV1, 0x64, Local0, Local1)
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            ^^PCI0.LPC0.EC0.FA2S = Local1
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x01080100))
                                    {
                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x01080200))
                                    {
                                        If ((ToInteger (SFV1) == Zero))
                                        {
                                            WSMI (0x02)
                                        }
                                        Else
                                        {
                                            WSMI (One)
                                        }

                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x01080300))
                                    {
                                        If ((ToInteger (SFV1) == Zero))
                                        {
                                            WSMI (0x02)
                                        }
                                        Else
                                        {
                                            WSMI (One)
                                        }

                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x0108FF00))
                                    {
                                        If ((ToInteger (SFV1) == Zero))
                                        {
                                            WSMI (0x02)
                                        }
                                        Else
                                        {
                                            WSMI (One)
                                        }

                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x01010000))
                                    {
                                        If ((^^PCI0.LPC0.EC0.CTMD == Zero))
                                        {
                                            Return (Zero)
                                        }
                                        ElseIf ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            ^^PCI0.LPC0.EC0.CPP1 = ToInteger (SFV1)
                                            Local0 = ^^PCI0.LPC0.EC0.CPP1 /* \_SB_.PCI0.LPC0.EC0_.CPP1 */
                                            Local0 *= 0x03E8
                                            SSZE = 0x07
                                            SMUF = 0x07
                                            SMUD = Local0
                                            ALIB (0x0C, XX11)
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }
                                    }

                                    If ((SFV0 == 0x01020000))
                                    {
                                        If ((^^PCI0.LPC0.EC0.CTMD == Zero))
                                        {
                                            Return (Zero)
                                        }
                                        ElseIf ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            ^^PCI0.LPC0.EC0.CPP2 = ToInteger (SFV1)
                                            If ((DBFS == Zero))
                                            {
                                                Local0 = ^^PCI0.LPC0.EC0.CPP2 /* \_SB_.PCI0.LPC0.EC0_.CPP2 */
                                                Local0 *= 0x03E8
                                                SSZE = 0x07
                                                SMUF = 0x05
                                                SMUD = Local0
                                                ALIB (0x0C, XX11)
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }
                                    }

                                    If ((SFV0 == 0x01030000))
                                    {
                                        If ((^^PCI0.LPC0.EC0.CTMD == Zero))
                                        {
                                            Return (Zero)
                                        }
                                        ElseIf ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            ^^PCI0.LPC0.EC0.CPP3 = ToInteger (SFV1)
                                            Local1 = ^^PCI0.LPC0.EC0.CPP3 /* \_SB_.PCI0.LPC0.EC0_.CPP3 */
                                            Local1 *= 0x03E8
                                            SSZE = 0x07
                                            SMUF = 0x06
                                            SMUD = Local1
                                            ALIB (0x0C, XX11)
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }
                                    }

                                    If ((SFV0 == 0x01040000))
                                    {
                                        If ((^^PCI0.LPC0.EC0.CTMD == Zero))
                                        {
                                            Return (Zero)
                                        }
                                        ElseIf ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            ^^PCI0.LPC0.EC0.CGTC = ToInteger (SFV1)
                                            SSZE = 0x07
                                            SMUF = 0x03
                                            SMUD = ^^PCI0.LPC0.EC0.CGTC /* \_SB_.PCI0.LPC0.EC0_.CGTC */
                                            ALIB (0x0C, XX11)
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }
                                    }

                                    If ((SFV0 == 0x01060000))
                                    {
                                        If ((^^PCI0.LPC0.EC0.CTMD == Zero))
                                        {
                                            Return (Zero)
                                        }
                                        ElseIf ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            ^^PCI0.LPC0.EC0.CPP4 = ToInteger (SFV1)
                                            If ((DBFS == One))
                                            {
                                                Local0 = ^^PCI0.LPC0.EC0.CPP4 /* \_SB_.PCI0.LPC0.EC0_.CPP4 */
                                                Local0 *= 0x03E8
                                                SSZE = 0x07
                                                SMUF = 0x05
                                                SMUD = Local0
                                                ALIB (0x0C, XX11)
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }
                                    }

                                    If ((SFV0 == 0x02050100))
                                    {
                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x02050200))
                                    {
                                        If ((ToInteger (SFV1) == Zero))
                                        {
                                            BGPS = 0x10
                                        }
                                        Else
                                        {
                                            BGPS = 0x11
                                        }

                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x02050300))
                                    {
                                        If ((ToInteger (SFV1) == Zero))
                                        {
                                            PGPS = 0x10
                                        }
                                        Else
                                        {
                                            PGPS = 0x11
                                        }

                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x0205FF00))
                                    {
                                        If ((ToInteger (SFV1) == Zero))
                                        {
                                            MGPS = 0x10
                                        }
                                        Else
                                        {
                                            MGPS = 0x12
                                        }

                                        Return (Zero)
                                    }

                                    If ((SFV0 == 0x02010000))
                                    {
                                        If ((^^PCI0.LPC0.EC0.CTMD == Zero))
                                        {
                                            Return (Zero)
                                        }
                                        Else
                                        {
                                            Local0 = ToInteger (SFV1)
                                            If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                            {
                                                ^^PCI0.LPC0.EC0.GPUF = One
                                                ^^PCI0.LPC0.EC0.GPAB = Local0
                                                Release (^^PCI0.LPC0.EC0.LFCM)
                                            }

                                            Notify (NPCF, 0xC0) // Hardware-Specific
                                            Return (Zero)
                                        }
                                    }

                                    If ((SFV0 == 0x020B0000))
                                    {
                                        If ((^^PCI0.LPC0.EC0.CTMD == Zero))
                                        {
                                            Return (Zero)
                                        }
                                        Else
                                        {
                                            Local0 = ToInteger (SFV1)
                                            If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                            {
                                                ^^PCI0.LPC0.EC0.SGCB = Local0
                                                Release (^^PCI0.LPC0.EC0.LFCM)
                                            }

                                            Notify (NPCF, 0xC0) // Hardware-Specific
                                            Return (Zero)
                                        }
                                    }

                                    If ((SFV0 == 0x02020000))
                                    {
                                        If ((^^PCI0.LPC0.EC0.CTMD == Zero))
                                        {
                                            Return (Zero)
                                        }
                                        Else
                                        {
                                            Local0 = ToInteger (SFV1)
                                            If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                            {
                                                ^^PCI0.LPC0.EC0.TGPP = Local0
                                                Release (^^PCI0.LPC0.EC0.LFCM)
                                            }

                                            Notify (NPCF, 0xC0) // Hardware-Specific
                                            Return (Zero)
                                        }
                                    }

                                    If ((SFV0 == 0x02030000))
                                    {
                                        If ((^^PCI0.LPC0.EC0.CTMD == Zero))
                                        {
                                            Return (Zero)
                                        }
                                        Else
                                        {
                                            Local0 = ToInteger (SFV1)
                                            If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                            {
                                                ^^PCI0.LPC0.EC0.GPTH = Local0
                                                Release (^^PCI0.LPC0.EC0.LFCM)
                                            }

                                            Notify (^^PCI0.GPP0.PEGP, 0xC0) // Hardware-Specific
                                            Return (Zero)
                                        }
                                    }

                                    If ((SFV0 == 0x02040000))
                                    {
                                        If ((^^PCI0.LPC0.EC0.CTMD == Zero))
                                        {
                                            Return (Zero)
                                        }
                                        Else
                                        {
                                            Local0 = ToInteger (SFV1)
                                            If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                            {
                                                ^^PCI0.LPC0.EC0.GATP = Local0
                                                Release (^^PCI0.LPC0.EC0.LFCM)
                                            }

                                            Notify (NPCF, 0xC0) // Hardware-Specific
                                            Return (Zero)
                                        }
                                    }
                                }
                            }

                            Method (WMBA, 3, NotSerialized)
                            {
                                If ((Arg1 == One))
                                {
                                    Name (GLCS, Buffer (0x02)
                                    {
                                         0x00                                             // .
                                    })
                                    CreateByteField (GLCS, Zero, LCST)
                                    CreateByteField (GLCS, One, LCBL)
                                    If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                    {
                                        If ((ToInteger (Arg2) == Zero))
                                        {
                                            LCST = Zero
                                            Local0 = Zero
                                            If ((^^PCI0.LPC0.EC0.KBLT == Zero))
                                            {
                                                Local0 = ^^PCI0.LPC0.EC0.GECF (0x8D, 0x04)
                                                Local0 += One
                                                LCBL = Local0
                                            }
                                            Else
                                            {
                                                LCBL = Zero
                                            }
                                        }

                                        If ((ToInteger (Arg2) == 0x03))
                                        {
                                            Local0 = Zero
                                            Local0 = ^^PCI0.LPC0.EC0.GECF (0x8D, One)
                                            If ((Local0 == One))
                                            {
                                                LCST = One
                                            }
                                            Else
                                            {
                                                LCST = Zero
                                            }

                                            LCBL = Zero
                                        }

                                        If ((ToInteger (Arg2) == 0x04))
                                        {
                                            If ((^^PCI0.LPC0.EC0.SPMO == Zero))
                                            {
                                                LCST = One
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.SPMO == One))
                                            {
                                                LCST = 0x02
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.SPMO == 0x02))
                                            {
                                                LCST = Zero
                                            }

                                            If ((^^PCI0.LPC0.EC0.CTMD == One))
                                            {
                                                LCST = 0x03
                                            }

                                            LCBL = Zero
                                        }

                                        Release (^^PCI0.LPC0.EC0.LFCM)
                                    }

                                    Return (GLCS) /* \_SB_.GZFD.WMBA.GLCS */
                                }

                                If ((Arg1 == 0x02))
                                {
                                    CreateByteField (Arg2, Zero, SLID)
                                    CreateByteField (Arg2, One, SCST)
                                    CreateByteField (Arg2, 0x02, SCBL)
                                    If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                    {
                                        If ((SLID == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.KBLT == Zero))
                                            {
                                                If ((SCBL == One))
                                                {
                                                    ^^PCI0.LPC0.EC0.NCMD (0x8D, 0x05)
                                                }
                                                ElseIf ((SCBL == 0x02))
                                                {
                                                    ^^PCI0.LPC0.EC0.NCMD (0x8D, 0x06)
                                                }
                                                ElseIf ((SCBL == 0x03))
                                                {
                                                    ^^PCI0.LPC0.EC0.NCMD (0x8D, 0x07)
                                                }
                                            }
                                        }

                                        If ((SLID == 0x03))
                                        {
                                            If ((SCST == One))
                                            {
                                                ^^PCI0.LPC0.EC0.NCMD (0x8D, 0x02)
                                            }
                                            Else
                                            {
                                                ^^PCI0.LPC0.EC0.NCMD (0x8D, 0x03)
                                            }
                                        }

                                        Release (^^PCI0.LPC0.EC0.LFCM)
                                    }

                                    Return (Zero)
                                }
                            }

                            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
                            {
                                If ((Arg0 == 0xD1))
                                {
                                    Return (Zero)
                                }

                                If ((Arg0 == 0xE2))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local2 = Zero
                                            If (((^^PCI0.LPC0.EC0.GDST & 0x02) == 0x02))
                                            {
                                                Local2 |= One
                                            }

                                            If (((^^PCI0.LPC0.EC0.GDST & 0x04) == 0x04))
                                            {
                                                Local2 |= 0x02
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local2)
                                        }
                                    }
                                }

                                Name (FANQ, Package (0x02)
                                {
                                    One, 
                                    0x06
                                })
                                Name (FANB, Package (0x02)
                                {
                                    0x02, 
                                    0x06
                                })
                                Name (FANP, Package (0x02)
                                {
                                    0x03, 
                                    0x06
                                })
                                Name (FANC, Package (0x02)
                                {
                                    0xFF, 
                                    0x06
                                })
                                Name (FAE0, Package (0x02)
                                {
                                    0xE0, 
                                    0x06
                                })
                                If ((Arg0 == 0xE3))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.SPMO == 0x02))
                                            {
                                                Return (FANQ) /* \_SB_.GZFD._WED.FANQ */
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.SPMO == Zero))
                                            {
                                                Return (FANB) /* \_SB_.GZFD._WED.FANB */
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.SPMO == One))
                                            {
                                                Return (FANP) /* \_SB_.GZFD._WED.FANP */
                                            }

                                            If ((^^PCI0.LPC0.EC0.CTMD == One))
                                            {
                                                If ((^^PCI0.LPC0.EC0.CTE0 == One))
                                                {
                                                    Return (FAE0) /* \_SB_.GZFD._WED.FAE0 */
                                                }
                                                Else
                                                {
                                                    Return (FANC) /* \_SB_.GZFD._WED.FANC */
                                                }
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }
                                    }
                                }

                                If ((Arg0 == 0xE4))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local1 = Zero
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg0 == 0xE5))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.ACTY () == One))
                                            {
                                                Local1 = One
                                            }
                                            Else
                                            {
                                                Local1 = 0x02
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg0 == 0xE6))
                                {
                                    Return (One)
                                }

                                If ((Arg0 == 0xE7))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.SPMO == 0x02))
                                            {
                                                Local1 = One
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.SPMO == Zero))
                                            {
                                                Local1 = 0x02
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.SPMO == One))
                                            {
                                                Local1 = 0x03
                                            }

                                            If ((^^PCI0.LPC0.EC0.CTMD == One))
                                            {
                                                Local1 = 0xFF
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg0 == 0xE8))
                                {
                                    Local1 = 0x03
                                    If (((LSKD == 0x13) || (LSKD == 0x14)))
                                    {
                                        Local1 = Zero
                                    }
                                    ElseIf (((LSKD == 0x15) || (LSKD == 0x16)))
                                    {
                                        Local1 = One
                                    }
                                    ElseIf ((((LSKD == 0x17) || (LSKD == 0x18)) || ((
                                        LSKD == 0x19) || (LSKD == 0x25))))
                                    {
                                        Local1 = 0x02
                                    }

                                    Return (Local1)
                                }

                                If ((Arg0 == 0xE9))
                                {
                                    Local0 = Zero
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If (((^^PCI0.LPC0.EC0.ACTY () == One) || (^^PCI0.LPC0.EC0.ACTY () == 0x04)))
                                            {
                                                Local0 |= ^^PCI0.LPC0.EC0.APTS /* \_SB_.PCI0.LPC0.EC0_.APTS */
                                            }

                                            If ((^^PCI0.LPC0.EC0.ACTY () == 0x02))
                                            {
                                                Local0 |= ^^PCI0.LPC0.EC0.APTS /* \_SB_.PCI0.LPC0.EC0_.APTS */
                                                Local0 |= 0x0100
                                            }

                                            If ((^^PCI0.LPC0.EC0.APTS == 0x03))
                                            {
                                                If ((^^PCI0.LPC0.EC0.ACMO == One))
                                                {
                                                    Local0 |= ^^PCI0.LPC0.EC0.APTS /* \_SB_.PCI0.LPC0.EC0_.APTS */
                                                }
                                                Else
                                                {
                                                    Local0 |= ^^PCI0.LPC0.EC0.APTS /* \_SB_.PCI0.LPC0.EC0_.APTS */
                                                    Local0 |= 0x0100
                                                }
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }
                                    }

                                    Return (Local0)
                                }

                                If ((Arg0 == 0xEA))
                                {
                                    Return (Zero)
                                }

                                If ((Arg0 == 0xEB))
                                {
                                    Return (Zero)
                                }
                            }

                            Name (WQDD, Buffer (0x4C5A)
                            {
                                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                                /* 0008 */  0x4A, 0x4C, 0x00, 0x00, 0xC2, 0x08, 0x02, 0x00,  // JL......
                                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                                /* 0018 */  0x98, 0xA7, 0xBC, 0x01, 0x01, 0x08, 0x09, 0x42,  // .......B
                                /* 0020 */  0xD8, 0x12, 0x84, 0x84, 0x58, 0xA0, 0x10, 0x81,  // ....X...
                                /* 0028 */  0xE2, 0x10, 0x29, 0xBA, 0x04, 0x18, 0x8C, 0x06,  // ..).....
                                /* 0030 */  0x10, 0xC9, 0x81, 0x90, 0x0B, 0x26, 0x26, 0x40,  // .....&&@
                                /* 0038 */  0x04, 0x84, 0xBC, 0x0A, 0xB0, 0x29, 0xC0, 0x24,  // .....).$
                                /* 0040 */  0x88, 0xFA, 0xF7, 0x87, 0x28, 0x09, 0x0E, 0x25,  // ....(..%
                                /* 0048 */  0x04, 0x42, 0x12, 0x05, 0x98, 0x17, 0xA0, 0x5B,  // .B.....[
                                /* 0050 */  0x80, 0x61, 0x01, 0xB6, 0x05, 0x98, 0x16, 0xE0,  // .a......
                                /* 0058 */  0x18, 0x92, 0x4A, 0x03, 0xA7, 0x04, 0x96, 0x02,  // ..J.....
                                /* 0060 */  0x21, 0xA1, 0x02, 0x94, 0x0B, 0xF0, 0x2D, 0x40,  // !.....-@
                                /* 0068 */  0x3B, 0xA2, 0x24, 0x0B, 0xB0, 0x0C, 0x23, 0x02,  // ;.$...#.
                                /* 0070 */  0x8F, 0x22, 0xB2, 0xD1, 0x38, 0x34, 0x76, 0x18,  // ."..84v.
                                /* 0078 */  0x96, 0x09, 0xA6, 0x41, 0x1C, 0x46, 0xD9, 0xC8,  // ...A.F..
                                /* 0080 */  0x22, 0xF0, 0x84, 0x3A, 0x15, 0x20, 0x57, 0x80,  // "..:. W.
                                /* 0088 */  0x30, 0x01, 0xE2, 0x51, 0x85, 0xD1, 0x1C, 0x14,  // 0..Q....
                                /* 0090 */  0x09, 0x00, 0x8D, 0x12, 0x33, 0x26, 0x02, 0xDB,  // ....3&..
                                /* 0098 */  0x39, 0xB6, 0x46, 0x71, 0x1A, 0x85, 0x0B, 0x90,  // 9.Fq....
                                /* 00A0 */  0x8E, 0xA1, 0x11, 0x1C, 0x57, 0x30, 0xA6, 0x19,  // ....W0..
                                /* 00A8 */  0x47, 0x30, 0x21, 0x62, 0x71, 0x41, 0x18, 0x82,  // G0!bqA..
                                /* 00B0 */  0x8A, 0xD1, 0xE3, 0xF8, 0x08, 0x60, 0x94, 0x53,  // .....`.S
                                /* 00B8 */  0x89, 0x16, 0x3F, 0x60, 0x94, 0xA8, 0xC6, 0x60,  // ..?`...`
                                /* 00C0 */  0x38, 0xD1, 0x82, 0x45, 0xB3, 0x67, 0x14, 0x01,  // 8..E.g..
                                /* 00C8 */  0x19, 0x2C, 0x6E, 0xF4, 0x43, 0x34, 0x41, 0xB0,  // .,n.C4A.
                                /* 00D0 */  0x03, 0xC2, 0xC8, 0x80, 0x10, 0x64, 0xEB, 0x23,  // .....d.#
                                /* 00D8 */  0x25, 0x04, 0x76, 0x3F, 0x32, 0x39, 0x13, 0x60,  // %.v?29.`
                                /* 00E0 */  0x50, 0x80, 0x35, 0x01, 0xDE, 0x04, 0x38, 0x9C,  // P.5...8.
                                /* 00E8 */  0x90, 0x60, 0xDA, 0x12, 0xA0, 0x10, 0x41, 0x30,  // .`....A0
                                /* 00F0 */  0xB5, 0xA1, 0x68, 0x84, 0x31, 0xC2, 0xC5, 0x89,  // ..h.1...
                                /* 00F8 */  0x12, 0x33, 0x62, 0x63, 0x80, 0x42, 0x89, 0x18,  // .3bc.B..
                                /* 0100 */  0xA4, 0x46, 0x08, 0x01, 0x1B, 0x21, 0x58, 0xC4,  // .F...!X.
                                /* 0108 */  0xE2, 0x20, 0x35, 0xD6, 0xF6, 0x07, 0x41, 0xC4,  // . 5...A.
                                /* 0110 */  0x3A, 0x38, 0x17, 0xB0, 0x08, 0xA3, 0x41, 0x9D,  // :8....A.
                                /* 0118 */  0x05, 0x12, 0x3C, 0x1B, 0xF8, 0x5C, 0x70, 0x5A,  // ..<..\pZ
                                /* 0120 */  0xA7, 0xE7, 0x29, 0x06, 0x39, 0xDF, 0xD3, 0xAA,  // ..).9...
                                /* 0128 */  0x73, 0x94, 0x94, 0xC0, 0x52, 0x21, 0xF4, 0xFF,  // s...R!..
                                /* 0130 */  0x57, 0x70, 0x4A, 0x80, 0xE2, 0x1A, 0x50, 0xD7,  // WpJ...P.
                                /* 0138 */  0x83, 0x87, 0x03, 0x36, 0x92, 0xE7, 0x01, 0xEC,  // ...6....
                                /* 0140 */  0x7C, 0x4E, 0xE2, 0x61, 0x20, 0x7A, 0xB3, 0x07,  // |N.a z..
                                /* 0148 */  0x03, 0x59, 0x04, 0xD2, 0x38, 0x7C, 0x0A, 0xF0,  // .Y..8|..
                                /* 0150 */  0x3C, 0x4E, 0x34, 0x81, 0x8F, 0x04, 0xC7, 0x80,  // <N4.....
                                /* 0158 */  0x19, 0x91, 0xA1, 0x3D, 0xB5, 0xD3, 0x79, 0x0E,  // ...=..y.
                                /* 0160 */  0xF0, 0x19, 0xE1, 0x70, 0xD8, 0xF8, 0x9E, 0x25,  // ...p...%
                                /* 0168 */  0xD8, 0x38, 0xE0, 0x2B, 0xBE, 0x03, 0x08, 0xE1,  // .8.+....
                                /* 0170 */  0x4D, 0xC1, 0xF3, 0x33, 0xC1, 0xE0, 0x03, 0x45,  // M..3...E
                                /* 0178 */  0x1F, 0x13, 0x7C, 0x46, 0x78, 0x73, 0xF0, 0x34,  // ..|Fxs.4
                                /* 0180 */  0x3D, 0xA5, 0x08, 0xEF, 0x12, 0x6C, 0x26, 0x8E,  // =....l&.
                                /* 0188 */  0x08, 0xA1, 0xEF, 0x85, 0x45, 0x41, 0x68, 0xDF,  // ....EAh.
                                /* 0190 */  0x3A, 0x4C, 0x20, 0xCE, 0x11, 0xEC, 0x14, 0x10,  // :L .....
                                /* 0198 */  0xF4, 0xA8, 0x3D, 0x98, 0x97, 0x02, 0x8F, 0xC9,  // ..=.....
                                /* 01A0 */  0xE7, 0x83, 0xC3, 0xC3, 0x1C, 0x0E, 0x3C, 0x8B,  // ......<.
                                /* 01A8 */  0xB3, 0xF1, 0xE1, 0x80, 0x0D, 0xD9, 0xC8, 0x0F,  // ........
                                /* 01B0 */  0x11, 0x60, 0x19, 0x14, 0x76, 0x16, 0x27, 0x85,  // .`..v.'.
                                /* 01B8 */  0x39, 0x03, 0x80, 0x31, 0xEE, 0x60, 0xD1, 0xC3,  // 9..1.`..
                                /* 01C0 */  0xF2, 0x45, 0x02, 0x43, 0x30, 0xDE, 0x48, 0x41,  // .E.C0.HA
                                /* 01C8 */  0x75, 0x54, 0xF0, 0x48, 0xE1, 0xFC, 0xFF, 0x47,  // uT.H...G
                                /* 01D0 */  0x8A, 0x93, 0x37, 0x52, 0xD0, 0x40, 0x3D, 0x63,  // ..7R.@=c
                                /* 01D8 */  0x3C, 0x17, 0xBC, 0x6B, 0xE0, 0x8E, 0x0E, 0x60,  // <..k...`
                                /* 01E0 */  0x05, 0xC6, 0x0D, 0xD4, 0x7E, 0x05, 0x20, 0x04,  // ....~. .
                                /* 01E8 */  0x7F, 0x4F, 0x79, 0x78, 0x78, 0x48, 0x89, 0xF0,  // .OyxxH..
                                /* 01F0 */  0xA8, 0x62, 0xF4, 0x87, 0x8B, 0x3E, 0x05, 0x68,  // .b...>.h
                                /* 01F8 */  0x85, 0x10, 0xDA, 0x41, 0x84, 0x39, 0x88, 0x48,  // ...A.9.H
                                /* 0200 */  0xB1, 0x22, 0x84, 0x79, 0x2E, 0x09, 0x67, 0xA0,  // .".y..g.
                                /* 0208 */  0x60, 0xE1, 0x4E, 0x24, 0x46, 0x28, 0x43, 0xBF,  // `.N$F(C.
                                /* 0210 */  0x64, 0x98, 0xA0, 0xC8, 0x21, 0xA2, 0xC7, 0xC1,  // d...!...
                                /* 0218 */  0x81, 0x4F, 0xE3, 0xA8, 0x82, 0x07, 0x8D, 0x1C,  // .O......
                                /* 0220 */  0xE5, 0x54, 0x0E, 0xCB, 0x77, 0x03, 0x23, 0x1C,  // .T..w.#.
                                /* 0228 */  0xD7, 0x41, 0x9D, 0xA2, 0x6F, 0x2B, 0x07, 0x7D,  // .A..o+.}
                                /* 0230 */  0x9C, 0x2F, 0x13, 0x81, 0x9E, 0x39, 0x38, 0x81,  // ./...98.
                                /* 0238 */  0x43, 0xAE, 0x9E, 0xC6, 0x78, 0x3A, 0x28, 0x16,  // C...x:(.
                                /* 0240 */  0x0C, 0xEA, 0xD0, 0x03, 0xB8, 0x3A, 0x20, 0x3C,  // .....: <
                                /* 0248 */  0x27, 0xC0, 0xFA, 0xFF, 0x1F, 0x7A, 0xC0, 0x35,  // '....z.5
                                /* 0250 */  0xF9, 0x23, 0x6A, 0x15, 0x44, 0x97, 0x81, 0x28,  // .#j.D..(
                                /* 0258 */  0x31, 0x62, 0x9F, 0x4C, 0xFC, 0xF7, 0x0C, 0x76,  // 1b.L...v
                                /* 0260 */  0xE6, 0x31, 0xCC, 0xA3, 0x0F, 0xE6, 0xC0, 0x03,  // .1......
                                /* 0268 */  0xFF, 0x9E, 0xF3, 0x8A, 0xF3, 0x90, 0xF3, 0x96,  // ........
                                /* 0270 */  0x73, 0x08, 0x6F, 0x38, 0x86, 0x78, 0xD1, 0x79,  // s.o8.x.y
                                /* 0278 */  0x28, 0xF0, 0x78, 0x42, 0x3C, 0xF0, 0x58, 0x19,  // (.xB<.X.
                                /* 0280 */  0x8A, 0x20, 0x1E, 0x78, 0x8C, 0xF1, 0xB4, 0x63,  // . .x...c
                                /* 0288 */  0x94, 0x10, 0xAF, 0x3B, 0xBE, 0xED, 0x84, 0x30,  // ...;...0
                                /* 0290 */  0xD4, 0x03, 0x4C, 0xF8, 0x13, 0x08, 0xE9, 0x03,  // ..L.....
                                /* 0298 */  0x0F, 0x13, 0xA4, 0x02, 0xA2, 0x0D, 0x10, 0x45,  // .......E
                                /* 02A0 */  0x3A, 0xF0, 0x80, 0x6E, 0x68, 0x3E, 0x7E, 0xF8,  // :..nh>~.
                                /* 02A8 */  0xC0, 0x03, 0xF7, 0xF4, 0x01, 0xFF, 0xB8, 0x01,  // ........
                                /* 02B0 */  0x3E, 0xF9, 0x07, 0x1F, 0x50, 0x88, 0x3D, 0x9C,  // >...P.=.
                                /* 02B8 */  0x80, 0xE6, 0x00, 0x04, 0xBE, 0xC8, 0x10, 0x72,  // .......r
                                /* 02C0 */  0x32, 0x1E, 0xF4, 0xFF, 0x1F, 0xF7, 0xB1, 0x20,  // 2...... 
                                /* 02C8 */  0x5C, 0xC4, 0xE7, 0x02, 0x1E, 0xF0, 0xF8, 0x03,  // \.......
                                /* 02D0 */  0x74, 0x04, 0x1E, 0x27, 0x40, 0x73, 0x8A, 0x60,  // t..'@s.`
                                /* 02D8 */  0x40, 0xE7, 0xC4, 0x2E, 0x62, 0x1E, 0x41, 0x5D,  // @...b.A]
                                /* 02E0 */  0xC7, 0x18, 0x50, 0xDC, 0x22, 0x7C, 0x1E, 0xF3,  // ..P."|..
                                /* 02E8 */  0x19, 0xE2, 0x9D, 0x21, 0x81, 0xC3, 0x8F, 0x14,  // ...!....
                                /* 02F0 */  0x7D, 0x4E, 0xF0, 0x29, 0x83, 0x5D, 0x53, 0xF8,  // }N.).]S.
                                /* 02F8 */  0x1D, 0xE6, 0xD5, 0xC3, 0x30, 0xCF, 0x02, 0x2C,  // ....0..,
                                /* 0300 */  0xE4, 0x09, 0x08, 0xE8, 0x9C, 0x67, 0xF0, 0x47,  // .....g.G
                                /* 0308 */  0x11, 0xD8, 0xA3, 0xE2, 0xB3, 0x78, 0x5E, 0x38,  // .....x^8
                                /* 0310 */  0x2B, 0x3E, 0x5B, 0x0F, 0x17, 0x8C, 0x81, 0xCF,  // +>[.....
                                /* 0318 */  0x09, 0x50, 0x4E, 0x01, 0x9E, 0x2B, 0xEE, 0xF0,  // .PN..+..
                                /* 0320 */  0x04, 0xE7, 0xFF, 0x3F, 0x56, 0x78, 0x80, 0x3E,  // ...?Vx.>
                                /* 0328 */  0x3C, 0x01, 0x8F, 0x73, 0x02, 0x9B, 0x12, 0xE6,  // <..s....
                                /* 0330 */  0x98, 0x00, 0xCE, 0xD0, 0x03, 0x45, 0x0F, 0xCF,  // .....E..
                                /* 0338 */  0xC0, 0x21, 0x7D, 0x48, 0xC0, 0x1E, 0x30, 0xC0,  // .!}H..0.
                                /* 0340 */  0x05, 0xEA, 0x03, 0x06, 0xF0, 0x18, 0x13, 0x9B,  // ........
                                /* 0348 */  0x29, 0x7E, 0xA8, 0xC0, 0x63, 0x14, 0xCF, 0x48,  // )~..c..H
                                /* 0350 */  0x87, 0x0A, 0xE6, 0x3F, 0xAA, 0x87, 0x0A, 0xEF,  // ...?....
                                /* 0358 */  0xFF, 0x3F, 0x54, 0x30, 0x8E, 0xC9, 0x43, 0x05,  // .?T0..C.
                                /* 0360 */  0x06, 0x67, 0x44, 0x0F, 0x15, 0x37, 0x1A, 0xDF,  // .gD..7..
                                /* 0368 */  0xAE, 0xDE, 0xB0, 0xF8, 0x58, 0xB1, 0x67, 0x44,  // ....X.gD
                                /* 0370 */  0x70, 0x9D, 0xCA, 0x7C, 0x46, 0x04, 0x1E, 0x83,  // p..|F...
                                /* 0378 */  0xC2, 0x0C, 0x16, 0x18, 0xC4, 0x3E, 0x26, 0x40,  // .....>&@
                                /* 0380 */  0x39, 0x76, 0x18, 0xE2, 0x6C, 0x5E, 0xD5, 0xD8,  // 9v..l^..
                                /* 0388 */  0x85, 0x88, 0x8D, 0x15, 0x5C, 0x1E, 0xC6, 0x0A,  // ....\...
                                /* 0390 */  0x14, 0xFE, 0xFF, 0x27, 0x13, 0xEC, 0x9C, 0x30,  // ...'...0
                                /* 0398 */  0x17, 0x22, 0xCC, 0x89, 0x08, 0x18, 0x0C, 0xC7,  // ."......
                                /* 03A0 */  0x47, 0x44, 0xCF, 0x15, 0x06, 0xC1, 0x98, 0x83,  // GD......
                                /* 03A8 */  0x05, 0xD5, 0x88, 0x3C, 0x58, 0xF8, 0x67, 0xBE,  // ...<X.g.
                                /* 03B0 */  0x83, 0x05, 0xCB, 0xA0, 0x0C, 0xF1, 0x1A, 0x77,  // .......w
                                /* 03B8 */  0xB8, 0xC0, 0x25, 0xFA, 0x49, 0x01, 0xCA, 0x81,  // ..%.I...
                                /* 03C0 */  0xCE, 0xF7, 0x3E, 0x76, 0x51, 0x62, 0xA3, 0x05,  // ..>vQb..
                                /* 03C8 */  0x9F, 0x89, 0xD1, 0x02, 0x15, 0x30, 0x4F, 0x28,  // .....0O(
                                /* 03D0 */  0xFA, 0x73, 0xDE, 0xAB, 0x98, 0xB1, 0x1E, 0xF9,  // .s......
                                /* 03D8 */  0xFC, 0xFF, 0xBF, 0x64, 0x73, 0x98, 0xC8, 0x8F,  // ...ds...
                                /* 03E0 */  0x45, 0xE0, 0x3C, 0xA2, 0x82, 0xF1, 0x7A, 0xFA,  // E.<...z.
                                /* 03E8 */  0x46, 0xCA, 0xD4, 0x5E, 0x08, 0x08, 0x48, 0x58,  // F..^..HX
                                /* 03F0 */  0x1F, 0x23, 0x7D, 0x45, 0x35, 0x4A, 0x8C, 0x33,  // .#}E5J.3
                                /* 03F8 */  0x0B, 0x78, 0x30, 0x21, 0x1E, 0x51, 0x81, 0x51,  // .x0!.Q.Q
                                /* 0400 */  0xF4, 0x97, 0xA3, 0xCF, 0xA7, 0x34, 0x2C, 0x0C,  // .....4,.
                                /* 0408 */  0xEA, 0x88, 0x0A, 0xF8, 0xBE, 0x10, 0x3C, 0xA2,  // ......<.
                                /* 0410 */  0x62, 0xFE, 0xFF, 0x47, 0x54, 0xB0, 0x5F, 0x49,  // b..GT._I
                                /* 0418 */  0x23, 0xBC, 0x96, 0x3E, 0x93, 0x3E, 0xDA, 0x9F,  // #..>.>..
                                /* 0420 */  0xD8, 0x1B, 0xC1, 0xD3, 0xA9, 0x87, 0x13, 0xC1,  // ........
                                /* 0428 */  0x47, 0x54, 0x06, 0x16, 0x29, 0x8A, 0x21, 0xA3,  // GT..).!.
                                /* 0430 */  0x44, 0x35, 0xCA, 0xE3, 0x3D, 0xC3, 0x7A, 0xD1,  // D5..=.z.
                                /* 0438 */  0x37, 0x92, 0x6F, 0x10, 0xD1, 0xE3, 0x3E, 0xE2,  // 7.o...>.
                                /* 0440 */  0x73, 0x99, 0x0B, 0x91, 0x8F, 0x23, 0x2A, 0x40,  // s....#*@
                                /* 0448 */  0x91, 0x93, 0x1B, 0x1C, 0xD4, 0x67, 0x87, 0xF3,  // .....g..
                                /* 0450 */  0xF6, 0x05, 0xC1, 0xF8, 0x6F, 0x4B, 0x3E, 0xB9,  // ....oK>.
                                /* 0458 */  0x81, 0xE5, 0xFF, 0x7F, 0x46, 0x05, 0x4E, 0x63,  // ....F.Nc
                                /* 0460 */  0x7A, 0x55, 0x38, 0x27, 0xCC, 0x2C, 0x0E, 0xCA,  // zU8'.,..
                                /* 0468 */  0xE7, 0x18, 0x70, 0x9E, 0x32, 0xE1, 0x40, 0x1F,  // ..p.2.@.
                                /* 0470 */  0xF2, 0x9B, 0x87, 0xCF, 0x09, 0x67, 0xCA, 0x4E,  // .....g.N
                                /* 0478 */  0xFC, 0xC0, 0xFB, 0xA0, 0xE3, 0x03, 0x88, 0x5D,  // .......]
                                /* 0480 */  0x0E, 0x14, 0xD4, 0x67, 0x5B, 0x38, 0xF7, 0x1B,  // ...g[8..
                                /* 0488 */  0xEC, 0xAD, 0x15, 0x73, 0xB6, 0x05, 0xDF, 0x01,  // ...s....
                                /* 0490 */  0x15, 0x1C, 0x07, 0x21, 0xFF, 0xFF, 0xCF, 0xB6,  // ...!....
                                /* 0498 */  0xC0, 0xF9, 0x2D, 0xE1, 0xE1, 0xE2, 0xEF, 0x6D,  // ..-....m
                                /* 04A0 */  0x6C, 0x26, 0x11, 0x4E, 0xE8, 0x91, 0xC6, 0x17,  // l&.N....
                                /* 04A8 */  0xF5, 0x73, 0xB3, 0x71, 0x48, 0x12, 0xF4, 0x94,  // .s.qH...
                                /* 04B0 */  0x0A, 0x74, 0x66, 0xF5, 0xD4, 0x07, 0xB6, 0x59,  // .tf....Y
                                /* 04B8 */  0x61, 0x70, 0xA2, 0x1C, 0x16, 0x83, 0x78, 0xA4,  // ap....x.
                                /* 04C0 */  0xF1, 0x3D, 0xE6, 0x71, 0x01, 0x9C, 0x03, 0xC6,  // .=.q....
                                /* 04C8 */  0x8F, 0xC8, 0x63, 0xF1, 0x09, 0x96, 0x0D, 0x06,  // ..c.....
                                /* 04D0 */  0x47, 0x30, 0xEA, 0x51, 0x15, 0xE8, 0xCC, 0xEA,  // G0.Q....
                                /* 04D8 */  0x78, 0xB1, 0xFF, 0xFF, 0xF1, 0xC2, 0xBE, 0xE5,  // x.......
                                /* 04E0 */  0xF2, 0xE3, 0x93, 0x47, 0x8C, 0x39, 0x30, 0x00,  // ...G.90.
                                /* 04E8 */  0x9F, 0x01, 0x63, 0xCE, 0xB1, 0x1E, 0x30, 0x98,  // ..c...0.
                                /* 04F0 */  0xCF, 0xAB, 0xE0, 0x18, 0x30, 0xF8, 0xEE, 0xBA,  // ....0...
                                /* 04F8 */  0x6C, 0xC0, 0xC0, 0x26, 0xFE, 0x71, 0x05, 0xCA,  // l..&.q..
                                /* 0500 */  0x81, 0x03, 0x7F, 0x9E, 0xC5, 0x1C, 0x1E, 0xC1,  // ........
                                /* 0508 */  0x76, 0x6A, 0x05, 0xC7, 0xE1, 0x11, 0xF7, 0xFF,  // vj......
                                /* 0510 */  0x3F, 0x70, 0x80, 0x6F, 0x58, 0x98, 0x23, 0x2F,  // ?p.oX.#/
                                /* 0518 */  0x60, 0xE2, 0xD8, 0x0A, 0x8E, 0x23, 0x2F, 0xE0,  // `....#/.
                                /* 0520 */  0xF2, 0xD4, 0x0A, 0x5C, 0xFE, 0xFF, 0x47, 0x5E,  // ...\..G^
                                /* 0528 */  0xC0, 0x93, 0x8A, 0x23, 0x2F, 0xA0, 0xE7, 0x98,  // ...#/...
                                /* 0530 */  0x81, 0x1F, 0x90, 0xA1, 0x8F, 0xE4, 0x3D, 0xD4,  // ......=.
                                /* 0538 */  0x07, 0xC4, 0xB0, 0x2F, 0xA1, 0xC6, 0x7D, 0xA7,  // .../..}.
                                /* 0540 */  0xF4, 0xB1, 0x10, 0x6C, 0x83, 0xF5, 0xB1, 0x10,  // ...l....
                                /* 0548 */  0x78, 0x0C, 0x0A, 0xCE, 0xFF, 0xFF, 0xA0, 0x00,  // x.......
                                /* 0550 */  0xCE, 0xD3, 0x32, 0x70, 0x38, 0xD1, 0xB2, 0xD3,  // ..2p8...
                                /* 0558 */  0x32, 0x30, 0x4C, 0xD2, 0x08, 0x84, 0xC9, 0x3F,  // 20L....?
                                /* 0560 */  0x4D, 0x49, 0xDE, 0x5B, 0x80, 0xC2, 0xF8, 0xB4,  // MI.[....
                                /* 0568 */  0x0C, 0xB8, 0x12, 0x7C, 0x50, 0x00, 0xCD, 0x69,  // ...|P..i
                                /* 0570 */  0x00, 0xFE, 0x4D, 0x80, 0x1F, 0x22, 0xC2, 0x3F,  // ..M..".?
                                /* 0578 */  0x70, 0x78, 0x04, 0x11, 0xFE, 0xFF, 0x09, 0x7C,  // px.....|
                                /* 0580 */  0x52, 0x06, 0xD7, 0x89, 0xE1, 0x49, 0x19, 0xEC,  // R....I..
                                /* 0588 */  0x01, 0xCF, 0x03, 0x3A, 0x6F, 0xF8, 0xA4, 0x0C,  // ...:o...
                                /* 0590 */  0xF0, 0xE3, 0x64, 0x89, 0x3B, 0x89, 0x80, 0xF7,  // ..d.;...
                                /* 0598 */  0x16, 0x82, 0x39, 0x86, 0xC0, 0xFC, 0xFF, 0x1F,  // ..9.....
                                /* 05A0 */  0x43, 0xC0, 0xA7, 0x30, 0xD0, 0x19, 0x8C, 0x49,  // C..0...I
                                /* 05A8 */  0x59, 0xAD, 0x6C, 0xAC, 0xD6, 0xE7, 0x0D, 0x2A,  // Y.l....*
                                /* 05B0 */  0xF8, 0x98, 0xA0, 0x09, 0x3D, 0xB9, 0x79, 0x98,  // ....=.y.
                                /* 05B8 */  0x95, 0xCE, 0x46, 0x28, 0xAF, 0x07, 0xCF, 0xF6,  // ..F(....
                                /* 05C0 */  0x96, 0x09, 0xA6, 0x73, 0xB4, 0x21, 0x2C, 0xF0,  // ...s.!,.
                                /* 05C8 */  0x44, 0x62, 0x08, 0x8D, 0xC7, 0xE0, 0x16, 0x04,  // Db......
                                /* 05D0 */  0x47, 0x41, 0x7C, 0x02, 0x70, 0xD8, 0x13, 0x10,  // GA|.p...
                                /* 05D8 */  0xFA, 0x08, 0xE0, 0x3B, 0x0F, 0x27, 0x70, 0xB8,  // ...;.'p.
                                /* 05E0 */  0xE3, 0x0F, 0x3D, 0x31, 0xE0, 0xC7, 0x76, 0x60,  // ..=1..v`
                                /* 05E8 */  0xE7, 0xE5, 0x53, 0x2E, 0xB8, 0x66, 0xE6, 0xFB,  // ..S..f..
                                /* 05F0 */  0x92, 0x87, 0xC6, 0xEE, 0x26, 0x1E, 0x8A, 0x87,  // ....&...
                                /* 05F8 */  0xF0, 0x78, 0x60, 0x02, 0x8F, 0xC4, 0xE7, 0x22,  // .x`...."
                                /* 0600 */  0x3E, 0x08, 0x9F, 0xC2, 0xF9, 0xE1, 0x07, 0x9C,  // >.......
                                /* 0608 */  0x07, 0x23, 0xDC, 0x19, 0x01, 0x1E, 0x90, 0x2F,  // .#...../
                                /* 0610 */  0x04, 0x9E, 0xD5, 0x43, 0x01, 0x9B, 0x43, 0x88,  // ...C..C.
                                /* 0618 */  0x30, 0xD1, 0x0C, 0x8F, 0xF9, 0x0E, 0x68, 0x54,  // 0.....hT
                                /* 0620 */  0x44, 0xD6, 0xB8, 0x50, 0x23, 0xF5, 0x49, 0x86,  // D..P#.I.
                                /* 0628 */  0x61, 0xBF, 0x0F, 0x58, 0xF4, 0x40, 0x75, 0x3B,  // a..X.@u;
                                /* 0630 */  0x78, 0x4A, 0xC7, 0xC0, 0x7A, 0xEC, 0x1C, 0xD6,  // xJ..z...
                                /* 0638 */  0x68, 0x07, 0xEB, 0xA3, 0x84, 0xAF, 0x21, 0x9E,  // h.....!.
                                /* 0640 */  0xD9, 0xFF, 0xFF, 0x84, 0x0D, 0xEB, 0x23, 0x14,  // ......#.
                                /* 0648 */  0xB8, 0x8E, 0x0A, 0xEC, 0xB8, 0xED, 0x13, 0x00,  // ........
                                /* 0650 */  0xEE, 0x9C, 0xA0, 0x53, 0x03, 0xEA, 0x00, 0x64,  // ...S...d
                                /* 0658 */  0xF1, 0xA7, 0x06, 0xC4, 0x1C, 0x0F, 0xEB, 0x49,  // .......I
                                /* 0660 */  0xC0, 0xA0, 0xAF, 0x3A, 0xC6, 0x79, 0xA2, 0xF2,  // ...:.y..
                                /* 0668 */  0x88, 0x7C, 0x0B, 0x60, 0x52, 0x4F, 0x0E, 0x28,  // .|.`RO.(
                                /* 0670 */  0x91, 0x14, 0x92, 0x78, 0x72, 0x40, 0x89, 0x82,  // ...xr@..
                                /* 0678 */  0xA3, 0x20, 0x3E, 0x39, 0xF8, 0xD4, 0x8E, 0x3F,  // . >9...?
                                /* 0680 */  0x39, 0xE0, 0xCF, 0x61, 0xFC, 0xE4, 0x00, 0xF7,  // 9..a....
                                /* 0688 */  0xC0, 0x0C, 0x9E, 0xA1, 0xF2, 0xF9, 0xC1, 0xBB,  // ........
                                /* 0690 */  0xAE, 0xB3, 0xB3, 0x03, 0x60, 0x25, 0xD8, 0xD9,  // ....`%..
                                /* 0698 */  0x01, 0x34, 0xFF, 0xFF, 0xB3, 0x03, 0x3F, 0x07,  // .4....?.
                                /* 06A0 */  0xF8, 0xEC, 0x00, 0xAE, 0x13, 0x00, 0xF0, 0x39,  // .......9
                                /* 06A8 */  0x3F, 0xC0, 0x99, 0xE4, 0xF3, 0x03, 0x60, 0xE1,  // ?.....`.
                                /* 06B0 */  0x62, 0xE0, 0xF3, 0x3B, 0xF8, 0xC6, 0xC7, 0xCE,  // b..;....
                                /* 06B8 */  0x0F, 0x80, 0xA1, 0xFF, 0xFF, 0xF9, 0x01, 0x38,  // .......8
                                /* 06C0 */  0xC0, 0xF2, 0xF3, 0x03, 0xF0, 0x39, 0x01, 0x80,  // .....9..
                                /* 06C8 */  0x47, 0xE4, 0xF9, 0x01, 0xC5, 0xE1, 0x83, 0xA2,  // G.......
                                /* 06D0 */  0xD1, 0x4E, 0xE2, 0x00, 0x4E, 0xFC, 0x20, 0x22,  // .N..N. "
                                /* 06D8 */  0x9C, 0x43, 0xF8, 0x43, 0x78, 0xA5, 0x88, 0x12,  // .C.Cx...
                                /* 06E0 */  0xE8, 0x61, 0xD2, 0x27, 0x4C, 0x72, 0x7C, 0x40,  // .a.'Lr|@
                                /* 06E8 */  0x09, 0xA5, 0xD0, 0xD1, 0xCA, 0xC7, 0x07, 0x2E,  // ........
                                /* 06F0 */  0x0C, 0x8E, 0x82, 0xF8, 0xF8, 0xE0, 0xD0, 0xC7,  // ........
                                /* 06F8 */  0x07, 0xE8, 0x21, 0x4F, 0x33, 0xA0, 0x38, 0xBA,  // ..!O3.8.
                                /* 0700 */  0xF9, 0x58, 0x05, 0x16, 0xAC, 0x37, 0x71, 0x4F,  // .X...7qO
                                /* 0708 */  0x0F, 0xC6, 0xBD, 0xD8, 0xB7, 0x39, 0x23, 0x9D,  // .....9#.
                                /* 0710 */  0xE0, 0xF9, 0xBE, 0x3D, 0xFA, 0xBC, 0xF7, 0x00,  // ...=....
                                /* 0718 */  0x01, 0x0C, 0xFE, 0xFF, 0x07, 0x08, 0xE0, 0x74,  // .......t
                                /* 0720 */  0x34, 0xF3, 0x01, 0x02, 0x5C, 0xE3, 0xF7, 0x01,  // 4...\...
                                /* 0728 */  0x02, 0x5C, 0x67, 0x00, 0xE0, 0x25, 0xEA, 0x08,  // .\g..%..
                                /* 0730 */  0x81, 0x96, 0x7D, 0xC0, 0x42, 0x60, 0x33, 0x0C,  // ..}.B`3.
                                /* 0738 */  0xDF, 0x22, 0x7C, 0x5C, 0xF0, 0xA0, 0x4C, 0xE0,  // ."|\..L.
                                /* 0740 */  0x83, 0x1E, 0xE0, 0xE5, 0x38, 0xC4, 0xA7, 0x07,  // ....8...
                                /* 0748 */  0xEF, 0xF8, 0xC0, 0xFF, 0xFF, 0xC7, 0x07, 0xC0,  // ........
                                /* 0750 */  0x45, 0xA8, 0xE3, 0x03, 0xE8, 0x2C, 0x1C, 0x1F,  // E....,..
                                /* 0758 */  0x40, 0x37, 0x7E, 0xE0, 0x71, 0x74, 0x80, 0x73,  // @7~.qt.s
                                /* 0760 */  0xB6, 0x61, 0x47, 0x07, 0x60, 0x7F, 0xB4, 0xC2,  // .aG.`...
                                /* 0768 */  0x8D, 0x15, 0x3C, 0xFF, 0xFF, 0x93, 0x10, 0x3F,  // ..<....?
                                /* 0770 */  0x3A, 0x00, 0xA7, 0x83, 0x7A, 0xA0, 0x07, 0xD9,  // :...z...
                                /* 0778 */  0x40, 0x8F, 0x0E, 0xC0, 0xFF, 0xAC, 0xEE, 0xA3,  // @.......
                                /* 0780 */  0x03, 0x70, 0x1A, 0x3F, 0x7C, 0x21, 0x47, 0x07,  // .p.?|!G.
                                /* 0788 */  0xD4, 0x10, 0x2C, 0xF6, 0x10, 0x83, 0xD0, 0x78,  // ..,....x
                                /* 0790 */  0x53, 0x26, 0xC3, 0x7D, 0x4D, 0xF1, 0x78, 0x7C,  // S&.}M.x|
                                /* 0798 */  0x6A, 0x60, 0x07, 0x07, 0x2E, 0x8D, 0x42, 0xE7,  // j`....B.
                                /* 07A0 */  0x29, 0x1F, 0x1C, 0xB8, 0x14, 0x38, 0x0A, 0xE2,  // )....8..
                                /* 07A8 */  0x83, 0x83, 0x63, 0x1E, 0x1C, 0xA0, 0xC7, 0x3A,  // ..c....:
                                /* 07B0 */  0xC2, 0x80, 0x42, 0x1E, 0x14, 0xFD, 0xFF, 0x8F,  // ..B.....
                                /* 07B8 */  0x14, 0xFE, 0xD4, 0xD8, 0x0A, 0x8F, 0x0D, 0x77,  // .......w
                                /* 07C0 */  0x6A, 0x00, 0x9C, 0x1C, 0xE2, 0x7D, 0x6A, 0x00,  // j....}j.
                                /* 07C8 */  0x97, 0x87, 0x53, 0x03, 0xE8, 0x26, 0xEA, 0xF3,  // ..S..&..
                                /* 07D0 */  0x0B, 0xB8, 0x86, 0x0F, 0xE9, 0xD0, 0x80, 0x3A,  // .......:
                                /* 07D8 */  0x01, 0xF8, 0xF4, 0x8D, 0xC1, 0x65, 0xC6, 0x46,  // .....e.F
                                /* 07E0 */  0xA9, 0x33, 0xB5, 0x67, 0xC3, 0xCE, 0x98, 0xEC,  // .3.g....
                                /* 07E8 */  0xD4, 0xC0, 0xC5, 0x51, 0xE8, 0xD8, 0xE0, 0x53,  // ...Q...S
                                /* 07F0 */  0x03, 0x17, 0x03, 0x47, 0x41, 0x7C, 0x6A, 0x70,  // ...GA|jp
                                /* 07F8 */  0xD0, 0x53, 0x03, 0xF4, 0x53, 0xA2, 0x4F, 0x0D,  // .S..S.O.
                                /* 0800 */  0x70, 0xFE, 0xFF, 0xA7, 0x06, 0xDC, 0x81, 0x19,  // p.......
                                /* 0808 */  0x3C, 0x73, 0xE3, 0xE7, 0x30, 0x0F, 0x0E, 0x77,  // <s..0..w
                                /* 0810 */  0x76, 0x01, 0x1C, 0x82, 0xFB, 0x14, 0x05, 0xDC,  // v.......
                                /* 0818 */  0xC6, 0x0F, 0xF1, 0xDC, 0x00, 0x7D, 0xD6, 0xCF,  // .....}..
                                /* 0820 */  0x0D, 0xC0, 0xEA, 0xFF, 0x7F, 0x6E, 0x00, 0x56,  // .....n.V
                                /* 0828 */  0x73, 0x7B, 0x6E, 0x00, 0x9C, 0x9A, 0x38, 0x37,  // s{n...87
                                /* 0830 */  0x00, 0xC9, 0xF1, 0xC3, 0x38, 0xCC, 0xE1, 0x45,  // ....8..E
                                /* 0838 */  0x9F, 0x1B, 0xD0, 0x53, 0x8B, 0x51, 0x3C, 0x34,  // ...S.Q<4
                                /* 0840 */  0xFA, 0xCC, 0xED, 0x83, 0x03, 0x3F, 0xCB, 0xF9,  // .....?..
                                /* 0848 */  0xE4, 0xE0, 0x83, 0x03, 0x97, 0x03, 0x47, 0x41,  // ......GA
                                /* 0850 */  0xFC, 0xFF, 0x3F, 0x38, 0x38, 0xEA, 0xC1, 0x01,  // ..?88...
                                /* 0858 */  0x7A, 0xB4, 0x83, 0x03, 0x28, 0x0E, 0x3E, 0xE0,  // z...(.>.
                                /* 0860 */  0x39, 0xF6, 0xF0, 0xD1, 0xB1, 0xA9, 0x62, 0x4F,  // 9.....bO
                                /* 0868 */  0x0E, 0x80, 0x93, 0x33, 0x98, 0x4F, 0x0E, 0xE0,  // ...3.O..
                                /* 0870 */  0x52, 0x71, 0x72, 0x00, 0xDD, 0x9C, 0x1E, 0xA3,  // Rqr.....
                                /* 0878 */  0xC0, 0x7A, 0x00, 0x80, 0x73, 0x74, 0xC0, 0x8D,  // .z..st..
                                /* 0880 */  0xC1, 0x92, 0x8F, 0x0E, 0x08, 0xAD, 0x67, 0x5D,  // ......g]
                                /* 0888 */  0x32, 0x8C, 0x73, 0xE0, 0x87, 0x4A, 0xCC, 0xFF,  // 2.s..J..
                                /* 0890 */  0xFF, 0x78, 0x0B, 0xF8, 0xB8, 0x12, 0xC4, 0x3A,  // .x.....:
                                /* 0898 */  0xF5, 0xB7, 0x2F, 0x4F, 0xF2, 0x45, 0xDD, 0x37,  // ../O.E.7
                                /* 08A0 */  0x63, 0x36, 0x3D, 0xCC, 0xC9, 0x01, 0x70, 0x72,  // c6=...pr
                                /* 08A8 */  0xF8, 0x07, 0xDF, 0xC8, 0x7D, 0xF8, 0x07, 0x4E,  // ....}..N
                                /* 08B0 */  0x27, 0x07, 0x7E, 0x02, 0xC0, 0xDF, 0x17, 0xF0,  // '.~.....
                                /* 08B8 */  0x87, 0x7F, 0xDC, 0xFF, 0x5F, 0x14, 0x84, 0x02,  // ...._...
                                /* 08C0 */  0x1C, 0xFE, 0x21, 0x9D, 0x2C, 0x31, 0x08, 0xE7,  // ..!.,1..
                                /* 08C8 */  0xF0, 0x1C, 0x6B, 0xCF, 0x27, 0x4C, 0x7A, 0x7C,  // ..k.'Lz|
                                /* 08D0 */  0xE0, 0x27, 0x08, 0x1F, 0x65, 0x7C, 0x7C, 0xE0,  // .'..e||.
                                /* 08D8 */  0xB2, 0xE0, 0x28, 0x88, 0x8F, 0x0F, 0x8E, 0x7C,  // ..(....|
                                /* 08E0 */  0x7C, 0x80, 0x1E, 0xF1, 0xF8, 0x00, 0x8A, 0xC3,  // |.......
                                /* 08E8 */  0xC0, 0x63, 0x0C, 0xD8, 0xD0, 0x0E, 0x0E, 0x07,  // .c......
                                /* 08F0 */  0x64, 0xB0, 0xA0, 0x21, 0x2A, 0x86, 0x22, 0xC0,  // d..!*.".
                                /* 08F8 */  0xCD, 0x9F, 0x20, 0x00, 0x2D, 0x27, 0x21, 0x9F,  // .. .-'!.
                                /* 0900 */  0x20, 0xC0, 0x75, 0x06, 0xF0, 0x09, 0x02, 0x5C,  //  .u....\
                                /* 0908 */  0x47, 0x00, 0x78, 0xFF, 0xFF, 0x23, 0x00, 0x18,  // G.x..#..
                                /* 0910 */  0x91, 0x62, 0x3D, 0x02, 0x30, 0x89, 0xA7, 0x3B,  // .b=.0..;
                                /* 0918 */  0xB4, 0xF8, 0x23, 0x37, 0xE2, 0xFC, 0x00, 0x4B,  // ..#7...K
                                /* 0920 */  0xEE, 0xF9, 0x01, 0x25, 0x94, 0x42, 0x07, 0x08,  // ...%.B..
                                /* 0928 */  0x9F, 0x1F, 0xF8, 0x61, 0xD7, 0x60, 0x06, 0xF1,  // ...a.`..
                                /* 0930 */  0xF9, 0xC1, 0xA1, 0xCF, 0x0F, 0xD0, 0x43, 0x9E,  // ......C.
                                /* 0938 */  0xB8, 0x41, 0x21, 0xF6, 0x88, 0x0C, 0xBA, 0xF1,  // .A!.....
                                /* 0940 */  0xC2, 0xC3, 0xB4, 0x2F, 0x0C, 0x69, 0x46, 0xD0,  // .../.iF.
                                /* 0948 */  0x19, 0x0F, 0xF0, 0x72, 0x22, 0xF2, 0x01, 0x02,  // ...r"...
                                /* 0950 */  0x5C, 0x36, 0x60, 0xE9, 0xFF, 0xFF, 0x00, 0x01,  // \6`.....
                                /* 0958 */  0x9E, 0x33, 0x00, 0xF0, 0x12, 0x76, 0xCE, 0x43,  // .3...v.C
                                /* 0960 */  0x0B, 0x3F, 0xD3, 0x40, 0x9A, 0xF3, 0x8B, 0xB8,  // .?.@....
                                /* 0968 */  0x7D, 0x82, 0x88, 0xC0, 0xE7, 0x07, 0x1F, 0x21,  // }......!
                                /* 0970 */  0xF8, 0x91, 0xD3, 0x07, 0x2C, 0x1F, 0x21, 0xB8,  // ....,.!.
                                /* 0978 */  0x24, 0x38, 0x0A, 0xE2, 0x23, 0x84, 0xE3, 0x1E,  // $8..#...
                                /* 0980 */  0x21, 0xA0, 0xC7, 0x3B, 0xD1, 0x80, 0xE2, 0x64,  // !..;...d
                                /* 0988 */  0x06, 0x1E, 0xA4, 0x33, 0xF3, 0x48, 0x8D, 0xF2,  // ...3.H..
                                /* 0990 */  0xF2, 0x81, 0x3F, 0xCF, 0x00, 0x5E, 0xFE, 0xFF,  // ..?..^..
                                /* 0998 */  0x27, 0x3D, 0x70, 0xEA, 0x38, 0xE9, 0x01, 0xAD,  // '=p.8...
                                /* 09A0 */  0x03, 0x00, 0x38, 0x04, 0x1F, 0x1E, 0xD0, 0x21,  // ..8....!
                                /* 09A8 */  0x0E, 0x0F, 0x54, 0x21, 0x86, 0x0E, 0x0E, 0x47,  // ..T!...G
                                /* 09B0 */  0xEB, 0xE3, 0x03, 0xEE, 0xF2, 0xC0, 0x0E, 0x9F,  // ........
                                /* 09B8 */  0x3E, 0x3C, 0xF0, 0x13, 0x8D, 0x4F, 0x58, 0x3E,  // ><...OX>
                                /* 09C0 */  0x3C, 0xF0, 0xE3, 0x9E, 0x4F, 0x9E, 0xFC, 0xF0,  // <...O...
                                /* 09C8 */  0xE0, 0xE8, 0x87, 0x07, 0xE8, 0x67, 0x4F, 0x1F,  // .....gO.
                                /* 09D0 */  0x1E, 0xE0, 0x1F, 0xA1, 0xF9, 0x60, 0xE1, 0x4F,  // .....`.O
                                /* 09D8 */  0xD3, 0x28, 0xD1, 0x0E, 0xF1, 0x3D, 0xE0, 0x3C,  // .(...=.<
                                /* 09E0 */  0x82, 0x18, 0xE7, 0x61, 0x8F, 0xC1, 0x9E, 0xEC,  // ...a....
                                /* 09E8 */  0x19, 0xDB, 0xF5, 0x11, 0x02, 0x08, 0xFE, 0xFF,  // ........
                                /* 09F0 */  0x8F, 0x10, 0xC0, 0xE5, 0x90, 0xE6, 0x23, 0x04,  // ......#.
                                /* 09F8 */  0xB8, 0x7C, 0x1C, 0x21, 0x40, 0x77, 0x0C, 0x00,  // .|.!@w..
                                /* 0A00 */  0x8E, 0xB2, 0x0F, 0x12, 0x28, 0x29, 0x07, 0x09,  // ....()..
                                /* 0A08 */  0x7A, 0xCA, 0x61, 0x17, 0x09, 0x7E, 0x8A, 0x60,  // z.a..~.`
                                /* 0A10 */  0xD2, 0x4F, 0x11, 0xA8, 0x83, 0x84, 0xCF, 0xA2,  // .O......
                                /* 0A18 */  0x3E, 0x45, 0xF0, 0xF3, 0x30, 0x07, 0xF1, 0x29,  // >E..0..)
                                /* 0A20 */  0xC2, 0x34, 0x3E, 0x45, 0xC0, 0x0D, 0x7C, 0xC6,  // .4>E..|.
                                /* 0A28 */  0x02, 0xC5, 0xD4, 0x8E, 0x17, 0x2C, 0xA3, 0xF7,  // .....,..
                                /* 0A30 */  0x59, 0xCF, 0xC7, 0x45, 0x9F, 0x38, 0x8C, 0x71,  // Y..E.8.q
                                /* 0A38 */  0xF6, 0xE1, 0xA2, 0xBE, 0xF0, 0x31, 0x2C, 0x36,  // .....1,6
                                /* 0A40 */  0x66, 0xDC, 0xFF, 0x7F, 0xCC, 0x6C, 0x2A, 0xC6,  // f....l*.
                                /* 0A48 */  0x38, 0x7C, 0x7E, 0xD2, 0x02, 0xBC, 0x1C, 0xF1,  // 8|~.....
                                /* 0A50 */  0x7D, 0x90, 0x00, 0xD7, 0x58, 0x7C, 0x90, 0x00,  // }...X|..
                                /* 0A58 */  0xD7, 0x49, 0x00, 0xF8, 0x86, 0x3A, 0x4B, 0xA0,  // .I...:K.
                                /* 0A60 */  0xC4, 0x9D, 0xD0, 0x7C, 0x38, 0x46, 0xCC, 0xF7,  // ...|8F..
                                /* 0A68 */  0x68, 0x7C, 0xF8, 0x8A, 0x70, 0x06, 0xC6, 0x39,  // h|..p..9
                                /* 0A70 */  0x37, 0x1F, 0x95, 0x0D, 0xF3, 0xF6, 0xE0, 0xAB,  // 7.......
                                /* 0A78 */  0x4C, 0x90, 0x30, 0x6F, 0xA9, 0x61, 0xCE, 0x23,  // L.0o.a.#
                                /* 0A80 */  0x4C, 0x94, 0x04, 0x3E, 0xA1, 0xFA, 0x50, 0xC1,  // L..>..P.
                                /* 0A88 */  0xCF, 0x15, 0x3E, 0x82, 0xF9, 0x50, 0xC1, 0xA5,  // ..>..P..
                                /* 0A90 */  0xC2, 0x51, 0x10, 0x1F, 0x2A, 0x2C, 0xE3, 0x50,  // .Q..*,.P
                                /* 0A98 */  0x81, 0xFA, 0xFF, 0x1F, 0x2A, 0xE0, 0xC4, 0x3E,  // ....*..>
                                /* 0AA0 */  0xE9, 0x80, 0x42, 0xFE, 0xA9, 0x16, 0x74, 0x47,  // ..B...tG
                                /* 0AA8 */  0x01, 0x8F, 0x10, 0xC6, 0x8D, 0xC4, 0x27, 0x13,  // ......'.
                                /* 0AB0 */  0x9F, 0xDB, 0x8C, 0x63, 0xB0, 0xC3, 0xC5, 0x61,  // ...c...a
                                /* 0AB8 */  0x63, 0x8E, 0xCC, 0x9E, 0x2B, 0xE6, 0x5C, 0x01,  // c...+.\.
                                /* 0AC0 */  0x38, 0x39, 0xCA, 0xF9, 0x5C, 0x01, 0x2E, 0x23,  // 89..\..#
                                /* 0AC8 */  0xE7, 0x0A, 0xD0, 0x1D, 0x06, 0x80, 0xD7, 0xFF,  // ........
                                /* 0AD0 */  0xFF, 0x30, 0x00, 0x8E, 0x93, 0x21, 0x6E, 0x3C,  // .0...!n<
                                /* 0AD8 */  0x96, 0x7D, 0xB4, 0x40, 0xCC, 0xFC, 0xB0, 0x5F,  // .}.@..._
                                /* 0AE0 */  0x02, 0x1E, 0x2C, 0xF8, 0x59, 0x02, 0x77, 0xE0,  // ..,.Y.w.
                                /* 0AE8 */  0xE1, 0x07, 0x43, 0x1F, 0x29, 0xB8, 0x28, 0x38,  // ..C.).(8
                                /* 0AF0 */  0x0A, 0xE2, 0x23, 0x85, 0x8F, 0x3B, 0x3E, 0x52,  // ..#..;>R
                                /* 0AF8 */  0xC0, 0x0D, 0x78, 0xA4, 0x00, 0xC5, 0xB9, 0x1B,  // ..x.....
                                /* 0B00 */  0x7C, 0x93, 0x63, 0x03, 0x87, 0x77, 0x90, 0x07,  // |.c..w..
                                /* 0B08 */  0x2C, 0x2A, 0x39, 0x47, 0x80, 0xEA, 0xFF, 0x7F,  // ,*9G....
                                /* 0B10 */  0x02, 0x00, 0x4E, 0x87, 0x07, 0x98, 0x18, 0x0F,  // ..N.....
                                /* 0B18 */  0x0F, 0x80, 0xAF, 0xC9, 0xB1, 0xC3, 0x03, 0x60,  // .......`
                                /* 0B20 */  0xF6, 0xFF, 0x7F, 0x62, 0xF0, 0x29, 0xC0, 0x87,  // ...b.)..
                                /* 0B28 */  0x07, 0xE0, 0x76, 0x02, 0x80, 0x2F, 0xFA, 0xF0,  // ..v../..
                                /* 0B30 */  0x80, 0x12, 0x05, 0xA1, 0x20, 0x87, 0x07, 0xC4,  // .... ...
                                /* 0B38 */  0x11, 0x1E, 0xCE, 0x58, 0x1F, 0x16, 0x8C, 0xEF,  // ...X....
                                /* 0B40 */  0x1B, 0x98, 0xCF, 0xA9, 0x80, 0x97, 0xF1, 0xF2,  // ........
                                /* 0B48 */  0x23, 0x37, 0x38, 0x70, 0x4E, 0xE0, 0x28, 0x71,  // #78pN.(q
                                /* 0B50 */  0xA7, 0x08, 0xE0, 0xFA, 0xFF, 0x3F, 0xA7, 0x02,  // .....?..
                                /* 0B58 */  0xAF, 0xF3, 0xA7, 0xCF, 0xA9, 0xC0, 0xE9, 0x18,  // ........
                                /* 0B60 */  0x00, 0xEE, 0x40, 0x47, 0x09, 0xD4, 0x11, 0xC0,  // ..@G....
                                /* 0B68 */  0xC1, 0xCE, 0xF2, 0x90, 0xA6, 0xF3, 0x8C, 0x88,  // ........
                                /* 0B70 */  0x1B, 0xE8, 0x69, 0xD8, 0x25, 0x8A, 0xEE, 0xAD,  // ..i.%...
                                /* 0B78 */  0x3E, 0x0A, 0x02, 0x66, 0x2E, 0x07, 0x2F, 0x09,  // >..f../.
                                /* 0B80 */  0x07, 0xEB, 0x29, 0xE2, 0x8E, 0x95, 0x30, 0xBC,  // ..)...0.
                                /* 0B88 */  0xCF, 0x91, 0x60, 0x05, 0x8C, 0xF2, 0xD8, 0xEB,  // ..`.....
                                /* 0B90 */  0x63, 0xE5, 0xFF, 0xFF, 0x30, 0x7D, 0x92, 0x06,  // c...0}..
                                /* 0B98 */  0x5C, 0x1D, 0x05, 0xC1, 0x67, 0xE5, 0x28, 0x08,  // \...g.(.
                                /* 0BA0 */  0xB4, 0x0E, 0x03, 0xC0, 0xE9, 0xC8, 0x83, 0xE3,  // ........
                                /* 0BA8 */  0x70, 0x8C, 0xF3, 0x34, 0xE2, 0x46, 0x81, 0x3B,  // p..4.F.;
                                /* 0BB0 */  0xF0, 0x60, 0xCF, 0x61, 0x3E, 0x54, 0x70, 0xC1,  // .`.a>Tp.
                                /* 0BB8 */  0x14, 0x3A, 0xF1, 0xF8, 0x50, 0xC1, 0x05, 0xC2,  // .:..P...
                                /* 0BC0 */  0x51, 0x10, 0x1F, 0x2A, 0x1C, 0xFE, 0xC0, 0x03,  // Q..*....
                                /* 0BC8 */  0xE5, 0xFF, 0x7F, 0xA8, 0xC0, 0x85, 0x3D, 0x52,  // ......=R
                                /* 0BD0 */  0x83, 0xE2, 0x1C, 0x70, 0xE0, 0x60, 0x19, 0x1E,  // ...p.`..
                                /* 0BD8 */  0x9B, 0x30, 0xCC, 0xA9, 0x63, 0x2F, 0x27, 0x8F,  // .0..c/'.
                                /* 0BE0 */  0x04, 0xC6, 0xE1, 0x07, 0x6A, 0xC0, 0x4B, 0xC8,  // ....j.K.
                                /* 0BE8 */  0xF3, 0x04, 0xE8, 0xB4, 0x9C, 0x27, 0x40, 0x77,  // .....'@w
                                /* 0BF0 */  0x0E, 0x00, 0x9E, 0x01, 0x8E, 0x12, 0xA8, 0xFF,  // ........
                                /* 0BF8 */  0x3F, 0x87, 0xC3, 0x1C, 0xC6, 0x10, 0x47, 0x09,  // ?.....G.
                                /* 0C00 */  0x98, 0xE2, 0x8F, 0x12, 0xA8, 0xD3, 0x84, 0x8F,  // ........
                                /* 0C08 */  0x63, 0x3E, 0x4A, 0x70, 0x99, 0x70, 0x14, 0xC4,  // c>Jp.p..
                                /* 0C10 */  0x47, 0x09, 0x4B, 0x38, 0xEE, 0x40, 0x8F, 0x7C,  // G.K8.@.|
                                /* 0C18 */  0xDC, 0x01, 0x05, 0x88, 0x0F, 0x4D, 0xE0, 0x1A,  // .....M..
                                /* 0C20 */  0x33, 0x38, 0x8F, 0x63, 0x80, 0xA3, 0x53, 0x9D,  // 38.c..S.
                                /* 0C28 */  0x4F, 0x13, 0xE0, 0xF2, 0x72, 0x9A, 0x00, 0xDD,  // O...r...
                                /* 0C30 */  0xFF, 0xFF, 0x28, 0x00, 0x9C, 0x83, 0x1C, 0x16,  // ..(.....
                                /* 0C38 */  0xD1, 0x91, 0x8E, 0x64, 0xA0, 0x18, 0xF7, 0xDB,  // ...d....
                                /* 0C40 */  0xA4, 0x0F, 0x46, 0x3A, 0x52, 0xA0, 0xCE, 0x63,  // ..F:R..c
                                /* 0C48 */  0x3E, 0x53, 0xF8, 0x48, 0xC1, 0x85, 0xC2, 0x51,  // >S.H...Q
                                /* 0C50 */  0x10, 0x1F, 0x29, 0x2C, 0xE2, 0x48, 0x01, 0x3D,  // ..),.H.=
                                /* 0C58 */  0xF4, 0x91, 0x02, 0x14, 0xE2, 0x0F, 0x4D, 0x40,  // ......M@
                                /* 0C60 */  0x06, 0xEA, 0x38, 0x7C, 0x22, 0xF7, 0x7D, 0xC9,  // ..8|".}.
                                /* 0C68 */  0x78, 0xAF, 0x4C, 0xF0, 0xCE, 0x14, 0xC0, 0xF4,  // x.L.....
                                /* 0C70 */  0xFF, 0x7F, 0xA6, 0x00, 0xD7, 0xC1, 0xC9, 0x67,  // .......g
                                /* 0C78 */  0x0A, 0x70, 0xC1, 0xF9, 0x4C, 0x01, 0xAE, 0xB3,  // .p..L...
                                /* 0C80 */  0x00, 0xF0, 0x16, 0x7A, 0xB8, 0x46, 0x9F, 0x24,  // ...z.F.$
                                /* 0C88 */  0x7C, 0x12, 0x62, 0xB7, 0x09, 0x1F, 0x79, 0xB0,  // |.b...y.
                                /* 0C90 */  0x92, 0x0F, 0x14, 0xA8, 0xB3, 0xAC, 0xCF, 0x8A,  // ........
                                /* 0C98 */  0x3E, 0x50, 0x70, 0x71, 0x70, 0x14, 0xC4, 0x07,  // >Ppqp...
                                /* 0CA0 */  0x0A, 0x07, 0x3F, 0x8C, 0x41, 0x0F, 0x7A, 0x18,  // ..?.A.z.
                                /* 0CA8 */  0x03, 0x85, 0xE0, 0x53, 0x13, 0xE8, 0x66, 0x0B,  // ...S..f.
                                /* 0CB0 */  0xE3, 0xCE, 0x04, 0xFB, 0xFF, 0x7F, 0x94, 0x00,  // ........
                                /* 0CB8 */  0x9C, 0x1C, 0xD1, 0x7D, 0x94, 0x00, 0x97, 0x99,  // ...}....
                                /* 0CC0 */  0xA3, 0x04, 0xE8, 0x4E, 0x01, 0xC0, 0x4F, 0xF8,  // ...N..O.
                                /* 0CC8 */  0x21, 0x02, 0x7D, 0x44, 0xF4, 0x01, 0x88, 0x1D,  // !.}D....
                                /* 0CD0 */  0x22, 0x60, 0x9C, 0x60, 0x7D, 0x88, 0xE0, 0xA7,  // "`.`}...
                                /* 0CD8 */  0x30, 0x1F, 0x24, 0x7C, 0x88, 0xE0, 0x87, 0x7E,  // 0.$|...~
                                /* 0CE0 */  0x1F, 0xFB, 0xF9, 0x21, 0xC2, 0x34, 0x3E, 0x44,  // ...!.4>D
                                /* 0CE8 */  0xC0, 0x3D, 0xF8, 0xFB, 0x90, 0x03, 0x7F, 0x82,  // .=......
                                /* 0CF0 */  0xC7, 0x8B, 0xFD, 0xFF, 0x1F, 0x96, 0xE0, 0x8F,  // ........
                                /* 0CF8 */  0x17, 0x6C, 0x57, 0x25, 0xFC, 0x41, 0x02, 0xB0,  // .lW%.A..
                                /* 0D00 */  0x72, 0x1C, 0xF1, 0x41, 0x02, 0x5C, 0x6A, 0x0E,  // r..A.\j.
                                /* 0D08 */  0x12, 0xA0, 0x3B, 0x09, 0x00, 0x5F, 0xB9, 0x87,  // ..;.._..
                                /* 0D10 */  0x09, 0xD4, 0x71, 0xDC, 0x27, 0x6B, 0x8F, 0x83,  // ..q.'k..
                                /* 0D18 */  0x61, 0x1C, 0xF3, 0x1B, 0x40, 0x88, 0x77, 0x33,  // a...@.w3
                                /* 0D20 */  0x9F, 0x5D, 0x61, 0xFD, 0xFF, 0xCF, 0xAE, 0xC0,  // .]a.....
                                /* 0D28 */  0xE7, 0x2C, 0x81, 0x3B, 0x64, 0x82, 0x67, 0xC8,  // .,.;d.g.
                                /* 0D30 */  0x7C, 0x6E, 0x0C, 0x24, 0xD4, 0x53, 0x92, 0x8F,  // |n.$.S..
                                /* 0D38 */  0x01, 0xA7, 0x72, 0xB0, 0x71, 0x82, 0xBC, 0x12,  // ..r.q...
                                /* 0D40 */  0x78, 0xB8, 0x46, 0xF2, 0xC9, 0x29, 0xC8, 0x53,  // x.F..).S
                                /* 0D48 */  0xC2, 0x29, 0x44, 0x7D, 0x7D, 0x7B, 0x38, 0x68,  // .)D}}{8h
                                /* 0D50 */  0xEA, 0xEC, 0x0A, 0x88, 0x74, 0x73, 0x76, 0x05,  // ....tsv.
                                /* 0D58 */  0x5A, 0xE7, 0x00, 0xF8, 0xFF, 0xFF, 0x73, 0x00,  // Z.....s.
                                /* 0D60 */  0xFC, 0x73, 0x17, 0x9C, 0x73, 0x04, 0xCE, 0xE7,  // .s..s...
                                /* 0D68 */  0xB4, 0x75, 0x90, 0xE0, 0xE7, 0x2E, 0xE0, 0x78,  // .u.....x
                                /* 0D70 */  0x90, 0xC0, 0x1D, 0x91, 0xC0, 0x33, 0x62, 0xFC,  // .....3b.
                                /* 0D78 */  0xE8, 0x7C, 0x8C, 0x00, 0xBC, 0x9D, 0xBB, 0xC0,  // .|......
                                /* 0D80 */  0x37, 0x42, 0x1F, 0x23, 0xE0, 0xFE, 0xFF, 0xCF,  // 7B.#....
                                /* 0D88 */  0x5D, 0xE0, 0x3D, 0x05, 0x80, 0x57, 0xD2, 0x21,  // ].=..W.!
                                /* 0D90 */  0x02, 0x35, 0x2E, 0x9F, 0xB6, 0x7C, 0x88, 0xC0,  // .5...|..
                                /* 0D98 */  0x43, 0x3F, 0x16, 0x1E, 0xCB, 0xB3, 0x35, 0x3B,  // C?....5;
                                /* 0DA0 */  0x47, 0xF3, 0x73, 0x0D, 0x97, 0x77, 0x8A, 0x40,  // G.s..w.@
                                /* 0DA8 */  0x09, 0x82, 0xA3, 0x20, 0x3E, 0x45, 0xF8, 0x54,  // ... >E.T
                                /* 0DB0 */  0xE3, 0x53, 0x04, 0xDC, 0x70, 0xA7, 0x08, 0x50,  // .S..p..P
                                /* 0DB8 */  0x88, 0x1C, 0x30, 0xC8, 0x2F, 0x91, 0x9E, 0x1E,  // ..0./...
                                /* 0DC0 */  0x3B, 0x3F, 0x00, 0x4E, 0x42, 0x9D, 0x1F, 0xA0,  // ;?.NB...
                                /* 0DC8 */  0xFC, 0xFF, 0xCF, 0x0F, 0x70, 0xED, 0x9C, 0x1F,  // ....p...
                                /* 0DD0 */  0x40, 0x37, 0x7E, 0xE0, 0x21, 0xF8, 0xE4, 0x80,  // @7~.!...
                                /* 0DD8 */  0x1A, 0xBB, 0x83, 0x9C, 0x1C, 0x10, 0xD7, 0x7A,  // .......z
                                /* 0DE0 */  0x76, 0xE4, 0x3A, 0x84, 0x97, 0x84, 0xB3, 0x38,  // v.:....8
                                /* 0DE8 */  0x9C, 0x9A, 0x81, 0x74, 0xE5, 0x62, 0x38, 0x51,  // ...t.b8Q
                                /* 0DF0 */  0x9E, 0x52, 0x7D, 0xEE, 0x32, 0x81, 0x0F, 0x5A,  // .R}.2..Z
                                /* 0DF8 */  0x3E, 0x3E, 0xF0, 0x23, 0x8D, 0x4F, 0xCD, 0x3E,  // >>.#.O.>
                                /* 0E00 */  0x3E, 0x70, 0x69, 0x70, 0x14, 0xC4, 0xC7, 0x07,  // >pip....
                                /* 0E08 */  0xC7, 0x3E, 0x3E, 0x40, 0x8F, 0x79, 0x7C, 0x00,  // .>>@.y|.
                                /* 0E10 */  0x85, 0xDC, 0xF1, 0x82, 0x6E, 0x8A, 0x78, 0xA4,  // ....n.x.
                                /* 0E18 */  0x63, 0xC4, 0x02, 0x9D, 0x23, 0xE6, 0x0C, 0x01,  // c...#...
                                /* 0E20 */  0xDC, 0xFE, 0xFF, 0x67, 0x08, 0xF0, 0xC6, 0x3B,  // ...g...;
                                /* 0E28 */  0x43, 0x80, 0x4E, 0xCF, 0x19, 0x02, 0x74, 0x87,  // C.N...t.
                                /* 0E30 */  0x00, 0xE0, 0x76, 0xCA, 0xC2, 0x71, 0xF8, 0xF0,  // ..v..q..
                                /* 0E38 */  0x87, 0x19, 0x9E, 0x4F, 0x38, 0x46, 0x3E, 0x86,  // ...O8F>.
                                /* 0E40 */  0xB7, 0x0A, 0x4F, 0xEC, 0x48, 0x0E, 0x21, 0xD0,  // ..O.H.!.
                                /* 0E48 */  0x43, 0x04, 0x60, 0x68, 0x7A, 0xB8, 0x4B, 0x08,  // C.`hz.K.
                                /* 0E50 */  0x9F, 0x1F, 0x3F, 0xAC, 0x31, 0x68, 0xCC, 0x21,  // ..?.1h.!
                                /* 0E58 */  0x02, 0xF7, 0xFF, 0x3F, 0x44, 0x00, 0xDE, 0xFC,  // ...?D...
                                /* 0E60 */  0x1C, 0x22, 0x80, 0xDE, 0x21, 0x00, 0x5C, 0xF2,  // ."..!.\.
                                /* 0E68 */  0x0F, 0x11, 0xA8, 0x51, 0x39, 0xCE, 0x91, 0x41,  // ...Q9..A
                                /* 0E70 */  0xB0, 0xE7, 0x71, 0xA2, 0x2F, 0xF6, 0xB8, 0x29,  // ..q./..)
                                /* 0E78 */  0x86, 0xF6, 0x2C, 0xC2, 0x1C, 0x43, 0xA4, 0x08,  // ..,..C..
                                /* 0E80 */  0x0F, 0x15, 0xC6, 0xEF, 0xF9, 0xF0, 0xEC, 0x73,  // .......s
                                /* 0E88 */  0x04, 0xEA, 0x04, 0xE8, 0xB3, 0x84, 0xCF, 0x11,  // ........
                                /* 0E90 */  0x5C, 0x22, 0x1C, 0x05, 0xF1, 0x39, 0xC2, 0xF1,  // \"...9..
                                /* 0E98 */  0xCF, 0x11, 0xD0, 0xE3, 0x9E, 0x23, 0x40, 0x31,  // .....#@1
                                /* 0EA0 */  0x9D, 0x63, 0xC6, 0xFC, 0xFF, 0xC7, 0x0C, 0x77,  // .c.....w
                                /* 0EA8 */  0x72, 0x98, 0x75, 0x1E, 0x1D, 0xF6, 0x1E, 0x02,  // r.u.....
                                /* 0EB0 */  0x03, 0x3F, 0xCE, 0xFB, 0xAD, 0x2F, 0x24, 0x11,  // .?.../$.
                                /* 0EB8 */  0x63, 0xFA, 0x8E, 0xE4, 0x13, 0x20, 0xE0, 0xE5,  // c.... ..
                                /* 0EC0 */  0x40, 0xE2, 0xB3, 0x04, 0xB8, 0xBE, 0x09, 0x3E,  // @......>
                                /* 0EC8 */  0x4B, 0x80, 0xEB, 0x20, 0x00, 0x5C, 0xCF, 0xCB,  // K.. .\..
                                /* 0ED0 */  0xB8, 0x91, 0xF9, 0x2C, 0xEF, 0xE3, 0x3D, 0x3B,  // ...,..=;
                                /* 0ED8 */  0x4C, 0xC0, 0x3B, 0xD0, 0x63, 0xFF, 0xFF, 0xC7,  // L.;.c...
                                /* 0EE0 */  0x1C, 0xE0, 0x38, 0x1C, 0x43, 0xB3, 0x23, 0x09,  // ..8.C.#.
                                /* 0EE8 */  0x98, 0x46, 0xC8, 0x96, 0x79, 0xE4, 0x70, 0xCF,  // .F..y.p.
                                /* 0EF0 */  0xF2, 0x80, 0xA3, 0x63, 0x0E, 0xF8, 0x0C, 0x1D,  // ...c....
                                /* 0EF8 */  0x73, 0x80, 0xD6, 0x21, 0x00, 0xDE, 0xFF, 0xFF,  // s..!....
                                /* 0F00 */  0x10, 0x00, 0xF7, 0x1C, 0x01, 0xE7, 0xE0, 0xC3,  // ........
                                /* 0F08 */  0xCE, 0x11, 0x80, 0x89, 0xD3, 0x17, 0xB8, 0xCF,  // ........
                                /* 0F10 */  0x11, 0x80, 0x6F, 0x45, 0xE7, 0x08, 0x28, 0xFF,  // ..oE..(.
                                /* 0F18 */  0xFF, 0xD3, 0x17, 0x70, 0x39, 0x04, 0x80, 0x4B,  // ...p9..K
                                /* 0F20 */  0xF6, 0x39, 0x02, 0x25, 0x0D, 0x42, 0x61, 0x4E,  // .9.%.BaN
                                /* 0F28 */  0x5F, 0x90, 0x06, 0x7D, 0x00, 0xF1, 0x8F, 0xF0,  // _..}....
                                /* 0F30 */  0x58, 0x3C, 0x04, 0x6B, 0xBC, 0xF5, 0x20, 0x09,  // X<.k.. .
                                /* 0F38 */  0x7C, 0x9A, 0x07, 0xBC, 0x4C, 0x0F, 0x7F, 0x49,  // |...L..I
                                /* 0F40 */  0x02, 0xCF, 0x51, 0x02, 0xF8, 0xFE, 0xFF, 0x4F,  // ..Q....O
                                /* 0F48 */  0xF3, 0xC0, 0xC9, 0xD1, 0x69, 0x1E, 0x68, 0x9D,  // ....i.h.
                                /* 0F50 */  0x02, 0xC0, 0x2B, 0xFD, 0x2C, 0x81, 0x92, 0x74,  // ..+.,..t
                                /* 0F58 */  0x88, 0xA6, 0x87, 0x1E, 0x76, 0x7B, 0xC5, 0x4F,  // ....v{.O
                                /* 0F60 */  0x04, 0x73, 0xB2, 0x20, 0xE7, 0x08, 0xD4, 0x19,  // .s. ....
                                /* 0F68 */  0xC7, 0x72, 0xCF, 0x11, 0xA8, 0x33, 0xBD, 0x4F,  // .r...3.O
                                /* 0F70 */  0xF5, 0xFC, 0x1C, 0xE1, 0xF0, 0xE7, 0x08, 0xE8,  // ........
                                /* 0F78 */  0xE7, 0x7A, 0x9F, 0xBB, 0xE0, 0x0F, 0xE7, 0x90,  // .z......
                                /* 0F80 */  0xC1, 0xE2, 0xFA, 0xAC, 0x0B, 0x61, 0xAC, 0x1E,  // .....a..
                                /* 0F88 */  0x1E, 0x83, 0x89, 0x75, 0xD6, 0x11, 0x82, 0xF8,  // ...u....
                                /* 0F90 */  0x48, 0x62, 0x64, 0xDF, 0x47, 0xEC, 0x7D, 0xCE,  // Hbd.G.}.
                                /* 0F98 */  0x64, 0x0C, 0x47, 0xE2, 0x93, 0x04, 0xEE, 0xFF,  // d.G.....
                                /* 0FA0 */  0x7F, 0x92, 0x00, 0x3C, 0x9C, 0x47, 0x7C, 0x92,  // ...<.G|.
                                /* 0FA8 */  0x00, 0xD7, 0x11, 0xC1, 0x27, 0x09, 0x70, 0x81,  // ....'.p.
                                /* 0FB0 */  0x3D, 0x7A, 0x81, 0xED, 0x24, 0x00, 0x46, 0xB0,  // =z..$.F.
                                /* 0FB8 */  0x20, 0x31, 0x5E, 0x5B, 0x2D, 0xFE, 0x34, 0x01,  //  1^[-.4.
                                /* 0FC0 */  0x25, 0xCA, 0x09, 0x1F, 0xE2, 0x69, 0x02, 0x7B,  // %....i.{
                                /* 0FC8 */  0x66, 0x05, 0xBE, 0xFF, 0xFF, 0xB3, 0x25, 0x78,  // f.....%x
                                /* 0FD0 */  0x4E, 0x4A, 0x7C, 0xD8, 0xF0, 0x61, 0xFB, 0x9A,  // NJ|..a..
                                /* 0FD8 */  0x37, 0xE2, 0x04, 0x06, 0x38, 0x3A, 0xB3, 0x82,  // 7...8:..
                                /* 0FE0 */  0xCF, 0xD2, 0x99, 0x15, 0x68, 0x1D, 0x04, 0x80,  // ....h...
                                /* 0FE8 */  0x83, 0xE8, 0x05, 0xEA, 0x34, 0xC1, 0x45, 0x1D,  // ....4.E.
                                /* 0FF0 */  0xA9, 0xFD, 0x72, 0xD0, 0x31, 0x9F, 0x83, 0x1E,  // ..r.1...
                                /* 0FF8 */  0x8D, 0xD1, 0x0F, 0x84, 0x8D, 0xF8, 0xD5, 0xC7,  // ........
                                /* 1000 */  0x63, 0x88, 0xF1, 0xFF, 0x3F, 0x4D, 0x5F, 0xC1,  // c...?M_.
                                /* 1008 */  0x7C, 0xB8, 0xF0, 0x39, 0xC2, 0xC7, 0x08, 0x8B,  // |..9....
                                /* 1010 */  0xA6, 0x90, 0xAC, 0xE3, 0x04, 0x4A, 0xC8, 0x71,  // .....J.q
                                /* 1018 */  0x82, 0x82, 0x18, 0xD0, 0x29, 0x8F, 0x13, 0xE8,  // ....)...
                                /* 1020 */  0x23, 0x0E, 0x1B, 0xC2, 0xE3, 0x86, 0x73, 0x9D,  // #.....s.
                                /* 1028 */  0x26, 0xE8, 0x58, 0x3D, 0x72, 0xAE, 0xE1, 0xA8,  // &.X=r...
                                /* 1030 */  0x83, 0x80, 0x7D, 0x41, 0x3B, 0x68, 0xB0, 0x4C,  // ..}A;h.L
                                /* 1038 */  0x0E, 0xBF, 0xCB, 0x13, 0xF0, 0xD8, 0x3C, 0x13,  // ......<.
                                /* 1040 */  0xAB, 0xB9, 0x1B, 0xA0, 0xE6, 0xE1, 0x2B, 0x04,  // ......+.
                                /* 1048 */  0x46, 0xD7, 0x11, 0x02, 0x64, 0xFA, 0x6E, 0x10,  // F...d.n.
                                /* 1050 */  0x20, 0x47, 0xE7, 0x07, 0x39, 0x8F, 0x9D, 0xCB,  //  G..9...
                                /* 1058 */  0x19, 0x3B, 0x05, 0xF1, 0xD8, 0x1D, 0x75, 0xEC,  // .;....u.
                                /* 1060 */  0x68, 0x29, 0x20, 0x1A, 0xAC, 0xEF, 0x03, 0x58,  // h) ....X
                                /* 1068 */  0x82, 0xB1, 0xCE, 0x26, 0xA0, 0x90, 0x77, 0xC2,  // ...&..w.
                                /* 1070 */  0x01, 0xD1, 0x40, 0xD8, 0xA1, 0xCB, 0x13, 0xE1,  // ..@.....
                                /* 1078 */  0xE7, 0x11, 0x78, 0xFF, 0xFF, 0xB1, 0xF9, 0x3C,  // ..x....<
                                /* 1080 */  0x02, 0xBC, 0xC3, 0x9D, 0x47, 0x40, 0xA7, 0xE9,  // ....G@..
                                /* 1088 */  0x3C, 0x02, 0x3A, 0xB1, 0xE7, 0x11, 0xD0, 0x9D,  // <.:.....
                                /* 1090 */  0x26, 0x60, 0x5C, 0x0D, 0xF8, 0x15, 0x00, 0x77,  // &`\....w
                                /* 1098 */  0xB8, 0xD4, 0x39, 0x09, 0x7D, 0x3A, 0xF2, 0x51,  // ..9.}:.Q
                                /* 10A0 */  0x04, 0xD6, 0x8D, 0xD3, 0x07, 0x84, 0xB3, 0x32,  // .......2
                                /* 10A8 */  0x81, 0x65, 0x9E, 0x93, 0x50, 0xC7, 0x37, 0xCB,  // .e..P.7.
                                /* 10B0 */  0x3B, 0x3E, 0xA0, 0x04, 0xC1, 0x51, 0x10, 0x1F,  // ;>...Q..
                                /* 10B8 */  0x1F, 0x7C, 0x78, 0xF3, 0x39, 0x09, 0xEE, 0xF8,  // .|x.9...
                                /* 10C0 */  0x7D, 0x78, 0x80, 0x2F, 0x72, 0xC0, 0xA0, 0xF8,  // }x./r...
                                /* 10C8 */  0xFF, 0x9F, 0x45, 0x60, 0xCD, 0xD5, 0xC3, 0xC3,  // ..E`....
                                /* 10D0 */  0x1C, 0x8F, 0x00, 0x27, 0xC1, 0xCE, 0x0F, 0xA0,  // ...'....
                                /* 10D8 */  0xF3, 0x74, 0x7E, 0x00, 0xDD, 0x80, 0x9E, 0x1F,  // .t~.....
                                /* 10E0 */  0xC0, 0x7F, 0x02, 0xC0, 0x8A, 0x3C, 0x3D, 0xA0,  // .....<=.
                                /* 10E8 */  0x38, 0x2C, 0xFF, 0xB0, 0x0B, 0x69, 0x0E, 0x81,  // 8,...i..
                                /* 10F0 */  0xC2, 0xBF, 0xB6, 0xF8, 0x40, 0x4E, 0x0E, 0x0F,  // ....@N..
                                /* 10F8 */  0xA8, 0xF3, 0xB7, 0x0F, 0x10, 0x3E, 0x3C, 0x70,  // .....><p
                                /* 1100 */  0x61, 0x70, 0x14, 0xC4, 0x87, 0x07, 0x87, 0x3E,  // ap.....>
                                /* 1108 */  0x3C, 0x40, 0x0F, 0x79, 0x78, 0x80, 0xF6, 0xFF,  // <@.yx...
                                /* 1110 */  0x3F, 0x3C, 0xE0, 0x0E, 0x1F, 0xE0, 0x19, 0x1D,  // ?<......
                                /* 1118 */  0x76, 0x8E, 0x67, 0xD7, 0xD6, 0xF0, 0x10, 0xA7,  // v.g.....
                                /* 1120 */  0x52, 0xFC, 0x01, 0x02, 0xF0, 0x72, 0x9E, 0x01,  // R....r..
                                /* 1128 */  0xDF, 0x21, 0xCC, 0xE7, 0x19, 0xE0, 0x74, 0x06,  // .!....t.
                                /* 1130 */  0x00, 0x9F, 0xB8, 0x23, 0x04, 0x5A, 0xFA, 0x79,  // ...#.Z.y
                                /* 1138 */  0x06, 0x71, 0x7E, 0xC0, 0x80, 0x3C, 0xB6, 0x61,  // .q~..<.a
                                /* 1140 */  0x4F, 0xDD, 0x3E, 0x42, 0x70, 0x91, 0x14, 0x3A,  // O.>Bp..:
                                /* 1148 */  0x40, 0xFA, 0x08, 0xC1, 0xFF, 0xFF, 0xA2, 0xE0,  // @.......
                                /* 1150 */  0x28, 0x88, 0x8F, 0x10, 0x0E, 0x7C, 0x84, 0x80,  // (....|..
                                /* 1158 */  0x7E, 0x66, 0xF6, 0x11, 0x02, 0xFE, 0xF9, 0x03,  // ~f......
                                /* 1160 */  0x7C, 0xA3, 0xC5, 0xCE, 0x0F, 0x77, 0xA0, 0x01,  // |....w..
                                /* 1168 */  0x4C, 0x9A, 0x3A, 0xD0, 0x00, 0xBD, 0x13, 0x00,  // L.:.....
                                /* 1170 */  0xFC, 0xE3, 0x03, 0x9C, 0xB3, 0xAE, 0xFF, 0xFF,  // ........
                                /* 1178 */  0xC7, 0x07, 0xE0, 0x7F, 0xE0, 0xC6, 0x8D, 0x16,  // ........
                                /* 1180 */  0x3C, 0x27, 0x63, 0x7E, 0x7C, 0x00, 0x1C, 0xAB,  // <'c~|...
                                /* 1188 */  0x3A, 0x3E, 0x00, 0xAD, 0x13, 0x00, 0xFF, 0xFF,  // :>......
                                /* 1190 */  0x9F, 0x00, 0xE0, 0x4B, 0x3D, 0xEB, 0xA1, 0x23,  // ...K=..#
                                /* 1198 */  0x1C, 0xAF, 0x20, 0xE1, 0x3C, 0x6E, 0x1B, 0xC5,  // .. .<n..
                                /* 11A0 */  0x07, 0xD5, 0x87, 0x3F, 0x1F, 0xAF, 0xD9, 0xF9,  // ...?....
                                /* 11A8 */  0x81, 0x1F, 0x21, 0x7C, 0xC0, 0xF2, 0xF9, 0x81,  // ..!|....
                                /* 11B0 */  0x4B, 0x83, 0xA3, 0x20, 0x3E, 0x3F, 0x38, 0xF6,  // K.. >?8.
                                /* 11B8 */  0xF9, 0x01, 0xFA, 0xC9, 0xD8, 0xA7, 0x19, 0xF8,  // ........
                                /* 11C0 */  0x72, 0x0F, 0x43, 0xA0, 0x9D, 0x1E, 0x06, 0xE6,  // r.C.....
                                /* 11C8 */  0xF8, 0xD8, 0x6D, 0x08, 0xC6, 0x11, 0x02, 0x70,  // ..m....p
                                /* 11D0 */  0x12, 0xEF, 0x08, 0x01, 0x3A, 0x57, 0x47, 0x08,  // ....:WG.
                                /* 11D8 */  0x68, 0xFF, 0xFF, 0x23, 0x04, 0xBC, 0x43, 0x00,  // h..#..C.
                                /* 11E0 */  0x70, 0x3B, 0xD3, 0xC0, 0x3C, 0x42, 0xE0, 0x87,  // p;..<B..
                                /* 11E8 */  0xF8, 0x36, 0xCA, 0xCF, 0x34, 0x80, 0x9F, 0xE1,  // .6..4...
                                /* 11F0 */  0xC2, 0x99, 0x1F, 0xE6, 0x4C, 0x03, 0x98, 0xF9,  // ....L...
                                /* 11F8 */  0xFF, 0x9F, 0x20, 0xC0, 0x05, 0xEA, 0x33, 0x0D,  // .. ...3.
                                /* 1200 */  0x70, 0x3B, 0x01, 0xC0, 0x3F, 0xEF, 0xC1, 0x3C,  // p;..?..<
                                /* 1208 */  0x3E, 0x00, 0xFB, 0xF3, 0x1E, 0xB8, 0x8F, 0x0F,  // >.......
                                /* 1210 */  0xC0, 0xFF, 0xFF, 0x7F, 0x7C, 0x00, 0x8E, 0x17,  // ....|...
                                /* 1218 */  0xA9, 0xE7, 0x3D, 0x60, 0x77, 0x02, 0x80, 0x2F,  // ..=`w../
                                /* 1220 */  0xF6, 0xF8, 0x80, 0x3A, 0xA2, 0xFA, 0x84, 0xE5,  // ...:....
                                /* 1228 */  0xE3, 0x03, 0xAC, 0x2B, 0x05, 0x9B, 0x88, 0x61,  // ...+...a
                                /* 1230 */  0x7A, 0x3E, 0x11, 0x03, 0x72, 0xC6, 0x0B, 0x67,  // z>..r..g
                                /* 1238 */  0x7E, 0xD8, 0x23, 0x04, 0x58, 0xFE, 0xFF, 0x47,  // ~.#.X..G
                                /* 1240 */  0x08, 0xE0, 0x7E, 0x08, 0xF1, 0x11, 0x02, 0x5C,  // ..~....\
                                /* 1248 */  0xBA, 0x8E, 0x10, 0xA0, 0x13, 0x7C, 0x84, 0x00,  // .....|..
                                /* 1250 */  0x0A, 0xA7, 0x00, 0xB8, 0xA7, 0x74, 0xDC, 0x31,  // .....t.1
                                /* 1258 */  0xC2, 0x01, 0x8E, 0x11, 0x88, 0xE9, 0xC6, 0xEC,  // ........
                                /* 1260 */  0x1D, 0x45, 0x63, 0x38, 0xEA, 0x13, 0x3C, 0x0A,  // .Ec8..<.
                                /* 1268 */  0xC3, 0xC7, 0x79, 0xAA, 0x40, 0x1E, 0x23, 0x50,  // ..y.@.#P
                                /* 1270 */  0xA7, 0x08, 0x9F, 0x6B, 0x7C, 0x8C, 0xE0, 0xB2,  // ...k|...
                                /* 1278 */  0xE0, 0x28, 0x88, 0x8F, 0x11, 0x8E, 0x7C, 0x8C,  // .(....|.
                                /* 1280 */  0x80, 0x1E, 0xF1, 0x18, 0x01, 0x8A, 0x03, 0xC1,  // ........
                                /* 1288 */  0x31, 0xC3, 0xFA, 0xFF, 0x8F, 0x19, 0xDE, 0x04,  // 1.......
                                /* 1290 */  0x31, 0x30, 0x47, 0x88, 0x9B, 0x30, 0xEE, 0x14,  // 10G..0..
                                /* 1298 */  0x01, 0x38, 0x89, 0x76, 0x8A, 0x00, 0x9D, 0xAF,  // .8.v....
                                /* 12A0 */  0x53, 0x04, 0xE8, 0x8E, 0x00, 0xC0, 0xE9, 0x08,  // S.......
                                /* 12A8 */  0x81, 0xE3, 0xB0, 0xFC, 0x23, 0x04, 0x0A, 0x37,  // ....#..7
                                /* 12B0 */  0xA6, 0x8F, 0x08, 0x27, 0x12, 0xE7, 0xB0, 0x4E,  // ...'...N
                                /* 12B8 */  0xE3, 0x19, 0x30, 0xD0, 0x63, 0x0D, 0x70, 0xF9,  // ..0.c.p.
                                /* 12C0 */  0xFF, 0x1F, 0x6B, 0x80, 0x17, 0xC8, 0x71, 0xBC,  // ..k...q.
                                /* 12C8 */  0x0C, 0xF8, 0xF6, 0xC1, 0x86, 0x88, 0x05, 0x3A,  // .......:
                                /* 12D0 */  0x45, 0xCC, 0x09, 0x02, 0x70, 0x12, 0xEE, 0x04,  // E...p...
                                /* 12D8 */  0x01, 0xBA, 0xA1, 0xF9, 0x04, 0x01, 0xAE, 0x33,  // .......3
                                /* 12E0 */  0x00, 0xF0, 0x3A, 0x6A, 0xE1, 0x86, 0xE1, 0x43,  // ..:j...C
                                /* 12E8 */  0x8D, 0xCF, 0xC6, 0x30, 0x7C, 0x5E, 0x04, 0x88,  // ...0|^..
                                /* 12F0 */  0xE8, 0x93, 0x03, 0xFD, 0xFF, 0x43, 0xF8, 0x0C,  // .....C..
                                /* 12F8 */  0xE1, 0x43, 0x8D, 0x0F, 0x10, 0x5C, 0x1E, 0x1C,  // .C...\..
                                /* 1300 */  0x05, 0xF1, 0x01, 0xC2, 0xD1, 0x0F, 0x10, 0xD0,  // ........
                                /* 1308 */  0xA3, 0x1E, 0x20, 0x40, 0x31, 0x5E, 0x8F, 0x16,  // .. @1^..
                                /* 1310 */  0x1C, 0xF3, 0xAA, 0xFD, 0xEE, 0x41, 0x11, 0xC3,  // .....A..
                                /* 1318 */  0x19, 0xC7, 0x17, 0x58, 0x3C, 0x50, 0xF0, 0x38,  // ...X<P.8
                                /* 1320 */  0xB1, 0x43, 0x54, 0x8C, 0xA8, 0x93, 0x40, 0x88,  // .CT...@.
                                /* 1328 */  0x68, 0x2F, 0xD8, 0xCF, 0x10, 0x80, 0x95, 0x73,  // h/.....s
                                /* 1330 */  0x91, 0xCF, 0x10, 0xE0, 0x32, 0x76, 0x86, 0x00,  // ....2v..
                                /* 1338 */  0xDD, 0x31, 0x00, 0xFC, 0xFF, 0xFF, 0x63, 0x00,  // .1....c.
                                /* 1340 */  0x38, 0x8E, 0xA3, 0xB8, 0x91, 0x58, 0xF8, 0xC1,  // 8....X..
                                /* 1348 */  0x06, 0x71, 0x86, 0xF0, 0xE9, 0x1D, 0x77, 0xCC,  // .q....w.
                                /* 1350 */  0x02, 0x0C, 0x0D, 0x19, 0xD6, 0x5D, 0xDF, 0x23,  // .....].#
                                /* 1358 */  0xC4, 0x1C, 0xB3, 0x00, 0x87, 0xF3, 0xF1, 0x11,  // ........
                                /* 1360 */  0x02, 0x1C, 0xFF, 0xFF, 0x63, 0x16, 0x78, 0x8F,  // ....c.x.
                                /* 1368 */  0x00, 0xE0, 0x38, 0x3E, 0xC0, 0x39, 0x04, 0xB2,  // ..8>.9..
                                /* 1370 */  0xE3, 0x03, 0xB0, 0x3E, 0xA8, 0xE3, 0x06, 0x0B,  // ...>....
                                /* 1378 */  0x9E, 0x73, 0x35, 0x3F, 0x3E, 0x00, 0x5E, 0xFF,  // .s5?>.^.
                                /* 1380 */  0xFF, 0xC7, 0x07, 0xFC, 0x80, 0x1E, 0x1F, 0x80,  // ........
                                /* 1388 */  0xD5, 0x11, 0x00, 0x5C, 0x52, 0x8F, 0x0F, 0xA8,  // ...\R...
                                /* 1390 */  0x31, 0x39, 0xC4, 0xF1, 0x01, 0x31, 0xDE, 0xC8,  // 19...1..
                                /* 1398 */  0x4F, 0x5C, 0x07, 0x17, 0xE5, 0x90, 0x0F, 0xC3,  // O\......
                                /* 13A0 */  0x20, 0xCF, 0x5C, 0x9E, 0xD6, 0x59, 0x3C, 0x09,  //  .\..Y<.
                                /* 13A8 */  0xC6, 0x39, 0x0C, 0x9F, 0xFB, 0x80, 0xE7, 0x19,  // .9......
                                /* 13B0 */  0x02, 0x77, 0x48, 0x03, 0xCF, 0x88, 0xF9, 0x0C,  // .wH.....
                                /* 13B8 */  0x31, 0xA7, 0x46, 0x0F, 0x11, 0x37, 0x70, 0x4F,  // 1.F..7pO
                                /* 13C0 */  0x11, 0x73, 0x88, 0x00, 0x8E, 0xFF, 0xFF, 0x73,  // .s.....s
                                /* 13C8 */  0x1F, 0xF0, 0x93, 0x76, 0xEE, 0x03, 0x5A, 0x67,  // ...v..Zg
                                /* 13D0 */  0x00, 0xF0, 0x9D, 0x8D, 0xE1, 0x8C, 0x80, 0x4D,  // .......M
                                /* 13D8 */  0xE4, 0x99, 0xC6, 0x87, 0x08, 0xB8, 0xE7, 0x1A,  // ........
                                /* 13E0 */  0xC0, 0xCF, 0x04, 0xD9, 0x19, 0x02, 0xAC, 0xFF,  // ........
                                /* 13E8 */  0xFF, 0x73, 0x0D, 0xE0, 0xCA, 0xDA, 0xB9, 0x06,  // .s......
                                /* 13F0 */  0xE8, 0x1D, 0x01, 0xC0, 0x91, 0x62, 0x69, 0x3A,  // .....bi:
                                /* 13F8 */  0x42, 0x70, 0x49, 0x10, 0x4A, 0xF5, 0x5A, 0xD0,  // BpI.J.Z.
                                /* 1400 */  0x49, 0xD4, 0xE3, 0x3C, 0x0E, 0x43, 0x3F, 0x89,  // I..<.C?.
                                /* 1408 */  0x1A, 0x25, 0xF2, 0x11, 0xD4, 0x7A, 0x59, 0x10,  // .%...zY.
                                /* 1410 */  0xFE, 0x4B, 0xCE, 0xC3, 0x3A, 0xCB, 0x00, 0xAA,  // .K..:...
                                /* 1418 */  0xA3, 0x83, 0x4F, 0x0E, 0x56, 0x4F, 0x21, 0x5D,  // ..O.VO!]
                                /* 1420 */  0x27, 0x08, 0x94, 0x92, 0x13, 0x04, 0x05, 0x31,  // '......1
                                /* 1428 */  0xA0, 0x63, 0x9E, 0x20, 0xD0, 0x07, 0x07, 0x36,  // .c. ...6
                                /* 1430 */  0xCB, 0xE2, 0x41, 0x14, 0xEC, 0x00, 0x41, 0x07,  // ..A...A.
                                /* 1438 */  0xE9, 0x21, 0x73, 0x0D, 0x07, 0x08, 0x04, 0x6C,  // .!s....l
                                /* 1440 */  0x91, 0xA3, 0x05, 0xCD, 0xC0, 0x8E, 0xDE, 0x13,  // ........
                                /* 1448 */  0xFB, 0xFF, 0x3F, 0xE9, 0xFB, 0x26, 0x60, 0xB0,  // ..?..&`.
                                /* 1450 */  0x98, 0x0F, 0x8D, 0xC6, 0x0A, 0xF5, 0x10, 0x92,  // ........
                                /* 1458 */  0xA0, 0x9A, 0x53, 0x01, 0x6A, 0x20, 0x3E, 0x3C,  // ..S.j ><
                                /* 1460 */  0x60, 0x74, 0xDD, 0x1D, 0x40, 0xA6, 0xEF, 0xEC,  // `t..@...
                                /* 1468 */  0x00, 0x72, 0x74, 0x7E, 0x83, 0x04, 0x3C, 0xDC,  // .rt~..<.
                                /* 1470 */  0x14, 0x18, 0xCC, 0x73, 0x83, 0x8F, 0x57, 0x46,  // ...s..WF
                                /* 1478 */  0x09, 0x19, 0xE3, 0x09, 0xEB, 0x55, 0x81, 0x5F,  // .....U._
                                /* 1480 */  0x00, 0x70, 0x97, 0x11, 0x78, 0xF7, 0x29, 0x72,  // .p..x.)r
                                /* 1488 */  0x19, 0x01, 0xDA, 0xD7, 0x08, 0x5F, 0x46, 0xB0,  // ....._F.
                                /* 1490 */  0xFF, 0xFF, 0xCB, 0x08, 0x6C, 0x6D, 0x97, 0x11,  // ....lm..
                                /* 1498 */  0xD0, 0x61, 0xBD, 0x41, 0x82, 0x6D, 0x2E, 0x9E,  // .a.A.m..
                                /* 14A0 */  0x3D, 0xEE, 0x12, 0x60, 0x98, 0x18, 0xEF, 0x01,  // =..`....
                                /* 14A8 */  0xBE, 0x83, 0x60, 0x2E, 0x24, 0x9E, 0xEA, 0xA3,  // ..`.$...
                                /* 14B0 */  0x00, 0x8E, 0xC0, 0xF7, 0x48, 0x1C, 0x87, 0x6F,  // ....H..o
                                /* 14B8 */  0xB5, 0x98, 0xE9, 0x9E, 0x85, 0xD1, 0x0F, 0x2C,  // .......,
                                /* 14C0 */  0xB0, 0x67, 0x79, 0x90, 0x86, 0x66, 0x77, 0x36,  // .gy..fw6
                                /* 14C8 */  0x5F, 0x91, 0xB8, 0x44, 0x0A, 0x09, 0x3C, 0x46,  // _..D..<F
                                /* 14D0 */  0xA0, 0x24, 0xC1, 0x51, 0x10, 0x1F, 0x23, 0x1C,  // .$.Q..#.
                                /* 14D8 */  0xF7, 0x18, 0x01, 0x3D, 0xDE, 0x31, 0x02, 0x14,  // ...=.1..
                                /* 14E0 */  0xF7, 0x82, 0xC7, 0x08, 0x30, 0x8D, 0xCD, 0x43,  // ....0..C
                                /* 14E8 */  0x3C, 0x3E, 0x8F, 0xD6, 0xE3, 0x63, 0x40, 0xE7,  // <>...c@.
                                /* 14F0 */  0x87, 0xB9, 0x20, 0x01, 0xAB, 0xFF, 0xFF, 0x05,  // .. .....
                                /* 14F8 */  0x09, 0xD8, 0x7A, 0xBB, 0xD5, 0x02, 0xBD, 0x23,  // ..z....#
                                /* 1500 */  0x00, 0x38, 0x8E, 0x0F, 0xB8, 0x53, 0x80, 0xEF,  // .8...S..
                                /* 1508 */  0x69, 0x1E, 0x00, 0x53, 0x38, 0x26, 0x5D, 0x25,  // i..S8&]%
                                /* 1510 */  0x4E, 0xF4, 0x5D, 0xC2, 0xC0, 0x98, 0x3B, 0x3F,  // N.]...;?
                                /* 1518 */  0xBF, 0x3D, 0xF2, 0xE3, 0x8C, 0x4F, 0x0F, 0x5C,  // .=...O.\
                                /* 1520 */  0x08, 0x1C, 0x05, 0xF1, 0xE9, 0xC1, 0x77, 0x47,  // ......wG
                                /* 1528 */  0x9F, 0x1E, 0xE0, 0x86, 0x3A, 0x3D, 0x80, 0x42,  // ....:=.B
                                /* 1530 */  0xDC, 0x25, 0x1D, 0x44, 0xA7, 0x0E, 0x1F, 0x1C,  // .%.D....
                                /* 1538 */  0xC0, 0xFF, 0xFF, 0x3F, 0xCC, 0x00, 0x36, 0xC6,  // ...?..6.
                                /* 1540 */  0xEB, 0xC3, 0x0C, 0x70, 0x1C, 0x3F, 0x43, 0x7D,  // ...p.?C}
                                /* 1548 */  0x4C, 0x7B, 0xD2, 0x37, 0x70, 0xAC, 0x27, 0x5A,  // L{.7p.'Z
                                /* 1550 */  0x2C, 0xCE, 0x43, 0x98, 0x31, 0x5E, 0x1A, 0x38,  // ,.C.1^.8
                                /* 1558 */  0x81, 0x6F, 0xB5, 0x78, 0xC9, 0x17, 0x48, 0x04,  // .o.x..H.
                                /* 1560 */  0xE4, 0x59, 0xB1, 0x39, 0x3D, 0xFD, 0xFB, 0x86,  // .Y.9=...
                                /* 1568 */  0x73, 0x66, 0x0C, 0xEE, 0x14, 0x2A, 0x3E, 0x4E,  // sf...*>N
                                /* 1570 */  0xE0, 0x8E, 0x10, 0xA8, 0x13, 0x84, 0x45, 0x1D,  // ......E.
                                /* 1578 */  0x21, 0x50, 0x32, 0xE0, 0x28, 0x88, 0x8F, 0x10,  // !P2.(...
                                /* 1580 */  0x3E, 0x5D, 0xF9, 0x08, 0x01, 0x37, 0xD2, 0x0D,  // >]...7..
                                /* 1588 */  0x12, 0x14, 0xD7, 0x51, 0x8F, 0x1B, 0x0C, 0xFF,  // ...Q....
                                /* 1590 */  0x7F, 0x82, 0xB7, 0x80, 0x07, 0x1F, 0xCC, 0x09,  // ........
                                /* 1598 */  0x02, 0x70, 0x72, 0x24, 0xF2, 0x09, 0x02, 0x5C,  // .pr$...\
                                /* 15A0 */  0xE6, 0x4E, 0x10, 0xA0, 0x93, 0x7F, 0x73, 0x04,  // .N....s.
                                /* 15A8 */  0xDD, 0x09, 0x82, 0x23, 0x3E, 0x28, 0x84, 0x7C,  // ...#>(.|
                                /* 15B0 */  0x92, 0xF1, 0x20, 0x0C, 0xF4, 0x08, 0xC0, 0xCF,  // .. .....
                                /* 15B8 */  0x0F, 0xFC, 0xD6, 0x00, 0xEB, 0x72, 0x82, 0x3B,  // .....r.;
                                /* 15C0 */  0x45, 0xC0, 0x3A, 0x5B, 0xB0, 0x53, 0x04, 0xF0,  // E.:[.S..
                                /* 15C8 */  0xFC, 0xFF, 0x9F, 0x22, 0xC0, 0x70, 0xAE, 0xC1,  // ...".p..
                                /* 15D0 */  0x9D, 0x22, 0x00, 0xEF, 0xEA, 0x4E, 0x11, 0x40,  // ."...N.@
                                /* 15D8 */  0xEB, 0x58, 0x83, 0x3F, 0x45, 0x00, 0x07, 0xB1,  // .X.?E...
                                /* 15E0 */  0xA7, 0x08, 0x94, 0x3C, 0x08, 0x89, 0x3F, 0x45,  // ...<..?E
                                /* 15E8 */  0x20, 0xCE, 0xAD, 0xAF, 0x0A, 0xC7, 0x11, 0xF4,  //  .......
                                /* 15F0 */  0x6D, 0x27, 0x88, 0x91, 0xCE, 0xC1, 0xFF, 0xFF,  // m'......
                                /* 15F8 */  0xBB, 0x60, 0xF4, 0xB7, 0x08, 0xCF, 0x2A, 0xC2,  // .`....*.
                                /* 1600 */  0xBB, 0xA0, 0x31, 0x1F, 0x6F, 0x9F, 0xFF, 0x3C,  // ..1.o..<
                                /* 1608 */  0xB7, 0x23, 0xE3, 0x07, 0x2E, 0xC0, 0xCB, 0x9D,  // .#......
                                /* 1610 */  0xF1, 0xD0, 0xB0, 0x07, 0x2E, 0xC0, 0xA1, 0xBB,  // ........
                                /* 1618 */  0x03, 0x17, 0xD0, 0x1B, 0xCB, 0x0B, 0x03, 0x16,  // ........
                                /* 1620 */  0xE9, 0xFF, 0xFF, 0x18, 0xE1, 0x13, 0x83, 0x0F,  // ........
                                /* 1628 */  0x5C, 0xBE, 0x31, 0xE0, 0xEE, 0xA2, 0x3E, 0x08,  // \.1...>.
                                /* 1630 */  0x60, 0x0F, 0xA3, 0x78, 0xC1, 0xC7, 0x08, 0xC4,  // `..x....
                                /* 1638 */  0xAC, 0x63, 0x87, 0xAF, 0x71, 0x12, 0xC4, 0xF8,  // .c..q...
                                /* 1640 */  0xC1, 0x94, 0x00, 0x1F, 0x51, 0xF3, 0x47, 0x00,  // ....Q.G.
                                /* 1648 */  0x9F, 0x1F, 0x50, 0xD2, 0x28, 0x74, 0x80, 0xF0,  // ..P.(t..
                                /* 1650 */  0xF9, 0x81, 0x4B, 0x81, 0xA3, 0x20, 0xBE, 0x6D,  // ..K.. .m
                                /* 1658 */  0xC3, 0x39, 0x3F, 0xE0, 0x63, 0x9D, 0x1F, 0x40,  // .9?.c..@
                                /* 1660 */  0x71, 0xD8, 0xF0, 0xA0, 0xC1, 0x31, 0xD9, 0x63,  // q....1.c
                                /* 1668 */  0x83, 0x71, 0x80, 0x00, 0x9C, 0x9C, 0x8E, 0x7C,  // .q.....|
                                /* 1670 */  0x80, 0x00, 0xD7, 0x80, 0x7D, 0x80, 0x00, 0x17,  // ....}...
                                /* 1678 */  0xC8, 0xFF, 0xFF, 0x01, 0x02, 0x6C, 0x57, 0x05,  // .....lW.
                                /* 1680 */  0x76, 0xB4, 0xF1, 0xB5, 0x98, 0x4F, 0xFB, 0xCD,  // v....O..
                                /* 1688 */  0xC6, 0x17, 0x83, 0xE7, 0xFA, 0x37, 0x64, 0xDF,  // .....7d.
                                /* 1690 */  0x02, 0x60, 0x10, 0x94, 0x7B, 0x7C, 0x40, 0x1D,  // .`..{|@.
                                /* 1698 */  0x01, 0x7C, 0xA8, 0xC1, 0x8C, 0xF9, 0xDD, 0xD4,  // .|......
                                /* 16A0 */  0xD0, 0x61, 0xDF, 0x28, 0x7C, 0xC7, 0x39, 0xE7,  // .a.(|.9.
                                /* 16A8 */  0x30, 0x0F, 0xCC, 0xC6, 0x39, 0x37, 0x8F, 0xE5,  // 0...97..
                                /* 16B0 */  0x35, 0xC1, 0x83, 0xF3, 0x81, 0x9D, 0x1D, 0x21,  // 5......!
                                /* 16B8 */  0xF8, 0xA1, 0xC6, 0xC7, 0x2D, 0x1F, 0x21, 0xB8,  // ....-.!.
                                /* 16C0 */  0x1C, 0x38, 0x0A, 0xE2, 0x23, 0x84, 0xA3, 0x1E,  // .8..#...
                                /* 16C8 */  0x21, 0xA0, 0x9F, 0x6E, 0x7D, 0x84, 0x80, 0x7F,  // !..n}...
                                /* 16D0 */  0x5D, 0xF0, 0xB0, 0xC1, 0x01, 0x73, 0x72, 0xB8,  // ]....sr.
                                /* 16D8 */  0x61, 0xB3, 0xD1, 0xF1, 0x43, 0x04, 0xE0, 0x24,  // a...C..$
                                /* 16E0 */  0xE8, 0x21, 0x02, 0xC2, 0xFF, 0xFF, 0x10, 0x01,  // .!......
                                /* 16E8 */  0xDB, 0xDE, 0x21, 0x02, 0x74, 0x60, 0x0F, 0x11,  // ..!.t`..
                                /* 16F0 */  0x60, 0x1B, 0x59, 0xA0, 0xC7, 0x02, 0x5F, 0x8C,  // `.Y..._.
                                /* 16F8 */  0x3D, 0x7E, 0xCC, 0x8D, 0x9D, 0x1F, 0x1C, 0xF0,  // =~......
                                /* 1700 */  0x48, 0x2F, 0x0E, 0xD8, 0x63, 0x83, 0xCE, 0xC8,  // H/..c...
                                /* 1708 */  0x68, 0xD1, 0x27, 0x06, 0x0D, 0xEC, 0x64, 0x4E,  // h.'...dN
                                /* 1710 */  0xF8, 0xB4, 0x1F, 0x6A, 0x9E, 0x53, 0x8D, 0xF1,  // ...j.S..
                                /* 1718 */  0x6A, 0xE1, 0xC3, 0xAA, 0x09, 0x2C, 0xF3, 0x08,  // j....,..
                                /* 1720 */  0x81, 0x3A, 0xD7, 0xF8, 0x0C, 0xE1, 0x23, 0x04,  // .:....#.
                                /* 1728 */  0x17, 0x04, 0x47, 0x41, 0x7C, 0x84, 0x70, 0xD8,  // ..GA|.p.
                                /* 1730 */  0x23, 0x04, 0xF4, 0x70, 0x47, 0x08, 0x50, 0x5C,  // #..pG.P\
                                /* 1738 */  0xC6, 0x0E, 0x1A, 0x2C, 0x83, 0xF3, 0x84, 0x7D,  // ...,...}
                                /* 1740 */  0x63, 0x33, 0x46, 0xD7, 0x17, 0x7E, 0xC4, 0x14,  // c3F..~..
                                /* 1748 */  0x0E, 0xF5, 0x19, 0x02, 0xD8, 0xFD, 0xFF, 0xCF,  // ........
                                /* 1750 */  0x59, 0xC0, 0x54, 0xDF, 0x39, 0x0B, 0x68, 0x0D,  // Y.T.9.h.
                                /* 1758 */  0xEF, 0xEC, 0x31, 0x47, 0x40, 0x3E, 0xBB, 0x33,  // ..1G@>.3
                                /* 1760 */  0x78, 0x33, 0x88, 0xE9, 0x13, 0x96, 0xC1, 0x7C,  // x3.....|
                                /* 1768 */  0xA6, 0x89, 0x13, 0xCD, 0xE7, 0x07, 0x5F, 0x24,  // ......_$
                                /* 1770 */  0x7C, 0xDA, 0x32, 0x9A, 0xAF, 0x0D, 0x4C, 0xD8,  // |.2...L.
                                /* 1778 */  0x11, 0x02, 0x25, 0xE9, 0x08, 0x81, 0xBA, 0xF6,  // ..%.....
                                /* 1780 */  0x61, 0x91, 0x1E, 0x2F, 0xCE, 0xFA, 0x21, 0xE0,  // a../..!.
                                /* 1788 */  0x5D, 0x10, 0x23, 0xF1, 0x10, 0x81, 0x3A, 0xD5,  // ].#...:.
                                /* 1790 */  0xF8, 0xA4, 0xE5, 0x43, 0x04, 0x17, 0x03, 0x47,  // ...C...G
                                /* 1798 */  0x41, 0x7C, 0x88, 0xF0, 0x79, 0xC4, 0x87, 0x08,  // A|..y...
                                /* 17A0 */  0xB8, 0xC1, 0x0E, 0x11, 0xA0, 0x38, 0x1F, 0xE0,  // .....8..
                                /* 17A8 */  0x46, 0x0D, 0x77, 0x6A, 0xFC, 0x02, 0x89, 0xC1,  // F.wj....
                                /* 17B0 */  0x7C, 0x26, 0x85, 0xF5, 0xFF, 0x3F, 0x42, 0x00,  // |&...?B.
                                /* 17B8 */  0x06, 0x0E, 0x45, 0x3E, 0x42, 0x80, 0xCB, 0xDF,  // ..E>B...
                                /* 17C0 */  0x11, 0x02, 0x74, 0xA3, 0x39, 0x7A, 0xF0, 0x1C,  // ..t.9z..
                                /* 17C8 */  0xD7, 0x7D, 0xE3, 0xC3, 0x5F, 0x01, 0x60, 0x1C,  // .}.._.`.
                                /* 17D0 */  0x43, 0xC9, 0xE1, 0x01, 0x2D, 0xFD, 0x78, 0x8C,  // C...-.x.
                                /* 17D8 */  0x3A, 0x39, 0x60, 0xC7, 0xFA, 0x16, 0x8F, 0x21,  // :9`....!
                                /* 17E0 */  0x28, 0xF4, 0xF0, 0x80, 0x3A, 0x3F, 0xF8, 0x44,  // (...:?.D
                                /* 17E8 */  0xE3, 0xC3, 0x03, 0x97, 0x04, 0x47, 0x41, 0x7C,  // .....GA|
                                /* 17F0 */  0x78, 0xF0, 0xC9, 0xD6, 0x87, 0x07, 0xB8, 0xF1,  // x.......
                                /* 17F8 */  0x0E, 0x0F, 0xA0, 0xB8, 0x12, 0x1C, 0x2F, 0xFC,  // ....../.
                                /* 1800 */  0xFF, 0xFF, 0xE1, 0x01, 0x3F, 0x3C, 0x8E, 0x72,  // ....?<.r
                                /* 1808 */  0x7A, 0xD8, 0xF3, 0x03, 0x60, 0x71, 0x38, 0x3E,  // z...`q8>
                                /* 1810 */  0x3F, 0x00, 0xA7, 0x43, 0x16, 0x3F, 0x02, 0x80,  // ?..C.?..
                                /* 1818 */  0x43, 0xE2, 0xD2, 0x74, 0x7E, 0xC0, 0xC5, 0x78,  // C..t~..x
                                /* 1820 */  0x2B, 0xE8, 0x1C, 0xCF, 0xCE, 0x0F, 0xB0, 0x45,  // +......E
                                /* 1828 */  0x83, 0xEA, 0xE0, 0xE0, 0x73, 0x83, 0x4F, 0x81,  // ....s.O.
                                /* 1830 */  0x3E, 0x3A, 0xF8, 0xFC, 0xC0, 0x45, 0x9C, 0x1F,  // >:...E..
                                /* 1838 */  0x28, 0x88, 0x01, 0x9D, 0xF0, 0xFC, 0x80, 0x56,  // (......V
                                /* 1840 */  0x71, 0x2A, 0x47, 0x5E, 0xD5, 0xF9, 0x24, 0xFD,  // q*G^..$.
                                /* 1848 */  0xFF, 0x9F, 0x32, 0xD7, 0x00, 0xA1, 0x9B, 0x98,  // ..2.....
                                /* 1850 */  0x81, 0x7D, 0x03, 0x05, 0xCF, 0x5C, 0x61, 0x10,  // .}...\a.
                                /* 1858 */  0x54, 0x73, 0x25, 0x40, 0x8D, 0xC2, 0x37, 0x07,  // Ts%@..7.
                                /* 1860 */  0x8C, 0xAE, 0x93, 0x03, 0xC8, 0xEE, 0x4E, 0xBE,  // ......N.
                                /* 1868 */  0x38, 0x80, 0x19, 0x9D, 0x1F, 0x8A, 0x00, 0x0F,  // 8.......
                                /* 1870 */  0x77, 0x34, 0x1F, 0x11, 0x7C, 0xC6, 0xF3, 0x55,  // w4..|..U
                                /* 1878 */  0x8F, 0xCD, 0x9D, 0x9D, 0x42, 0xE0, 0x9D, 0xC5,  // ....B...
                                /* 1880 */  0xC9, 0x29, 0x04, 0x48, 0xFE, 0xFF, 0x4F, 0x21,  // .).H..O!
                                /* 1888 */  0x30, 0xEE, 0x0D, 0x3E, 0x85, 0x80, 0x6B, 0x0A,  // 0..>..k.
                                /* 1890 */  0x4F, 0x21, 0x60, 0x3B, 0x87, 0x82, 0xE7, 0xD4,  // O!`;....
                                /* 1898 */  0xC1, 0x4E, 0x21, 0x70, 0x4E, 0xFA, 0x3A, 0x81,  // .N!pN.:.
                                /* 18A0 */  0xA0, 0xA3, 0x3C, 0x12, 0x34, 0xE6, 0x67, 0x48,  // ..<.4.gH
                                /* 18A8 */  0xE3, 0xBF, 0xA6, 0x3D, 0xAB, 0x1D, 0x45, 0x68,  // ...=..Eh
                                /* 18B0 */  0x76, 0x1E, 0xC1, 0x0B, 0x3F, 0x81, 0xA0, 0x24,  // v...?..$
                                /* 18B8 */  0x53, 0xE8, 0x8C, 0x0F, 0x37, 0xE5, 0xC1, 0x01,  // S...7...
                                /* 18C0 */  0xAD, 0x03, 0x44, 0x33, 0x38, 0x08, 0xDC, 0x1D,  // ..D38...
                                /* 18C8 */  0x9F, 0x1F, 0x41, 0xE0, 0xDD, 0x1B, 0xC0, 0x33,  // ..A....3
                                /* 18D0 */  0x37, 0x7E, 0x9F, 0xF2, 0x40, 0x70, 0x67, 0x10,  // 7~..@pg.
                                /* 18D8 */  0xE0, 0xF8, 0xFF, 0x3F, 0x83, 0x00, 0xEC, 0x1A,  // ...?....
                                /* 18E0 */  0xAE, 0xCF, 0x20, 0xE0, 0x52, 0x78, 0x06, 0x01,  // .. .Rx..
                                /* 18E8 */  0xDD, 0x80, 0x8E, 0x1E, 0x2C, 0xE7, 0x0E, 0xDC,  // ....,...
                                /* 18F0 */  0xE8, 0x1F, 0x26, 0x30, 0x73, 0xFB, 0xFF, 0x3F,  // ..&0s..?
                                /* 18F8 */  0x78, 0x60, 0x65, 0x1D, 0x82, 0xD1, 0xB2, 0x8F,  // x`e.....
                                /* 1900 */  0x9C, 0xF4, 0x24, 0x6A, 0xD0, 0x27, 0x62, 0x8F,  // ..$j.'b.
                                /* 1908 */  0xC7, 0xB3, 0x3F, 0xE3, 0x83, 0x08, 0xF3, 0x90,  // ..?.....
                                /* 1910 */  0x07, 0xB8, 0x39, 0x23, 0xFA, 0x10, 0xEC, 0xD9,  // ..9#....
                                /* 1918 */  0x61, 0x80, 0x0E, 0xEF, 0x29, 0xDA, 0xD3, 0x63,  // a...)..c
                                /* 1920 */  0x87, 0x3C, 0xC0, 0x4A, 0xAC, 0xC3, 0x03, 0xE8,  // .<.J....
                                /* 1928 */  0xCE, 0xB7, 0x3E, 0x3C, 0x80, 0xEB, 0x00, 0x00,  // ..><....
                                /* 1930 */  0xE3, 0xFF, 0x7F, 0x00, 0x00, 0xDF, 0x30, 0x1E,  // ......0.
                                /* 1938 */  0x00, 0xB8, 0xB8, 0xB3, 0x03, 0x6A, 0x0C, 0x16,  // .....j..
                                /* 1940 */  0x7E, 0xE2, 0x44, 0x1C, 0x24, 0xF8, 0x7D, 0xFB,  // ~.D.$.}.
                                /* 1948 */  0xF0, 0x0E, 0x8D, 0x89, 0x3D, 0x3A, 0xA0, 0x4E,  // ....=:.N
                                /* 1950 */  0xE4, 0x16, 0x79, 0x74, 0x40, 0x9D, 0x88, 0x0C,  // ..yt@...
                                /* 1958 */  0x66, 0x10, 0x1F, 0x1D, 0x1C, 0x79, 0x64, 0xA8,  // f....yd.
                                /* 1960 */  0xA3, 0x03, 0x9C, 0x88, 0x47, 0x07, 0x50, 0x1C,  // ....G.P.
                                /* 1968 */  0x0F, 0xC1, 0x77, 0xE9, 0xC0, 0x8C, 0xEE, 0x65,  // ..w....e
                                /* 1970 */  0xDE, 0xA3, 0xEB, 0x1D, 0x84, 0x1C, 0x10, 0x7D,  // .......}
                                /* 1978 */  0x6C, 0xE0, 0x87, 0x07, 0x70, 0x1F, 0x93, 0x3C,  // l...p..<
                                /* 1980 */  0x1E, 0x9F, 0x01, 0x7C, 0xE0, 0x04, 0xEE, 0x93,  // ...|....
                                /* 1988 */  0xF3, 0xE1, 0x01, 0xFB, 0xFF, 0x3F, 0x70, 0x02,  // .....?p.
                                /* 1990 */  0x9B, 0x23, 0x00, 0x2C, 0x88, 0x57, 0x00, 0x5C,  // .#.,.W.\
                                /* 1998 */  0xBC, 0xF7, 0x81, 0x09, 0x24, 0xFE, 0xB0, 0xA0,  // ....$...
                                /* 19A0 */  0x40, 0x30, 0xA8, 0x8B, 0x96, 0x4F, 0x09, 0xF8,  // @0...O..
                                /* 19A8 */  0x21, 0x1E, 0x61, 0xEC, 0x63, 0x62, 0x47, 0x35,  // !.a.cbG5
                                /* 19B0 */  0xC3, 0xF1, 0xD1, 0x7B, 0x0C, 0xCF, 0x38, 0xC7,  // ...{..8.
                                /* 19B8 */  0x73, 0x1E, 0xA7, 0xEA, 0x49, 0x85, 0x64, 0xD2,  // s...I.d.
                                /* 19C0 */  0x06, 0x87, 0x92, 0x72, 0xB0, 0xF1, 0x74, 0x34,  // ...r..t4
                                /* 19C8 */  0xB1, 0xDA, 0x11, 0x75, 0x72, 0x32, 0x4C, 0x02,  // ...ur2L.
                                /* 19D0 */  0x8F, 0x9B, 0xA1, 0x71, 0x68, 0xEC, 0x30, 0x7C,  // ...qh.0|
                                /* 19D8 */  0x71, 0xF1, 0x20, 0x0E, 0xE3, 0xA4, 0x4D, 0xE0,  // q. ...M.
                                /* 19E0 */  0x09, 0x3D, 0x0D, 0x94, 0x7B, 0x51, 0x90, 0x78,  // .=..{Q.x
                                /* 19E8 */  0x54, 0x61, 0x34, 0x07, 0x45, 0x80, 0x0E, 0x1B,  // Ta4.E...
                                /* 19F0 */  0x2C, 0x07, 0x80, 0xB7, 0x00, 0x5F, 0xE7, 0x8D,  // ,...._..
                                /* 19F8 */  0xF6, 0x28, 0xC4, 0xA6, 0xCC, 0xAE, 0x21, 0x38,  // .(....!8
                                /* 1A00 */  0x9C, 0x10, 0x87, 0xF4, 0x3A, 0xC0, 0xFE, 0x20,  // ....:.. 
                                /* 1A08 */  0x3E, 0xEE, 0xE3, 0xCE, 0x1B, 0x86, 0x8C, 0x7D,  // >......}
                                /* 1A10 */  0x80, 0x26, 0xB0, 0xFB, 0x8B, 0x93, 0x34, 0xCE,  // .&....4.
                                /* 1A18 */  0x45, 0x53, 0x7A, 0x9C, 0x09, 0x51, 0x9C, 0x00,  // ESz..Q..
                                /* 1A20 */  0x63, 0x02, 0x6C, 0xDD, 0x1B, 0x74, 0x6C, 0x88,  // c.l..tl.
                                /* 1A28 */  0xF0, 0x4A, 0x13, 0x25, 0x52, 0x6B, 0x13, 0x13,  // .J.%Rk..
                                /* 1A30 */  0x14, 0xC3, 0x88, 0xD2, 0x1B, 0x0A, 0x01, 0x0E,  // ........
                                /* 1A38 */  0x5D, 0x1B, 0xAC, 0xA0, 0x0D, 0xF8, 0x22, 0x11,  // ].....".
                                /* 1A40 */  0x22, 0x52, 0x9C, 0xF6, 0x07, 0x41, 0x44, 0x39,  // "R...AD9
                                /* 1A48 */  0xF8, 0xFF, 0x1F, 0x07, 0xD8, 0x69, 0xD1, 0xA7,  // .....i..
                                /* 1A50 */  0x11, 0xDC, 0x91, 0xC0, 0xC7, 0x81, 0x93, 0x7A,  // .......z
                                /* 1A58 */  0xA8, 0x63, 0x20, 0x07, 0x77, 0x60, 0x0F, 0x3B,  // .c .w`.;
                                /* 1A60 */  0xCF, 0x02, 0x1E, 0x35, 0x3B, 0x8A, 0xF8, 0x30,  // ...5;..0
                                /* 1A68 */  0xE1, 0xC3, 0x01, 0xDE, 0x35, 0xA0, 0x6E, 0x05,  // ....5.n.
                                /* 1A70 */  0xCF, 0x04, 0x6C, 0x8C, 0x86, 0xE3, 0x43, 0xF4,  // ..l...C.
                                /* 1A78 */  0x74, 0x3D, 0x81, 0x43, 0x64, 0x80, 0x3E, 0x7D,  // t=.Cd.>}
                                /* 1A80 */  0x80, 0x4F, 0xFE, 0x20, 0x50, 0x23, 0x33, 0xB4,  // .O. P#3.
                                /* 1A88 */  0xE7, 0x79, 0x5A, 0xEF, 0x02, 0x3E, 0x00, 0x98,  // .yZ..>..
                                /* 1A90 */  0xC0, 0x62, 0xCF, 0x89, 0x74, 0x3C, 0xE0, 0x57,  // .b..t<.W
                                /* 1A98 */  0x7C, 0x40, 0x10, 0xC2, 0x0B, 0x83, 0xE7, 0xEB,  // |@......
                                /* 1AA0 */  0xA3, 0x1E, 0x3B, 0x5F, 0xE1, 0xCE, 0x14, 0x3E,  // ..;_...>
                                /* 1AA8 */  0x27, 0xF0, 0x73, 0x17, 0x0E, 0xFE, 0x15, 0x81,  // '.s.....
                                /* 1AB0 */  0x1F, 0x46, 0x58, 0xE0, 0xB3, 0x0D, 0x15, 0x75,  // .FX....u
                                /* 1AB8 */  0x30, 0x41, 0x1D, 0x2B, 0x7C, 0xA2, 0x60, 0xB7,  // 0A.+|.`.
                                /* 1AC0 */  0x1C, 0x0E, 0xCB, 0x4E, 0x3C, 0x1E, 0x1E, 0x7C,  // ...N<..|
                                /* 1AC8 */  0xC1, 0xC7, 0x09, 0x20, 0xF4, 0xFF, 0x9F, 0x1B,  // ... ....
                                /* 1AD0 */  0x3B, 0x48, 0xF0, 0x61, 0xC3, 0xBF, 0x52, 0x18,  // ;H.a..R.
                                /* 1AD8 */  0xD8, 0xC7, 0x2D, 0x7E, 0xE4, 0xC0, 0x1D, 0x71,  // ..-~...q
                                /* 1AE0 */  0xE0, 0xA1, 0x44, 0x7F, 0x7E, 0xE8, 0x53, 0x80,  // ..D.~.S.
                                /* 1AE8 */  0x56, 0x08, 0xA1, 0x3D, 0xB8, 0xBC, 0xE3, 0x30,  // V..=...0
                                /* 1AF0 */  0xB5, 0x38, 0xC2, 0x0A, 0x12, 0xE9, 0x31, 0xC7,  // .8....1.
                                /* 1AF8 */  0x48, 0x07, 0x12, 0x25, 0x48, 0xC8, 0xB0, 0xBE,  // H..%H...
                                /* 1B00 */  0xCD, 0xF8, 0xE4, 0xA4, 0xB1, 0xA2, 0xC7, 0xC1,  // ........
                                /* 1B08 */  0x01, 0x4F, 0x80, 0x8D, 0xE3, 0xBD, 0xC7, 0x53,  // .O.....S
                                /* 1B10 */  0x39, 0x2C, 0x9F, 0x51, 0x7C, 0xD1, 0xF3, 0xA0,  // 9,.Q|...
                                /* 1B18 */  0x1E, 0x55, 0x7C, 0xD3, 0x3B, 0xD2, 0x53, 0x7B,  // .U|.;.S{
                                /* 1B20 */  0x3F, 0x78, 0xB3, 0xF0, 0x61, 0x16, 0x7B, 0xB8,  // ?x..a.{.
                                /* 1B28 */  0xF0, 0x10, 0xF8, 0x00, 0x1E, 0x6D, 0xCE, 0xD2,  // .....m..
                                /* 1B30 */  0xA7, 0xA0, 0x73, 0xC3, 0x9D, 0x66, 0xF8, 0x15,  // ..s..f..
                                /* 1B38 */  0x01, 0x73, 0x18, 0xC2, 0xC5, 0x3D, 0xDC, 0xD0,  // .s...=..
                                /* 1B40 */  0x00, 0x6F, 0x03, 0x05, 0x84, 0x41, 0x9D, 0x6F,  // .o...A.o
                                /* 1B48 */  0x00, 0x57, 0x57, 0x05, 0x1F, 0x03, 0x30, 0xFF,  // .WW...0.
                                /* 1B50 */  0xFF, 0x53, 0x12, 0x5C, 0x9C, 0x37, 0x80, 0x37,  // .S.\.7.7
                                /* 1B58 */  0x87, 0x27, 0x1C, 0xE0, 0x8C, 0xF6, 0x84, 0x03,  // .'......
                                /* 1B60 */  0x26, 0x81, 0x27, 0x1C, 0x80, 0x26, 0xA2, 0x4E,  // &.'..&.N
                                /* 1B68 */  0x38, 0xE8, 0x23, 0x9B, 0x4F, 0x0A, 0xFF, 0xFF,  // 8.#.O...
                                /* 1B70 */  0x27, 0x05, 0x5F, 0x71, 0xC0, 0x41, 0x30, 0xF4,  // '._q.A0.
                                /* 1B78 */  0x19, 0x07, 0xE8, 0x8C, 0xE5, 0x91, 0x02, 0xD8,  // ........
                                /* 1B80 */  0x9D, 0x72, 0xC0, 0x7B, 0xF0, 0xC0, 0x9D, 0x72,  // .r.{...r
                                /* 1B88 */  0xC0, 0x7B, 0xE3, 0x63, 0xE7, 0x1C, 0xC0, 0xD1,  // .{.c....
                                /* 1B90 */  0xFF, 0x7F, 0x00, 0x98, 0x28, 0x87, 0x1C, 0x2A,  // ....(..*
                                /* 1B98 */  0xFD, 0x7D, 0x20, 0xF1, 0x30, 0xA8, 0x73, 0x0E,  // .} .0.s.
                                /* 1BA0 */  0xE0, 0xEA, 0xFC, 0xE1, 0x53, 0x04, 0x38, 0x8E,  // ....S.8.
                                /* 1BA8 */  0x06, 0x87, 0xFD, 0xEC, 0xF0, 0xE2, 0xF1, 0xF2,  // ........
                                /* 1BB0 */  0x6A, 0x84, 0x50, 0xC6, 0x09, 0xF8, 0x10, 0x61,  // j.P....a
                                /* 1BB8 */  0xDC, 0x08, 0xEF, 0xBA, 0xEC, 0x0A, 0x81, 0x39,  // .......9
                                /* 1BC0 */  0xE4, 0xC0, 0x9F, 0xC9, 0x01, 0xBD, 0xD7, 0xBC,  // ........
                                /* 1BC8 */  0x3F, 0x1C, 0x51, 0x10, 0x5F, 0x6D, 0x5E, 0x6E,  // ?.Q._m^n
                                /* 1BD0 */  0x5E, 0x6F, 0xE2, 0xBC, 0xE8, 0xF8, 0x90, 0xC3,  // ^o......
                                /* 1BD8 */  0x8E, 0x38, 0x46, 0x89, 0x17, 0xC1, 0x58, 0xA1,  // .8F...X.
                                /* 1BE0 */  0x7C, 0xBE, 0x79, 0x97, 0x88, 0xF5, 0xB4, 0x63,  // |.y....c
                                /* 1BE8 */  0x94, 0x70, 0x31, 0x82, 0x05, 0x09, 0xFA, 0x90,  // .p1.....
                                /* 1BF0 */  0xC3, 0x24, 0x1C, 0x72, 0x80, 0xEC, 0xFF, 0xFF,  // .$.r....
                                /* 1BF8 */  0x90, 0x03, 0x98, 0x0B, 0x7F, 0x88, 0x47, 0x0F,  // ......G.
                                /* 1C00 */  0xD7, 0xC7, 0x04, 0x1F, 0x08, 0xDE, 0x12, 0x30,  // .......0
                                /* 1C08 */  0xA7, 0x91, 0x87, 0x07, 0x03, 0x9D, 0x92, 0x43,  // .......C
                                /* 1C10 */  0x1E, 0x70, 0x80, 0xCE, 0x09, 0x05, 0x7F, 0x96,  // .p......
                                /* 1C18 */  0x00, 0xD7, 0x39, 0x02, 0x77, 0xB0, 0x01, 0xDF,  // ..9.w...
                                /* 1C20 */  0x49, 0x03, 0x77, 0xB0, 0x01, 0xEF, 0xA8, 0x7C,  // I.w....|
                                /* 1C28 */  0xAA, 0x61, 0xFF, 0xFF, 0x53, 0x0D, 0x60, 0x27,  // .a..S.`'
                                /* 1C30 */  0xDA, 0x91, 0x06, 0x15, 0xE6, 0x54, 0x03, 0xE8,  // .....T..
                                /* 1C38 */  0xBD, 0xE4, 0xBD, 0xA5, 0xB0, 0x9B, 0x06, 0x3B,  // .......;
                                /* 1C40 */  0x89, 0xB0, 0xAB, 0xC3, 0x73, 0x40, 0x14, 0x43,  // ....s@.C
                                /* 1C48 */  0x44, 0x7E, 0xD3, 0x7A, 0xAA, 0x01, 0xD7, 0x8D,  // D~.z....
                                /* 1C50 */  0xE3, 0x4D, 0xE0, 0xF9, 0xEF, 0xE5, 0xE1, 0x51,  // .M.....Q
                                /* 1C58 */  0xE0, 0x94, 0x5E, 0x1F, 0x9E, 0x63, 0xDE, 0x66,  // ..^..c.f
                                /* 1C60 */  0x9E, 0x65, 0x0C, 0xF5, 0x2E, 0xE8, 0x1B, 0xA0,  // .e......
                                /* 1C68 */  0xE1, 0x42, 0x19, 0xF3, 0xFF, 0x1F, 0x2E, 0xD8,  // .B......
                                /* 1C70 */  0xBB, 0xA0, 0x67, 0x15, 0x2F, 0xCE, 0x3B, 0x8D,  // ..g./.;.
                                /* 1C78 */  0xD1, 0x02, 0xC6, 0x0E, 0x13, 0x22, 0xE2, 0x09,  // ....."..
                                /* 1C80 */  0x3E, 0xD5, 0x30, 0x49, 0xA7, 0x1A, 0x80, 0x26,  // >.0I...&
                                /* 1C88 */  0x22, 0x4E, 0x82, 0x68, 0x68, 0x5F, 0x01, 0xF1,  // "N.hh_..
                                /* 1C90 */  0x91, 0x8F, 0x34, 0x40, 0xE7, 0x90, 0x0A, 0x9E,  // ..4@....
                                /* 1C98 */  0x83, 0x04, 0xAC, 0xFF, 0x3F, 0xD0, 0xF9, 0xF1,  // ....?...
                                /* 1CA0 */  0xB3, 0x04, 0xDC, 0x93, 0x0D, 0xF8, 0xCE, 0x89,  // ........
                                /* 1CA8 */  0xB8, 0x93, 0x0D, 0x78, 0x07, 0x17, 0x29, 0x4A,  // ...x..)J
                                /* 1CB0 */  0x68, 0x23, 0x45, 0x88, 0x7B, 0x32, 0x71, 0x62,  // h#E.{2qb
                                /* 1CB8 */  0xBE, 0xDD, 0x60, 0x4F, 0x37, 0x80, 0x93, 0xA8,  // ..`O7...
                                /* 1CC0 */  0xC7, 0x66, 0x54, 0xB8, 0x93, 0x33, 0x20, 0xE8,  // .fT..3 .
                                /* 1CC8 */  0xFF, 0x7F, 0x72, 0x06, 0xBB, 0xCB, 0x23, 0x0A,  // ..r...#.
                                /* 1CD0 */  0x39, 0x3B, 0x1C, 0xC3, 0x51, 0xF8, 0x96, 0x12,  // 9;..Q...
                                /* 1CD8 */  0xE5, 0x95, 0x85, 0xDD, 0x4B, 0x8D, 0xF2, 0x5C,  // ....K..\
                                /* 1CE0 */  0x0A, 0x93, 0xC0, 0x07, 0x1C, 0xD8, 0xA7, 0x3F,  // .......?
                                /* 1CE8 */  0x1F, 0x97, 0x7D, 0x1C, 0x78, 0x09, 0x3C, 0x9F,  // ..}.x.<.
                                /* 1CF0 */  0xB3, 0x7A, 0xC0, 0x31, 0xD0, 0x93, 0x8D, 0x4F,  // .z.1...O
                                /* 1CF8 */  0x81, 0xEC, 0x2C, 0xE8, 0x6B, 0xB3, 0x0F, 0x13,  // ..,.k...
                                /* 1D00 */  0xC1, 0x9E, 0x9C, 0x0D, 0x1C, 0x35, 0xE8, 0x03,  // .....5..
                                /* 1D08 */  0x45, 0x8C, 0x37, 0x67, 0x63, 0x46, 0x88, 0x61,  // E.7gcF.a
                                /* 1D10 */  0xAC, 0x07, 0x1C, 0x26, 0xEE, 0x80, 0x03, 0x10,  // ...&....
                                /* 1D18 */  0xE3, 0xFF, 0x7F, 0xC0, 0xC1, 0x4A, 0x39, 0xE0,  // .....J9.
                                /* 1D20 */  0xA0, 0x87, 0xEB, 0x93, 0x02, 0xBB, 0x3D, 0xB0,  // ......=.
                                /* 1D28 */  0xE1, 0x3E, 0x3B, 0x3C, 0x28, 0xB0, 0x21, 0xB1,  // .>;<(.!.
                                /* 1D30 */  0x33, 0x0E, 0xF0, 0x3E, 0x4E, 0x80, 0xFB, 0x8C,  // 3..>N...
                                /* 1D38 */  0x03, 0xBE, 0xE1, 0x3C, 0xE3, 0x00, 0x83, 0xC1,  // ...<....
                                /* 1D40 */  0xC5, 0x38, 0x90, 0x98, 0x8F, 0x83, 0x86, 0x79,  // .8.....y
                                /* 1D48 */  0x8C, 0xF1, 0x60, 0x42, 0x86, 0x78, 0x8F, 0x89,  // ..`B.x..
                                /* 1D50 */  0xF2, 0x48, 0x08, 0xEC, 0xFF, 0xFF, 0xA7, 0x1C,  // .H......
                                /* 1D58 */  0xB0, 0x84, 0xB2, 0x00, 0xC2, 0xE4, 0xBF, 0x10,  // ........
                                /* 1D60 */  0x14, 0x03, 0x06, 0x75, 0xCA, 0x01, 0x5C, 0x09,  // ...u..\.
                                /* 1D68 */  0x3E, 0x47, 0x80, 0x06, 0xFD, 0x58, 0x4E, 0x21,  // >G...XN!
                                /* 1D70 */  0x56, 0xA4, 0xD7, 0x87, 0xA7, 0x2F, 0x06, 0x12,  // V..../..
                                /* 1D78 */  0x29, 0xDC, 0x39, 0xF9, 0x1A, 0x01, 0xF7, 0xE4,  // ).9.....
                                /* 1D80 */  0x0C, 0xFF, 0x10, 0xE1, 0x31, 0x85, 0x78, 0xB0,  // ....1.x.
                                /* 1D88 */  0x39, 0xA8, 0x37, 0x81, 0x97, 0x9B, 0x20, 0xE7,  // 9.7... .
                                /* 1D90 */  0xF1, 0x94, 0xE3, 0x43, 0x8E, 0xCF, 0xCC, 0x3E,  // ...C...>
                                /* 1D98 */  0xE4, 0x18, 0xEA, 0x5D, 0x27, 0xD6, 0xBB, 0x8E,  // ...]'...
                                /* 1DA0 */  0x41, 0x42, 0x45, 0x78, 0x2B, 0xF4, 0xD5, 0xD9,  // ABEx+...
                                /* 1DA8 */  0x27, 0x68, 0xDF, 0x71, 0x62, 0x84, 0x7B, 0xC8,  // 'h.qb.{.
                                /* 1DB0 */  0x61, 0x42, 0x5E, 0x23, 0xF2, 0x70, 0xC8, 0x01,  // aB^#.p..
                                /* 1DB8 */  0x12, 0xFF, 0xFF, 0x43, 0x0E, 0x60, 0xF7, 0x35,  // ...C.`.5
                                /* 1DC0 */  0xE3, 0x43, 0x0E, 0x6E, 0x14, 0x3E, 0x23, 0x70,  // .C.n.>#p
                                /* 1DC8 */  0x02, 0x07, 0x3E, 0xE0, 0x00, 0x9D, 0x93, 0x04,  // ..>.....
                                /* 1DD0 */  0xB8, 0x87, 0xF8, 0x24, 0x01, 0x86, 0xF3, 0x0D,  // ...$....
                                /* 1DD8 */  0xF8, 0x62, 0x9F, 0xBC, 0xD1, 0xD0, 0x9E, 0x83,  // .b......
                                /* 1DE0 */  0xA7, 0x73, 0x56, 0xC7, 0xC4, 0xFE, 0xFF, 0xC7,  // .sV.....
                                /* 1DE8 */  0x6E, 0xB0, 0x9D, 0x0C, 0xC0, 0x71, 0xEC, 0x06,  // n....q..
                                /* 1DF0 */  0xCF, 0x90, 0xB0, 0xB3, 0x88, 0xF1, 0x80, 0x73,  // .......s
                                /* 1DF8 */  0xCE, 0x3E, 0x5C, 0x74, 0x25, 0xC0, 0xE8, 0xD1,  // .>\t%...
                                /* 1E00 */  0x08, 0x68, 0x43, 0x06, 0x0A, 0xF5, 0xDA, 0x73,  // .hC....s
                                /* 1E08 */  0x26, 0x0F, 0x94, 0x18, 0xA4, 0x78, 0x47, 0x18,  // &....xG.
                                /* 1E10 */  0xCF, 0x47, 0x23, 0xC0, 0x50, 0xE0, 0xC3, 0x24,  // .G#.P..$
                                /* 1E18 */  0x8D, 0xF1, 0xB6, 0x50, 0x44, 0x18, 0xD4, 0xD1,  // ...PD...
                                /* 1E20 */  0x08, 0xE6, 0xFF, 0xFF, 0x68, 0x04, 0x18, 0x39,  // ....h..9
                                /* 1E28 */  0x22, 0xE0, 0x4E, 0x20, 0xE0, 0x03, 0x0D, 0x1B,  // ".N ....
                                /* 1E30 */  0x28, 0xA4, 0xEF, 0xB9, 0xEC, 0x78, 0x04, 0x1C,  // (....x..
                                /* 1E38 */  0x2F, 0xE1, 0x3E, 0x1E, 0x81, 0xE7, 0x48, 0x09,  // /.>...H.
                                /* 1E40 */  0x18, 0xF9, 0xFF, 0x1F, 0x8F, 0x00, 0x2B, 0x42,  // ......+B
                                /* 1E48 */  0x8E, 0x47, 0xD0, 0x83, 0x1F, 0x8F, 0x80, 0xCE,  // .G......
                                /* 1E50 */  0x69, 0x02, 0xDC, 0x50, 0x4F, 0x13, 0x60, 0x3C,  // i..PO.`<
                                /* 1E58 */  0xE7, 0x80, 0x0F, 0xDA, 0xE7, 0x1C, 0xE0, 0x04,  // ........
                                /* 1E60 */  0xF5, 0xFF, 0x8F, 0x16, 0x28, 0xC2, 0x73, 0x38,  // ....(.s8
                                /* 1E68 */  0xE0, 0x29, 0xE8, 0x29, 0x87, 0x46, 0x78, 0x25,  // .).).Fx%
                                /* 1E70 */  0x28, 0x1A, 0x0C, 0xEA, 0xA0, 0x03, 0xB8, 0x3A,  // (......:
                                /* 1E78 */  0xF7, 0xE3, 0xCE, 0x12, 0x70, 0x67, 0xF2, 0x7A,  // ....pg.z
                                /* 1E80 */  0x70, 0x30, 0x07, 0xEE, 0xF3, 0xC3, 0x89, 0xBF,  // p0......
                                /* 1E88 */  0x13, 0x3C, 0x1F, 0xF8, 0x64, 0x10, 0xE8, 0xD5,  // .<..d...
                                /* 1E90 */  0xCD, 0x97, 0x2A, 0x06, 0xE6, 0x8B, 0x04, 0xEE,  // ..*.....
                                /* 1E98 */  0x60, 0x85, 0x3D, 0xE6, 0x80, 0xE5, 0xFF, 0x7F,  // `.=.....
                                /* 1EA0 */  0xA8, 0x04, 0xCF, 0x49, 0xFC, 0x31, 0x07, 0xAE,  // ...I.1..
                                /* 1EA8 */  0xB0, 0x63, 0x0E, 0x40, 0x13, 0x11, 0xC7, 0x1C,  // .c.@....
                                /* 1EB0 */  0xE8, 0xA1, 0x8F, 0x39, 0x40, 0xE7, 0x2C, 0x01,  // ...9@.,.
                                /* 1EB8 */  0x86, 0xFF, 0xFF, 0x59, 0x02, 0x58, 0x1C, 0x72,  // ...Y.X.r
                                /* 1EC0 */  0x80, 0xF3, 0xE8, 0x30, 0xE0, 0x1E, 0x1D, 0xE6,  // ...0....
                                /* 1EC8 */  0x72, 0x08, 0xEF, 0x90, 0x03, 0x38, 0x09, 0x7F,  // r....8..
                                /* 1ED0 */  0xC2, 0xA1, 0xA1, 0xDE, 0x08, 0x8A, 0x0B, 0x83,  // ........
                                /* 1ED8 */  0x3A, 0xE4, 0x00, 0xD3, 0xFF, 0xFF, 0x21, 0x07,  // :.....!.
                                /* 1EE0 */  0x18, 0xC4, 0x38, 0x49, 0x80, 0xE6, 0xEC, 0x12,  // ..8I....
                                /* 1EE8 */  0xE3, 0x35, 0xF5, 0x00, 0x42, 0x1D, 0xC4, 0x23,  // .5..B..#
                                /* 1EF0 */  0x8B, 0x0F, 0x5E, 0x1E, 0xC6, 0xC1, 0xF9, 0xAE,  // ..^.....
                                /* 1EF8 */  0xF2, 0xDE, 0x85, 0x93, 0x85, 0x23, 0x30, 0x1F,  // .....#0.
                                /* 1F00 */  0x25, 0x1E, 0x26, 0x1E, 0xC5, 0x0C, 0x7C, 0x5E,  // %.&...|^
                                /* 1F08 */  0x3E, 0x11, 0x44, 0x3A, 0x23, 0xDF, 0xC2, 0xE0,  // >.D:#...
                                /* 1F10 */  0x9E, 0x76, 0x80, 0x0F, 0xCA, 0xD3, 0x0E, 0x5C,  // .v.....\
                                /* 1F18 */  0x69, 0xA7, 0x1D, 0x40, 0xE2, 0xFF, 0xFF, 0xB4,  // i..@....
                                /* 1F20 */  0x03, 0x0C, 0x25, 0x9C, 0x76, 0xD0, 0xD0, 0xBE,  // ..%.v...
                                /* 1F28 */  0x73, 0x60, 0xCE, 0x38, 0xEC, 0x48, 0x0E, 0xBC,  // s`.8.H..
                                /* 1F30 */  0x0F, 0x1A, 0x8F, 0x12, 0x60, 0x3D, 0xEC, 0x80,  // ....`=..
                                /* 1F38 */  0xEF, 0x40, 0xE0, 0xC3, 0x0E, 0xF8, 0x01, 0x8F,  // .@......
                                /* 1F40 */  0x24, 0xD6, 0x1B, 0xCE, 0x03, 0xA2, 0x67, 0xF2,  // $.....g.
                                /* 1F48 */  0x26, 0x13, 0xEC, 0x95, 0x22, 0x52, 0x6C, 0x1F,  // &..."Rl.
                                /* 1F50 */  0x78, 0xF8, 0x09, 0xD1, 0x47, 0x6B, 0xF0, 0xFD,  // x...Gk..
                                /* 1F58 */  0xFF, 0x8F, 0x3B, 0xC0, 0x3A, 0xE0, 0xB9, 0x1A,  // ..;.:...
                                /* 1F60 */  0x15, 0xE9, 0x68, 0x0D, 0xE8, 0xBD, 0x11, 0x3C,  // ..h....<
                                /* 1F68 */  0x42, 0x1C, 0x8E, 0xAF, 0xAF, 0x1E, 0xC4, 0x4B,  // B......K
                                /* 1F70 */  0x98, 0x0F, 0xAE, 0x7C, 0xF2, 0x6F, 0x17, 0x86,  // ...|.o..
                                /* 1F78 */  0xC2, 0x1E, 0xAD, 0x81, 0xD9, 0x39, 0x07, 0x0B,  // .....9..
                                /* 1F80 */  0xF1, 0x9C, 0xC3, 0xFE, 0xFF, 0xE7, 0x1C, 0x58,  // .......X
                                /* 1F88 */  0x62, 0xCE, 0x39, 0x00, 0x4D, 0xC2, 0x43, 0xE8,  // b.9.M.C.
                                /* 1F90 */  0x90, 0x08, 0x37, 0xEC, 0x31, 0x07, 0xE8, 0x0C,  // ..7.1...
                                /* 1F98 */  0xD1, 0xA7, 0x09, 0x60, 0xF3, 0xFF, 0x1F, 0x1A,  // ...`....
                                /* 1FA0 */  0x3B, 0xE4, 0x80, 0xEF, 0x4C, 0x81, 0x3B, 0xE4,  // ;...L.;.
                                /* 1FA8 */  0x80, 0x77, 0x1E, 0xAF, 0x35, 0x6F, 0x2F, 0xBE,  // .w..5o/.
                                /* 1FB0 */  0x55, 0x1B, 0xF6, 0xED, 0x10, 0xDE, 0x01, 0x07,  // U.......
                                /* 1FB8 */  0xB0, 0x22, 0x52, 0x1E, 0x08, 0x13, 0xFF, 0x3A,  // ."R....:
                                /* 1FC0 */  0xD0, 0x91, 0xCD, 0x30, 0xFC, 0x80, 0x03, 0xB8,  // ...0....
                                /* 1FC8 */  0x02, 0x0A, 0xED, 0xFF, 0xFF, 0xC9, 0x0B, 0x1C,  // ........
                                /* 1FD0 */  0x47, 0x04, 0xDC, 0x59, 0xC0, 0x07, 0x04, 0x5F,  // G..Y..._
                                /* 1FD8 */  0x0E, 0xD8, 0xFD, 0xDD, 0x07, 0x83, 0xC7, 0x03,  // ........
                                /* 1FE0 */  0xDF, 0x11, 0xD9, 0x64, 0x4E, 0x20, 0xC2, 0xB3,  // ...dN ..
                                /* 1FE8 */  0x0D, 0xFC, 0xA1, 0xBC, 0xCA, 0x84, 0x88, 0xF3,  // ........
                                /* 1FF0 */  0x60, 0x10, 0xE1, 0x25, 0x24, 0xC4, 0x3B, 0x4D,  // `..%$.;M
                                /* 1FF8 */  0x9C, 0x47, 0x9A, 0xD7, 0x88, 0x08, 0xCF, 0x36,  // .G.....6
                                /* 2000 */  0x46, 0x8A, 0x10, 0xE8, 0xD9, 0x86, 0x81, 0xBE,  // F.......
                                /* 2008 */  0xDD, 0x78, 0x1A, 0x31, 0x1E, 0xA8, 0x63, 0x45,  // .x.1..cE
                                /* 2010 */  0x0A, 0x71, 0x22, 0xE1, 0x42, 0x46, 0x8A, 0x16,  // .q".BF..
                                /* 2018 */  0xE3, 0xD9, 0x86, 0xC5, 0x3B, 0x0E, 0xE8, 0x24,  // ....;..$
                                /* 2020 */  0xE2, 0xB3, 0x0D, 0xC0, 0x8F, 0xCB, 0xC1, 0xD3,  // ........
                                /* 2028 */  0x09, 0x9C, 0xFF, 0xFF, 0xE9, 0x04, 0xEE, 0x59,  // .......Y
                                /* 2030 */  0x01, 0xDE, 0xA9, 0x04, 0x98, 0x7C, 0x29, 0xAC,  // .....|).
                                /* 2038 */  0x65, 0xAC, 0x5E, 0xAC, 0x6C, 0x2C, 0xD6, 0x67,  // e.^.l,.g
                                /* 2040 */  0x0C, 0x2A, 0xF3, 0x94, 0xA0, 0x09, 0x1C, 0x9E,  // .*......
                                /* 2048 */  0x91, 0xC3, 0xBE, 0xBF, 0x18, 0x24, 0xF2, 0xB3,  // .....$..
                                /* 2050 */  0x89, 0xE1, 0x9F, 0x2B, 0x22, 0x1C, 0xC4, 0x59,  // ...+"..Y
                                /* 2058 */  0x04, 0x62, 0xE7, 0x04, 0x43, 0xC4, 0x7A, 0x9B,  // .b..C.z.
                                /* 2060 */  0xF0, 0x98, 0x04, 0xAE, 0x23, 0x90, 0x21, 0x2C,  // ....#.!,
                                /* 2068 */  0x83, 0x42, 0x87, 0x71, 0x8F, 0xCB, 0x70, 0x8E,  // .B.q..p.
                                /* 2070 */  0x0D, 0x46, 0x41, 0x7C, 0x10, 0xF0, 0xE1, 0xC1,  // .FA|....
                                /* 2078 */  0xE7, 0x23, 0xDC, 0x7E, 0x3C, 0x10, 0xF8, 0xA7,  // .#.~<...
                                /* 2080 */  0x35, 0x9F, 0x1E, 0xE0, 0x00, 0x47, 0x3C, 0x49,  // 5....G<I
                                /* 2088 */  0x4F, 0xC5, 0x70, 0x3E, 0x2B, 0x71, 0x38, 0xDF,  // O.p>+q8.
                                /* 2090 */  0x0A, 0x4E, 0xDE, 0x04, 0xEC, 0x28, 0x04, 0x3E,  // .N...(.>
                                /* 2098 */  0x81, 0xA7, 0x03, 0x50, 0x00, 0xF9, 0x2E, 0xE0,  // ...P....
                                /* 20A0 */  0x03, 0xCE, 0xF3, 0x00, 0x9B, 0xC3, 0x33, 0x8E,  // ......3.
                                /* 20A8 */  0x4F, 0x38, 0xEC, 0x30, 0x88, 0x18, 0x15, 0x3D,  // O8.0...=
                                /* 20B0 */  0x07, 0x1F, 0x17, 0xE6, 0x78, 0xE0, 0x23, 0xCC,  // ....x.#.
                                /* 20B8 */  0xFF, 0xFF, 0x11, 0xC6, 0xD8, 0xEF, 0x01, 0xBE,  // ........
                                /* 20C0 */  0x3C, 0x3D, 0x34, 0xF9, 0x4C, 0x85, 0x81, 0xF5,  // <=4.L...
                                /* 20C8 */  0x48, 0x39, 0xAC, 0xD1, 0xC2, 0x1E, 0xF0, 0x43,  // H9.....C
                                /* 20D0 */  0x84, 0x2F, 0x20, 0x9E, 0x99, 0x4F, 0x28, 0x3E,  // ./ ..O(>
                                /* 20D8 */  0x8C, 0x82, 0xED, 0x88, 0xC0, 0xAE, 0x02, 0xCF,  // ........
                                /* 20E0 */  0x09, 0x18, 0x98, 0xA7, 0x01, 0x2C, 0xD0, 0x13,  // .....,..
                                /* 20E8 */  0x5D, 0xA0, 0x77, 0x13, 0x63, 0xF3, 0xEB, 0x00,  // ].w.c...
                                /* 20F0 */  0x39, 0x38, 0xA0, 0x4E, 0x40, 0x96, 0x75, 0x70,  // 98.N@.up
                                /* 20F8 */  0x80, 0x78, 0x38, 0xC0, 0x1E, 0x18, 0x7C, 0x68,  // .x8...|h
                                /* 2100 */  0xE0, 0xF1, 0x0F, 0x67, 0xF4, 0xD0, 0xC0, 0xE3,  // ...g....
                                /* 2108 */  0x82, 0x51, 0x10, 0x1F, 0x1A, 0x1C, 0xE5, 0xD0,  // .Q......
                                /* 2110 */  0x80, 0x3E, 0x0C, 0xF8, 0xC0, 0x00, 0x18, 0xFE,  // .>......
                                /* 2118 */  0xFF, 0x1F, 0x18, 0x60, 0x0D, 0xDA, 0x07, 0x06,  // ...`....
                                /* 2120 */  0xE0, 0x79, 0x58, 0x80, 0x71, 0x6A, 0xF0, 0x71,  // .yX.qj.q
                                /* 2128 */  0x00, 0x7B, 0x60, 0x80, 0x0F, 0xFC, 0xC0, 0x00,  // .{`.....
                                /* 2130 */  0xEC, 0x6F, 0x07, 0x3E, 0x16, 0xF1, 0x03, 0x03,  // .o.>....
                                /* 2138 */  0x60, 0xEB, 0xFF, 0x7F, 0x60, 0x80, 0x05, 0xCB,  // `...`...
                                /* 2140 */  0x0F, 0x0C, 0xC0, 0xE7, 0x68, 0xC0, 0x0E, 0x0C,  // ....h...
                                /* 2148 */  0x60, 0x14, 0x72, 0x60, 0x40, 0xDD, 0xD8, 0x12,  // `.r`@...
                                /* 2150 */  0x94, 0x77, 0x60, 0x81, 0x76, 0xDC, 0xB3, 0x77,  // .w`.v..w
                                /* 2158 */  0x10, 0x82, 0xEF, 0x99, 0x79, 0x18, 0xCF, 0x68,  // ....y..h
                                /* 2160 */  0xEF, 0x57, 0x3E, 0x6B, 0x62, 0x0E, 0xF5, 0x3E,  // .W>kb..>
                                /* 2168 */  0x35, 0xF0, 0x43, 0x83, 0xA3, 0x9F, 0x1A, 0x50,  // 5.C....P
                                /* 2170 */  0x87, 0x53, 0x83, 0x19, 0xC4, 0xA7, 0x06, 0x07,  // .S......
                                /* 2178 */  0x39, 0xA8, 0x42, 0x3F, 0xB4, 0x00, 0x06, 0xFF,  // 9.B?....
                                /* 2180 */  0xFF, 0x87, 0x06, 0xB0, 0x1C, 0x04, 0x7D, 0x68,  // ......}h
                                /* 2188 */  0x01, 0x9E, 0x27, 0x04, 0x06, 0xE2, 0x13, 0x02,  // ..'.....
                                /* 2190 */  0xEE, 0x70, 0x8B, 0x3D, 0x34, 0xC0, 0x3F, 0xB4,  // .p.=4.?.
                                /* 2198 */  0xF0, 0x43, 0x03, 0xE0, 0xE1, 0xE0, 0x02, 0x98,  // .C......
                                /* 21A0 */  0xF9, 0xFF, 0x1F, 0x1A, 0xC0, 0x6A, 0xE1, 0xE0,  // .....j..
                                /* 21A8 */  0x02, 0x54, 0x0F, 0x0D, 0xE0, 0x08, 0xB4, 0x3A,  // .T.....:
                                /* 21B0 */  0x1D, 0x1A, 0xF8, 0x59, 0xDC, 0x71, 0xDF, 0x06,  // ...Y.q..
                                /* 21B8 */  0x3A, 0xB8, 0xC0, 0x81, 0x3A, 0xB3, 0x10, 0x41,  // :...:..A
                                /* 21C0 */  0x1E, 0x5B, 0x7D, 0xA5, 0x3C, 0x80, 0x04, 0x8E,  // .[}.<...
                                /* 21C8 */  0x06, 0xAB, 0x03, 0x03, 0x0F, 0x05, 0xA3, 0x48,  // .......H
                                /* 21D0 */  0x10, 0x3A, 0x30, 0xF0, 0x10, 0x70, 0x14, 0xC4,  // .:0..p..
                                /* 21D8 */  0xA3, 0xF5, 0x81, 0x01, 0xCE, 0x20, 0x0E, 0xE1,  // ..... ..
                                /* 21E0 */  0x18, 0xDF, 0x4E, 0x7D, 0x68, 0x01, 0xC6, 0x83,  // ..N}h...
                                /* 21E8 */  0x82, 0x89, 0x7C, 0x50, 0x60, 0xF9, 0xFF, 0x0F,  // ..|P`...
                                /* 21F0 */  0x0A, 0xE6, 0x70, 0x3D, 0x28, 0xE0, 0x70, 0x4A,  // ..p=(.pJ
                                /* 21F8 */  0x08, 0x59, 0xFD, 0x81, 0x40, 0x13, 0xF7, 0xA0,  // .Y..@...
                                /* 2200 */  0xC0, 0x7D, 0x20, 0xF1, 0xA0, 0x80, 0xCB, 0xC4,  // .} .....
                                /* 2208 */  0x3D, 0x28, 0x70, 0x43, 0xF9, 0x70, 0x02, 0xBC,  // =(pC.p..
                                /* 2210 */  0x83, 0x1D, 0x4E, 0x40, 0x77, 0xAC, 0xF7, 0xE1,  // ..N@w...
                                /* 2218 */  0x04, 0xD6, 0xFF, 0xFF, 0x70, 0x02, 0x6B, 0x40,  // ....p.k@
                                /* 2220 */  0x0F, 0x48, 0x60, 0x3E, 0x89, 0x30, 0x90, 0x27,  // .H`>.0.'
                                /* 2228 */  0x11, 0xDC, 0xC1, 0x04, 0xFE, 0xE1, 0x88, 0x1F,  // ........
                                /* 2230 */  0x4C, 0x80, 0xF7, 0xC1, 0x08, 0x78, 0x1D, 0x4C,  // L....x.L
                                /* 2238 */  0xC0, 0x3B, 0x28, 0x70, 0x1C, 0x4C, 0x80, 0xC5,  // .;(p.L..
                                /* 2240 */  0xFF, 0xFF, 0x60, 0x02, 0x96, 0x41, 0x81, 0xE3,  // ..`..A..
                                /* 2248 */  0x60, 0x02, 0x5C, 0x07, 0x05, 0x8E, 0x83, 0x09,  // `.\.....
                                /* 2250 */  0xE0, 0xCA, 0xC3, 0xC1, 0x04, 0x68, 0x1D, 0xC2,  // .....h..
                                /* 2258 */  0xE0, 0x1C, 0x4C, 0xB0, 0xFF, 0xFF, 0x93, 0x08,  // ..L.....
                                /* 2260 */  0x0B, 0x77, 0x08, 0x44, 0x89, 0x3C, 0x98, 0xF8,  // .w.D.<..
                                /* 2268 */  0x20, 0x0A, 0x0D, 0x24, 0xD4, 0x39, 0x19, 0xE5,  //  ..$.9..
                                /* 2270 */  0x78, 0x8F, 0xE4, 0x9C, 0x82, 0xBC, 0x9F, 0x06,  // x.......
                                /* 2278 */  0x3D, 0x93, 0x20, 0x27, 0x14, 0xE8, 0x84, 0x0E,  // =. '....
                                /* 2280 */  0xCE, 0x88, 0x2F, 0x82, 0xBE, 0x69, 0x30, 0x02,  // ../..i0.
                                /* 2288 */  0x47, 0x39, 0x08, 0xA2, 0x42, 0x50, 0x28, 0x02,  // G9..BP(.
                                /* 2290 */  0x84, 0x0E, 0x28, 0x5C, 0x34, 0x1C, 0x05, 0xF1,  // ..(\4...
                                /* 2298 */  0xD0, 0x7D, 0x10, 0x03, 0xF8, 0x71, 0xB0, 0x00,  // .}...q..
                                /* 22A0 */  0x1E, 0x21, 0x0F, 0x16, 0x88, 0xFF, 0xFF, 0xC1,  // .!......
                                /* 22A8 */  0x02, 0x2C, 0xE0, 0x3E, 0x58, 0x80, 0x0B, 0xFE,  // .,.>X...
                                /* 22B0 */  0x01, 0x0A, 0xCC, 0x27, 0x09, 0x8E, 0xF2, 0x24,  // ...'...$
                                /* 22B8 */  0xC1, 0x2E, 0xCE, 0x3E, 0x49, 0x18, 0xE4, 0x49,  // ...>I..I
                                /* 22C0 */  0x02, 0x7B, 0xBC, 0x00, 0xC7, 0x31, 0x8A, 0x1F,  // .{...1..
                                /* 22C8 */  0x2F, 0x00, 0x2F, 0xC7, 0x29, 0xC0, 0xC0, 0xFF,  // /./.)...
                                /* 22D0 */  0xFF, 0x38, 0x05, 0x2C, 0x8F, 0x17, 0xC0, 0xDB,  // .8.,....
                                /* 22D8 */  0xC4, 0xF1, 0x02, 0x68, 0x1D, 0x83, 0xE0, 0x1C,  // ...h....
                                /* 22E0 */  0x2F, 0xC0, 0x15, 0xF6, 0xD0, 0x87, 0x3A, 0x03,  // /.....:.
                                /* 22E8 */  0x38, 0xFE, 0xE1, 0x16, 0xDA, 0xF1, 0x02, 0x1E,  // 8.......
                                /* 22F0 */  0x81, 0x63, 0x1E, 0xFB, 0x50, 0x01, 0x61, 0x14,  // .c..P.a.
                                /* 22F8 */  0xEF, 0xD8, 0x87, 0x0A, 0x04, 0x47, 0x41, 0x7C,  // .....GA|
                                /* 2300 */  0xEC, 0x73, 0x9C, 0x43, 0x03, 0x7A, 0x9C, 0x3E,  // .s.C.z.>
                                /* 2308 */  0x0F, 0xBC, 0x19, 0x1C, 0xE6, 0xFF, 0x3F, 0xC2,  // ......?.
                                /* 2310 */  0x11, 0xB3, 0x61, 0x60, 0x4E, 0x42, 0xC0, 0x37,  // ..a`NB.7
                                /* 2318 */  0xCA, 0xB8, 0xD0, 0xD0, 0x9E, 0x6B, 0xED, 0x02,  // .....k..
                                /* 2320 */  0x3C, 0x8F, 0x0A, 0x68, 0x1C, 0x2E, 0xC0, 0x39,  // <..h...9
                                /* 2328 */  0x2A, 0x38, 0xC0, 0xCF, 0x04, 0xC5, 0x8F, 0x0A,  // *8......
                                /* 2330 */  0x68, 0x9C, 0xFD, 0xC0, 0x39, 0x2A, 0x58, 0x90,  // h...9*X.
                                /* 2338 */  0x1E, 0x15, 0xB8, 0xFF, 0xFF, 0x87, 0x3F, 0xC0,  // ......?.
                                /* 2340 */  0xC2, 0x31, 0x05, 0x7C, 0x2A, 0x8E, 0x29, 0x80,  // .1.|*.).
                                /* 2348 */  0x16, 0x31, 0x87, 0x2A, 0x94, 0xBC, 0x81, 0xFB,  // .1.*....
                                /* 2350 */  0x08, 0x08, 0xA2, 0xDB, 0xA6, 0x2F, 0x1B, 0x87,  // ...../..
                                /* 2358 */  0x16, 0xCF, 0xD7, 0x7C, 0x8C, 0x84, 0x13, 0x15,  // ...|....
                                /* 2360 */  0x2A, 0x3C, 0x84, 0xA2, 0x9F, 0x04, 0xE8, 0x09,  // *<......
                                /* 2368 */  0x86, 0x80, 0x51, 0x10, 0x1F, 0x22, 0x7C, 0x5A,  // ..Q.."|Z
                                /* 2370 */  0x82, 0x33, 0x92, 0x27, 0x7F, 0xCC, 0xB9, 0x01,  // .3.'....
                                /* 2378 */  0xD6, 0xFF, 0xFF, 0x98, 0x02, 0xCC, 0xCE, 0x0D,  // ........
                                /* 2380 */  0xC0, 0x23, 0xE2, 0xB9, 0x01, 0x74, 0xE3, 0xF4,  // .#...t..
                                /* 2388 */  0xB9, 0x01, 0x5C, 0x07, 0x3D, 0x7E, 0xB6, 0x03,  // ..\.=~..
                                /* 2390 */  0x16, 0x47, 0x04, 0x0C, 0xCC, 0x23, 0x02, 0xE6,  // .G...#..
                                /* 2398 */  0xD8, 0x00, 0xFF, 0x68, 0x07, 0xF3, 0xD8, 0x00,  // ...h....
                                /* 23A0 */  0xFC, 0xFE, 0xFF, 0xE7, 0x3A, 0x60, 0x7C, 0x6C,  // ....:`|l
                                /* 23A8 */  0x00, 0xDE, 0xC3, 0xF5, 0xB1, 0x01, 0x38, 0x9D,  // ......8.
                                /* 23B0 */  0x5E, 0xC0, 0x72, 0x6C, 0x80, 0x25, 0xED, 0xC8,  // ^.rl.%..
                                /* 23B8 */  0x86, 0x3A, 0x36, 0x58, 0xEE, 0x91, 0x0D, 0x44,  // .:6X...D
                                /* 23C0 */  0x93, 0x0E, 0x12, 0xC9, 0x73, 0x7A, 0xF7, 0xC7,  // ....sz..
                                /* 23C8 */  0x09, 0x3A, 0xB5, 0xA1, 0xA4, 0xC0, 0x48, 0xC8,  // .:....H.
                                /* 23D0 */  0xA9, 0x0D, 0x15, 0xFD, 0xF4, 0x40, 0x41, 0x2C,  // .....@A,
                                /* 23D8 */  0xE1, 0xD8, 0x80, 0xF8, 0xFF, 0x9F, 0xC7, 0xF1,  // ........
                                /* 23E0 */  0x73, 0x39, 0x95, 0xA3, 0x78, 0x68, 0xF1, 0xE1,  // s9..xh..
                                /* 23E8 */  0x05, 0xF8, 0xC6, 0x18, 0x14, 0x1A, 0xDE, 0xA0,  // ........
                                /* 23F0 */  0x11, 0x1F, 0x09, 0x7C, 0x60, 0x03, 0xBE, 0xE3,  // ...|`...
                                /* 23F8 */  0x86, 0x03, 0xFD, 0xE8, 0xE0, 0x79, 0xFB, 0xBC,  // .....y..
                                /* 2400 */  0x06, 0x8C, 0x4F, 0x1F, 0xC0, 0xEC, 0xFF, 0x7F,  // ..O.....
                                /* 2408 */  0xFA, 0x80, 0x6D, 0xE3, 0x0C, 0x04, 0xE4, 0x4F,  // ..m....O
                                /* 2410 */  0x1A, 0x98, 0xBB, 0x3D, 0xEE, 0xF4, 0x01, 0xFF,  // ...=....
                                /* 2418 */  0x0C, 0x04, 0xF3, 0xF4, 0x01, 0xCC, 0xCF, 0x40,  // .......@
                                /* 2420 */  0xC0, 0xEB, 0xF4, 0x01, 0xCE, 0x31, 0x61, 0xFF,  // .....1a.
                                /* 2428 */  0xFF, 0xA7, 0x0F, 0xC0, 0xC0, 0xA0, 0xC0, 0x71,  // .......q
                                /* 2430 */  0xFA, 0x00, 0x5C, 0xE9, 0x38, 0x4A, 0x01, 0xF9,  // ..\.8J..
                                /* 2438 */  0xD3, 0x07, 0xB4, 0x03, 0x1D, 0xEA, 0x12, 0x60,  // .......`
                                /* 2440 */  0x91, 0x07, 0x3A, 0xC4, 0xFF, 0xFF, 0x28, 0x05,  // ..:...(.
                                /* 2448 */  0x7F, 0xEE, 0x4F, 0x39, 0x9E, 0x9C, 0x71, 0xA2,  // ..O9..q.
                                /* 2450 */  0xF4, 0x8E, 0xA2, 0xF3, 0x07, 0xEE, 0x48, 0x07,  // ......H.
                                /* 2458 */  0xFE, 0x79, 0x7A, 0x30, 0x3E, 0x58, 0x02, 0xEE,  // .yz0>X..
                                /* 2460 */  0x06, 0xEA, 0x83, 0x03, 0xB8, 0x7C, 0x1C, 0x1C,  // .....|..
                                /* 2468 */  0x40, 0x77, 0x9A, 0x7E, 0x0A, 0x02, 0x2E, 0x87,  // @w.~....
                                /* 2470 */  0x04, 0xFC, 0xFF, 0x1F, 0xE5, 0xE9, 0x01, 0xBC,  // ........
                                /* 2478 */  0x47, 0x21, 0x98, 0xA7, 0x07, 0xC0, 0xC0, 0xF9,  // G!......
                                /* 2480 */  0x12, 0xF0, 0x73, 0x7A, 0x00, 0xDF, 0x58, 0x7C,  // ..sz..X|
                                /* 2488 */  0x7A, 0x00, 0x4E, 0xB3, 0xFA, 0xFF, 0x3F, 0x3D,  // z.N...?=
                                /* 2490 */  0x00, 0x9B, 0xD7, 0x81, 0x4F, 0x0F, 0xFC, 0x1C,  // ....O...
                                /* 2498 */  0x60, 0x69, 0x47, 0x19, 0x68, 0xD7, 0x6F, 0xEC,  // `iG.h.o.
                                /* 24A0 */  0x35, 0x17, 0x77, 0xDA, 0x06, 0x58, 0x10, 0xEE,  // 5.w..X..
                                /* 24A8 */  0xE0, 0x00, 0x3A, 0x23, 0x07, 0x07, 0xD0, 0x89,  // ..:#....
                                /* 24B0 */  0x1D, 0x0B, 0xE2, 0xFF, 0x7F, 0x8A, 0x01, 0xE3,  // ........
                                /* 24B8 */  0xF9, 0x00, 0x7B, 0xC7, 0xC5, 0x1D, 0x18, 0xC0,  // ..{.....
                                /* 24C0 */  0x70, 0x7A, 0xE1, 0x07, 0x06, 0xE0, 0x7F, 0x70,  // pz.....p
                                /* 24C8 */  0x01, 0xFC, 0x1C, 0x18, 0xC0, 0xA7, 0xE4, 0xC0,  // ........
                                /* 24D0 */  0x00, 0xE2, 0xFF, 0xFF, 0xC1, 0x05, 0x8C, 0x07,  // ........
                                /* 24D8 */  0x06, 0x70, 0x1F, 0xE5, 0xB0, 0x27, 0x12, 0x9F,  // .p...'..
                                /* 24E0 */  0x1A, 0x7C, 0x89, 0x39, 0x89, 0x28, 0xE7, 0x73,  // .|.9.(.s
                                /* 24E8 */  0x92, 0x0F, 0x2C, 0x00, 0x6F, 0x46, 0xEC, 0x03,  // ..,.oF..
                                /* 24F0 */  0x03, 0x58, 0xFF, 0xFF, 0xA7, 0x38, 0xF0, 0x1E,  // .X...8..
                                /* 24F8 */  0x00, 0x7C, 0xCB, 0xF7, 0xF9, 0x00, 0x7B, 0x60,  // .|....{`
                                /* 2500 */  0x01, 0xCF, 0x81, 0x01, 0xF8, 0x1F, 0x58, 0x00,  // ......X.
                                /* 2508 */  0x9F, 0x52, 0x0E, 0x0C, 0x20, 0xFE, 0xFF, 0x1F,  // .R.. ...
                                /* 2510 */  0xDC, 0xC0, 0x7B, 0x60, 0x80, 0x15, 0xE6, 0x5C,  // ..{`...\
                                /* 2518 */  0x8E, 0xE2, 0x70, 0xD4, 0x73, 0x39, 0xFA, 0xC0,  // ..p.s9..
                                /* 2520 */  0xC2, 0x27, 0x18, 0xEB, 0x68, 0x4F, 0x37, 0x81,  // .'..hO7.
                                /* 2528 */  0xA3, 0x1D, 0xC8, 0x51, 0xA1, 0x60, 0x14, 0xE9,  // ...Q.`..
                                /* 2530 */  0x40, 0x8E, 0x0A, 0x01, 0x47, 0x41, 0x6C, 0xE1,  // @...GAl.
                                /* 2538 */  0xB0, 0x00, 0x6D, 0x0A, 0xC7, 0x76, 0x7C, 0x27,  // ..m..v|'
                                /* 2540 */  0xE9, 0xC3, 0x0A, 0x30, 0x1E, 0x14, 0x4C, 0xE4,  // ...0..L.
                                /* 2548 */  0x83, 0x02, 0xFF, 0x89, 0x1C, 0x78, 0x9C, 0x0C,  // .....x..
                                /* 2550 */  0x42, 0x56, 0x7F, 0x1C, 0xD0, 0xC4, 0x3D, 0x28,  // BV....=(
                                /* 2558 */  0x18, 0xFF, 0xFF, 0x41, 0x81, 0xE9, 0x44, 0x0E,  // ...A..D.
                                /* 2560 */  0xCE, 0x41, 0xC1, 0x9D, 0xB8, 0x07, 0x05, 0x6E,  // .A.....n
                                /* 2568 */  0x28, 0x1F, 0x4C, 0x80, 0x77, 0xB0, 0x83, 0x09,  // (.L.w...
                                /* 2570 */  0xE8, 0xAC, 0x1C, 0x4C, 0x40, 0x37, 0xA0, 0x07,  // ...L@7..
                                /* 2578 */  0x23, 0x30, 0x9F, 0x43, 0x38, 0xCA, 0xF1, 0xFA,  // #0.C8...
                                /* 2580 */  0x58, 0xCA, 0x8E, 0x25, 0x30, 0xFF, 0xFF, 0xC7,  // X..%0...
                                /* 2588 */  0x22, 0xEC, 0xB1, 0x04, 0xF8, 0x1E, 0x89, 0x80,  // ".......
                                /* 2590 */  0xD7, 0xB1, 0x04, 0xBC, 0x83, 0x02, 0xC7, 0xB1,  // ........
                                /* 2598 */  0x04, 0xB8, 0x0E, 0x0A, 0x1C, 0xC7, 0x12, 0xB0,  // ........
                                /* 25A0 */  0xFF, 0xFF, 0x8F, 0x25, 0x60, 0x1B, 0x14, 0x38,  // ...%`..8
                                /* 25A8 */  0x8E, 0x25, 0x80, 0x2B, 0x2D, 0xC7, 0x12, 0xA0,  // .%.+-...
                                /* 25B0 */  0x75, 0xFC, 0x82, 0x73, 0x2C, 0x81, 0x23, 0xD3,  // u..s,.#.
                                /* 25B8 */  0xC3, 0x18, 0x58, 0x88, 0x57, 0x84, 0x84, 0xC1,  // ..X.W...
                                /* 25C0 */  0xA0, 0x34, 0x9C, 0x07, 0xA0, 0x8C, 0xF0, 0x04,  // .4......
                                /* 25C8 */  0x8E, 0xEB, 0x90, 0x98, 0x24, 0x38, 0xD4, 0xE0,  // ....$8..
                                /* 25D0 */  0x3D, 0xA4, 0x57, 0xD2, 0xA3, 0x78, 0x2C, 0xF3,  // =.W..x,.
                                /* 25D8 */  0x38, 0xCE, 0x29, 0x24, 0x93, 0x36, 0x36, 0xD4,  // 8.)$.66.
                                /* 25E0 */  0xC1, 0xCD, 0xF3, 0x39, 0xB3, 0xA3, 0xA9, 0xFD,  // ...9....
                                /* 25E8 */  0x94, 0x4E, 0x8E, 0xE7, 0x26, 0xF0, 0x28, 0xFE,  // .N..&.(.
                                /* 25F0 */  0xFF, 0x91, 0x8D, 0xC6, 0xA1, 0xB1, 0xC3, 0xF0,  // ........
                                /* 25F8 */  0x7D, 0x20, 0xD8, 0x41, 0x1C, 0xC6, 0x39, 0x9B,  // } .A..9.
                                /* 2600 */  0xC0, 0x13, 0x3A, 0xCD, 0x72, 0xEF, 0x09, 0x3A,  // ..:.r..:
                                /* 2608 */  0xC8, 0x47, 0x8D, 0xD1, 0x1C, 0x14, 0x81, 0x3B,  // .G.....;
                                /* 2610 */  0x6A, 0xB0, 0x80, 0x79, 0xB6, 0xC7, 0xEB, 0xCB,  // j..y....
                                /* 2618 */  0x9B, 0xB1, 0xD8, 0x98, 0x63, 0x84, 0x8A, 0x51,  // ....c..Q
                                /* 2620 */  0xE3, 0xD0, 0xC9, 0xC8, 0x0D, 0x72, 0x1C, 0x8F,  // .....r..
                                /* 2628 */  0x71, 0x46, 0x8F, 0xFB, 0x38, 0x60, 0x98, 0x03,  // qF..8`..
                                /* 2630 */  0x79, 0x98, 0xF5, 0x9D, 0xC9, 0x63, 0xC1, 0x9E,  // y....c..
                                /* 2638 */  0x2E, 0xEC, 0xF9, 0x0A, 0x41, 0xEE, 0x05, 0x26,  // ....A..&
                                /* 2640 */  0xE8, 0x7E, 0x34, 0x3A, 0x44, 0x84, 0xE8, 0x6D,  // .~4:D..m
                                /* 2648 */  0x04, 0x42, 0xAF, 0x58, 0x80, 0x38, 0x01, 0xB6,  // .B.X.8..
                                /* 2650 */  0x66, 0x26, 0xA0, 0x43, 0xAB, 0x0D, 0x85, 0x60,  // f&.C...`
                                /* 2658 */  0x1E, 0x9D, 0x51, 0x82, 0x9D, 0xCC, 0xDB, 0xC4,  // ..Q.....
                                /* 2660 */  0xF1, 0x45, 0x89, 0xD1, 0x18, 0x84, 0x70, 0x03,  // .E....p.
                                /* 2668 */  0xC6, 0x8C, 0x10, 0x30, 0x7A, 0xC4, 0x38, 0x11,  // ...0z.8.
                                /* 2670 */  0xDA, 0x1F, 0x04, 0x09, 0xF5, 0xCC, 0xD1, 0x58,  // .......X
                                /* 2678 */  0x1C, 0x69, 0x34, 0xA8, 0x63, 0x85, 0x8F, 0x05,  // .i4.c...
                                /* 2680 */  0xBE, 0xEC, 0x7B, 0x54, 0x9E, 0x9D, 0xD1, 0xCF,  // ..{T....
                                /* 2688 */  0xA5, 0xCE, 0xD3, 0x3F, 0x25, 0xF0, 0xD4, 0x7C,  // ...?%..|
                                /* 2690 */  0xFE, 0x80, 0xE3, 0x1A, 0x50, 0x37, 0x83, 0xE7,  // ....P7..
                                /* 2698 */  0x02, 0x76, 0x22, 0x32, 0x1C, 0x1F, 0xA2, 0xC7,  // .v"2....
                                /* 26A0 */  0x1E, 0xEE, 0x04, 0x0E, 0x91, 0x01, 0xFA, 0x00,  // ........
                                /* 26A8 */  0x02, 0x7F, 0x3C, 0x3E, 0x08, 0x78, 0x3E, 0x27,  // ..<>.x>'
                                /* 26B0 */  0x9C, 0xC0, 0xF2, 0x07, 0x81, 0x1A, 0x99, 0xA1,  // ........
                                /* 26B8 */  0x7D, 0xF3, 0x38, 0xAD, 0x47, 0x01, 0x1F, 0x13,  // }.8.G...
                                /* 26C0 */  0x0E, 0x8B, 0x1D, 0x65, 0x7C, 0x76, 0xF1, 0x78,  // ...e|v.x
                                /* 26C8 */  0xB0, 0xFF, 0xFF, 0xF1, 0x80, 0xF1, 0x1A, 0xF0,  // ........
                                /* 26D0 */  0x74, 0x10, 0xE1, 0xA5, 0xC1, 0xF3, 0xF5, 0x99,  // t.......
                                /* 26D8 */  0x94, 0x1D, 0xE8, 0x3D, 0x1E, 0xDC, 0x21, 0x81,  // ...=..!.
                                /* 26E0 */  0x1D, 0x4E, 0xDE, 0x44, 0xD8, 0x19, 0x4A, 0xC7,  // .N.D..J.
                                /* 26E8 */  0x54, 0x43, 0x48, 0xD4, 0xB1, 0x04, 0x75, 0xAA,  // TCH...u.
                                /* 26F0 */  0xF0, 0x81, 0x82, 0x5D, 0x1B, 0xE2, 0x3E, 0x03,  // ...]..>.
                                /* 26F8 */  0x18, 0x97, 0x1D, 0x84, 0x3C, 0x32, 0xF8, 0x27,  // ....<2.'
                                /* 2700 */  0x84, 0xA7, 0x09, 0xB0, 0x1C, 0x23, 0xF8, 0xB9,  // .....#..
                                /* 2708 */  0xC6, 0xBA, 0xCE, 0x2A, 0xF4, 0x58, 0x03, 0x8E,  // ...*.X..
                                /* 2710 */  0x81, 0x38, 0xF0, 0x30, 0xD1, 0x83, 0xF3, 0x30,  // .8.0...0
                                /* 2718 */  0x39, 0xC8, 0xFB, 0xB6, 0xCF, 0x03, 0xEC, 0x6C,  // 9......l
                                /* 2720 */  0xEA, 0x71, 0x82, 0xE7, 0x40, 0x00, 0x0E, 0x79,  // .q..@..y
                                /* 2728 */  0xE3, 0x04, 0xDD, 0x98, 0xF8, 0x40, 0xC1, 0x27,  // .....@.'
                                /* 2730 */  0xE5, 0x29, 0xA0, 0xE3, 0xFB, 0xFF, 0xFF, 0x40,  // .).....@
                                /* 2738 */  0x31, 0x03, 0xF4, 0x40, 0xF9, 0xD9, 0x84, 0xC1,  // 1..@....
                                /* 2740 */  0x04, 0x3E, 0x8E, 0xB8, 0x6F, 0x25, 0xEC, 0x54,  // .>..o%.T
                                /* 2748 */  0x82, 0x39, 0x2D, 0xB0, 0xD1, 0x82, 0x07, 0xD0,  // .9-.....
                                /* 2750 */  0xA3, 0x85, 0x7F, 0xA8, 0x05, 0xCF, 0x68, 0xF9,  // ......h.
                                /* 2758 */  0xC0, 0xB0, 0xC7, 0x17, 0x38, 0x73, 0xF6, 0x19,  // ....8s..
                                /* 2760 */  0x03, 0x0C, 0x56, 0x81, 0x74, 0x3E, 0x09, 0xF4,  // ..V.t>..
                                /* 2768 */  0xC8, 0xF2, 0xC4, 0x72, 0x84, 0x64, 0xD4, 0x50,  // ...r.d.P
                                /* 2770 */  0xE1, 0xCF, 0xE5, 0xA0, 0x4E, 0xCF, 0x17, 0x00,  // ....N...
                                /* 2778 */  0x8F, 0x1A, 0xEC, 0xA0, 0x1E, 0x35, 0xF0, 0x19,  // .....5..
                                /* 2780 */  0x18, 0x76, 0xD4, 0xE0, 0xF9, 0xFF, 0x8F, 0x1A,  // .v......
                                /* 2788 */  0x0C, 0x43, 0xC2, 0x9D, 0xCB, 0xE0, 0xA1, 0x44,  // .C.....D
                                /* 2790 */  0x0F, 0xDD, 0xA7, 0x00, 0xAD, 0x10, 0xBA, 0x77,  // .......w
                                /* 2798 */  0x18, 0x2C, 0xCE, 0x3B, 0xA4, 0x41, 0xE2, 0xBF,  // .,.;.A..
                                /* 27A0 */  0x47, 0x7A, 0x1A, 0x46, 0x38, 0xC1, 0xD7, 0x08,  // Gz.F8...
                                /* 27A8 */  0x43, 0x1D, 0x47, 0x88, 0x04, 0x45, 0x0E, 0x14,  // C.G..E..
                                /* 27B0 */  0x3D, 0x0C, 0x8E, 0xFE, 0xA0, 0xC6, 0xB0, 0x8D,  // =.......
                                /* 27B8 */  0x72, 0x26, 0x47, 0xE5, 0x83, 0x95, 0x11, 0xCE,  // r&G.....
                                /* 27C0 */  0xF2, 0x79, 0xEA, 0xF9, 0xCA, 0xD7, 0x05, 0xCC,  // .y......
                                /* 27C8 */  0x79, 0x0D, 0x27, 0xE9, 0xF5, 0x65, 0x02, 0x89,  // y.'..e..
                                /* 27D0 */  0x3F, 0x21, 0x48, 0x04, 0x0C, 0xEA, 0x0C, 0x06,  // ?!H.....
                                /* 27D8 */  0xB8, 0x02, 0x7A, 0x5A, 0x00, 0xCB, 0x61, 0x00,  // ..zZ..a.
                                /* 27E0 */  0x77, 0x5D, 0xF0, 0xD0, 0x8F, 0xDD, 0x0A, 0x47,  // w].....G
                                /* 27E8 */  0x29, 0xB4, 0x10, 0xCF, 0x08, 0x3E, 0x79, 0xF8,  // )....>y.
                                /* 27F0 */  0x2A, 0xC0, 0x50, 0xCE, 0xE3, 0x69, 0xC1, 0xE7,  // *.P..i..
                                /* 27F8 */  0x2F, 0x58, 0xFF, 0xFF, 0xF3, 0x17, 0xBF, 0x7E,  // /X.....~
                                /* 2800 */  0xBD, 0x2B, 0x3C, 0x73, 0x19, 0x24, 0xC4, 0x83,  // .+<s.$..
                                /* 2808 */  0xC0, 0xD9, 0xBC, 0x77, 0x45, 0x09, 0x77, 0x56,  // ...wE.wV
                                /* 2810 */  0xCF, 0x5F, 0x0C, 0x23, 0x42, 0x6B, 0xE7, 0x2F,  // ._.#Bk./
                                /* 2818 */  0x82, 0x11, 0xEC, 0x0D, 0xCC, 0x68, 0x06, 0x7C,  // .....h.|
                                /* 2820 */  0xB8, 0x30, 0xD2, 0x4B, 0x53, 0x84, 0x58, 0x46,  // .0.KS.XF
                                /* 2828 */  0x08, 0xFE, 0xFC, 0xC5, 0x82, 0x3C, 0x34, 0xF4,  // .....<4.
                                /* 2830 */  0xC7, 0xF3, 0xF9, 0x0B, 0xE0, 0x47, 0xD0, 0x23,  // .....G.#
                                /* 2838 */  0x29, 0xFA, 0x08, 0xCA, 0x47, 0xF6, 0xF4, 0x05,  // )...G...
                                /* 2840 */  0x8C, 0x0E, 0x15, 0xB8, 0x73, 0x04, 0xE6, 0xFF,  // ....s...
                                /* 2848 */  0x7F, 0x8E, 0x80, 0x71, 0xF7, 0x62, 0x68, 0xEF,  // ...q.bh.
                                /* 2850 */  0x2E, 0x3E, 0xA2, 0x82, 0x2F, 0xF6, 0x20, 0xD1,  // .>../. .
                                /* 2858 */  0x43, 0x31, 0xF4, 0x19, 0x1D, 0x48, 0x88, 0xE3,  // C1...H..
                                /* 2860 */  0x0D, 0xFB, 0x8C, 0x68, 0xDC, 0x57, 0x04, 0x13,  // ...h.W..
                                /* 2868 */  0x0C, 0x78, 0xFC, 0x02, 0x3A, 0x27, 0x58, 0xDC,  // .x..:'X.
                                /* 2870 */  0x40, 0xE1, 0x0E, 0x0A, 0xCE, 0x58, 0xC1, 0x29,  // @....X.)
                                /* 2878 */  0xE3, 0x35, 0xA0, 0xB1, 0xE2, 0x4E, 0x17, 0x3E,  // .5...N.>
                                /* 2880 */  0x56, 0x61, 0xEF, 0x25, 0xEF, 0x2A, 0x86, 0x79,  // Va.%.*.y
                                /* 2888 */  0x82, 0x60, 0x71, 0x4F, 0x5F, 0x40, 0xE7, 0xEC,  // .`qO_@..
                                /* 2890 */  0x02, 0x9E, 0xC1, 0xC2, 0xB9, 0x80, 0x61, 0xFE,  // ......a.
                                /* 2898 */  0xFF, 0x17, 0x30, 0x3E, 0x36, 0xCC, 0x98, 0xC1,  // ..0>6...
                                /* 28A0 */  0x79, 0x72, 0x02, 0xE3, 0xE9, 0x06, 0xCE, 0xBD,  // yr......
                                /* 28A8 */  0x09, 0x83, 0xF2, 0x74, 0xC3, 0x4E, 0x4E, 0xC0,  // ...t.NN.
                                /* 28B0 */  0x27, 0x22, 0x09, 0x3D, 0x36, 0x39, 0x14, 0x0C,  // '".=69..
                                /* 28B8 */  0xEA, 0xE4, 0x04, 0x98, 0xFF, 0xFF, 0x9F, 0x9C,  // ........
                                /* 28C0 */  0x30, 0x87, 0xB5, 0x27, 0x27, 0xF8, 0xD7, 0x60,  // 0..''..`
                                /* 28C8 */  0xDF, 0x7F, 0x7D, 0x59, 0x3A, 0x27, 0xE3, 0xBC,  // ..}Y:'..
                                /* 28D0 */  0x31, 0x9D, 0xCD, 0x5B, 0xC4, 0x23, 0x53, 0x14,  // 1..[.#S.
                                /* 28D8 */  0x1F, 0x84, 0x8D, 0xF2, 0xF8, 0x64, 0xA4, 0x80,  // .....d..
                                /* 28E0 */  0x86, 0xF2, 0xBD, 0xE1, 0xE4, 0x5E, 0x9B, 0x0C,  // .....^..
                                /* 28E8 */  0x11, 0xEC, 0x40, 0x0C, 0x1F, 0x22, 0x9C, 0x4F,  // ..@..".O
                                /* 28F0 */  0x4E, 0xEC, 0xB0, 0x6D, 0x15, 0x27, 0x27, 0x80,  // N..m.''.
                                /* 28F8 */  0x80, 0xFF, 0xFF, 0x93, 0x13, 0xC0, 0xAE, 0xF0,  // ........
                                /* 2900 */  0x63, 0x45, 0x9F, 0x9C, 0xE0, 0x87, 0x3C, 0x39,  // cE....<9
                                /* 2908 */  0x01, 0x9D, 0x03, 0x10, 0x7E, 0xB0, 0x30, 0xFE,  // ....~.0.
                                /* 2910 */  0xFF, 0x83, 0x65, 0x77, 0x26, 0xD8, 0xC3, 0x05,  // ..ew&...
                                /* 2918 */  0x63, 0xD4, 0xE1, 0xA2, 0xC7, 0xE5, 0x2B, 0x4E,  // c.....+N
                                /* 2920 */  0xC0, 0x83, 0x38, 0x9B, 0x87, 0x76, 0xF0, 0x9D,  // ..8..v..
                                /* 2928 */  0x7D, 0xC1, 0x71, 0xBC, 0x00, 0xCF, 0x88, 0xF8,  // }.q.....
                                /* 2930 */  0x19, 0x01, 0x9C, 0xC1, 0x47, 0x89, 0x1E, 0x9C,  // ....G...
                                /* 2938 */  0x81, 0x43, 0xFA, 0x84, 0x00, 0x66, 0x0B, 0x27,  // .C...f.'
                                /* 2940 */  0x04, 0xA0, 0x32, 0x26, 0x06, 0x71, 0x26, 0xA7,  // ..2&.q&.
                                /* 2948 */  0x14, 0xE2, 0x09, 0x01, 0x3C, 0xFF, 0xFF, 0xC1,  // ....<...
                                /* 2950 */  0x82, 0xEF, 0x14, 0xED, 0xC1, 0x82, 0xF9, 0x28,  // .......(
                                /* 2958 */  0xE6, 0xC1, 0x02, 0x93, 0x31, 0x79, 0xB0, 0xC0,  // ....1y..
                                /* 2960 */  0xE4, 0x84, 0x07, 0x9C, 0x4E, 0x61, 0x3E, 0xE1,  // ....Na>.
                                /* 2968 */  0x01, 0x1F, 0xA1, 0x56, 0x40, 0x58, 0x80, 0x47,  // ...V@X.G
                                /* 2970 */  0x92, 0xA4, 0xC1, 0xA0, 0x4E, 0x78, 0x60, 0xFD,  // ....Nx`.
                                /* 2978 */  0xFF, 0x9F, 0xF0, 0x80, 0xF5, 0x5D, 0xC1, 0xC7,  // .....]..
                                /* 2980 */  0x1A, 0x30, 0x1D, 0x33, 0x18, 0x16, 0xBF, 0x2A,  // .0.3...*
                                /* 2988 */  0xC4, 0x08, 0x15, 0xE3, 0x71, 0x9F, 0x9F, 0x05,  // ....q...
                                /* 2990 */  0x1E, 0x8D, 0x3C, 0x17, 0xC3, 0x3C, 0x1B, 0xF9,  // ..<..<..
                                /* 2998 */  0x7C, 0x66, 0x02, 0x9F, 0xF1, 0x60, 0x9F, 0xE9,  // |f...`..
                                /* 29A0 */  0x5E, 0xEC, 0xCE, 0x20, 0xF8, 0xD3, 0xB6, 0xAF,  // ^.. ....
                                /* 29A8 */  0xD8, 0xBE, 0xDB, 0x85, 0x08, 0x75, 0x60, 0x81,  // .....u`.
                                /* 29B0 */  0x9E, 0xF1, 0x8C, 0x72, 0x0E, 0x2F, 0x78, 0x9E,  // ...r./x.
                                /* 29B8 */  0x5B, 0xA0, 0x50, 0x71, 0x42, 0xF9, 0x7A, 0x17,  // [.PqB.z.
                                /* 29C0 */  0x29, 0xEA, 0x91, 0x05, 0x79, 0xE1, 0x33, 0x48,  // )...y.3H
                                /* 29C8 */  0xAC, 0xC8, 0x3E, 0xE3, 0xB1, 0x68, 0x4F, 0x0F,  // ..>..hO.
                                /* 29D0 */  0x7D, 0x09, 0x7C, 0xC6, 0x03, 0x8C, 0xFD, 0xFF,  // }.|.....
                                /* 29D8 */  0xCF, 0x78, 0xC0, 0xF6, 0xD8, 0x64, 0x25, 0xC7,  // .x...d%.
                                /* 29E0 */  0x26, 0x34, 0x70, 0xC4, 0xF7, 0x08, 0x1F, 0x9B,  // &4p.....
                                /* 29E8 */  0xC0, 0x77, 0xC8, 0x03, 0x2E, 0x23, 0xE2, 0xC7,  // .w...#..
                                /* 29F0 */  0x26, 0x70, 0x9D, 0x53, 0xDE, 0x19, 0x1E, 0x93,  // &p.S....
                                /* 29F8 */  0xF9, 0x28, 0x71, 0xD0, 0x3E, 0x57, 0xB0, 0x93,  // .(q.>W..
                                /* 2A00 */  0xCA, 0xA9, 0x31, 0x82, 0xE1, 0x8E, 0x78, 0x40,  // ..1...x@
                                /* 2A08 */  0xE7, 0x38, 0x71, 0x98, 0x60, 0x39, 0x79, 0xF0,  // .8q.`9y.
                                /* 2A10 */  0xBB, 0xA1, 0xC7, 0x09, 0xEB, 0xFF, 0x3F, 0x4E,  // ......?N
                                /* 2A18 */  0xD8, 0x07, 0x3C, 0x38, 0xA3, 0x60, 0xB7, 0x11,  // ..<8.`..
                                /* 2A20 */  0xCC, 0x4C, 0x5F, 0x56, 0x62, 0x9C, 0x8B, 0x0F,  // .L_Vb...
                                /* 2A28 */  0x78, 0xC0, 0xFC, 0xCC, 0x02, 0x67, 0x56, 0xEC,  // x....gV.
                                /* 2A30 */  0xCC, 0x04, 0x56, 0x71, 0xEF, 0x08, 0x29, 0x59,  // ..Vq..)Y
                                /* 2A38 */  0x97, 0x87, 0x0B, 0x79, 0x90, 0x7C, 0x1C, 0x02,  // ...y.|..
                                /* 2A40 */  0xD6, 0x19, 0xCD, 0x87, 0x3C, 0xE0, 0x31, 0x5C,  // ....<.1\
                                /* 2A48 */  0x70, 0xCF, 0x85, 0x4F, 0xD7, 0x87, 0x4D, 0xDC,  // p..O..M.
                                /* 2A50 */  0xA0, 0x30, 0x87, 0xA2, 0x10, 0xD5, 0xC3, 0x6A,  // .0.....j
                                /* 2A58 */  0x50, 0x47, 0xF1, 0xFF, 0x7F, 0x48, 0x80, 0x7D,  // PG...H.}
                                /* 2A60 */  0x78, 0x00, 0x5F, 0xE8, 0xD3, 0x1B, 0x94, 0xB9,  // x._.....
                                /* 2A68 */  0x9C, 0x83, 0xA7, 0x72, 0x72, 0xE7, 0xF7, 0xD2,  // ...rr...
                                /* 2A70 */  0xE1, 0x81, 0x3D, 0xA6, 0x82, 0xED, 0xE4, 0x07,  // ..=.....
                                /* 2A78 */  0x8E, 0x63, 0x2A, 0x78, 0xC6, 0x84, 0xBB, 0x75,  // .c*x...u
                                /* 2A80 */  0x60, 0x0E, 0x0E, 0x60, 0x7C, 0xCF, 0x78, 0xA8,  // `..`|.x.
                                /* 2A88 */  0xB8, 0x81, 0x79, 0x1C, 0xB8, 0x3B, 0x00, 0x9C,  // ..y..;..
                                /* 2A90 */  0x98, 0x47, 0x3F, 0xA0, 0x33, 0x8C, 0xA3, 0x05,  // .G?.3...
                                /* 2A98 */  0xE7, 0xC5, 0x03, 0xFF, 0xFF, 0xBF, 0x78, 0xB0,  // ......x.
                                /* 2AA0 */  0x01, 0x83, 0x4F, 0xE6, 0xC1, 0x03, 0x7D, 0x8E,  // ..O...}.
                                /* 2AA8 */  0xF3, 0x80, 0xE1, 0xDD, 0x3C, 0x30, 0x83, 0xD5,  // ....<0..
                                /* 2AB0 */  0xD1, 0x03, 0x54, 0xFF, 0x76, 0x8D, 0x18, 0x04,  // ..T.v...
                                /* 2AB8 */  0xF3, 0x3A, 0x62, 0xF0, 0xDF, 0x3D, 0x70, 0x03,  // .:b..=p.
                                /* 2AC0 */  0xF0, 0xE1, 0x03, 0x0C, 0x47, 0x05, 0xF8, 0xA7,  // ....G...
                                /* 2AC8 */  0x0F, 0xF0, 0xC9, 0x1A, 0xB5, 0x8C, 0x9C, 0x21,  // .......!
                                /* 2AD0 */  0x50, 0xE7, 0x24, 0x1F, 0x6D, 0x3D, 0x8D, 0x03,  // P.$.m=..
                                /* 2AD8 */  0x89, 0xF1, 0x28, 0x19, 0xF6, 0x40, 0x9E, 0xD9,  // ..(..@..
                                /* 2AE0 */  0x5A, 0x1D, 0xA4, 0xBC, 0x43, 0x91, 0xF9, 0xBE,  // Z...C...
                                /* 2AE8 */  0x9B, 0x85, 0xA8, 0x7A, 0x08, 0xBA, 0xA6, 0xF9,  // ...z....
                                /* 2AF0 */  0x0E, 0xF7, 0xBE, 0xE9, 0x11, 0xBD, 0x17, 0xB2,  // ........
                                /* 2AF8 */  0xC0, 0x27, 0x09, 0x50, 0x8D, 0xCC, 0x03, 0xFE,  // .'.P....
                                /* 2B00 */  0xFF, 0x3F, 0x08, 0xC0, 0x3E, 0x1A, 0x82, 0x67,  // .?..>..g
                                /* 2B08 */  0x70, 0x98, 0x49, 0x9C, 0x1A, 0x0E, 0x36, 0xD0,  // p.I...6.
                                /* 2B10 */  0xB9, 0xE1, 0x70, 0x0E, 0x0E, 0x77, 0x1A, 0x60,  // ..p..w.`
                                /* 2B18 */  0xB2, 0x06, 0x0F, 0x9A, 0x61, 0x5B, 0xD2, 0xD8,  // ....a[..
                                /* 2B20 */  0xD1, 0x07, 0x35, 0x43, 0xC6, 0x3B, 0x91, 0x43,  // ..5C.;.C
                                /* 2B28 */  0x07, 0xDB, 0xE9, 0xCC, 0x43, 0x07, 0x8F, 0x89,  // ....C...
                                /* 2B30 */  0xA1, 0x83, 0x42, 0xF0, 0xD0, 0x41, 0x33, 0x36,  // ..B..A36
                                /* 2B38 */  0x36, 0x72, 0x60, 0x77, 0x12, 0xF1, 0xA1, 0x0E,  // 6r`w....
                                /* 2B40 */  0x37, 0x52, 0x03, 0x47, 0x3C, 0x86, 0xB3, 0x33,  // 7R.G<..3
                                /* 2B48 */  0xA6, 0x2F, 0x4B, 0xEC, 0x00, 0xCC, 0xFE, 0xFF,  // ./K.....
                                /* 2B50 */  0xD7, 0x83, 0x53, 0x8A, 0x15, 0xE1, 0x18, 0x59,  // ..S....Y
                                /* 2B58 */  0xD8, 0x61, 0x83, 0x4A, 0xC5, 0xB0, 0x41, 0x71,  // .a.J..Aq
                                /* 2B60 */  0x0A, 0xC6, 0x0D, 0x1B, 0xEE, 0xC0, 0xB0, 0xE7,  // ........
                                /* 2B68 */  0x54, 0xCC, 0xC8, 0x18, 0xC8, 0x99, 0x61, 0x0E,  // T.....a.
                                /* 2B70 */  0x47, 0x60, 0x3B, 0x89, 0xF0, 0xE3, 0x03, 0x7E,  // G`;....~
                                /* 2B78 */  0x00, 0x1E, 0x13, 0x03, 0x7D, 0xEB, 0x3C, 0x66,  // ....}.<f
                                /* 2B80 */  0x3E, 0x1B, 0x36, 0x16, 0xCC, 0x39, 0x04, 0xCC,  // >.6..9..
                                /* 2B88 */  0xA3, 0xF6, 0x39, 0x04, 0x38, 0x41, 0x86, 0x7A,  // ..9.8A.z
                                /* 2B90 */  0x7C, 0x88, 0xF5, 0xFC, 0x00, 0x96, 0xE3, 0x03,  // |.......
                                /* 2B98 */  0x38, 0xFE, 0xFF, 0xC7, 0x07, 0x8C, 0x84, 0x91,  // 8.......
                                /* 2BA0 */  0xA3, 0xC7, 0x69, 0xA5, 0xA3, 0x22, 0x63, 0xF0,  // ..i.."c.
                                /* 2BA8 */  0xB5, 0xD5, 0xE3, 0x63, 0xE7, 0x0F, 0x70, 0x0D,  // ...c..p.
                                /* 2BB0 */  0xD7, 0xE7, 0x0F, 0xE0, 0x33, 0x62, 0xE0, 0x76,  // ....3b.v
                                /* 2BB8 */  0xFE, 0x00, 0x13, 0xB4, 0xCF, 0x1F, 0x60, 0xB6,  // ......`.
                                /* 2BC0 */  0x71, 0xFE, 0x00, 0x92, 0x23, 0xF3, 0xF9, 0x03,  // q...#...
                                /* 2BC8 */  0xFE, 0xFF, 0xFF, 0xC4, 0x0A, 0x96, 0x51, 0xE3,  // ......Q.
                                /* 2BD0 */  0xCE, 0x9C, 0x98, 0x69, 0x60, 0x4E, 0x16, 0x06,  // ...i`N..
                                /* 2BD8 */  0x89, 0xF3, 0xC4, 0x0A, 0x3E, 0x1D, 0x67, 0x4E,  // ....>.gN
                                /* 2BE0 */  0xA0, 0x34, 0x2B, 0x0C, 0x8C, 0x87, 0xC5, 0xCE,  // .4+.....
                                /* 2BE8 */  0xBB, 0xE0, 0x14, 0x73, 0x66, 0x40, 0x1F, 0x21,  // ...sf@.!
                                /* 2BF0 */  0x7C, 0xFA, 0xE1, 0x17, 0x36, 0x1C, 0xCC, 0x61,  // |...6..a
                                /* 2BF8 */  0x9E, 0x8C, 0x61, 0x4E, 0xD3, 0x67, 0x02, 0x9F,  // ..aN.g..
                                /* 2C00 */  0xB1, 0xD9, 0xA1, 0x01, 0x5C, 0x3E, 0x0E, 0x0D,  // ....\>..
                                /* 2C08 */  0x40, 0xE5, 0xF4, 0x83, 0x39, 0xED, 0x61, 0x87,  // @...9.a.
                                /* 2C10 */  0x06, 0x67, 0xD8, 0xFF, 0xFF, 0xC3, 0x06, 0x1E,  // .g......
                                /* 2C18 */  0x87, 0x0E, 0x36, 0x6C, 0xE0, 0x33, 0x28, 0x0F,  // ..6l.3(.
                                /* 2C20 */  0x1B, 0x98, 0x1C, 0x3A, 0xF8, 0xB0, 0x81, 0xE9,  // ...:....
                                /* 2C28 */  0xA4, 0xC1, 0x70, 0xFD, 0xC0, 0x0C, 0x1B, 0x5C,  // ..p....\
                                /* 2C30 */  0x47, 0x23, 0x0F, 0x1B, 0x58, 0xFC, 0xFF, 0x0F,  // G#..X...
                                /* 2C38 */  0x0F, 0xC0, 0xF0, 0x64, 0x8A, 0x03, 0xF6, 0xB8,  // ...d....
                                /* 2C40 */  0x7D, 0xF7, 0x8C, 0x10, 0xFC, 0xE5, 0xF3, 0xF1,  // }.......
                                /* 2C48 */  0xE8, 0x6C, 0x22, 0x3C, 0xE3, 0x1A, 0xFD, 0xED,  // .l"<....
                                /* 2C50 */  0xE8, 0x09, 0xB1, 0x56, 0x08, 0xA1, 0xBD, 0xA2,  // ...V....
                                /* 2C58 */  0x04, 0x8B, 0x13, 0xE4, 0x28, 0x82, 0x54, 0x08,  // ....(.T.
                                /* 2C60 */  0x47, 0x6E, 0xB0, 0x86, 0x09, 0xE4, 0x43, 0x0B,  // Gn....C.
                                /* 2C68 */  0x8C, 0x41, 0x70, 0xE4, 0x78, 0x87, 0x14, 0xF6,  // .Ap.x...
                                /* 2C70 */  0x20, 0x4E, 0x26, 0xCA, 0x79, 0x1C, 0x93, 0x47,  //  N&.y..G
                                /* 2C78 */  0x77, 0x8E, 0x11, 0x8E, 0xA9, 0xDC, 0x61, 0x6B,  // w.....ak
                                /* 2C80 */  0x7E, 0x35, 0x4F, 0x51, 0xF3, 0x7A, 0x73, 0x0C,  // ~5OQ.zs.
                                /* 2C88 */  0x94, 0xC0, 0x23, 0xE0, 0x2F, 0x00, 0x2E, 0xFD,  // ..#./...
                                /* 2C90 */  0x80, 0x20, 0x59, 0xCF, 0x01, 0x0A, 0xE3, 0x13,  // . Y.....
                                /* 2C98 */  0xB1, 0xCF, 0x3A, 0x3E, 0x09, 0x70, 0x60, 0x9F,  // ..:>.p`.
                                /* 2CA0 */  0x09, 0x4E, 0xE4, 0x5C, 0x1F, 0x04, 0xD8, 0x69,  // .N.\...i
                                /* 2CA8 */  0xD7, 0x70, 0x7C, 0x98, 0x9E, 0xD8, 0xFB, 0xE4,  // .p|.....
                                /* 2CB0 */  0xE1, 0x9E, 0xC8, 0xBB, 0x81, 0x6F, 0x02, 0x21,  // .....o.!
                                /* 2CB8 */  0xD9, 0xC1, 0xD2, 0x87, 0x58, 0xDC, 0xB4, 0x4E,  // ....X..N
                                /* 2CC0 */  0xCA, 0x67, 0xB0, 0x88, 0x07, 0xE5, 0x7B, 0x95,  // .g....{.
                                /* 2CC8 */  0x0F, 0x0A, 0x1C, 0x8D, 0x43, 0x63, 0x87, 0xE1,  // ....Cc..
                                /* 2CD0 */  0x01, 0x07, 0x3B, 0x88, 0xC3, 0x78, 0x93, 0x35,  // ..;..x.5
                                /* 2CD8 */  0x81, 0x27, 0x74, 0xA2, 0x07, 0xF9, 0x46, 0xF0,  // .'t...F.
                                /* 2CE0 */  0x74, 0x10, 0x35, 0x46, 0x73, 0x50, 0xE4, 0xAC,  // t.5FsP..
                                /* 2CE8 */  0x00, 0x9E, 0xA3, 0x00, 0x8C, 0xFF, 0xFF, 0x51,  // .......Q
                                /* 2CF0 */  0xC0, 0xB3, 0xF7, 0x39, 0xE0, 0x31, 0x20, 0x54,  // ...9.1 T
                                /* 2CF8 */  0xF0, 0xD7, 0x85, 0xD8, 0xA7, 0x72, 0x2E, 0xF1,  // .....r..
                                /* 2D00 */  0x9F, 0x75, 0x8D, 0x72, 0x18, 0x98, 0x93, 0x84,  // .u.r....
                                /* 2D08 */  0xCF, 0x7E, 0xEF, 0x09, 0x3E, 0x49, 0x30, 0xF7,  // .~..>I0.
                                /* 2D10 */  0xE3, 0xD1, 0x9D, 0xB9, 0xB5, 0x19, 0x09, 0x24,  // .......$
                                /* 2D18 */  0x06, 0xB3, 0x85, 0xA1, 0xDB, 0xD8, 0x69, 0x1A,  // ......i.
                                /* 2D20 */  0xC5, 0x77, 0x81, 0xF3, 0x7A, 0x61, 0x88, 0x72,  // .w..za.r
                                /* 2D28 */  0x0C, 0x27, 0x11, 0x25, 0x50, 0x94, 0x20, 0xD1,  // .'.%P. .
                                /* 2D30 */  0xDE, 0xC4, 0x22, 0x46, 0x8B, 0x11, 0x37, 0x44,  // .."F..7D
                                /* 2D38 */  0xD4, 0x30, 0xF1, 0x22, 0xB4, 0x3F, 0x08, 0x12,  // .0.".?..
                                /* 2D40 */  0xEE, 0x34, 0xA0, 0x03, 0x87, 0x23, 0x8D, 0x06,  // .4...#..
                                /* 2D48 */  0x75, 0x98, 0xE2, 0xA7, 0x81, 0xD7, 0x0A, 0x1F,  // u.......
                                /* 2D50 */  0x38, 0x0C, 0x72, 0x06, 0x9E, 0xDD, 0xA3, 0x80,  // 8.r.....
                                /* 2D58 */  0x07, 0xCD, 0xEE, 0x08, 0xFE, 0x1D, 0xF8, 0x6C,  // .......l
                                /* 2D60 */  0x80, 0x77, 0x0D, 0xA8, 0x4B, 0xC1, 0x23, 0x01,  // .w..K.#.
                                /* 2D68 */  0x3B, 0x7B, 0xC0, 0x3F, 0x65, 0xC0, 0x1F, 0x8F,  // ;{.?e...
                                /* 2D70 */  0xCF, 0x00, 0x9E, 0xCF, 0x09, 0x27, 0xB0, 0xFC,  // .....'..
                                /* 2D78 */  0x41, 0xA0, 0x46, 0x66, 0x68, 0x9F, 0x01, 0x4E,  // A.Ffh..N
                                /* 2D80 */  0xEB, 0x55, 0xC0, 0x57, 0x3F, 0x9F, 0x0A, 0xB8,  // .U.W?...
                                /* 2D88 */  0x82, 0xA3, 0x09, 0x28, 0xC6, 0x03, 0x7F, 0xE4,  // ...(....
                                /* 2D90 */  0x4F, 0x18, 0xBE, 0x2F, 0x78, 0xBE, 0x3E, 0x70,  // O../x.>p
                                /* 2D98 */  0x60, 0x0F, 0x21, 0x60, 0x3B, 0x2A, 0xE0, 0x86,  // `.!`;*..
                                /* 2DA0 */  0xC0, 0xFF, 0xFF, 0x47, 0x10, 0x60, 0x10, 0xF0,  // ...G.`..
                                /* 2DA8 */  0x69, 0xAE, 0xA1, 0x3A, 0xDE, 0x33, 0x5D, 0x36,  // i..:.3]6
                                /* 2DB0 */  0x4E, 0xED, 0xF4, 0x4C, 0xE0, 0xA7, 0xBA, 0x4F,  // N..L...O
                                /* 2DB8 */  0x65, 0x6C, 0x14, 0x3D, 0x62, 0x0B, 0xF7, 0x25,  // el.=b..%
                                /* 2DC0 */  0xC5, 0x87, 0x6F, 0x4E, 0x30, 0xF2, 0x5B, 0x41,  // ..oN0.[A
                                /* 2DC8 */  0x9F, 0x05, 0xC1, 0x93, 0xB0, 0x30, 0x3A, 0x8D,  // .....0:.
                                /* 2DD0 */  0x78, 0x44, 0x1E, 0x3F, 0x81, 0x11, 0x9C, 0x41,  // xD.?...A
                                /* 2DD8 */  0x7C, 0x4E, 0x70, 0x86, 0xD3, 0x0E, 0x3D, 0x0C,  // |Np...=.
                                /* 2DE0 */  0xF0, 0x23, 0x80, 0xC7, 0xC1, 0xC6, 0x7E, 0x8C,  // .#....~.
                                /* 2DE8 */  0x9E, 0x54, 0x50, 0x36, 0x44, 0x9F, 0x05, 0xF8,  // .TP6D...
                                /* 2DF0 */  0x01, 0xC5, 0x97, 0x03, 0x23, 0x5B, 0xCD, 0x29,  // ....#[.)
                                /* 2DF8 */  0x08, 0x05, 0x66, 0x6C, 0x76, 0x0D, 0x06, 0x5F,  // ..flv.._
                                /* 2E00 */  0x8C, 0x19, 0xA1, 0xEF, 0x4A, 0xBE, 0xFD, 0xE0,  // ....J...
                                /* 2E08 */  0xC6, 0x04, 0xEE, 0xB9, 0x7A, 0x4C, 0xE0, 0xD2,  // ....zL..
                                /* 2E10 */  0x77, 0x63, 0x00, 0x05, 0x90, 0x4F, 0x08, 0xBE,  // wc...O..
                                /* 2E18 */  0xA1, 0xBE, 0x24, 0xB0, 0x29, 0x84, 0x08, 0x13,  // ..$.)...
                                /* 2E20 */  0xCD, 0xE8, 0x5C, 0xB0, 0x83, 0xFF, 0xFF, 0x69,  // ..\....i
                                /* 2E28 */  0x00, 0x23, 0x11, 0x46, 0x33, 0x32, 0x88, 0xBF,  // .#.F32..
                                /* 2E30 */  0x07, 0x12, 0x10, 0x08, 0x42, 0x4E, 0x8E, 0x8B,  // ....BN..
                                /* 2E38 */  0x90, 0x6E, 0x08, 0x98, 0x6B, 0x3F, 0x27, 0xF0,  // .n..k?'.
                                /* 2E40 */  0x09, 0xCB, 0x47, 0x12, 0x38, 0xD3, 0x3E, 0xBC,  // ..G.8.>.
                                /* 2E48 */  0x57, 0x07, 0xCF, 0xC4, 0x70, 0x1E, 0x2F, 0x87,  // W...p./.
                                /* 2E50 */  0xF3, 0x91, 0x80, 0x9F, 0x18, 0x7C, 0x8C, 0x02,  // .....|..
                                /* 2E58 */  0x8F, 0xB3, 0xDB, 0x8C, 0x8E, 0x70, 0xDC, 0xC9,  // .....p..
                                /* 2E60 */  0x61, 0x82, 0x1E, 0x6E, 0xF9, 0xC0, 0xF0, 0x04,  // a..n....
                                /* 2E68 */  0x0E, 0x76, 0x0C, 0xA3, 0xC3, 0x82, 0x2B, 0xF0,  // .v....+.
                                /* 2E70 */  0x68, 0x84, 0x3E, 0x15, 0xB1, 0x79, 0xF2, 0x21,  // h.>..y.!
                                /* 2E78 */  0x3D, 0xF3, 0x78, 0xBC, 0x70, 0x87, 0x09, 0x0F,  // =.x.p...
                                /* 2E80 */  0xCA, 0xC3, 0x04, 0xDF, 0x81, 0xC7, 0xC7, 0x01,  // ........
                                /* 2E88 */  0xDC, 0x46, 0x7D, 0x84, 0xC3, 0x4E, 0x08, 0xC6,  // .F}..N..
                                /* 2E90 */  0x79, 0x00, 0xCC, 0xFF, 0xFF, 0x71, 0xB3, 0x91,  // y....q..
                                /* 2E98 */  0x81, 0xEF, 0xCC, 0xED, 0xF3, 0x00, 0xEE, 0xAC,  // ........
                                /* 2EA0 */  0xE1, 0x91, 0xC1, 0x22, 0x18, 0xED, 0x40, 0x00,  // ..."..@.
                                /* 2EA8 */  0x8A, 0x29, 0xF9, 0x40, 0x00, 0x7F, 0xC4, 0xF0,  // .).@....
                                /* 2EB0 */  0x07, 0x0A, 0xEF, 0x8C, 0xE1, 0x81, 0x82, 0xEF,  // ........
                                /* 2EB8 */  0xD0, 0x80, 0xBB, 0x87, 0x80, 0x11, 0x1E, 0x13,  // ........
                                /* 2EC0 */  0x6A, 0x54, 0xF4, 0x9A, 0xE2, 0x71, 0xF1, 0xB1,  // jT...q..
                                /* 2EC8 */  0x7B, 0xA0, 0x0C, 0xFB, 0xAD, 0xC7, 0xA2, 0x27,  // {......'
                                /* 2ED0 */  0xA9, 0x5B, 0xD0, 0x63, 0x22, 0x1B, 0x9B, 0x61,  // .[.c"..a
                                /* 2ED8 */  0x3D, 0x74, 0x0E, 0x6B, 0xB4, 0x47, 0x42, 0x8F,  // =t.k.GB.
                                /* 2EE0 */  0xD5, 0x97, 0x2D, 0xCF, 0xCC, 0x97, 0x69, 0x76,  // ..-...iv
                                /* 2EE8 */  0xEE, 0x05, 0xD7, 0x81, 0x88, 0x9D, 0x9B, 0x31,  // .......1
                                /* 2EF0 */  0x07, 0x00, 0xCC, 0xFF, 0xFF, 0x85, 0xC0, 0xE2,  // ........
                                /* 2EF8 */  0x3F, 0x57, 0x74, 0x3E, 0xC2, 0x09, 0x04, 0xD2,  // ?Wt>....
                                /* 2F00 */  0xF9, 0x88, 0x1F, 0x07, 0x7C, 0x3E, 0xC2, 0x4B,  // ....|>.K
                                /* 2F08 */  0x3A, 0x18, 0x51, 0x08, 0x1F, 0x37, 0x7D, 0xFC,  // :.Q..7}.
                                /* 2F10 */  0xF6, 0x11, 0x86, 0x1F, 0x9E, 0x0D, 0x66, 0x10,  // ......f.
                                /* 2F18 */  0x1F, 0x53, 0x7C, 0x20, 0xB1, 0x91, 0xA3, 0x09,  // .S| ....
                                /* 2F20 */  0x28, 0x42, 0x1C, 0x1D, 0xA0, 0x1D, 0x7F, 0xD8,  // (B......
                                /* 2F28 */  0x09, 0x03, 0xD6, 0xF9, 0x92, 0x1D, 0x0E, 0xD8,  // ........
                                /* 2F30 */  0x81, 0x01, 0xDE, 0x4D, 0x09, 0x7C, 0xE7, 0x05,  // ...M.|..
                                /* 2F38 */  0xE0, 0x7D, 0x66, 0xF2, 0x79, 0x01, 0x38, 0x1D,  // .}f.y.8.
                                /* 2F40 */  0x10, 0xD8, 0x79, 0x01, 0xDE, 0xFF, 0xFF, 0xFC,  // ..y.....
                                /* 2F48 */  0xA2, 0x17, 0xB9, 0xEF, 0x59, 0x7E, 0x1D, 0x48,  // ....Y~.H
                                /* 2F50 */  0x2A, 0x0C, 0xEA, 0xC0, 0x09, 0xB8, 0x3A, 0xF0,  // *.....:.
                                /* 2F58 */  0x78, 0xCC, 0xE0, 0x00, 0xF3, 0xC1, 0xEC, 0x59,  // x......Y
                                /* 2F60 */  0xC1, 0x10, 0xB1, 0xF8, 0x8C, 0x63, 0x84, 0x8A,  // .....c..
                                /* 2F68 */  0xF1, 0xA0, 0x70, 0x44, 0xAD, 0x82, 0xE8, 0xDE,  // ..pD....
                                /* 2F70 */  0x17, 0x25, 0x46, 0xEC, 0x93, 0x79, 0xDD, 0xF5,  // .%F..y..
                                /* 2F78 */  0x71, 0xC0, 0xB7, 0x01, 0x9F, 0x7A, 0x3D, 0xA1,  // q....z=.
                                /* 2F80 */  0xC8, 0xAF, 0x8C, 0x3E, 0x76, 0xC2, 0x1F, 0xD6,  // ...>v...
                                /* 2F88 */  0x09, 0x1C, 0xD6, 0x71, 0xBD, 0x77, 0xFA, 0xC2,  // ...q.w..
                                /* 2F90 */  0x79, 0x34, 0xEF, 0x9C, 0x46, 0x78, 0x71, 0x78,  // y4..Fxqx
                                /* 2F98 */  0x76, 0x88, 0x12, 0x27, 0x52, 0x90, 0x47, 0x89,  // v..'R.G.
                                /* 2FA0 */  0x28, 0xBD, 0xA1, 0x08, 0x30, 0x66, 0x94, 0x20,  // (...0f. 
                                /* 2FA8 */  0x8F, 0x33, 0xC1, 0x1E, 0x0C, 0x42, 0x86, 0x88,  // .3...B..
                                /* 2FB0 */  0xF9, 0xB2, 0x1B, 0xFC, 0x00, 0xA2, 0x44, 0x78,  // ......Dx
                                /* 2FB8 */  0xEC, 0x64, 0x21, 0x17, 0xA2, 0x21, 0xFB, 0xD8,  // .d!..!..
                                /* 2FC0 */  0x09, 0xAC, 0xFE, 0xFF, 0xC7, 0x4E, 0xC0, 0x64,  // .....N.d
                                /* 2FC8 */  0xDC, 0x93, 0x23, 0x94, 0x31, 0x3F, 0x88, 0x78,  // ..#.1?.x
                                /* 2FD0 */  0x38, 0x2C, 0xDE, 0x41, 0x1C, 0x54, 0x07, 0x1C,  // 8,.A.T..
                                /* 2FD8 */  0x0F, 0x0C, 0xFE, 0xD1, 0x05, 0x77, 0x9A, 0x80,  // .....w..
                                /* 2FE0 */  0x7B, 0x88, 0x60, 0x53, 0xE2, 0x28, 0x8F, 0x0E,  // {.`S.(..
                                /* 2FE8 */  0x3E, 0x82, 0xFB, 0x54, 0x03, 0xAE, 0xC8, 0xE3,  // >..T....
                                /* 2FF0 */  0x44, 0x03, 0xB3, 0x99, 0x84, 0x0C, 0xFC, 0x8C,  // D.......
                                /* 2FF8 */  0xF0, 0x66, 0xEE, 0x23, 0xA9, 0x06, 0x0A, 0xAA,  // .f.#....
                                /* 3000 */  0x03, 0x01, 0xE6, 0xFF, 0x3F, 0x50, 0x98, 0xA7,  // ....?P..
                                /* 3008 */  0x32, 0xDC, 0x40, 0xC1, 0x30, 0x27, 0x06, 0x12,  // 2.@.0'..
                                /* 3010 */  0xEC, 0xA0, 0xD8, 0x44, 0x3D, 0x52, 0x30, 0x5E,  // ...D=R0^
                                /* 3018 */  0x42, 0x7D, 0x74, 0xC2, 0x9D, 0x82, 0x8E, 0xC6,  // B}t.....
                                /* 3020 */  0xF7, 0x11, 0xDF, 0x1F, 0x3C, 0x2E, 0x76, 0x44,  // ....<.vD
                                /* 3028 */  0x00, 0x17, 0xA0, 0x87, 0x0A, 0x5F, 0xDE, 0x50,  // ....._.P
                                /* 3030 */  0x41, 0x33, 0x26, 0xFC, 0x99, 0x1F, 0x9C, 0x23,  // A3&....#
                                /* 3038 */  0xF5, 0x39, 0x11, 0x07, 0x6D, 0xDC, 0x98, 0x21,  // .9..m..!
                                /* 3040 */  0x4F, 0xE2, 0x01, 0x86, 0x1F, 0x11, 0xC0, 0x05,  // O.......
                                /* 3048 */  0xEA, 0xA3, 0x05, 0xD8, 0xFF, 0xFF, 0x47, 0x04,  // ......G.
                                /* 3050 */  0x3C, 0xD0, 0x39, 0xB1, 0xA3, 0x05, 0xE6, 0xFC,  // <.9.....
                                /* 3058 */  0x07, 0xBE, 0xE3, 0x9A, 0x8F, 0xAF, 0xF8, 0xE3,  // ........
                                /* 3060 */  0x10, 0xBB, 0x3D, 0xF3, 0x5B, 0xF5, 0x3B, 0x92,  // ..=.[.;.
                                /* 3068 */  0x61, 0x1E, 0x4B, 0x58, 0xC8, 0xC1, 0x82, 0xEA,  // a.KX....
                                /* 3070 */  0xE0, 0xE7, 0xC1, 0xC2, 0x3F, 0x76, 0x81, 0x67,  // ....?v.g
                                /* 3078 */  0x54, 0xD8, 0x59, 0xBC, 0x25, 0x9C, 0x15, 0x3F,  // T.Y.%..?
                                /* 3080 */  0x5F, 0xB0, 0x53, 0x27, 0x48, 0xCF, 0x09, 0xE8,  // _.S'H...
                                /* 3088 */  0x53, 0x80, 0xE7, 0x8A, 0x3B, 0x5F, 0x80, 0xEB,  // S...;_..
                                /* 3090 */  0x40, 0xE6, 0xF3, 0x05, 0xF0, 0x38, 0x27, 0xB0,  // @....8'.
                                /* 3098 */  0x29, 0x61, 0x8E, 0x09, 0x98, 0xFF, 0xFF, 0x40,  // )a.....@
                                /* 30A0 */  0xC1, 0x14, 0x7A, 0xA0, 0xE8, 0xE1, 0x19, 0x38,  // ..z....8
                                /* 30A8 */  0xA4, 0x0F, 0x09, 0xD8, 0x03, 0x06, 0xB8, 0xBE,  // ........
                                /* 30B0 */  0xEF, 0x3A, 0x60, 0x00, 0x91, 0x31, 0xB1, 0x99,  // .:`..1..
                                /* 30B8 */  0xE2, 0x87, 0x0A, 0x3C, 0x8E, 0x92, 0x1E, 0x2A,  // ...<...*
                                /* 30C0 */  0x98, 0x07, 0xE4, 0xA1, 0x02, 0x93, 0x31, 0x79,  // ......1y
                                /* 30C8 */  0xA8, 0xC0, 0x20, 0xF8, 0x50, 0xC9, 0xFF, 0xFF,  // .. .P...
                                /* 30D0 */  0x84, 0x8C, 0xBF, 0x0A, 0xF2, 0xB1, 0x62, 0x23,  // ......b#
                                /* 30D8 */  0x8E, 0x15, 0x54, 0x26, 0xCE, 0x51, 0x40, 0x65,  // ..T&.Q@e
                                /* 30E0 */  0x50, 0x98, 0xC1, 0x02, 0x83, 0xD8, 0xC7, 0x04,  // P.......
                                /* 30E8 */  0x28, 0xC7, 0x0E, 0x43, 0x9C, 0xCD, 0x3B, 0x25,  // (..C..;%
                                /* 30F0 */  0xBB, 0x10, 0xB1, 0xB1, 0x82, 0x4B, 0xC5, 0x11,  // .....K..
                                /* 30F8 */  0x0C, 0x08, 0xCD, 0x09, 0x73, 0x21, 0xC2, 0x9C,  // ....s!..
                                /* 3100 */  0x88, 0x80, 0xC1, 0x70, 0x7C, 0x6E, 0x3C, 0x57,  // ...p|n<W
                                /* 3108 */  0x38, 0xFF, 0x7F, 0x82, 0x31, 0x07, 0x0B, 0xAA,  // 8...1...
                                /* 3110 */  0xA1, 0x7A, 0xB0, 0xF0, 0x0F, 0xA7, 0x07, 0x0B,  // .z......
                                /* 3118 */  0x96, 0x41, 0x19, 0xE2, 0x7D, 0xF3, 0x70, 0x81,  // .A..}.p.
                                /* 3120 */  0x4B, 0xF4, 0x93, 0x02, 0x94, 0x93, 0xA7, 0x2F,  // K....../
                                /* 3128 */  0xA8, 0xEC, 0xA2, 0xC4, 0x46, 0x0B, 0xBE, 0x91,  // ....F...
                                /* 3130 */  0x7A, 0xB4, 0xC0, 0x03, 0xCC, 0x13, 0x8A, 0xFE,  // z.......
                                /* 3138 */  0xE4, 0xF7, 0x2A, 0x66, 0xAC, 0x67, 0x53, 0x0F,  // ..*f.gS.
                                /* 3140 */  0xD6, 0xC7, 0x1B, 0xC3, 0x44, 0x7E, 0x2C, 0x02,  // ....D~,.
                                /* 3148 */  0xA7, 0xE0, 0xC3, 0x35, 0x28, 0x50, 0xA2, 0x3F,  // ...5(P.?
                                /* 3150 */  0x0C, 0xF8, 0x04, 0x12, 0x22, 0x9A, 0xAF, 0xBA,  // ...."...
                                /* 3158 */  0x06, 0x09, 0xE4, 0xFF, 0xFF, 0xF1, 0xDA, 0xA8,  // ........
                                /* 3160 */  0xBE, 0x11, 0xD8, 0xE5, 0x54, 0x84, 0xF9, 0xEC,  // ....T...
                                /* 3168 */  0x1E, 0xED, 0xD0, 0xA2, 0x9F, 0x4C, 0x88, 0x04,  // .....L..
                                /* 3170 */  0x3E, 0x84, 0xE1, 0x07, 0xC2, 0x51, 0x9F, 0xB7,  // >....Q..
                                /* 3178 */  0xD9, 0x40, 0x5E, 0xB9, 0x8D, 0x7F, 0x5C, 0x3E,  // .@^...\>
                                /* 3180 */  0x21, 0x1B, 0xE1, 0xB8, 0x1E, 0x8C, 0x9F, 0x11,  // !.......
                                /* 3188 */  0x7C, 0x0F, 0xC3, 0x1C, 0xBB, 0x71, 0x32, 0x5E,  // |....q2^
                                /* 3190 */  0x68, 0x26, 0x50, 0x80, 0x97, 0xA8, 0x82, 0xBF,  // h&P.....
                                /* 3198 */  0x08, 0x0C, 0x43, 0x0F, 0xD3, 0x80, 0xAB, 0x53,  // ..C....S
                                /* 31A0 */  0x12, 0x3F, 0x4C, 0x83, 0x7B, 0x04, 0xEF, 0xD0,  // .?L.{...
                                /* 31A8 */  0x86, 0xF6, 0x45, 0x9A, 0x21, 0x3D, 0x4E, 0xF0,  // ..E.!=N.
                                /* 31B0 */  0x63, 0x39, 0x3B, 0x49, 0xC3, 0x1E, 0xD2, 0x53,  // c9;I...S
                                /* 31B8 */  0xE4, 0x41, 0x3D, 0x31, 0x44, 0x78, 0xE4, 0x8D,  // .A=1Dx..
                                /* 31C0 */  0xF2, 0x0C, 0xFD, 0x08, 0x12, 0x24, 0x46, 0x08,  // .....$F.
                                /* 31C8 */  0xDF, 0xA5, 0x7D, 0x97, 0x3C, 0x36, 0x43, 0x19,  // ..}.<6C.
                                /* 31D0 */  0x21, 0x0A, 0x03, 0x0D, 0x72, 0x2C, 0xC1, 0x02,  // !...r,..
                                /* 31D8 */  0x46, 0x31, 0xFE, 0x09, 0x45, 0x3B, 0x9A, 0x48,  // F1..E;.H
                                /* 31E0 */  0xFF, 0xFF, 0x27, 0x69, 0x26, 0xFC, 0xC5, 0xA1,  // ..'i&...
                                /* 31E8 */  0x03, 0x81, 0x4F, 0xD2, 0x00, 0x3F, 0x8E, 0x2F,  // ..O..?./
                                /* 31F0 */  0x3E, 0xC8, 0xE0, 0xE0, 0x8D, 0xFC, 0x78, 0x70,  // >.....xp
                                /* 31F8 */  0x64, 0x09, 0x06, 0x3B, 0x48, 0x03, 0x9D, 0x71,  // d..;H..q
                                /* 3200 */  0xE1, 0x4E, 0x12, 0x70, 0x07, 0xC4, 0x8F, 0x2F,  // .N.p.../
                                /* 3208 */  0xE0, 0x3B, 0xD3, 0xB2, 0xFF, 0xFF, 0xE1, 0x1B,  // .;......
                                /* 3210 */  0x7B, 0x5B, 0xC3, 0x1D, 0xB9, 0xC0, 0x75, 0x88,  // {[....u.
                                /* 3218 */  0x06, 0x2E, 0x60, 0x8F, 0x1D, 0xF0, 0x46, 0x0A,  // ..`...F.
                                /* 3220 */  0x46, 0xAC, 0xE7, 0x1E, 0xF0, 0x8D, 0xE5, 0x24,  // F......$
                                /* 3228 */  0x62, 0x05, 0x7C, 0xEB, 0x89, 0x75, 0x18, 0x21,  // b.|..u.!
                                /* 3230 */  0x9E, 0x79, 0x80, 0x9D, 0xD8, 0xD7, 0x88, 0x8F,  // .y......
                                /* 3238 */  0x20, 0x7E, 0x34, 0x48, 0xD6, 0x4B, 0x80, 0xC2,  //  ~4H.K..
                                /* 3240 */  0xF8, 0xCC, 0x03, 0x4C, 0xFF, 0xFF, 0x67, 0x1E,  // ...L..g.
                                /* 3248 */  0x60, 0x70, 0x16, 0xF1, 0x31, 0x01, 0x1C, 0x27,  // `p..1..'
                                /* 3250 */  0x2A, 0x58, 0xB3, 0xF7, 0x3D, 0xE0, 0x31, 0x20,  // *X..=.1 
                                /* 3258 */  0x54, 0xF0, 0x57, 0x85, 0xD8, 0xEF, 0x5D, 0xC6,  // T.W...].
                                /* 3260 */  0x7F, 0xC8, 0xF0, 0x81, 0x07, 0xF6, 0x7D, 0xC7,  // ......}.
                                /* 3268 */  0xA8, 0x6F, 0x01, 0x81, 0x5E, 0x72, 0x22, 0xF8,  // .o..^r".
                                /* 3270 */  0xA2, 0x13, 0xE9, 0xA4, 0x1E, 0x74, 0x22, 0x3D,  // .....t"=
                                /* 3278 */  0xF0, 0x78, 0x08, 0xC7, 0xF5, 0x7C, 0xF2, 0xC0,  // .x...|..
                                /* 3280 */  0xE3, 0x8B, 0x8F, 0x81, 0xA2, 0x04, 0x0D, 0xF2,  // ........
                                /* 3288 */  0x26, 0x1F, 0x21, 0x48, 0xB8, 0xB8, 0x41, 0xCE,  // &.!H..A.
                                /* 3290 */  0xCF, 0x17, 0x1E, 0x1F, 0x78, 0x58, 0xB8, 0xD3,  // ....xX..
                                /* 3298 */  0x80, 0xCE, 0x1A, 0x3E, 0xF0, 0x00, 0xC6, 0xFF,  // ...>....
                                /* 32A0 */  0xFF, 0x07, 0x1E, 0xB0, 0x1D, 0x38, 0x70, 0x67,  // .....8pg
                                /* 32A8 */  0x39, 0xB0, 0x1D, 0x15, 0x70, 0x47, 0x10, 0x60,  // 9...pG.`
                                /* 32B0 */  0x22, 0xE6, 0x3D, 0xA0, 0x33, 0x90, 0x85, 0x80,  // ".=.3...
                                /* 32B8 */  0xC8, 0xC6, 0xEF, 0x8B, 0x8D, 0x96, 0x48, 0x5C,  // ......H\
                                /* 32C0 */  0xAF, 0xA6, 0xC3, 0xC7, 0xF0, 0x08, 0xE3, 0xBB,  // ........
                                /* 32C8 */  0x9E, 0x91, 0xDE, 0x51, 0x7C, 0x86, 0xE1, 0x92,  // ...Q|...
                                /* 32D0 */  0x20, 0x05, 0x6F, 0x08, 0x8B, 0x81, 0x91, 0x14,  //  .o.....
                                /* 32D8 */  0x08, 0x0D, 0xC9, 0x07, 0x50, 0x42, 0x25, 0x30,  // ....PB%0
                                /* 32E0 */  0x83, 0xF8, 0xD8, 0xE0, 0x18, 0x10, 0x32, 0x72,  // ......2r
                                /* 32E8 */  0xF6, 0x41, 0x9F, 0x18, 0xCE, 0xEA, 0xA4, 0x7C,  // .A.....|
                                /* 32F0 */  0x36, 0xE3, 0x47, 0x06, 0x38, 0xB7, 0x03, 0x9F,  // 6.G.8...
                                /* 32F8 */  0x05, 0x38, 0x9C, 0x8F, 0x40, 0xFC, 0xF8, 0xC4,  // .8..@...
                                /* 3300 */  0x09, 0xB8, 0xAC, 0x63, 0x0E, 0x68, 0x8E, 0x17,  // ...c.h..
                                /* 3308 */  0x09, 0x46, 0x39, 0xCA, 0x43, 0x41, 0x8D, 0x18,  // .F9.CA..
                                /* 3310 */  0xF0, 0x98, 0x8E, 0x82, 0x1F, 0x47, 0x0E, 0x0A,  // .....G..
                                /* 3318 */  0x3C, 0xFF, 0xFF, 0x41, 0xC1, 0x18, 0xAE, 0x8F,  // <..A....
                                /* 3320 */  0x42, 0xE0, 0x0B, 0x72, 0x86, 0x82, 0x72, 0x17,  // B..r..r.
                                /* 3328 */  0x65, 0x67, 0x28, 0x36, 0x28, 0x70, 0x1F, 0x31,  // eg(6(p.1
                                /* 3330 */  0x3C, 0x28, 0xF0, 0x9D, 0xC1, 0x71, 0x47, 0x0B,  // <(...qG.
                                /* 3338 */  0x78, 0x40, 0xBE, 0x49, 0xF8, 0xAA, 0xF4, 0x34,  // x@.I...4
                                /* 3340 */  0xC1, 0xEE, 0x4A, 0x86, 0x89, 0x66, 0x78, 0x4C,  // ..J..fxL
                                /* 3348 */  0xB8, 0x51, 0xD1, 0x83, 0x81, 0xC7, 0xC5, 0x0F,  // .Q......
                                /* 3350 */  0x17, 0x3E, 0xFE, 0x30, 0xEC, 0xD7, 0x08, 0x8B,  // .>.0....
                                /* 3358 */  0x3E, 0x32, 0x90, 0x23, 0x17, 0xD3, 0x01, 0x4B,  // >2.#...K
                                /* 3360 */  0x47, 0xCA, 0x61, 0x8D, 0x16, 0xF6, 0x80, 0x9F,  // G.a.....
                                /* 3368 */  0x40, 0x7C, 0x7B, 0xF1, 0x99, 0x96, 0xC1, 0x7A,  // @|{....z
                                /* 3370 */  0xB4, 0x3E, 0xFF, 0x80, 0xE7, 0x84, 0xC1, 0xAE,  // .>......
                                /* 3378 */  0x19, 0x4F, 0x19, 0xEC, 0xEE, 0xEB, 0xAB, 0x8A,  // .O......
                                /* 3380 */  0x31, 0x1F, 0x7E, 0x7C, 0x31, 0xF2, 0x61, 0xE6,  // 1.~|1.a.
                                /* 3388 */  0xFD, 0x11, 0x1B, 0xCD, 0xC7, 0x28, 0x58, 0x8C,  // .....(X.
                                /* 3390 */  0x37, 0x82, 0xC2, 0xC0, 0xA0, 0x8E, 0x51, 0x30,  // 7.....Q0
                                /* 3398 */  0xFE, 0xFF, 0xC7, 0x28, 0xC0, 0xCC, 0xE9, 0xC1,  // ...(....
                                /* 33A0 */  0x27, 0x51, 0xF0, 0x9F, 0x71, 0x0F, 0x9E, 0x9F,  // 'Q..q...
                                /* 33A8 */  0xA4, 0x8D, 0x7D, 0x32, 0xF1, 0xDF, 0x8F, 0xD8,  // ..}2....
                                /* 33B0 */  0xA5, 0x99, 0x41, 0x9D, 0xD0, 0xBB, 0x9C, 0xEF,  // ..A.....
                                /* 33B8 */  0x30, 0x3E, 0x4C, 0xC1, 0xBE, 0x8E, 0xBC, 0x39,  // 0>L....9
                                /* 33C0 */  0x84, 0x38, 0xAD, 0x10, 0x27, 0xF6, 0xE8, 0xF0,  // .8..'...
                                /* 33C8 */  0x26, 0xF1, 0x12, 0x15, 0x22, 0x42, 0x9C, 0x1A,  // &..."B..
                                /* 33D0 */  0x51, 0x74, 0x9B, 0x0A, 0xD2, 0x1A, 0x0A, 0x51,  // Qt.....Q
                                /* 33D8 */  0x78, 0x0E, 0x25, 0x40, 0x51, 0xCE, 0xEA, 0xF1,  // x.%@Q...
                                /* 33E0 */  0xCD, 0x58, 0x86, 0x08, 0x7A, 0x3E, 0xD1, 0x62,  // .X..z>.b
                                /* 33E8 */  0x47, 0x89, 0xF1, 0x30, 0xC5, 0x64, 0x3C, 0x1D,  // G..0.d<.
                                /* 33F0 */  0x74, 0x88, 0xF1, 0x61, 0x0A, 0x30, 0xF0, 0xFF,  // t..a.0..
                                /* 33F8 */  0x3F, 0x4C, 0x01, 0x76, 0xC2, 0x1E, 0x87, 0xA0,  // ?L.v....
                                /* 3400 */  0x1F, 0x4C, 0x7C, 0x1A, 0x05, 0x2E, 0xF2, 0x4E,  // .L|....N
                                /* 3408 */  0x13, 0xA0, 0x39, 0x44, 0xB0, 0x29, 0x71, 0x94,  // ..9D.)q.
                                /* 3410 */  0xC7, 0x73, 0x9F, 0x90, 0xC0, 0x75, 0x1E, 0xF5,  // .s...u..
                                /* 3418 */  0x30, 0x71, 0xC0, 0x3E, 0x5B, 0x9C, 0x48, 0xC8,  // 0q.>[.H.
                                /* 3420 */  0xC0, 0x8F, 0x08, 0x41, 0xCE, 0xD3, 0x01, 0x0F,  // ...A....
                                /* 3428 */  0xA4, 0x40, 0xF2, 0xFF, 0x3F, 0x4E, 0x78, 0x73,  // .@..?Nxs
                                /* 3430 */  0x62, 0x37, 0x7B, 0x0F, 0x8A, 0x4D, 0xD4, 0x23,  // b7{..M.#
                                /* 3438 */  0x05, 0x5B, 0xE8, 0x53, 0x13, 0xFA, 0xEC, 0xC2,  // .[.S....
                                /* 3440 */  0x8E, 0x2A, 0x67, 0xE7, 0xFB, 0x88, 0x0F, 0x4A,  // .*g....J
                                /* 3448 */  0x7C, 0xA8, 0xE0, 0x02, 0xF4, 0x50, 0xE1, 0x9F,  // |....P..
                                /* 3450 */  0x97, 0x70, 0x43, 0x85, 0x3B, 0xA6, 0x37, 0x93,  // .pC.;.7.
                                /* 3458 */  0x73, 0xC2, 0xCC, 0xE2, 0xA0, 0x3C, 0x53, 0x9F,  // s....<S.
                                /* 3460 */  0xA5, 0xC0, 0x17, 0xF8, 0x50, 0x06, 0x05, 0xFA,  // ....P...
                                /* 3468 */  0xB1, 0x88, 0xCF, 0x94, 0xC5, 0x1B, 0x29, 0xA8,  // ......).
                                /* 3470 */  0x40, 0x7D, 0xB4, 0x00, 0x1E, 0x87, 0x2D, 0x1F,  // @}....-.
                                /* 3478 */  0x12, 0xEC, 0x72, 0xA0, 0x10, 0xFF, 0xFF, 0x03,  // ..r.....
                                /* 3480 */  0x05, 0x43, 0xF8, 0x81, 0xA2, 0xCF, 0x33, 0xBE,  // .C....3.
                                /* 3488 */  0x12, 0x62, 0xAF, 0x6A, 0x38, 0x82, 0x21, 0xC7,  // .b.j8.!.
                                /* 3490 */  0x0A, 0x2A, 0x0B, 0x63, 0x05, 0xC5, 0xD9, 0x11,  // .*.c....
                                /* 3498 */  0x7F, 0x64, 0x82, 0x3D, 0x2A, 0x3E, 0x8B, 0xB3,  // .d.=*>..
                                /* 34A0 */  0xC2, 0x9C, 0x2F, 0xD8, 0x70, 0xC1, 0xF7, 0x78,  // ../.p..x
                                /* 34A8 */  0xF1, 0x70, 0xF1, 0x67, 0x00, 0x43, 0x9C, 0x49,  // .p.g.C.I
                                /* 34B0 */  0x84, 0x13, 0x7A, 0x82, 0xF2, 0x3D, 0xE9, 0xDC,  // ..z..=..
                                /* 34B8 */  0x6C, 0x1C, 0x92, 0x04, 0x1D, 0x2E, 0xA8, 0x8E,  // l.......
                                /* 34C0 */  0x64, 0x1E, 0x2E, 0xFC, 0xF3, 0x35, 0xEE, 0x70,  // d....5.p
                                /* 34C8 */  0x02, 0x86, 0x59, 0xE1, 0x70, 0xA2, 0x1C, 0x16,  // ..Y.p...
                                /* 34D0 */  0x3B, 0xCC, 0x19, 0xF9, 0x05, 0xE5, 0x71, 0x01,  // ;.....q.
                                /* 34D8 */  0xE6, 0xFF, 0x7F, 0xC0, 0x60, 0x1A, 0x91, 0xC7,  // ....`...
                                /* 34E0 */  0x62, 0xE8, 0xA0, 0x1E, 0x0C, 0x8E, 0x60, 0xD4,  // b.....`.
                                /* 34E8 */  0xF1, 0x82, 0xCA, 0xC3, 0x78, 0x41, 0x31, 0xAB,  // ....xA1.
                                /* 34F0 */  0xE3, 0x05, 0xD7, 0xA4, 0xD8, 0x69, 0x8D, 0x8D,  // .....i..
                                /* 34F8 */  0x18, 0x73, 0x60, 0x00, 0x3E, 0x03, 0xC6, 0x0C,  // .s`.>...
                                /* 3500 */  0xE3, 0xD1, 0xEE, 0x80, 0xC1, 0x3C, 0x22, 0x0F,  // .....<".
                                /* 3508 */  0x18, 0xF8, 0x4C, 0xCA, 0x03, 0x06, 0xEB, 0xFF,  // ..L.....
                                /* 3510 */  0x7F, 0xC0, 0x30, 0xE3, 0x1F, 0x57, 0xA0, 0x1C,  // ..0..W..
                                /* 3518 */  0x38, 0xF0, 0x07, 0xA0, 0x37, 0x44, 0x4C, 0xCC,  // 8...7DL.
                                /* 3520 */  0x11, 0x83, 0xCA, 0xC4, 0x88, 0x41, 0x71, 0xBD,  // .....Aq.
                                /* 3528 */  0x79, 0xE0, 0x00, 0xF3, 0xB0, 0x30, 0xE3, 0x05,  // y....0..
                                /* 3530 */  0x6B, 0xEC, 0xF3, 0x15, 0x94, 0xF1, 0xB2, 0xF9,  // k.......
                                /* 3538 */  0xBC, 0x69, 0xB2, 0x6B, 0x23, 0x8B, 0x38, 0x5A,  // .i.k#.8Z
                                /* 3540 */  0x50, 0xA9, 0x38, 0x99, 0x01, 0xA1, 0x39, 0x61,  // P.8...9a
                                /* 3548 */  0x60, 0x0E, 0xCA, 0x63, 0x05, 0xE7, 0xFF, 0xFF,  // `..c....
                                /* 3550 */  0xA0, 0x04, 0x63, 0x38, 0x3E, 0xA0, 0x7B, 0xAE,  // ..c8>.{.
                                /* 3558 */  0x30, 0x4E, 0x0A, 0x60, 0x1B, 0xAA, 0x4F, 0x0A,  // 0N.`..O.
                                /* 3560 */  0xC0, 0x63, 0x50, 0x86, 0x78, 0x38, 0x3B, 0x5C,  // .cP.x8;\
                                /* 3568 */  0xE0, 0x12, 0xFD, 0xA4, 0x00, 0xE5, 0x3C, 0xEA,  // ......<.
                                /* 3570 */  0x6B, 0x2B, 0xBB, 0x7F, 0xB0, 0xD1, 0x82, 0x6F,  // k+.....o
                                /* 3578 */  0xA4, 0x1E, 0x2D, 0xF0, 0x00, 0xF3, 0x84, 0xA2,  // ..-.....
                                /* 3580 */  0xBF, 0x1F, 0xBD, 0x11, 0x1A, 0xEB, 0x89, 0xD5,  // ........
                                /* 3588 */  0x83, 0xF5, 0x55, 0xC7, 0x30, 0x91, 0x9F, 0x92,  // ..U.0...
                                /* 3590 */  0xC0, 0x79, 0xCC, 0xC0, 0x0F, 0xE8, 0xFF, 0x1F,  // .y......
                                /* 3598 */  0xDA, 0x23, 0x79, 0xED, 0xF5, 0x79, 0x34, 0xEC,  // .#y..y4.
                                /* 35A0 */  0x3B, 0xAF, 0x2F, 0x8B, 0x3E, 0x16, 0x82, 0xCF,  // ;./.>...
                                /* 35A8 */  0xC6, 0xB1, 0x10, 0xA8, 0x0C, 0x0A, 0xDE, 0x58,  // .......X
                                /* 35B0 */  0xC1, 0x27, 0xF8, 0xC4, 0x0E, 0x0A, 0x94, 0xE8,  // .'......
                                /* 35B8 */  0xCF, 0x11, 0xD6, 0x0A, 0x21, 0xB4, 0x77, 0x67,  // ....!.wg
                                /* 35C0 */  0x06, 0x12, 0xC8, 0x67, 0x76, 0xDF, 0xFF, 0x30,  // ...gv..0
                                /* 35C8 */  0x53, 0x89, 0x19, 0x2F, 0xDA, 0x53, 0xB2, 0x27,  // S../.S.'
                                /* 35D0 */  0x13, 0x22, 0x81, 0x8F, 0x75, 0xF8, 0x81, 0x70,  // ."..u..p
                                /* 35D8 */  0xD4, 0x87, 0x78, 0x36, 0x90, 0xF7, 0x78, 0xE3,  // ..x6..x.
                                /* 35E0 */  0x1F, 0x97, 0x8F, 0xDC, 0x46, 0x38, 0xAE, 0x27,  // ....F8.'
                                /* 35E8 */  0xED, 0xD7, 0x3F, 0xEC, 0x59, 0x1E, 0x27, 0xF2,  // ..?.Y.'.
                                /* 35F0 */  0x25, 0x40, 0xA5, 0x1F, 0xA7, 0x24, 0x0B, 0x06,  // %@...$..
                                /* 35F8 */  0x75, 0x3A, 0x07, 0x76, 0xFF, 0xFF, 0xD3, 0x39,  // u:.v...9
                                /* 3600 */  0xB0, 0x39, 0xE4, 0x83, 0xE7, 0x38, 0x00, 0x6B,  // .9...8.k
                                /* 3608 */  0xF6, 0xBE, 0x07, 0x3C, 0x06, 0x84, 0x0A, 0xFE,  // ...<....
                                /* 3610 */  0x0E, 0xF1, 0x9C, 0xEF, 0xB9, 0xC4, 0x8F, 0xF0,  // ........
                                /* 3618 */  0x5C, 0x0E, 0x1F, 0x24, 0x68, 0x6F, 0xF7, 0x70,  // \..$ho.p
                                /* 3620 */  0x0D, 0x29, 0xC6, 0x73, 0x40, 0x63, 0x47, 0x17,  // .).s@cG.
                                /* 3628 */  0x1D, 0x68, 0x9F, 0x18, 0xE2, 0x04, 0x8B, 0x72,  // .h.....r
                                /* 3630 */  0x5C, 0x46, 0x8B, 0x15, 0xE5, 0x21, 0xE2, 0x98,  // \F...!..
                                /* 3638 */  0x02, 0x1E, 0x5A, 0x94, 0x60, 0x31, 0x22, 0x04,  // ..Z.`1".
                                /* 3640 */  0x7B, 0x75, 0x88, 0x14, 0x34, 0xCA, 0x9B, 0xB8,  // {u..4...
                                /* 3648 */  0xA1, 0xC2, 0x3D, 0x97, 0xB3, 0x70, 0xA7, 0x01,  // ..=..p..
                                /* 3650 */  0x1D, 0x37, 0x7C, 0x2E, 0x07, 0x2C, 0xFF, 0xFF,  // .7|..,..
                                /* 3658 */  0xCF, 0xE5, 0x60, 0x3E, 0x70, 0xE0, 0x0E, 0x22,  // ..`>p.."
                                /* 3660 */  0x60, 0x3B, 0x2A, 0xE0, 0x8E, 0x20, 0xC0, 0x48,  // `;*.. .H
                                /* 3668 */  0xAC, 0x1A, 0x10, 0x16, 0xE0, 0x88, 0x20, 0x79,  // ...... y
                                /* 3670 */  0x30, 0xA8, 0x23, 0x08, 0xE0, 0xEA, 0xE8, 0xC8,  // 0.#.....
                                /* 3678 */  0x4F, 0xBB, 0x60, 0x39, 0x34, 0xF8, 0xE8, 0x63,  // O.`94..c
                                /* 3680 */  0x2C, 0x76, 0x64, 0x64, 0xB7, 0x46, 0xC3, 0xBD,  // ,vdd.F..
                                /* 3688 */  0xD8, 0x1B, 0xFA, 0x05, 0xCA, 0xD7, 0x2F, 0x76,  // ....../v
                                /* 3690 */  0x08, 0xF2, 0x09, 0xC2, 0x04, 0x3E, 0x85, 0xB0,  // .....>..
                                /* 3698 */  0xFF, 0xFF, 0x29, 0x04, 0xDE, 0xB9, 0xE3, 0xA1,  // ..).....
                                /* 36A0 */  0x23, 0xCC, 0x41, 0x45, 0x78, 0x08, 0x39, 0xAC,  // #.AEx.9.
                                /* 36A8 */  0xE7, 0x85, 0xB7, 0x8F, 0x48, 0xC6, 0x39, 0xA2,  // ....H.9.
                                /* 36B0 */  0xA7, 0x10, 0xA3, 0x1C, 0x8E, 0x4F, 0x21, 0xC6,  // .....O!.
                                /* 36B8 */  0x78, 0x04, 0x31, 0xCA, 0x93, 0xC8, 0xD3, 0x48,  // x.1....H
                                /* 36C0 */  0x84, 0x58, 0x21, 0x4E, 0x33, 0x64, 0xB0, 0xC7,  // .X!N3d..
                                /* 36C8 */  0x90, 0x68, 0x41, 0x4E, 0xE0, 0x29, 0x84, 0xC5,  // .hAN.)..
                                /* 36D0 */  0x5B, 0xA1, 0x86, 0xE8, 0x53, 0x08, 0xC0, 0x8F,  // [...S...
                                /* 36D8 */  0xD3, 0xAC, 0x8D, 0x8C, 0x07, 0x35, 0x10, 0x9F,  // .....5..
                                /* 36E0 */  0x38, 0x0C, 0xF1, 0x56, 0x65, 0xFC, 0x18, 0xA7,  // 8..Ve...
                                /* 36E8 */  0xF4, 0xD8, 0x85, 0x3F, 0xD8, 0x81, 0x6B, 0x1F,  // ...?..k.
                                /* 36F0 */  0x1A, 0x1D, 0xFA, 0xFF, 0x7F, 0x9C, 0x06, 0xF3,  // ........
                                /* 36F8 */  0x41, 0x02, 0xCE, 0xBC, 0xB0, 0xC7, 0x42, 0x26,  // A.....B&
                                /* 3700 */  0xEB, 0x78, 0x06, 0x9A, 0xEB, 0xC3, 0xA3, 0x82,  // .x......
                                /* 3708 */  0x16, 0x26, 0x25, 0x03, 0x46, 0xC1, 0x7B, 0xC0,  // .&%.F.{.
                                /* 3710 */  0xD8, 0xB3, 0x2E, 0x03, 0x79, 0x1D, 0xE7, 0x07,  // ....y...
                                /* 3718 */  0x5D, 0x9F, 0xB4, 0x19, 0x81, 0xE3, 0x8E, 0x19,  // ].......
                                /* 3720 */  0x54, 0x07, 0x04, 0x70, 0x1C, 0x4B, 0x8E, 0x19,  // T..p.K..
                                /* 3728 */  0xCC, 0xB7, 0x62, 0x3E, 0x35, 0x18, 0x87, 0x4B,  // ..b>5..K
                                /* 3730 */  0xB0, 0x1D, 0x48, 0x6A, 0x83, 0x24, 0xE3, 0x06,  // ..Hj.$..
                                /* 3738 */  0x07, 0xB2, 0xC7, 0x0D, 0xB6, 0xFF, 0xFF, 0xB8,  // ........
                                /* 3740 */  0x61, 0x01, 0x7A, 0xDC, 0xC0, 0xEE, 0x88, 0xC9,  // a.z.....
                                /* 3748 */  0xC6, 0x0D, 0x3C, 0x64, 0x8D, 0x1B, 0x7D, 0x1A,  // ..<d..}.
                                /* 3750 */  0xF2, 0xB8, 0xB1, 0x57, 0x1F, 0x76, 0x78, 0xE2,  // ...W.vx.
                                /* 3758 */  0x23, 0x87, 0x17, 0x79, 0xE4, 0xA0, 0x02, 0xF5,  // #..y....
                                /* 3760 */  0xC8, 0xE1, 0x1F, 0x91, 0xC0, 0x33, 0x72, 0x38,  // .....3r8
                                /* 3768 */  0x93, 0xC3, 0x8E, 0x1D, 0x98, 0x48, 0x1A, 0x3B,  // .....H.;
                                /* 3770 */  0xF2, 0xFF, 0x4F, 0x70, 0x00, 0x1E, 0x3B, 0x76,  // ..Op..;v
                                /* 3778 */  0x2A, 0x30, 0xA0, 0x5E, 0xC2, 0x31, 0x37, 0x2D,  // *0.^.17-
                                /* 3780 */  0x07, 0x1E, 0x3A, 0xA8, 0x2C, 0x0C, 0x1D, 0x14,  // ..:.,...
                                /* 3788 */  0x67, 0x53, 0xDC, 0xD0, 0xC1, 0x37, 0x37, 0x18,  // gS...77.
                                /* 3790 */  0x07, 0x76, 0x1C, 0xDC, 0xA3, 0x2F, 0xB8, 0x46,  // .v.../.F
                                /* 3798 */  0xCE, 0x05, 0x1D, 0x89, 0xD0, 0x43, 0xF5, 0xC8,  // .....C..
                                /* 37A0 */  0xB1, 0x17, 0xA6, 0x30, 0xE1, 0xDF, 0xEC, 0x0C,  // ...0....
                                /* 37A8 */  0x7F, 0x52, 0xCF, 0x91, 0x9E, 0xCA, 0xAB, 0xA5,  // .R......
                                /* 37B0 */  0x4F, 0x10, 0x60, 0x3B, 0xD5, 0x79, 0xDC, 0xF0,  // O.`;.y..
                                /* 37B8 */  0x45, 0x8F, 0x1B, 0xD4, 0x43, 0x3E, 0xAF, 0x90,  // E...C>..
                                /* 37C0 */  0x11, 0x62, 0xF9, 0x04, 0xE1, 0xD9, 0x31, 0x90,  // .b....1.
                                /* 37C8 */  0xB3, 0xC3, 0xFC, 0xFF, 0x67, 0xE7, 0xA3, 0x11,  // ....g...
                                /* 37D0 */  0x18, 0xE5, 0x9D, 0x20, 0xD0, 0x50, 0x1E, 0x38,  // ... .P.8
                                /* 37D8 */  0x16, 0x22, 0xF0, 0x6B, 0x98, 0xA7, 0x73, 0xB6,  // .".k..s.
                                /* 37E0 */  0x56, 0x3F, 0x15, 0x9D, 0x46, 0xE0, 0x05, 0x1F,  // V?..F...
                                /* 37E8 */  0x3C, 0xA8, 0x3C, 0x0C, 0x1E, 0x14, 0x73, 0x3D,  // <.<...s=
                                /* 37F0 */  0x78, 0x30, 0xCF, 0x0E, 0xC6, 0x91, 0xC4, 0x13,  // x0......
                                /* 37F8 */  0x62, 0x17, 0x12, 0x78, 0xE7, 0x08, 0xF0, 0x89,  // b..x....
                                /* 3800 */  0x3A, 0x22, 0x81, 0x60, 0xFC, 0x70, 0x70, 0x1E,  // :".`.pp.
                                /* 3808 */  0x43, 0x7D, 0xA5, 0x4E, 0x30, 0xF4, 0xE0, 0x41,  // C}.N0..A
                                /* 3810 */  0x35, 0x2C, 0x0F, 0x1E, 0xF6, 0xFF, 0xFF, 0x20,  // 5,..... 
                                /* 3818 */  0x01, 0xF6, 0xC1, 0xC3, 0x1E, 0x1D, 0x3F, 0xDA,  // ......?.
                                /* 3820 */  0x00, 0x8B, 0xA1, 0x83, 0xEB, 0x48, 0x02, 0x3E,  // .....H.>
                                /* 3828 */  0x13, 0x67, 0x24, 0xA0, 0x37, 0x74, 0x70, 0x9C,  // .g$.7tp.
                                /* 3830 */  0x21, 0xC0, 0x29, 0xEE, 0xB8, 0x05, 0x82, 0x91,  // !.).....
                                /* 3838 */  0xC3, 0x3A, 0xE7, 0x7B, 0x40, 0x51, 0xFC, 0xFF,  // .:.{@Q..
                                /* 3840 */  0x47, 0x79, 0x58, 0xF4, 0x89, 0x04, 0x5C, 0x2A,  // GyX...\*
                                /* 3848 */  0x4E, 0x24, 0x40, 0x7E, 0x7C, 0xF8, 0x73, 0x04,  // N$@~|.s.
                                /* 3850 */  0x58, 0x4F, 0x24, 0xE0, 0x9D, 0xCC, 0x6B, 0xB6,  // XO$...k.
                                /* 3858 */  0x4F, 0x24, 0x60, 0x1B, 0xBA, 0x4F, 0x24, 0xC0,  // O$`..O$.
                                /* 3860 */  0x7D, 0x74, 0x6C, 0xE8, 0xF0, 0xFE, 0xFF, 0x67,  // }tl....g
                                /* 3868 */  0x1B, 0xE0, 0x35, 0xE5, 0x37, 0x12, 0x0F, 0x1D,  // ..5.7...
                                /* 3870 */  0x5C, 0xC3, 0xF6, 0xD9, 0x06, 0xD8, 0x8F, 0xCE,  // \.......
                                /* 3878 */  0x43, 0x07, 0xB6, 0x97, 0xA8, 0xE7, 0x82, 0xB3,  // C.......
                                /* 3880 */  0x39, 0x74, 0xB0, 0xD9, 0x18, 0x3A, 0x90, 0xF9,  // 9t...:..
                                /* 3888 */  0xFF, 0x0F, 0x1D, 0x8C, 0xA3, 0x63, 0x47, 0x53,  // .....cGS
                                /* 3890 */  0x60, 0x71, 0x9E, 0x84, 0x71, 0x1C, 0x81, 0x07,  // `q..q...
                                /* 3898 */  0x79, 0x38, 0xC7, 0x91, 0xC0, 0x63, 0x07, 0x97,  // y8...c..
                                /* 38A0 */  0x8E, 0xF3, 0x08, 0x20, 0x60, 0x78, 0xEC, 0xE8,  // ... `x..
                                /* 38A8 */  0x06, 0x5C, 0x47, 0x73, 0x32, 0xD1, 0x0E, 0x1D,  // .\Gs2...
                                /* 38B0 */  0x3C, 0xFF, 0xFF, 0xA1, 0x33, 0x1F, 0x43, 0x07,  // <...3.C.
                                /* 38B8 */  0x04, 0x8C, 0xCE, 0x67, 0x24, 0xE0, 0x8B, 0x70,  // ...g$..p
                                /* 38C0 */  0x44, 0x87, 0x0E, 0xB6, 0x41, 0x79, 0xE8, 0xC0,  // D...Ay..
                                /* 38C8 */  0x7E, 0x74, 0x1E, 0x3A, 0x70, 0xF9, 0xFF, 0x0F,  // ~t.:p...
                                /* 38D0 */  0x1D, 0x1C, 0xA3, 0x78, 0x72, 0xF3, 0xD0, 0xC1,  // ...xr...
                                /* 38D8 */  0x75, 0xFE, 0xF5, 0xD0, 0x81, 0xFD, 0xE8, 0x3C,  // u......<
                                /* 38E0 */  0x74, 0x60, 0x3B, 0xE4, 0xA3, 0x38, 0x9C, 0x43,  // t`;..8.C
                                /* 38E8 */  0x07, 0xDB, 0x50, 0x3C, 0x74, 0xE0, 0x3E, 0xAA,  // ..P<t.>.
                                /* 38F0 */  0xFF, 0xFF, 0xD1, 0xF9, 0x8C, 0x04, 0x5C, 0xAF,  // ......\.
                                /* 38F8 */  0xD3, 0x01, 0x03, 0x9D, 0x67, 0x98, 0x67, 0x24,  // ....g.g$
                                /* 3900 */  0xF0, 0x39, 0x19, 0x3B, 0x90, 0x1F, 0x1E, 0xE6,  // .9.;....
                                /* 3908 */  0x8C, 0x04, 0xCE, 0x33, 0x2E, 0x58, 0xB5, 0x0E,  // ...3.X..
                                /* 3910 */  0x48, 0x17, 0x1B, 0x9F, 0x71, 0xC1, 0x06, 0xE6,  // H...q...
                                /* 3918 */  0x33, 0x2E, 0x98, 0xFE, 0xFF, 0x43, 0x07, 0x3E,  // 3....C.>
                                /* 3920 */  0xA3, 0x63, 0x23, 0x07, 0xE7, 0x49, 0xC6, 0xC0,  // .c#..I..
                                /* 3928 */  0xB8, 0xA1, 0x7B, 0xC4, 0xA7, 0xED, 0x5B, 0xE1,  // ..{...[.
                                /* 3930 */  0x0B, 0xA6, 0x8F, 0xA3, 0x46, 0x89, 0xFE, 0x4A,  // ....F..J
                                /* 3938 */  0x70, 0x48, 0x67, 0x12, 0x22, 0xDA, 0x0B, 0x00,  // pHg."...
                                /* 3940 */  0x43, 0x79, 0xC1, 0x38, 0x8A, 0x47, 0x00, 0x3E,  // Cy.8.G.>
                                /* 3948 */  0x9E, 0xB0, 0x47, 0x12, 0x22, 0x41, 0x91, 0x23,  // ..G."A.#
                                /* 3950 */  0x45, 0x0F, 0x82, 0x0F, 0x20, 0x5E, 0x74, 0x0F,  // E... ^t.
                                /* 3958 */  0xE2, 0x64, 0xA2, 0x84, 0x3E, 0x26, 0x0F, 0xF4,  // .d..>&..
                                /* 3960 */  0x1C, 0x23, 0x1C, 0x53, 0xB9, 0x17, 0x05, 0xA2,  // .#.S....
                                /* 3968 */  0x79, 0x8A, 0x9A, 0x57, 0xD9, 0x40, 0x22, 0xF0,  // y..W.@".
                                /* 3970 */  0x08, 0x78, 0x4C, 0x12, 0x1A, 0xEB, 0x8C, 0xA0,  // .xL.....
                                /* 3978 */  0x60, 0x30, 0x28, 0x0D, 0x20, 0x92, 0x73, 0x18,  // `0(. .s.
                                /* 3980 */  0x40, 0xB1, 0xF9, 0x58, 0x70, 0x22, 0xEF, 0x76,  // @..Xp".v
                                /* 3988 */  0x3E, 0x0B, 0x58, 0x12, 0x1C, 0x6A, 0x98, 0x9E,  // >.X..j..
                                /* 3990 */  0xD8, 0x33, 0xC0, 0xE1, 0x9E, 0xC8, 0xF9, 0xFB,  // .3......
                                /* 3998 */  0x32, 0x10, 0x92, 0x1D, 0x8F, 0x3D, 0x14, 0x7E,  // 2....=.~
                                /* 39A0 */  0x40, 0xF0, 0xB4, 0x4E, 0xCA, 0xDA, 0x11, 0x35,  // @..N...5
                                /* 39A8 */  0x28, 0xC3, 0x24, 0xF0, 0x59, 0x81, 0xA1, 0x71,  // (.$.Y..q
                                /* 39B0 */  0x68, 0xEC, 0x30, 0x3C, 0xEE, 0x60, 0x07, 0x71,  // h.0<.`.q
                                /* 39B8 */  0x18, 0x87, 0xF7, 0x1C, 0xC2, 0x26, 0x74, 0xA2,  // .....&t.
                                /* 39C0 */  0x07, 0xF9, 0x46, 0x50, 0x3C, 0xAA, 0x30, 0x9A,  // ..FP<.0.
                                /* 39C8 */  0x83, 0x22, 0x41, 0x8E, 0x0B, 0x10, 0xFE, 0xFF,  // ."A.....
                                /* 39D0 */  0xC7, 0x05, 0x58, 0x60, 0x9E, 0xF1, 0x83, 0x81,  // ..X`....
                                /* 39D8 */  0x21, 0x62, 0xF1, 0x73, 0x42, 0x8C, 0x50, 0x31,  // !b.sB.P1
                                /* 39E0 */  0x4E, 0x1C, 0x0B, 0x74, 0x4C, 0x47, 0xE3, 0x53,  // N..tLG.S
                                /* 39E8 */  0xBF, 0x61, 0x22, 0x1B, 0xD1, 0x20, 0x11, 0x23,  // .a".. .#
                                /* 39F0 */  0x9C, 0x9E, 0xAF, 0xFE, 0xC6, 0xF4, 0x0D, 0xC2,  // ........
                                /* 39F8 */  0xE8, 0x46, 0x09, 0x1B, 0xEF, 0x01, 0xC2, 0x04,  // .F......
                                /* 3A00 */  0x86, 0x39, 0x28, 0xCC, 0xD1, 0xC2, 0x9E, 0x6F,  // .9(....o
                                /* 3A08 */  0x0D, 0xE4, 0x68, 0xC1, 0xDC, 0x1F, 0x1B, 0xA4,  // ..h.....
                                /* 3A10 */  0x0C, 0x42, 0xE3, 0x8B, 0x7D, 0x98, 0xC6, 0x6A,  // .B..}..j
                                /* 3A18 */  0x0B, 0x46, 0x18, 0xBD, 0xA1, 0x90, 0x51, 0x86,  // .F....Q.
                                /* 3A20 */  0x8B, 0xF3, 0xFC, 0x10, 0x25, 0x5A, 0x71, 0x02,  // ....%Zq.
                                /* 3A28 */  0x14, 0x43, 0x11, 0xA4, 0xD6, 0x10, 0x84, 0x11,  // .C......
                                /* 3A30 */  0x38, 0x52, 0xB4, 0x38, 0x46, 0xF4, 0x90, 0xDA,  // 8R.8F...
                                /* 3A38 */  0x1F, 0x04, 0x91, 0xE0, 0xE1, 0xA8, 0xCE, 0x22,  // ......."
                                /* 3A40 */  0x8D, 0x06, 0x75, 0x6A, 0xF0, 0xF9, 0xC0, 0x67,  // ..uj...g
                                /* 3A48 */  0x83, 0x33, 0x3B, 0x2A, 0x8F, 0x21, 0xC8, 0xB1,  // .3;*.!..
                                /* 3A50 */  0x1C, 0xC0, 0x93, 0xC3, 0x83, 0x81, 0x8F, 0x00,  // ........
                                /* 3A58 */  0x6C, 0x6A, 0x3E, 0x8D, 0xF8, 0xA4, 0x80, 0x77,  // lj>....w
                                /* 3A60 */  0x0D, 0xA8, 0x2B, 0xC2, 0x03, 0x02, 0x3B, 0x8C,  // ..+...;.
                                /* 3A68 */  0xC0, 0x3F, 0x73, 0xC0, 0x1F, 0x8F, 0x4F, 0x04,  // .?s...O.
                                /* 3A70 */  0x9E, 0xCF, 0x09, 0x27, 0xB0, 0xFC, 0x41, 0xA0,  // ...'..A.
                                /* 3A78 */  0x46, 0x66, 0x68, 0x9F, 0x2D, 0x4E, 0xEB, 0x99,  // Ffh.-N..
                                /* 3A80 */  0xC0, 0x87, 0x81, 0xC3, 0x62, 0x62, 0x21, 0xA4,  // ....bb!.
                                /* 3A88 */  0xE0, 0xAC, 0x02, 0x8A, 0xF1, 0xC0, 0xFE, 0xFF,  // ........
                                /* 3A90 */  0x13, 0x1C, 0xFF, 0xF3, 0x86, 0x6F, 0x0F, 0x9E,  // .....o..
                                /* 3A98 */  0xAF, 0x09, 0x86, 0x3D, 0x56, 0xD1, 0xF1, 0xF0,  // ...=V...
                                /* 3AA0 */  0x51, 0xF8, 0x74, 0x84, 0x0B, 0x77, 0xA6, 0x01,  // Q.t..w..
                                /* 3AA8 */  0xD5, 0xBF, 0x43, 0x03, 0x03, 0xC1, 0xD9, 0xE0,  // ..C.....
                                /* 3AB0 */  0x99, 0x06, 0x3C, 0x17, 0x08, 0x7E, 0xB8, 0x02,  // ..<..~..
                                /* 3AB8 */  0xAB, 0x94, 0x13, 0x11, 0x7A, 0x80, 0x3E, 0x6A,  // ....z.>j
                                /* 3AC0 */  0xB0, 0x33, 0x06, 0x3F, 0xC2, 0xC4, 0xF1, 0xC0,  // .3.?....
                                /* 3AC8 */  0x3C, 0xA0, 0x57, 0xA8, 0x38, 0xA7, 0xE8, 0xD1,  // <.W.8...
                                /* 3AD0 */  0xB2, 0x51, 0x7B, 0xB4, 0xE0, 0x39, 0x15, 0x80,  // .Q{..9..
                                /* 3AD8 */  0xE3, 0x7C, 0xE0, 0x23, 0x09, 0x98, 0xCE, 0x22,  // .|.#..."
                                /* 3AE0 */  0x98, 0x89, 0x61, 0x81, 0x3C, 0x32, 0x36, 0x6A,  // ..a.<26j
                                /* 3AE8 */  0x30, 0xFF, 0xFF, 0x47, 0x0D, 0x03, 0xF8, 0x71,  // 0..G...q
                                /* 3AF0 */  0x85, 0x4D, 0x33, 0x6E, 0x88, 0xA3, 0x06, 0x16,  // .M3n....
                                /* 3AF8 */  0x80, 0x1E, 0x35, 0xF0, 0x18, 0x18, 0x76, 0xD4,  // ..5...v.
                                /* 3B00 */  0xC0, 0x73, 0x14, 0x8F, 0x40, 0x47, 0x0D, 0x6C,  // .s..@G.l
                                /* 3B08 */  0x40, 0x3D, 0x6A, 0x60, 0x32, 0x30, 0xDC, 0xA8,  // @=j`20..
                                /* 3B10 */  0xC1, 0xF5, 0xFF, 0x1F, 0x35, 0x58, 0x64, 0x8C,  // ....5Xd.
                                /* 3B18 */  0x5A, 0x07, 0x42, 0x8F, 0x9A, 0x9F, 0xB2, 0x7C,  // Z.B....|
                                /* 3B20 */  0xFA, 0xF1, 0x28, 0x3C, 0x93, 0x77, 0x2C, 0x1F,  // ..(<.w,.
                                /* 3B28 */  0x2C, 0xA2, 0x3F, 0xC0, 0x18, 0x28, 0xCA, 0xEB,  // ,.?..(..
                                /* 3B30 */  0x58, 0xEF, 0x78, 0xBA, 0xDE, 0x39, 0xEA, 0xA0,  // X.x..9..
                                /* 3B38 */  0x41, 0x65, 0x61, 0xD0, 0xA0, 0x98, 0xD8, 0x41,  // Aea....A
                                /* 3B40 */  0x83, 0x65, 0x5C, 0xF8, 0x61, 0x9C, 0x17, 0x06,  // .e\.a...
                                /* 3B48 */  0xE6, 0xC0, 0x0E, 0xE8, 0xC0, 0x3C, 0x67, 0x36,  // .....<g6
                                /* 3B50 */  0x66, 0xF0, 0x38, 0xBB, 0x44, 0xE9, 0xD0, 0xC4,  // f.8.D...
                                /* 3B58 */  0x8F, 0x76, 0x60, 0x1B, 0x44, 0x98, 0x83, 0x88,  // .v`.D...
                                /* 3B60 */  0xF4, 0x46, 0xF0, 0x3C, 0x67, 0xB8, 0x48, 0xAF,  // .F.<g.H.
                                /* 3B68 */  0x73, 0x86, 0x89, 0x14, 0xC6, 0x27, 0x77, 0x86,  // s....'w.
                                /* 3B70 */  0x61, 0xF4, 0xD3, 0x0A, 0xE4, 0x0B, 0x9E, 0x71,  // a......q
                                /* 3B78 */  0x9E, 0xF1, 0x80, 0x5B, 0x36, 0x15, 0x20, 0x4C,  // ...[6. L
                                /* 3B80 */  0xBE, 0x81, 0xFF, 0x3F, 0x44, 0x79, 0xCF, 0x02,  // ...?Dy..
                                /* 3B88 */  0x0A, 0xE3, 0x33, 0x1E, 0xE0, 0x4A, 0xF0, 0x99,  // ..3..J..
                                /* 3B90 */  0x01, 0x34, 0xA7, 0x47, 0xB8, 0x38, 0xBE, 0x08,  // .4.G.8..
                                /* 3B98 */  0xBC, 0x07, 0x04, 0x7A, 0x67, 0x30, 0xFC, 0xC1,  // ...zg0..
                                /* 3BA0 */  0x1C, 0xCD, 0x11, 0x44, 0x78, 0xAE, 0x03, 0xC3,  // ...Dx...
                                /* 3BA8 */  0x8C, 0x1E, 0x1A, 0x9E, 0xEB, 0x7C, 0xA7, 0x7B,  // .....|.{
                                /* 3BB0 */  0x11, 0x78, 0x79, 0xF3, 0xB9, 0x8E, 0x9D, 0xB1,  // .xy.....
                                /* 3BB8 */  0x62, 0x3D, 0xD7, 0x19, 0xED, 0x81, 0xCE, 0x28,  // b=.....(
                                /* 3BC0 */  0x81, 0x0E, 0x22, 0x4C, 0x3C, 0x43, 0x45, 0x09,  // .."L<CE.
                                /* 3BC8 */  0xF1, 0x50, 0x60, 0xD0, 0x20, 0xF1, 0x9E, 0xEB,  // .P`. ...
                                /* 3BD0 */  0x5E, 0x33, 0x3C, 0xC5, 0xE7, 0x3A, 0x16, 0xF0,  // ^3<..:..
                                /* 3BD8 */  0x3C, 0xA0, 0xA3, 0x87, 0xCF, 0x75, 0xC0, 0xF8,  // <....u..
                                /* 3BE0 */  0xFF, 0x7F, 0xAE, 0x03, 0x6C, 0x9D, 0x5C, 0xC1,  // ....l.\.
                                /* 3BE8 */  0x7F, 0x58, 0xC0, 0x11, 0xF8, 0x18, 0x02, 0x3C,  // .X.....<
                                /* 3BF0 */  0x34, 0x9F, 0x23, 0x75, 0x24, 0x70, 0xD6, 0xD5,  // 4.#u$p..
                                /* 3BF8 */  0xCA, 0xC6, 0x6A, 0x7D, 0x5A, 0x36, 0x84, 0x74,  // ..j}Z6.t
                                /* 3C00 */  0x00, 0xE9, 0xA8, 0xCC, 0x3D, 0x62, 0x0B, 0xF7,  // ....=b..
                                /* 3C08 */  0xD1, 0x96, 0x4F, 0xE3, 0x25, 0xC1, 0x10, 0xCF,  // ..O.%...
                                /* 3C10 */  0xC0, 0x26, 0x98, 0xFA, 0xC0, 0xA0, 0xB3, 0x9F,  // .&......
                                /* 3C18 */  0x47, 0xEF, 0xBC, 0x24, 0xCA, 0x3C, 0x26, 0x3A,  // G..$.<&:
                                /* 3C20 */  0x04, 0xA7, 0x3C, 0x02, 0x52, 0x10, 0x03, 0x3A,  // ..<.R..:
                                /* 3C28 */  0x02, 0x84, 0x8C, 0x1C, 0x08, 0x50, 0x5F, 0x14,  // .....P_.
                                /* 3C30 */  0xDF, 0x43, 0xF9, 0x94, 0x74, 0x69, 0xA0, 0x73,  // .C..ti.s
                                /* 3C38 */  0xF4, 0x75, 0x80, 0xDF, 0x52, 0x7C, 0x40, 0x30,  // .u..R|@0
                                /* 3C40 */  0xB0, 0xD5, 0x5C, 0x89, 0x50, 0x60, 0xFE, 0xFF,  // ..\.P`..
                                /* 3C48 */  0x1F, 0x8D, 0xD8, 0x21, 0x9D, 0x1C, 0x79, 0x40,  // ...!..y@
                                /* 3C50 */  0x73, 0x38, 0xB4, 0xBE, 0x23, 0x01, 0x28, 0x80,  // s8..#.(.
                                /* 3C58 */  0x3C, 0x7F, 0x1F, 0x72, 0x7C, 0x1C, 0x60, 0x17,  // <..r|.`.
                                /* 3C60 */  0x1E, 0xA3, 0x19, 0x9D, 0x47, 0x9F, 0x29, 0xEA,  // ....G.).
                                /* 3C68 */  0xFA, 0xE5, 0x99, 0x1A, 0xC4, 0x33, 0xF5, 0xD5,  // .....3..
                                /* 3C70 */  0xD6, 0x33, 0xC5, 0xCD, 0xC4, 0xA3, 0xC7, 0x5E,  // .3.....^
                                /* 3C78 */  0x4C, 0xD8, 0x7D, 0x03, 0xCE, 0x98, 0x23, 0x3E,  // L.}...#>
                                /* 3C80 */  0x16, 0x78, 0x1A, 0x86, 0xF3, 0x60, 0x39, 0x9C,  // .x...`9.
                                /* 3C88 */  0x07, 0xCB, 0xC7, 0xE2, 0xC9, 0x82, 0x4B, 0xE0,  // ......K.
                                /* 3C90 */  0x64, 0x41, 0x0E, 0x8F, 0x89, 0x36, 0x28, 0x3A,  // dA...6(:
                                /* 3C98 */  0x1E, 0x0F, 0x8B, 0x9F, 0x0D, 0x7C, 0xE9, 0x61,  // .....|.a
                                /* 3CA0 */  0x87, 0x71, 0x0F, 0xE6, 0xE5, 0xEC, 0x1D, 0xC1,  // .q......
                                /* 3CA8 */  0x17, 0x50, 0x0C, 0xAC, 0x07, 0xCA, 0x61, 0x8D,  // .P....a.
                                /* 3CB0 */  0x16, 0xF6, 0x45, 0xE7, 0xAD, 0xC3, 0x47, 0x16,  // ..E...G.
                                /* 3CB8 */  0x5F, 0xB5, 0x18, 0xAC, 0x2F, 0x5E, 0xE0, 0xBA,  // _.../^..
                                /* 3CC0 */  0x53, 0xB0, 0xAF, 0xC5, 0xFF, 0xFF, 0x45, 0x1D,  // S.....E.
                                /* 3CC8 */  0xCE, 0x51, 0x00, 0xF7, 0xC6, 0xB0, 0xFC, 0x5B,  // .Q.....[
                                /* 3CD0 */  0x06, 0x3A, 0xDA, 0xAA, 0x74, 0xCB, 0xE0, 0xB0,  // .:..t...
                                /* 3CD8 */  0x6F, 0x19, 0x30, 0x83, 0xDC, 0x32, 0x28, 0x84,  // o.0..2(.
                                /* 3CE0 */  0x23, 0x50, 0x28, 0x00, 0x84, 0x0E, 0x0B, 0x5C,  // #P(....\
                                /* 3CE8 */  0x32, 0x1C, 0x05, 0xF1, 0x90, 0x1D, 0xE3, 0xB0,  // 2.......
                                /* 3CF0 */  0x80, 0xBE, 0xBB, 0xF8, 0x96, 0x81, 0x39, 0x2B,  // ......9+
                                /* 3CF8 */  0xC0, 0x3C, 0x66, 0xB0, 0xB3, 0x02, 0xEC, 0x7B,  // .<f....{
                                /* 3D00 */  0x06, 0xF8, 0xCE, 0x13, 0xE0, 0x1E, 0x14, 0x38,  // .......8
                                /* 3D08 */  0xCE, 0x13, 0x80, 0x8B, 0xFF, 0xFF, 0x79, 0x02,  // ......y.
                                /* 3D10 */  0xEE, 0x91, 0xC4, 0xE7, 0x09, 0xE0, 0x74, 0x7A,  // ......tz
                                /* 3D18 */  0x60, 0xE7, 0x09, 0xB0, 0xC8, 0x38, 0x4F, 0xA0,  // `....8O.
                                /* 3D20 */  0x38, 0x2C, 0xF2, 0x3C, 0x01, 0xF1, 0x0E, 0xC9,  // 8,.<....
                                /* 3D28 */  0xEF, 0x92, 0x3A, 0x4E, 0xA0, 0xE4, 0x50, 0x48,  // ..:N..PH
                                /* 3D30 */  0xCC, 0x71, 0x02, 0x15, 0x1F, 0x8C, 0x82, 0x78,  // .q.....x
                                /* 3D38 */  0xA0, 0x1E, 0xB5, 0x8D, 0x0C, 0x84, 0x42, 0x7A,  // ......Bz
                                /* 3D40 */  0x78, 0x1E, 0x08, 0x1F, 0x86, 0x67, 0x81, 0x21,  // x....g.!
                                /* 3D48 */  0x18, 0xE2, 0x8E, 0x49, 0x4F, 0x0B, 0xE0, 0xBA,  // ...IO...
                                /* 3D50 */  0x96, 0xB2, 0x0B, 0x27, 0x3B, 0x58, 0x80, 0xDB,  // ...';X..
                                /* 3D58 */  0xEA, 0x0D, 0x92, 0x1E, 0x1A, 0x80, 0x4B, 0x30,  // ......K0
                                /* 3D60 */  0x08, 0xFD, 0xFF, 0x0F, 0x0D, 0xE0, 0x82, 0xE5,  // ........
                                /* 3D68 */  0x87, 0x06, 0xF0, 0xDC, 0xCD, 0x70, 0x87, 0x06,  // .....p..
                                /* 3D70 */  0xF0, 0x1E, 0x08, 0xF8, 0xC7, 0xC0, 0x49, 0xD6,  // ......I.
                                /* 3D78 */  0x40, 0xC5, 0x3F, 0x10, 0x24, 0x6D, 0x71, 0x14,  // @.?.$mq.
                                /* 3D80 */  0xC6, 0xB7, 0x4B, 0xC0, 0x15, 0xD0, 0xDB, 0x25,  // ..K....%
                                /* 3D88 */  0x38, 0x21, 0xDE, 0xEE, 0x7C, 0x41, 0xF0, 0xE9,  // 8!..|A..
                                /* 3D90 */  0x12, 0xEE, 0xE5, 0x12, 0x36, 0x48, 0xD8, 0xA7,  // ....6H..
                                /* 3D98 */  0xCA, 0xB0, 0x2F, 0x10, 0x11, 0xCE, 0xE9, 0x81,  // ../.....
                                /* 3DA0 */  0xF2, 0xA9, 0xF2, 0xD9, 0x32, 0xCE, 0xFF, 0x3F,  // ....2..?
                                /* 3DA8 */  0x4C, 0xAC, 0xF7, 0x4A, 0x5F, 0x2A, 0x9F, 0x05,  // L..J_*..
                                /* 3DB0 */  0xE3, 0x44, 0x79, 0xB8, 0xF4, 0x09, 0xEE, 0x2D,  // .Dy....-
                                /* 3DB8 */  0xF3, 0x21, 0xD3, 0x93, 0x0B, 0x7C, 0x5E, 0x41,  // .!...|^A
                                /* 3DC0 */  0x22, 0xC4, 0x0C, 0x13, 0xF4, 0x04, 0x22, 0xC7,  // ".....".
                                /* 3DC8 */  0x7C, 0xB9, 0x64, 0xF1, 0x2E, 0x97, 0x00, 0x4D,  // |.d....M
                                /* 3DD0 */  0x8E, 0x08, 0x2F, 0x97, 0xE0, 0x3B, 0x2B, 0xC0,  // ../..;+.
                                /* 3DD8 */  0xBB, 0x5B, 0x02, 0x13, 0x95, 0x5F, 0x71, 0x8D,  // .[..._q.
                                /* 3DE0 */  0xD5, 0x39, 0x29, 0xF4, 0xFF, 0x3F, 0x07, 0xE1,  // .9)..?..
                                /* 3DE8 */  0x54, 0x00, 0xE9, 0xD8, 0xC6, 0x0E, 0xD5, 0x07,  // T.......
                                /* 3DF0 */  0xE8, 0x1B, 0x91, 0x07, 0xEC, 0x61, 0x3D, 0x65,  // .....a=e
                                /* 3DF8 */  0x18, 0xE6, 0xD4, 0x7D, 0xB5, 0x04, 0xDF, 0xED,  // ...}....
                                /* 3E00 */  0x1D, 0x77, 0xDA, 0xE1, 0x67, 0x0B, 0x1F, 0x63,  // .w..g..c
                                /* 3E08 */  0x1E, 0x2D, 0xC1, 0x7B, 0x3A, 0xF7, 0xE1, 0x1C,  // .-.{:...
                                /* 3E10 */  0x4C, 0x57, 0x4B, 0x60, 0x39, 0x53, 0xDC, 0xED,  // LWK`9S..
                                /* 3E18 */  0xC1, 0xB7, 0x88, 0x93, 0xC7, 0xDC, 0x52, 0xDE,  // ......R.
                                /* 3E20 */  0x2C, 0xC1, 0x7E, 0xB0, 0x07, 0xDF, 0xBD, 0x09,  // ,.~.....
                                /* 3E28 */  0x6C, 0xFF, 0xFF, 0x7B, 0x13, 0x30, 0xB9, 0xFC,  // l..{.0..
                                /* 3E30 */  0xF9, 0xDE, 0x04, 0x9C, 0xAE, 0x96, 0xFC, 0x54,  // .......T
                                /* 3E38 */  0x81, 0x05, 0x7A, 0xAB, 0xC0, 0x7C, 0x30, 0x98,  // ..z..|0.
                                /* 3E40 */  0xF4, 0x3B, 0x06, 0x3A, 0xD8, 0xFA, 0x75, 0x8D,  // .;.:..u.
                                /* 3E48 */  0x62, 0x77, 0x0C, 0x98, 0x17, 0x4B, 0xF0, 0xDD,  // bw...K..
                                /* 3E50 */  0x31, 0xE0, 0x9D, 0x14, 0xE0, 0xDD, 0x2B, 0xC1,  // 1.....+.
                                /* 3E58 */  0x73, 0x52, 0x00, 0xDF, 0x69, 0x02, 0xBC, 0x83,  // sR..i...
                                /* 3E60 */  0x82, 0xF1, 0xFF, 0x3F, 0x4D, 0x00, 0xF6, 0x94,  // ...?M...
                                /* 3E68 */  0x5C, 0xEA, 0x80, 0xDE, 0x69, 0x02, 0x7E, 0x8C,  // \...i.~.
                                /* 3E70 */  0x0F, 0x97, 0x2F, 0x52, 0x5E, 0xBD, 0x84, 0xC3,  // ../R^...
                                /* 3E78 */  0xA0, 0x2E, 0x75, 0x80, 0xA9, 0xFF, 0x3F, 0x41,  // ..u...?A
                                /* 3E80 */  0xC1, 0xA3, 0x06, 0xCD, 0x35, 0xCA, 0x17, 0x04,  // ....5...
                                /* 3E88 */  0xDF, 0xE6, 0x7C, 0x33, 0xC5, 0x82, 0x3D, 0x15,  // ..|3..=.
                                /* 3E90 */  0xBC, 0x6B, 0xF9, 0x2E, 0x76, 0xD8, 0xBE, 0x25,  // .k..v..%
                                /* 3E98 */  0x3C, 0x85, 0xF9, 0x38, 0xE0, 0x91, 0xB3, 0x5B,  // <..8...[
                                /* 3EA0 */  0x1D, 0xEC, 0xC3, 0x57, 0xD8, 0xE7, 0xB9, 0x47,  // ...W...G
                                /* 3EA8 */  0x88, 0x83, 0x7A, 0x9C, 0x8B, 0xF2, 0x56, 0xC7,  // ..z...V.
                                /* 3EB0 */  0x8F, 0x11, 0xBE, 0xD5, 0x19, 0xC5, 0x78, 0x51,  // ......xQ
                                /* 3EB8 */  0x62, 0xBE, 0xD0, 0x85, 0x38, 0xB9, 0x28, 0xC1,  // b...8.(.
                                /* 3EC0 */  0x1E, 0xE9, 0x0C, 0x75, 0x7C, 0x61, 0xA3, 0xFB,  // ...u|a..
                                /* 3EC8 */  0x9A, 0x15, 0xE4, 0xDD, 0x2E, 0xD6, 0x5B, 0x1D,  // ......[.
                                /* 3ED0 */  0x8B, 0x7E, 0x62, 0xD1, 0x79, 0xC0, 0xB7, 0x3A,  // .~b.y..:
                                /* 3ED8 */  0x80, 0x1F, 0x87, 0x2C, 0x9F, 0x3F, 0x4C, 0xF0,  // ...,.?L.
                                /* 3EE0 */  0xFF, 0x3F, 0x70, 0xCC, 0x41, 0x01, 0x73, 0x44,  // .?p.A.sD
                                /* 3EE8 */  0xC7, 0x13, 0x8C, 0x78, 0xDD, 0xA5, 0x37, 0x5C,  // ...x..7\
                                /* 3EF0 */  0x1F, 0x4B, 0xF8, 0xA9, 0xC2, 0x07, 0x0A, 0x76,  // .K.....v
                                /* 3EF8 */  0x32, 0xE5, 0x97, 0x7B, 0xCC, 0xE0, 0xE0, 0x5F,  // 2..{..._
                                /* 3F00 */  0x65, 0x7C, 0x9A, 0x00, 0xF7, 0xE9, 0x07, 0x5C,  // e|.....\
                                /* 3F08 */  0x27, 0x87, 0xD7, 0x88, 0x04, 0xBE, 0x12, 0x82,  // '.......
                                /* 3F10 */  0x71, 0xD2, 0x38, 0xB0, 0x50, 0xE1, 0x7C, 0xD2,  // q.8.P.|.
                                /* 3F18 */  0xF6, 0x95, 0x10, 0x98, 0x0C, 0x19, 0x77, 0x22,  // ......w"
                                /* 3F20 */  0xF0, 0x10, 0xF8, 0x00, 0x1E, 0x96, 0xCF, 0xD0,  // ........
                                /* 3F28 */  0x07, 0x9F, 0xF3, 0xC2, 0x9D, 0x60, 0xF8, 0x45,  // .....`.E
                                /* 3F30 */  0x04, 0x73, 0xFE, 0xC1, 0x85, 0x39, 0xD0, 0xD0,  // .s...9..
                                /* 3F38 */  0x28, 0x0F, 0x02, 0xC9, 0x87, 0x41, 0x9D, 0x69,  // (....A.i
                                /* 3F40 */  0x60, 0xFF, 0xFF, 0xCF, 0x34, 0x80, 0x8D, 0xAB,  // `...4...
                                /* 3F48 */  0xB7, 0x8F, 0x0D, 0xE0, 0x50, 0x78, 0x23, 0xA2,  // ....Px#.
                                /* 3F50 */  0x48, 0xCF, 0x01, 0xEC, 0x40, 0xF3, 0xE0, 0xD0,  // H...@...
                                /* 3F58 */  0xE5, 0xD9, 0x84, 0x5C, 0x35, 0x3C, 0x92, 0xC0,  // ...\5<..
                                /* 3F60 */  0x87, 0xF5, 0x66, 0x03, 0xAE, 0x93, 0x0D, 0xEC,  // ..f.....
                                /* 3F68 */  0xC3, 0xAF, 0x4F, 0x10, 0xA7, 0x11, 0xE8, 0x01,  // ..O.....
                                /* 3F70 */  0xD8, 0xD7, 0x1A, 0x9F, 0x22, 0x9E, 0x66, 0x22,  // ....".f"
                                /* 3F78 */  0x44, 0x7A, 0xB2, 0x31, 0x5E, 0x9C, 0x68, 0x4F,  // Dz.1^.hO
                                /* 3F80 */  0x36, 0x3E, 0x27, 0x84, 0x78, 0xC1, 0x61, 0x67,  // 6>'.x.ag
                                /* 3F88 */  0x60, 0x43, 0xC7, 0x88, 0xF0, 0x84, 0x63, 0xE4,  // `C....c.
                                /* 3F90 */  0x08, 0x31, 0xA3, 0x3D, 0xD9, 0xB0, 0xD0, 0x27,  // .1.=...'
                                /* 3F98 */  0x1B, 0x40, 0xC6, 0xFF, 0xFF, 0x64, 0x03, 0x98,  // .@...d..
                                /* 3FA0 */  0x09, 0x7D, 0xD2, 0x43, 0x43, 0xFB, 0x58, 0x03,  // .}.CC.X.
                                /* 3FA8 */  0xB8, 0x3C, 0xFF, 0xF1, 0x63, 0x0D, 0x18, 0xEF,  // .<..c...
                                /* 3FB0 */  0x1B, 0xE7, 0xF0, 0xAE, 0x11, 0xE3, 0xB1, 0x06,  // ........
                                /* 3FB8 */  0x38, 0xFC, 0xFF, 0x8F, 0x35, 0xC0, 0x50, 0xA8,  // 8...5.P.
                                /* 3FC0 */  0x8A, 0x63, 0x1F, 0x46, 0x1A, 0x0C, 0xEA, 0xE4,  // .c.F....
                                /* 3FC8 */  0x07, 0x38, 0x05, 0xF3, 0x15, 0xE0, 0x41, 0xC1,  // .8....A.
                                /* 3FD0 */  0x10, 0xB1, 0xF8, 0xC5, 0x21, 0x46, 0xA8, 0x18,  // ....!F..
                                /* 3FD8 */  0x87, 0x12, 0xE8, 0x2D, 0xE4, 0x89, 0x26, 0x98,  // ...-..&.
                                /* 3FE0 */  0x0F, 0x22, 0x46, 0x62, 0x97, 0x11, 0x1F, 0x68,  // ."Fb...h
                                /* 3FE8 */  0xE0, 0x0F, 0x29, 0x4A, 0x84, 0x07, 0x98, 0x17,  // ..)J....
                                /* 3FF0 */  0x1A, 0x1F, 0x61, 0xE2, 0x3C, 0xD0, 0x18, 0xE7,  // ..a.<...
                                /* 3FF8 */  0xE4, 0x8E, 0xEB, 0x81, 0xC6, 0x47, 0x9A, 0xA3,  // .....G..
                                /* 4000 */  0x79, 0xAA, 0xF1, 0x11, 0xC3, 0x37, 0x9B, 0x07,  // y....7..
                                /* 4008 */  0x1A, 0x0F, 0x2B, 0x42, 0x94, 0x90, 0x91, 0xE2,  // ..+B....
                                /* 4010 */  0x44, 0x31, 0xDE, 0x01, 0x85, 0x3B, 0xC6, 0x07,  // D1...;..
                                /* 4018 */  0x1A, 0x16, 0x6E, 0x29, 0x3A, 0x06, 0xF8, 0x40,  // ..n):..@
                                /* 4020 */  0xC3, 0xFE, 0xFF, 0x07, 0x1A, 0x80, 0x19, 0xB1,  // ........
                                /* 4028 */  0x4F, 0xD9, 0x74, 0x3C, 0xFC, 0xB8, 0xE0, 0x13,  // O.t<....
                                /* 4030 */  0x02, 0xFE, 0xD2, 0xF1, 0x1C, 0xC3, 0x02, 0x1E,  // ........
                                /* 4038 */  0x69, 0x80, 0xF6, 0x29, 0x02, 0xC6, 0x0D, 0xD9,  // i..)....
                                /* 4040 */  0x17, 0x7F, 0x1F, 0x7B, 0xD9, 0x91, 0x06, 0x0C,  // ...{....
                                /* 4048 */  0xFF, 0x7F, 0xF4, 0x97, 0x88, 0xE3, 0xD3, 0xAA,  // ........
                                /* 4050 */  0x34, 0x56, 0xDC, 0x79, 0xC4, 0xC0, 0x47, 0xE2,  // 4V.y..G.
                                /* 4058 */  0x43, 0x81, 0x67, 0xED, 0xA9, 0xFA, 0x0C, 0xCC,  // C.g.....
                                /* 4060 */  0x80, 0x9E, 0x5D, 0x7C, 0x6F, 0x30, 0xC1, 0x98,  // ..]|o0..
                                /* 4068 */  0xC3, 0x05, 0xD5, 0xC9, 0x00, 0x1C, 0x07, 0x63,  // .......c
                                /* 4070 */  0xF0, 0x8C, 0x0B, 0x3B, 0x8B, 0x53, 0x64, 0xE3,  // ...;.Sd.
                                /* 4078 */  0xC2, 0x41, 0x9D, 0xB1, 0x47, 0x0C, 0xAE, 0x53,  // .A..G..S
                                /* 4080 */  0xA7, 0x47, 0x8C, 0x3B, 0x6A, 0xF8, 0xB0, 0x00,  // .G.;j...
                                /* 4088 */  0x03, 0xFE, 0x59, 0xE3, 0x94, 0x8E, 0xD7, 0xE7,  // ..Y.....
                                /* 4090 */  0x29, 0x70, 0x01, 0x7A, 0xBC, 0xF0, 0xCF, 0x47,  // )p.z...G
                                /* 4098 */  0xF8, 0xD3, 0x02, 0x98, 0x46, 0xC5, 0x8F, 0x0B,  // ....F...
                                /* 40A0 */  0x60, 0xB9, 0x20, 0x05, 0x7A, 0x78, 0xF2, 0x68,  // `. .zx.h
                                /* 40A8 */  0xFD, 0xA6, 0xF8, 0xFF, 0x1F, 0x2D, 0x76, 0x64,  // .....-vd
                                /* 40B0 */  0x3E, 0x64, 0xF1, 0x41, 0x9C, 0x2B, 0xE6, 0x02,  // >d.A.+..
                                /* 40B8 */  0xE5, 0xB1, 0x1F, 0x66, 0x02, 0x9F, 0x16, 0xC0,  // ...f....
                                /* 40C0 */  0x05, 0xEA, 0xD3, 0x02, 0xF0, 0x18, 0x16, 0x66,  // .......f
                                /* 40C8 */  0xB2, 0x18, 0x94, 0xC3, 0x62, 0x37, 0x68, 0x03,  // ....b7h.
                                /* 40D0 */  0x1F, 0x30, 0x18, 0x4F, 0x0B, 0x70, 0x4E, 0x48,  // .0.O.pNH
                                /* 40D8 */  0xEC, 0xCE, 0xC5, 0xCF, 0xBC, 0x98, 0xD3, 0x02,  // ........
                                /* 40E0 */  0xF8, 0x2C, 0x9C, 0x16, 0x80, 0xCA, 0xA8, 0xB0,  // .,......
                                /* 40E8 */  0xA7, 0x39, 0xCC, 0x69, 0x01, 0x18, 0xFC, 0xFF,  // .9.i....
                                /* 40F0 */  0xCF, 0x2A, 0xEC, 0x0C, 0x77, 0x32, 0xBE, 0x45,  // .*..w2.E
                                /* 40F8 */  0xB0, 0xC1, 0x1C, 0x91, 0x11, 0x4E, 0xF7, 0x55,  // .....N.U
                                /* 4100 */  0x22, 0xCA, 0x9B, 0x90, 0xEF, 0x55, 0x26, 0x18,  // "....U&.
                                /* 4108 */  0x72, 0xBC, 0xA0, 0x3A, 0xA7, 0x79, 0xBC, 0xF0,  // r..:.y..
                                /* 4110 */  0x8F, 0x7B, 0xB8, 0xB3, 0x2A, 0xEC, 0x71, 0xC1,  // .{..*.q.
                                /* 4118 */  0x38, 0x7F, 0x79, 0x5C, 0xFC, 0xA8, 0x02, 0x8E,  // 8.y\....
                                /* 4120 */  0x01, 0xE3, 0x04, 0x0D, 0x18, 0x7D, 0x68, 0xF3,  // .....}h.
                                /* 4128 */  0x69, 0x01, 0x3F, 0x68, 0x70, 0x84, 0x1D, 0x34,  // i.?hp..4
                                /* 4130 */  0xA8, 0x3C, 0x0C, 0x1A, 0x14, 0xA7, 0xB9, 0x67,  // .<.....g
                                /* 4138 */  0x06, 0xB0, 0x0E, 0x1C, 0xEC, 0xFF, 0xFF, 0x81,  // ........
                                /* 4140 */  0xC3, 0x38, 0x94, 0xE0, 0x0E, 0x95, 0x60, 0xC1,  // .8....`.
                                /* 4148 */  0x89, 0xDF, 0xE3, 0x19, 0x43, 0x03, 0x38, 0x03,  // ....C.8.
                                /* 4150 */  0xA3, 0x44, 0x3A, 0xB2, 0xA8, 0x71, 0x42, 0x3C,  // .D:..qB<
                                /* 4158 */  0x55, 0x02, 0x97, 0x11, 0xF0, 0x58, 0x27, 0x48,  // U....X'H
                                /* 4160 */  0x1A, 0xE0, 0x88, 0x20, 0x89, 0xCF, 0x01, 0x0A,  // ... ....
                                /* 4168 */  0xE3, 0x43, 0x24, 0xE0, 0xEA, 0xB6, 0xE0, 0xB3,  // .C$.....
                                /* 4170 */  0x12, 0x58, 0x8E, 0x02, 0xB0, 0x0F, 0x00, 0xC6,  // .X......
                                /* 4178 */  0x89, 0x14, 0xEF, 0x95, 0xD6, 0x03, 0x38, 0x9A,  // ......8.
                                /* 4180 */  0xC3, 0x79, 0x60, 0x30, 0x81, 0x4F, 0xD9, 0xF0,  // .y`0.O..
                                /* 4188 */  0x71, 0x5F, 0x22, 0xFD, 0xFF, 0x1F, 0xD4, 0xA3,  // q_".....
                                /* 4190 */  0xE3, 0x83, 0xE3, 0x13, 0xE4, 0xDB, 0xE3, 0x09,  // ........
                                /* 4198 */  0x45, 0x8A, 0xF7, 0x1E, 0x69, 0x88, 0x47, 0x48,  // E...i.GH
                                /* 41A0 */  0x43, 0x19, 0xEF, 0x79, 0xDB, 0x47, 0x82, 0x28,  // C..y.G.(
                                /* 41A8 */  0x0F, 0xD8, 0x46, 0x0D, 0x13, 0x22, 0x54, 0xA0,  // ..F.."T.
                                /* 41B0 */  0x10, 0x11, 0x8E, 0xD4, 0xA7, 0x6C, 0x1E, 0xF1,  // .....l..
                                /* 41B8 */  0x40, 0xA0, 0x33, 0x87, 0x4F, 0x91, 0x00, 0x3F,  // @.3.O..?
                                /* 41C0 */  0x6E, 0xC6, 0x3E, 0x87, 0x80, 0xFF, 0xB4, 0x80,  // n.>.....
                                /* 41C8 */  0x3B, 0x88, 0x00, 0x83, 0xFF, 0xFF, 0x41, 0x04,  // ;.....A.
                                /* 41D0 */  0x23, 0xF5, 0x65, 0xA3, 0xD1, 0x3A, 0xEA, 0xA3,  // #.e..:..
                                /* 41D8 */  0x40, 0x36, 0x96, 0x6B, 0x02, 0x1D, 0x5A, 0x1C,  // @6.k..Z.
                                /* 41E0 */  0x9F, 0x4A, 0xC3, 0x89, 0xFB, 0xD8, 0xE3, 0x43,  // .J.....C
                                /* 41E8 */  0x1F, 0x8C, 0x61, 0x9C, 0xC0, 0x59, 0x1C, 0xB6,  // ..a..Y..
                                /* 41F0 */  0x8F, 0x80, 0xBE, 0x7B, 0x61, 0xEE, 0xDC, 0x2C,  // ...{a..,
                                /* 41F8 */  0x22, 0xBC, 0x0E, 0x9B, 0x1E, 0x86, 0xC3, 0x51,  // "......Q
                                /* 4200 */  0xE8, 0x30, 0xE6, 0x81, 0xF9, 0x00, 0xC4, 0xE1,  // .0......
                                /* 4208 */  0x0C, 0x62, 0x40, 0x27, 0x39, 0x8C, 0x82, 0x66,  // .b@'9..f
                                /* 4210 */  0xB6, 0x9E, 0xDE, 0xE3, 0x03, 0x83, 0xF4, 0xC1,  // ........
                                /* 4218 */  0x80, 0x1F, 0x58, 0x8C, 0x69, 0x7C, 0xAB, 0x39,  // ..X.i|.9
                                /* 4220 */  0x15, 0xA1, 0xC0, 0x8C, 0xCD, 0x6E, 0x9D, 0xE0,  // .....n..
                                /* 4228 */  0xD3, 0x77, 0x37, 0x00, 0x05, 0x90, 0x0F, 0x02,  // .w7.....
                                /* 4230 */  0xBE, 0x74, 0xBF, 0x0B, 0xB0, 0x29, 0xBC, 0x77,  // .t...).w
                                /* 4238 */  0x1B, 0xCD, 0xE8, 0x3C, 0xE0, 0x4A, 0x35, 0x5A,  // ...<.J5Z
                                /* 4240 */  0x1E, 0x09, 0x46, 0xA3, 0x35, 0x88, 0x07, 0xE6,  // ..F.5...
                                /* 4248 */  0x50, 0xA3, 0x45, 0x9F, 0xA1, 0x7C, 0x09, 0x80,  // P.E..|..
                                /* 4250 */  0x77, 0x28, 0xC4, 0x1D, 0x54, 0xF8, 0xF9, 0x03,  // w(..T...
                                /* 4258 */  0xCE, 0x41, 0xE1, 0x00, 0x5E, 0x12, 0x3C, 0x19,  // .A..^.<.
                                /* 4260 */  0xC3, 0x79, 0xC8, 0x1C, 0xCE, 0x43, 0xE6, 0x23,  // .y...C.#
                                /* 4268 */  0xF2, 0x94, 0xD9, 0xFF, 0x7F, 0xCA, 0x60, 0x89,  // ......`.
                                /* 4270 */  0x36, 0x34, 0xF4, 0x69, 0xC7, 0x43, 0xC3, 0x9F,  // 64.i.C..
                                /* 4278 */  0xBE, 0xC0, 0x31, 0x3A, 0x70, 0x9F, 0x1C, 0x3C,  // ..1:p..<
                                /* 4280 */  0x3A, 0x70, 0x09, 0xBC, 0x1F, 0x80, 0x1C, 0x1E,  // :p......
                                /* 4288 */  0x73, 0x5A, 0xF4, 0xA0, 0x3C, 0x1E, 0x0F, 0x8B,  // sZ..<...
                                /* 4290 */  0x1F, 0x27, 0x7C, 0x64, 0x62, 0xD8, 0xAF, 0x1D,  // .'|db...
                                /* 4298 */  0x1E, 0xED, 0x09, 0xBE, 0x84, 0x3C, 0x28, 0x63,  // .....<(c
                                /* 42A0 */  0x60, 0x3D, 0x50, 0x0E, 0x6B, 0xB4, 0xB0, 0x8F,  // `=P.k...
                                /* 42A8 */  0x07, 0x8F, 0x2C, 0xBE, 0xEE, 0xF8, 0x6C, 0xCB,  // ..,...l.
                                /* 42B0 */  0x60, 0x3D, 0x58, 0x9F, 0x99, 0xC0, 0x73, 0x22,  // `=X...s"
                                /* 42B8 */  0x61, 0xCF, 0x92, 0xC7, 0x01, 0xEC, 0x31, 0x1E,  // a.....1.
                                /* 42C0 */  0xCE, 0x89, 0x04, 0xF7, 0x44, 0x61, 0xE2, 0x4F,  // ....Da.O
                                /* 42C8 */  0x29, 0xE8, 0x40, 0x6F, 0x00, 0x61, 0x1E, 0x84,  // ).@o.a..
                                /* 42D0 */  0xFF, 0xFF, 0xA7, 0x14, 0x30, 0x8A, 0x3E, 0xA5,  // ....0.>.
                                /* 42D8 */  0x50, 0x08, 0xCB, 0x85, 0x91, 0x58, 0x08, 0x1D,  // P....X..
                                /* 42E0 */  0x34, 0xB8, 0x3C, 0x38, 0x0A, 0xE2, 0x43, 0x93,  // 4.<8..C.
                                /* 42E8 */  0xC3, 0x9C, 0x52, 0x40, 0x75, 0x6E, 0x80, 0x77,  // ..R@un.w
                                /* 42F0 */  0x4A, 0x61, 0xE7, 0x06, 0xD8, 0xD7, 0x14, 0xF0,  // Ja......
                                /* 42F8 */  0x1D, 0x47, 0x80, 0xD3, 0xD0, 0xC0, 0x71, 0x1C,  // .G....q.
                                /* 4300 */  0x01, 0x7C, 0x80, 0xFF, 0xFF, 0x8F, 0x0E, 0x0C,  // .|......
                                /* 4308 */  0xC7, 0x11, 0xC0, 0xD3, 0xD0, 0xF8, 0x71, 0x04,  // ......q.
                                /* 4310 */  0xF8, 0x1C, 0x3D, 0xD8, 0x71, 0x04, 0xAC, 0x92,  // ..=.q...
                                /* 4318 */  0x5F, 0x1C, 0x06, 0xF1, 0x73, 0x41, 0x22, 0x61,  // _...sA"a
                                /* 4320 */  0x50, 0x67, 0x4B, 0xC0, 0xC4, 0xFF, 0xFF, 0x6C,  // PgK....l
                                /* 4328 */  0x09, 0x86, 0x63, 0x3D, 0x98, 0x2F, 0x14, 0x6C,  // ..c=./.l
                                /* 4330 */  0xEE, 0xEC, 0x50, 0x09, 0xFF, 0x18, 0x19, 0xB5,  // ..P.....
                                /* 4338 */  0x33, 0x04, 0x1D, 0x2A, 0x3D, 0xA8, 0x10, 0x2F,  // 3..*=../
                                /* 4340 */  0x93, 0x6F, 0x95, 0x47, 0xF2, 0x10, 0x11, 0xE8,  // .o.G....
                                /* 4348 */  0xA1, 0x92, 0x41, 0x44, 0x7D, 0xA8, 0xF4, 0x65,  // ..AD}..e
                                /* 4350 */  0x32, 0x48, 0x28, 0xA3, 0x1E, 0x58, 0xC4, 0x80,  // 2H(..X..
                                /* 4358 */  0x2F, 0x82, 0x8F, 0x96, 0x41, 0xC2, 0xC7, 0x88,  // /...A...
                                /* 4360 */  0x7D, 0x00, 0x3E, 0x54, 0xB2, 0xC8, 0x6F, 0x06,  // }.>T..o.
                                /* 4368 */  0x9D, 0x04, 0x7C, 0xA8, 0x04, 0xF8, 0x11, 0x58,  // ..|....X
                                /* 4370 */  0xC0, 0xFF, 0xFF, 0x20, 0x83, 0x85, 0xB6, 0xCB,  // ... ....
                                /* 4378 */  0xB1, 0x92, 0x5B, 0x11, 0x27, 0x18, 0xEF, 0xA8,  // ..[.'...
                                /* 4380 */  0x0D, 0xAA, 0x83, 0x8E, 0x47, 0x06, 0xFF, 0xE0,  // ....G...
                                /* 4388 */  0x82, 0x3B, 0x44, 0xC0, 0x1D, 0x12, 0xBB, 0x41,  // .;D....A
                                /* 4390 */  0xE0, 0xEE, 0x0E, 0xEC, 0x4C, 0x03, 0xAE, 0x33,  // ....L..3
                                /* 4398 */  0x36, 0x70, 0xC0, 0x8B, 0x16, 0xD1, 0xE7, 0x53,  // 6p.....S
                                /* 43A0 */  0x9F, 0x45, 0x81, 0xC7, 0x35, 0xC0, 0x43, 0xE0,  // .E..5.C.
                                /* 43A8 */  0x67, 0x09, 0x0F, 0x81, 0x0F, 0xE0, 0x95, 0xFC,  // g.......
                                /* 43B0 */  0x0C, 0x7D, 0xE6, 0x39, 0x31, 0xDC, 0xB9, 0x85,  // .}.91...
                                /* 43B8 */  0x83, 0x9D, 0x32, 0x3F, 0xFA, 0xE0, 0x42, 0x1D,  // ..2?..B.
                                /* 43C0 */  0x63, 0x68, 0x84, 0xF7, 0x80, 0x62, 0xC0, 0xA0,  // ch...b..
                                /* 43C8 */  0x4E, 0x32, 0x60, 0xF9, 0xFF, 0x9F, 0x64, 0x00,  // N2`...d.
                                /* 43D0 */  0x0B, 0xB7, 0x97, 0x27, 0x19, 0xF0, 0x0C, 0xD8,  // ...'....
                                /* 43D8 */  0x43, 0x31, 0xC4, 0x6B, 0x43, 0xCC, 0x63, 0x7C,  // C1.kC.c|
                                /* 43E0 */  0x19, 0x60, 0xE7, 0x82, 0x83, 0x7F, 0x2E, 0x38,  // .`.....8
                                /* 43E8 */  0x7C, 0x63, 0xC5, 0x89, 0x15, 0xE3, 0x4C, 0x5E,  // |c....L^
                                /* 43F0 */  0x9B, 0x8C, 0x1B, 0xE5, 0xEC, 0x71, 0x27, 0x1A,  // .....q'.
                                /* 43F8 */  0xD8, 0x73, 0xAA, 0xF1, 0x08, 0xA3, 0x43, 0xD8,  // .s....C.
                                /* 4400 */  0x73, 0x8C, 0xB1, 0x4F, 0xE2, 0x4D, 0xE6, 0x19,  // s..O.M..
                                /* 4408 */  0xC1, 0x13, 0x8B, 0xF3, 0x44, 0x63, 0x30, 0xDF,  // ....Dc0.
                                /* 4410 */  0xBB, 0x0D, 0xF2, 0x4E, 0xF3, 0x32, 0x13, 0xF5,  // ...N.2..
                                /* 4418 */  0xA9, 0xDB, 0xB8, 0x41, 0x5E, 0xBB, 0x19, 0x42,  // ...A^..B
                                /* 4420 */  0x8C, 0x08, 0x51, 0x43, 0x9C, 0xD5, 0x13, 0x0D,  // ..QC....
                                /* 4428 */  0x13, 0xF1, 0xF6, 0xD0, 0x89, 0x06, 0x30, 0xF4,  // ......0.
                                /* 4430 */  0xFF, 0x3F, 0xD1, 0x00, 0x06, 0x5E, 0x2F, 0x76,  // .?...^/v
                                /* 4438 */  0x72, 0x72, 0x44, 0xA3, 0x46, 0xEC, 0xFD, 0x22,  // rrD.F.."
                                /* 4440 */  0x41, 0x8E, 0x78, 0xD8, 0xA8, 0x67, 0x1A, 0xA0,  // A.x..g..
                                /* 4448 */  0x73, 0x28, 0xC7, 0x1D, 0x27, 0xC0, 0x74, 0x91,  // s(..'.t.
                                /* 4450 */  0x80, 0x3B, 0x60, 0x30, 0x1C, 0x6C, 0xF8, 0x1D,  // .;`0.l..
                                /* 4458 */  0xE2, 0x0D, 0xE2, 0x71, 0x9C, 0x9C, 0x6C, 0x40,  // ...q..l@
                                /* 4460 */  0x78, 0xDC, 0x80, 0x73, 0xB4, 0x01, 0xEF, 0xFF,  // x..s....
                                /* 4468 */  0xFF, 0x68, 0x03, 0x4C, 0xA3, 0x9C, 0x6B, 0xA8,  // .h.L..k.
                                /* 4470 */  0xFC, 0x67, 0x81, 0xC4, 0xC3, 0xA0, 0x8E, 0x36,  // .g.....6
                                /* 4478 */  0x80, 0x2B, 0xC1, 0x87, 0x07, 0x50, 0x4F, 0xFD,  // .+...PO.
                                /* 4480 */  0x4D, 0x27, 0xA6, 0x0F, 0x0F, 0x1E, 0xA0, 0x8F,  // M'......
                                /* 4488 */  0x1C, 0xA7, 0xE2, 0x83, 0x0D, 0xB8, 0x8E, 0x33,  // .......3
                                /* 4490 */  0x6F, 0x7A, 0xC6, 0x38, 0x98, 0x10, 0x46, 0x78,  // oz.8..Fx
                                /* 4498 */  0xE3, 0xF3, 0x7D, 0xE6, 0xB8, 0x42, 0x3D, 0xD8,  // ..}..B=.
                                /* 44A0 */  0x18, 0xF3, 0x21, 0xE2, 0x7D, 0x26, 0x4A, 0x9C,  // ..!.}&J.
                                /* 44A8 */  0x57, 0x3E, 0xA3, 0xB0, 0x5B, 0xCD, 0x4B, 0xA0,  // W>..[.K.
                                /* 44B0 */  0xB1, 0xC3, 0x45, 0x79, 0x4D, 0x38, 0x99, 0x20,  // ..EyM8. 
                                /* 44B8 */  0x31, 0x7C, 0xB0, 0x61, 0xF1, 0x4F, 0x7E, 0xE4,  // 1|.a.O~.
                                /* 44C0 */  0xFF, 0x7F, 0xB0, 0x01, 0x18, 0x12, 0x1E, 0x42,  // .......B
                                /* 44C8 */  0x07, 0x1B, 0x1C, 0xB4, 0x2F, 0xDD, 0xD8, 0x63,  // ..../..c
                                /* 44D0 */  0x0D, 0xE0, 0xEE, 0xFF, 0x7F, 0xAC, 0x81, 0x79,  // .......y
                                /* 44D8 */  0xFE, 0x03, 0xE3, 0x80, 0x0C, 0xE8, 0xFB, 0x4C,  // .......L
                                /* 44E0 */  0x90, 0xF8, 0x2F, 0x35, 0xD8, 0x53, 0x0D, 0x60,  // ../5.S.`
                                /* 44E8 */  0x25, 0xD0, 0x91, 0x06, 0x15, 0xE1, 0x54, 0x03,  // %.....T.
                                /* 44F0 */  0xC8, 0x1E, 0xC2, 0x63, 0x8A, 0x81, 0xFE, 0xFF,  // ...c....
                                /* 44F8 */  0xC7, 0x11, 0xD4, 0x48, 0x3E, 0xE9, 0xF3, 0xE3,  // ...H>...
                                /* 4500 */  0x03, 0xFE, 0x78, 0x0C, 0xFF, 0x4A, 0xE3, 0xA3,  // ..x..J..
                                /* 4508 */  0x8C, 0x6F, 0x06, 0x2F, 0xC7, 0xBE, 0xCD, 0xBC,  // .o./....
                                /* 4510 */  0x62, 0x18, 0x85, 0x8D, 0x2C, 0xD8, 0xFB, 0x8C,  // b...,...
                                /* 4518 */  0x8F, 0xC7, 0xEC, 0x56, 0x63, 0x94, 0xB3, 0x7B,  // ...Vc..{
                                /* 4520 */  0xBE, 0x09, 0x11, 0x32, 0xE2, 0xFB, 0xB1, 0xB1,  // ...2....
                                /* 4528 */  0x7C, 0x4E, 0x36, 0xC8, 0xD3, 0x1F, 0xC0, 0x96,  // |N6.....
                                /* 4530 */  0xE8, 0xA7, 0x1A, 0xF4, 0x28, 0x7C, 0x40, 0xE0,  // ....(|@.
                                /* 4538 */  0x87, 0x1A, 0xB0, 0xFD, 0xFF, 0x0F, 0x35, 0xC0,  // ......5.
                                /* 4540 */  0xED, 0x24, 0x01, 0xF3, 0x50, 0x03, 0xCE, 0xA3,  // .$..P...
                                /* 4548 */  0x06, 0xEE, 0x50, 0x03, 0x2E, 0xB0, 0xA7, 0x18,  // ..P.....
                                /* 4550 */  0xDF, 0x64, 0x7C, 0x6D, 0x09, 0x14, 0xCC, 0x23,  // .d|m...#
                                /* 4558 */  0xE1, 0xA7, 0x3F, 0xC0, 0x90, 0x42, 0x9B, 0x3E,  // ..?..B.>
                                /* 4560 */  0x35, 0x1A, 0xB5, 0x6A, 0x50, 0xA6, 0x46, 0x99,  // 5..jP.F.
                                /* 4568 */  0x06, 0xB5, 0xFA, 0x54, 0x6A, 0xCC, 0x58, 0xE2,  // ...Tj.X.
                                /* 4570 */  0xB7, 0x81, 0x04, 0x3D, 0x22, 0x74, 0x4A, 0xB0,  // ...="tJ.
                                /* 4578 */  0x7C, 0x10, 0x2A, 0x9B, 0x42, 0x20, 0x16, 0xF9,  // |.*.B ..
                                /* 4580 */  0x58, 0x10, 0x88, 0x05, 0x7A, 0x00, 0x61, 0xF1,  // X...z.a.
                                /* 4588 */  0x40, 0x68, 0xA0, 0x35, 0x08, 0xC4, 0x61, 0x4C,  // @h.5..aL
                                /* 4590 */  0x80, 0x30, 0xF1, 0x2A, 0x40, 0x98, 0xE0, 0xC7,  // .0.*@...
                                /* 4598 */  0x82, 0x40, 0xFE, 0xFF, 0xC1, 0xF5, 0x58, 0x10,  // .@....X.
                                /* 45A0 */  0x88, 0xC5, 0xD9, 0x00, 0x61, 0x92, 0x74, 0x9C,  // ....a.t.
                                /* 45A8 */  0x41, 0xA8, 0x0F, 0x10, 0x26, 0xE4, 0x2D, 0x20,  // A...&.- 
                                /* 45B0 */  0x10, 0x8B, 0x78, 0x4C, 0x08, 0xC4, 0x11, 0x40,  // ..xL...@
                                /* 45B8 */  0xA8, 0xEC, 0x47, 0x84, 0x40, 0x2C, 0xD3, 0x0A,  // ..G.@,..
                                /* 45C0 */  0x08, 0x93, 0xA8, 0x05, 0x84, 0x7A, 0x01, 0xA1,  // .....z..
                                /* 45C8 */  0x2F, 0x00, 0x81, 0x10, 0x33, 0xC3, 0xA2, 0x6A,  // /...3..j
                                /* 45D0 */  0x40, 0x98, 0x2C, 0x37, 0x43, 0xA1, 0xEB, 0x16,  // @.,7C...
                                /* 45D8 */  0x88, 0xC5, 0xD8, 0x01, 0x61, 0x12, 0xF4, 0x80,  // ....a...
                                /* 45E0 */  0xB0, 0xD8, 0x6F, 0x0A, 0x81, 0x58, 0xB4, 0x21,  // ..o..X.!
                                /* 45E8 */  0x40, 0xEA, 0xE8, 0x64, 0xCF, 0xA4, 0x81, 0x68,  // @..d...h
                                /* 45F0 */  0x10, 0xC4, 0x12, 0x10, 0x13, 0x0C, 0x22, 0x20,  // ......" 
                                /* 45F8 */  0x07, 0xF0, 0x04, 0xC4, 0xE2, 0x80, 0x08, 0xC8,  // ........
                                /* 4600 */  0x01, 0x4D, 0x01, 0xB1, 0xB8, 0x20, 0x02, 0x72,  // .M... .r
                                /* 4608 */  0x78, 0x57, 0x40, 0x4C, 0xCA, 0xF3, 0x5D, 0x40,  // xW@L..]@
                                /* 4610 */  0x16, 0xA4, 0x0B, 0x88, 0xC9, 0x03, 0x11, 0x90,  // ........
                                /* 4618 */  0xA5, 0x3D, 0x29, 0x04, 0x64, 0xA1, 0x20, 0x1A,  // .=).d. .
                                /* 4620 */  0x24, 0xF9, 0x4B, 0x08, 0xC8, 0xA2, 0x41, 0x34,  // $.K...A4
                                /* 4628 */  0x24, 0xF2, 0x2A, 0x12, 0x90, 0x23, 0x80, 0x08,  // $.*..#..
                                /* 4630 */  0xC8, 0x31, 0x1E, 0x37, 0x81, 0x48, 0x28, 0x10,  // .1.7.H(.
                                /* 4638 */  0x01, 0x39, 0xD8, 0x53, 0x5E, 0x40, 0x8E, 0x09,  // .9.S^@..
                                /* 4640 */  0x22, 0x20, 0x47, 0x57, 0x07, 0xC4, 0x84, 0xB8,  // " GW....
                                /* 4648 */  0x1B, 0x08, 0xB5, 0x37, 0x10, 0x0A, 0x22, 0x20,  // ...7.." 
                                /* 4650 */  0x0B, 0xF7, 0x07, 0xC4, 0x62, 0x80, 0x08, 0xC8,  // ....b...
                                /* 4658 */  0xE1, 0xBE, 0x0C, 0x81, 0x48, 0x54, 0x10, 0x0D,  // ....HT..
                                /* 4660 */  0x96, 0x3C, 0x20, 0x34, 0x58, 0x02, 0x22, 0x20,  // .< 4X." 
                                /* 4668 */  0x47, 0xFB, 0x48, 0x07, 0x22, 0x41, 0x41, 0x74,  // G.H."AAt
                                /* 4670 */  0x28, 0x20, 0x2F, 0x2A, 0x01, 0x59, 0x16, 0x88,  // ( /*.Y..
                                /* 4678 */  0x8E, 0x01, 0xE4, 0xE9, 0x1F, 0x88, 0xC8, 0x05,  // ........
                                /* 4680 */  0x11, 0x90, 0xA3, 0xFC, 0x21, 0x02, 0x91, 0x60,  // ....!..`
                                /* 4688 */  0x20, 0x3A, 0x22, 0x90, 0x27, 0x9A, 0x80, 0x2C,  //  :".'..,
                                /* 4690 */  0x0E, 0x44, 0x47, 0x06, 0xF2, 0xA0, 0x08, 0x44,  // .DG....D
                                /* 4698 */  0xA2, 0x81, 0x08, 0xE8, 0xFF, 0xFF, 0xB0, 0xA2,  // ........
                                /* 46A0 */  0x5F, 0x45, 0x20, 0x22, 0x0A, 0x44, 0x80, 0xE4,  // _E ".D..
                                /* 46A8 */  0x51, 0x11, 0x90, 0x81, 0xE8, 0xFC, 0x42, 0xD4,  // Q.....B.
                                /* 46B0 */  0x02, 0x31, 0x39, 0x20, 0x3A, 0x3E, 0x90, 0xD7,  // .19 :>..
                                /* 46B8 */  0x46, 0x20, 0x22, 0x1F, 0x44, 0x40, 0x8E, 0xA8,  // F ".D@..
                                /* 46C0 */  0x17, 0x88, 0x05, 0x06, 0xD1, 0x60, 0xC8, 0x9B,  // .....`..
                                /* 46C8 */  0xE3, 0x60, 0x18, 0x88, 0x80, 0x2C, 0xF6, 0xD1,  // .`...,..
                                /* 46D0 */  0x25, 0x20, 0x4B, 0x07, 0x11, 0x90, 0x23, 0xFD,  // % K...#.
                                /* 46D8 */  0x57, 0x04, 0xE4, 0x80, 0x20, 0x1A, 0x3C, 0xF9,  // W... .<.
                                /* 46E0 */  0x03, 0x69, 0xF0, 0xE4, 0xC5, 0xAE, 0x81, 0x10,  // .i......
                                /* 46E8 */  0xD5, 0x03, 0xA1, 0x20, 0x02, 0x72, 0xCC, 0x07,  // ... .r..
                                /* 46F0 */  0x95, 0x80, 0x1C, 0x1A, 0x44, 0x40, 0x16, 0xF5,  // ....D@..
                                /* 46F8 */  0x1C, 0x09, 0x44, 0x24, 0x82, 0x08, 0xC8, 0x41,  // ..D$...A
                                /* 4700 */  0x8C, 0x03, 0xB1, 0x58, 0x20, 0x1A, 0x04, 0xF9,  // ...X ...
                                /* 4708 */  0x14, 0x6A, 0x10, 0xE4, 0x0B, 0xA2, 0xA3, 0x05,  // .j......
                                /* 4710 */  0x79, 0x86, 0x09, 0xC8, 0x21, 0x40, 0x04, 0xE4,  // y...!@..
                                /* 4718 */  0x6C, 0xEF, 0xAF, 0x87, 0x00, 0x06, 0x22, 0x20,  // l....." 
                                /* 4720 */  0x87, 0x7E, 0x38, 0x09, 0xC8, 0x12, 0xD4, 0x1F,  // .~8.....
                                /* 4728 */  0x2B, 0xE8, 0x33, 0x49, 0x40, 0x16, 0x08, 0x22,  // +.3I@.."
                                /* 4730 */  0x20, 0x4B, 0xD6, 0x0F, 0xC4, 0x02, 0x80, 0x68,  //  K.....h
                                /* 4738 */  0x80, 0x24, 0xC0, 0x00, 0x29, 0x88, 0x80, 0x1C,  // .$..)...
                                /* 4740 */  0x37, 0x01, 0x10, 0x0B, 0x0F, 0xA2, 0x01, 0x90,  // 7.......
                                /* 4748 */  0x0A, 0x03, 0xA0, 0x20, 0x3A, 0x40, 0x90, 0x0E,  // ... :@..
                                /* 4750 */  0x07, 0x08, 0x0A, 0xA2, 0x43, 0x09, 0x29, 0x01,  // ....C.).
                                /* 4758 */  0xC4, 0xE2, 0x81, 0x68, 0x40, 0xA4, 0xC5, 0x80,  // ...h@...
                                /* 4760 */  0x68, 0x0C, 0x20, 0x26, 0x2F, 0x07, 0x10, 0x13,  // h. &/...
                                /* 4768 */  0x0B, 0xA2, 0x83, 0x06, 0x09, 0x72, 0xD0, 0xA0,  // .....r..
                                /* 4770 */  0x20, 0x1A, 0x34, 0x49, 0x32, 0x68, 0x0A, 0x22,  //  .4I2h."
                                /* 4778 */  0x20, 0x4B, 0xA9, 0x02, 0xC4, 0x84, 0x81, 0xE8,  //  K......
                                /* 4780 */  0x80, 0x41, 0xBA, 0x1C, 0x30, 0x28, 0x88, 0x80,  // .A..0(..
                                /* 4788 */  0x1C, 0xA7, 0x0C, 0x10, 0x0B, 0x07, 0xA2, 0xC1,  // ........
                                /* 4790 */  0x90, 0x36, 0x83, 0xA1, 0x71, 0x80, 0xFC, 0xFF,  // .6..q...
                                /* 4798 */  0x3F, 0x4C, 0x28, 0x0F, 0x10, 0x53, 0x06, 0x22,  // ?L(..S."
                                /* 47A0 */  0x20, 0xAB, 0xED, 0x03, 0xC4, 0xB4, 0x83, 0x08,  //  .......
                                /* 47A8 */  0xC8, 0xA9, 0x0A, 0x01, 0xB1, 0x8C, 0x20, 0x02,  // ...... .
                                /* 47B0 */  0x72, 0xCA, 0x46, 0x40, 0x2C, 0x33, 0x88, 0x80,  // r.F@,3..
                                /* 47B8 */  0xAC, 0x23, 0x13, 0x10, 0x53, 0x05, 0x22, 0x20,  // .#..S." 
                                /* 47C0 */  0x2B, 0x0E, 0x05, 0xC4, 0xF4, 0x83, 0x08, 0x98,  // +.......
                                /* 47C8 */  0xA4, 0x02, 0xA6, 0x20, 0x02, 0xB2, 0x8A, 0x5A,  // ... ...Z
                                /* 47D0 */  0x40, 0x4C, 0x13, 0x88, 0x06, 0x43, 0x7A, 0x0D,  // @L...Cz.
                                /* 47D8 */  0x86, 0x82, 0x08, 0xC8, 0x99, 0x8A, 0x01, 0xB1,  // ........
                                /* 47E0 */  0x84, 0x20, 0x02, 0x72, 0xEE, 0x66, 0x40, 0x4C,  // . .r.f@L
                                /* 47E8 */  0x45, 0x34, 0x20, 0xA6, 0x2A, 0x1B, 0x10, 0xD3,  // E4 .*...
                                /* 47F0 */  0x08, 0x22, 0x20, 0x0B, 0x0D, 0x07, 0xC4, 0x54,  // ." ....T
                                /* 47F8 */  0x83, 0x08, 0xC8, 0xFA, 0xCB, 0x01, 0xB1, 0x34,  // .......4
                                /* 4800 */  0x20, 0x1A, 0x30, 0x69, 0x07, 0xC4, 0xB2, 0x81,  //  .0i....
                                /* 4808 */  0x68, 0x50, 0x24, 0xDE, 0xA0, 0x28, 0x88, 0x80,  // hP$..(..
                                /* 4810 */  0x9C, 0x3E, 0x1F, 0x10, 0xD3, 0xD2, 0x6F, 0x20,  // .>....o 
                                /* 4818 */  0xB4, 0xE0, 0x40, 0x28, 0x88, 0x80, 0xAC, 0x3E,  // ..@(...>
                                /* 4820 */  0x22, 0x08, 0xCB, 0x0E, 0x42, 0x75, 0x64, 0x04,  // "...Bud.
                                /* 4828 */  0x61, 0xFA, 0x4A, 0x82, 0xB0, 0x74, 0x20, 0x34,  // a.J..t 4
                                /* 4830 */  0x71, 0x4A, 0x40, 0x9A, 0x13, 0x84, 0xA5, 0x00,  // qJ@.....
                                /* 4838 */  0xA1, 0x09, 0x7A, 0x82, 0xB0, 0x44, 0x49, 0x41,  // ..z..DIA
                                /* 4840 */  0x98, 0x9E, 0xA6, 0x20, 0x4C, 0xD3, 0xCB, 0x4C,  // ... L..L
                                /* 4848 */  0x83, 0x27, 0x5D, 0x41, 0x58, 0x5E, 0x10, 0x9A,  // .']AX^..
                                /* 4850 */  0x3C, 0x2C, 0x08, 0x53, 0x16, 0x17, 0x84, 0xE5,  // <,.S....
                                /* 4858 */  0x02, 0xE1, 0x75, 0x41, 0x58, 0x9A, 0xBC, 0x20,  // ..uAX.. 
                                /* 4860 */  0x2C, 0x75, 0x61, 0x10, 0xA6, 0x39, 0x31, 0x08,  // ,ua..91.
                                /* 4868 */  0xD3, 0xDE, 0x18, 0x84, 0x25, 0xCC, 0x3C, 0x30,  // ....%.<0
                                /* 4870 */  0xDA, 0x19, 0x84, 0x69, 0x0C, 0x7D, 0xDC, 0xA0,  // ...i.}..
                                /* 4878 */  0xAD, 0x87, 0x41, 0x63, 0x83, 0x30, 0x6D, 0xB5,  // ..Ac.0m.
                                /* 4880 */  0x41, 0xFC, 0xFF, 0x27, 0x98, 0x24, 0xF8, 0xF0,  // A..'.$..
                                /* 4888 */  0x68, 0x71, 0x10, 0xA6, 0x21, 0xF9, 0x00, 0x68,  // hq..!..h
                                /* 4890 */  0xF5, 0x81, 0x52, 0x10, 0xAA, 0xB4, 0xFB, 0xB0,  // ..R.....
                                /* 4898 */  0x99, 0x6E, 0x10, 0x01, 0x91, 0xF2, 0x40, 0x14,  // .n....@.
                                /* 48A0 */  0x44, 0x40, 0xA4, 0x3D, 0x10, 0x05, 0xD1, 0x30,  // D@.=...0
                                /* 48A8 */  0x49, 0xFD, 0x23, 0x03, 0x05, 0x11, 0x90, 0x95,  // I.#.....
                                /* 48B0 */  0x1F, 0xE1, 0x04, 0xE4, 0x1C, 0x20, 0x02, 0x22,  // ..... ."
                                /* 48B8 */  0x06, 0xDE, 0x58, 0x81, 0x08, 0x88, 0x80, 0xAC,  // ..X.....
                                /* 48C0 */  0x40, 0x01, 0x10, 0xD3, 0x03, 0xA2, 0x61, 0x11,  // @.....a.
                                /* 48C8 */  0x20, 0x9A, 0x0B, 0x88, 0x2A, 0x72, 0x00, 0xC4,  //  ...*r..
                                /* 48D0 */  0xF4, 0x81, 0x08, 0xC8, 0x4A, 0x2C, 0x00, 0x31,  // ....J,.1
                                /* 48D8 */  0x5D, 0x20, 0x3A, 0x08, 0x10, 0x20, 0x9A, 0x0F,  // ] :.. ..
                                /* 48E0 */  0x88, 0x2A, 0xD3, 0x00, 0xC4, 0x74, 0x82, 0x68,  // .*...t.h
                                /* 48E8 */  0xD8, 0x04, 0x88, 0xE6, 0x05, 0xA2, 0x49, 0x45,  // ......IE
                                /* 48F0 */  0x00, 0xB1, 0xDC, 0x20, 0x1A, 0x1C, 0x31, 0x01,  // ... ..1.
                                /* 48F8 */  0xC4, 0xF4, 0x83, 0xE8, 0x80, 0x40, 0x5C, 0x00,  // .....@\.
                                /* 4900 */  0xB1, 0x4C, 0x20, 0x02, 0xB2, 0x1A, 0x19, 0x40,  // .L ....@
                                /* 4908 */  0x4C, 0x1B, 0x88, 0x0E, 0x00, 0x44, 0x07, 0x10,  // L....D..
                                /* 4910 */  0x53, 0x0A, 0xA2, 0x63, 0x04, 0x01, 0xA2, 0x99,  // S..c....
                                /* 4918 */  0x81, 0xA8, 0x5E, 0x1F, 0x40, 0x4C, 0x3D, 0x88,  // ..^.@L=.
                                /* 4920 */  0x8E, 0x09, 0x04, 0x88, 0xEA, 0x10, 0x02, 0xC4,  // ........
                                /* 4928 */  0x74, 0x28, 0x01, 0x62, 0xAA, 0x40, 0x74, 0x68,  // t(.b.@th
                                /* 4930 */  0x20, 0x52, 0x80, 0x98, 0x42, 0x10, 0x1D, 0x08,  //  R..B...
                                /* 4938 */  0x88, 0x16, 0x20, 0xA6, 0x16, 0x44, 0x03, 0x21,  // .. ..D.!
                                /* 4940 */  0x40, 0x34, 0x33, 0x10, 0x55, 0xEB, 0x05, 0x88,  // @43.U...
                                /* 4948 */  0x69, 0x07, 0xD1, 0x21, 0x80, 0x98, 0x39, 0x04,  // i..!..9.
                                /* 4950 */  0x50, 0x10, 0x01, 0x39, 0x3F, 0x10, 0x55, 0xA3,  // P..9?.U.
                                /* 4958 */  0x06, 0x88, 0xE5, 0x00, 0x11, 0x90, 0x53, 0x01,  // ......S.
                                /* 4960 */  0xD1, 0x5C, 0x72, 0x80, 0xFC, 0xFF, 0x1F, 0x86,  // .\r.....
                                /* 4968 */  0x40, 0x74, 0xC0, 0x20, 0x7A, 0x80, 0x58, 0x7E,  // @t. z.X~
                                /* 4970 */  0x10, 0x1D, 0x0A, 0x88, 0xA1, 0x43, 0x01, 0x05,  // .....C..
                                /* 4978 */  0x11, 0x10, 0x71, 0x04, 0x44, 0x41, 0x04, 0x44,  // ..q.DA.D
                                /* 4980 */  0x2C, 0x01, 0x51, 0x10, 0x01, 0x11, 0x4F, 0x40,  // ,.Q...O@
                                /* 4988 */  0x14, 0x44, 0x83, 0x25, 0xA2, 0x06, 0x4B, 0x4D,  // .D.%..KM
                                /* 4990 */  0x01, 0xB1, 0x04, 0x20, 0x02, 0x72, 0x1E, 0x20,  // ... .r. 
                                /* 4998 */  0xAA, 0x44, 0xD5, 0x01, 0x81, 0x82, 0xE8, 0x80,  // .D......
                                /* 49A0 */  0x40, 0x80, 0x68, 0x3E, 0x20, 0x9A, 0x42, 0xD6,  // @.h> .B.
                                /* 49A8 */  0x81, 0x80, 0x82, 0xE8, 0x40, 0x40, 0x6C, 0x1D,  // ....@@l.
                                /* 49B0 */  0x08, 0x28, 0x88, 0x8E, 0x35, 0x04, 0x88, 0x66,  // .(..5..f
                                /* 49B8 */  0x04, 0xA2, 0xEA, 0x74, 0x01, 0x31, 0xAD, 0x20,  // ...t.1. 
                                /* 49C0 */  0x02, 0x72, 0x16, 0x63, 0x43, 0xA1, 0xCA, 0x40,  // .r.cC..@
                                /* 49C8 */  0x58, 0x6E, 0x10, 0x9A, 0xD3, 0x19, 0x08, 0xCB,  // Xn......
                                /* 49D0 */  0x2B, 0x6D, 0x68, 0xD4, 0xDA, 0xA1, 0x81, 0x8A,  // +mh.....
                                /* 49D8 */  0x03, 0x61, 0x3A, 0xCD, 0x81, 0x30, 0x3D, 0xEA,  // .a:..0=.
                                /* 49E0 */  0x40, 0x98, 0x0A, 0x77, 0x20, 0x4C, 0x8B, 0x3C,  // @..w L.<
                                /* 49E8 */  0x10, 0x96, 0x5D, 0xDF, 0x61, 0x80, 0xFA, 0x03,  // ..].a...
                                /* 49F0 */  0x61, 0x0A, 0x05, 0x82, 0x30, 0x5D, 0x06, 0x8F,  // a...0]..
                                /* 49F8 */  0x08, 0x54, 0x21, 0x08, 0x4B, 0x0F, 0x42, 0x53,  // .T!.K.BS
                                /* 4A00 */  0x3B, 0x04, 0x61, 0x69, 0x25, 0x1E, 0x29, 0xA8,  // ;.ai%.).
                                /* 4A08 */  0xC7, 0x83, 0x02, 0x15, 0x39, 0x30, 0x6A, 0x72,  // ....90jr
                                /* 4A10 */  0x60, 0x14, 0x84, 0x66, 0x56, 0x39, 0x20, 0x2A,  // `..fV9 *
                                /* 4A18 */  0x13, 0x84, 0x69, 0xB0, 0x09, 0x42, 0x75, 0x82,  // ..i..Bu.
                                /* 4A20 */  0x30, 0xA5, 0x3E, 0x0F, 0x01, 0x54, 0x28, 0x08,  // 0.>..T(.
                                /* 4A28 */  0xCB, 0x64, 0x14, 0x84, 0x65, 0x53, 0x3A, 0x4C,  // .d..eS:L
                                /* 4A30 */  0xEA, 0xF4, 0x90, 0x40, 0xA5, 0x0E, 0x94, 0x5A,  // ...@...Z
                                /* 4A38 */  0x1D, 0x12, 0xD5, 0x7A, 0x34, 0xA0, 0x62, 0x0F,  // ...z4.b.
                                /* 4A40 */  0x01, 0xD4, 0x2C, 0x88, 0xFF, 0xFF, 0x47, 0x0F,  // ..,...G.
                                /* 4A48 */  0xA9, 0x1D, 0x08, 0xB5, 0x3B, 0x0C, 0x0A, 0x42,  // ....;..B
                                /* 4A50 */  0x33, 0xEB, 0x3D, 0x04, 0xB0, 0xEF, 0xE5, 0xC1,  // 3.=.....
                                /* 4A58 */  0x52, 0x10, 0x1D, 0xEF, 0x08, 0x10, 0xD5, 0x2D,  // R......-
                                /* 4A60 */  0x18, 0x88, 0xA5, 0x00, 0xD1, 0x51, 0x86, 0x18,  // .....Q..
                                /* 4A68 */  0x06, 0x62, 0x8A, 0x41, 0x34, 0x18, 0x02, 0x44,  // .b.A4..D
                                /* 4A70 */  0x35, 0x28, 0x3E, 0x60, 0x50, 0x10, 0x1D, 0x30,  // 5(>`P..0
                                /* 4A78 */  0x08, 0x10, 0x97, 0x0C, 0x44, 0x41, 0x34, 0x58,  // ....DA4X
                                /* 4A80 */  0x22, 0x1A, 0x84, 0xA5, 0x01, 0xA1, 0xEA, 0x4D,  // "......M
                                /* 4A88 */  0x1F, 0x41, 0xA8, 0xEA, 0xC1, 0x53, 0xD7, 0x47,  // .A...S.G
                                /* 4A90 */  0x16, 0x2A, 0x7B, 0x80, 0xD4, 0xF6, 0x51, 0x80,  // .*{...Q.
                                /* 4A98 */  0x82, 0xD0, 0xC4, 0xBA, 0x87, 0x41, 0x7D, 0x83,  // .....A}.
                                /* 4AA0 */  0xB0, 0x74, 0xC2, 0x07, 0x4E, 0x8D, 0x83, 0xB0,  // .t..N...
                                /* 4AA8 */  0x3C, 0x8F, 0x99, 0xC7, 0x18, 0xE6, 0x7C, 0xA8,  // <.....|.
                                /* 4AB0 */  0x54, 0xFB, 0xD1, 0x83, 0x82, 0xD0, 0x94, 0xDE,  // T.......
                                /* 4AB8 */  0x8F, 0x1D, 0x54, 0x3C, 0x20, 0x75, 0x0F, 0x48,  // ..T< u.H
                                /* 4AC0 */  0x41, 0xA8, 0x6A, 0xFB, 0x83, 0x63, 0x19, 0x40,  // A.j..c.@
                                /* 4AC8 */  0x34, 0x1C, 0x02, 0x44, 0xB5, 0xE8, 0x3F, 0x5C,  // 4..D..?\
                                /* 4AD0 */  0x50, 0x10, 0x1D, 0x2E, 0x08, 0x10, 0x4D, 0x5E,  // P.....M^
                                /* 4AD8 */  0x60, 0xE8, 0x34, 0x01, 0x08, 0x53, 0xD9, 0xE0,  // `.4..S..
                                /* 4AE0 */  0xE8, 0x40, 0x23, 0x1C, 0x17, 0x68, 0x05, 0x50,  // .@#..h.P
                                /* 4AE8 */  0x0A, 0x42, 0x53, 0x67, 0x00, 0xA1, 0x1D, 0x40,  // .BSg...@
                                /* 4AF0 */  0x68, 0x08, 0x10, 0x5A, 0xE2, 0x50, 0x40, 0x53,  // h..Z.P@S
                                /* 4AF8 */  0x1C, 0x2D, 0x68, 0x8B, 0xC1, 0xD1, 0x18, 0x20,  // .-h.... 
                                /* 4B00 */  0x2C, 0x5F, 0x8D, 0x43, 0x07, 0x7D, 0x02, 0x3D,  // ,_.C.}.=
                                /* 4B08 */  0xAA, 0xB0, 0x22, 0xC7, 0x0B, 0x9A, 0x64, 0xD8,  // .."...d.
                                /* 4B10 */  0x34, 0xCA, 0x11, 0x80, 0x56, 0x39, 0xEA, 0xD0,  // 4...V9..
                                /* 4B18 */  0x2C, 0x07, 0x01, 0xDA, 0x05, 0xC4, 0xFF, 0xFF,  // ,.......
                                /* 4B20 */  0xA3, 0x87, 0xC2, 0x1C, 0x2B, 0x68, 0x99, 0xA1,  // ....+h..
                                /* 4B28 */  0xD0, 0x34, 0x03, 0xA0, 0x71, 0x0E, 0x1A, 0xB4,  // .4..q...
                                /* 4B30 */  0xCE, 0x80, 0x69, 0x9E, 0x81, 0xD0, 0x3E, 0x20,  // ..i...> 
                                /* 4B38 */  0x2C, 0x63, 0xA0, 0xE3, 0x05, 0x2D, 0x74, 0xF0,  // ,c...-t.
                                /* 4B40 */  0xA0, 0x8D, 0x8E, 0x06, 0x34, 0x12, 0x30, 0xAD,  // ....4.0.
                                /* 4B48 */  0x74, 0x18, 0xA0, 0x99, 0x0E, 0x05, 0xB4, 0xD3,  // t.......
                                /* 4B50 */  0xA0, 0x68, 0xA8, 0x81, 0xD0, 0x54, 0x47, 0x20,  // .h...TG 
                                /* 4B58 */  0xDA, 0xEA, 0x90, 0x43, 0x63, 0x81, 0x30, 0xCD,  // ...Cc.0.
                                /* 4B60 */  0xBD, 0x40, 0x29, 0x08, 0x4D, 0x17, 0xEC, 0x78,  // .@).M..x
                                /* 4B68 */  0x42, 0x8B, 0x81, 0xD1, 0x64, 0x47, 0x12, 0xDA,  // B...dG..
                                /* 4B70 */  0xEC, 0x90, 0x41, 0xAB, 0x81, 0xD0, 0x70, 0x20,  // ..A...p 
                                /* 4B78 */  0x4C, 0x3F, 0x08, 0x0D, 0x5E, 0xEE, 0x50, 0xC0,  // L?..^.P.
                                /* 4B80 */  0x54, 0xA4, 0x03, 0x62, 0x81, 0x41, 0x04, 0xE4,  // T..b.A..
                                /* 4B88 */  0xF8, 0x40, 0x34, 0x66, 0x3C, 0x20, 0x16, 0x1A,  // .@4f< ..
                                /* 4B90 */  0x44, 0x40, 0x96, 0x5B, 0x0F, 0x88, 0x89, 0x07,  // D@.[....
                                /* 4B98 */  0xD1, 0xF1, 0x91, 0xF4, 0x03, 0x62, 0x21, 0x40,  // .....b!@
                                /* 4BA0 */  0x74, 0x24, 0x25, 0x09, 0x41, 0x98, 0xB0, 0x86,  // t$%.A...
                                /* 4BA8 */  0x20, 0x2C, 0x4C, 0x44, 0x40, 0x96, 0x0C, 0x44,  //  ,LD@..D
                                /* 4BB0 */  0x40, 0xCE, 0x50, 0x11, 0x88, 0x25, 0x02, 0xD1,  // @.P..%..
                                /* 4BB8 */  0x80, 0x49, 0xC7, 0xC3, 0x03, 0x05, 0xD1, 0xE1,  // .I......
                                /* 4BC0 */  0x81, 0x00, 0x51, 0x2D, 0x21, 0x0F, 0x0D, 0xB4,  // ..Q-!...
                                /* 4BC8 */  0xE5, 0x11, 0x80, 0x82, 0xD0, 0x74, 0x31, 0x0F,  // .....t1.
                                /* 4BD0 */  0x01, 0xB4, 0xE7, 0x00, 0x68, 0xD0, 0xC3, 0x0A,  // ....h...
                                /* 4BD8 */  0x2D, 0x7A, 0x84, 0xA0, 0x51, 0x0F, 0x0D, 0x14,  // -z..Q...
                                /* 4BE0 */  0x84, 0xA6, 0xAD, 0x7A, 0x58, 0xA1, 0x59, 0x8F,  // ...zX.Y.
                                /* 4BE8 */  0x0D, 0xB4, 0x2B, 0x08, 0x0D, 0x3B, 0x0C, 0x5A,  // ..+..;.Z
                                /* 4BF0 */  0x16, 0x84, 0xA6, 0x3D, 0x26, 0xD0, 0xB6, 0x47,  // ...=&..G
                                /* 4BF8 */  0x05, 0x9A, 0xF7, 0x68, 0x40, 0xFB, 0x82, 0xF8,  // ...h@...
                                /* 4C00 */  0xFF, 0x4F, 0x30, 0x6B, 0xE0, 0x61, 0xB1, 0xE0,  // .O0k.a..
                                /* 4C08 */  0x20, 0x1A, 0x04, 0x29, 0x0C, 0xC4, 0xD2, 0x83,  //  ..)....
                                /* 4C10 */  0xE8, 0x80, 0x40, 0x5E, 0xD3, 0x3A, 0x92, 0x11,  // ..@^.:..
                                /* 4C18 */  0x10, 0x1D, 0x3C, 0x48, 0xE4, 0xE3, 0x13, 0x05,  // ..<H....
                                /* 4C20 */  0x11, 0x90, 0xB5, 0x56, 0x06, 0x62, 0xCA, 0x41,  // ...V.b.A
                                /* 4C28 */  0x74, 0x4C, 0x20, 0x99, 0x81, 0x98, 0x26, 0x10,  // tL ...&.
                                /* 4C30 */  0x0D, 0x90, 0x94, 0x3E, 0x20, 0x50, 0x10, 0x9A,  // ...> P..
                                /* 4C38 */  0x2C, 0xF5, 0x70, 0x68, 0x6D, 0x40, 0x9A, 0x1B,  // ,.phm@..
                                /* 4C40 */  0x84, 0xF6, 0x06, 0x61, 0xDA, 0x93, 0x1F, 0x3B,  // ...a...;
                                /* 4C48 */  0x28, 0x08, 0x4D, 0xDD, 0x7C, 0x18, 0xB4, 0xFB,  // (.M.|...
                                /* 4C50 */  0x51, 0x80, 0x82, 0x50, 0xF5, 0xE1, 0x41, 0xD8,  // Q..P..A.
                                /* 4C58 */  0xFF, 0x1F                                       // ..
                            })
                        }
                    }

                    Device (HKDV)
                    {
                        Name (_HID, "LHK2019")  // _HID: Hardware ID
                        Name (_UID, Zero)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }
                    }

                    Device (WMIU)
                    {
                        Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
                        Name (_UID, "LSK20")  // _UID: Unique ID
                        Name (_WDG, Buffer (0x3C)
                        {
                            /* 0000 */  0x74, 0x09, 0x6C, 0xCE, 0x07, 0x04, 0x50, 0x4F,  // t.l...PO
                            /* 0008 */  0x88, 0xBA, 0x4F, 0xC3, 0xB6, 0x55, 0x9A, 0xD8,  // ..O..U..
                            /* 0010 */  0x53, 0x4B, 0x01, 0x02, 0x0C, 0xDE, 0xC0, 0x8F,  // SK......
                            /* 0018 */  0xE4, 0xB4, 0xFD, 0x43, 0xB0, 0xF3, 0x88, 0x71,  // ...C...q
                            /* 0020 */  0x71, 0x1C, 0x12, 0x94, 0xD0, 0x00, 0x01, 0x08,  // q.......
                            /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                            /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                            /* 0038 */  0x44, 0x41, 0x01, 0x00                           // DA..
                        })
                        Method (WMSK, 3, NotSerialized)
                        {
                            If ((Arg1 == One))
                            {
                                If ((ToInteger (Arg2) == One))
                                {
                                    Return (0x03)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x02))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x03))
                                {
                                    Return (0x02)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x05))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x06))
                                {
                                    Return (0x02)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x07))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x08))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x0A))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x0B))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x0C))
                                {
                                    Return (0x15)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x0D))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x0E))
                                {
                                    Return (0x15)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x0F))
                                {
                                    Return (0x15)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x10))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x11))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x12))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x13))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x14))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x15))
                                {
                                    Return (0x1A)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x17))
                                {
                                    Return (0x1B)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x18))
                                {
                                    Return (0x1B)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }

                        Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
                        {
                            If ((Arg0 == 0xD0))
                            {
                                If ((LSKD == One))
                                {
                                    Return (One)
                                }
                                ElseIf ((LSKD == 0x04))
                                {
                                    If ((^^PCI0.LPC0.EC0.HKDB == Zero))
                                    {
                                        Return (0x02)
                                    }
                                    Else
                                    {
                                        Return (0x03)
                                    }
                                }
                                ElseIf ((LSKD == 0x06))
                                {
                                    Return (0x07)
                                }
                                ElseIf ((LSKD == 0x08))
                                {
                                    Return (0x09)
                                }
                                ElseIf ((LSKD == 0x0B))
                                {
                                    Return (0x0C)
                                }
                                ElseIf ((LSKD == 0x0C))
                                {
                                    Return (0x0D)
                                }
                                ElseIf ((LSKD == 0x0D))
                                {
                                    Return (0x0E)
                                }
                                ElseIf ((LSKD == 0x0E))
                                {
                                    Return (0x0F)
                                }
                                ElseIf ((LSKD == 0x0F))
                                {
                                    Return (0x10)
                                }
                                ElseIf ((LSKD == 0x13))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((LSKD == 0x14))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((LSKD == 0x15))
                                {
                                    Return (0x16)
                                }
                                ElseIf ((LSKD == 0x16))
                                {
                                    Return (0x17)
                                }
                                ElseIf ((LSKD == 0x17))
                                {
                                    Return (0x18)
                                }
                                ElseIf ((LSKD == 0x18))
                                {
                                    Return (0x19)
                                }
                                ElseIf ((LSKD == 0x19))
                                {
                                    Return (0x1A)
                                }
                                ElseIf ((LSKD == 0x25))
                                {
                                    Return (0x26)
                                }
                                ElseIf ((LSKD == 0x1A))
                                {
                                    Return (0x1B)
                                }
                                ElseIf ((LSKD == 0x1B))
                                {
                                    Return (0x1C)
                                }
                                ElseIf ((LSKD == 0x1C))
                                {
                                    Return (0x1D)
                                }
                                ElseIf ((LSKD == 0x1D))
                                {
                                    Return (0x1E)
                                }
                                ElseIf ((LSKD == 0x1E))
                                {
                                    Return (0x1F)
                                }
                                ElseIf ((LSKD == 0x1F))
                                {
                                    Return (0x20)
                                }
                                ElseIf ((LSKD == 0x20))
                                {
                                    Return (0x21)
                                }
                                ElseIf ((LSKD == 0x21))
                                {
                                    Return (0x22)
                                }
                                ElseIf ((LSKD == 0x22))
                                {
                                    Return (0x23)
                                }
                                ElseIf ((LSKD == 0x23))
                                {
                                    Return (0x25)
                                }
                                ElseIf ((LSKD == 0x24))
                                {
                                    Return (0x24)
                                }
                                ElseIf ((LSKD == 0x29))
                                {
                                    Return (0x2A)
                                }
                                ElseIf ((LSKD == 0x2A))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((LSKD == 0x2B))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((LSKD == 0x2C))
                                {
                                    Return (0x2D)
                                }
                                ElseIf ((LSKD == 0x2E))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((LSKD == 0x2F))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((LSKD == 0x30))
                                {
                                    Return (0x31)
                                }
                                ElseIf ((LSKD == 0x31))
                                {
                                    Return (0x32)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }

                        Name (WQDA, Buffer (0x0422)
                        {
                            /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                            /* 0008 */  0x12, 0x04, 0x00, 0x00, 0x66, 0x0C, 0x00, 0x00,  // ....f...
                            /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                            /* 0018 */  0xA8, 0x42, 0x86, 0x00, 0x01, 0x06, 0x18, 0x42,  // .B.....B
                            /* 0020 */  0x10, 0x05, 0x10, 0x8A, 0x29, 0x81, 0x42, 0x04,  // ....).B.
                            /* 0028 */  0x8A, 0x40, 0xA4, 0x60, 0x30, 0x28, 0x0D, 0x20,  // .@.`0(. 
                            /* 0030 */  0x92, 0x03, 0x21, 0x17, 0x4C, 0x4C, 0x80, 0x08,  // ..!.LL..
                            /* 0038 */  0x08, 0x79, 0x15, 0x60, 0x53, 0x80, 0x49, 0x10,  // .y.`S.I.
                            /* 0040 */  0xF5, 0xEF, 0x0F, 0x51, 0x12, 0x1C, 0x4A, 0x08,  // ...Q..J.
                            /* 0048 */  0x84, 0x24, 0x0A, 0x30, 0x2F, 0x40, 0xB7, 0x00,  // .$.0/@..
                            /* 0050 */  0xC3, 0x02, 0x6C, 0x0B, 0x30, 0x2D, 0xC0, 0x31,  // ..l.0-.1
                            /* 0058 */  0x24, 0x95, 0x06, 0x4E, 0x09, 0x2C, 0x05, 0x42,  // $..N.,.B
                            /* 0060 */  0x42, 0x05, 0x28, 0x17, 0xE0, 0x5B, 0x80, 0x76,  // B.(..[.v
                            /* 0068 */  0x44, 0x49, 0x16, 0x60, 0x19, 0x46, 0x04, 0x1E,  // DI.`.F..
                            /* 0070 */  0x45, 0x64, 0xA3, 0x71, 0x68, 0xEC, 0x30, 0x2C,  // Ed.qh.0,
                            /* 0078 */  0x13, 0x4C, 0x83, 0x38, 0x8C, 0xB2, 0x91, 0x45,  // .L.8...E
                            /* 0080 */  0xE0, 0x09, 0x75, 0x2A, 0x40, 0xAE, 0x00, 0x61,  // ..u*@..a
                            /* 0088 */  0x02, 0xC4, 0xA3, 0x0A, 0xA3, 0x39, 0x28, 0x22,  // .....9("
                            /* 0090 */  0x1A, 0x1A, 0x25, 0x66, 0x4C, 0x04, 0xB6, 0x73,  // ..%fL..s
                            /* 0098 */  0x6C, 0x8D, 0xE2, 0x34, 0x0A, 0x17, 0x20, 0x1D,  // l..4.. .
                            /* 00A0 */  0x43, 0x23, 0x38, 0xAE, 0x63, 0x30, 0x58, 0x90,  // C#8.c0X.
                            /* 00A8 */  0x43, 0x31, 0x44, 0x41, 0x02, 0xAC, 0xA2, 0x91,  // C1DA....
                            /* 00B0 */  0x61, 0x84, 0x08, 0x72, 0x7C, 0x81, 0xBA, 0xC4,  // a..r|...
                            /* 00B8 */  0x13, 0x88, 0xC7, 0xE4, 0x01, 0x18, 0x21, 0x4C,  // ......!L
                            /* 00C0 */  0x8B, 0xB0, 0x82, 0x36, 0x62, 0x02, 0xC3, 0x1E,  // ...6b...
                            /* 00C8 */  0x0A, 0xE6, 0x07, 0x20, 0x01, 0x9E, 0x05, 0x58,  // ... ...X
                            /* 00D0 */  0x1F, 0x23, 0x21, 0xB0, 0x7B, 0x01, 0xE2, 0x04,  // .#!.{...
                            /* 00D8 */  0x68, 0x1E, 0x8D, 0x46, 0x75, 0x9C, 0xC6, 0x88,  // h..Fu...
                            /* 00E0 */  0xD2, 0x96, 0x00, 0xC5, 0x23, 0x13, 0x4C, 0x88,  // ....#.L.
                            /* 00E8 */  0x28, 0x21, 0x3A, 0xC3, 0x13, 0x5A, 0x28, 0xC3,  // (!:..Z(.
                            /* 00F0 */  0x45, 0x89, 0x13, 0x25, 0x70, 0x84, 0xDE, 0x04,  // E..%p...
                            /* 00F8 */  0x18, 0x83, 0x20, 0x08, 0x81, 0x43, 0x54, 0x36,  // .. ..CT6
                            /* 0100 */  0x48, 0xA1, 0xB6, 0x3F, 0x08, 0x22, 0xCB, 0xC1,  // H..?."..
                            /* 0108 */  0x89, 0x80, 0x45, 0x1A, 0x0D, 0xEA, 0x14, 0x90,  // ..E.....
                            /* 0110 */  0xE0, 0xA9, 0xC0, 0x27, 0x82, 0x93, 0x3A, 0xAF,  // ...'..:.
                            /* 0118 */  0xA3, 0x3A, 0xEB, 0x20, 0xC1, 0x4F, 0xA4, 0xCE,  // .:. .O..
                            /* 0120 */  0xE3, 0x00, 0x19, 0x38, 0x9B, 0x9A, 0xD9, 0x75,  // ...8...u
                            /* 0128 */  0x3E, 0x80, 0xE0, 0x1A, 0x50, 0xFF, 0xFF, 0x79,  // >...P..y
                            /* 0130 */  0x3E, 0x16, 0xB0, 0x61, 0x86, 0xC3, 0x0C, 0xD1,  // >..a....
                            /* 0138 */  0x83, 0xF5, 0x04, 0x0E, 0x91, 0x01, 0x7A, 0x62,  // ......zb
                            /* 0140 */  0x4F, 0x04, 0x58, 0x87, 0x93, 0xD1, 0x71, 0xA0,  // O.X...q.
                            /* 0148 */  0x54, 0x01, 0x66, 0xC7, 0xAD, 0x49, 0x27, 0x38,  // T.f..I'8
                            /* 0150 */  0x1E, 0x9F, 0x03, 0x3C, 0x9F, 0x13, 0x4E, 0x60,  // ...<..N`
                            /* 0158 */  0xF9, 0x83, 0x40, 0x8D, 0xCC, 0xD0, 0x36, 0x38,  // ..@...68
                            /* 0160 */  0x2D, 0x1D, 0x04, 0x7C, 0x00, 0x30, 0x81, 0xC5,  // -..|.0..
                            /* 0168 */  0x1E, 0x26, 0xE8, 0x78, 0xC0, 0x7F, 0x00, 0x78,  // .&.x...x
                            /* 0170 */  0x3E, 0x88, 0xF0, 0xCE, 0xE0, 0xF9, 0x9A, 0xA0,  // >.......
                            /* 0178 */  0xA8, 0xB3, 0x85, 0x9C, 0x8C, 0x07, 0x75, 0xAC,  // ......u.
                            /* 0180 */  0xF0, 0x05, 0x01, 0x03, 0x7E, 0xB4, 0x2F, 0x0C,  // ....~./.
                            /* 0188 */  0x61, 0x5E, 0x1A, 0xE2, 0x1E, 0xBC, 0xB5, 0x5E,  // a^.....^
                            /* 0190 */  0x21, 0x08, 0x81, 0x83, 0x43, 0xE8, 0xAF, 0x61,  // !...C..a
                            /* 0198 */  0x51, 0x83, 0xA7, 0x27, 0x0B, 0x7E, 0xA8, 0x60,  // Q..'.~.`
                            /* 01A0 */  0xC0, 0x7C, 0x3C, 0xA7, 0xE5, 0xB3, 0x87, 0x87,  // .|<.....
                            /* 01A8 */  0x07, 0x7F, 0x26, 0x4F, 0x14, 0xC0, 0x41, 0xE3,  // ..&O..A.
                            /* 01B0 */  0x19, 0x41, 0x88, 0xAF, 0x14, 0x6F, 0x14, 0xD8,  // .A...o..
                            /* 01B8 */  0xF3, 0x01, 0xBB, 0x53, 0x60, 0x87, 0x0E, 0xFF,  // ...S`...
                            /* 01C0 */  0x5A, 0x61, 0x54, 0x5F, 0x25, 0xDE, 0x22, 0x12,  // ZaT_%.".
                            /* 01C8 */  0x18, 0x2B, 0xC1, 0xFF, 0x3F, 0x30, 0x6E, 0xEC,  // .+..?0n.
                            /* 01D0 */  0xF6, 0x2B, 0x00, 0x21, 0xF8, 0xC1, 0x3C, 0x1B,  // .+.!..<.
                            /* 01D8 */  0x3C, 0x85, 0x44, 0x38, 0x2E, 0xA3, 0x1F, 0x50,  // <.D8...P
                            /* 01E0 */  0x9F, 0x33, 0x17, 0x44, 0xB4, 0xE3, 0x3A, 0x87,  // .3.D..:.
                            /* 01E8 */  0xA3, 0x08, 0x15, 0xE2, 0x2C, 0x0C, 0x14, 0x2E,  // ....,...
                            /* 01F0 */  0x58, 0x40, 0xE3, 0x24, 0xB0, 0xC8, 0xC1, 0xA2,  // X@.$....
                            /* 01F8 */  0x07, 0xC1, 0x01, 0xCF, 0xE1, 0x90, 0x82, 0x1E,  // ........
                            /* 0200 */  0xC4, 0xC9, 0x44, 0x39, 0x8F, 0x63, 0xF2, 0x39,  // ..D9.c.9
                            /* 0208 */  0xC5, 0x08, 0xC7, 0xF4, 0x78, 0xF2, 0xDC, 0xE1,  // ....x...
                            /* 0210 */  0xFB, 0xC6, 0xE1, 0x9F, 0xD7, 0xD1, 0x3E, 0x85,  // ......>.
                            /* 0218 */  0xB0, 0xA1, 0x1F, 0x02, 0xE6, 0x74, 0xE1, 0x21,  // .....t.!
                            /* 0220 */  0xF0, 0x01, 0x1C, 0xD0, 0x29, 0x5A, 0xE9, 0xC4,  // ....)Z..
                            /* 0228 */  0x90, 0x27, 0x1A, 0x7E, 0x2C, 0xC1, 0x0E, 0x80,  // .'.~,...
                            /* 0230 */  0xAB, 0xF2, 0x00, 0xC2, 0xC4, 0x3F, 0x0E, 0x24,  // .....?.$
                            /* 0238 */  0xED, 0x95, 0x40, 0x61, 0x7C, 0xC6, 0x01, 0x5C,  // ..@a|..\
                            /* 0240 */  0x01, 0x3D, 0x42, 0x80, 0xE7, 0x6C, 0x00, 0x17,  // .=B..l..
                            /* 0248 */  0xFB, 0xE4, 0xA3, 0x84, 0x78, 0x7A, 0x88, 0x7E,  // ....xz.~
                            /* 0250 */  0x2E, 0x27, 0xF3, 0x08, 0x61, 0x82, 0xFF, 0xFF,  // .'..a...
                            /* 0258 */  0x03, 0x0E, 0xEC, 0x2B, 0x8C, 0xB5, 0x5D, 0x70,  // ...+..]p
                            /* 0260 */  0xC8, 0x94, 0x9E, 0x6A, 0xDE, 0x6E, 0x8C, 0x72,  // ...j.n.r
                            /* 0268 */  0x58, 0x86, 0x79, 0xC0, 0xF1, 0xED, 0xA0, 0x35,  // X.y....5
                            /* 0270 */  0x18, 0xDD, 0x6E, 0xD8, 0x89, 0xE4, 0x24, 0x42,  // ..n...$B
                            /* 0278 */  0x31, 0xDC, 0x07, 0x89, 0x38, 0xB1, 0xC3, 0x45,  // 1...8..E
                            /* 0280 */  0x88, 0xFD, 0xD0, 0x61, 0xBC, 0x07, 0x1C, 0x16,  // ...a....
                            /* 0288 */  0xEF, 0x38, 0xA0, 0x83, 0x88, 0x0F, 0x38, 0x00,  // .8....8.
                            /* 0290 */  0x3F, 0x4E, 0x07, 0x8F, 0x25, 0xE0, 0x3F, 0x2B,  // ?N..%.?+
                            /* 0298 */  0xF0, 0x53, 0x09, 0x18, 0xFE, 0xFF, 0xA7, 0x12,  // .S......
                            /* 02A0 */  0xF0, 0x24, 0x7E, 0x10, 0xE8, 0xB4, 0xE3, 0xB4,  // .$~.....
                            /* 02A8 */  0x20, 0xB2, 0xB1, 0x58, 0x1F, 0xAA, 0x0C, 0xA1,  //  ..X....
                            /* 02B0 */  0x9C, 0x0B, 0x96, 0x47, 0x5C, 0x61, 0x1E, 0x4F,  // ...G\a.O
                            /* 02B8 */  0xE4, 0x73, 0x88, 0xFC, 0x52, 0x11, 0xE1, 0x0C,  // .s..R...
                            /* 02C0 */  0x8E, 0x21, 0xD2, 0x69, 0xC5, 0x38, 0xB0, 0x57,  // .!.i.8.W
                            /* 02C8 */  0x0E, 0xDF, 0x03, 0x9E, 0x2C, 0x78, 0x22, 0x60,  // ....,x"`
                            /* 02D0 */  0x1D, 0xE5, 0x78, 0x16, 0x0A, 0x29, 0xA3, 0xD1,  // ..x..)..
                            /* 02D8 */  0xA8, 0x3C, 0x08, 0x6B, 0x81, 0x11, 0x9C, 0x41,  // .<.k...A
                            /* 02E0 */  0x0C, 0xE8, 0xA0, 0x10, 0x3A, 0x22, 0xE1, 0x94,  // ....:"..
                            /* 02E8 */  0x80, 0x68, 0x5A, 0x6F, 0x44, 0xEC, 0xDC, 0xE3,  // .hZoD...
                            /* 02F0 */  0x1B, 0x92, 0x09, 0xA6, 0xBA, 0x1D, 0xD1, 0x79,  // .......y
                            /* 02F8 */  0xFA, 0x46, 0xC0, 0xEF, 0x29, 0x3E, 0x23, 0x18,  // .F..)>#.
                            /* 0300 */  0xDC, 0x0A, 0xEF, 0x1F, 0xA0, 0x19, 0x71, 0x10,  // ......q.
                            /* 0308 */  0xDF, 0x18, 0x7C, 0x26, 0xF0, 0x46, 0x4F, 0x04,  // ..|&.FO.
                            /* 0310 */  0xA3, 0xE6, 0xD0, 0x84, 0x9A, 0x86, 0xA7, 0xFA,  // ........
                            /* 0318 */  0x62, 0x63, 0x02, 0xEB, 0xBA, 0x0C, 0x81, 0x4C,  // bc.....L
                            /* 0320 */  0xDF, 0x31, 0x01, 0x14, 0x40, 0xBE, 0x14, 0xF8,  // .1..@...
                            /* 0328 */  0xA4, 0xF3, 0x60, 0xC0, 0xC6, 0xF0, 0xB0, 0x63,  // ..`....c
                            /* 0330 */  0x34, 0xA3, 0x73, 0xC1, 0x93, 0x47, 0x49, 0x9C,  // 4.s..GI.
                            /* 0338 */  0x3C, 0x05, 0xF1, 0xE4, 0x1D, 0x7F, 0xF2, 0xE8,  // <.......
                            /* 0340 */  0x3B, 0x85, 0x8F, 0x57, 0x9C, 0xC0, 0x71, 0xC7,  // ;..W..q.
                            /* 0348 */  0x4E, 0xAF, 0x20, 0x98, 0xFF, 0xFF, 0x30, 0xD8,  // N. ...0.
                            /* 0350 */  0x64, 0x4F, 0xED, 0x51, 0xC1, 0xB3, 0xF0, 0xA5,  // dO.Q....
                            /* 0358 */  0x05, 0x37, 0x78, 0xB8, 0xB7, 0x8C, 0x23, 0x0F,  // .7x...#.
                            /* 0360 */  0xF3, 0x4C, 0xE5, 0xF3, 0x95, 0xC1, 0x82, 0x84,  // .L......
                            /* 0368 */  0x79, 0x5F, 0xC0, 0x01, 0xBD, 0xDF, 0xBD, 0x38,  // y_.....8
                            /* 0370 */  0x1C, 0x6E, 0x88, 0xF3, 0x3D, 0xF4, 0x08, 0x3E,  // .n..=..>
                            /* 0378 */  0x7E, 0xF8, 0xCC, 0x80, 0x1B, 0x12, 0xBB, 0x06,  // ~.......
                            /* 0380 */  0xF0, 0xD1, 0xF8, 0x1A, 0xC0, 0x47, 0xE9, 0x3B,  // .....G.;
                            /* 0388 */  0x16, 0xF8, 0x04, 0xDE, 0x03, 0x40, 0x0E, 0x8F,  // .....@..
                            /* 0390 */  0x09, 0x3F, 0x2A, 0x7A, 0xCF, 0xF0, 0xB8, 0xF8,  // .?*z....
                            /* 0398 */  0x90, 0x7D, 0x45, 0x62, 0xD8, 0xCF, 0x1A, 0xBE,  // .}Eb....
                            /* 03A0 */  0x47, 0x9E, 0xE0, 0x2B, 0xC5, 0x2B, 0x1B, 0x06,  // G..+.+..
                            /* 03A8 */  0xD6, 0x87, 0x00, 0x0E, 0x6B, 0xB4, 0xB0, 0x87,  // ....k...
                            /* 03B0 */  0xFC, 0x92, 0xE2, 0x13, 0x8E, 0x67, 0x66, 0x8C,  // .....gf.
                            /* 03B8 */  0xB0, 0x3E, 0x08, 0x38, 0xCC, 0x41, 0x00, 0x34,  // .>.8.A.4
                            /* 03C0 */  0x47, 0x36, 0xFC, 0x0D, 0xC0, 0x97, 0x80, 0x20,  // G6..... 
                            /* 03C8 */  0x6F, 0x22, 0xA7, 0xFB, 0xE4, 0x63, 0x54, 0x7E,  // o"...cT~
                            /* 03D0 */  0x23, 0xE0, 0xE7, 0x11, 0x2C, 0x50, 0x10, 0xDF,  // #...,P..
                            /* 03D8 */  0x30, 0x3C, 0xB6, 0x03, 0x89, 0x0D, 0xE7, 0x5A,  // 0<.....Z
                            /* 03E0 */  0xC2, 0xFE, 0xFF, 0x77, 0x02, 0x8C, 0x42, 0x9B,  // ...w..B.
                            /* 03E8 */  0x3E, 0x35, 0x1A, 0xB5, 0x6A, 0x50, 0xA6, 0x46,  // >5..jP.F
                            /* 03F0 */  0x99, 0x06, 0xB5, 0xFA, 0x54, 0x6A, 0xCC, 0x98,  // ....Tj..
                            /* 03F8 */  0x89, 0x2B, 0x9F, 0x5F, 0x11, 0x1A, 0xB1, 0x23,  // .+._...#
                            /* 0400 */  0x81, 0xD0, 0x98, 0x14, 0x02, 0x71, 0xE8, 0x1F,  // .....q..
                            /* 0408 */  0x87, 0x40, 0x2C, 0xF9, 0x1E, 0x26, 0x10, 0x4B,  // .@,..&.K
                            /* 0410 */  0xA2, 0x95, 0x91, 0x8B, 0x86, 0x41, 0x04, 0x64,  // .....A.d
                            /* 0418 */  0xFD, 0x2A, 0x80, 0x58, 0x1A, 0x10, 0x01, 0xF9,  // .*.X....
                            /* 0420 */  0xFF, 0x0F                                       // ..
                        })
                    }
                }

                Mutex (PSMX, 0x00)
            }
        }

        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x0C), 
            SIRA,   8, 
            SIRB,   8, 
            SIRC,   8, 
            SIRD,   8, 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x17), 
            SDCL,   8, 
            Offset (0x1A), 
            SDIO,   8, 
            Offset (0x30), 
            USB1,   8, 
            Offset (0x34), 
            USB3,   8, 
            Offset (0x41), 
            SATA,   8, 
            Offset (0x62), 
            GIOC,   8, 
            Offset (0x70), 
            I2C0,   8, 
            I2C1,   8, 
            I2C2,   8, 
            I2C3,   8, 
            URT0,   8, 
            URT1,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (DSPI, 0, NotSerialized)
        {
            M460 ("PLA-ASL-\\_SB.DSPI\n", Zero, Zero, Zero, Zero, Zero, Zero)
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \_SB_.PD64 */
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
        }

        Method (INTA, 1, NotSerialized)
        {
            M460 ("PLA-ASL-\\_SB.INTA Arg0 = 0x%X\n", ToInteger (Arg0), Zero, Zero, Zero, Zero, Zero)
            PIRA = Arg0
            If (PICM)
            {
                HDAD = Arg0
                SDCL = Arg0
            }
        }

        Method (INTB, 1, NotSerialized)
        {
            M460 ("PLA-ASL-\\_SB.INTB Arg0 = 0x%X\n", ToInteger (Arg0), Zero, Zero, Zero, Zero, Zero)
            PIRB = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            M460 ("PLA-ASL-\\_SB.INTC Arg0 = 0x%X\n", ToInteger (Arg0), Zero, Zero, Zero, Zero, Zero)
            PIRC = Arg0
            If (PICM)
            {
                USB1 = Arg0
                USB3 = Arg0
            }
        }

        Method (INTD, 1, NotSerialized)
        {
            M460 ("PLA-ASL-\\_SB.INTD Arg0 = 0x%X\n", ToInteger (Arg0), Zero, Zero, Zero, Zero, Zero)
            PIRD = Arg0
            If (PICM)
            {
                SATA = Arg0
            }
        }

        Name (PRS1, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,5,6,10,11}
        })
        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRA && (PIRA != 0x1F)))
                {
                    M460 ("PLA-ASL-\\_SB.LNKA._STA = 0xB\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x0B)
                }
                Else
                {
                    M460 ("PLA-ASL-\\_SB.LNKA._STA = 0x9\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKA._PRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                M460 ("PLA-ASL-\\_SB.LNKA._DIS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKA._CRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKA._SRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRA = Local0
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRB && (PIRB != 0x1F)))
                {
                    M460 ("PLA-ASL-\\_SB.LNKB._STA = 0xB\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x0B)
                }
                Else
                {
                    M460 ("PLA-ASL-\\_SB.LNKB._STA = 0x9\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKB._PRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                M460 ("PLA-ASL-\\_SB.LNKB._DIS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKB._CRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKB._SRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRB = Local0
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRC && (PIRC != 0x1F)))
                {
                    M460 ("PLA-ASL-\\_SB.LNKC._STA = 0xB\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x0B)
                }
                Else
                {
                    M460 ("PLA-ASL-\\_SB.LNKC._STA = 0x9\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKC._PRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                M460 ("PLA-ASL-\\_SB.LNKC._DIS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKC._CRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKC._SRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRC = Local0
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRD && (PIRD != 0x1F)))
                {
                    M460 ("PLA-ASL-\\_SB.LNKD._STA = 0xB\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x0B)
                }
                Else
                {
                    M460 ("PLA-ASL-\\_SB.LNKD._STA = 0x9\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKD._PRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                M460 ("PLA-ASL-\\_SB.LNKD._DIS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKD._CRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKD._SRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRD = Local0
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRE && (PIRE != 0x1F)))
                {
                    M460 ("PLA-ASL-\\_SB.LNKE._STA = 0xB\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x0B)
                }
                Else
                {
                    M460 ("PLA-ASL-\\_SB.LNKE._STA = 0x9\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKE._PRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                M460 ("PLA-ASL-\\_SB.LNKE._DIS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKE._CRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKE._SRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRF && (PIRF != 0x1F)))
                {
                    M460 ("PLA-ASL-\\_SB.LNKF._STA = 0xB\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x0B)
                }
                Else
                {
                    M460 ("PLA-ASL-\\_SB.LNKF._STA = 0x9\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKF._PRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                M460 ("PLA-ASL-\\_SB.LNKF._DIS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKF._CRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKF._SRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRG && (PIRG != 0x1F)))
                {
                    M460 ("PLA-ASL-\\_SB.LNKG._STA = 0xB\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x0B)
                }
                Else
                {
                    M460 ("PLA-ASL-\\_SB.LNKG._STA = 0x9\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKG._PRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                M460 ("PLA-ASL-\\_SB.LNKG._DIS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKG._CRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKG._SRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRH && (PIRH != 0x1F)))
                {
                    M460 ("PLA-ASL-\\_SB.LNKH._STA = 0xB\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x0B)
                }
                Else
                {
                    M460 ("PLA-ASL-\\_SB.LNKH._STA = 0x9\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKH._PRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                M460 ("PLA-ASL-\\_SB.LNKH._DIS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKH._CRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKH._SRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }

        Method (GSMI, 1, NotSerialized)
        {
            APMD = Arg0
            APMC = 0xE4
            Sleep (0x02)
        }

        Method (S80H, 1, NotSerialized)
        {
            P80H = Arg0
        }

        Method (BSMI, 1, NotSerialized)
        {
            APMD = Arg0
            APMC = 0xBE
            Sleep (One)
        }
    }

    Name (TSOS, 0x75)
    Name (UR0I, 0x03)
    Name (UR1I, 0x0E)
    Name (UR2I, 0x05)
    Name (UR3I, 0x0F)
    Name (UR4I, 0x0D)
    Name (IC0I, 0x0A)
    Name (IC1I, 0x0B)
    Name (IC2I, 0x04)
    Name (IC3I, 0x06)
    Name (IC4I, 0x0E)
    If (CondRefOf (\_OSI))
    {
        If (_OSI ("Windows 2009"))
        {
            TSOS = 0x50
        }

        If (_OSI ("Windows 2015"))
        {
            TSOS = 0x70
        }
    }

    Scope (_SB)
    {
        OperationRegion (SMIC, SystemMemory, 0xFED80000, 0x00800000)
        Field (SMIC, ByteAcc, NoLock, Preserve)
        {
            Offset (0x36A), 
            SMIB,   8
        }

        OperationRegion (SSMI, SystemIO, SMIB, 0x02)
        Field (SSMI, AnyAcc, NoLock, Preserve)
        {
            SMIW,   16
        }

        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            FRTB,   32
        }

        OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
        Field (FRTP, AnyAcc, NoLock, Preserve)
        {
            PEBA,   32, 
                ,   5, 
            IC0E,   1, 
            IC1E,   1, 
            IC2E,   1, 
            IC3E,   1, 
            IC4E,   1, 
            IC5E,   1, 
            UT0E,   1, 
            UT1E,   1, 
            I31E,   1, 
            I32E,   1, 
            I33E,   1, 
            UT2E,   1, 
                ,   1, 
            EMMD,   2, 
            UT4E,   1, 
            I30E,   1, 
                ,   1, 
            XHCE,   1, 
                ,   1, 
                ,   1, 
            UT3E,   1, 
            ESPI,   1, 
            EMME,   1, 
            HFPE,   1, 
            HD0E,   1, 
            HD2E,   1, 
            PCEF,   1, 
                ,   4, 
            IC0D,   1, 
            IC1D,   1, 
            IC2D,   1, 
            IC3D,   1, 
            IC4D,   1, 
            IC5D,   1, 
            UT0D,   1, 
            UT1D,   1, 
            I31D,   1, 
            I32D,   1, 
            I33D,   1, 
            UT2D,   1, 
                ,   1, 
            EHCD,   1, 
                ,   1, 
            UT4D,   1, 
            I30D,   1, 
                ,   1, 
            XHCD,   1, 
            SD_D,   1, 
                ,   1, 
            UT3D,   1, 
                ,   1, 
            EMD3,   1, 
                ,   1, 
            US4D,   1, 
            S03D,   1, 
            UT0O,   1, 
            UT1O,   1, 
            UT2O,   1, 
            UT3O,   1, 
            Offset (0x1C), 
            I30M,   1, 
            I31M,   1, 
            I32M,   1, 
            I33M,   1, 
            Offset (0x2D), 
            UT0I,   1, 
            UT1I,   1, 
            UT2I,   1, 
            UT3I,   1, 
            UT4I,   1, 
            Offset (0x2E), 
            UL0I,   1, 
            UL1I,   1, 
            UL2I,   1, 
            UL3I,   1
        }

        OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
        Field (FCFG, DWordAcc, NoLock, Preserve)
        {
            Offset (0xA3078), 
                ,   2, 
            LDQ0,   1, 
            Offset (0xA30CB), 
                ,   7, 
            AUSS,   1
        }

        OperationRegion (IOMX, SystemMemory, 0xFED80D00, 0x0100)
        Field (IOMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x15), 
            IM15,   8, 
            IM16,   8, 
            Offset (0x1F), 
            IM1F,   8, 
            IM20,   8, 
            Offset (0x44), 
            IM44,   8, 
            Offset (0x46), 
            IM46,   8, 
            Offset (0x4A), 
            IM4A,   8, 
            IM4B,   8, 
            Offset (0x57), 
            IM57,   8, 
            IM58,   8, 
            Offset (0x68), 
            IM68,   8, 
            IM69,   8, 
            IM6A,   8, 
            IM6B,   8, 
            Offset (0x6D), 
            IM6D,   8
        }

        OperationRegion (FACR, SystemMemory, 0xFED81E00, 0x0100)
        Field (FACR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x80), 
                ,   28, 
            RD28,   1, 
                ,   1, 
            RQTY,   1, 
            Offset (0x84), 
                ,   28, 
            SD28,   1, 
                ,   1, 
            Offset (0xA0), 
            PG1A,   1
        }

        OperationRegion (LUIE, SystemMemory, 0xFEDC0020, 0x04)
        Field (LUIE, AnyAcc, NoLock, Preserve)
        {
            IER0,   1, 
            IER1,   1, 
            IER2,   1, 
            IER3,   1, 
            UOL0,   1, 
            UOL1,   1, 
            UOL2,   1, 
            UOL3,   1, 
            WUR0,   2, 
            WUR1,   2, 
            WUR2,   2, 
            WUR3,   2
        }

        Method (FRUI, 1, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (IUA0) /* \_SB_.IUA0 */
            }
            ElseIf ((Arg0 == One))
            {
                Return (IUA1) /* \_SB_.IUA1 */
            }
            ElseIf ((Arg0 == 0x02))
            {
                Return (IUA2) /* \_SB_.IUA2 */
            }
            ElseIf ((Arg0 == 0x03))
            {
                Return (IUA3) /* \_SB_.IUA3 */
            }
            Else
            {
                Return (0x03)
            }
        }

        Method (FUIO, 1, Serialized)
        {
            If ((IER0 == One))
            {
                If ((WUR0 == Arg0))
                {
                    Return (Zero)
                }
            }

            If ((IER1 == One))
            {
                If ((WUR1 == Arg0))
                {
                    Return (One)
                }
            }

            If ((IER2 == One))
            {
                If ((WUR2 == Arg0))
                {
                    Return (0x02)
                }
            }

            If ((IER3 == One))
            {
                If ((WUR3 == Arg0))
                {
                    Return (0x03)
                }
            }

            Return (0x0F)
        }

        Method (SRAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            ADIS = One
            ADSR = Zero
            Stall (Arg1)
            ADSR = One
            ADIS = Zero
            Stall (Arg1)
        }

        Method (DSAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        Method (HSAD, 2, Serialized)
        {
            Local3 = (One << Arg0)
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    PG1A = One
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    RQTY = One
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (!Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    RQTY = Zero
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }

                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    ADTD = 0x03
                    PG1A = Zero
                }
            }
        }

        OperationRegion (FPIC, SystemIO, 0x0C00, 0x02)
        Field (FPIC, AnyAcc, NoLock, Preserve)
        {
            FPII,   8, 
            FPID,   8
        }

        IndexField (FPII, FPID, ByteAcc, NoLock, Preserve)
        {
            Offset (0xF4), 
            IUA0,   8, 
            IUA1,   8, 
            IIF6,   8, 
            IIF7,   8, 
            IUA2,   8, 
            IUA3,   8
        }

        Device (HFP1)
        {
            Name (_HID, "AMDI0060")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HFPE)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC11000,         // Address Base
                        0x00000100,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.HFP1._CRS.RBUF */
            }
        }

        Device (HID0)
        {
            Name (_HID, "AMDI0063")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HD0E)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC13000,         // Address Base
                        0x00000200,         // Address Length
                        )
                    GpioInt (Edge, ActiveHigh, SharedAndWake, PullNone, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x00AB
                        }
                })
                Return (RBUF) /* \_SB_.HID0._CRS.RBUF */
            }
        }

        Device (HID2)
        {
            Name (_HID, "AMDI0063")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HD2E)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC12000,         // Address Base
                        0x00000200,         // Address Length
                        )
                    GpioInt (Edge, ActiveHigh, SharedAndWake, PullNone, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x00AB
                        }
                })
                Return (RBUF) /* \_SB_.HID2._CRS.RBUF */
            }
        }

        Device (GPIO)
        {
            Name (_HID, "AMDI0030")  // _HID: Hardware ID
            Name (_CID, "AMDI0030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000400,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (PPKG)
        {
            Name (_HID, "AMDI0052")  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (FUR0)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((UT0O == One))
                {
                    Return ("AMDI0029")
                }

                Return ("AMDI0020")
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Edge, ActiveHigh, Exclusive, ,, _Y08)
                    {
                        0x00000003,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFEDC9000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDC7000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, \_SB.FUR0._CRS._Y08._INT, IRQW)  // _INT: Interrupts
                IRQW = IUA0 /* \_SB_.IUA0 */
                Return (BUF0) /* \_SB_.FUR0._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = Zero
                Local1 = FUIO (Zero)
                If ((TSOS >= 0x70))
                {
                    If ((UT0E == One))
                    {
                        If ((Local1 == 0x0F))
                        {
                            Local0 = 0x0F
                        }
                    }
                }

                If ((UT0I == One))
                {
                    Local0 = Zero
                }

                Return (Local0)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT0D && UT0E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT0D && UT0E))
                {
                    DSAD (0x0B, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT0D && UT0E))
                {
                    DSAD (0x0B, 0x03)
                }
            }
        }

        Device (FUR1)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((UT1O == One))
                {
                    Return ("AMDI0029")
                }

                Return ("AMDI0020")
            }

            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Edge, ActiveHigh, Exclusive, ,, _Y09)
                    {
                        0x0000000E,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFEDCA000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDC8000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, \_SB.FUR1._CRS._Y09._INT, IRQW)  // _INT: Interrupts
                IRQW = IUA1 /* \_SB_.IUA1 */
                Return (BUF0) /* \_SB_.FUR1._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = Zero
                Local1 = FUIO (One)
                If ((TSOS >= 0x70))
                {
                    If ((UT1E == One))
                    {
                        If ((Local1 == 0x0F))
                        {
                            Local0 = 0x0F
                        }
                    }
                }

                If ((UT1I == One))
                {
                    Local0 = Zero
                }

                Return (Local0)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT1D && UT1E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT1D && UT1E))
                {
                    DSAD (0x0C, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT1D && UT1E))
                {
                    DSAD (0x0C, 0x03)
                }
            }
        }

        Device (FUR2)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((UT2O == One))
                {
                    Return ("AMDI0029")
                }

                Return ("AMDI0020")
            }

            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Edge, ActiveHigh, Exclusive, ,, _Y0A)
                    {
                        0x00000005,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFEDCE000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDCC000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, \_SB.FUR2._CRS._Y0A._INT, IRQW)  // _INT: Interrupts
                IRQW = IUA2 /* \_SB_.IUA2 */
                Return (BUF0) /* \_SB_.FUR2._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = Zero
                Local1 = FUIO (0x02)
                If ((TSOS >= 0x70))
                {
                    If ((UT2E == One))
                    {
                        If ((Local1 == 0x0F))
                        {
                            Local0 = 0x0F
                        }
                    }
                }

                If ((UT2I == One))
                {
                    Local0 = Zero
                }

                Return (Local0)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT2D && UT2E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT2D && UT2E))
                {
                    DSAD (0x10, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT2D && UT2E))
                {
                    DSAD (0x10, 0x03)
                }
            }
        }

        Device (FUR3)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((UT3O == One))
                {
                    Return ("AMDI0029")
                }

                Return ("AMDI0020")
            }

            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Edge, ActiveHigh, Exclusive, ,, _Y0B)
                    {
                        0x0000000F,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFEDCF000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDCD000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, \_SB.FUR3._CRS._Y0B._INT, IRQW)  // _INT: Interrupts
                IRQW = IUA3 /* \_SB_.IUA3 */
                Return (BUF0) /* \_SB_.FUR3._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = Zero
                Local1 = FUIO (0x03)
                If ((TSOS >= 0x70))
                {
                    If ((UT3E == One))
                    {
                        If ((Local1 == 0x0F))
                        {
                            Local0 = 0x0F
                        }
                    }
                }

                If ((UT3I == One))
                {
                    Local0 = Zero
                }

                Return (Local0)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT3D && UT3E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT3D && UT3E))
                {
                    DSAD (0x1A, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT3D && UT3E))
                {
                    DSAD (0x1A, 0x03)
                }
            }
        }

        Device (FUR4)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Edge, ActiveHigh, Exclusive, ,, _Y0C)
                    {
                        0x00000010,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFEDD1000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDD0000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateByteField (BUF0, \_SB.FUR4._CRS._Y0C._INT, IRQB)  // _INT: Interrupts
                IRQB = IIF7 /* \_SB_.IIF7 */
                Return (BUF0) /* \_SB_.FUR4._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = Zero
                If ((TSOS >= 0x70))
                {
                    If ((UT4E == One))
                    {
                        Local0 = 0x0F
                    }
                }

                If ((UT4I == One))
                {
                    Local0 = Zero
                }

                Return (Local0)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT4D && UT4E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT4D && UT4E))
                {
                    DSAD (0x14, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT4D && UT4E))
                {
                    DSAD (0x14, 0x03)
                }
            }
        }

        Device (I2CA)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {10}
                    Memory32Fixed (ReadWrite,
                        0xFEDC2000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC0I & 0x0F))
                Return (BUF0) /* \_SB_.I2CA._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC0E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x05, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC0D && IC0E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC0D && IC0E))
                {
                    DSAD (0x05, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC0D && IC0E))
                {
                    DSAD (0x05, 0x03)
                }
            }
        }

        Device (I2CB)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {11}
                    Memory32Fixed (ReadWrite,
                        0xFEDC3000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC1I & 0x0F))
                Return (BUF0) /* \_SB_.I2CB._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC1E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x06, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC1D && IC1E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC1D && IC1E))
                {
                    DSAD (0x06, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC1D && IC1E))
                {
                    DSAD (0x06, 0x03)
                }
            }
        }

        Device (I2CC)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDC4000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC2I & 0x0F))
                Return (BUF0) /* \_SB_.I2CC._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC2E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x07, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC2D && IC2E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC2D && IC2E))
                {
                    DSAD (0x07, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC2D && IC2E))
                {
                    DSAD (0x07, 0x03)
                }
            }
        }

        Device (I2CD)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {6}
                    Memory32Fixed (ReadWrite,
                        0xFEDC5000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC3I & 0x0F))
                Return (BUF0) /* \_SB_.I2CD._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC3E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x08, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC3D && IC3E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC3D && IC3E))
                {
                    DSAD (0x08, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC3D && IC3E))
                {
                    DSAD (0x08, 0x03)
                }
            }
        }

        Name (I3ID, "AMDI0015")
        Name (I2ID, "AMDI0016")
        Device (I3CA)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I30M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {10}
                    Memory32Fixed (ReadWrite,
                        0xFEDD2000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC0I & 0x0F))
                Return (BUF0) /* \_SB_.I3CA._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I30E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x15, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I30D && I30E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I30D && I30E))
                {
                    DSAD (0x15, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I30D && I30E))
                {
                    DSAD (0x15, 0x03)
                }
            }
        }

        Device (I3CB)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I31M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {11}
                    Memory32Fixed (ReadWrite,
                        0xFEDD3000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC1I & 0x0F))
                Return (BUF0) /* \_SB_.I3CB._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I31E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0D, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I31D && I31E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I31D && I31E))
                {
                    DSAD (0x0D, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I31D && I31E))
                {
                    DSAD (0x0D, 0x03)
                }
            }
        }

        Device (I3CC)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I32M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDD4000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC2I & 0x0F))
                Return (BUF0) /* \_SB_.I3CC._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I32E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0E, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I32D && I32E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I32D && I32E))
                {
                    DSAD (0x0E, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I32D && I32E))
                {
                    DSAD (0x0E, 0x03)
                }
            }
        }

        Device (I3CD)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I33M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {6}
                    Memory32Fixed (ReadWrite,
                        0xFEDD6000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC3I & 0x0F))
                Return (BUF0) /* \_SB_.I3CD._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I33E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0F, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I33D && I33E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I33D && I33E))
                {
                    DSAD (0x0F, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I33D && I33E))
                {
                    DSAD (0x0F, 0x03)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (UAR1)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_DDN, "COM1")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = Zero
                Local1 = FUIO (Zero)
                If ((Local1 != 0x0F))
                {
                    Local0 = 0x0F
                }

                If ((UL0I == One))
                {
                    Local0 = Zero
                }

                Return (Local0)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02E8,             // Range Minimum
                        0x02E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y0D)
                    IRQNoFlags (_Y0E)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y0D._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y0D._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR1._CRS._Y0E._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (Zero)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                IRQL = (One << (FRUI (Zero) & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR1._CRS.BUF0 */
            }
        }

        Device (UAR2)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_DDN, "COM2")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = Zero
                Local1 = FUIO (One)
                If ((Local1 != 0x0F))
                {
                    Local0 = 0x0F
                }

                If ((UL1I == One))
                {
                    Local0 = Zero
                }

                Return (Local0)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02F8,             // Range Minimum
                        0x02F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y0F)
                    IRQNoFlags (_Y10)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y0F._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y0F._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR2._CRS._Y10._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (One)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                IRQL = (One << (FRUI (One) & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR2._CRS.BUF0 */
            }
        }

        Device (UAR3)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_DDN, "COM3")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = Zero
                Local1 = FUIO (0x02)
                If ((Local1 != 0x0F))
                {
                    Local0 = 0x0F
                }

                If ((UL2I == One))
                {
                    Local0 = Zero
                }

                Return (Local0)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03E8,             // Range Minimum
                        0x03E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y11)
                    IRQNoFlags (_Y12)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y11._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y11._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR3._CRS._Y12._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (0x02)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                IRQL = (One << (FRUI (0x02) & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR3._CRS.BUF0 */
            }
        }

        Device (UAR4)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_DDN, "COM4")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = Zero
                Local1 = FUIO (0x03)
                If ((Local1 != 0x0F))
                {
                    Local0 = 0x0F
                }

                If ((UL3I == One))
                {
                    Local0 = Zero
                }

                Return (Local0)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03F8,             // Range Minimum
                        0x03F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y13)
                    IRQNoFlags (_Y14)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y13._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y13._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR4._CRS._Y14._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (0x03)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                IRQL = (One << (FRUI (0x03) & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR4._CRS.BUF0 */
            }
        }
    }

    Scope (_SB.FUR0)
    {
        Device (UART)
        {
            Name (_HID, "UTK0001")  // _HID: Hardware ID
            Name (_CID, "UARTTest")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                        0xC0, LittleEndian, ParityTypeNone, FlowControlHardware,
                        0x0020, 0x0020, "\\_SB.FUR0",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.FUR0.UART._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.FUR1)
    {
        Device (UART)
        {
            Name (_HID, "UTK0001")  // _HID: Hardware ID
            Name (_CID, "UARTTest")  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                        0x00, LittleEndian, ParityTypeNone, FlowControlNone,
                        0x0020, 0x0020, "\\_SB.FUR1",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.FUR1.UART._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.FUR2)
    {
        Device (UART)
        {
            Name (_HID, "UTK0001")  // _HID: Hardware ID
            Name (_CID, "UARTTest")  // _CID: Compatible ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                        0xC0, LittleEndian, ParityTypeNone, FlowControlHardware,
                        0x0020, 0x0020, "\\_SB.FUR2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.FUR2.UART._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.FUR3)
    {
        Device (UART)
        {
            Name (_HID, "UTK0001")  // _HID: Hardware ID
            Name (_CID, "UARTTest")  // _CID: Compatible ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                        0x00, LittleEndian, ParityTypeNone, FlowControlNone,
                        0x0020, 0x0020, "\\_SB.FUR3",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.FUR3.UART._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.FUR4)
    {
        Device (UART)
        {
            Name (_HID, "UTK0001")  // _HID: Hardware ID
            Name (_CID, "UARTTest")  // _CID: Compatible ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                        0xC0, LittleEndian, ParityTypeNone, FlowControlHardware,
                        0x0020, 0x0020, "\\_SB.FUR4",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.FUR4.UART._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.I2CA)
    {
        Device (WTP1)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0001")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.WTP1._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MTP1)
        {
            Name (_HID, "STK0001")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MTP1._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WTP2)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0002")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.WTP2._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MTP2)
        {
            Name (_HID, "STK0002")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MTP2._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WTP3)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0003")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.WTP3._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MTP3)
        {
            Name (_HID, "STK0003")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MTP3._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WTP4)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0004")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.WTP4._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MTP4)
        {
            Name (_HID, "STK0004")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MTP4._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MTP5)
        {
            Name (_HID, "STK0005")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MTP5._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.I2CB)
    {
        Device (WT21)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00012")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF2")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.WT21._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT21)
        {
            Name (_HID, "STK00012")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT21._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT22)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00022")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF2")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.WT22._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT22)
        {
            Name (_HID, "STK00022")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT22._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT23)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00032")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF2")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.WT23._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT23)
        {
            Name (_HID, "STK00032")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT23._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT24)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00042")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF2")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.WT24._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT24)
        {
            Name (_HID, "STK00042")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT24._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT25)
        {
            Name (_HID, "STK00052")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT25._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.I2CC)
    {
        Device (WT31)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00013")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF3")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.WT31._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT31)
        {
            Name (_HID, "STK00013")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT31._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT32)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00023")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF3")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.WT32._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT32)
        {
            Name (_HID, "STK00023")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT32._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT33)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00033")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF3")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.WT33._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT33)
        {
            Name (_HID, "STK00033")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT33._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT34)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00043")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF3")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.WT34._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT34)
        {
            Name (_HID, "STK00043")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT34._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT35)
        {
            Name (_HID, "STK00053")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT35._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.I2CD)
    {
        Device (WT41)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00014")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF4")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.WT41._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT41)
        {
            Name (_HID, "STK00014")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT41._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT42)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00024")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF4")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.WT42._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT42)
        {
            Name (_HID, "STK00024")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT42._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT43)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00034")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF4")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.WT43._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT43)
        {
            Name (_HID, "STK00034")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT43._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT44)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00044")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF4")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.WT44._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT44)
        {
            Name (_HID, "STK00044")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT44._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT45)
        {
            Name (_HID, "STK00054")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT45._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.I2CA)
    {
        Device (NFC1)
        {
            Name (_HID, EisaId ("NXP8013"))  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0029, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x005B
                        }
                    GpioIo (Exclusive, PullNone, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0099
                        }
                    GpioIo (Exclusive, PullNone, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0090
                        }
                })
                Return (RBUF) /* \_SB_.I2CA.NFC1._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (NFCS == Zero)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.I2CB)
    {
        Device (NFC1)
        {
            Name (_HID, EisaId ("NXP8013"))  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0029, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x005B
                        }
                    GpioIo (Exclusive, PullNone, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0099
                        }
                    GpioIo (Exclusive, PullNone, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0090
                        }
                })
                Return (RBUF) /* \_SB_.I2CB.NFC1._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (NFCS == One)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.I2CC)
    {
        Device (NFC1)
        {
            Name (_HID, EisaId ("NXP8013"))  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0029, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x005B
                        }
                    GpioIo (Exclusive, PullNone, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0099
                        }
                    GpioIo (Exclusive, PullNone, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0090
                        }
                })
                Return (RBUF) /* \_SB_.I2CC.NFC1._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (NFCS == 0x02)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.I2CD)
    {
        Device (NFC1)
        {
            Name (_HID, EisaId ("NXP8013"))  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0029, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x005B
                        }
                    GpioIo (Exclusive, PullNone, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0099
                        }
                    GpioIo (Exclusive, PullNone, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0090
                        }
                })
                Return (RBUF) /* \_SB_.I2CD.NFC1._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (NFCS == 0x03)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_TZ)
    {
        ThermalZone (TZ01)
        {
            Name (CRTT, 0x6E)
            Name (PSVT, 0x32)
            Name (TSPS, 0x14)
            Name (HOTT, 0x69)
            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (\_SB.PCI0.LPC0.EC0.CTSD)
                {
                    Return (_HOT ())
                }

                If ((Acquire (\_SB.PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                {
                    Local0 = \_SB.PCI0.LPC0.EC0.CPUT
                    Release (\_SB.PCI0.LPC0.EC0.LFCM)
                    Return ((0x0AAC + (Local0 * 0x0A)))
                }
                Else
                {
                    Return (0x0B74)
                }
            }

            Method (_PSL, 0, Serialized)  // _PSL: Passive List
            {
                Return (Package (0x10)
                {
                    \_SB.PLTF.C000, 
                    \_SB.PLTF.C001, 
                    \_SB.PLTF.C002, 
                    \_SB.PLTF.C003, 
                    \_SB.PLTF.C004, 
                    \_SB.PLTF.C005, 
                    \_SB.PLTF.C006, 
                    \_SB.PLTF.C007, 
                    \_SB.PLTF.C008, 
                    \_SB.PLTF.C009, 
                    \_SB.PLTF.C00A, 
                    \_SB.PLTF.C00B, 
                    \_SB.PLTF.C00C, 
                    \_SB.PLTF.C00D, 
                    \_SB.PLTF.C00E, 
                    \_SB.PLTF.C00F
                })
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return ((0x0AAC + (CRTT * 0x0A)))
            }

            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                Return ((0x0AAC + (HOTT * 0x0A)))
            }

            Method (_TC1, 0, Serialized)  // _TC1: Thermal Constant 1
            {
                Return (One)
            }

            Method (_TC2, 0, Serialized)  // _TC2: Thermal Constant 2
            {
                Return (0x02)
            }

            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (TSPS) /* \_TZ_.TZ01.TSPS */
            }
        }
    }
}



FACP
----
[000h 0000 004h]                   Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004 004h]                Table Length : 0000010C
[008h 0008 001h]                    Revision : 05
[009h 0009 001h]                    Checksum : F1
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]                FACS Address : BAEB3000
[028h 0040 004h]                DSDT Address : BAFCC000
[02Ch 0044 001h]                       Model : 00
[02Dh 0045 001h]                  PM Profile : 02 [Mobile]
[02Eh 0046 002h]               SCI Interrupt : 0009
[030h 0048 004h]            SMI Command Port : 000000B0
[034h 0052 001h]           ACPI Enable Value : A0
[035h 0053 001h]          ACPI Disable Value : A1
[036h 0054 001h]              S4BIOS Command : 00
[037h 0055 001h]             P-State Control : 00
[038h 0056 004h]    PM1A Event Block Address : 00000400
[03Ch 0060 004h]    PM1B Event Block Address : 00000000
[040h 0064 004h]  PM1A Control Block Address : 00000404
[044h 0068 004h]  PM1B Control Block Address : 00000000
[048h 0072 004h]   PM2 Control Block Address : 00000800
[04Ch 0076 004h]      PM Timer Block Address : 00000408
[050h 0080 004h]          GPE0 Block Address : 00000420
[054h 0084 004h]          GPE1 Block Address : 00000000
[058h 0088 001h]      PM1 Event Block Length : 04
[059h 0089 001h]    PM1 Control Block Length : 02
[05Ah 0090 001h]    PM2 Control Block Length : 01
[05Bh 0091 001h]       PM Timer Block Length : 04
[05Ch 0092 001h]           GPE0 Block Length : 08
[05Dh 0093 001h]           GPE1 Block Length : 00
[05Eh 0094 001h]            GPE1 Base Offset : 00
[05Fh 0095 001h]                _CST Support : 00
[060h 0096 002h]                  C2 Latency : 0064
[062h 0098 002h]                  C3 Latency : 03E9
[064h 0100 002h]              CPU Cache Size : 0000
[066h 0102 002h]          Cache Flush Stride : 0000
[068h 0104 001h]           Duty Cycle Offset : 01
[069h 0105 001h]            Duty Cycle Width : 03
[06Ah 0106 001h]         RTC Day Alarm Index : 0D
[06Bh 0107 001h]       RTC Month Alarm Index : 00
[06Ch 0108 001h]           RTC Century Index : 00
[06Dh 0109 002h]  Boot Flags (decoded below) : 0003
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111 001h]                    Reserved : 00
[070h 0112 004h]       Flags (decoded below) : 002085BD
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 1
            Control Method Power Button (V1) : 1
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 1

[074h 0116 00Ch]              Reset Register : [Generic Address Structure]
[074h 0116 001h]                    Space ID : 01 [SystemIO]
[075h 0117 001h]                   Bit Width : 08
[076h 0118 001h]                  Bit Offset : 00
[077h 0119 001h]        Encoded Access Width : 01 [Byte Access:8]
[078h 0120 008h]                     Address : 00000000000000B0

[080h 0128 001h]        Value to cause reset : FB
[081h 0129 002h]   ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131 001h]         FADT Minor Revision : 00
[084h 0132 008h]                FACS Address : 0000000000000000
[08Ch 0140 008h]                DSDT Address : 00000000BAFCC000
[094h 0148 00Ch]            PM1A Event Block : [Generic Address Structure]
[094h 0148 001h]                    Space ID : 01 [SystemIO]
[095h 0149 001h]                   Bit Width : 20
[096h 0150 001h]                  Bit Offset : 00
[097h 0151 001h]        Encoded Access Width : 03 [DWord Access:32]
[098h 0152 008h]                     Address : 0000000000000400

[0A0h 0160 00Ch]            PM1B Event Block : [Generic Address Structure]
[0A0h 0160 001h]                    Space ID : 00 [SystemMemory]
[0A1h 0161 001h]                   Bit Width : 00
[0A2h 0162 001h]                  Bit Offset : 00
[0A3h 0163 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164 008h]                     Address : 0000000000000000

[0ACh 0172 00Ch]          PM1A Control Block : [Generic Address Structure]
[0ACh 0172 001h]                    Space ID : 01 [SystemIO]
[0ADh 0173 001h]                   Bit Width : 10
[0AEh 0174 001h]                  Bit Offset : 00
[0AFh 0175 001h]        Encoded Access Width : 02 [Word Access:16]
[0B0h 0176 008h]                     Address : 0000000000000404

[0B8h 0184 00Ch]          PM1B Control Block : [Generic Address Structure]
[0B8h 0184 001h]                    Space ID : 00 [SystemMemory]
[0B9h 0185 001h]                   Bit Width : 00
[0BAh 0186 001h]                  Bit Offset : 00
[0BBh 0187 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188 008h]                     Address : 0000000000000000

[0C4h 0196 00Ch]           PM2 Control Block : [Generic Address Structure]
[0C4h 0196 001h]                    Space ID : 01 [SystemIO]
[0C5h 0197 001h]                   Bit Width : 08
[0C6h 0198 001h]                  Bit Offset : 00
[0C7h 0199 001h]        Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200 008h]                     Address : 0000000000000800

[0D0h 0208 00Ch]              PM Timer Block : [Generic Address Structure]
[0D0h 0208 001h]                    Space ID : 01 [SystemIO]
[0D1h 0209 001h]                   Bit Width : 20
[0D2h 0210 001h]                  Bit Offset : 00
[0D3h 0211 001h]        Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212 008h]                     Address : 0000000000000408

[0DCh 0220 00Ch]                  GPE0 Block : [Generic Address Structure]
[0DCh 0220 001h]                    Space ID : 01 [SystemIO]
[0DDh 0221 001h]                   Bit Width : 40
[0DEh 0222 001h]                  Bit Offset : 00
[0DFh 0223 001h]        Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224 008h]                     Address : 0000000000000420

[0E8h 0232 00Ch]                  GPE1 Block : [Generic Address Structure]
[0E8h 0232 001h]                    Space ID : 00 [SystemMemory]
[0E9h 0233 001h]                   Bit Width : 00
[0EAh 0234 001h]                  Bit Offset : 00
[0EBh 0235 001h]        Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236 008h]                     Address : 0000000000000000


[0F4h 0244 00Ch]      Sleep Control Register : [Generic Address Structure]
[0F4h 0244 001h]                    Space ID : 00 [SystemMemory]
[0F5h 0245 001h]                   Bit Width : 00
[0F6h 0246 001h]                  Bit Offset : 00
[0F7h 0247 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248 008h]                     Address : 0000000000000000

[100h 0256 00Ch]       Sleep Status Register : [Generic Address Structure]
[100h 0256 001h]                    Space ID : 00 [SystemMemory]
[101h 0257 001h]                   Bit Width : 00
[102h 0258 001h]                  Bit Offset : 00
[103h 0259 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260 008h]                     Address : 0000000000000000

/**** ACPI table terminates in the middle of a data structure! (dump table) 
CurrentOffset: 10C, TableLength: 10C ***/
Raw Table Data: Length 268 (0x10C)

    0000: 46 41 43 50 0C 01 00 00 05 F1 4C 45 4E 4F 56 4F  // FACP......LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 00 30 EB BA 00 C0 FC BA 00 02 09 00  // .....0..........
    0030: B0 00 00 00 A0 A1 00 00 00 04 00 00 00 00 00 00  // ................
    0040: 04 04 00 00 00 00 00 00 00 08 00 00 08 04 00 00  // ................
    0050: 20 04 00 00 00 00 00 00 04 02 01 04 08 00 00 00  //  ...............
    0060: 64 00 E9 03 00 00 00 00 01 03 0D 00 00 03 00 00  // d...............
    0070: BD 85 20 00 01 08 00 01 B0 00 00 00 00 00 00 00  // .. .............
    0080: FB 00 00 00 00 00 00 00 00 00 00 00 00 C0 FC BA  // ................
    0090: 00 00 00 00 01 20 00 03 00 04 00 00 00 00 00 00  // ..... ..........
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 00 08 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 04 00 00 00 00 00 00 01 40 00 01  // . ...........@..
    00E0: 20 04 00 00 00 00 00 00 00 00 00 01 00 00 00 00  //  ...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00              // ............


FACS
----
[000h 0000 004h]                   Signature : "FACS"
[004h 0004 004h]                      Length : 00000040
[008h 0008 004h]          Hardware Signature : E670A0AB
[00Ch 0012 004h]   32 Firmware Waking Vector : 00000000
[010h 0016 004h]                 Global Lock : 00000000
[014h 0020 004h]       Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024 008h]   64 Firmware Waking Vector : 0000000000000000
[020h 0032 001h]                     Version : 02
[021h 0033 003h]                    Reserved : 000000
[024h 0036 004h]   OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 AB A0 70 E6 00 00 00 00  // FACS@.....p.....
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FPDT
----
[000h 0000 004h]                   Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004 004h]                Table Length : 00000044
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : C1
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000


[024h 0036 002h]               Subtable Type : 0000
[026h 0038 001h]                      Length : 10
[027h 0039 001h]                    Revision : 01
[028h 0040 004h]                    Reserved : 00000000
[02Ch 0044 008h]    FPDT Boot Record Address : 00000000B1F80000

[034h 0052 002h]               Subtable Type : 0001
[036h 0054 001h]                      Length : 10
[037h 0055 001h]                    Revision : 01
[038h 0056 004h]                    Reserved : 00000000
[03Ch 0060 008h]         S3PT Record Address : 00000000B1F7F000

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 C1 4C 45 4E 4F 56 4F  // FPDTD.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 00 00 10 01 00 00 00 00 00 00 F8 B1  // ................
    0030: 00 00 00 00 01 00 10 01 00 00 00 00 00 F0 F7 B1  // ................
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000 004h]                   Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 1C
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]           Hardware Block ID : 10228210

[028h 0040 00Ch]        Timer Block Register : [Generic Address Structure]
[028h 0040 001h]                    Space ID : 00 [SystemMemory]
[029h 0041 001h]                   Bit Width : 00
[02Ah 0042 001h]                  Bit Offset : 00
[02Bh 0043 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044 008h]                     Address : 00000000FED00000

[034h 0052 001h]             Sequence Number : 00
[035h 0053 002h]         Minimum Clock Ticks : 0080
[037h 0055 001h]       Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 1C 4C 45 4E 4F 56 4F  // HPET8.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 10 82 22 10 00 00 00 00 00 00 D0 FE  // ......".........
    0030: 00 00 00 00 00 80 00 00                          // ........


IVRS
----
[000h 0000 004h]                   Signature : "IVRS"    [I/O Virtualization Reporting Structure]
[004h 0004 004h]                Table Length : 000001A4
[008h 0008 001h]                    Revision : 02
[009h 0009 001h]                    Checksum : 7C
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]         Virtualization Info : 00203043
[028h 0040 008h]                    Reserved : 0000000000000000

[030h 0048 001h]               Subtable Type : 10 [Hardware Definition Block (IVHD)]
[031h 0049 001h]       Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[032h 0050 002h]                      Length : 0048
[034h 0052 002h]                    DeviceId : 0002
[036h 0054 002h]           Capability Offset : 0040
[038h 0056 008h]                Base Address : 00000000FDE00000
[040h 0064 002h]           PCI Segment Group : 0000
[042h 0066 002h]         Virtualization Info : 0000
[044h 0068 004h]           Feature Reporting : 80048F6E

[048h 0072 001h]               Subtable Type : 03 [Device Entry: Start of Range]
[049h 0073 002h]                   Device ID : 0003
[04Bh 0075 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[04Ch 0076 001h]               Subtable Type : 04 [Device Entry: End of Range]
[04Dh 0077 002h]                   Device ID : FFFE
[04Fh 0079 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[050h 0080 001h]               Subtable Type : 43 [Device Entry: Alias Start of Range]
[051h 0081 002h]                   Device ID : FF00
[053h 0083 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[054h 0084 001h]                    Reserved : 00
[055h 0085 002h]       Source Used Device ID : 00A5
[057h 0087 001h]                    Reserved : 00

[058h 0088 001h]               Subtable Type : 04 [Device Entry: End of Range]
[059h 0089 002h]                   Device ID : FFFF
[05Bh 0091 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[05Ch 0092 001h]               Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[05Dh 0093 002h]                   Device ID : 0000
[05Fh 0095 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[060h 0096 001h]               Subtable Type : 48 [Device Entry: Special Device]
[061h 0097 002h]                   Device ID : 0000
[063h 0099 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[064h 0100 001h]                      Handle : 00
[065h 0101 002h]       Source Used Device ID : 00A0
[067h 0103 001h]                     Variety : 02

[068h 0104 001h]               Subtable Type : 48 [Device Entry: Special Device]
[069h 0105 002h]                   Device ID : 0000
[06Bh 0107 001h] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[06Ch 0108 001h]                      Handle : 21
[06Dh 0109 002h]       Source Used Device ID : 00A0
[06Fh 0111 001h]                     Variety : 01

[070h 0112 001h]               Subtable Type : 48 [Device Entry: Special Device]
[071h 0113 002h]                   Device ID : 0000
[073h 0115 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[074h 0116 001h]                      Handle : 22
[075h 0117 002h]       Source Used Device ID : 0001
[077h 0119 001h]                     Variety : 01

[078h 0120 001h]               Subtable Type : 11 [Hardware Definition Block (IVHD)]
[079h 0121 001h]       Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[07Ah 0122 002h]                      Length : 0058
[07Ch 0124 002h]                    DeviceId : 0002
[07Eh 0126 002h]           Capability Offset : 0040
[080h 0128 008h]                Base Address : 00000000FDE00000
[088h 0136 002h]           PCI Segment Group : 0000
[08Ah 0138 002h]         Virtualization Info : 0000
[08Ch 0140 004h]                  Attributes : 00040200
[090h 0144 008h]                   EFR Image : 246577EFA2254AFA
[098h 0152 008h]                    Reserved : 0000000000000000

[0A0h 0160 001h]               Subtable Type : 03 [Device Entry: Start of Range]
[0A1h 0161 002h]                   Device ID : 0003
[0A3h 0163 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A4h 0164 001h]               Subtable Type : 04 [Device Entry: End of Range]
[0A5h 0165 002h]                   Device ID : FFFE
[0A7h 0167 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A8h 0168 001h]               Subtable Type : 43 [Device Entry: Alias Start of Range]
[0A9h 0169 002h]                   Device ID : FF00
[0ABh 0171 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0ACh 0172 001h]                    Reserved : 00
[0ADh 0173 002h]       Source Used Device ID : 00A5
[0AFh 0175 001h]                    Reserved : 00

[0B0h 0176 001h]               Subtable Type : 04 [Device Entry: End of Range]
[0B1h 0177 002h]                   Device ID : FFFF
[0B3h 0179 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B4h 0180 001h]               Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[0B5h 0181 002h]                   Device ID : 0000
[0B7h 0183 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B8h 0184 001h]               Subtable Type : 48 [Device Entry: Special Device]
[0B9h 0185 002h]                   Device ID : 0000
[0BBh 0187 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0BCh 0188 001h]                      Handle : 00
[0BDh 0189 002h]       Source Used Device ID : 00A0
[0BFh 0191 001h]                     Variety : 02

[0C0h 0192 001h]               Subtable Type : 48 [Device Entry: Special Device]
[0C1h 0193 002h]                   Device ID : 0000
[0C3h 0195 001h] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[0C4h 0196 001h]                      Handle : 21
[0C5h 0197 002h]       Source Used Device ID : 00A0
[0C7h 0199 001h]                     Variety : 01

[0C8h 0200 001h]               Subtable Type : 48 [Device Entry: Special Device]
[0C9h 0201 002h]                   Device ID : 0000
[0CBh 0203 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0CCh 0204 001h]                      Handle : 22
[0CDh 0205 002h]       Source Used Device ID : 0001
[0CFh 0207 001h]                     Variety : 01

[0D0h 0208 001h]               Subtable Type : 40 [Hardware Definition Block - Mixed Format (IVHD)]
[0D1h 0209 001h]       Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[0D2h 0210 002h]                      Length : 00D4
[0D4h 0212 002h]                    DeviceId : 0002
[0D6h 0214 002h]           Capability Offset : 0040
[0D8h 0216 008h]                Base Address : 00000000FDE00000
[0E0h 0224 002h]           PCI Segment Group : 0000
[0E2h 0226 002h]         Virtualization Info : 0000
[0E4h 0228 004h]                  Attributes : 00040200
[0E8h 0232 008h]                   EFR Image : 246577EFA2254AFA
[0F0h 0240 008h]                    Reserved : 0000000000000000

[0F8h 0248 001h]               Subtable Type : 03 [Device Entry: Start of Range]
[0F9h 0249 002h]                   Device ID : 0003
[0FBh 0251 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0FCh 0252 001h]               Subtable Type : 04 [Device Entry: End of Range]
[0FDh 0253 002h]                   Device ID : FFFE
[0FFh 0255 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[100h 0256 001h]               Subtable Type : 43 [Device Entry: Alias Start of Range]
[101h 0257 002h]                   Device ID : FF00
[103h 0259 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[104h 0260 001h]                    Reserved : 00
[105h 0261 002h]       Source Used Device ID : 00A5
[107h 0263 001h]                    Reserved : 00

[108h 0264 001h]               Subtable Type : 04 [Device Entry: End of Range]
[109h 0265 002h]                   Device ID : FFFF
[10Bh 0267 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[10Ch 0268 001h]               Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[10Dh 0269 002h]                   Device ID : 0000
[10Fh 0271 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[110h 0272 001h]               Subtable Type : 48 [Device Entry: Special Device]
[111h 0273 002h]                   Device ID : 0000
[113h 0275 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[114h 0276 001h]                      Handle : 00
[115h 0277 002h]       Source Used Device ID : 00A0
[117h 0279 001h]                     Variety : 02

[118h 0280 001h]               Subtable Type : 48 [Device Entry: Special Device]
[119h 0281 002h]                   Device ID : 0000
[11Bh 0283 001h] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[11Ch 0284 001h]                      Handle : 21
[11Dh 0285 002h]       Source Used Device ID : 00A0
[11Fh 0287 001h]                     Variety : 01

[120h 0288 001h]               Subtable Type : 48 [Device Entry: Special Device]
[121h 0289 002h]                   Device ID : 0000
[123h 0291 001h] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[124h 0292 001h]                      Handle : 22
[125h 0293 002h]       Source Used Device ID : 0001
[127h 0295 001h]                     Variety : 01

[128h 0296 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[129h 0297 002h]                   Device ID : 00A5
[12Bh 0299 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[12Ch 0300 008h]                    ACPI HID : "AMDI0020"
[134h 0308 008h]                    ACPI CID : 0000000000000000
[13Ch 0316 001h]                  UID Format : 02
[13Dh 0317 001h]                  UID Length : 09
[13Eh 0318 009h]                         UID : "\_SB.FUR0"

[147h 0327 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[148h 0328 002h]                   Device ID : 00A5
[14Ah 0330 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[14Bh 0331 008h]                    ACPI HID : "AMDI0020"
[153h 0339 008h]                    ACPI CID : 0000000000000000
[15Bh 0347 001h]                  UID Format : 02
[15Ch 0348 001h]                  UID Length : 09
[15Dh 0349 009h]                         UID : "\_SB.FUR1"

[166h 0358 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[167h 0359 002h]                   Device ID : 00A5
[169h 0361 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[16Ah 0362 008h]                    ACPI HID : "AMDI0020"
[172h 0370 008h]                    ACPI CID : 0000000000000000
[17Ah 0378 001h]                  UID Format : 02
[17Bh 0379 001h]                  UID Length : 09
[17Ch 0380 009h]                         UID : "\_SB.FUR2"

[185h 0389 001h]               Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[186h 0390 002h]                   Device ID : 00A5
[188h 0392 001h] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[189h 0393 008h]                    ACPI HID : "AMDI0020"
[191h 0401 008h]                    ACPI CID : 0000000000000000
[199h 0409 001h]                  UID Format : 02
[19Ah 0410 001h]                  UID Length : 09
[19Bh 0411 009h]                         UID : "\_SB.FUR3"

Raw Table Data: Length 420 (0x1A4)

    0000: 49 56 52 53 A4 01 00 00 02 7C 4C 45 4E 4F 56 4F  // IVRS.....|LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 43 30 20 00 00 00 00 00 00 00 00 00  // ....C0 .........
    0030: 10 B0 48 00 02 00 40 00 00 00 E0 FD 00 00 00 00  // ..H...@.........
    0040: 00 00 00 00 6E 8F 04 80 03 03 00 00 04 FE FF 00  // ....n...........
    0050: 43 00 FF 00 00 A5 00 00 04 FF FF 00 00 00 00 00  // C...............
    0060: 48 00 00 00 00 A0 00 02 48 00 00 D7 21 A0 00 01  // H.......H...!...
    0070: 48 00 00 00 22 01 00 01 11 B0 58 00 02 00 40 00  // H...".....X...@.
    0080: 00 00 E0 FD 00 00 00 00 00 00 00 00 00 02 04 00  // ................
    0090: FA 4A 25 A2 EF 77 65 24 00 00 00 00 00 00 00 00  // .J%..we$........
    00A0: 03 03 00 00 04 FE FF 00 43 00 FF 00 00 A5 00 00  // ........C.......
    00B0: 04 FF FF 00 00 00 00 00 48 00 00 00 00 A0 00 02  // ........H.......
    00C0: 48 00 00 D7 21 A0 00 01 48 00 00 00 22 01 00 01  // H...!...H..."...
    00D0: 40 B0 D4 00 02 00 40 00 00 00 E0 FD 00 00 00 00  // @.....@.........
    00E0: 00 00 00 00 00 02 04 00 FA 4A 25 A2 EF 77 65 24  // .........J%..we$
    00F0: 00 00 00 00 00 00 00 00 03 03 00 00 04 FE FF 00  // ................
    0100: 43 00 FF 00 00 A5 00 00 04 FF FF 00 00 00 00 00  // C...............
    0110: 48 00 00 00 00 A0 00 02 48 00 00 D7 21 A0 00 01  // H.......H...!...
    0120: 48 00 00 00 22 01 00 01 F0 A5 00 40 41 4D 44 49  // H..."......@AMDI
    0130: 30 30 32 30 00 00 00 00 00 00 00 00 02 09 5C 5F  // 0020..........\_
    0140: 53 42 2E 46 55 52 30 F0 A5 00 40 41 4D 44 49 30  // SB.FUR0...@AMDI0
    0150: 30 32 30 00 00 00 00 00 00 00 00 02 09 5C 5F 53  // 020..........\_S
    0160: 42 2E 46 55 52 31 F0 A5 00 40 41 4D 44 49 30 30  // B.FUR1...@AMDI00
    0170: 32 30 00 00 00 00 00 00 00 00 02 09 5C 5F 53 42  // 20..........\_SB
    0180: 2E 46 55 52 32 F0 A5 00 40 41 4D 44 49 30 30 32  // .FUR2...@AMDI002
    0190: 30 00 00 00 00 00 00 00 00 02 09 5C 5F 53 42 2E  // 0..........\_SB.
    01A0: 46 55 52 33                                      // FUR3


MCFG
----
[000h 0000 004h]                   Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004 004h]                Table Length : 0000003C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 5F
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 008h]                    Reserved : 0000000000000000

[02Ch 0044 008h]                Base Address : 00000000E0000000
[034h 0052 002h]        Segment Group Number : 0000
[036h 0054 001h]            Start Bus Number : 00
[037h 0055 001h]              End Bus Number : FF
[038h 0056 004h]                    Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 5F 4C 45 4E 4F 56 4F  // MCFG<...._LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 E0  // ................
    0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


MSDM
----
[000h 0000 004h]                   Signature : "MSDM"    [Microsoft Data Management Table]
[004h 0004 004h]                Table Length : 00000055
[008h 0008 001h]                    Revision : 03
[009h 0009 001h]                    Checksum : 76
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 031h] Software Licensing Structure : 4D 53 44 4D 55 00 00 00 03 76 4C 45 4E 4F 56 4F /* MSDMU....vLENOVO */\
/* 034h 0052  16 */                            43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49 /* CB-01   ....ACPI */\
/* 044h 0068  16 */                            00 00 04 00 01 00 00 00 00 00 00 00 01 00 00 00 /* ................ */\
/* 054h 0084   1 */                            00                                              /* . */\

Raw Table Data: Length 85 (0x55)

    0000: 4D 53 44 4D 55 00 00 00 03 76 4C 45 4E 4F 56 4F  // MSDMU....vLENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 01 00 00 00 00 00 00 00 01 00 00 00  // ................
    0030: 00 00 00 00 1D 00 00 00 37 34 38 4E 4A 2D 51 39  // ........748NJ-Q9
    0040: 4A 51 4A 2D 46 36 54 50 36 2D 59 32 36 57 34 2D  // JQJ-F6TP6-Y26W4-
    0050: 56 4D 48 38 57                                   // VMH8W


SLIC
----
[000h 0000 004h]                   Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004 004h]                Table Length : 00000176
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 9B
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 152h] Software Licensing Structure : 53 4C 49 43 76 01 00 00 01 9B 4C 45 4E 4F 56 4F /* SLICv.....LENOVO */\
/* 034h 0052  16 */                            43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49 /* CB-01   ....ACPI */\
/* 044h 0068  16 */                            00 00 04 00 00 00 00 00 9C 00 00 00 06 02 00 00 /* ................ */\
/* 054h 0084  16 */                            00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 /* .$..RSA1........ */\
/* 064h 0100  16 */                            69 16 4A 9F B1 4B 3A FB 80 20 AA AF C4 F9 3E C1 /* i.J..K:.. ....>. */\
/* 074h 0116  16 */                            80 49 EE 6A 65 26 72 1E CD BF 5F 2F 96 D6 C0 0A /* .I.je&r..._/.... */\
/* 084h 0132  16 */                            92 F5 06 B5 00 B2 3B 29 02 E2 4C 8D C2 F2 BC 41 /* ......;)..L....A */\
/* 094h 0148  16 */                            77 9C 70 F0 F3 1B 09 D2 63 5A DC A8 83 F8 5E C9 /* w.p.....cZ....^. */\
/* 0A4h 0164  16 */                            15 95 F9 FA FD DC 05 B7 4D 67 7F 2D B3 84 33 20 /* ........Mg.-..3  */\
/* 0B4h 0180  16 */                            E1 D1 79 2A A7 6A 77 D1 B6 20 2A 76 42 C5 D5 E9 /* ..y*.jw.. *vB... */\
/* 0C4h 0196  16 */                            B6 43 40 55 44 C3 C9 37 99 5F 41 97 70 F3 D1 F6 /* .C@UD..7._A.p... */\
/* 0D4h 0212  16 */                            07 EC 7B 1A 29 A1 C1 F1 91 FD 48 86 6E 3E CE CB /* ..{.).....H.n>.. */\
/* 0E4h 0228  16 */                            01 00 00 00 B6 00 00 00 00 20 00 00 49 4E 53 59 /* ......... ..INSY */\
/* 0F4h 0244  16 */                            44 45 49 4E 53 59 44 45 30 30 57 49 4E 44 4F 57 /* DEINSYDE00WINDOW */\
/* 104h 0260  16 */                            53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00 /* S .............. */\
/* 114h 0276  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 124h 0292  16 */                            00 00 00 00 00 00 D9 54 93 7A 68 04 4A 44 81 CE /* .......T.zh.JD.. */\
/* 134h 0308  16 */                            0B F6 17 D8 90 DF 00 00 01 00 00 00 00 00 5F 46 /* .............._F */\
/* 144h 0324  16 */                            56 48 FF 8E FF FF 48 00 B1 4C 00 00 00 01 01 00 /* VH....H..L...... */\
/* 154h 0340  16 */                            00 00 00 00 01 00 00 00 00 00 00 00 00 00 54 F0 /* ..............T. */\
/* 164h 0356  16 */                            0C 6F 6A AE 8C 41 A7 CE 3C 7A 7C D7 4E C0 4E D4 /* .oj..A..<z|.N.N. */\
/* 174h 0372   2 */                            02 40                                           /* .@ */\

Raw Table Data: Length 374 (0x176)

    0000: 53 4C 49 43 76 01 00 00 01 9B 4C 45 4E 4F 56 4F  // SLICv.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 00 00 00 00 9C 00 00 00 06 02 00 00  // ................
    0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  // .$..RSA1........
    0040: 69 16 4A 9F B1 4B 3A FB 80 20 AA AF C4 F9 3E C1  // i.J..K:.. ....>.
    0050: 80 49 EE 6A 65 26 72 1E CD BF 5F 2F 96 D6 C0 0A  // .I.je&r..._/....
    0060: 92 F5 06 B5 00 B2 3B 29 02 E2 4C 8D C2 F2 BC 41  // ......;)..L....A
    0070: 77 9C 70 F0 F3 1B 09 D2 63 5A DC A8 83 F8 5E C9  // w.p.....cZ....^.
    0080: 15 95 F9 FA FD DC 05 B7 4D 67 7F 2D B3 84 33 20  // ........Mg.-..3 
    0090: E1 D1 79 2A A7 6A 77 D1 B6 20 2A 76 42 C5 D5 E9  // ..y*.jw.. *vB...
    00A0: B6 43 40 55 44 C3 C9 37 99 5F 41 97 70 F3 D1 F6  // .C@UD..7._A.p...
    00B0: 07 EC 7B 1A 29 A1 C1 F1 91 FD 48 86 6E 3E CE CB  // ..{.).....H.n>..
    00C0: 01 00 00 00 B6 00 00 00 00 20 00 00 49 4E 53 59  // ......... ..INSY
    00D0: 44 45 49 4E 53 59 44 45 30 30 57 49 4E 44 4F 57  // DEINSYDE00WINDOW
    00E0: 53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00  // S ..............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 D9 54 93 7A 68 04 4A 44 81 CE  // .......T.zh.JD..
    0110: 0B F6 17 D8 90 DF 00 00 01 00 00 00 00 00 5F 46  // .............._F
    0120: 56 48 FF 8E FF FF 48 00 B1 4C 00 00 00 01 01 00  // VH....H..L......
    0130: 00 00 00 00 01 00 00 00 00 00 00 00 00 00 54 F0  // ..............T.
    0140: 0C 6F 6A AE 8C 41 A7 CE 3C 7A 7C D7 4E C0 4E D4  // .oj..A..<z|.N.N.
    0150: 02 40 13 2D 00 F8 FB 2C 00 01 88 7D 00 00 01 EA  // .@.-...,...}....
    0160: 2C 00 00 88 7D 00 00 1C 28 87 6E FB B4 69 39 3F  // ,...}...(.n..i9?
    0170: DE FF CC CC 64 90                                // ....d.


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.GZFD.HTPL, MethodObj)    // 0 Arguments
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.GP17, DeviceObj)
    External (_SB_.PCI0.GPP0, DeviceObj)
    External (_SB_.PCI0.GPP0.HDAU._ADR, UnknownObj)
    External (_SB_.PCI0.GPP0.PEGP, DeviceObj)
    External (_SB_.PCI0.GPP0.PEGP.PCBB, FieldUnitObj)
    External (_SB_.PCI0.GPP0.VGA_._ADR, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.CTE0, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.CTMD, IntObj)
    External (_SB_.PCI0.LPC0.EC0_.ECAV, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.GATP, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.GATY, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.GPAB, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.GPTH, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.HGCT, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.LFCM, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.NVHC, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.PDAB, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.REJF, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.LPC0.EC0_.SGCB, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.SPMO, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.TGPP, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.WEJF, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.LPC0.FNQT, MethodObj)    // 2 Arguments
    External (_SB_.PLTF.C000, DeviceObj)
    External (_SB_.PLTF.C001, DeviceObj)
    External (_SB_.PLTF.C002, DeviceObj)
    External (_SB_.PLTF.C003, DeviceObj)
    External (_SB_.PLTF.C004, DeviceObj)
    External (_SB_.PLTF.C005, DeviceObj)
    External (_SB_.PLTF.C006, DeviceObj)
    External (_SB_.PLTF.C007, DeviceObj)
    External (_SB_.PLTF.C008, DeviceObj)
    External (_SB_.PLTF.C009, DeviceObj)
    External (_SB_.PLTF.C00A, DeviceObj)
    External (_SB_.PLTF.C00B, DeviceObj)
    External (_SB_.PLTF.C00C, DeviceObj)
    External (_SB_.PLTF.C00D, DeviceObj)
    External (_SB_.PLTF.C00E, DeviceObj)
    External (_SB_.PLTF.C00F, DeviceObj)
    External (BCTP, UnknownObj)
    External (BDPF, IntObj)
    External (EPSW, UnknownObj)
    External (GTYP, IntObj)
    External (INSM, UnknownObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M009, MethodObj)    // 1 Arguments
    External (M010, MethodObj)    // 2 Arguments
    External (M017, MethodObj)    // 6 Arguments
    External (M023, MethodObj)    // 3 Arguments
    External (M402, MethodObj)    // 3 Arguments
    External (M403, MethodObj)    // 4 Arguments
    External (PRFT, IntObj)
    External (S4FG, UnknownObj)
    External (TCNT, FieldUnitObj)
    External (XXDF, IntObj)

    Scope (\_SB.PCI0.GPP0)
    {
        Device (PEGP)
        {
            Name (_ADR, Zero)  // _ADR: Address
        }

        Device (NHDA)
        {
            Name (_ADR, One)  // _ADR: Address
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PCI0)
    {
        OperationRegion (HGOP, SystemMemory, 0xB2F7DF18, 0x00000011)
        Field (HGOP, AnyAcc, Lock, Preserve)
        {
            DGDA,   32, 
            DGBA,   32, 
            DGPV,   16, 
            OPTF,   8, 
            NVGE,   8, 
            DSSV,   32, 
            DISM,   8
        }
    }

    Scope (\_SB.PCI0.GPP0.PEGP)
    {
        OperationRegion (VBOR, SystemMemory, 0xBAE6F018, 0x00040004)
        Field (VBOR, DWordAcc, Lock, Preserve)
        {
            RVBS,   32, 
            VBS1,   262144, 
            VBS2,   262144, 
            VBS3,   262144, 
            VBS4,   262144, 
            VBS5,   262144, 
            VBS6,   262144, 
            VBS7,   262144, 
            VBS8,   262144
        }
    }

    Scope (\_SB.PCI0.GPP0.PEGP)
    {
        OperationRegion (NOPR, SystemMemory, 0xBAE6C018, 0x00002028)
        Field (NOPR, AnyAcc, Lock, Preserve)
        {
            DHPS,   8, 
            DPCS,   8, 
            GPSS,   8, 
            VENS,   8, 
            NBCS,   8, 
            GC6S,   8, 
            NVSR,   8, 
            NPCS,   8, 
            NCTP,   8, 
            SLVS,   8, 
            PBCM,   8, 
            EXMD,   8, 
            MXBS,   32, 
            MXMB,   32768, 
            SMXS,   32, 
            SMXB,   32768, 
            FBEN,   32, 
            ENVT,   32, 
            PWGD,   32, 
            DMMP,   32, 
            DLRP,   32
        }
    }

    Scope (\_SB.PCI0.GPP0.PEGP)
    {
        Name (GSV1, Buffer (One)
        {
             0x00                                             // .
        })
        Name (GSV2, Buffer (One)
        {
             0x00                                             // .
        })
        Name (GSDR, Buffer (0xA1)
        {
            /* 0000 */  0x57, 0x74, 0xDC, 0x86, 0x75, 0x84, 0xEC, 0xE7,  // Wt..u...
            /* 0008 */  0x52, 0x44, 0xA1, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
            /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
            /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
            /* 0038 */  0x51, 0x00, 0x00, 0x00, 0x04, 0x00, 0x4F, 0x00,  // Q.....O.
            /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x4D, 0x00, 0x00, 0x00,  // ....M...
            /* 0048 */  0x06, 0x00, 0x4B, 0x00, 0x00, 0x00, 0x07, 0x00,  // ..K.....
            /* 0050 */  0x49, 0x00, 0x00, 0x00, 0x08, 0x00, 0x47, 0x00,  // I.....G.
            /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
            /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
            /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x60, 0x68, 0x9E,  // .....`h.
            /* 0088 */  0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 5.......
            /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A0 */  0x00                                             // .
        })
        Method (NBCI, 4, Serialized)
        {
            Debug = "------- NV NBCI DSM --------"
            If ((Arg1 != 0x0102))
            {
                Debug = " NBCI DSM: NOT SUPPORTED!"
                Return (0x80000002)
            }

            If ((Arg2 == Zero))
            {
                Debug = "   NBCI fun0 NBCI_FUNC_SUPPORT"
                Return (Buffer (0x04)
                {
                     0x01, 0x00, 0x11, 0x00                           // ....
                })
            }

            If ((Arg2 == 0x10))
            {
                Debug = "   NBCI fun16 NBCI_FUNC_GETOBJBYTYPE"
                CreateWordField (Arg3, 0x02, BFF0)
                If ((BFF0 == 0x564B)){}
                If ((BFF0 == 0x4452))
                {
                    Return (GSDR) /* \_SB_.PCI0.GPP0.PEGP.GSDR */
                }
            }

            If ((Arg2 == 0x14))
            {
                Debug = "   NBCI fun20 NBCI_FUNC_GETBACKLIGHT"
                Return (Package (0x20)
                {
                    0x8001A450, 
                    0x0203, 
                    Zero, 
                    Zero, 
                    0x05, 
                    One, 
                    Package (0x04)
                    {
                        0x03E8, 
                        0x0F, 
                        0x03E8, 
                        Package (0x03)
                        {
                            0x0B, 
                            Package (0x0B)
                            {
                                0x0F, 
                                0x64, 
                                0xC8, 
                                0x012C, 
                                0x0190, 
                                0x01F4, 
                                0x0258, 
                                0x02BC, 
                                0x0320, 
                                0x0384, 
                                0x03E8
                            }, 

                            Package (0x0B)
                            {
                                Zero, 
                                0x64, 
                                0xC8, 
                                0x012C, 
                                0x0190, 
                                0x01F4, 
                                0x0258, 
                                0x02BC, 
                                0x0320, 
                                0x0384, 
                                0x03E8
                            }
                        }
                    }
                })
            }
        }
    }

    Scope (\)
    {
        Name (REST, 0x28)
        Name (PWEN, 0x09)
        Name (PWOK, 0x9A)
        Name (GRDN, One)
        Name (GRFN, One)
    }

    Scope (\_SB.PCI0.GPP0)
    {
        Method (SGPC, 1, NotSerialized)
        {
            If ((Arg0 == One))
            {
                M000 (0x9D)
                Sleep (0x05)
                If ((M009 (PWEN) == One))
                {
                    Return (Zero)
                }

                M023 (Zero, One, One)
                M010 (REST, Zero)
                Sleep (One)
                M010 (PWEN, One)
                Local0 = Zero
                While ((M009 (PWOK) == Zero))
                {
                    Sleep (0x05)
                }

                Sleep (0x32)
                M010 (REST, One)
                If ((\XXDF == One))
                {
                    Sleep (0x64)
                    \XXDF = Zero
                }
                Else
                {
                    Sleep (0x64)
                }

                \_SB.ALIB (0x13, ((GRDN << 0x03) | GRFN))
                M403 (Zero, One, One, One)
                Local1 = Zero
                While (((Local1 & 0x28) != 0x20))
                {
                    Local1 = M017 (Zero, One, One, 0x6B, Zero, 0x08)
                    Stall (0x63)
                }

                M000 (0xB0)
                Sleep (0x05)
                M403 (Zero, One, One, Zero)
                Sleep (0x14)
                \_SB.PCI0.GPP0.CMDR |= 0x04
                \_SB.PCI0.GPP0.D0ST = Zero
                While ((\_SB.PCI0.GPP0.PEGP.NVID != 0x10DE))
                {
                    Sleep (One)
                }

                While ((\_SB.PCI0.GPP0.LREN != One))
                {
                    \_SB.PCI0.GPP0.LREN = One
                }

                \_SB.PCI0.GPP0.CEDR = One
                M000 (0xA0)
            }
            Else
            {
                M023 (Zero, One, One)
                M000 (0xA1)
                M010 (PWEN, One)
                \_SB.PCI0.GPP0.PEGP.LTRE = \_SB.PCI0.GPP0.LREN
                M402 (Zero, One, One)
                \_SB.ALIB (0x12, ((GRDN << 0x03) | GRFN))
                \_SB.PCI0.GPP0.D0ST = 0x03
                M010 (REST, Zero)
                Sleep (0x05)
                M010 (PWEN, Zero)
                Sleep (0x64)
                M000 (0xA3)
            }
        }

        PowerResource (PG00, 0x00, 0x0000)
        {
            Name (M239, One)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((RVID == Ones))
                {
                    Return (Zero)
                }

                Return (GSTA ())
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                If ((Acquire (\_SB.PCI0.LPC0.EC0.HGCT, 0xA000) == Zero))
                {
                    If ((\_SB.PCI0.LPC0.EC0.REJF (0x03) == Zero))
                    {
                        If ((\_SB.PCI0.GPP0.GSTA () != Zero))
                        {
                            If ((\XXDF == One))
                            {
                                \XXDF = Zero
                            }

                            Release (\_SB.PCI0.LPC0.EC0.HGCT)
                            Return (Zero)
                        }
                    }

                    If ((\_SB.PCI0.TDGC == One))
                    {
                        If ((\_SB.PCI0.DGCX == 0x03))
                        {
                            \_SB.PCI0.GC6O ()
                        }
                        ElseIf ((\_SB.PCI0.DGCX == 0x04))
                        {
                            \_SB.PCI0.GC6O ()
                        }

                        \_SB.PCI0.TDGC = Zero
                        \_SB.PCI0.DGCX = Zero
                    }
                    ElseIf ((\_SB.PCI0.LPC0.EC0.REJF (0x03) == Zero))
                    {
                        SGPC (One)
                        \_SB.PCI0.GPP0.D0ST = Zero
                        \_SB.PCI0.GPP0.PEGP.SSSV = \_SB.PCI0.DSSV
                    }

                    If ((\_SB.PCI0.LPC0.EC0.REJF (0x03) == Zero))
                    {
                        If (\_SB.PCI0.LPC0.EC0.ECAV)
                        {
                            If ((Acquire (\_SB.PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                            {
                                \_SB.PCI0.LPC0.EC0.GATY = 0x02
                                Sleep (0x0A)
                                Release (\_SB.PCI0.LPC0.EC0.LFCM)
                            }
                        }

                        If ((\XXDF == One))
                        {
                            \XXDF = Zero
                        }
                    }

                    M239 = One
                    Release (\_SB.PCI0.LPC0.EC0.HGCT)
                }
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                If ((\_SB.PCI0.GPP0.GSTA () != One))
                {
                    Return (Zero)
                }

                If (\_SB.PCI0.LPC0.EC0.ECAV)
                {
                    If ((Acquire (\_SB.PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                    {
                        \_SB.PCI0.LPC0.EC0.GATY = Zero
                        Sleep (0x0A)
                        Release (\_SB.PCI0.LPC0.EC0.LFCM)
                    }
                }

                If ((\_SB.PCI0.TDGC == One))
                {
                    CreateField (\_SB.PCI0.TGPC, Zero, 0x03, GUPC)
                    If ((ToInteger (GUPC) == One))
                    {
                        \_SB.PCI0.GC6I ()
                    }
                    ElseIf ((ToInteger (GUPC) == 0x02))
                    {
                        \_SB.PCI0.GC6I ()
                    }
                }
                Else
                {
                    SGPC (Zero)
                }

                \_SB.GZFD.HTPL ()
                M239 = Zero
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PG00
        })
        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
        {
            PG00
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PG00
        })
        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
        OperationRegion (RPCX, SystemMemory, \_SB.PCI0.DGBA, 0x1000)
        Field (RPCX, DWordAcc, NoLock, Preserve)
        {
            RVID,   32, 
            CMDR,   8, 
            Offset (0x19), 
            PRBN,   8, 
            Offset (0x54), 
            D0ST,   2, 
            Offset (0x62), 
            CEDR,   1, 
            Offset (0x68), 
            ASPM,   2, 
                ,   2, 
            LNKD,   1, 
            Offset (0x80), 
            Offset (0x81), 
                ,   2, 
            LREN,   1
        }

        Method (GSTA, 0, NotSerialized)
        {
            If ((M009 (PWOK) == Zero))
            {
                Return (Zero)
            }
            Else
            {
                Return (One)
            }
        }
    }

    Scope (\_SB.PCI0.GPP0.PEGP)
    {
        Name (LTRE, Zero)
        Name (DGPS, Zero)
        Name (_PSC, Zero)  // _PSC: Power State Current
        Name (GPRF, Zero)
        Name (OPCE, 0x02)
        Method (_EJ0, 1, NotSerialized)  // _EJx: Eject Device, x=0-9
        {
            SGPC (Zero)
            \_SB.PCI0.LPC0.EC0.WEJF (0x03, One)
            If (\_SB.PCI0.LPC0.EC0.ECAV)
            {
                If ((Acquire (\_SB.PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                {
                    \_SB.PCI0.LPC0.EC0.GATY = Zero
                    Sleep (0x0A)
                    Release (\_SB.PCI0.LPC0.EC0.LFCM)
                }
            }
        }

        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
        }

        OperationRegion (PCIM, SystemMemory, \_SB.PCI0.DGDA, 0x1000)
        Field (PCIM, DWordAcc, NoLock, Preserve)
        {
            NVID,   16, 
            NDID,   16, 
            CMDR,   8, 
            VGAR,   2008, 
            Offset (0x48B), 
                ,   1, 
            HDAE,   1
        }

        OperationRegion (DGPU, SystemMemory, \_SB.PCI0.DGDA, 0x0100)
        Field (DGPU, DWordAcc, NoLock, Preserve)
        {
            Offset (0x10), 
            PCBB,   32, 
            Offset (0x40), 
            SSSV,   32
        }

        OperationRegion (PCIS, PCI_Config, Zero, 0x0100)
        Field (PCIS, AnyAcc, NoLock, Preserve)
        {
            PVID,   16, 
            PDID,   16
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            _PSC = Zero
            If ((DGPS != Zero))
            {
                \_SB.PCI0.GPP0.PG00._ON ()
                DGPS = Zero
            }
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            If ((OPCE == 0x03))
            {
                If ((DGPS == Zero))
                {
                    \_SB.PCI0.GPP0.PG00._OFF ()
                    DGPS = One
                }

                OPCE = 0x02
            }

            _PSC = 0x03
        }

        Method (SGST, 0, Serialized)
        {
            If ((PVID != 0x0FFF))
            {
                Return (0x0F)
            }

            Return (Zero)
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("a486d8f8-0bda-471b-a72b-6042a6b5bee0") /* Unknown UUID */))
            {
                Return (\_SB.PCI0.GPP0.PEGP.NVOP (Arg0, Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("a3132d01-8cda-49ba-a52e-bc9d46df6b81") /* Unknown UUID */))
            {
                If ((\_SB.PCI0.GPP0.PEGP.GPSS != Zero))
                {
                    Return (\_SB.PCI0.GPP0.PEGP.GPS (Arg0, Arg1, Arg2, Arg3))
                }
            }

            If ((Arg0 == ToUUID ("cbeca351-067b-4924-9cbd-b46b00b86f34") /* Unknown UUID */))
            {
                If ((\_SB.PCI0.GPP0.PEGP.GC6S != Zero))
                {
                    Return (\_SB.PCI0.GPP0.PEGP.NVJT (Arg0, Arg1, Arg2, Arg3))
                }
            }

            If ((Arg0 == ToUUID ("d4a50b75-65c7-46f7-bfb7-41514cea0244") /* Unknown UUID */))
            {
                If ((\_SB.PCI0.GPP0.PEGP.NBCS != Zero))
                {
                    Return (\_SB.PCI0.GPP0.PEGP.NBCI (Arg0, Arg1, Arg2, Arg3))
                }
            }

            Return (0x80000001)
        }

        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
        {
            Return (Zero)
        }
    }

    Scope (\_SB.PCI0.GPP0.PEGP)
    {
        Method (NVOP, 4, Serialized)
        {
            If ((Arg2 == Zero))
            {
                Return (Buffer (0x04)
                {
                     0x01, 0x00, 0x00, 0x04                           // ....
                })
            }
            ElseIf ((Arg2 == 0x1A))
            {
                CreateField (Arg3, 0x18, 0x02, OMPR)
                CreateField (Arg3, Zero, One, FLCH)
                CreateField (Arg3, One, One, DVSR)
                CreateField (Arg3, 0x02, One, DVSC)
                If (ToInteger (FLCH))
                {
                    \_SB.PCI0.GPP0.PEGP.OPCE = OMPR /* \_SB_.PCI0.GPP0.PEGP.NVOP.OMPR */
                }

                Local0 = Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    }
                CreateField (Local0, Zero, One, OPEN)
                CreateField (Local0, 0x03, 0x02, CGCS)
                CreateField (Local0, 0x06, One, SHPC)
                CreateField (Local0, 0x08, One, SNSR)
                CreateField (Local0, 0x18, 0x03, DGPC)
                CreateField (Local0, 0x1B, 0x02, OHAC)
                OPEN = One
                SHPC = One
                DGPC = One
                OHAC = 0x03
                If (ToInteger (DVSC))
                {
                    If (ToInteger (DVSR))
                    {
                        \_SB.PCI0.GPP0.PEGP.GPRF = One
                    }
                    Else
                    {
                        \_SB.PCI0.GPP0.PEGP.GPRF = Zero
                    }
                }

                SNSR = \_SB.PCI0.GPP0.PEGP.GPRF
                If ((\_SB.PCI0.GPP0.PEGP.SGST () != Zero))
                {
                    CGCS = 0x03
                }

                Return (Local0)
            }

            Return (0x80000002)
        }
    }

    Scope (\_SB.PCI0.GPP0.PEGP)
    {
        Name (NLIM, One)
        Name (PSLS, Zero)
        Name (GPSP, Buffer (0x28){})
        CreateDWordField (GPSP, Zero, RETN)
        CreateDWordField (GPSP, 0x04, VRV1)
        CreateDWordField (GPSP, 0x08, TGPU)
        CreateDWordField (GPSP, 0x0C, PDTS)
        CreateDWordField (GPSP, 0x10, SFAN)
        CreateDWordField (GPSP, 0x14, SKNT)
        CreateDWordField (GPSP, 0x18, CPUE)
        CreateDWordField (GPSP, 0x1C, TMP1)
        CreateDWordField (GPSP, 0x20, TMP2)
        Method (GPS, 4, Serialized)
        {
            Debug = "------- NV GPS DSM --------"
            If ((Arg1 != 0x0200))
            {
                Return (0x80000002)
            }

            Switch (ToInteger (Arg2))
            {
                Case (Zero)
                {
                    Debug = "   GPS fun 0"
                    Return (Buffer (0x08)
                    {
                         0x01, 0x00, 0x08, 0x00, 0x01, 0x04, 0x00, 0x00   // ........
                    })
                }
                Case (0x13)
                {
                    Debug = "   GPS fun 19"
                    If ((Acquire (\_SB.PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                    {
                        If ((\_SB.PCI0.GPP0.PEGP.PCBB != Zero))
                        {
                            OperationRegion (AMSS, SystemMemory, (\_SB.PCI0.GPP0.PEGP.PCBB + 0x00022408), 0x10)
                            Field (AMSS, DWordAcc, NoLock, Preserve)
                            {
                                    ,   30, 
                                HEVC,   2
                            }

                            If ((\_SB.PCI0.LPC0.EC0.NVHC == One))
                            {
                                If ((HEVC != 0x03))
                                {
                                    HEVC = 0x03
                                }
                            }
                        }

                        Release (\_SB.PCI0.LPC0.EC0.LFCM)
                    }

                    CreateDWordField (Arg3, Zero, TEMP)
                    If ((TEMP == Zero))
                    {
                        Return (0x04)
                    }

                    If ((TEMP && 0x04))
                    {
                        Return (0x04)
                    }
                }
                Case (0x20)
                {
                    Debug = "   GPS fun 32"
                    Name (RET1, Zero)
                    CreateBitField (Arg3, 0x02, SPBI)
                    If (NLIM)
                    {
                        RET1 |= One
                    }

                    If (PSLS)
                    {
                        RET1 |= 0x02
                    }

                    Return (RET1) /* \_SB_.PCI0.GPP0.PEGP.GPS_.RET1 */
                }
                Case (0x2A)
                {
                    Debug = "   GPS fun 42"
                    CreateField (Arg3, Zero, 0x04, PSH0)
                    CreateBitField (Arg3, 0x08, GPUT)
                    VRV1 = 0x00010000
                    Switch (ToInteger (PSH0))
                    {
                        Case (Zero)
                        {
                            Return (GPSP) /* \_SB_.PCI0.GPP0.PEGP.GPSP */
                        }
                        Case (One)
                        {
                            RETN = 0x0100
                            RETN |= ToInteger (PSH0)
                            Return (GPSP) /* \_SB_.PCI0.GPP0.PEGP.GPSP */
                        }
                        Case (0x02)
                        {
                            RETN = 0x0102
                            If ((\_SB.PCI0.LPC0.EC0.CTMD == One))
                            {
                                If ((\_SB.PCI0.LPC0.EC0.CTE0 == One))
                                {
                                    TGPU = 0x57
                                }
                                Else
                                {
                                    TGPU = \_SB.PCI0.LPC0.EC0.GPTH /* External reference */
                                }
                            }
                            Else
                            {
                                TGPU = 0x57
                            }

                            Return (GPSP) /* \_SB_.PCI0.GPP0.PEGP.GPSP */
                        }

                    }
                }
                Default
                {
                    Return (0x80000002)
                }

            }

            Return (0x80000002)
        }
    }

    Scope (\_SB.PCI0)
    {
        Method (RTL2, 0, NotSerialized)
        {
            Debug = "GC6I-Enter-L2"
            M402 (Zero, One, One)
        }

        Method (RTL0, 0, NotSerialized)
        {
            Debug = "GC6O-Resume-L0"
            M403 (Zero, One, One, One)
            Local1 = Zero
            While (((Local1 & 0x28) != 0x20))
            {
                Local1 = M017 (Zero, One, One, 0x6B, Zero, 0x08)
                Stall (0x63)
            }

            M403 (Zero, One, One, Zero)
        }

        Name (TGPC, Buffer (0x04)
        {
             0x00                                             // .
        })
        Name (TDGC, Zero)
        Name (DGCX, Zero)
        Name (L23B, Buffer (0x05){})
        Method (GC6I, 0, Serialized)
        {
            Debug = "   JT GC6I"
            \_SB.PCI0.GPP0.PEGP.LTRE = \_SB.PCI0.GPP0.LREN
            Sleep (0x14)
            ^RTL2 ()
            Sleep (0x14)
            M010 (REST, Zero)
            Sleep (0x14)
        }

        Method (GC6O, 0, Serialized)
        {
            Sleep (0x14)
            M023 (Zero, One, One)
            M010 (REST, One)
            ^RTL0 ()
            Sleep (0x14)
            \_SB.PCI0.GPP0.CMDR |= 0x04
            \_SB.PCI0.GPP0.D0ST = Zero
            While ((\_SB.PCI0.DGPV != 0x10DE))
            {
                Sleep (One)
            }

            While ((\_SB.PCI0.GPP0.LREN != One))
            {
                \_SB.PCI0.GPP0.LREN = One
            }

            \_SB.PCI0.GPP0.CEDR = One
        }
    }

    Scope (\_SB.PCI0.GPP0.PEGP)
    {
        Method (NVJT, 4, Serialized)
        {
            Debug = "------- NV JT DSM --------"
            If ((ToInteger (Arg1) < 0x0100))
            {
                Return (0x80000001)
            }

            Switch (ToInteger (Arg2))
            {
                Case (Zero)
                {
                    Debug = "   JT fun0 JT_FUNC_SUPPORT"
                    Return (Buffer (0x04)
                    {
                         0x1B, 0x00, 0x00, 0x00                           // ....
                    })
                }
                Case (One)
                {
                    Debug = "   JT fun1 JT_FUNC_CAPS"
                    Name (JTCA, Buffer (0x04)
                    {
                         0x00                                             // .
                    })
                    CreateField (JTCA, Zero, One, JTEN)
                    CreateField (JTCA, One, 0x02, SREN)
                    CreateField (JTCA, 0x03, 0x02, PLPR)
                    CreateField (JTCA, 0x05, One, SRPR)
                    CreateField (JTCA, 0x06, 0x02, FBPR)
                    CreateField (JTCA, 0x08, 0x02, GUPR)
                    CreateField (JTCA, 0x0A, One, GC6R)
                    CreateField (JTCA, 0x0B, One, PTRH)
                    CreateField (JTCA, 0x0D, One, MHYB)
                    CreateField (JTCA, 0x0E, One, RPCL)
                    CreateField (JTCA, 0x0F, 0x02, GC6V)
                    CreateField (JTCA, 0x11, One, GEIS)
                    CreateField (JTCA, 0x12, One, GSWS)
                    CreateField (JTCA, 0x14, 0x0C, JTRV)
                    JTEN = One
                    GC6R = Zero
                    RPCL = One
                    SREN = One
                    FBPR = Zero
                    MHYB = One
                    GC6V = 0x02
                    JTRV = 0x0200
                    Return (JTCA) /* \_SB_.PCI0.GPP0.PEGP.NVJT.JTCA */
                }
                Case (0x02)
                {
                    Debug = "   JT fun2 JT_FUNC_POLICYSELECT"
                    Return (0x80000002)
                }
                Case (0x03)
                {
                    Debug = "   JT fun3 JT_FUNC_POWERCONTROL"
                    CreateField (Arg3, Zero, 0x03, GPPC)
                    CreateField (Arg3, 0x04, One, PLPC)
                    CreateField (Arg3, 0x07, One, ECOC)
                    CreateField (Arg3, 0x0E, 0x02, DFGC)
                    CreateField (Arg3, 0x10, 0x03, GPCX)
                    \_SB.PCI0.TGPC = Arg3
                    If (((ToInteger (GPPC) != Zero) || (ToInteger (DFGC
                        ) != Zero)))
                    {
                        \_SB.PCI0.TDGC = ToInteger (DFGC)
                        \_SB.PCI0.DGCX = ToInteger (GPCX)
                    }

                    Name (JTPC, Buffer (0x04)
                    {
                         0x00                                             // .
                    })
                    CreateField (JTPC, Zero, 0x03, GUPS)
                    CreateField (JTPC, 0x03, One, GPWO)
                    CreateField (JTPC, 0x07, One, PLST)
                    If ((ToInteger (DFGC) != Zero))
                    {
                        GPWO = One
                        GUPS = One
                        Return (JTPC) /* \_SB_.PCI0.GPP0.PEGP.NVJT.JTPC */
                    }

                    Debug = "   JT fun3 GPPC="
                    Debug = ToInteger (GPPC)
                    If ((ToInteger (GPPC) == One))
                    {
                        \_SB.PCI0.GC6I ()
                        PLST = One
                        GUPS = Zero
                    }
                    ElseIf ((ToInteger (GPPC) == 0x02))
                    {
                        \_SB.PCI0.GC6I ()
                        If ((ToInteger (PLPC) == Zero))
                        {
                            PLST = Zero
                        }

                        GUPS = Zero
                    }
                    ElseIf ((ToInteger (GPPC) == 0x03))
                    {
                        \_SB.PCI0.GC6O ()
                        If ((ToInteger (PLPC) != Zero))
                        {
                            PLST = Zero
                        }

                        GPWO = One
                        GUPS = One
                    }
                    ElseIf ((ToInteger (GPPC) == 0x04))
                    {
                        \_SB.PCI0.GC6O ()
                        If ((ToInteger (PLPC) != Zero))
                        {
                            PLST = Zero
                        }

                        GPWO = One
                        GUPS = One
                    }
                    ElseIf ((M009 (PWGD) == One))
                    {
                        Debug = "   JT GETS() return 0x1"
                        GPWO = One
                        GUPS = One
                    }
                    Else
                    {
                        Debug = "   JT GETS() return 0x3"
                        GPWO = Zero
                        GUPS = 0x03
                    }

                    Return (JTPC) /* \_SB_.PCI0.GPP0.PEGP.NVJT.JTPC */
                }
                Case (0x04)
                {
                    Debug = "   JT fun4 JT_FUNC_PLATPOLICY"
                    CreateField (Arg3, 0x02, One, PAUD)
                    CreateField (Arg3, 0x03, One, PADM)
                    CreateField (Arg3, 0x04, 0x04, PDGS)
                    Local0 = Zero
                    Local0 = (\_SB.PCI0.GPP0.PEGP.HDAE << 0x02)
                    Return (Local0)
                }
                Case (0x05)
                {
                    Local0 = Zero
                    Local0 |= 0x00100010
                    Return (Local0)
                }
                Case (0x06)
                {
                    Name (TMP6, Package (0x0F)
                    {
                        Ones, 
                        0x2C, 
                        Ones, 
                        0x2C, 
                        Ones, 
                        0x2C, 
                        Ones, 
                        Ones, 
                        0x2C, 
                        Ones, 
                        Ones, 
                        0x2C, 
                        Ones, 
                        Ones, 
                        0x2C
                    })
                    Return (TMP6) /* \_SB_.PCI0.GPP0.PEGP.NVJT.TMP6 */
                }

            }

            Return (0x80000002)
        }
    }

    Scope (\_SB)
    {
        Device (NPCF)
        {
            Name (ACBT, 0x50)
            Name (DCBT, Zero)
            Name (DBAC, Zero)
            Name (DBDC, Zero)
            Name (AMAT, 0x78)
            Name (AMIT, 0xFF88)
            Name (ATPP, 0x0168)
            Name (DTPP, Zero)
            Name (TPPL, 0x0001ADB0)
            Name (DROS, Zero)
            Name (HPCT, Zero)
            Name (CDIS, Zero)
            Name (CUSL, Zero)
            Name (CUCT, Zero)
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                CDIS = Zero
                Return ("NVDA0820")
            }

            Name (_UID, "NPCF")  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((CDIS == One))
                {
                    Return (0x0D)
                }

                Return (0x0F)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                CDIS = One
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("36b49710-2483-11e7-9598-0800200c9a66") /* Unknown UUID */))
                {
                    If ((\_SB.PCI0.GPP0.PEGP.NPCS != Zero))
                    {
                        Return (NPCF (Arg0, Arg1, Arg2, Arg3))
                    }
                }
            }

            Method (NPCF, 4, Serialized)
            {
                Debug = "------- NVPCF DSM --------"
                If ((ToInteger (Arg1) != 0x0200))
                {
                    Return (0x80000001)
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Debug = "   NVPCF sub-func#0"
                        Return (Buffer (0x04)
                        {
                             0x07, 0x07, 0x00, 0x00                           // ....
                        })
                    }
                    Case (One)
                    {
                        Debug = "   NVPCF sub-func#1"
                        Return (Buffer (0x0E)
                        {
                            /* 0000 */  0x20, 0x03, 0x01, 0x01, 0x23, 0x04, 0x05, 0x01,  //  ...#...
                            /* 0008 */  0x01, 0x01, 0x00, 0x00, 0x00, 0xAC               // ......
                        })
                    }
                    Case (0x02)
                    {
                        Debug = "   NVPCF sub-func#2"
                        Name (PBD2, Buffer (0x31)
                        {
                             0x00                                             // .
                        })
                        CreateByteField (PBD2, Zero, PTV2)
                        CreateByteField (PBD2, One, PHB2)
                        CreateByteField (PBD2, 0x02, GSB2)
                        CreateByteField (PBD2, 0x03, CTB2)
                        CreateByteField (PBD2, 0x04, NCE2)
                        PTV2 = 0x23
                        PHB2 = 0x05
                        GSB2 = 0x10
                        CTB2 = 0x1C
                        NCE2 = One
                        CreateWordField (PBD2, 0x05, TGPA)
                        CreateWordField (PBD2, 0x07, TGPD)
                        CreateByteField (PBD2, 0x15, PC01)
                        CreateByteField (PBD2, 0x16, PC02)
                        CreateWordField (PBD2, 0x19, TPPA)
                        CreateWordField (PBD2, 0x1B, TPPD)
                        CreateWordField (PBD2, 0x1D, MAGA)
                        CreateWordField (PBD2, 0x1F, MAGD)
                        CreateWordField (PBD2, 0x21, MIGA)
                        CreateWordField (PBD2, 0x23, MIGD)
                        CreateDWordField (PBD2, 0x25, DROP)
                        CreateDWordField (PBD2, 0x29, PA5O)
                        CreateDWordField (PBD2, 0x2D, PA6O)
                        CreateField (Arg3, 0x28, 0x02, NIGS)
                        CreateByteField (Arg3, 0x15, IORC)
                        CreateField (Arg3, 0xB0, One, PWCS)
                        CreateField (Arg3, 0xB1, One, PWTS)
                        CreateField (Arg3, 0xB2, One, CGPS)
                        If ((ToInteger (NIGS) == Zero))
                        {
                            DBAC = Zero
                            ACBT = Zero
                            AMIT = Zero
                            AMIT = Zero
                            DROS = 0x88B8
                            Local0 = \_SB.PCI0.LPC0.EC0.PDAB /* External reference */
                            If (((Local0 > Zero) && (Local0 < 0x06)))
                            {
                                Switch (Local0)
                                {
                                    Case (One)
                                    {
                                        DBAC = One
                                        ACBT = Zero
                                        ATPP = Zero
                                        AMAT = Zero
                                        AMIT = Zero
                                    }
                                    Case (0x02)
                                    {
                                        DBAC = Zero
                                        ACBT = Zero
                                        ATPP = 0xA0
                                        AMAT = 0x50
                                        AMIT = 0xFF88
                                    }
                                    Case (0x03)
                                    {
                                        DBAC = Zero
                                        ACBT = Zero
                                        ATPP = 0x01B8
                                        AMAT = 0x50
                                        AMIT = Zero
                                    }
                                    Case (0x04)
                                    {
                                        DBAC = Zero
                                        ACBT = Zero
                                        ATPP = 0x78
                                        AMAT = 0x28
                                        AMIT = 0xFF88
                                    }
                                    Case (0x05)
                                    {
                                        DBAC = Zero
                                        ACBT = Zero
                                        ATPP = 0x01B8
                                        AMAT = 0xC8
                                        AMIT = Zero
                                    }

                                }
                            }
                            ElseIf ((Acquire (\_SB.PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                            {
                                Switch (\_SB.PCI0.LPC0.EC0.SPMO)
                                {
                                    Case (Zero)
                                    {
                                        If ((GTYP == One))
                                        {
                                            ACBT = Zero
                                            ATPP = 0x0168
                                            AMAT = 0x50
                                        }
                                        Else
                                        {
                                            ACBT = Zero
                                            ATPP = 0x0190
                                            AMAT = 0x78
                                        }
                                    }
                                    Case (One)
                                    {
                                        If (((PRFT == One) && (EPSW == One)))
                                        {
                                            If ((GTYP == One))
                                            {
                                                DBAC = One
                                                ACBT = 0x0118
                                                ATPP = 0x0168
                                                AMAT = Zero
                                            }
                                            Else
                                            {
                                                ACBT = 0x0168
                                                ATPP = 0x0168
                                                AMAT = 0x28
                                            }
                                        }
                                        ElseIf ((BDPF == One))
                                        {
                                            If ((GTYP == One))
                                            {
                                                ACBT = 0xC8
                                                ATPP = 0x0118
                                                AMAT = 0x28
                                            }
                                            Else
                                            {
                                                ACBT = 0xF0
                                                ATPP = 0x0118
                                                AMAT = 0x28
                                            }
                                        }
                                        ElseIf ((GTYP == One))
                                        {
                                            ACBT = 0xC8
                                            ATPP = 0x0168
                                            AMAT = 0x50
                                        }
                                        Else
                                        {
                                            ACBT = 0xF0
                                            ATPP = 0x0168
                                            AMAT = 0x78
                                        }
                                    }
                                    Case (0x02)
                                    {
                                        If ((GTYP == One))
                                        {
                                            ACBT = Zero
                                            ATPP = 0x78
                                            AMAT = 0x28
                                            AMIT = 0xFF88
                                        }
                                        Else
                                        {
                                            ACBT = Zero
                                            ATPP = 0xA0
                                            AMAT = 0x50
                                            AMIT = 0xFF88
                                        }

                                        DROS = 0xFDE8
                                    }

                                }

                                If (((\_SB.PCI0.LPC0.EC0.SPMO == Zero) && (BCTP == One)))
                                {
                                    DBAC = Zero
                                    AMAT = Zero
                                    AMIT = Zero
                                    If ((INSM == One))
                                    {
                                        If ((GTYP == One))
                                        {
                                            ACBT = 0xC8
                                            ATPP = 0x0168
                                            AMAT = 0x50
                                        }
                                        ElseIf ((GTYP == 0x04))
                                        {
                                            ACBT = 0x0118
                                            ATPP = 0x0168
                                            AMAT = 0x78
                                        }
                                        Else
                                        {
                                            ACBT = 0xF0
                                            ATPP = 0x0168
                                            AMAT = 0x78
                                        }
                                    }

                                    If ((INSM == 0x02))
                                    {
                                        If ((GTYP == One))
                                        {
                                            ACBT = 0xA0
                                            ATPP = 0x0190
                                            AMAT = 0x78
                                        }
                                        ElseIf ((GTYP == 0x04))
                                        {
                                            ACBT = 0xC8
                                            ATPP = 0x01B8
                                            AMAT = 0xC8
                                        }
                                        Else
                                        {
                                            ACBT = 0xA0
                                            ATPP = 0x01B8
                                            AMAT = 0xC8
                                        }
                                    }

                                    If ((INSM == 0x03))
                                    {
                                        If ((GTYP == One))
                                        {
                                            DBAC = One
                                            ACBT = 0xF0
                                            ATPP = 0x0140
                                            AMAT = Zero
                                        }
                                        ElseIf ((GTYP == 0x04))
                                        {
                                            ACBT = 0x78
                                            ATPP = 0x0208
                                            AMAT = 0xC8
                                        }
                                        Else
                                        {
                                            ACBT = 0x0118
                                            ATPP = 0x0140
                                            AMAT = 0x50
                                        }
                                    }

                                    If ((INSM == 0x04))
                                    {
                                        DBAC = One
                                        If ((GTYP == One))
                                        {
                                            ACBT = 0xA0
                                            ATPP = 0x0190
                                            AMAT = Zero
                                        }
                                        ElseIf ((GTYP == 0x04))
                                        {
                                            ACBT = 0xA0
                                            ATPP = 0x0190
                                            AMAT = Zero
                                        }
                                        Else
                                        {
                                            ACBT = 0xC8
                                            ATPP = 0x0190
                                            AMAT = Zero
                                        }
                                    }

                                    If ((INSM == 0x05))
                                    {
                                        If ((GTYP == One))
                                        {
                                            DBAC = One
                                            ACBT = 0x0118
                                            ATPP = 0x0118
                                            AMAT = Zero
                                        }
                                        ElseIf ((GTYP == 0x04))
                                        {
                                            ACBT = 0x0168
                                            ATPP = 0x0118
                                            AMAT = 0x28
                                        }
                                        Else
                                        {
                                            ACBT = 0x0140
                                            ATPP = 0x0118
                                            AMAT = 0x28
                                        }
                                    }
                                }

                                If ((\_SB.PCI0.LPC0.EC0.CTMD == One))
                                {
                                    DBAC = Zero
                                    If ((\_SB.PCI0.LPC0.EC0.CTE0 == One))
                                    {
                                        If ((EPSW == One))
                                        {
                                            If ((GTYP == One))
                                            {
                                                DBAC = One
                                                ACBT = 0x0118
                                                ATPP = 0x0168
                                                AMAT = Zero
                                            }
                                            Else
                                            {
                                                ACBT = 0x0168
                                                ATPP = 0x0168
                                                AMAT = 0x28
                                            }
                                        }
                                        ElseIf ((GTYP == One))
                                        {
                                            ACBT = 0xC8
                                            ATPP = 0x0168
                                            AMAT = 0x50
                                        }
                                        Else
                                        {
                                            ACBT = 0xF0
                                            ATPP = 0x0168
                                            AMAT = 0x78
                                        }
                                    }
                                    Else
                                    {
                                        If ((GTYP == One))
                                        {
                                            Local3 = (\_SB.PCI0.LPC0.EC0.TGPP - 0x3C)
                                        }
                                        Else
                                        {
                                            Local3 = (\_SB.PCI0.LPC0.EC0.TGPP - 0x37)
                                        }

                                        Local0 = (Local3 * 0x08)
                                        ACBT = Local0
                                        Local1 = (\_SB.PCI0.LPC0.EC0.GATP * 0x08)
                                        ATPP = Local1
                                        Local2 = (\_SB.PCI0.LPC0.EC0.GPAB * 0x08)
                                        AMAT = Local2
                                        Local4 = (\_SB.PCI0.LPC0.EC0.SGCB * 0x08)
                                        Local4 -= One
                                        Local4 = ~Local4
                                        AMIT = Local4
                                    }
                                }

                                Release (\_SB.PCI0.LPC0.EC0.LFCM)
                            }

                            TGPA = ACBT /* \_SB_.NPCF.ACBT */
                            TGPD = DCBT /* \_SB_.NPCF.DCBT */
                            PC01 = Zero
                            PC02 = (DBAC | (DBDC << One))
                            TPPA = ATPP /* \_SB_.NPCF.ATPP */
                            TPPD = DTPP /* \_SB_.NPCF.DTPP */
                            MAGA = AMAT /* \_SB_.NPCF.AMAT */
                            MIGA = AMIT /* \_SB_.NPCF.AMIT */
                            DROP = DROS /* \_SB_.NPCF.DROS */
                        }

                        If ((ToInteger (NIGS) == One))
                        {
                            If ((ToInteger (PWCS) == One)){}
                            Else
                            {
                            }

                            If ((ToInteger (PWTS) == One)){}
                            Else
                            {
                            }

                            If ((ToInteger (CGPS) == One)){}
                            Else
                            {
                            }

                            TGPA = Zero
                            TGPD = Zero
                            PC01 = Zero
                            PC02 = Zero
                            TPPA = Zero
                            TPPD = Zero
                            MAGA = Zero
                            MIGA = Zero
                            MAGD = Zero
                            MIGD = Zero
                        }

                        Return (PBD2) /* \_SB_.NPCF.NPCF.PBD2 */
                    }
                    Case (0x03)
                    {
                        Debug = "   NVPCF sub-func#3"
                        Return (Buffer (0x3D)
                        {
                            /* 0000 */  0x11, 0x04, 0x13, 0x03, 0x00, 0xFF, 0x00, 0x28,  // .......(
                            /* 0008 */  0x2D, 0x2D, 0x33, 0x33, 0x39, 0x39, 0x3F, 0x3F,  // --3399??
                            /* 0010 */  0x45, 0x42, 0x4B, 0x46, 0x50, 0xFF, 0xFF, 0x05,  // EBKFP...
                            /* 0018 */  0xFF, 0x00, 0x3C, 0x41, 0x41, 0x46, 0x46, 0x4B,  // ..<AAFFK
                            /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                            /* 0028 */  0xFF, 0xFF, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                            /* 0030 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                            /* 0038 */  0x00, 0x30, 0x34, 0x34, 0x3A                     // .044:
                        })
                    }
                    Case (0x04)
                    {
                        Debug = "   NVPCF sub-func#4"
                        Return (Buffer (0x32)
                        {
                            /* 0000 */  0x11, 0x04, 0x2E, 0x01, 0x05, 0x00, 0x01, 0x02,  // ........
                            /* 0008 */  0x03, 0x04, 0x03, 0x01, 0x02, 0x03, 0x00, 0x02,  // ........
                            /* 0010 */  0x03, 0x04, 0x00, 0x02, 0x03, 0x04, 0x00, 0x02,  // ........
                            /* 0018 */  0x03, 0x04, 0x00, 0x02, 0x03, 0x04, 0x00, 0x02,  // ........
                            /* 0020 */  0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x02, 0x02,  // ........
                            /* 0028 */  0x03, 0x04, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04,  // ........
                            /* 0030 */  0x04, 0x04                                       // ..
                        })
                    }
                    Case (0x05)
                    {
                        Debug = "   NVPCF sub-func#5"
                        Name (PBD5, Buffer (0x28)
                        {
                             0x00                                             // .
                        })
                        CreateByteField (PBD5, Zero, PTV5)
                        CreateByteField (PBD5, One, PHB5)
                        CreateByteField (PBD5, 0x02, TEB5)
                        CreateByteField (PBD5, 0x03, NTE5)
                        PTV5 = 0x11
                        PHB5 = 0x04
                        TEB5 = 0x24
                        NTE5 = One
                        CreateDWordField (PBD5, 0x04, F5O0)
                        CreateDWordField (PBD5, 0x08, F5O1)
                        CreateDWordField (PBD5, 0x0C, F5O2)
                        CreateDWordField (PBD5, 0x10, F5O3)
                        CreateDWordField (PBD5, 0x14, F5O4)
                        CreateDWordField (PBD5, 0x18, F5O5)
                        CreateDWordField (PBD5, 0x1C, F5O6)
                        CreateDWordField (PBD5, 0x20, F5O7)
                        CreateDWordField (PBD5, 0x24, F5O8)
                        CreateField (Arg3, 0x20, 0x03, INC5)
                        CreateDWordField (Arg3, 0x08, F5P1)
                        CreateDWordField (Arg3, 0x0C, F5P2)
                        Switch (ToInteger (INC5))
                        {
                            Case (Zero)
                            {
                                F5O0 = One
                                F5O1 = Zero
                                F5O2 = Zero
                                F5O3 = Zero
                            }
                            Case (One)
                            {
                                F5O0 = Zero
                                F5O1 = Zero
                                F5O2 = Zero
                                F5O3 = Zero
                            }
                            Case (0x02)
                            {
                                F5O0 = Zero
                                F5O1 = Zero
                                F5O2 = Zero
                                F5O3 = Zero
                                F5O4 = Zero
                                F5O5 = Zero
                                F5O6 = Zero
                                F5O7 = Zero
                                F5O8 = Zero
                            }
                            Case (0x03)
                            {
                                CUSL = (F5P1 & 0xFF)
                            }
                            Case (0x04)
                            {
                                CUCT = F5P2 /* \_SB_.NPCF.NPCF.F5P2 */
                            }
                            Default
                            {
                                Return (0x80000002)
                            }

                        }

                        Return (PBD5) /* \_SB_.NPCF.NPCF.PBD5 */
                    }
                    Case (0x06)
                    {
                        Debug = "   NVPCF sub-func#6"
                        Return (0x80000002)
                    }
                    Case (0x07)
                    {
                        Debug = "   NVPCF sub-func#7"
                        CreateDWordField (Arg3, 0x05, AMAX)
                        CreateDWordField (Arg3, 0x09, ARAT)
                        CreateDWordField (Arg3, 0x0D, DMAX)
                        CreateDWordField (Arg3, 0x11, DRAT)
                        CreateDWordField (Arg3, 0x15, TGPM)
                        Return (Zero)
                    }
                    Case (0x08)
                    {
                        Debug = "   NVPCF sub-func#8"
                        Return (Buffer (0x59)
                        {
                            /* 0000 */  0x10, 0x04, 0x11, 0x05, 0x64, 0x08, 0x20, 0x00,  // ....d. .
                            /* 0008 */  0x00, 0xB8, 0x88, 0x00, 0x00, 0xB8, 0x88, 0x00,  // ........
                            /* 0010 */  0x00, 0xC8, 0xAF, 0x00, 0x00, 0x46, 0xFC, 0x21,  // .....F.!
                            /* 0018 */  0x00, 0x00, 0xB8, 0x88, 0x00, 0x00, 0xB8, 0x88,  // ........
                            /* 0020 */  0x00, 0x00, 0xC8, 0xAF, 0x00, 0x00, 0x32, 0x8C,  // ......2.
                            /* 0028 */  0x23, 0x00, 0x00, 0xB8, 0x88, 0x00, 0x00, 0xB8,  // #.......
                            /* 0030 */  0x88, 0x00, 0x00, 0xC8, 0xAF, 0x00, 0x00, 0x1E,  // ........
                            /* 0038 */  0xB8, 0x24, 0x00, 0x00, 0xB8, 0x88, 0x00, 0x00,  // .$......
                            /* 0040 */  0xB8, 0x88, 0x00, 0x00, 0xC8, 0xAF, 0x00, 0x00,  // ........
                            /* 0048 */  0x0A, 0xA4, 0x1F, 0x00, 0x00, 0xB8, 0x88, 0x00,  // ........
                            /* 0050 */  0x00, 0xB8, 0x88, 0x00, 0x00, 0xC8, 0xAF, 0x00,  // ........
                            /* 0058 */  0x00                                             // .
                        })
                    }
                    Case (0x09)
                    {
                        Debug = "   NVPCF sub-func#9"
                        CreateDWordField (Arg3, 0x03, CPTD)
                        \_SB.PCI0.LPC0.FNQT (0x02, CPTD)
                        Return (Zero)
                    }
                    Case (0x0A)
                    {
                        Debug = "   NVPCF sub-func#10"
                        Name (PBDA, Buffer (0x08)
                        {
                             0x00                                             // .
                        })
                        CreateByteField (PBDA, Zero, DTTV)
                        CreateByteField (PBDA, One, DTSH)
                        CreateByteField (PBDA, 0x02, DTSE)
                        CreateByteField (PBDA, 0x03, DTTE)
                        CreateDWordField (PBDA, 0x04, DTTL)
                        DTTV = 0x10
                        DTSH = 0x04
                        DTSE = 0x04
                        DTTE = One
                        DTTL = TPPL /* \_SB_.NPCF.TPPL */
                        Return (PBDA) /* \_SB_.NPCF.NPCF.PBDA */
                    }

                }

                Return (0x80000002)
            }
        }
    }
}



SSDT10
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (OBID, PkgObj)
    External (OBIE, PkgObj)
    External (OBIT, PkgObj)

    Name (OBID, Package (0xC1)
    {
        0x40, 
        0x00040001, 
        0x00040002, 
        0x00020027, 
        0x00020025, 
        0x00020036, 
        0x00020037, 
        0x00020031, 
        0x00020032, 
        0x00020001, 
        0x00020008, 
        0x00020014, 
        0x00020002, 
        0x00020003, 
        0x00020004, 
        0x00020006, 
        0x00020005, 
        0x00020009, 
        0x0002000F, 
        0x0002000E, 
        0x0002000D, 
        0x00020012, 
        0x00020011, 
        0x00020010, 
        0x00020017, 
        0x0002001B, 
        0x00020015, 
        0x00020013, 
        0x00020016, 
        0x00020019, 
        0x00020018, 
        0x0002001A, 
        0x0002001C, 
        0x0002001D, 
        0x0002001F, 
        0x0002001E, 
        0x0002003A, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        One, 
        Zero, 
        One, 
        One, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        "Command Buffer Start", 
        "Command Buffer End", 
        "Software Downcore Config", 
        "Set PowerDwonEn", 
        "Set CCLK Fmax", 
        "Set GFXCCLK Fmax", 
        "Set Interleave Mode", 
        "Set Interleave Size", 
        "Set Mem Clock", 
        "Set Trcpage", 
        "Set Tcwl", 
        "Set Tcl", 
        "Set Trcdrd", 
        "Set Trcdwr", 
        "Set Trp", 
        "Set Tras", 
        "Set Trc", 
        "Set TrrdL", 
        "Set TrrdS", 
        "Set Tfaw", 
        "Set TwtrL", 
        "Set TwtrS", 
        "Set Twr", 
        "Set TrdrdScL", 
        "Set TwrwrScL", 
        "Set Trtp", 
        "Set Tcke", 
        "Set TrdrdSc", 
        "Set TrdrdDd", 
        "Set TrdrdSd", 
        "Set TwrwrSc", 
        "Set TwrwrSd", 
        "Set TwrwrDd", 
        "Set Twrrd", 
        "Set Trdwr", 
        "Set ECO Mode", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        ""
    })
    Name (OBIE, Package (0xC1)
    {
        0x40, 
        0x00010003, 
        0x00010004, 
        0x00010005, 
        0x00010006, 
        0x00010007, 
        0x00010008, 
        0x0005000A, 
        0x00050010, 
        0x00050001, 
        0x00050002, 
        0x00050003, 
        0x0005000C, 
        0x0005000D, 
        0x00050004, 
        0x00020043, 
        0x0002003C, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        One, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        Zero, 
        "Get OC Disable", 
        "Get OC Voltage Max", 
        "Get OC Frequency Max", 
        "Get GFX OC Voltage Max", 
        "Get GFX OC Frequency Max", 
        "Get Interlevaing Cap", 
        "Set Curve Optimizer", 
        "Set GFX Curve Optimizer", 
        "Set PPT Limit", 
        "Set TDC Limit", 
        "Set EDC Limit", 
        "Set Soc TDC Limit", 
        "Set Soc EDC Limit", 
        "Set Scalar", 
        "Set LCLK Freq", 
        "Set Trfc1", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        "", 
        ""
    })
    Name (OBIT, Package (0x33)
    {
        0x32, 
        Package (0x04)
        {
            0x0002003A, 
            Zero, 
            0x33, 
            Buffer (0x019C)
            {
                /* 0000 */  0x3A, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // :.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001E, 
            One, 
            0x32, 
            Buffer (0x14)
            {
                /* 0000 */  0x1E, 0x00, 0x02, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001F, 
            One, 
            0x31, 
            Buffer (0x14)
            {
                /* 0000 */  0x1F, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001D, 
            One, 
            0x30, 
            Buffer (0x14)
            {
                /* 0000 */  0x1D, 0x00, 0x02, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001C, 
            One, 
            0x2F, 
            Buffer (0x14)
            {
                /* 0000 */  0x1C, 0x00, 0x02, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001A, 
            One, 
            0x2E, 
            Buffer (0x14)
            {
                /* 0000 */  0x1A, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020018, 
            One, 
            0x2D, 
            Buffer (0x14)
            {
                /* 0000 */  0x18, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020019, 
            One, 
            0x2C, 
            Buffer (0x14)
            {
                /* 0000 */  0x19, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020016, 
            One, 
            0x2B, 
            Buffer (0x14)
            {
                /* 0000 */  0x16, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020013, 
            One, 
            0x2A, 
            Buffer (0x14)
            {
                /* 0000 */  0x13, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020015, 
            One, 
            0x29, 
            Buffer (0x14)
            {
                /* 0000 */  0x15, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002001B, 
            One, 
            0x28, 
            Buffer (0x14)
            {
                /* 0000 */  0x1B, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020017, 
            One, 
            0x27, 
            Buffer (0x14)
            {
                /* 0000 */  0x17, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020010, 
            One, 
            0x26, 
            Buffer (0x14)
            {
                /* 0000 */  0x10, 0x00, 0x02, 0x00, 0x1C, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020011, 
            One, 
            0x25, 
            Buffer (0x14)
            {
                /* 0000 */  0x11, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020012, 
            One, 
            0x24, 
            Buffer (0x14)
            {
                /* 0000 */  0x12, 0x00, 0x02, 0x00, 0x0A, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000D, 
            One, 
            0x23, 
            Buffer (0x14)
            {
                /* 0000 */  0x0D, 0x00, 0x02, 0x00, 0x0C, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000E, 
            One, 
            0x22, 
            Buffer (0x14)
            {
                /* 0000 */  0x0E, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002000F, 
            One, 
            0x21, 
            Buffer (0x14)
            {
                /* 0000 */  0x0F, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020009, 
            One, 
            0x20, 
            Buffer (0x14)
            {
                /* 0000 */  0x09, 0x00, 0x02, 0x00, 0x33, 0x00, 0x00, 0x00,  // ....3...
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020005, 
            One, 
            0x1F, 
            Buffer (0x14)
            {
                /* 0000 */  0x05, 0x00, 0x02, 0x00, 0x22, 0x00, 0x00, 0x00,  // ...."...
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0002003C, 
            One, 
            0x1E, 
            Buffer (0x14)
            {
                /* 0000 */  0x3C, 0x00, 0x02, 0x00, 0xE0, 0x00, 0x00, 0x00,  // <.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020006, 
            One, 
            0x1D, 
            Buffer (0x14)
            {
                /* 0000 */  0x06, 0x00, 0x02, 0x00, 0x11, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020004, 
            One, 
            0x1C, 
            Buffer (0x14)
            {
                /* 0000 */  0x04, 0x00, 0x02, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020003, 
            One, 
            0x1B, 
            Buffer (0x14)
            {
                /* 0000 */  0x03, 0x00, 0x02, 0x00, 0x0F, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020002, 
            One, 
            0x1A, 
            Buffer (0x14)
            {
                /* 0000 */  0x02, 0x00, 0x02, 0x00, 0x11, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020014, 
            One, 
            0x19, 
            Buffer (0x14)
            {
                /* 0000 */  0x14, 0x00, 0x02, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020008, 
            One, 
            0x18, 
            Buffer (0x14)
            {
                /* 0000 */  0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020001, 
            One, 
            0x17, 
            Buffer (0x14)
            {
                /* 0000 */  0x01, 0x00, 0x02, 0x00, 0x80, 0x0C, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020043, 
            One, 
            0x16, 
            Buffer (0x14)
            {
                /* 0000 */  0x43, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // C.......
                /* 0008 */  0x96, 0x00, 0x00, 0x00, 0xC4, 0x09, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020032, 
            One, 
            0x15, 
            Buffer (0x14)
            {
                /* 0000 */  0x32, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 2.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020031, 
            Zero, 
            0x14, 
            Buffer (0x019C)
            {
                /* 0000 */  0x31, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 1.......
                /* 0008 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            }
        }, 

        Package (0x04)
        {
            0x00020037, 
            One, 
            0x13, 
            Buffer (0x14)
            {
                /* 0000 */  0x37, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 7.......
                /* 0008 */  0x8C, 0x0A, 0x00, 0x00, 0x54, 0x0B, 0x00, 0x00,  // ....T...
                /* 0010 */  0x19, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020036, 
            One, 
            0x12, 
            Buffer (0x14)
            {
                /* 0000 */  0x36, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // 6.......
                /* 0008 */  0x1D, 0x10, 0x00, 0x00, 0xCD, 0x14, 0x00, 0x00,  // ........
                /* 0010 */  0x19, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050004, 
            One, 
            0x11, 
            Buffer (0x14)
            {
                /* 0000 */  0x04, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x64, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00,  // d.......
                /* 0010 */  0x64, 0x00, 0x00, 0x00                           // d...
            }
        }, 

        Package (0x04)
        {
            0x0005000D, 
            One, 
            0x10, 
            Buffer (0x14)
            {
                /* 0000 */  0x0D, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x30, 0x75, 0x00, 0x00,  // ....0u..
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0005000C, 
            One, 
            0x0F, 
            Buffer (0x14)
            {
                /* 0000 */  0x0C, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x20, 0x4E, 0x00, 0x00,  // .... N..
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050003, 
            One, 
            0x0E, 
            Buffer (0x14)
            {
                /* 0000 */  0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x78, 0x5D, 0x02, 0x00,  // ....x]..
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050002, 
            One, 
            0x0D, 
            Buffer (0x14)
            {
                /* 0000 */  0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0x86, 0x01, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050001, 
            One, 
            0x0C, 
            Buffer (0x14)
            {
                /* 0000 */  0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x48, 0xE8, 0x01, 0x00,  // ....H...
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020025, 
            Zero, 
            0x0B, 
            Buffer (0x019C)
            {
                /* 0000 */  0x25, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // %.......
                /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00050010, 
            One, 
            0x0A, 
            Buffer (0x14)
            {
                /* 0000 */  0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x0005000A, 
            One, 
            0x09, 
            Buffer (0x14)
            {
                /* 0000 */  0x0A, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00020027, 
            One, 
            0x08, 
            Buffer (0x14)
            {
                /* 0000 */  0x27, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // '.......
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010008, 
            One, 
            0x07, 
            Buffer (0x14)
            {
                /* 0000 */  0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010007, 
            One, 
            0x06, 
            Buffer (0x14)
            {
                /* 0000 */  0x07, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010006, 
            One, 
            0x05, 
            Buffer (0x14)
            {
                /* 0000 */  0x06, 0x00, 0x01, 0x00, 0xF0, 0x0A, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010005, 
            One, 
            0x04, 
            Buffer (0x14)
            {
                /* 0000 */  0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010004, 
            One, 
            0x03, 
            Buffer (0x14)
            {
                /* 0000 */  0x04, 0x00, 0x01, 0x00, 0xF0, 0x0A, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }, 

        Package (0x04)
        {
            0x00010003, 
            One, 
            0x02, 
            Buffer (0x14)
            {
                /* 0000 */  0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0x01, 0x00, 0x00, 0x00                           // ....
            }
        }
    })
    Scope (\)
    {
        Name (GF01, Zero)
        Name (ASMI, 0x00B0)
        Name (DSMI, 0x9D)
        Name (AODV, 0x06)
        OperationRegion (AODE, SystemMemory, 0xBAEB4018, 0x24AC)
        Field (AODE, AnyAcc, NoLock, Preserve)
        {
            OUTB,   1600, 
            SCMI,   32, 
            SCMD,   32, 
            DSPD,   68128, 
            RESV,   96, 
            RMPD,   1120, 
            WCNS,   4096
        }

        Device (AOD)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AOD")  // _UID: Unique ID
            Method (AM01, 0, NotSerialized)
            {
                Return (\AODV)
            }

            Method (AM02, 0, NotSerialized)
            {
                If ((GF01 == Zero))
                {
                    GF01 = One
                }

                Return (Zero)
            }

            Method (AM03, 0, NotSerialized)
            {
                Return (\OBID) /* External reference */
            }

            Method (AM04, 1, NotSerialized)
            {
                Name (LODT, Buffer (0x019C)
                {
                     0x00                                             // .
                })
                Name (TEMP, Buffer (0x0200)
                {
                     0x00                                             // .
                })
                Local0 = Arg0
                Local1 = DerefOf (\OBIT [Zero])
                Local2 = One
                While ((Local2 <= Local1))
                {
                    Local3 = DerefOf (DerefOf (\OBIT [Local2]) [Zero])
                    Local4 = DerefOf (DerefOf (\OBIT [Local2]) [One])
                    If (((Local3 == Local0) && (Local4 == Zero)))
                    {
                        LODT = DerefOf (DerefOf (\OBIT [Local2]) [0x03])
                        TEMP = WCNS /* \WCNS */
                        Local5 = DerefOf (DerefOf (\OBIT [Local2]) [0x02])
                        Local5 *= 0x04
                        CreateDWordField (TEMP, Local5, TEM1)
                        CreateDWordField (LODT, 0x04, CRUT)
                        CRUT = TEM1 /* \AOD_.AM04.TEM1 */
                        Break
                    }

                    Local2++
                }

                Return (LODT) /* \AOD_.AM04.LODT */
            }

            OperationRegion (PSMI, SystemIO, ASMI, 0x02)
            Field (PSMI, AnyAcc, NoLock, Preserve)
            {
                ASMO,   8
            }

            Mutex (SMLO, 0x00)
            Method (AM05, 1, NotSerialized)
            {
                Name (LODT, Buffer (0xC8)
                {
                     0x00                                             // .
                })
                CreateDWordField (Arg0, Zero, DCMI)
                CreateDWordField (Arg0, 0x04, DCMD)
                SCMI = DCMI /* \AOD_.AM05.DCMI */
                SCMD = DCMD /* \AOD_.AM05.DCMD */
                ASMO = DSMI /* \DSMI */
                LODT = OUTB /* \OUTB */
                Return (LODT) /* \AOD_.AM05.LODT */
            }

            Method (AM06, 1, NotSerialized)
            {
                Name (LODT, Buffer (0x14)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                Name (TEMP, Buffer (0x0200)
                {
                     0x00                                             // .
                })
                Local0 = Arg0
                Local1 = DerefOf (\OBIT [Zero])
                Local2 = One
                While ((Local2 <= Local1))
                {
                    Local3 = DerefOf (DerefOf (\OBIT [Local2]) [Zero])
                    Local4 = DerefOf (DerefOf (\OBIT [Local2]) [One])
                    If (((Local3 == Local0) && (Local4 == One)))
                    {
                        LODT = DerefOf (DerefOf (\OBIT [Local2]) [0x03])
                        TEMP = WCNS /* \WCNS */
                        Local5 = DerefOf (DerefOf (\OBIT [Local2]) [0x02])
                        Local5 *= 0x04
                        CreateDWordField (TEMP, Local5, TEM1)
                        CreateDWordField (LODT, 0x04, CRUT)
                        CRUT = TEM1 /* \AOD_.AM06.TEM1 */
                        Break
                    }

                    Local2++
                }

                Return (LODT) /* \AOD_.AM06.LODT */
            }

            Method (AM07, 1, NotSerialized)
            {
                Name (BSPD, Buffer (0x0214){})
                If ((Arg0 > 0x0F))
                {
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                If ((Arg0 == Zero))
                {
                    BSPD = DSPD /* \DSPD */
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                Local0 = Zero
                Local0 += (Arg0 * 0x0214)
                Local1 = 0x0214
                Local2 = Zero
                While (Local1)
                {
                    BSPD [Local2] = DerefOf (DSPD [Local0])
                    Local1--
                    Local0++
                    Local2++
                }

                Return (BSPD) /* \AOD_.AM07.BSPD */
            }

            Method (AM08, 0, NotSerialized)
            {
                Return (\OBIE) /* External reference */
            }

            Method (AM09, 0, NotSerialized)
            {
                Name (TEMP, Buffer (0x8C){})
                TEMP = RMPD /* \RMPD */
                Return (TEMP) /* \AOD_.AM09.TEMP */
            }

            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x6A, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // j.......
                /* 0008 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // AA..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x00   // ..).BA..
            })
            Method (WMAA, 3, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((((Arg1 != One) || (Arg1 != 0x02)) || 
                        (Arg1 != 0x06)))
                    {
                        CreateDWordField (Arg2, Zero, WIID)
                    }

                    If ((Arg1 == One))
                    {
                        Return (AM01 ())
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Return (AM02 ())
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Return (AM03 ())
                    }
                    ElseIf ((Arg1 == 0x04))
                    {
                        Return (AM04 (WIID))
                    }
                    ElseIf ((Arg1 == 0x05))
                    {
                        Return (AM05 (Arg2))
                    }
                    ElseIf ((Arg1 == 0x06))
                    {
                        Return (AM06 (WIID))
                    }
                    ElseIf ((Arg1 == 0x07))
                    {
                        Return (AM07 (WIID))
                    }
                    ElseIf ((Arg1 == 0x08))
                    {
                        Return (AM08 ())
                    }
                    ElseIf ((Arg1 == 0x09))
                    {
                        Return (AM09 ())
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Name (WQBA, Buffer (0x0C80)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x70, 0x0C, 0x00, 0x00, 0x6C, 0x45, 0x00, 0x00,  // p...lE..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xD4, 0xA1, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x11, 0x10, 0x22, 0x21, 0x30, 0x34, 0x32,  // ..."!042
                /* 0028 */  0x0B, 0x03, 0x63, 0x04, 0x8A, 0x0B, 0x21, 0x07,  // ..c...!.
                /* 0030 */  0x10, 0x12, 0x07, 0x85, 0x12, 0x02, 0xA1, 0xFE,  // ........
                /* 0038 */  0x04, 0xF2, 0x2B, 0x00, 0xE1, 0x16, 0xCA, 0x14,  // ..+.....
                /* 0040 */  0x60, 0x50, 0x80, 0x53, 0x04, 0x11, 0xF4, 0x2A,  // `P.S...*
                /* 0048 */  0xC0, 0xA6, 0x00, 0x93, 0x02, 0x2C, 0x0A, 0xD0,  // .....,..
                /* 0050 */  0x2E, 0xC0, 0xB2, 0x00, 0xDD, 0x02, 0xA4, 0xC3,  // ........
                /* 0058 */  0x12, 0x91, 0xE0, 0x28, 0x31, 0xE0, 0x28, 0x9D,  // ...(1.(.
                /* 0060 */  0xD8, 0xC2, 0x0D, 0x1B, 0xBC, 0x50, 0x14, 0xCD,  // .....P..
                /* 0068 */  0x20, 0x4A, 0x82, 0xCA, 0x05, 0xF8, 0x46, 0x10,  //  J....F.
                /* 0070 */  0x78, 0xB9, 0x02, 0x24, 0x4F, 0x40, 0x9A, 0x05,  // x..$O@..
                /* 0078 */  0x18, 0x16, 0x60, 0x5D, 0x80, 0xEC, 0x21, 0x50,  // ..`]..!P
                /* 0080 */  0xA9, 0x43, 0x40, 0xC9, 0x19, 0x02, 0x6A, 0x00,  // .C@...j.
                /* 0088 */  0xAD, 0x4E, 0x40, 0xF8, 0x95, 0x4E, 0x09, 0x49,  // .N@..N.I
                /* 0090 */  0x10, 0xCE, 0x58, 0xC5, 0xE3, 0x6B, 0x16, 0x4D,  // ..X..k.M
                /* 0098 */  0xCF, 0x49, 0xCE, 0x31, 0xE4, 0x78, 0x5C, 0xE8,  // .I.1.x\.
                /* 00A0 */  0x41, 0xF0, 0x50, 0x1A, 0x40, 0x98, 0xFC, 0x21,  // A.P.@..!
                /* 00A8 */  0x2B, 0x06, 0x0C, 0x4A, 0xC2, 0x58, 0xA8, 0x8B,  // +..J.X..
                /* 00B0 */  0x51, 0xA3, 0x46, 0xCA, 0x06, 0x64, 0x88, 0xD2,  // Q.F..d..
                /* 00B8 */  0x46, 0x8D, 0x1E, 0xD0, 0xF9, 0x1D, 0xC9, 0xD9,  // F.......
                /* 00C0 */  0x1D, 0xDD, 0x91, 0x24, 0x30, 0xEA, 0x31, 0x1D,  // ...$0.1.
                /* 00C8 */  0x63, 0x61, 0x33, 0x12, 0x6A, 0x8C, 0xE6, 0xA0,  // ca3.j...
                /* 00D0 */  0x48, 0xB8, 0x41, 0xA3, 0x25, 0xC2, 0x6A, 0x5C,  // H.A.%.j\
                /* 00D8 */  0xB1, 0xCF, 0xCC, 0xC2, 0x87, 0x25, 0x8C, 0x23,  // .....%.#
                /* 00E0 */  0x38, 0xB0, 0x83, 0xB5, 0x68, 0x18, 0xA1, 0x15,  // 8...h...
                /* 00E8 */  0x04, 0xA7, 0x41, 0x1C, 0x45, 0x94, 0x30, 0x0C,  // ..A.E.0.
                /* 00F0 */  0xCF, 0x98, 0x81, 0x8E, 0x92, 0x21, 0x85, 0x09,  // .....!..
                /* 00F8 */  0x7A, 0x02, 0x41, 0x4E, 0x9E, 0x61, 0x19, 0xE2,  // z.AN.a..
                /* 0100 */  0x0C, 0x38, 0x56, 0x8C, 0x50, 0x21, 0x31, 0x03,  // .8V.P!1.
                /* 0108 */  0x09, 0xFE, 0xFF, 0x3F, 0x81, 0xAE, 0x31, 0xE4,  // ...?..1.
                /* 0110 */  0x19, 0x88, 0xDC, 0x03, 0x4E, 0x20, 0x48, 0xF4,  // ....N H.
                /* 0118 */  0x28, 0xC1, 0x8D, 0x6B, 0x54, 0x36, 0xA6, 0xB3,  // (..kT6..
                /* 0120 */  0xC1, 0x0D, 0xCC, 0x04, 0x71, 0x0E, 0x0F, 0x23,  // ....q..#
                /* 0128 */  0x03, 0x42, 0x13, 0x88, 0x1F, 0x3B, 0x7C, 0x02,  // .B...;|.
                /* 0130 */  0xBB, 0x3F, 0x0E, 0x48, 0x21, 0x82, 0x2E, 0x04,  // .?.H!...
                /* 0138 */  0x67, 0x5A, 0xA3, 0x00, 0x6B, 0x67, 0x07, 0xD9,  // gZ..kg..
                /* 0140 */  0x82, 0xD0, 0x59, 0x20, 0x56, 0x63, 0x28, 0x82,  // ..Y Vc(.
                /* 0148 */  0x88, 0x10, 0x34, 0x8A, 0xF1, 0x22, 0x84, 0x0A,  // ..4.."..
                /* 0150 */  0x11, 0x25, 0xEA, 0x39, 0x07, 0xA9, 0x4D, 0x80,  // .%.9..M.
                /* 0158 */  0x32, 0x10, 0xA1, 0x05, 0x33, 0x02, 0xB3, 0x7F,  // 2...3...
                /* 0160 */  0x06, 0x60, 0x16, 0x20, 0xFE, 0x08, 0x2C, 0xE1,  // .`. ..,.
                /* 0168 */  0x44, 0x20, 0x23, 0xA3, 0xA1, 0x87, 0x05, 0x9F,  // D #.....
                /* 0170 */  0x04, 0xD8, 0x01, 0xC1, 0xF3, 0x39, 0x35, 0x13,  // .....95.
                /* 0178 */  0x38, 0x30, 0x84, 0x78, 0x25, 0x40, 0xD4, 0xD1,  // 80.x%@..
                /* 0180 */  0x82, 0x12, 0x58, 0xCA, 0xD1, 0x80, 0xD8, 0x1E,  // ..X.....
                /* 0188 */  0x98, 0xEE, 0x01, 0x47, 0x78, 0xEE, 0xBE, 0x1C,  // ...Gx...
                /* 0190 */  0x9C, 0x9A, 0x7F, 0x1A, 0x9E, 0xE6, 0x43, 0x02,  // ......C.
                /* 0198 */  0x66, 0x88, 0x1E, 0xEB, 0x41, 0x04, 0x3C, 0x44,  // f...A.<D
                /* 01A0 */  0x76, 0x4A, 0x30, 0x20, 0xDE, 0xFB, 0xB5, 0x80,  // vJ0 ....
                /* 01A8 */  0x8C, 0xE0, 0x25, 0xC1, 0x80, 0x9E, 0xC4, 0x03,  // ..%.....
                /* 01B0 */  0x02, 0x58, 0x0E, 0x1A, 0x07, 0x7E, 0x42, 0x15,  // .X...~B.
                /* 01B8 */  0xDF, 0x01, 0xE8, 0x91, 0x80, 0xCD, 0x28, 0xBE,  // ......(.
                /* 01C0 */  0x09, 0xCA, 0x3A, 0x3E, 0xA0, 0xE7, 0x1C, 0xED,  // ..:>....
                /* 01C8 */  0xD9, 0xE1, 0x65, 0xA1, 0xD9, 0x2B, 0x06, 0x21,  // ..e..+.!
                /* 01D0 */  0x78, 0x0D, 0xF0, 0x4D, 0xC1, 0xA7, 0x11, 0x8B,  // x..M....
                /* 01D8 */  0x5A, 0x9D, 0x9C, 0xAC, 0xCA, 0x23, 0xA6, 0xE0,  // Z....#..
                /* 01E0 */  0x1E, 0x02, 0x97, 0x01, 0xA7, 0xA1, 0x7B, 0xBC,  // ......{.
                /* 01E8 */  0xE0, 0x50, 0x30, 0x5E, 0xFA, 0xFF, 0x1F, 0x2F,  // .P0^.../
                /* 01F0 */  0xB8, 0xE7, 0x75, 0xBC, 0x60, 0x39, 0x26, 0x3C,  // ..u.`9&<
                /* 01F8 */  0x6C, 0x54, 0x05, 0xA1, 0x41, 0x1C, 0x70, 0xF3,  // lT..A.p.
                /* 0200 */  0x03, 0x20, 0x57, 0x0B, 0x8F, 0x98, 0xCD, 0xE5,  // . W.....
                /* 0208 */  0xAC, 0xD8, 0x11, 0x85, 0x0F, 0x8F, 0x0F, 0xC3,  // ........
                /* 0210 */  0x23, 0x7E, 0x6F, 0x28, 0x16, 0x44, 0x02, 0x21,  // #~o(.D.!
                /* 0218 */  0x74, 0x66, 0x38, 0x72, 0xB0, 0x38, 0x3B, 0x41,  // tf8r.8;A
                /* 0220 */  0x88, 0xC0, 0xD2, 0x86, 0x8E, 0x1E, 0xB2, 0x47,  // .......G
                /* 0228 */  0xF5, 0x12, 0x63, 0x8C, 0x27, 0x02, 0xA3, 0x9E,  // ..c.'...
                /* 0230 */  0xD2, 0xD1, 0x83, 0x0F, 0xD0, 0xA3, 0x07, 0x7C,  // .......|
                /* 0238 */  0xFE, 0xFF, 0x47, 0x8F, 0x93, 0x34, 0x66, 0x89,  // ..G..4f.
                /* 0240 */  0x18, 0x3D, 0xFA, 0x1C, 0xE1, 0xE9, 0xBC, 0xFD,  // .=......
                /* 0248 */  0xF0, 0xA3, 0x48, 0x02, 0xC7, 0x87, 0xD0, 0xE8,  // ..H.....
                /* 0250 */  0xC1, 0x73, 0xFA, 0xF1, 0xE8, 0xC1, 0x3F, 0x46,  // .s....?F
                /* 0258 */  0x8F, 0x1E, 0x3C, 0x63, 0x38, 0x37, 0xDC, 0xD5,  // ..<c87..
                /* 0260 */  0xC6, 0x23, 0x07, 0xFB, 0x78, 0xF1, 0xF2, 0x8E,  // .#..x...
                /* 0268 */  0x5B, 0xA0, 0xF0, 0x39, 0x7B, 0x32, 0x80, 0xF7,  // [..9{2..
                /* 0270 */  0x20, 0xDC, 0x79, 0x0B, 0xB8, 0x8C, 0x80, 0xCB,  //  .y.....
                /* 0278 */  0x3D, 0x57, 0xA1, 0x04, 0x1E, 0xAD, 0x40, 0xFB,  // =W....@.
                /* 0280 */  0xFF, 0x3F, 0x5A, 0x01, 0x4C, 0xB8, 0x3F, 0xBC,  // .?Z.L.?.
                /* 0288 */  0x5A, 0x3D, 0x5A, 0x81, 0x3D, 0xE2, 0x73, 0x40,  // Z=Z.=.s@
                /* 0290 */  0x3F, 0x02, 0xC7, 0x86, 0x90, 0x93, 0xA3, 0x15,  // ?.......
                /* 0298 */  0xEA, 0x64, 0x84, 0x0B, 0x7A, 0xB0, 0x02, 0xBA,  // .d..z...
                /* 02A0 */  0x07, 0x0D, 0xDC, 0xF1, 0x00, 0xCE, 0xFF, 0xFF,  // ........
                /* 02A8 */  0x78, 0xC0, 0x07, 0xC6, 0x4F, 0x2F, 0xE0, 0x3B,  // x...O/.;
                /* 02B0 */  0xB3, 0x78, 0xAC, 0x38, 0x68, 0x86, 0x79, 0x20,  // .x.8h.y 
                /* 02B8 */  0xA7, 0xE6, 0x6B, 0x20, 0x0B, 0x3B, 0x5A, 0x50,  // ..k .;ZP
                /* 02C0 */  0x1D, 0xAB, 0x80, 0xC3, 0xB9, 0x12, 0x37, 0x5A,  // ......7Z
                /* 02C8 */  0xB8, 0x43, 0xC3, 0x8F, 0x17, 0x7C, 0x22, 0x4E,  // .C...|"N
                /* 02D0 */  0x52, 0x3E, 0xD4, 0x41, 0x3F, 0x80, 0x7A, 0xBC,  // R>.A?.z.
                /* 02D8 */  0xE0, 0x39, 0x48, 0x01, 0x87, 0x43, 0x1D, 0xF8,  // .9H..C..
                /* 02E0 */  0xFE, 0xFF, 0x87, 0x3A, 0x38, 0x43, 0x06, 0x9F,  // ...:8C..
                /* 02E8 */  0xBC, 0xB3, 0x18, 0xFA, 0x3C, 0xE3, 0x29, 0xD4,  // ....<.).
                /* 02F0 */  0x7A, 0x89, 0x21, 0xB0, 0x07, 0xE4, 0x93, 0x48,  // z.!....H
                /* 02F8 */  0x90, 0x13, 0x89, 0x70, 0x2E, 0x3E, 0x8D, 0x81,  // ...p.>..
                /* 0300 */  0xED, 0x00, 0x05, 0x1C, 0x4E, 0x63, 0xE0, 0xB9,  // ....Nc..
                /* 0308 */  0xA4, 0xB0, 0xDB, 0x18, 0x18, 0x0E, 0x51, 0xF0,  // ......Q.
                /* 0310 */  0x26, 0xE5, 0xF1, 0x83, 0xEF, 0xD4, 0x84, 0x3B,  // &......;
                /* 0318 */  0x44, 0xC1, 0xF3, 0x38, 0x24, 0x21, 0x9F, 0xC7,  // D..8$!..
                /* 0320 */  0x4B, 0x00, 0xEE, 0x1E, 0x85, 0x3F, 0x47, 0x81,  // K....?G.
                /* 0328 */  0xF7, 0xFF, 0x7F, 0x8E, 0x82, 0x27, 0x6B, 0xA1,  // .....'k.
                /* 0330 */  0xF4, 0x10, 0x65, 0x21, 0x30, 0xA8, 0x73, 0x14,  // ..e!0.s.
                /* 0338 */  0xC0, 0x14, 0x6F, 0xB7, 0x0D, 0xDD, 0xA2, 0x7C,  // ..o....|
                /* 0340 */  0x1B, 0x78, 0x1A, 0x78, 0x8D, 0x88, 0xF2, 0x1C,  // .x.x....
                /* 0348 */  0xE5, 0x8B, 0xD4, 0x0B, 0x41, 0x84, 0x28, 0xC7,  // ....A.(.
                /* 0350 */  0x7B, 0x02, 0x11, 0x1E, 0xA6, 0x3C, 0xE1, 0x30,  // {....<.0
                /* 0358 */  0xE1, 0x4E, 0x36, 0xCA, 0x4B, 0x43, 0x18, 0x43,  // .N6.KC.C
                /* 0360 */  0xC7, 0x0A, 0x14, 0x39, 0x7E, 0x08, 0x5F, 0x2A,  // ...9~._*
                /* 0368 */  0x7C, 0x8E, 0x62, 0x51, 0xCE, 0x03, 0xFA, 0x11,  // |.bQ....
                /* 0370 */  0xF8, 0xFC, 0x61, 0x23, 0x67, 0x11, 0xD4, 0x49,  // ..a#g..I
                /* 0378 */  0xC0, 0x87, 0x0E, 0x0F, 0xEA, 0x09, 0x01, 0x13,  // ........
                /* 0380 */  0xFA, 0x60, 0x08, 0xAA, 0xFF, 0xFF, 0x49, 0x0A,  // .`....I.
                /* 0388 */  0x38, 0x1F, 0x40, 0xE0, 0x85, 0x3C, 0xF3, 0x82,  // 8.@..<..
                /* 0390 */  0xEE, 0x44, 0x0F, 0x8E, 0x33, 0x61, 0xE4, 0xB8,  // .D..3a..
                /* 0398 */  0x0F, 0x34, 0xD8, 0xB3, 0x07, 0xF0, 0x91, 0x76,  // .4.....v
                /* 03A0 */  0xF0, 0x40, 0x89, 0x39, 0x7B, 0x00, 0xBA, 0xFE,  // .@.9{...
                /* 03A8 */  0xFF, 0x67, 0x0F, 0xC0, 0xC2, 0x65, 0xE3, 0xDD,  // .g...e..
                /* 03B0 */  0xC3, 0x97, 0x9E, 0x33, 0x7D, 0xF6, 0xF0, 0x5C,  // ...3}..\
                /* 03B8 */  0xDF, 0x39, 0x7C, 0x2A, 0x34, 0x8A, 0x21, 0xDE,  // .9|*4.!.
                /* 03C0 */  0x3F, 0x7C, 0x28, 0x88, 0x12, 0xF1, 0x5C, 0xA3,  // ?|(...\.
                /* 03C8 */  0x1C, 0x72, 0x94, 0xB8, 0x11, 0xC2, 0x3C, 0x1E,  // .r....<.
                /* 03D0 */  0x1A, 0x27, 0x46, 0xA8, 0x08, 0x0C, 0xF4, 0xD9,  // .'F.....
                /* 03D8 */  0x83, 0xC5, 0x39, 0x7B, 0x40, 0xC5, 0x3E, 0x9B,  // ..9{@.>.
                /* 03E0 */  0x37, 0x8E, 0x08, 0xAF, 0x01, 0xE7, 0x78, 0x3E,  // 7.....x>
                /* 03E8 */  0x3E, 0x7B, 0x00, 0xDE, 0xA4, 0x3C, 0xFD, 0x74,  // >{...<.t
                /* 03F0 */  0xF6, 0x00, 0xD7, 0x09, 0x18, 0x77, 0xF6, 0xC0,  // .....w..
                /* 03F8 */  0xFD, 0xFF, 0xCF, 0x1E, 0xB8, 0x71, 0x63, 0x4F,  // .....qcO
                /* 0400 */  0x1F, 0xC0, 0x4E, 0x84, 0x87, 0xA3, 0x07, 0x26,  // ..N....&
                /* 0408 */  0xF6, 0xF9, 0x16, 0xA0, 0xD0, 0xE1, 0xE3, 0xF9,  // ........
                /* 0410 */  0x16, 0xAC, 0xFF, 0xFF, 0x83, 0x14, 0x17, 0xFE,  // ........
                /* 0418 */  0xB2, 0xD4, 0xA7, 0xC0, 0xC1, 0x0F, 0xA9, 0xE8,  // ........
                /* 0420 */  0xE1, 0xF8, 0x38, 0x87, 0x39, 0xE0, 0x02, 0x6C,  // ..8.9..l
                /* 0428 */  0x3E, 0x5A, 0xFB, 0xFF, 0x7F, 0xB4, 0xC6, 0x03,  // >Z......
                /* 0430 */  0x87, 0xF4, 0x51, 0x01, 0x6C, 0xC7, 0x5B, 0xE0,  // ..Q.l.[.
                /* 0438 */  0x70, 0x54, 0x00, 0xCF, 0xC0, 0xF8, 0x58, 0x81,  // pT....X.
                /* 0440 */  0xC5, 0xC4, 0x1E, 0x5D, 0x8E, 0x15, 0x6C, 0x87,  // ...]..l.
                /* 0448 */  0x5A, 0xE0, 0x30, 0x56, 0x30, 0x0D, 0x8C, 0x8D,  // Z.0V0...
                /* 0450 */  0x15, 0x7C, 0x12, 0x8E, 0xD5, 0xE8, 0x31, 0xFA,  // .|....1.
                /* 0458 */  0xD6, 0x73, 0x40, 0x9E, 0x47, 0x84, 0xB0, 0xBE,  // .s@.G...
                /* 0460 */  0xC2, 0x24, 0x70, 0x5C, 0x08, 0xFD, 0xFF, 0x87,  // .$p\....
                /* 0468 */  0x0B, 0x1E, 0x50, 0x0F, 0x17, 0xFC, 0xF2, 0x86,  // ..P.....
                /* 0470 */  0x0B, 0x9A, 0xB1, 0xC1, 0x19, 0x31, 0xF8, 0x4E,  // .....1.N
                /* 0478 */  0x5E, 0x3E, 0x06, 0x83, 0xE5, 0x12, 0xC1, 0xCE,  // ^>......
                /* 0480 */  0x02, 0x6C, 0x3A, 0xF8, 0x9B, 0x30, 0xFE, 0xC8,  // .l:..0..
                /* 0488 */  0x05, 0x8C, 0x02, 0x98, 0x00, 0x61, 0x32, 0x4F,  // .....a2O
                /* 0490 */  0x07, 0x92, 0x0C, 0x83, 0x3A, 0x72, 0x01, 0xA7,  // ....:r..
                /* 0498 */  0x10, 0x07, 0x02, 0x28, 0xFF, 0xFF, 0x23, 0x17,  // ...(..#.
                /* 04A0 */  0xF0, 0x53, 0x3A, 0x25, 0x4D, 0xFA, 0xFD, 0x1B,  // .S:%M...
                /* 04A8 */  0x77, 0xCC, 0x02, 0x1B, 0xC2, 0x63, 0x16, 0xBF,  // w....c..
                /* 04B0 */  0x30, 0xFA, 0x98, 0x05, 0x46, 0x31, 0x4B, 0xD1,  // 0...F1K.
                /* 04B8 */  0x58, 0x2C, 0xE7, 0xCC, 0xE8, 0x53, 0x07, 0xEA,  // X,...S..
                /* 04C0 */  0x6C, 0xE1, 0x33, 0xC0, 0x19, 0x1E, 0xD8, 0xB3,  // l.3.....
                /* 04C8 */  0xC6, 0xF1, 0x9E, 0x42, 0xED, 0xC3, 0x24, 0x73,  // ...B..$s
                /* 04D0 */  0xF5, 0x75, 0xFD, 0x09, 0x80, 0x9F, 0x1B, 0x7D,  // .u.....}
                /* 04D8 */  0xD6, 0x02, 0xAE, 0x27, 0x84, 0x67, 0x2D, 0xF0,  // ...'.g-.
                /* 04E0 */  0xDC, 0x07, 0x7C, 0x0D, 0xE0, 0x13, 0x39, 0x3E,  // ..|...9>
                /* 04E8 */  0x38, 0xE7, 0x46, 0xF0, 0xFC, 0xFF, 0xCF, 0x52,  // 8.F....R
                /* 04F0 */  0x96, 0x35, 0x6E, 0xB4, 0x24, 0x10, 0x1D, 0x32,  // .5n.$..2
                /* 04F8 */  0x22, 0x9E, 0xE9, 0x41, 0xBC, 0xD6, 0xF9, 0x04,  // "..A....
                /* 0500 */  0xFC, 0x8A, 0x10, 0xFB, 0x1D, 0xC3, 0x37, 0x05,  // ......7.
                /* 0508 */  0x4F, 0xC4, 0xF7, 0x3A, 0x13, 0x8C, 0x7E, 0xEC,  // O..:..~.
                /* 0510 */  0x02, 0xBA, 0xA7, 0x14, 0xDC, 0xC0, 0xE1, 0x8E,  // ........
                /* 0518 */  0x0F, 0x77, 0xA4, 0xC0, 0x0F, 0x11, 0xCE, 0xD8,  // .w......
                /* 0520 */  0xC1, 0x25, 0xFC, 0x14, 0x8B, 0x3E, 0x42, 0xF0,  // .%...>B.
                /* 0528 */  0x61, 0x60, 0xB1, 0x03, 0xBF, 0x13, 0x60, 0xE4,  // a`....`.
                /* 0530 */  0x41, 0xEB, 0x24, 0x0B, 0x9E, 0x33, 0x18, 0x70,  // A.$..3.p
                /* 0538 */  0x88, 0x30, 0x74, 0xD0, 0xDC, 0x44, 0xCE, 0xE2,  // .0t..D..
                /* 0540 */  0xFF, 0x1F, 0x2C, 0x4E, 0xB4, 0x93, 0x38, 0x9F,  // ..,N..8.
                /* 0548 */  0x48, 0xE7, 0x17, 0x2C, 0x4A, 0x75, 0x33, 0x87,  // H..,Ju3.
                /* 0550 */  0x00, 0x74, 0x90, 0x38, 0x9C, 0x37, 0x1F, 0x8F,  // .t.8.7..
                /* 0558 */  0xCE, 0x30, 0xBE, 0x61, 0xB2, 0x7B, 0x00, 0xBF,  // .0.a.{..
                /* 0560 */  0xEF, 0x78, 0x2E, 0x07, 0xE6, 0xE3, 0x2D, 0xBC,  // .x....-.
                /* 0568 */  0x23, 0x83, 0x0F, 0x03, 0xE0, 0x12, 0x3D, 0x7E,  // #.....=~
                /* 0570 */  0x29, 0x39, 0x0C, 0xA0, 0x06, 0x69, 0xD8, 0xD3,  // )9...i..
                /* 0578 */  0x39, 0xFD, 0x03, 0x3B, 0xB2, 0xE6, 0xE1, 0x35,  // 9..;...5
                /* 0580 */  0xAA, 0xD7, 0x1D, 0x9F, 0x8C, 0x1E, 0x05, 0xC0,  // ........
                /* 0588 */  0x76, 0x44, 0x03, 0x0E, 0x01, 0x8E, 0x02, 0x40,  // vD.....@
                /* 0590 */  0x68, 0x9A, 0x38, 0x9C, 0xE3, 0xC4, 0x1C, 0x5F,  // h.8...._
                /* 0598 */  0x7D, 0x0F, 0x62, 0xD7, 0x15, 0x63, 0xBE, 0x51,  // }.b..c.Q
                /* 05A0 */  0x55, 0x7F, 0x12, 0x80, 0x7E, 0xF8, 0x02, 0xCF,  // U...~...
                /* 05A8 */  0xFF, 0xFF, 0xF2, 0xF3, 0xFA, 0x93, 0xC0, 0x42,  // .......B
                /* 05B0 */  0x8F, 0x02, 0x50, 0xA0, 0x5F, 0xBD, 0x7C, 0xAB,  // ..P._.|.
                /* 05B8 */  0x79, 0x56, 0x60, 0xB8, 0xA7, 0x74, 0x56, 0x09,  // yV`..tV.
                /* 05C0 */  0x2C, 0xE9, 0x28, 0x00, 0xAA, 0xE3, 0x1B, 0x70,  // ,.(....p
                /* 05C8 */  0xB8, 0x49, 0x3D, 0x0A, 0x80, 0x7F, 0x8A, 0x0C,  // .I=.....
                /* 05D0 */  0xE4, 0x18, 0xB1, 0xF7, 0x0B, 0x7E, 0x6A, 0xB3,  // .....~j.
                /* 05D8 */  0xCB, 0x43, 0x00, 0xD0, 0x39, 0x4C, 0x91, 0x43,  // .C..9L.C
                /* 05E0 */  0x00, 0x6A, 0x98, 0x9E, 0x36, 0x3F, 0xCE, 0xF2,  // .j..6?..
                /* 05E8 */  0x13, 0x00, 0x78, 0x40, 0x7D, 0x02, 0x00, 0xFF,  // ..x@}...
                /* 05F0 */  0xBD, 0xD7, 0x27, 0x00, 0x38, 0xFF, 0xFF, 0x13,  // ..'.8...
                /* 05F8 */  0x00, 0xFE, 0x8A, 0x82, 0x1F, 0x1D, 0x6E, 0xE0,  // ......n.
                /* 0600 */  0xF0, 0x8E, 0x1C, 0x3E, 0xA5, 0x80, 0xEB, 0xC8,  // ...>....
                /* 0608 */  0x88, 0x3B, 0x17, 0xC2, 0x1B, 0x12, 0x3B, 0x10,  // .;....;.
                /* 0610 */  0x02, 0xC3, 0xA0, 0x7A, 0x8E, 0x84, 0xF4, 0x70,  // ...z...p
                /* 0618 */  0x20, 0x51, 0xEB, 0xA4, 0x30, 0x3E, 0x0D, 0xF8,  //  Q..0>..
                /* 0620 */  0x40, 0x08, 0xF7, 0xE4, 0x65, 0x38, 0x3E, 0x42,  // @...e8>B
                /* 0628 */  0x0F, 0xFD, 0x21, 0xE2, 0xC9, 0xC7, 0xF7, 0x03,  // ..!.....
                /* 0630 */  0x4F, 0xEE, 0xC9, 0x10, 0xC6, 0x39, 0xC1, 0x77,  // O....9.w
                /* 0638 */  0x15, 0x76, 0x37, 0x7B, 0xD6, 0xF3, 0xB9, 0xCA,  // .v7{....
                /* 0640 */  0x04, 0x3E, 0x2C, 0x30, 0x34, 0x7E, 0x4C, 0x04,  // .>,04~L.
                /* 0648 */  0xEB, 0x8D, 0xC1, 0x87, 0x67, 0xB0, 0xDC, 0x11,  // ....g...
                /* 0650 */  0x31, 0x58, 0xCF, 0x1D, 0x36, 0x2A, 0xE0, 0xFF,  // 1X..6*..
                /* 0658 */  0x7F, 0x4B, 0xF7, 0x5D, 0xC6, 0xBE, 0x86, 0xA1,  // .K.]....
                /* 0660 */  0x3B, 0xA7, 0x0F, 0x71, 0xBE, 0x74, 0xF0, 0xE3,  // ;..q.t..
                /* 0668 */  0x3A, 0xEE, 0x74, 0x08, 0x2E, 0xEC, 0x67, 0x7A,  // :.t...gz
                /* 0670 */  0xB0, 0x87, 0x3A, 0x70, 0xD2, 0x48, 0xA3, 0x41,  // ..:p.H.A
                /* 0678 */  0x1D, 0x15, 0x7C, 0x28, 0xF0, 0x31, 0xC5, 0x03,  // ..|(.1..
                /* 0680 */  0x7C, 0xA9, 0xF0, 0x09, 0xC5, 0xD3, 0x7A, 0x5C,  // |.....z\
                /* 0688 */  0x78, 0x1A, 0xF0, 0xB8, 0xD9, 0x35, 0xC1, 0x1F,  // x....5..
                /* 0690 */  0x04, 0x1F, 0x0F, 0xF0, 0x07, 0x88, 0x80, 0xAF,  // ........
                /* 0698 */  0x37, 0x3E, 0x7A, 0xC0, 0x39, 0x82, 0xE0, 0x8F,  // 7>z.9...
                /* 06A0 */  0x2A, 0xF0, 0xC7, 0xE3, 0x63, 0x80, 0x8F, 0xB5,  // *...c...
                /* 06A8 */  0x5C, 0xFE, 0x20, 0x50, 0x07, 0x78, 0x3E, 0xD2,  // \. P.x>.
                /* 06B0 */  0xD3, 0x7A, 0x1B, 0xF0, 0x21, 0xE1, 0xB0, 0xD8,  // .z..!...
                /* 06B8 */  0x09, 0x86, 0x8F, 0x07, 0xFC, 0x07, 0xB2, 0x87,  // ........
                /* 06C0 */  0x0C, 0x5F, 0x19, 0x3C, 0x5F, 0x1F, 0xDD, 0xB1,  // ._.<_...
                /* 06C8 */  0x47, 0x10, 0x78, 0xB7, 0x0E, 0x1F, 0x1A, 0x42,  // G.x....B
                /* 06D0 */  0x3D, 0x75, 0x78, 0x06, 0xEF, 0x17, 0x3E, 0x81,  // =ux...>.
                /* 06D8 */  0x60, 0xFF, 0xFF, 0x27, 0x10, 0x70, 0x47, 0x71,  // `..'.pGq
                /* 06E0 */  0x03, 0xF1, 0x73, 0x6B, 0xA1, 0xEB, 0x94, 0x8D,  // ..sk....
                /* 06E8 */  0xB3, 0x0E, 0x3D, 0x0F, 0x58, 0xEE, 0x01, 0x41,  // ..=.X..A
                /* 06F0 */  0xD7, 0x08, 0xCC, 0x0D, 0x22, 0x88, 0x8F, 0x45,  // ...."..E
                /* 06F8 */  0xBE, 0x51, 0x30, 0x82, 0x02, 0x01, 0x75, 0xF8,  // .Q0...u.
                /* 0700 */  0x34, 0x84, 0xA5, 0x51, 0x48, 0x18, 0x84, 0x46,  // 4..QH..F
                /* 0708 */  0xE4, 0xA3, 0x07, 0x81, 0xA3, 0x20, 0x1E, 0xBD,  // ..... ..
                /* 0710 */  0x63, 0x1E, 0xCF, 0xD1, 0x43, 0xF5, 0x31, 0xC0,  // c...C.1.
                /* 0718 */  0x93, 0xC0, 0x85, 0x3A, 0xA4, 0xD1, 0xE3, 0x02,  // ...:....
                /* 0720 */  0x1E, 0xEF, 0x88, 0x4E, 0xCD, 0xD3, 0xF0, 0xD8,  // ...N....
                /* 0728 */  0x71, 0x27, 0x0F, 0xB8, 0xE3, 0xC0, 0x9F, 0x76,  // q'.....v
                /* 0730 */  0xF0, 0x17, 0x80, 0x57, 0x20, 0x13, 0xB0, 0x53,  // ...W ..S
                /* 0738 */  0x35, 0xF8, 0x04, 0x1E, 0x0E, 0x40, 0x01, 0xE4,  // 5....@..
                /* 0740 */  0xFB, 0x80, 0x0F, 0x3C, 0xCF, 0x04, 0x6C, 0x0E,  // ...<..l.
                /* 0748 */  0x21, 0xC2, 0x44, 0x33, 0x3C, 0x26, 0xF0, 0x31,  // !.D3<&.1
                /* 0750 */  0x8C, 0x9E, 0x86, 0x3C, 0x2E, 0x3E, 0x4A, 0x9F,  // ...<.>J.
                /* 0758 */  0x61, 0xD8, 0x09, 0xCE, 0xD7, 0x62, 0x0F, 0xF0,  // a....b..
                /* 0760 */  0xE5, 0xE0, 0xB9, 0x16, 0x03, 0xEB, 0x71, 0x73,  // ......qs
                /* 0768 */  0x58, 0xA3, 0x3D, 0xEE, 0xFA, 0x8A, 0xF0, 0xFF,  // X.=.....
                /* 0770 */  0x7F, 0x98, 0xF3, 0xA1, 0xCB, 0x57, 0x27, 0xC3,  // .....W'.
                /* 0778 */  0xFA, 0xE4, 0x01, 0x8E, 0xB3, 0x14, 0xFC, 0xA1,  // ........
                /* 0780 */  0xE2, 0xCE, 0x02, 0x70, 0x0F, 0xE4, 0x6C, 0x0E,  // ...p..l.
                /* 0788 */  0x4F, 0x03, 0x78, 0x99, 0x87, 0x08, 0xD4, 0x40,  // O.x....@
                /* 0790 */  0x2C, 0x72, 0x81, 0x3A, 0xAE, 0x78, 0x24, 0x26,  // ,r.:.x$&
                /* 0798 */  0xF0, 0x51, 0xD1, 0x07, 0x08, 0x7E, 0x7E, 0xF0,  // .Q...~~.
                /* 07A0 */  0x01, 0xD7, 0x07, 0x08, 0x2E, 0x04, 0x8E, 0x82,  // ........
                /* 07A8 */  0xF8, 0x00, 0xE1, 0x90, 0x10, 0x3A, 0xE7, 0xE2,  // .....:..
                /* 07B0 */  0x8E, 0x03, 0x3E, 0xC0, 0x30, 0x88, 0x07, 0x83,  // ..>.0...
                /* 07B8 */  0x07, 0x56, 0x76, 0x94, 0xF1, 0x01, 0x02, 0x78,  // .Vv....x
                /* 07C0 */  0x8C, 0x03, 0x7F, 0x80, 0x80, 0x7B, 0xFA, 0x02,  // .....{..
                /* 07C8 */  0xD7, 0xF9, 0x01, 0x78, 0x04, 0x3F, 0x3F, 0xA0,  // ...x.??.
                /* 07D0 */  0xFF, 0xFF, 0xE7, 0x07, 0xF8, 0x87, 0x53, 0x7E,  // ......S~
                /* 07D8 */  0x7E, 0x00, 0x9E, 0x03, 0x7C, 0x14, 0x00, 0xCB,  // ~...|...
                /* 07E0 */  0x99, 0x8C, 0xCD, 0xE1, 0xA5, 0xE6, 0xB5, 0xD3,  // ........
                /* 07E8 */  0x87, 0x21, 0x76, 0x9C, 0x67, 0x47, 0x7A, 0xAE,  // .!v.gGz.
                /* 07F0 */  0x6B, 0x04, 0x24, 0xE2, 0x19, 0x02, 0x35, 0x08,  // k.$...5.
                /* 07F8 */  0xC7, 0x39, 0x36, 0xE8, 0x38, 0xC1, 0x6E, 0xD9,  // .96.8.n.
                /* 0800 */  0x0F, 0x41, 0x55, 0xA3, 0x08, 0xDE, 0xB7, 0x02,  // .AU.....
                /* 0808 */  0x16, 0xE1, 0x18, 0x81, 0x12, 0x4F, 0x21, 0xE9,  // .....O!.
                /* 0810 */  0xC7, 0x08, 0x94, 0x58, 0x38, 0x0A, 0xE2, 0x51,  // ...X8..Q
                /* 0818 */  0xFB, 0x20, 0x61, 0x1B, 0xC7, 0x08, 0xD4, 0x18,  // . a.....
                /* 0820 */  0x3D, 0xB0, 0x77, 0x3B, 0x76, 0x14, 0xE0, 0xA7,  // =.w;v...
                /* 0828 */  0x08, 0xF8, 0xA7, 0x30, 0xDC, 0xD1, 0x03, 0x1C,  // ...0....
                /* 0830 */  0x17, 0xB1, 0x43, 0x3B, 0xBB, 0x47, 0x4C, 0x63,  // ..C;.GLc
                /* 0838 */  0x9E, 0x41, 0xC4, 0x08, 0xAF, 0xAE, 0x46, 0xF3,  // .A....F.
                /* 0840 */  0x18, 0x71, 0xE7, 0x4D, 0x5F, 0x0F, 0x7D, 0xA4,  // .q.M_.}.
                /* 0848 */  0xF0, 0xA1, 0x1D, 0x73, 0xA4, 0x80, 0xF7, 0xFF,  // ...s....
                /* 0850 */  0x27, 0xF0, 0xB9, 0x11, 0x77, 0xA4, 0x80, 0x33,  // '...w..3
                /* 0858 */  0x93, 0xF3, 0xC0, 0xDC, 0x41, 0x8F, 0x25, 0xBC,  // ....A.%.
                /* 0860 */  0xAF, 0x85, 0xF8, 0x83, 0x05, 0xF0, 0x38, 0x2E,  // ......8.
                /* 0868 */  0xF9, 0x60, 0x01, 0x2E, 0x48, 0x1F, 0x2C, 0x80,  // .`..H.,.
                /* 0870 */  0xEB, 0xF9, 0xC0, 0xA7, 0x03, 0xB0, 0x5E, 0xC8,  // ......^.
                /* 0878 */  0xF8, 0xFD, 0x00, 0xC6, 0x09, 0x03, 0xC6, 0xF9,  // ........
                /* 0880 */  0x00, 0x73, 0xC3, 0x70, 0xAC, 0x95, 0xEA, 0x84,  // .s.p....
                /* 0888 */  0x81, 0x8B, 0xF5, 0xA0, 0xD0, 0x40, 0xD8, 0xF0,  // .....@..
                /* 0890 */  0x9E, 0x7F, 0x9E, 0x0C, 0xF9, 0x61, 0x86, 0x45,  // .....a.E
                /* 0898 */  0x81, 0xD3, 0xD1, 0xC2, 0x27, 0x0B, 0x87, 0xA0,  // ....'...
                /* 08A0 */  0xD0, 0x41, 0xCC, 0x27, 0x0C, 0x2E, 0xE6, 0x84,  // .A.'....
                /* 08A8 */  0x41, 0x41, 0x0C, 0xE8, 0xA4, 0x10, 0xFA, 0xFF,  // AA......
                /* 08B0 */  0x9F, 0xC3, 0x70, 0xA7, 0x4D, 0x1F, 0x1B, 0x58,  // ..p.M..X
                /* 08B8 */  0xB8, 0xFB, 0x05, 0x9D, 0x8B, 0xE7, 0xCC, 0xF1,  // ........
                /* 08C0 */  0x7C, 0x0E, 0x31, 0xAC, 0x6F, 0x26, 0xE0, 0xB9,  // |.1.o&..
                /* 08C8 */  0x52, 0xB0, 0x33, 0x8F, 0x2F, 0x04, 0xBE, 0x4D,  // R.3./..M
                /* 08D0 */  0xF2, 0x03, 0x27, 0x3B, 0x16, 0x18, 0xE5, 0x78,  // ..';...x
                /* 08D8 */  0x5F, 0x0B, 0xAD, 0xE6, 0xAE, 0x80, 0x9A, 0x11,  // _.......
                /* 08E0 */  0x86, 0xC0, 0x03, 0xF6, 0x49, 0x0C, 0x4C, 0xFA,  // ....I.L.
                /* 08E8 */  0x6E, 0x14, 0x20, 0x47, 0xE7, 0x67, 0x6E, 0x8F,  // n. G.gn.
                /* 08F0 */  0x9E, 0x1F, 0x00, 0x7C, 0xB4, 0xE3, 0xA3, 0x77,  // ...|...w
                /* 08F8 */  0x6C, 0x08, 0x1D, 0x57, 0xE0, 0x1E, 0xEE, 0x7C,  // l..W...|
                /* 0900 */  0x86, 0x02, 0xBE, 0x03, 0xF3, 0x0C, 0x9F, 0x50,  // .......P
                /* 0908 */  0xC0, 0x75, 0x7F, 0xE0, 0xE7, 0xC2, 0xFF, 0xFF,  // .u......
                /* 0910 */  0xFB, 0x03, 0xE6, 0x2C, 0x0C, 0xE3, 0x94, 0x02,  // ...,....
                /* 0918 */  0x3C, 0x46, 0xEF, 0x53, 0x0A, 0xB8, 0x0E, 0x00,  // <F.S....
                /* 0920 */  0x3E, 0xA5, 0x00, 0xD7, 0x39, 0x3E, 0xC8, 0x83,  // >...9>..
                /* 0928 */  0x07, 0xC5, 0xF7, 0x5F, 0x4F, 0xC4, 0xC6, 0x87,  // ..._O...
                /* 0930 */  0x4F, 0x2F, 0x28, 0x1E, 0xCB, 0x9B, 0x37, 0x0F,  // O/(...7.
                /* 0938 */  0x75, 0x36, 0x41, 0x47, 0x7B, 0x3D, 0x68, 0xD0,  // u6AG{=h.
                /* 0940 */  0x0F, 0x2A, 0x9E, 0x7D, 0xF8, 0xE3, 0x8B, 0xF0,  // .*.}....
                /* 0948 */  0x7C, 0xEA, 0x71, 0xB1, 0x38, 0x67, 0x13, 0x54,  // |.q.8g.T
                /* 0950 */  0x10, 0x0A, 0x1D, 0x3B, 0x7D, 0x9C, 0xE0, 0x92,  // ...;}...
                /* 0958 */  0x8E, 0x13, 0x14, 0xC4, 0x80, 0xCE, 0x7B, 0xC4,  // ......{.
                /* 0960 */  0xF3, 0x21, 0x1E, 0x7D, 0xEA, 0xF3, 0x2D, 0xE1,  // .!.}..-.
                /* 0968 */  0x38, 0x9E, 0x40, 0x12, 0xCC, 0x77, 0x12, 0xA0,  // 8.@..w..
                /* 0970 */  0x97, 0x13, 0x78, 0xA7, 0x71, 0xDC, 0x48, 0x71,  // ..x.q.Hq
                /* 0978 */  0xFF, 0xFF, 0xCB, 0x09, 0x8C, 0x03, 0x8D, 0x67,  // .......g
                /* 0980 */  0xC1, 0x10, 0xDE, 0xAC, 0xD9, 0x71, 0x1D, 0x1E,  // .....q..
                /* 0988 */  0x8C, 0xAF, 0x27, 0x30, 0xEF, 0x79, 0xE0, 0x3A,  // ..'0.y.:
                /* 0990 */  0x9E, 0x00, 0x0B, 0x99, 0x07, 0x00, 0xD4, 0xB1,  // ........
                /* 0998 */  0xD1, 0x07, 0x47, 0x7E, 0x00, 0x70, 0xE8, 0xE3,  // ..G~.p..
                /* 09A0 */  0x09, 0x7A, 0x26, 0x3E, 0x16, 0x3D, 0x95, 0xF8,  // .z&>.=..
                /* 09A8 */  0x02, 0xC0, 0xCF, 0x6E, 0x3A, 0x9F, 0x80, 0xE2,  // ...n:...
                /* 09B0 */  0x9C, 0x09, 0x9E, 0x71, 0xB0, 0x2B, 0x00, 0xFE,  // ...q.+..
                /* 09B8 */  0x84, 0x02, 0xFB, 0x48, 0x06, 0xBE, 0x89, 0xF8,  // ...H....
                /* 09C0 */  0x54, 0x71, 0x20, 0xD8, 0xD3, 0x09, 0xF8, 0xFE,  // Tq .....
                /* 09C8 */  0xFF, 0x27, 0x59, 0xE0, 0x01, 0xCB, 0x4F, 0xB2,  // .'Y...O.
                /* 09D0 */  0x80, 0x8F, 0xDB, 0x08, 0x76, 0x16, 0xCF, 0x24,  // ....v..$
                /* 09D8 */  0x8C, 0x60, 0xE4, 0xA3, 0x09, 0xEA, 0x88, 0xEC,  // .`......
                /* 09E0 */  0xA0, 0xA7, 0x30, 0xC4, 0x38, 0x1F, 0x2B, 0x8C,  // ..0.8.+.
                /* 09E8 */  0x11, 0xB9, 0xF8, 0x51, 0x6B, 0x32, 0x3E, 0x9B,  // ...Qk2>.
                /* 09F0 */  0xF9, 0xB2, 0xCE, 0x0E, 0x3F, 0x38, 0x82, 0x81,  // ....?8..
                /* 09F8 */  0x0E, 0x28, 0xA8, 0xE3, 0x98, 0xCF, 0x62, 0x80,  // .(....b.
                /* 0A00 */  0xB3, 0xFF, 0xFF, 0x59, 0x0C, 0xF8, 0x9F, 0xDD,  // ...Y....
                /* 0A08 */  0x3D, 0x7A, 0x7E, 0x6C, 0xE7, 0x20, 0x1E, 0xBD,  // =z~l. ..
                /* 0A10 */  0xC3, 0x9F, 0xC5, 0xA0, 0x87, 0x3D, 0x8B, 0x01,  // .....=..
                /* 0A18 */  0x6D, 0xC1, 0x67, 0x31, 0x50, 0xDE, 0x22, 0xE0,  // m.g1P.".
                /* 0A20 */  0x9E, 0x41, 0x81, 0xD7, 0xDA, 0x7C, 0x42, 0x81,  // .A...|B.
                /* 0A28 */  0xFF, 0xFF, 0x3F, 0xA1, 0xE0, 0xEE, 0x0C, 0x3E,  // ..?....>
                /* 0A30 */  0xA1, 0x00, 0xD7, 0x23, 0x00, 0xEE, 0x0C, 0x0A,  // ...#....
                /* 0A38 */  0x8E, 0x13, 0x00, 0xF3, 0x75, 0x03, 0xA0, 0x20,  // ....u.. 
                /* 0A40 */  0x8F, 0x00, 0xF8, 0x2B, 0xBC, 0x0F, 0x26, 0xB8,  // ...+..&.
                /* 0A48 */  0x78, 0x27, 0x15, 0x14, 0x87, 0xE3, 0x9D, 0x54,  // x'.....T
                /* 0A50 */  0x10, 0x53, 0x89, 0xFC, 0xD6, 0xE2, 0x09, 0x84,  // .S......
                /* 0A58 */  0x3F, 0xB8, 0x38, 0xEF, 0x67, 0xFC, 0x54, 0x06,  // ?.8.g.T.
                /* 0A60 */  0x43, 0xD4, 0xC1, 0x02, 0x25, 0xE3, 0x60, 0x41,  // C...%.`A
                /* 0A68 */  0x41, 0x0C, 0xE8, 0x8C, 0xA7, 0x14, 0xF4, 0xA9,  // A.......
                /* 0A70 */  0x8C, 0x5F, 0x46, 0x3C, 0xB0, 0x04, 0x33, 0x5D,  // ._F<..3]
                /* 0A78 */  0x53, 0xA0, 0x5F, 0x40, 0x70, 0x03, 0x86, 0x0B,  // S._@p...
                /* 0A80 */  0xF6, 0x20, 0x61, 0x84, 0xD7, 0x64, 0xCF, 0x03,  // . a..d..
                /* 0A88 */  0x73, 0x44, 0x01, 0x16, 0xFF, 0xFF, 0x23, 0x0A,  // sD....#.
                /* 0A90 */  0xF0, 0x90, 0x3C, 0x74, 0x94, 0xC8, 0xA1, 0x53,  // ..<t...S
                /* 0A98 */  0x10, 0x0F, 0xDD, 0x34, 0x3E, 0xA2, 0xE0, 0xC6,  // ...4>...
                /* 0AA0 */  0xCA, 0x2E, 0x04, 0xB0, 0xA2, 0x9E, 0x52, 0x40,  // ......R@
                /* 0AA8 */  0x21, 0x72, 0xF8, 0xA0, 0x19, 0xC7, 0xD1, 0x3D,  // !r.....=
                /* 0AB0 */  0xF5, 0x78, 0x1E, 0xFC, 0x4E, 0xEC, 0x63, 0x1E,  // .x..N.c.
                /* 0AB8 */  0xDC, 0x93, 0x0A, 0xEE, 0xD4, 0x88, 0x3B, 0xA9,  // ......;.
                /* 0AC0 */  0x80, 0x61, 0x8E, 0xD8, 0x53, 0x19, 0xF0, 0x3A,  // .a..S..:
                /* 0AC8 */  0x82, 0x82, 0xCF, 0xC3, 0x21, 0x05, 0x14, 0xFF,  // ....!...
                /* 0AD0 */  0xFF, 0x23, 0x28, 0x70, 0x3E, 0xA4, 0xF0, 0x63,  // .#(p>..c
                /* 0AD8 */  0x06, 0xE6, 0x6A, 0xC0, 0x8F, 0xA0, 0x98, 0x98,  // ..j.....
                /* 0AE0 */  0xCF, 0x07, 0x9D, 0x4F, 0xF8, 0xD1, 0xC0, 0x81,  // ...O....
                /* 0AE8 */  0x5E, 0x05, 0x02, 0x67, 0x67, 0x7D, 0xDC, 0xE5,  // ^..gg}..
                /* 0AF0 */  0xC0, 0x27, 0x0C, 0x13, 0x8C, 0x70, 0x9A, 0xA0,  // .'...p..
                /* 0AF8 */  0x10, 0x16, 0x4F, 0x21, 0xE9, 0x87, 0x0A, 0x94,  // ..O!....
                /* 0B00 */  0x58, 0x38, 0x0A, 0xE2, 0x43, 0x85, 0x85, 0x1C,  // X8..C...
                /* 0B08 */  0x2A, 0xD0, 0xC7, 0x28, 0x7C, 0xF0, 0x13, 0x05,  // *..(|...
                /* 0B10 */  0x28, 0x2E, 0x00, 0x8F, 0xEC, 0xE0, 0xBD, 0xAF,  // (.......
                /* 0B18 */  0xE3, 0x07, 0x89, 0xBB, 0xA8, 0x78, 0xC8, 0x3E,  // .....x.>
                /* 0B20 */  0xB0, 0x63, 0xE6, 0xE9, 0xA3, 0x05, 0x3C, 0x02,  // .c....<.
                /* 0B28 */  0x9F, 0x1E, 0xC1, 0x07, 0xEF, 0xC3, 0x14, 0xEE,  // ........
                /* 0B30 */  0xFF, 0x7F, 0x98, 0x02, 0x2E, 0x67, 0x3D, 0x1F,  // .....g=.
                /* 0B38 */  0x2C, 0xC0, 0x05, 0xEE, 0x83, 0x05, 0x70, 0xBD,  // ,.....p.
                /* 0B40 */  0xFD, 0xF8, 0x74, 0x00, 0xD6, 0xD1, 0x1E, 0xF3,  // ..t.....
                /* 0B48 */  0xF9, 0xC6, 0x79, 0x3F, 0x80, 0x71, 0x53, 0x79,  // ..y?.qSy
                /* 0B50 */  0x88, 0xF4, 0x3D, 0xC0, 0xF8, 0xEC, 0x7C, 0x80,  // ..=...|.
                /* 0B58 */  0xBD, 0x12, 0xF9, 0xEC, 0xA0, 0x33, 0x06, 0x6A,  // .....3.j
                /* 0B60 */  0x38, 0x3E, 0x57, 0x78, 0x24, 0xEC, 0x02, 0x70,  // 8>Wx$..p
                /* 0B68 */  0xAE, 0x3E, 0x50, 0xE1, 0x0E, 0x7D, 0x3E, 0x62,  // .>P..}>b
                /* 0B70 */  0xF0, 0x23, 0xBD, 0x4F, 0xB9, 0xE0, 0x3A, 0x62,  // .#.O..:b
                /* 0B78 */  0xE0, 0x43, 0x1E, 0x31, 0x40, 0xF1, 0xFF, 0x3F,  // .C.1@..?
                /* 0B80 */  0x40, 0xE0, 0x46, 0x0D, 0x8E, 0xC9, 0x3D, 0x22,  // @.F...="
                /* 0B88 */  0x9C, 0xF2, 0x99, 0xE2, 0x0E, 0x16, 0xC0, 0x65,  // .......e
                /* 0B90 */  0x1E, 0xEC, 0x60, 0x01, 0xBC, 0x22, 0x1F, 0x80,  // ..`.."..
                /* 0B98 */  0x40, 0x67, 0xE2, 0x60, 0x01, 0x74, 0xCF, 0x04,  // @g.`.t..
                /* 0BA0 */  0xC0, 0x41, 0xA1, 0x4D, 0x9F, 0x1A, 0x8D, 0x5A,  // .A.M...Z
                /* 0BA8 */  0x35, 0x28, 0x53, 0xA3, 0x4C, 0x83, 0x5A, 0x7D,  // 5(S.L.Z}
                /* 0BB0 */  0x2A, 0x35, 0x46, 0xF0, 0xDC, 0xE3, 0xB5, 0x6A,  // *5F....j
                /* 0BB8 */  0xB0, 0x0E, 0xF5, 0x66, 0x10, 0x88, 0xE3, 0xAE,  // ...f....
                /* 0BC0 */  0x58, 0x03, 0x26, 0x0F, 0x27, 0xFD, 0xFF, 0x41,  // X.&.'..A
                /* 0BC8 */  0x2C, 0x44, 0x05, 0x08, 0x93, 0xB1, 0x2E, 0x81,  // ,D......
                /* 0BD0 */  0x58, 0xCA, 0xBA, 0x04, 0x62, 0xA1, 0xEF, 0x08,  // X...b...
                /* 0BD8 */  0x81, 0x38, 0xC8, 0x6B, 0x40, 0x20, 0x8E, 0xF7,  // .8.k@ ..
                /* 0BE0 */  0xD6, 0x13, 0x88, 0x83, 0x6A, 0x01, 0x61, 0x31,  // ....j.a1
                /* 0BE8 */  0xBD, 0x80, 0xB0, 0x70, 0x6B, 0x13, 0x88, 0x23,  // ...pk..#
                /* 0BF0 */  0x99, 0x19, 0x0A, 0xFD, 0xD6, 0x09, 0xC4, 0x61,  // .......a
                /* 0BF8 */  0xED, 0x80, 0x30, 0x09, 0x7E, 0x40, 0x98, 0xF4,  // ..0.~@..
                /* 0C00 */  0x05, 0x0B, 0x8C, 0x18, 0x02, 0x61, 0xA2, 0x1C,  // .....a..
                /* 0C08 */  0x81, 0x30, 0x91, 0x92, 0x86, 0x44, 0x3D, 0x81,  // .0...D=.
                /* 0C10 */  0xB0, 0x18, 0x20, 0x54, 0x90, 0xA9, 0xD3, 0xBE,  // .. T....
                /* 0C18 */  0x40, 0x24, 0x0F, 0x44, 0x40, 0x16, 0xEC, 0x0A,  // @$.D@...
                /* 0C20 */  0x88, 0xC9, 0x07, 0x11, 0x90, 0x43, 0xDB, 0x02,  // .....C..
                /* 0C28 */  0x62, 0x12, 0x7E, 0x22, 0x02, 0x72, 0x86, 0x27,  // b.~".r.'
                /* 0C30 */  0xB2, 0x80, 0x1C, 0x08, 0x44, 0x40, 0x8E, 0xB5,  // ....D@..
                /* 0C38 */  0x5E, 0x01, 0x39, 0x24, 0x88, 0x80, 0x2C, 0x50,  // ^.9$..,P
                /* 0C40 */  0x1A, 0x10, 0x53, 0x0B, 0x22, 0x20, 0x0B, 0xB7,  // ..S." ..
                /* 0C48 */  0x06, 0xC4, 0x62, 0x80, 0x08, 0xC8, 0xC9, 0xBD,  // ..b.....
                /* 0C50 */  0x01, 0x31, 0x19, 0xAF, 0x57, 0x01, 0x59, 0x8C,  // .1..W.Y.
                /* 0C58 */  0x39, 0x20, 0x26, 0x0D, 0x44, 0x40, 0x4E, 0xE7,  // 9 &.D@N.
                /* 0C60 */  0x0E, 0x88, 0x45, 0x05, 0x11, 0x90, 0xE3, 0xCB,  // ..E.....
                /* 0C68 */  0x03, 0x62, 0x62, 0xEC, 0x0D, 0x98, 0xFA, 0x03,  // .bb.....
                /* 0C70 */  0x62, 0x01, 0x41, 0x04, 0x64, 0x89, 0x0F, 0x98,  // b.A.d...
                /* 0C78 */  0x40, 0x44, 0x30, 0x88, 0x80, 0xFC, 0xFF, 0x07   // @D0.....
            })
        }
    }
}



SSDT11
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "CB-01   ", 0x00000001)
{
    Scope (\_SB)
    {
        Name (MDSZ, 0x01E0)
        OperationRegion (PDSP, SystemIO, 0xB0, One)
        Field (PDSP, ByteAcc, NoLock, Preserve)
        {
            IOB2,   8
        }

        OperationRegion (GPCD, SystemMemory, 0xBAA5E000, 0x0200)
        Field (GPCD, AnyAcc, NoLock, Preserve)
        {
            DTSZ,   32, 
            TKNO,   32, 
            PTYP,   8, 
            I_PS,   8, 
            PACT,   8, 
            RSVD,   40, 
            PGUI,   128, 
            DBUF,   3840
        }

        Method (PCDE, 2, Serialized)
        {
            PGUI = Arg0
            TKNO = Arg1
            Local0 = Zero
            IOB2 = 0x17
            If ((I_PS == Zero))
            {
                If ((DTSZ <= MDSZ))
                {
                    Mid (DBUF, Zero, DTSZ, Local0)
                }
            }

            Return (Local0)
        }

        Method (HBID, 0, NotSerialized)
        {
            Local0 = \_SB.PCDE (Buffer (0x10)
                    {
                        /* 0000 */  0x83, 0x18, 0x1F, 0xC5, 0x00, 0xDF, 0x6A, 0x4F,  // ......jO
                        /* 0008 */  0x08, 0xA0, 0x36, 0x9F, 0x60, 0x98, 0xFD, 0xAF   // ..6.`...
                    }, 0x20000032)
            Return (Local0)
        }
    }
}



SSDT12
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_ADR, IntObj)
    External (_SB_.PCI0.DADR, IntObj)
    External (_SB_.PCI0.EBUS, IntObj)
    External (_SB_.PCI0.GP17, DeviceObj)
    External (_SB_.PCI0.GP17.ACP_, DeviceObj)
    External (_SB_.PCI0.GP17.AZAL, DeviceObj)
    External (_SB_.PCI0.GP17.HDAU, DeviceObj)
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (_SB_.PCI0.GP17.XHC0, DeviceObj)
    External (_SB_.PCI0.GP17.XHC1, DeviceObj)
    External (_SB_.PCI0.RPRM, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.SPCH, MethodObj)    // 2 Arguments
    External (M000, MethodObj)    // 1 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (M652, FieldUnitObj)
    External (P_OF, MethodObj)    // 0 Arguments
    External (P_ON, MethodObj)    // 0 Arguments
    External (PPS0, MethodObj)    // 0 Arguments
    External (PPS3, MethodObj)    // 0 Arguments
    External (PSTA, MethodObj)    // 0 Arguments
    External (SDSW, MethodObj)    // 3 Arguments
    External (SINI, MethodObj)    // 0 Arguments
    External (SREG, MethodObj)    // 2 Arguments
    External (SSTA, MethodObj)    // 0 Arguments

    Scope (\)
    {
        Name (P1D3, 0x55)
        Name (F0D3, 0x04)
        Name (F3D3, 0x04)
        Name (F1D3, 0x04)
        Name (F5D3, 0x04)
        Name (F6D3, 0x04)
        Name (F5WV, 0x55)
    }

    Scope (\_SB.PCI0.GP17)
    {
        Method (ZS0W, 0, Serialized)
        {
            Local0 = Zero
            If ((\P1D3 != 0x55))
            {
                Local0 = \P1D3
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Method (ZPRW, 0, Serialized)
        {
            Return (Package (0x02)
            {
                0x19, 
                0x04
            })
        }

        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, Zero)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, Zero)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GP17.RPRM.VARR */
            If ((Arg1 == One))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == One))
            {
                OperationRegion (VARA, SystemMemory, Local0, One)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = Zero
            Local0 = Zero
            While ((Local0 <= 0x1F))
            {
                Local1 = Zero
                While ((Local1 <= 0x07))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != Zero)))
                    {
                        Local2 |= (One << Local0)
                    }
                    ElseIf ((Local1 == Zero))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = Zero
            Local1 = RPRM ((Arg0 + 0x34), One)
            While ((Local1 != Zero))
            {
                Local2 = RPRM ((DADR + Local1), One)
                If (((Local2 == Zero) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + One)), One)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* External reference */
                    }
                    Else
                    {
                        DBUS = Zero
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            One) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        DSTA = Zero
                        ESTA = Zero
                        If ((DBUS != Zero))
                        {
                            Local2 = ^^SPCH (^^DADR, 0x10)
                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                0x40) == 0x40))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), One)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            One) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == Zero))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            One) & 0x40) == Zero))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                0x40) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == Zero))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = Zero
                    }
                }
                Else
                {
                    DSTA = Zero
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
            {
                PWST = 0xD0
            }

            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
            {
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            Return (DSTA) /* \_SB_.PCI0.GP17.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + Zero), 0x04)
            If (((Local1 == Local0) || (Local1 == Zero)))
            {
                PCSA = Zero
                PWST = 0xD3
                PW3S = Zero
            }
            Else
            {
                PCSA = One
                PWST = 0xD0
                PW3S = One
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == One)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                    {
                        PCSA = One
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == Zero)))
            {
                PCSA = Zero
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If (CondRefOf (SDSW))
            {
                SDSW (Arg0, Arg1, Arg2)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                If (CondRefOf (PSTA))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP17.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == Zero))
                {
                    PW3S = One
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == One))
                {
                    PW3S = Zero
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
    }

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
        {
            Local0 = Zero
            If ((\F0D3 != 0x55))
            {
                Local0 = \F0D3
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, Zero)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, Zero)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GP17.VGA_.RPRM.VARR */
            If ((Arg1 == One))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == One))
            {
                OperationRegion (VARA, SystemMemory, Local0, One)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = Zero
            Local0 = Zero
            While ((Local0 <= 0x1F))
            {
                Local1 = Zero
                While ((Local1 <= 0x07))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != Zero)))
                    {
                        Local2 |= (One << Local0)
                    }
                    ElseIf ((Local1 == Zero))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = Zero
            Local1 = RPRM ((Arg0 + 0x34), One)
            While ((Local1 != Zero))
            {
                Local2 = RPRM ((DADR + Local1), One)
                If (((Local2 == Zero) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + One)), One)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* \_SB_.PCI0.GP17.EBUS */
                    }
                    Else
                    {
                        DBUS = Zero
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            One) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        DSTA = Zero
                        ESTA = Zero
                        If ((DBUS != Zero))
                        {
                            Local2 = ^^SPCH (^^DADR, 0x10)
                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                0x40) == 0x40))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), One)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            One) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == Zero))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            One) & 0x40) == Zero))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                0x40) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == Zero))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = Zero
                    }
                }
                Else
                {
                    DSTA = Zero
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
            {
                PWST = 0xD0
            }

            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
            {
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            Return (DSTA) /* \_SB_.PCI0.GP17.VGA_.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + Zero), 0x04)
            If (((Local1 == Local0) || (Local1 == Zero)))
            {
                PCSA = Zero
                PWST = 0xD3
                PW3S = Zero
            }
            Else
            {
                PCSA = One
                PWST = 0xD0
                PW3S = One
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == One)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                    {
                        PCSA = One
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == Zero)))
            {
                PCSA = Zero
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If (CondRefOf (SDSW))
            {
                SDSW (Arg0, Arg1, Arg2)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                If (CondRefOf (PSTA))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP17.VGA_.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == Zero))
                {
                    PW3S = One
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == One))
                {
                    PW3S = Zero
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
    }

    Scope (\_SB.PCI0.GP17.HDAU)
    {
        Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
        {
            Local0 = Zero
            If ((\F1D3 != 0x55))
            {
                Local0 = \F1D3
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, Zero)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, Zero)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GP17.HDAU.RPRM.VARR */
            If ((Arg1 == One))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == One))
            {
                OperationRegion (VARA, SystemMemory, Local0, One)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = Zero
            Local0 = Zero
            While ((Local0 <= 0x1F))
            {
                Local1 = Zero
                While ((Local1 <= 0x07))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != Zero)))
                    {
                        Local2 |= (One << Local0)
                    }
                    ElseIf ((Local1 == Zero))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = Zero
            Local1 = RPRM ((Arg0 + 0x34), One)
            While ((Local1 != Zero))
            {
                Local2 = RPRM ((DADR + Local1), One)
                If (((Local2 == Zero) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + One)), One)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* \_SB_.PCI0.GP17.EBUS */
                    }
                    Else
                    {
                        DBUS = Zero
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            One) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        DSTA = Zero
                        ESTA = Zero
                        If ((DBUS != Zero))
                        {
                            Local2 = ^^SPCH (^^DADR, 0x10)
                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                0x40) == 0x40))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), One)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            One) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == Zero))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            One) & 0x40) == Zero))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                0x40) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == Zero))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = Zero
                    }
                }
                Else
                {
                    DSTA = Zero
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
            {
                PWST = 0xD0
            }

            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
            {
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            Return (DSTA) /* \_SB_.PCI0.GP17.HDAU.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + Zero), 0x04)
            If (((Local1 == Local0) || (Local1 == Zero)))
            {
                PCSA = Zero
                PWST = 0xD3
                PW3S = Zero
            }
            Else
            {
                PCSA = One
                PWST = 0xD0
                PW3S = One
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == One)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                    {
                        PCSA = One
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == Zero)))
            {
                PCSA = Zero
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If (CondRefOf (SDSW))
            {
                SDSW (Arg0, Arg1, Arg2)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                If (CondRefOf (PSTA))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP17.HDAU.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == Zero))
                {
                    PW3S = One
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == One))
                {
                    PW3S = Zero
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
    }

    Scope (\_SB.PCI0.GP17.XHC0)
    {
        Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
        {
            Local0 = Zero
            If ((\F3D3 != 0x55))
            {
                Local0 = \F3D3
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PRW ()  Return Package (2) {0x19, 0x04}\n", DADR, Zero, Zero, Zero, Zero, Zero)
            Return (Package (0x02)
            {
                0x19, 
                0x03
            })
        }

        Method (PPS0, 0, Serialized)
        {
            M000 (0x3C01)
        }

        Method (PPS3, 0, Serialized)
        {
            M000 (0x3C03)
        }

        Method (PSTA, 0, Serialized)
        {
            M000 (0x3C05)
        }

        Method (P_ON, 0, Serialized)
        {
            M000 (0x3C06)
        }

        Method (P_OF, 0, Serialized)
        {
            M000 (0x3C08)
        }

        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, Zero)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, Zero)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GP17.XHC0.RPRM.VARR */
            If ((Arg1 == One))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == One))
            {
                OperationRegion (VARA, SystemMemory, Local0, One)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = Zero
            Local0 = Zero
            While ((Local0 <= 0x1F))
            {
                Local1 = Zero
                While ((Local1 <= 0x07))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != Zero)))
                    {
                        Local2 |= (One << Local0)
                    }
                    ElseIf ((Local1 == Zero))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = Zero
            Local1 = RPRM ((Arg0 + 0x34), One)
            While ((Local1 != Zero))
            {
                Local2 = RPRM ((DADR + Local1), One)
                If (((Local2 == Zero) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + One)), One)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* \_SB_.PCI0.GP17.EBUS */
                    }
                    Else
                    {
                        DBUS = Zero
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            One) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        DSTA = Zero
                        ESTA = Zero
                        If ((DBUS != Zero))
                        {
                            Local2 = ^^SPCH (^^DADR, 0x10)
                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                0x40) == 0x40))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), One)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            One) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == Zero))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            One) & 0x40) == Zero))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                0x40) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == Zero))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = Zero
                    }
                }
                Else
                {
                    DSTA = Zero
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
            {
                PWST = 0xD0
            }

            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
            {
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            Return (DSTA) /* \_SB_.PCI0.GP17.XHC0.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + Zero), 0x04)
            If (((Local1 == Local0) || (Local1 == Zero)))
            {
                PCSA = Zero
                PWST = 0xD3
                PW3S = Zero
            }
            Else
            {
                PCSA = One
                PWST = 0xD0
                PW3S = One
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == One)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                    {
                        PCSA = One
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == Zero)))
            {
                PCSA = Zero
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If (CondRefOf (SDSW))
            {
                SDSW (Arg0, Arg1, Arg2)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                If (CondRefOf (PSTA))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP17.XHC0.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == Zero))
                {
                    PW3S = One
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == One))
                {
                    PW3S = Zero
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
    }

    Scope (\_SB.PCI0.GP17.XHC1)
    {
        Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
        {
            Local0 = Zero
            If ((\F3D3 != 0x55))
            {
                Local0 = \F3D3
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PRW ()  Return Package (2) {0x19, 0x04}\n", DADR, Zero, Zero, Zero, Zero, Zero)
            Return (Package (0x02)
            {
                0x19, 
                0x03
            })
        }

        Method (PPS0, 0, Serialized)
        {
            M000 (0x3D01)
        }

        Method (PPS3, 0, Serialized)
        {
            M000 (0x3D03)
        }

        Method (PSTA, 0, Serialized)
        {
            M000 (0x3D05)
        }

        Method (P_ON, 0, Serialized)
        {
            M000 (0x3D06)
        }

        Method (P_OF, 0, Serialized)
        {
            M000 (0x3D08)
        }

        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, Zero)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, Zero)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GP17.XHC1.RPRM.VARR */
            If ((Arg1 == One))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == One))
            {
                OperationRegion (VARA, SystemMemory, Local0, One)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = Zero
            Local0 = Zero
            While ((Local0 <= 0x1F))
            {
                Local1 = Zero
                While ((Local1 <= 0x07))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != Zero)))
                    {
                        Local2 |= (One << Local0)
                    }
                    ElseIf ((Local1 == Zero))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = Zero
            Local1 = RPRM ((Arg0 + 0x34), One)
            While ((Local1 != Zero))
            {
                Local2 = RPRM ((DADR + Local1), One)
                If (((Local2 == Zero) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + One)), One)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* \_SB_.PCI0.GP17.EBUS */
                    }
                    Else
                    {
                        DBUS = Zero
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            One) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        DSTA = Zero
                        ESTA = Zero
                        If ((DBUS != Zero))
                        {
                            Local2 = ^^SPCH (^^DADR, 0x10)
                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                0x40) == 0x40))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), One)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            One) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == Zero))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            One) & 0x40) == Zero))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                0x40) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == Zero))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = Zero
                    }
                }
                Else
                {
                    DSTA = Zero
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
            {
                PWST = 0xD0
            }

            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
            {
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            Return (DSTA) /* \_SB_.PCI0.GP17.XHC1.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + Zero), 0x04)
            If (((Local1 == Local0) || (Local1 == Zero)))
            {
                PCSA = Zero
                PWST = 0xD3
                PW3S = Zero
            }
            Else
            {
                PCSA = One
                PWST = 0xD0
                PW3S = One
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == One)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                    {
                        PCSA = One
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == Zero)))
            {
                PCSA = Zero
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If (CondRefOf (SDSW))
            {
                SDSW (Arg0, Arg1, Arg2)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                If (CondRefOf (PSTA))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP17.XHC1.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == Zero))
                {
                    PW3S = One
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == One))
                {
                    PW3S = Zero
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
    }

    Scope (\_SB.PCI0.GP17.ACP)
    {
        Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
        {
            Local0 = Zero
            If ((\F5D3 != 0x55))
            {
                Local0 = \F5D3
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, Zero)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, Zero)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GP17.ACP_.RPRM.VARR */
            If ((Arg1 == One))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == One))
            {
                OperationRegion (VARA, SystemMemory, Local0, One)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = Zero
            Local0 = Zero
            While ((Local0 <= 0x1F))
            {
                Local1 = Zero
                While ((Local1 <= 0x07))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != Zero)))
                    {
                        Local2 |= (One << Local0)
                    }
                    ElseIf ((Local1 == Zero))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = Zero
            Local1 = RPRM ((Arg0 + 0x34), One)
            While ((Local1 != Zero))
            {
                Local2 = RPRM ((DADR + Local1), One)
                If (((Local2 == Zero) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + One)), One)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* \_SB_.PCI0.GP17.EBUS */
                    }
                    Else
                    {
                        DBUS = Zero
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            One) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        DSTA = Zero
                        ESTA = Zero
                        If ((DBUS != Zero))
                        {
                            Local2 = ^^SPCH (^^DADR, 0x10)
                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                0x40) == 0x40))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), One)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            One) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == Zero))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            One) & 0x40) == Zero))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                0x40) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == Zero))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = Zero
                    }
                }
                Else
                {
                    DSTA = Zero
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
            {
                PWST = 0xD0
            }

            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
            {
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            Return (DSTA) /* \_SB_.PCI0.GP17.ACP_.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + Zero), 0x04)
            If (((Local1 == Local0) || (Local1 == Zero)))
            {
                PCSA = Zero
                PWST = 0xD3
                PW3S = Zero
            }
            Else
            {
                PCSA = One
                PWST = 0xD0
                PW3S = One
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == One)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                    {
                        PCSA = One
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == Zero)))
            {
                PCSA = Zero
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If (CondRefOf (SDSW))
            {
                SDSW (Arg0, Arg1, Arg2)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                If (CondRefOf (PSTA))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP17.ACP_.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == Zero))
                {
                    PW3S = One
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == One))
                {
                    PW3S = Zero
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
    }

    Scope (\_SB.PCI0.GP17.AZAL)
    {
        Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
        {
            Local0 = Zero
            If ((\F6D3 != 0x55))
            {
                Local0 = \F6D3
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, Zero)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, Zero)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GP17.AZAL.RPRM.VARR */
            If ((Arg1 == One))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == One))
            {
                OperationRegion (VARA, SystemMemory, Local0, One)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = Zero
            Local0 = Zero
            While ((Local0 <= 0x1F))
            {
                Local1 = Zero
                While ((Local1 <= 0x07))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != Zero)))
                    {
                        Local2 |= (One << Local0)
                    }
                    ElseIf ((Local1 == Zero))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = Zero
            Local1 = RPRM ((Arg0 + 0x34), One)
            While ((Local1 != Zero))
            {
                Local2 = RPRM ((DADR + Local1), One)
                If (((Local2 == Zero) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + One)), One)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* \_SB_.PCI0.GP17.EBUS */
                    }
                    Else
                    {
                        DBUS = Zero
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            One) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        DSTA = Zero
                        ESTA = Zero
                        If ((DBUS != Zero))
                        {
                            Local2 = ^^SPCH (^^DADR, 0x10)
                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                0x40) == 0x40))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), One)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            One) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == Zero))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            One) & 0x40) == Zero))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                0x40) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == Zero))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = Zero
                    }
                }
                Else
                {
                    DSTA = Zero
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
            {
                PWST = 0xD0
            }

            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
            {
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            Return (DSTA) /* \_SB_.PCI0.GP17.AZAL.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + Zero), 0x04)
            If (((Local1 == Local0) || (Local1 == Zero)))
            {
                PCSA = Zero
                PWST = 0xD3
                PW3S = Zero
            }
            Else
            {
                PCSA = One
                PWST = 0xD0
                PW3S = One
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == One)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                    {
                        PCSA = One
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == Zero)))
            {
                PCSA = Zero
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If (CondRefOf (SDSW))
            {
                SDSW (Arg0, Arg1, Arg2)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                If (CondRefOf (PSTA))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP17.AZAL.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == Zero))
                {
                    PW3S = One
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == One))
                {
                    PW3S = Zero
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
    }

    Scope (\_SB)
    {
        Method (CK17, 0, NotSerialized)
        {
            Local0 = \_SB.PCI0.GP17.RPRM ((\_SB.PCI0.GP17.DADR + 0x54), 0x02)
            \_SB.PCI0.GP17.WPRM ((\_SB.PCI0.GP17.DADR + 0x54), 0x02, (Local0 & 0x7FFC))
            Local1 = \_SB.PCI0.GP17.VGA.RPRM ((\_SB.PCI0.GP17.VGA.DADR + 0x54), 0x02)
            Local1 = \_SB.PCI0.GP17.HDAU.RPRM ((\_SB.PCI0.GP17.HDAU.DADR + 0x54), 0x02)
            Local1 = \_SB.PCI0.GP17.XHC0.RPRM ((\_SB.PCI0.GP17.XHC0.DADR + 0x54), 0x02)
            Local1 = \_SB.PCI0.GP17.XHC1.RPRM ((\_SB.PCI0.GP17.XHC1.DADR + 0x54), 0x02)
            Local1 = \_SB.PCI0.GP17.ACP.RPRM ((\_SB.PCI0.GP17.ACP.DADR + 0x54), 0x02)
            Local1 = \_SB.PCI0.GP17.AZAL.RPRM ((\_SB.PCI0.GP17.AZAL.DADR + 0x54), 0x02)
            \_SB.PCI0.GP17.WPRM ((\_SB.PCI0.GP17.DADR + 0x54), 0x02, (Local0 & 0x7FFF))
        }
    }

    Scope (\_GPE)
    {
        Method (_L19, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            M460 ("  OEM-ASL-\\_GPE._L19\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_SB.PCI0.GP17))
            {
                M460 ("    Notify (\\_SB.PCI0.GP17, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GP17, 0x02) // Device Wake
            }

            If (CondRefOf (\_SB.PCI0.GP17.XHC0))
            {
                M460 ("    Notify (\\_SB.PCI0.GP17.XHC0, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GP17.XHC0, 0x02) // Device Wake
            }

            If (CondRefOf (\_SB.PCI0.GP17.XHC1))
            {
                M460 ("    Notify (\\_SB.PCI0.GP17.XHC1, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GP17.XHC1, 0x02) // Device Wake
            }
        }
    }
}



SSDT13
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.LID_._LID, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M012, MethodObj)    // 5 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M020, MethodObj)    // 5 Arguments
    External (M021, MethodObj)    // 4 Arguments
    External (M023, MethodObj)    // 3 Arguments
    External (M024, MethodObj)    // 3 Arguments
    External (M025, MethodObj)    // 4 Arguments
    External (M026, MethodObj)    // 3 Arguments
    External (M037, DeviceObj)
    External (M043, MethodObj)    // 3 Arguments
    External (M046, IntObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M04A, MethodObj)    // 2 Arguments
    External (M04B, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M111, MethodObj)    // 2 Arguments
    External (M112, MethodObj)    // 2 Arguments
    External (M113, MethodObj)    // 1 Arguments
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (M652, FieldUnitObj)

    Scope (\_SB)
    {
        Name (MACO, Zero)
    }

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Name (M189, Buffer (0x0100){})
        Name (M190, 0xFFFFFFFF)
        Name (M191, 0xFFFFFFFF)
        Method (ATPX, 2, Serialized)
        {
            M460 ("  FEA-ASL-ATPX Function %d\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            If ((Arg0 == Zero))
            {
                Return (PX00 ())
            }

            If ((Arg0 == One))
            {
                Return (PX01 ())
            }

            If ((Arg0 == 0x02))
            {
                PX02 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x03))
            {
                PX03 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x04))
            {
                PX04 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x08))
            {
                Return (PX08 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (PX09 ())
            }

            If ((Arg0 == 0x0A))
            {
                PX10 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x0B))
            {
                PX11 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x0C))
            {
                PX12 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = Zero
            M158 = Zero
            M160 = Zero
            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX00, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = 0x08
            M158 = One
            M160 = M098 /* External reference */
            If (((M098 & 0x02) == 0x02))
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local0 = M019 (M095, M094, M093, 0x2C)
                Local1 = M019 (M095, M094, (M093 + One), 0x2C)
                If ((Local0 != Local5))
                {
                    M190 = Local0
                }

                If ((Local1 != Local5))
                {
                    M191 = Local1
                }
            }

            M460 ("    Return Supported Functions Bit Vector = 0x%X\n", M160, Zero, Zero, Zero, Zero, Zero)
            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX01, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateDWordField (M189, 0x02, M161)
            CreateDWordField (M189, 0x06, M162)
            M157 = 0x0A
            M161 = 0x000C4800
            M162 = M099 /* External reference */
            M460 ("    Return Valid Flags Mask = 0x%X  Flags = 0x%X\n", M161, M162, Zero, Zero, Zero, Zero)
            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX02, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & One)
            Local7 = Buffer (0x05){}
            CreateWordField (Local7, Zero, M197)
            CreateField (Local7, 0x10, 0x03, M200)
            CreateField (Local7, 0x13, 0x05, M199)
            CreateByteField (Local7, 0x03, M198)
            CreateByteField (Local7, 0x04, M201)
            M197 = 0x05
            M198 = Zero
            M199 = M091 /* External reference */
            M200 = M090 /* External reference */
            Name (HPOK, Zero)
            Local0 = M049 (M133, 0x11)
            Local6 = M113 (Local0)
            M023 (Zero, M091, M090)
            If ((M192 && Local6))
            {
                M000 (0x0D86)
                M112 (Local0, Zero)
                M111 (Local0, One)
                Sleep (0x20)
                M112 (Local0, 0x02)
                M112 (Local0, One)
                M000 (0x0D87)
                HPOK = Zero
                Sleep (0x14)
                M201 = One
                Local6 = \_SB.ALIB (0x06, Local7)
                Local2 = Zero
                While ((Local2 < 0x0F))
                {
                    M023 (Zero, M091, M090)
                    Local4 = One
                    Local5 = 0xC8
                    While ((Local4 && Local5))
                    {
                        Local0 = M021 (Zero, M091, M090, 0xA5)
                        Local0 &= 0x7F
                        If (((Local0 >= 0x10) && (Local0 != 0x7F)))
                        {
                            Local4 = Zero
                        }
                        Else
                        {
                            Sleep (0x05)
                            Local5--
                        }
                    }

                    If (!Local4)
                    {
                        Local5 = M024 (Zero, M091, M090)
                        If (Local5)
                        {
                            M026 (Zero, M091, M090)
                            Sleep (0x05)
                            Local2++
                        }
                        Else
                        {
                            Local0 = Zero
                            If ((M025 (Zero, M091, M090, Zero) == Ones))
                            {
                                Local0 = One
                            }

                            If (Local0)
                            {
                                M111 (M049 (M133, 0x17), One)
                                M111 (M049 (M133, 0x18), One)
                                HPOK = One
                                Local2 = 0x10
                            }
                            Else
                            {
                                HPOK = Zero
                                Local2 = 0x10
                            }
                        }
                    }
                    Else
                    {
                        Local2 = 0x10
                    }
                }

                If (!HPOK)
                {
                    M000 (0x0D88)
                    Local1 = M019 (M095, M094, M093, Zero)
                    Sleep (0x0A)
                    Local4 = One
                    Local5 = 0x05
                    While ((Local4 && Local5))
                    {
                        Local0 = M021 (Zero, M091, M090, 0xA5)
                        Local0 &= 0x7F
                        If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                        {
                            Local4 = Zero
                        }
                        Else
                        {
                            Local0 = M019 (M095, M094, M093, Zero)
                            Sleep (0x05)
                            Local5--
                        }
                    }

                    M201 = Zero
                    \_SB.ALIB (0x06, Local7)
                }

                If ((M097 != Zero))
                {
                    Local0 = M019 (Zero, M091, M090, 0x54)
                    M020 (Zero, M091, M090, 0x54, (Local0 & 0xFFFF7FFC))
                    M232 (M097, Zero, 0x10)
                    M020 (Zero, M091, M090, 0x54, (Local0 & 0xFFFF7FFF))
                }

                M000 (0x0D89)
            }
            Else
            {
                M000 (0x0D8A)
                M201 = Zero
                \_SB.ALIB (0x06, Local7)
                M000 (0x0D8B)
                M111 (M049 (M133, 0x17), Zero)
                M111 (M049 (M133, 0x18), Zero)
                M112 (Local0, Zero)
                Sleep (0x0A)
                M111 (Local0, Zero)
                M023 (Zero, M091, M090)
                Local1 = M019 (M095, M094, M093, Zero)
                Sleep (0x0A)
                Local4 = One
                Local5 = 0x05
                While ((Local4 && Local5))
                {
                    Local0 = M021 (Zero, M091, M090, 0xA5)
                    Local0 &= 0x7F
                    If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                    {
                        Local4 = Zero
                    }
                    Else
                    {
                        Local1 = M019 (M095, M094, M093, Zero)
                        Sleep (0x05)
                        Local5--
                    }
                }

                HPOK = 0x02
                M000 (0x0D8C)
            }

            If (HPOK)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local1 = M019 (Zero, M091, M090, 0x54)
                M020 (Zero, M091, M090, 0x54, (Local1 & 0xFFFF7FFC))
                Local0 = M019 (M095, M094, M093, Zero)
                If (((HPOK == One) && (Local0 != Local5)))
                {
                    M020 (M095, M094, M093, 0x4C, M190)
                    Sleep (0x0A)
                    If ((M191 != Local5))
                    {
                        M020 (M095, M094, (M093 + One), 0x4C, M191)
                    }

                    Sleep (0x0A)
                }

                M020 (Zero, M091, M090, 0x54, (Local1 & 0xFFFF7FFF))
            }
        }

        Method (PX03, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M195)
            M157 = 0x04
            M195 = (Arg0 & One)
            If (M195)
            {
                M111 (M049 (M133, 0x17), One)
            }
            Else
            {
                M111 (M049 (M133, 0x17), Zero)
            }
        }

        Method (PX04, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M196)
            M157 = 0x04
            M196 = (Arg0 & One)
            If (M196)
            {
                M111 (M049 (M133, 0x18), One)
            }
            Else
            {
                M111 (M049 (M133, 0x18), Zero)
            }
        }

        Method (PX08, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M193)
            CreateWordField (M189, 0x02, M157)
            Local0 = M049 (M133, 0x19)
            M193 = Local0
            M157 = 0x05
            Local0 *= M157 /* \_SB_.PCI0.GP17.VGA_.PX08.M157 */
            Local1 = Zero
            While ((Local1 < Local0))
            {
                Local2 = M049 (M133, (0x1A + Local1))
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX09, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M193)
            CreateWordField (M189, 0x02, M157)
            Local0 = M049 (M133, 0x7E)
            M193 = Local0
            M157 = 0x03
            Local0 *= M157 /* \_SB_.PCI0.GP17.VGA_.PX09.M157 */
            Local1 = Zero
            While ((Local1 < Local0))
            {
                Local2 = M049 (M133, (0x7F + Local1))
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX10, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & One)
            \_SB.MACO = (Arg0 & One)
            M460 ("    Set _SB.MACO to %d\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        }

        Method (PX11, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M162)
            M157 = 0x03
            M162 = (Arg0 & One)
            Local2 = M162 /* \_SB_.PCI0.GP17.VGA_.PX11.M162 */
            Local0 = M131 /* External reference */
            If (Local0)
            {
                Local0 = M049 (M131, 0x10)
                Local1 = M049 (M131, 0x11)
                Local1 = (M084 + ((Local0 * 0x0100) + Local1))
                M012 (Local1, 0x0E, Zero, One, Local2)
            }
        }

        Method (PX12, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M162)
            M157 = 0x03
            Local0 = M049 (M133, 0x17)
            If ((Local0 != Zero))
            {
                M111 (Local0, (Arg0 & One))
            }

            M460 ("    Set Display Panel Reset to %d\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        }

        Name (ATIB, Buffer (0x0100){})
        Name (M291, 0x81)
        Method (ATIF, 2, Serialized)
        {
            M460 ("  FEA-ASL-ATIF Function %d\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            If ((Arg0 == Zero))
            {
                Return (AF00 ())
            }

            If ((Arg0 == One))
            {
                Return (AF01 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (AF02 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (AF03 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x04])))
            }

            If ((Arg0 == 0x04))
            {
                Return (AF04 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (AF15 ())
            }

            If ((Arg0 == 0x10))
            {
                Return (AF16 (DerefOf (Arg1 [0x02])))
            }

            If ((Arg0 == 0x15))
            {
                Return (AF21 ())
            }

            If ((Arg0 == 0x16))
            {
                Return (AF22 ())
            }

            If ((Arg0 == 0x17))
            {
                Return (AF23 ())
            }

            If ((Arg0 == 0x18))
            {
                Return (AF24 ())
            }

            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M158)
            CreateDWordField (ATIB, 0x04, M159)
            CreateDWordField (ATIB, 0x08, M160)
            M157 = Zero
            M158 = Zero
            M159 = Zero
            M160 = Zero
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF00, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M158)
            CreateDWordField (ATIB, 0x04, M159)
            CreateDWordField (ATIB, 0x08, M160)
            M157 = 0x0C
            M158 = One
            M159 = M101 /* External reference */
            If (!CondRefOf (\_SB.LID._LID))
            {
                M102 &= 0xFFFFFFF7
            }

            M160 = M102 /* External reference */
            M460 ("    Return Supported Notifications Mask = 0x%X  Supported Functions Bit Vector = 0x%X\n", M159, M160, Zero, Zero, Zero, Zero)
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF01, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M161)
            CreateDWordField (ATIB, 0x06, M162)
            CreateByteField (ATIB, 0x0A, M163)
            M161 = 0x03
            Local0 = ((M103 >> 0x18) & 0xFF)
            Local1 = (M103 & 0x03)
            M162 = Local1
            If (((Local0 >= 0xD0) && (Local0 <= 0xD9)))
            {
                M157 = 0x0B
                M163 = Local0
                M291 = Local0
            }
            Else
            {
                M157 = 0x0A
                If ((M291 != 0x81))
                {
                    M291 = 0x81
                }
            }

            M460 ("    Return Flags = 0x%X  Notify Command Code = 0x%X\n", M162, M291, Zero, Zero, Zero, Zero)
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Name (M164, Buffer (0x04)
        {
             0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (M210, Zero)
        Name (M211, Zero)
        Name (M212, Zero)
        Name (M213, Zero)
        Name (M214, Zero)
        Name (M215, Zero)
        Name (M303, Zero)
        Name (M304, Zero)
        Name (SSDM, 0x0A)
        Name (SCDY, Zero)
        Method (AF02, 0, NotSerialized)
        {
            CreateBitField (M164, Zero, M165)
            CreateBitField (M164, One, M166)
            CreateBitField (M164, 0x02, M167)
            CreateBitField (M164, 0x03, M168)
            CreateBitField (M164, 0x04, M169)
            CreateBitField (M164, 0x05, M170)
            CreateBitField (M164, 0x06, M171)
            CreateBitField (M164, 0x07, M172)
            CreateBitField (M164, 0x08, M173)
            CreateBitField (M164, 0x0C, M300)
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M174)
            CreateByteField (ATIB, 0x06, M175)
            CreateByteField (ATIB, 0x07, M176)
            CreateByteField (ATIB, 0x08, M177)
            CreateByteField (ATIB, 0x09, M178)
            CreateByteField (ATIB, 0x0A, M179)
            CreateByteField (ATIB, 0x0B, M180)
            CreateByteField (ATIB, 0x0C, M181)
            CreateByteField (ATIB, 0x0D, M301)
            CreateDWordField (ATIB, 0x0E, M302)
            ATIB = Zero
            M157 = 0x12
            M174 = M164 /* \_SB_.PCI0.GP17.VGA_.M164 */
            If (M165)
            {
                M165 = Zero
            }

            If (M166)
            {
                M175 = M210 /* \_SB_.PCI0.GP17.VGA_.M210 */
                M210 = Zero
                M166 = Zero
            }

            If (M167)
            {
                M176 = M211 /* \_SB_.PCI0.GP17.VGA_.M211 */
                M177 = M212 /* \_SB_.PCI0.GP17.VGA_.M212 */
                M211 = Zero
                M212 = Zero
                M167 = Zero
            }

            If (M168)
            {
                M178 = M213 /* \_SB_.PCI0.GP17.VGA_.M213 */
                M179 = M214 /* \_SB_.PCI0.GP17.VGA_.M214 */
                M213 = Zero
                M214 = Zero
                M168 = Zero
            }

            If (M169)
            {
                M180 = M215 /* \_SB_.PCI0.GP17.VGA_.M215 */
                M169 = Zero
            }

            If (M171)
            {
                M171 = Zero
            }

            If (M172)
            {
                M172 = Zero
            }

            If (M173)
            {
                M173 = Zero
            }

            If (M300)
            {
                M301 = M303 /* \_SB_.PCI0.GP17.VGA_.M303 */
                M302 = M304 /* \_SB_.PCI0.GP17.VGA_.M304 */
                M303 = Zero
                M304 = Zero
                M300 = Zero
            }

            M460 ("    Return Pending System BIOS Requests                        = 0x%X\n", M174, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Expansion Mode                                      = 0x%X\n", M175, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Thermal State: Target Graphics Controller           = 0x%X\n", M176, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Thermal State: State Id                             = 0x%X\n", M177, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Forced Power State: Target Graphics Controller      = 0x%X\n", M178, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Forced Power State: State Id                        = 0x%X\n", M179, Zero, Zero, Zero, Zero, Zero)
            M460 ("           System Power Source                                 = 0x%X\n", M180, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Panel Brightness Backlight Level                    = 0x%X\n", M181, Zero, Zero, Zero, Zero, Zero)
            M460 ("           GPU Package Power Limit: Target Graphics Controller = 0x%X\n", M301, Zero, Zero, Zero, Zero, Zero)
            M460 ("           GPU Package Power Limit: Value                      = 0x%X\n", M302, Zero, Zero, Zero, Zero, Zero)
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF03, 2, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M182)
            CreateWordField (ATIB, 0x04, M183)
            M182 = Arg0
            M183 = Arg1
            Name (M184, 0x06)
            Name (M185, 0x06)
            Name (M186, Buffer (0x14)
            {
                 0x00                                             // .
            })
            Name (M187, Zero)
            M187 = M049 (M133, 0xBF)
            Local1 = Zero
            While ((Local1 < M187))
            {
                Local2 = M049 (M133, (0xC0 + Local1))
                M186 [Local1] = Local2
                Local1++
            }

            Local1 = M182 /* \_SB_.PCI0.GP17.VGA_.AF03.M182 */
            Local1 &= 0x8B
            Local2 = M183 /* \_SB_.PCI0.GP17.VGA_.AF03.M183 */
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID ()
                Local2 &= 0xFFFFFFFFFFFFFFFE
                Local2 |= Local0
            }

            Local0 = Zero
            While ((Local0 < M187))
            {
                Local3 = DerefOf (M186 [Local0])
                If ((Local3 == Local1))
                {
                    M185 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GP17.VGA_.AF03.M187 */
                }
                Else
                {
                    Local0++
                }
            }

            Local0 = M185 /* \_SB_.PCI0.GP17.VGA_.AF03.M185 */
            While ((Local0 < M187))
            {
                Local0++
                If ((Local0 == M187))
                {
                    Local0 = Zero
                }

                Local3 = DerefOf (M186 [Local0])
                If (((Local3 & Local2) == Local3))
                {
                    M184 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GP17.VGA_.AF03.M187 */
                }
            }

            If ((M184 == M187))
            {
                M182 = Zero
            }
            Else
            {
                Local0 = M184 /* \_SB_.PCI0.GP17.VGA_.AF03.M184 */
                Local3 = DerefOf (M186 [Local0])
                M182 &= 0xFFFFFFFFFFFFFFF4
                M182 |= Local3
            }

            M157 = 0x04
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF04, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateByteField (ATIB, 0x02, M188)
            M157 = 0x03
            Local1 = Zero
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID ()
                Local1 = (Local0 ^ One)
            }

            M188 = Local1
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF15, 0, NotSerialized)
        {
            ATIB = M104 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF16, 1, NotSerialized)
        {
            Local0 = M04A (M133, 0xD4)
            If ((Local0 != Zero))
            {
                Local1 = Zero
                While ((Local1 < Local0))
                {
                    Local2 = M049 (M133, (0xD4 + Local1))
                    ATIB [Local1] = Local2
                    Local1++
                }
            }
            Else
            {
                Local3 = M043 (Zero, Arg0, Zero)
                If ((ObjectType (Local3) == 0x03))
                {
                    ATIB = Local3
                }
                Else
                {
                    ATIB [Zero] = 0x05
                    ATIB [One] = Zero
                    ATIB [0x02] = Zero
                    ATIB [0x03] = Zero
                    ATIB [0x04] = 0x02
                }
            }

            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M162)
            CreateByteField (ATIB, 0x04, M292)
            CreateByteField (ATIB, 0x05, M293)
            CreateByteField (ATIB, 0x06, M294)
            CreateByteField (ATIB, 0x07, M295)
            CreateByteField (ATIB, 0x08, M296)
            CreateByteField (ATIB, 0x09, M297)
            M460 ("    Return Structure Size         = 0x%X\n", M157, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Flags                  = 0x%X\n", M162, Zero, Zero, Zero, Zero, Zero)
            M460 ("           Error Code             = 0x%X\n", M292, Zero, Zero, Zero, Zero, Zero)
            If ((M157 > 0x05))
            {
                M460 ("           AC Level               = 0x%X\n", M293, Zero, Zero, Zero, Zero, Zero)
                M460 ("           DC Level               = 0x%X\n", M294, Zero, Zero, Zero, Zero, Zero)
                M460 ("           Min Input Signal Level = 0x%X\n", M295, Zero, Zero, Zero, Zero, Zero)
                M460 ("           Max Input Signal Level = 0x%X\n", M296, Zero, Zero, Zero, Zero, Zero)
                M460 ("           Count                  = %d\n", M297, Zero, Zero, Zero, Zero, Zero)
                If ((M157 > 0x0A))
                {
                    Local1 = 0x0A
                    While ((Local1 < M157))
                    {
                        Local2 = DerefOf (ATIB [Local1])
                        Local1++
                        Local3 = DerefOf (ATIB [Local1])
                        Local1++
                        Local4 = ((Local1 - 0x0A) >> One)
                        M460 ("           Count[%d]  Luminance Level = 0x%X  Signal Level = %d\n", Local4, Local2, Local3, Zero, Zero, Zero)
                    }
                }
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF21, 0, NotSerialized)
        {
            ATIB = M29A /* External reference */
            CreateWordField (ATIB, Zero, M297)
            CreateWordField (ATIB, 0x02, M157)
            M460 ("    Return Num Devices            = 0x%X\n", M297, Zero, Zero, Zero, Zero, Zero)
            M460 ("    Return Device Structure size  = 0x%X\n", M157, Zero, Zero, Zero, Zero, Zero)
            Local0 = Zero
            If (((M297 > Zero) && (M297 < 0x04)))
            {
                While ((Local0 < M297))
                {
                    Local1 = ((Local0 << 0x02) + 0x04)
                    Local2 = (Local1 + 0x02)
                    Local3 = DerefOf (ATIB [Local1])
                    Local4 = DerefOf (ATIB [Local2])
                    M460 ("    Return Device Structure [%d] Flags              = 0x%X\n", Local0, Local3, Zero, Zero, Zero, Zero)
                    M460 ("    Return Device Structure [%d] Bus                = 0x%X\n", Local0, Local4, Zero, Zero, Zero, Zero)
                    Local0++
                }
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF22, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateByteField (ATIB, 0x02, M298)
            CreateDWordField (ATIB, 0x03, M299)
            Local0 = M049 (M133, 0x01F9)
            If ((Local0 >= One))
            {
                M157 = 0x07
                Local0--
                M298 = Local0
                M299 = M04B (M133, 0x01FA)
            }
            Else
            {
                M157 = Zero
                M298 = Zero
                M299 = Zero
            }

            M460 ("    Return Structure Size         = 0x%X\n", M157, Zero, Zero, Zero, Zero, Zero)
            M460 ("           GPU Package Power Limit: Target Graphics Controller = %d\n", M298, Zero, Zero, Zero, Zero, Zero)
            M460 ("           GPU Package Power Limit: Value                      = 0x%X\n", M299, Zero, Zero, Zero, Zero, Zero)
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF23, 0, NotSerialized)
        {
            ATIB = M449 /* External reference */
            CreateWordField (ATIB, Zero, M157)
            CreateByteField (ATIB, 0x02, M305)
            CreateByteField (ATIB, 0x03, M306)
            CreateByteField (ATIB, 0x04, M307)
            CreateByteField (ATIB, 0x05, M308)
            CreateByteField (ATIB, 0x06, M309)
            CreateByteField (ATIB, 0x07, M30A)
            CreateByteField (ATIB, 0x08, M30B)
            M460 ("    Return Structure Size               = %d\n", M157, Zero, Zero, Zero, Zero, Zero)
            If ((M157 >= 0x02))
            {
                M460 ("           AC Maximum Performance Limit = %d\n", M305, Zero, Zero, Zero, Zero, Zero)
                M460 ("           AC Better Performance Limit  = %d\n", M306, Zero, Zero, Zero, Zero, Zero)
                M460 ("           AC Better Battery Limit      = %d\n", M307, Zero, Zero, Zero, Zero, Zero)
                M460 ("           DC Maximum Performance Limit = %d\n", M308, Zero, Zero, Zero, Zero, Zero)
                M460 ("           DC Better Performance Limit  = %d\n", M309, Zero, Zero, Zero, Zero, Zero)
                M460 ("           DC Better Battery Limit      = %d\n", M30A, Zero, Zero, Zero, Zero, Zero)
                M460 ("           DC Battery Saver Limit       = %d\n", M30B, Zero, Zero, Zero, Zero, Zero)
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF24, 0, NotSerialized)
        {
            ATIB = M652 /* External reference */
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M653)
            M460 ("    Return Structure Size               = %d\n", M157, Zero, Zero, Zero, Zero, Zero)
            M460 ("           ISP Device Number = %d\n", M653, Zero, Zero, Zero, Zero, Zero)
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AFN0, 0, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN0  Supported Notification Mask = 0x%X\n", M101, Zero, Zero, Zero, Zero, Zero)
            If ((M101 & One))
            {
                CreateBitField (M164, Zero, M165)
                M165 = One
                M460 ("    Notify (VGA, 0x%X)\n", M291, Zero, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN1, 1, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN1  Supported Notification Mask = 0x%X  Save Expansion Mode = 0x%X\n", M101, Arg0, Zero, Zero, Zero, Zero)
            If ((M101 & 0x02))
            {
                Local0 = Arg0
                M210 = Local0
                CreateBitField (M164, One, M166)
                M166 = One
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN2, 2, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN2  Supported Notification Mask = 0x%X  Thermal State: State Id = 0x%X  Target Graphics Controller = 0x%X\n", M101, Arg0, Arg1, Zero, Zero, Zero)
            If ((M101 & 0x04))
            {
                Local0 = Arg0
                M212 = Local0
                Local0 = Arg1
                M211 = Local0 &= 0x03
                CreateBitField (M164, 0x02, M167)
                M167 = One
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN3, 2, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN3  Supported Notification Mask = 0x%X  Forced Power State: State Id = 0x%X  Target Graphics Controller = 0x%X\n", M101, Arg0, Arg1, Zero, Zero, Zero)
            If ((M101 & 0x08))
            {
                Local0 = Arg0
                M214 = Local0
                Local0 = Arg1
                M213 = Local0 &= 0x03
                CreateBitField (M164, 0x03, M168)
                M168 = One
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN4, 1, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN4  Supported Notification Mask = 0x%X  System Power Source = 0x%X\n", M101, Arg0, Zero, Zero, Zero, Zero)
            If ((M101 & 0x10))
            {
                Local0 = Arg0
                Local1 = M215 /* \_SB_.PCI0.GP17.VGA_.M215 */
                M215 = Local0
                If ((Local0 != Local1))
                {
                    CreateBitField (M164, 0x04, M169)
                    M169 = One
                    M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                    Notify (VGA, M291)
                }
            }
        }

        Method (AFN5, 0, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN5  Supported Notification Mask = 0x%X\n", M101, Zero, Zero, Zero, Zero, Zero)
            If ((M101 & 0x20))
            {
                CreateBitField (M164, 0x05, M170)
                M170 = One
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN6, 0, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN6  Supported Notification Mask = 0x%X\n", M101, Zero, Zero, Zero, Zero, Zero)
            If ((M101 & 0x40))
            {
                CreateBitField (M164, 0x06, M171)
                M171 = One
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN7, 1, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN7  Supported Notification Mask = 0x%X  Panel Brightness: Backlight Level = 0x%X\n", M101, Arg0, Zero, Zero, Zero, Zero)
            If ((M101 & 0x80))
            {
                CreateBitField (M164, 0x07, M172)
                M172 = One
                CreateByteField (ATIB, 0x0C, M181)
                M181 = Arg0
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }

        Method (AFN8, 0, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFN8  Supported Notification Mask = 0x%X\n", M101, Zero, Zero, Zero, Zero, Zero)
            If ((M101 & 0x0100))
            {
                CreateBitField (M164, 0x08, M173)
                M173 = One
            }
        }

        Method (AFNC, 2, Serialized)
        {
            M460 ("  FEA-ASL-ATIF-AFNC  Supported Notification Mask = 0x%X  Power Limit: Target Graphics Controller = 0x%X  Value = 0x%X\n", M101, Arg0, Arg1, Zero, Zero, Zero)
            If ((M101 & 0x1000))
            {
                Local0 = (Arg0 & 0x03)
                M303 = Local0
                Local0 = (Arg1 & 0xFFFFFFFF)
                M304 = Local0
                CreateBitField (M164, 0x0C, M300)
                M300 = One
                M460 ("    Notify (VGA, 0x%X)  Pending System BIOS Request Buffer = 0x%X\n", M291, M164, Zero, Zero, Zero, Zero)
                Notify (VGA, M291)
            }
        }
    }
}



SSDT14
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "CB-01   ", 0x00000001)
{
    Scope (\_SB)
    {
        Device (TPM2)
        {
            Name (_HID, "MSFT0101" /* TPM 2.0 Security Device */)  // _HID: Hardware ID
            Name (_CID, "MSFT0101" /* TPM 2.0 Security Device */)  // _CID: Compatible ID
            Name (_STR, Unicode ("TPM 2.0 Device"))  // _STR: Description String
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                Memory32Fixed (ReadWrite,
                    0xB2ED2000,         // Address Base
                    0x00004000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xB2ED6000,         // Address Base
                    0x00004000,         // Address Length
                    )
            })
            OperationRegion (SMIP, SystemIO, 0xB0, One)
            Field (SMIP, ByteAcc, NoLock, Preserve)
            {
                IOB2,   8
            }

            OperationRegion (TNVS, SystemMemory, 0xBAEB8000, 0x27)
            Field (TNVS, AnyAcc, NoLock, Preserve)
            {
                PPIN,   8, 
                PPIP,   32, 
                PPRP,   32, 
                PPRQ,   32, 
                PPRM,   32, 
                LPPR,   32, 
                FRET,   32, 
                MCIN,   8, 
                MCIP,   32, 
                MORD,   32, 
                MRET,   32, 
                CAIN,   8
            }

            OperationRegion (CONA, SystemMemory, 0xBAEB8027, 0x30)
            Field (CONA, DWordAcc, NoLock, Preserve)
            {
                HRTB,   32, 
                ERRR,   32, 
                CLFG,   32, 
                STA1,   32, 
                AccessAs (QWordAcc, 0x00), 
                INTC,   64, 
                AccessAs (DWordAcc, 0x00), 
                CMSZ,   32, 
                AccessAs (QWordAcc, 0x00), 
                CMDB,   64, 
                AccessAs (DWordAcc, 0x00), 
                RPSZ,   32, 
                AccessAs (QWordAcc, 0x00), 
                RESP,   64
            }

            Method (PTS, 1, Serialized)
            {
                If (((Arg0 < 0x06) && (Arg0 > 0x03)))
                {
                    If (!(MORD & 0x10))
                    {
                        MCIP = 0x02
                        IOB2 = MCIN /* \_SB_.TPM2.MCIN */
                    }
                }

                Sleep (0x64)
                Return (Zero)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (HINF, 3, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        Name (TPMV, Package (0x02)
                        {
                            One, 
                            Package (0x02)
                            {
                                0x02, 
                                Zero
                            }
                        })
                        If ((_STA () == Zero))
                        {
                            Return (Package (0x01)
                            {
                                Zero
                            })
                        }

                        Return (TPMV) /* \_SB_.TPM2.HINF.TPMV */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Name (TPM2, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (TPM3, Package (0x03)
            {
                Zero, 
                Zero, 
                Zero
            })
            Method (TPPI, 3, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        Return ("1.3")
                    }
                    Case (0x02)
                    {
                        PPRQ = DerefOf (Arg2 [Zero])
                        PPIP = 0x02
                        IOB2 = PPIN /* \_SB_.TPM2.PPIN */
                        Return (FRET) /* \_SB_.TPM2.FRET */
                    }
                    Case (0x03)
                    {
                        TPM2 [One] = PPRQ /* \_SB_.TPM2.PPRQ */
                        Return (TPM2) /* \_SB_.TPM2.TPM2 */
                    }
                    Case (0x04)
                    {
                        Return (0x02)
                    }
                    Case (0x05)
                    {
                        PPIP = 0x05
                        IOB2 = PPIN /* \_SB_.TPM2.PPIN */
                        TPM3 [One] = LPPR /* \_SB_.TPM2.LPPR */
                        TPM3 [0x02] = PPRP /* \_SB_.TPM2.PPRP */
                        Return (TPM3) /* \_SB_.TPM2.TPM3 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        PPIP = 0x07
                        PPRQ = DerefOf (Arg2 [Zero])
                        PPRM = Zero
                        If ((PPRQ == 0x17))
                        {
                            PPRM = DerefOf (Arg2 [One])
                        }

                        IOB2 = PPIN /* \_SB_.TPM2.PPIN */
                        Return (FRET) /* \_SB_.TPM2.FRET */
                    }
                    Case (0x08)
                    {
                        PPIP = 0x08
                        PPRQ = DerefOf (Arg2 [Zero])
                        IOB2 = PPIN /* \_SB_.TPM2.PPIN */
                        Return (FRET) /* \_SB_.TPM2.FRET */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (One)
            }

            Method (TMCI, 3, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        MORD = DerefOf (Arg2 [Zero])
                        MCIP = One
                        IOB2 = MCIN /* \_SB_.TPM2.MCIN */
                        Return (MRET) /* \_SB_.TPM2.MRET */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (One)
            }

            Method (OASM, 3, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        Return (Zero)
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (One)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8") /* Unknown UUID */))
                {
                    Return (HINF (Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
                {
                    Return (TPPI (Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
                {
                    Return (TMCI (Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4") /* Unknown UUID */))
                {
                    Return (OASM (Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }
}



SSDT15
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_ADR, IntObj)
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.CK17, MethodObj)    // 0 Arguments
    External (_SB_.PCI0, UnknownObj)
    External (_SB_.PCI0.DADR, IntObj)
    External (_SB_.PCI0.EBUS, IntObj)
    External (_SB_.PCI0.GP11, DeviceObj)
    External (_SB_.PCI0.GP12, DeviceObj)
    External (_SB_.PCI0.GP19, DeviceObj)
    External (_SB_.PCI0.GP19.NHI0, DeviceObj)
    External (_SB_.PCI0.GP19.NHI1, DeviceObj)
    External (_SB_.PCI0.GP19.XHC2, DeviceObj)
    External (_SB_.PCI0.GP19.XHC3, DeviceObj)
    External (_SB_.PCI0.GP19.XHC3.RHUB.PRT2, DeviceObj)
    External (_SB_.PCI0.GP19.XHC4, DeviceObj)
    External (_SB_.PCI0.GP19.XHC4.RHUB.PRT2, DeviceObj)
    External (_SB_.PCI0.RPRM, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.SPCH, MethodObj)    // 2 Arguments
    External (M000, MethodObj)    // 1 Arguments
    External (M017, MethodObj)    // 6 Arguments
    External (M037, DeviceObj)
    External (M045, MethodObj)    // 0 Arguments
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M249, MethodObj)    // 4 Arguments
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M401, MethodObj)    // 3 Arguments
    External (M402, MethodObj)    // 3 Arguments
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M471, MethodObj)    // 3 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (M652, FieldUnitObj)
    External (SDSW, MethodObj)    // 3 Arguments
    External (SINI, MethodObj)    // 0 Arguments
    External (SREG, MethodObj)    // 2 Arguments
    External (SSTA, MethodObj)    // 0 Arguments

    Scope (\)
    {
        Name (P3D3, 0x55)
        Name (G0D3, 0x04)
        Name (G3D3, 0x04)
        Name (RCRS, 0x55)
        Name (G5D3, 0x04)
        Name (P4D3, 0x04)
        Name (H0D3, 0x04)
        Name (DIMS, 0xCF)
        Name (DDEP, 0x55)
    }

    Scope (\_SB)
    {
        Method (CK19, 0, NotSerialized)
        {
            Local0 = \_SB.PCI0.GP19.RPRM ((\_SB.PCI0.GP19.DADR + 0x54), 0x02)
            \_SB.PCI0.GP19.WPRM ((\_SB.PCI0.GP19.DADR + 0x54), 0x02, (Local0 & 0x7FFC))
            Local1 = \_SB.PCI0.GP19.XHC2.RPRM ((\_SB.PCI0.GP19.XHC2.DADR + 0x54), 0x02)
            Local1 = \_SB.PCI0.GP19.XHC3.RPRM ((\_SB.PCI0.GP19.XHC3.DADR + 0x54), 0x02)
            Local1 = \_SB.PCI0.GP19.XHC4.RPRM ((\_SB.PCI0.GP19.XHC4.DADR + 0x54), 0x02)
            Local1 = \_SB.PCI0.GP19.NHI0.RPRM ((\_SB.PCI0.GP19.NHI0.DADR + 0x54), 0x02)
            Local1 = \_SB.PCI0.GP19.NHI1.RPRM ((\_SB.PCI0.GP19.NHI1.DADR + 0x54), 0x02)
            \_SB.PCI0.GP19.WPRM ((\_SB.PCI0.GP19.DADR + 0x54), 0x02, (Local0 & 0x7FFF))
            Local0 = \_SB.PCI0.GP11.RPRM ((\_SB.PCI0.GP11.DADR + 0x54), 0x02)
            Local0 = \_SB.PCI0.GP12.RPRM ((\_SB.PCI0.GP12.DADR + 0x54), 0x02)
        }

        Method (OPTS, 1, NotSerialized)
        {
            M460 ("  OEM-ASL-\\_SB.OPTS (0x%X) Start\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_SB.CK17))
            {
                \_SB.CK17 ()
            }

            \_SB.CK19 ()
            M460 ("  OEM-ASL-\\_SB.OPTS (0x%X) End\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        }

        Method (OWAK, 1, NotSerialized)
        {
            M460 ("  OEM-ASL-\\_SB.OWAK (0x%X) Start\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_SB.CK17))
            {
                \_SB.CK17 ()
            }

            \_SB.CK19 ()
            M460 ("  OEM-ASL-\\_SB.OWAK (0x%X) End\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        }
    }

    Scope (\_SB.PCI0.GP19)
    {
        Method (YS0W, 0, Serialized)
        {
            Local0 = Zero
            If ((\P3D3 != 0x55))
            {
                Local0 = \P3D3
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Method (YPRW, 0, Serialized)
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PRW ()  Return Package (2) {0x1A, 0x04}\n", DADR, Zero, Zero, Zero, Zero, Zero)
            Return (Package (0x02)
            {
                0x1A, 
                0x03
            })
        }

        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, Zero)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GP19.RPRM.VARR */
            If ((Arg1 == One))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == One))
            {
                OperationRegion (VARA, SystemMemory, Local0, One)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = Zero
            Local0 = Zero
            While ((Local0 <= 0x1F))
            {
                Local1 = Zero
                While ((Local1 <= 0x07))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != Zero)))
                    {
                        Local2 |= (One << Local0)
                    }
                    ElseIf ((Local1 == Zero))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = Zero
            Local1 = RPRM ((Arg0 + 0x34), One)
            While ((Local1 != Zero))
            {
                Local2 = RPRM ((DADR + Local1), One)
                If (((Local2 == Zero) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + One)), One)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* External reference */
                    }
                    Else
                    {
                        DBUS = Zero
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            One) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        DSTA = Zero
                        ESTA = Zero
                        If ((DBUS != Zero))
                        {
                            Local2 = ^^SPCH (^^DADR, 0x10)
                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                0x40) == 0x40))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), One)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            One) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == Zero))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            One) & 0x40) == Zero))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                0x40) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == Zero))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = Zero
                    }
                }
                Else
                {
                    DSTA = Zero
                    ESTA = 0xEE
                }
            }

            If (((PCSA == One) && (PWST == 0xD3)))
            {
                PWST = 0xD0
            }

            If (((PCSA == Zero) && (PWST == 0xD0)))
            {
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            Return (DSTA) /* \_SB_.PCI0.GP19.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + Zero), 0x04)
            If (((Local1 == Local0) || (Local1 == Zero)))
            {
                PCSA = Zero
                PWST = 0xD3
            }
            Else
            {
                PCSA = One
                PWST = 0xD0
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X\n", DADR, PCSA, PWST, Zero, Zero, Zero)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == One)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                    {
                        PCSA = One
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == Zero)))
            {
                PCSA = Zero
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
        }
    }

    Scope (\_SB.PCI0.GP19.XHC2)
    {
        Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
        {
            Local0 = Zero
            If ((\G0D3 != 0x55))
            {
                Local0 = \G0D3
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PRW ()  Return Package (2) {0x1A, 0x04}\n", DADR, Zero, Zero, Zero, Zero, Zero)
            Return (Package (0x02)
            {
                0x1A, 
                0x03
            })
        }

        Method (SREG, 2, Serialized)
        {
            M000 (0x3F00)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC2._REG (%d %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        }

        Method (PPS0, 0, Serialized)
        {
            M000 (0x3F01)
        }

        Method (PPS3, 0, Serialized)
        {
            M000 (0x3F03)
        }

        Method (PSTA, 0, Serialized)
        {
            M000 (0x3F05)
        }

        Method (P_ON, 0, Serialized)
        {
            M000 (0x3F06)
        }

        Method (P_OF, 0, Serialized)
        {
            M000 (0x3F08)
        }

        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, Zero)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, Zero)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GP19.XHC2.RPRM.VARR */
            If ((Arg1 == One))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == One))
            {
                OperationRegion (VARA, SystemMemory, Local0, One)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = Zero
            Local0 = Zero
            While ((Local0 <= 0x1F))
            {
                Local1 = Zero
                While ((Local1 <= 0x07))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != Zero)))
                    {
                        Local2 |= (One << Local0)
                    }
                    ElseIf ((Local1 == Zero))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = Zero
            Local1 = RPRM ((Arg0 + 0x34), One)
            While ((Local1 != Zero))
            {
                Local2 = RPRM ((DADR + Local1), One)
                If (((Local2 == Zero) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + One)), One)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* \_SB_.PCI0.GP19.EBUS */
                    }
                    Else
                    {
                        DBUS = Zero
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            One) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        DSTA = Zero
                        ESTA = Zero
                        If ((DBUS != Zero))
                        {
                            Local2 = ^^SPCH (^^DADR, 0x10)
                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                0x40) == 0x40))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), One)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            One) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == Zero))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            One) & 0x40) == Zero))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                0x40) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == Zero))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = Zero
                    }
                }
                Else
                {
                    DSTA = Zero
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
            {
                PWST = 0xD0
            }

            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
            {
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            Return (DSTA) /* \_SB_.PCI0.GP19.XHC2.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + Zero), 0x04)
            If (((Local1 == Local0) || (Local1 == Zero)))
            {
                PCSA = Zero
                PWST = 0xD3
                PW3S = Zero
            }
            Else
            {
                PCSA = One
                PWST = 0xD0
                PW3S = One
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == One)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                    {
                        PCSA = One
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == Zero)))
            {
                PCSA = Zero
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If (CondRefOf (SDSW))
            {
                SDSW (Arg0, Arg1, Arg2)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                If (CondRefOf (PSTA))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP19.XHC2.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == Zero))
                {
                    PW3S = One
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == One))
                {
                    PW3S = Zero
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
    }

    Scope (\_SB.PCI0.GP19.XHC3)
    {
        Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
        {
            M000 (0x3F34)
            Local0 = Zero
            If ((\G3D3 != 0x55))
            {
                Local0 = \G3D3
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PRW ()  Return Package (2) {0x1A, 0x04}\n", DADR, Zero, Zero, Zero, Zero, Zero)
            Return (Package (0x02)
            {
                0x1A, 
                0x03
            })
        }

        Method (SSTA, 0, Serialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC3._STA ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SREG, 2, Serialized)
        {
            M000 (0x3F30)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC3._REG (%d %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        }

        Method (PPS0, 0, Serialized)
        {
            M000 (0x3F31)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC3._PS0 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (PPS3, 0, Serialized)
        {
            M000 (0x3F33)
            If ((CondRefOf (\_SB.PCI0.GP11.PCSA) && CondRefOf (\_SB.PCI0.GP19.NHI0.PCSA)))
            {
                M460 ("    GP11.PCSA = %d  XHC3.PCSA = %d  NHI0.PCSA = %d\n", \_SB.PCI0.GP11.PCSA, \_SB.PCI0.GP19.XHC3.PCSA, \_SB.PCI0.GP19.NHI0.PCSA, Zero, Zero, Zero)
            }

            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC3._PS3 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (PSTA, 0, Serialized)
        {
            M000 (0x3F35)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC3.PWRS._STA ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (P_ON, 0, Serialized)
        {
            M000 (0x3F36)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC3.PWRS._ON ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (P_OF, 0, Serialized)
        {
            M000 (0x3F38)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC3.PWRS._OFF ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, Zero)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, Zero)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GP19.XHC3.RPRM.VARR */
            If ((Arg1 == One))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == One))
            {
                OperationRegion (VARA, SystemMemory, Local0, One)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = Zero
            Local0 = Zero
            While ((Local0 <= 0x1F))
            {
                Local1 = Zero
                While ((Local1 <= 0x07))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != Zero)))
                    {
                        Local2 |= (One << Local0)
                    }
                    ElseIf ((Local1 == Zero))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = Zero
            Local1 = RPRM ((Arg0 + 0x34), One)
            While ((Local1 != Zero))
            {
                Local2 = RPRM ((DADR + Local1), One)
                If (((Local2 == Zero) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + One)), One)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* \_SB_.PCI0.GP19.EBUS */
                    }
                    Else
                    {
                        DBUS = Zero
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            One) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        DSTA = Zero
                        ESTA = Zero
                        If ((DBUS != Zero))
                        {
                            Local2 = ^^SPCH (^^DADR, 0x10)
                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                0x40) == 0x40))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), One)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            One) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == Zero))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            One) & 0x40) == Zero))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                0x40) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == Zero))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = Zero
                    }
                }
                Else
                {
                    DSTA = Zero
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
            {
                PWST = 0xD0
            }

            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
            {
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            Return (DSTA) /* \_SB_.PCI0.GP19.XHC3.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + Zero), 0x04)
            If (((Local1 == Local0) || (Local1 == Zero)))
            {
                PCSA = Zero
                PWST = 0xD3
                PW3S = Zero
            }
            Else
            {
                PCSA = One
                PWST = 0xD0
                PW3S = One
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == One)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                    {
                        PCSA = One
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == Zero)))
            {
                PCSA = Zero
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If (CondRefOf (SDSW))
            {
                SDSW (Arg0, Arg1, Arg2)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                If (CondRefOf (PSTA))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP19.XHC3.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == Zero))
                {
                    PW3S = One
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == One))
                {
                    PW3S = Zero
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
    }

    Scope (\_SB.PCI0.GP19.XHC3.RHUB.PRT2)
    {
        Method (_DEP, 0, Serialized)  // _DEP: Dependencies
        {
            If ((M046 == 0xAA))
            {
                Local0 = M045 ()
            }

            If ((((\DDEP == One) && CondRefOf (\_SB.PCI0.GP19.XHC3.RHUB.PRT2._DSD)) && (CondRefOf (\_SB.PCI0.GP19.NHI0
                ) && (M046 < 0x0B))))
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC3.RHUB.PRT2._DEP  Return Package (1) {\\_SB.PCI0.GP19.NHI0}\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (Package (0x01)
                {
                    \_SB.PCI0.GP19.NHI0
                })
            }
            Else
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC3.RHUB.PRT2._DEP  Return Package (1) {\\_SB.PCI0}\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (Package (0x01)
                {
                    \_SB.PCI0
                })
            }
        }

        Name (XDSD, Package (0x02)
        {
            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
            Package (0x02)
            {
                Package (0x02)
                {
                    "usb4-host-interface", 
                    \_SB.PCI0.GP19.NHI0
                }, 

                Package (0x02)
                {
                    "usb4-port-number", 
                    One
                }
            }
        })
    }

    Scope (\_SB.PCI0.GP19.XHC4)
    {
        Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
        {
            M000 (0x3F44)
            Local0 = Zero
            If ((\G3D3 != 0x55))
            {
                Local0 = \G3D3
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PRW ()  Return Package (2) {0x1A, 0x04}\n", DADR, Zero, Zero, Zero, Zero, Zero)
            Return (Package (0x02)
            {
                0x1A, 
                0x03
            })
        }

        Method (SSTA, 0, Serialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC4._STA ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SREG, 2, Serialized)
        {
            M000 (0x3F40)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC4._REG (%d %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        }

        Method (PPS0, 0, Serialized)
        {
            M000 (0x3F41)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC4._PS0 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (PPS3, 0, Serialized)
        {
            M000 (0x3F43)
            If ((CondRefOf (\_SB.PCI0.GP12.PCSA) && CondRefOf (\_SB.PCI0.GP19.NHI1.PCSA)))
            {
                M460 ("    GP12.PCSA = %d  XHC4.PCSA = %d  NHI1.PCSA = %d\n", \_SB.PCI0.GP12.PCSA, \_SB.PCI0.GP19.XHC4.PCSA, \_SB.PCI0.GP19.NHI1.PCSA, Zero, Zero, Zero)
            }

            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC4._PS3 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (PSTA, 0, Serialized)
        {
            M000 (0x3F45)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC4.PWRS._STA ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (P_ON, 0, Serialized)
        {
            M000 (0x3F46)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC4.PWRS._ON ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (P_OF, 0, Serialized)
        {
            M000 (0x3F48)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC4.PWRS._OFF ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, Zero)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, Zero)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GP19.XHC4.RPRM.VARR */
            If ((Arg1 == One))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == One))
            {
                OperationRegion (VARA, SystemMemory, Local0, One)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = Zero
            Local0 = Zero
            While ((Local0 <= 0x1F))
            {
                Local1 = Zero
                While ((Local1 <= 0x07))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != Zero)))
                    {
                        Local2 |= (One << Local0)
                    }
                    ElseIf ((Local1 == Zero))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = Zero
            Local1 = RPRM ((Arg0 + 0x34), One)
            While ((Local1 != Zero))
            {
                Local2 = RPRM ((DADR + Local1), One)
                If (((Local2 == Zero) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + One)), One)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* \_SB_.PCI0.GP19.EBUS */
                    }
                    Else
                    {
                        DBUS = Zero
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            One) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        DSTA = Zero
                        ESTA = Zero
                        If ((DBUS != Zero))
                        {
                            Local2 = ^^SPCH (^^DADR, 0x10)
                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                0x40) == 0x40))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), One)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            One) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == Zero))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            One) & 0x40) == Zero))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                0x40) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == Zero))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = Zero
                    }
                }
                Else
                {
                    DSTA = Zero
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
            {
                PWST = 0xD0
            }

            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
            {
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            Return (DSTA) /* \_SB_.PCI0.GP19.XHC4.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + Zero), 0x04)
            If (((Local1 == Local0) || (Local1 == Zero)))
            {
                PCSA = Zero
                PWST = 0xD3
                PW3S = Zero
            }
            Else
            {
                PCSA = One
                PWST = 0xD0
                PW3S = One
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == One)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                    {
                        PCSA = One
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == Zero)))
            {
                PCSA = Zero
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If (CondRefOf (SDSW))
            {
                SDSW (Arg0, Arg1, Arg2)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                If (CondRefOf (PSTA))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP19.XHC4.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == Zero))
                {
                    PW3S = One
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == One))
                {
                    PW3S = Zero
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
    }

    Scope (\_SB.PCI0.GP19.XHC4.RHUB.PRT2)
    {
        Method (_DEP, 0, Serialized)  // _DEP: Dependencies
        {
            If ((M046 == 0xAA))
            {
                Local0 = M045 ()
            }

            If ((((\DDEP == One) && CondRefOf (\_SB.PCI0.GP19.XHC4.RHUB.PRT2._DSD)) && (CondRefOf (\_SB.PCI0.GP19.NHI1
                ) && (M046 < 0x0B))))
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC4.RHUB.PRT2._DEP  Return Package (1) {\\_SB.PCI0.GP19.NHI1}\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (Package (0x01)
                {
                    \_SB.PCI0.GP19.NHI1
                })
            }
            Else
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP19.XHC4.RHUB.PRT2._DEP  Return Package (1) {\\_SB.PCI0}\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (Package (0x01)
                {
                    \_SB.PCI0
                })
            }
        }

        Name (YDSD, Package (0x02)
        {
            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
            Package (0x02)
            {
                Package (0x02)
                {
                    "usb4-host-interface", 
                    \_SB.PCI0.GP19.NHI1
                }, 

                Package (0x02)
                {
                    "usb4-port-number", 
                    0x02
                }
            }
        })
    }

    Scope (\_SB.PCI0.GP19.NHI0)
    {
        Method (SDEP, 1, Serialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI0.SDEP (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            If ((\DDEP != One))
            {
                Local1 = \DIMS
                M232 (Local1, Arg0, Zero)
                \DDEP = One
            }
        }

        Method (_RST, 0, Serialized)  // _RST: Device Reset
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI0._RST Call \\_SB.ALIB (0x15, 0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
            \_SB.ALIB (0x15, Zero)
        }

        Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
        {
            M000 (0x3F54)
            Local0 = Zero
            If ((\G5D3 != 0x55))
            {
                Local0 = \G5D3
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PRW ()  Return Package (2) {0x1A, 0x04}\n", DADR, Zero, Zero, Zero, Zero, Zero)
            Return (Package (0x02)
            {
                0x1A, 
                0x03
            })
        }

        Method (SSTA, 0, Serialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI0._STA ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SREG, 2, Serialized)
        {
            M000 (0x3F50)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI0._REG (%d %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        }

        Method (PPS0, 0, Serialized)
        {
            M000 (0x3F51)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI0._PS0 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Name (RPNM, 0xEE)
        Name (LCRG, 0xEEEEEEEE)
        Method (PPS3, 0, Serialized)
        {
            M000 (0x3F53)
            If ((CondRefOf (\_SB.PCI0.GP11.PCSA) && CondRefOf (\_SB.PCI0.GP19.XHC3.PCSA)))
            {
                M460 ("    GP11.PCSA = %d  XHC3.PCSA = %d  NHI0.PCSA = %d\n", \_SB.PCI0.GP11.PCSA, \_SB.PCI0.GP19.XHC3.PCSA, \_SB.PCI0.GP19.NHI0.PCSA, Zero, Zero, Zero)
            }

            If ((\G5D3 == 0x04))
            {
                Local0 = M017 (Zero, 0x03, One, 0x72, Zero, 0x08)
                Local1 = 0xC0
                If (((Local0 & 0xC0) == 0x40))
                {
                    M460 ("  PCIe GPP [0:3:1] EP is connected\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    If ((RPNM == 0xEE))
                    {
                        RPNM = M401 (Zero, 0x03, One)
                    }

                    If (((RPNM != 0xFF) && (LCRG == 0xEEEEEEEE)))
                    {
                        LCRG = (M471 (Zero, RPNM, 0x04) + 0x0294)
                    }

                    If ((LCRG != 0xEEEEEEEE))
                    {
                        Local1 = M249 (Zero, Zero, Zero, LCRG)
                        M460 ("  OEM-ASL-\\_SB.PCI0.GP11.PCIE_LC_STATE0 = 0x%X\n", Local1, Zero, Zero, Zero, Zero, Zero)
                    }

                    If (((Local1 & 0x3F) != Zero))
                    {
                        M460 ("  OEM-ASL-\\_SB.PCI0.GP11.CpmSendPmeTurnOff (0, 3, 1)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        M402 (Zero, 0x03, One)
                    }
                }

                M460 ("    Call \\_SB.ALIB (0x14, 1) - Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_SB.ALIB (0x14, One)
                M460 ("    Call \\_SB.ALIB (0x14, 1) - End\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI0._PS3 - End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (PSTA, 0, Serialized)
        {
            M000 (0x3F55)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI0.PWRS._STA ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (P_ON, 0, Serialized)
        {
            M000 (0x3F56)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI0.PWRS.ON ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (P_OF, 0, Serialized)
        {
            M000 (0x3F58)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI0.PWRS.OFF ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, Zero)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, Zero)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GP19.NHI0.RPRM.VARR */
            If ((Arg1 == One))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == One))
            {
                OperationRegion (VARA, SystemMemory, Local0, One)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = Zero
            Local0 = Zero
            While ((Local0 <= 0x1F))
            {
                Local1 = Zero
                While ((Local1 <= 0x07))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != Zero)))
                    {
                        Local2 |= (One << Local0)
                    }
                    ElseIf ((Local1 == Zero))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = Zero
            Local1 = RPRM ((Arg0 + 0x34), One)
            While ((Local1 != Zero))
            {
                Local2 = RPRM ((DADR + Local1), One)
                If (((Local2 == Zero) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + One)), One)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* \_SB_.PCI0.GP19.EBUS */
                    }
                    Else
                    {
                        DBUS = Zero
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            One) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        DSTA = Zero
                        ESTA = Zero
                        If ((DBUS != Zero))
                        {
                            Local2 = ^^SPCH (^^DADR, 0x10)
                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                0x40) == 0x40))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), One)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            One) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == Zero))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            One) & 0x40) == Zero))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                0x40) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == Zero))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = Zero
                    }
                }
                Else
                {
                    DSTA = Zero
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
            {
                PWST = 0xD0
            }

            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
            {
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            Return (DSTA) /* \_SB_.PCI0.GP19.NHI0.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + Zero), 0x04)
            If (((Local1 == Local0) || (Local1 == Zero)))
            {
                PCSA = Zero
                PWST = 0xD3
                PW3S = Zero
            }
            Else
            {
                PCSA = One
                PWST = 0xD0
                PW3S = One
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == One)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                    {
                        PCSA = One
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == Zero)))
            {
                PCSA = Zero
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If (CondRefOf (SDSW))
            {
                SDSW (Arg0, Arg1, Arg2)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                If (CondRefOf (PSTA))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP19.NHI0.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == Zero))
                {
                    PW3S = One
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == One))
                {
                    PW3S = Zero
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
    }

    Scope (\_SB.PCI0.GP19.NHI1)
    {
        Method (SDEP, 1, Serialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI1.SDEP (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            If ((\DDEP != One))
            {
                Local1 = \DIMS
                M232 (Local1, Arg0, Zero)
                \DDEP = One
            }
        }

        Method (_RST, 0, Serialized)  // _RST: Device Reset
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI1._RST Call \\_SB.ALIB (0x15, 1)\n", Zero, Zero, Zero, Zero, Zero, Zero)
            \_SB.ALIB (0x15, One)
        }

        Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
        {
            M000 (0x3F64)
            Local0 = Zero
            If ((\G5D3 != 0x55))
            {
                Local0 = \G5D3
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PRW ()  Return Package (2) {0x1A, 0x04}\n", DADR, Zero, Zero, Zero, Zero, Zero)
            Return (Package (0x02)
            {
                0x1A, 
                0x03
            })
        }

        Method (SSTA, 0, Serialized)
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI1._STA ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SREG, 2, Serialized)
        {
            M000 (0x3F60)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI1._REG (%d %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        }

        Method (PPS0, 0, Serialized)
        {
            M000 (0x3F61)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI1._PS0 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Name (RPNM, 0xEE)
        Name (LCRG, 0xEEEEEEEE)
        Method (PPS3, 0, Serialized)
        {
            M000 (0x3F63)
            If ((CondRefOf (\_SB.PCI0.GP12.PCSA) && CondRefOf (\_SB.PCI0.GP19.XHC4.PCSA)))
            {
                M460 ("    GP12.PCSA = %d  XHC4.PCSA = %d  NHI1.PCSA = %d\n", \_SB.PCI0.GP12.PCSA, \_SB.PCI0.GP19.XHC4.PCSA, \_SB.PCI0.GP19.NHI1.PCSA, Zero, Zero, Zero)
            }

            If ((\G5D3 == 0x04))
            {
                Local0 = M017 (Zero, 0x04, One, 0x72, Zero, 0x08)
                Local1 = 0xC0
                If (((Local0 & 0xC0) == 0x40))
                {
                    M460 ("  PCIe GPP [0:4:1] EP is connected\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    If ((RPNM == 0xEE))
                    {
                        RPNM = M401 (Zero, 0x04, One)
                    }

                    If (((RPNM != 0xFF) && (LCRG == 0xEEEEEEEE)))
                    {
                        LCRG = (M471 (Zero, RPNM, 0x04) + 0x0294)
                    }

                    If ((LCRG != 0xEEEEEEEE))
                    {
                        Local1 = M249 (Zero, Zero, Zero, LCRG)
                        M460 ("  OEM-ASL-\\_SB.PCI0.GP12.PCIE_LC_STATE0 = 0x%X\n", Local1, Zero, Zero, Zero, Zero, Zero)
                    }

                    If (((Local1 & 0x3F) != Zero))
                    {
                        M460 ("  OEM-ASL-\\_SB.PCI0.GP12.CpmSendPmeTurnOff (0, 4, 1)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        M402 (Zero, 0x04, One)
                    }
                }

                M460 ("    Call \\_SB.ALIB (0x14, 2) - Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_SB.ALIB (0x14, 0x02)
                M460 ("    Call \\_SB.ALIB (0x14, 2) - End\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI1._PS3 - End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (PSTA, 0, Serialized)
        {
            M000 (0x3F65)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI1.PWRS._STA ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (P_ON, 0, Serialized)
        {
            M000 (0x3F66)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI1.PWRS.ON ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (P_OF, 0, Serialized)
        {
            M000 (0x3F68)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP19.NHI1.PWRS.OFF ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, Zero)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, Zero)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GP19.NHI1.RPRM.VARR */
            If ((Arg1 == One))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == One))
            {
                OperationRegion (VARA, SystemMemory, Local0, One)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = Zero
            Local0 = Zero
            While ((Local0 <= 0x1F))
            {
                Local1 = Zero
                While ((Local1 <= 0x07))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != Zero)))
                    {
                        Local2 |= (One << Local0)
                    }
                    ElseIf ((Local1 == Zero))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = Zero
            Local1 = RPRM ((Arg0 + 0x34), One)
            While ((Local1 != Zero))
            {
                Local2 = RPRM ((DADR + Local1), One)
                If (((Local2 == Zero) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + One)), One)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* \_SB_.PCI0.GP19.EBUS */
                    }
                    Else
                    {
                        DBUS = Zero
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            One) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        DSTA = Zero
                        ESTA = Zero
                        If ((DBUS != Zero))
                        {
                            Local2 = ^^SPCH (^^DADR, 0x10)
                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                0x40) == 0x40))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), One)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            One) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == Zero))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            One) & 0x40) == Zero))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                0x40) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == Zero))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = Zero
                    }
                }
                Else
                {
                    DSTA = Zero
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
            {
                PWST = 0xD0
            }

            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
            {
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            Return (DSTA) /* \_SB_.PCI0.GP19.NHI1.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + Zero), 0x04)
            If (((Local1 == Local0) || (Local1 == Zero)))
            {
                PCSA = Zero
                PWST = 0xD3
                PW3S = Zero
            }
            Else
            {
                PCSA = One
                PWST = 0xD0
                PW3S = One
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == One)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                    {
                        PCSA = One
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == Zero)))
            {
                PCSA = Zero
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If (CondRefOf (SDSW))
            {
                SDSW (Arg0, Arg1, Arg2)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                If (CondRefOf (PSTA))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP19.NHI1.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == Zero))
                {
                    PW3S = One
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == One))
                {
                    PW3S = Zero
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
    }

    Scope (\_SB.PCI0.GP11)
    {
        Method (_DEP, 0, Serialized)  // _DEP: Dependencies
        {
            If ((M046 == 0xAA))
            {
                Local0 = M045 ()
            }

            If ((((\DDEP == One) && CondRefOf (\_SB.PCI0.GP11._DSD)) && (CondRefOf (\_SB.PCI0.GP19.NHI0
                ) && (M046 < 0x0B))))
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11._DEP  Return Package (1) {\\_SB.PCI0.GP19.NHI0}\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (Package (0x01)
                {
                    \_SB.PCI0.GP19.NHI0
                })
            }
            Else
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11._DEP  Return Package (1) {\\_SB.PCI0}\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (Package (0x01)
                {
                    \_SB.PCI0
                })
            }
        }

        Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
        {
            M000 (0x3F74)
            Local0 = Zero
            If ((\P4D3 != 0x55))
            {
                Local0 = \P4D3
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP11._PRW ()  Return Package (2) {0x1A, 0x04}\n", Zero, Zero, Zero, Zero, Zero, Zero)
            Return (Package (0x02)
            {
                0x1A, 
                0x03
            })
        }

        Method (SREG, 2, Serialized)
        {
            M000 (0x3F70)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP11._REG (%d %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        }

        Method (PPS0, 0, Serialized)
        {
            M000 (0x3F71)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP11._PS0 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (PPS3, 0, Serialized)
        {
            M000 (0x3F73)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP11._PS3 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (PSTA, 0, Serialized)
        {
            M000 (0x3F75)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP11.PWRS._STA ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (P_ON, 0, Serialized)
        {
            M000 (0x3F76)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP11.PWRS._ON ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (P_OF, 0, Serialized)
        {
            M000 (0x3F78)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP11.PWRS._OFF ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, Zero)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, Zero)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GP11.RPRM.VARR */
            If ((Arg1 == One))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == One))
            {
                OperationRegion (VARA, SystemMemory, Local0, One)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = Zero
            Local0 = Zero
            While ((Local0 <= 0x1F))
            {
                Local1 = Zero
                While ((Local1 <= 0x07))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != Zero)))
                    {
                        Local2 |= (One << Local0)
                    }
                    ElseIf ((Local1 == Zero))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = Zero
            Local1 = RPRM ((Arg0 + 0x34), One)
            While ((Local1 != Zero))
            {
                Local2 = RPRM ((DADR + Local1), One)
                If (((Local2 == Zero) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + One)), One)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* External reference */
                    }
                    Else
                    {
                        DBUS = Zero
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            One) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        DSTA = Zero
                        ESTA = Zero
                        If ((DBUS != Zero))
                        {
                            Local2 = ^^SPCH (^^DADR, 0x10)
                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                0x40) == 0x40))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), One)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            One) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == Zero))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            One) & 0x40) == Zero))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                0x40) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == Zero))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = Zero
                    }
                }
                Else
                {
                    DSTA = Zero
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
            {
                PWST = 0xD0
            }

            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
            {
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            Return (DSTA) /* \_SB_.PCI0.GP11.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + Zero), 0x04)
            If (((Local1 == Local0) || (Local1 == Zero)))
            {
                PCSA = Zero
                PWST = 0xD3
                PW3S = Zero
            }
            Else
            {
                PCSA = One
                PWST = 0xD0
                PW3S = One
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == One)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                    {
                        PCSA = One
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == Zero)))
            {
                PCSA = Zero
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If (CondRefOf (SDSW))
            {
                SDSW (Arg0, Arg1, Arg2)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                If (CondRefOf (PSTA))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP11.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == Zero))
                {
                    PW3S = One
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == One))
                {
                    PW3S = Zero
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
        Name (XDSD, Package (0x06)
        {
            ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
            Package (0x01)
            {
                Package (0x02)
                {
                    "HotPlugSupportInD3", 
                    One
                }
            }, 

            ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
            Package (0x02)
            {
                Package (0x02)
                {
                    "ExternalFacingPort", 
                    One
                }, 

                Package (0x02)
                {
                    "UID", 
                    Zero
                }
            }, 

            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
            Package (0x02)
            {
                Package (0x02)
                {
                    "usb4-host-interface", 
                    \_SB.PCI0.GP19.NHI0
                }, 

                Package (0x02)
                {
                    "usb4-port-number", 
                    One
                }
            }
        })
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                CreateDWordField (Arg0, Zero, UID0)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11._DSM (UUID 0x%X, 0x%X, 0x%X)\n", UID0, Arg1, Arg2, Zero, Zero, Zero)
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (Arg1)
                        {
                            Case (Zero)
                            {
                                M460 ("    Return 0x0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                            Case (One)
                            {
                                M460 ("    Return 0x21\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (Buffer (One)
                                {
                                     0x21                                             // !
                                })
                            }

                        }

                        M460 ("    Return 0x61\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (Buffer (One)
                        {
                             0x61                                             // a
                        })
                    }
                    Case (0x05)
                    {
                        If ((Arg1 >= One))
                        {
                            Local0 = Zero
                            If ((\RCRS != 0x55))
                            {
                                Local0 = \RCRS
                            }

                            M460 ("    Return %d\n", Local0, Zero, Zero, Zero, Zero, Zero)
                            Return (Local0)
                        }
                    }
                    Case (0x06)
                    {
                        If ((Arg1 >= 0x02))
                        {
                            M460 ("    Return Package (4) {0x02, 0xC8, 0x02, 0xC8}\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Return (Package (0x04)
                            {
                                0x02, 
                                0xC8, 
                                0x02, 
                                0xC8
                            })
                        }
                    }

                }
            }
        }

        Device (SWUS)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_RMV, 0, Serialized)  // _RMV: Removal Status
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11.SWUS._RMV ()  Return 0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (Zero)
            }

            Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
            {
                M000 (0x3F94)
                Local0 = Zero
                If ((\H0D3 != 0x55))
                {
                    Local0 = \H0D3
                }

                M460 ("  OEM-ASL-\\_SB.PCI0.GP11.SWUS._S0W ()  Return %d\n", Local0, Zero, Zero, Zero, Zero, Zero)
                Return (Local0)
            }

            Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11.SWUS._PRW ()  Return Package (2) {0x1A, 0x04}\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (Package (0x02)
                {
                    0x1A, 
                    0x03
                })
            }

            Method (SREG, 2, Serialized)
            {
                M000 (0x3F90)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11.SWUS._REG (%d %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
            }

            Method (PPS0, 0, Serialized)
            {
                M000 (0x3F91)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11.SWUS._PS0 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Method (PPS3, 0, Serialized)
            {
                M000 (0x3F93)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11.SWUS._PS3 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Method (PSTA, 0, Serialized)
            {
                M000 (0x3F95)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11.SWUS.PWRS._STA ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Method (P_ON, 0, Serialized)
            {
                M000 (0x3F96)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11.SWUS.PWRS._ON ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Method (P_OF, 0, Serialized)
            {
                M000 (0x3F98)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP11.SWUS.PWRS._OFF ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Name (DADR, 0xEEEEEEEE)
            Name (DSTA, 0xEE)
            Name (DBUS, 0xEEEE)
            Name (PCSA, Zero)
            Name (PWST, 0xD3)
            Name (ESTA, 0xEE)
            Name (EBUS, 0xEEEE)
            Name (PW3S, Zero)
            Method (RPRM, 2, NotSerialized)
            {
                Local0 = Arg0
                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                Field (VARM, AnyAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Local1 = VARR /* \_SB_.PCI0.GP11.SWUS.RPRM.VARR */
                If ((Arg1 == One))
                {
                    Local1 &= 0xFF
                }
                ElseIf ((Arg1 == 0x02))
                {
                    Local1 &= 0xFFFF
                }
                ElseIf ((Arg1 == 0x03))
                {
                    Local1 &= 0x00FFFFFF
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                Return (Local1)
            }

            Method (WPRM, 3, NotSerialized)
            {
                Local0 = Arg0
                If ((Arg1 == One))
                {
                    OperationRegion (VARA, SystemMemory, Local0, One)
                    Field (VARA, AnyAcc, NoLock, Preserve)
                    {
                        VARE,   8
                    }

                    VARE = Arg2
                }
                ElseIf ((Arg1 == 0x02))
                {
                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                    Field (VARB, AnyAcc, NoLock, Preserve)
                    {
                        VARF,   16
                    }

                    VARF = Arg2
                }
                ElseIf ((Arg1 == 0x03))
                {
                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                    Field (VARC, AnyAcc, NoLock, Preserve)
                    {
                        VARG,   24
                    }

                    VARG = Arg2
                }
                Else
                {
                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                    Field (VARD, AnyAcc, NoLock, Preserve)
                    {
                        VARH,   32
                    }

                    VARH = Arg2
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
            }

            Method (SPDP, 1, NotSerialized)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local2 = Zero
                Local0 = Zero
                While ((Local0 <= 0x1F))
                {
                    Local1 = Zero
                    While ((Local1 <= 0x07))
                    {
                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                            0x0F) & 0x000F8000))
                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                        Local4 = RPRM ((M083 + Local3), 0x04)
                        If (((Local4 != Local5) && (Local4 != Zero)))
                        {
                            Local2 |= (One << Local0)
                        }
                        ElseIf ((Local1 == Zero))
                        {
                            Break
                        }

                        Local1++
                    }

                    Local0++
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                Return (Local2)
            }

            Method (SPCH, 2, NotSerialized)
            {
                Local0 = Zero
                Local1 = RPRM ((Arg0 + 0x34), One)
                While ((Local1 != Zero))
                {
                    Local2 = RPRM ((DADR + Local1), One)
                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                    {
                        Break
                    }

                    If ((Local2 == Arg1))
                    {
                        Local0 = Local1
                        Break
                    }

                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                Return (Local0)
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                {
                    If ((DBUS == 0xEEEE))
                    {
                        If (CondRefOf (^^EBUS))
                        {
                            DBUS = ^^EBUS /* \_SB_.PCI0.GP11.EBUS */
                        }
                        Else
                        {
                            DBUS = Zero
                        }
                    }

                    If ((DBUS != 0xEEEE))
                    {
                        If ((DADR == 0xEEEEEEEE))
                        {
                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                One) & 0x000F8000))
                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                            DADR = (M083 + Local0)
                        }

                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            DSTA = Zero
                            ESTA = Zero
                            If ((DBUS != Zero))
                            {
                                Local2 = ^^SPCH (^^DADR, 0x10)
                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                    0x40) == 0x40))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                            }
                        }
                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                        {
                            EBUS = RPRM ((DADR + 0x19), One)
                            Local2 = SPCH (DADR, 0x10)
                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                One) >> 0x04) & 0x0F) == 0x05))
                            {
                                If ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                ElseIf ((SPDP (EBUS) == Zero))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                One) & 0x40) == Zero))
                            {
                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                    0x40) == Zero))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                            }
                            ElseIf ((EBUS == Zero))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = Zero
                        }
                    }
                    Else
                    {
                        DSTA = Zero
                        ESTA = 0xEE
                    }
                }

                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                {
                    PWST = 0xD0
                }

                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                {
                    PWST = 0xD3
                }

                If (CondRefOf (SSTA))
                {
                    SSTA ()
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                Return (DSTA) /* \_SB_.PCI0.GP11.SWUS.DSTA */
            }

            Method (_INI, 0, Serialized)  // _INI: Initialize
            {
                Local0 = 0x7FFFFFFF
                Local0 |= 0x80000000
                Local1 = RPRM ((DADR + Zero), 0x04)
                If (((Local1 == Local0) || (Local1 == Zero)))
                {
                    PCSA = Zero
                    PWST = 0xD3
                    PW3S = Zero
                }
                Else
                {
                    PCSA = One
                    PWST = 0xD0
                    PW3S = One
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                If (CondRefOf (SINI))
                {
                    SINI ()
                }
            }

            Method (_REG, 2, Serialized)  // _REG: Region Availability
            {
                If (((Arg0 == 0x02) && (Arg1 == One)))
                {
                    If ((DSTA == 0x0F))
                    {
                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                        {
                            PCSA = One
                        }
                    }
                }

                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                {
                    PCSA = Zero
                }

                If (CondRefOf (SREG))
                {
                    SREG (Arg0, Arg1)
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
            }

            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
            {
                If (CondRefOf (SDSW))
                {
                    SDSW (Arg0, Arg1, Arg2)
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            PowerResource (PWRS, 0x00, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (PSTA))
                    {
                        PSTA ()
                    }

                    Return (PW3S) /* \_SB_.PCI0.GP11.SWUS.PW3S */
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                    If ((PW3S == Zero))
                    {
                        PW3S = One
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        If (CondRefOf (P_ON))
                        {
                            P_ON ()
                        }
                    }
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                    If ((PW3S == One))
                    {
                        PW3S = Zero
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        If (CondRefOf (P_OF))
                        {
                            P_OF ()
                        }
                    }
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PWRS
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PWRS
            })
        }
    }

    Scope (\_SB.PCI0.GP12)
    {
        Method (_DEP, 0, Serialized)  // _DEP: Dependencies
        {
            If ((M046 == 0xAA))
            {
                Local0 = M045 ()
            }

            If ((((\DDEP == One) && CondRefOf (\_SB.PCI0.GP12._DSD)) && (CondRefOf (\_SB.PCI0.GP19.NHI1
                ) && (M046 < 0x0B))))
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12._DEP  Return Package (1) {\\_SB.PCI0.GP19.NHI1}\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (Package (0x01)
                {
                    \_SB.PCI0.GP19.NHI1
                })
            }
            Else
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12._DEP  Return Package (1) {\\_SB.PCI0}\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (Package (0x01)
                {
                    \_SB.PCI0
                })
            }
        }

        Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
        {
            M000 (0x3F84)
            Local0 = Zero
            If ((\P4D3 != 0x55))
            {
                Local0 = \P4D3
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._S0W ()  Return %d\n", DADR, Local0, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
        {
            M460 ("  OEM-ASL-\\_SB.PCI0.GP12._PRW ()  Return Package (2) {0x1A, 0x04}\n", Zero, Zero, Zero, Zero, Zero, Zero)
            Return (Package (0x02)
            {
                0x1A, 
                0x03
            })
        }

        Method (SREG, 2, Serialized)
        {
            M000 (0x3F80)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP12._REG (%d %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        }

        Method (PPS0, 0, Serialized)
        {
            M000 (0x3F81)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP12._PS0 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (PPS3, 0, Serialized)
        {
            M000 (0x3F83)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP12._PS3 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (PSTA, 0, Serialized)
        {
            M000 (0x3F85)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP12.PWRS._STA ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (P_ON, 0, Serialized)
        {
            M000 (0x3F86)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP12.PWRS._ON ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (P_OF, 0, Serialized)
        {
            M000 (0x3F88)
            M460 ("  OEM-ASL-\\_SB.PCI0.GP12.PWRS._OFF ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Name (DADR, 0xEEEEEEEE)
        Name (DSTA, 0xEE)
        Name (DBUS, 0xEEEE)
        Name (PCSA, Zero)
        Name (PWST, 0xD3)
        Name (ESTA, 0xEE)
        Name (EBUS, 0xEEEE)
        Name (PW3S, Zero)
        Method (RPRM, 2, NotSerialized)
        {
            Local0 = Arg0
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, AnyAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local1 = VARR /* \_SB_.PCI0.GP12.RPRM.VARR */
            If ((Arg1 == One))
            {
                Local1 &= 0xFF
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local1 &= 0xFFFF
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local1 &= 0x00FFFFFF
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
            Return (Local1)
        }

        Method (WPRM, 3, NotSerialized)
        {
            Local0 = Arg0
            If ((Arg1 == One))
            {
                OperationRegion (VARA, SystemMemory, Local0, One)
                Field (VARA, AnyAcc, NoLock, Preserve)
                {
                    VARE,   8
                }

                VARE = Arg2
            }
            ElseIf ((Arg1 == 0x02))
            {
                OperationRegion (VARB, SystemMemory, Local0, 0x02)
                Field (VARB, AnyAcc, NoLock, Preserve)
                {
                    VARF,   16
                }

                VARF = Arg2
            }
            ElseIf ((Arg1 == 0x03))
            {
                OperationRegion (VARC, SystemMemory, Local0, 0x03)
                Field (VARC, AnyAcc, NoLock, Preserve)
                {
                    VARG,   24
                }

                VARG = Arg2
            }
            Else
            {
                OperationRegion (VARD, SystemMemory, Local0, 0x04)
                Field (VARD, AnyAcc, NoLock, Preserve)
                {
                    VARH,   32
                }

                VARH = Arg2
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
        }

        Method (SPDP, 1, NotSerialized)
        {
            Local5 = 0x7FFFFFFF
            Local5 |= 0x80000000
            Local2 = Zero
            Local0 = Zero
            While ((Local0 <= 0x1F))
            {
                Local1 = Zero
                While ((Local1 <= 0x07))
                {
                    Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                        0x0F) & 0x000F8000))
                    Local3 |= ((Local1 << 0x0C) & 0x7000)
                    Local4 = RPRM ((M083 + Local3), 0x04)
                    If (((Local4 != Local5) && (Local4 != Zero)))
                    {
                        Local2 |= (One << Local0)
                    }
                    ElseIf ((Local1 == Zero))
                    {
                        Break
                    }

                    Local1++
                }

                Local0++
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
            Return (Local2)
        }

        Method (SPCH, 2, NotSerialized)
        {
            Local0 = Zero
            Local1 = RPRM ((Arg0 + 0x34), One)
            While ((Local1 != Zero))
            {
                Local2 = RPRM ((DADR + Local1), One)
                If (((Local2 == Zero) || (Local2 == 0xFF)))
                {
                    Break
                }

                If ((Local2 == Arg1))
                {
                    Local0 = Local1
                    Break
                }

                Local1 = RPRM ((DADR + (Local1 + One)), One)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
            Return (Local0)
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If (((DSTA == 0xEE) || (ESTA == 0xEE)))
            {
                If ((DBUS == 0xEEEE))
                {
                    If (CondRefOf (^^EBUS))
                    {
                        DBUS = ^^EBUS /* External reference */
                    }
                    Else
                    {
                        DBUS = Zero
                    }
                }

                If ((DBUS != 0xEEEE))
                {
                    If ((DADR == 0xEEEEEEEE))
                    {
                        Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                            One) & 0x000F8000))
                        Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                        DADR = (M083 + Local0)
                    }

                    Local0 = 0x7FFFFFFF
                    Local0 |= 0x80000000
                    Local1 = RPRM ((DADR + Zero), 0x04)
                    If (((Local1 == Local0) || (Local1 == Zero)))
                    {
                        DSTA = Zero
                        ESTA = Zero
                        If ((DBUS != Zero))
                        {
                            Local2 = ^^SPCH (^^DADR, 0x10)
                            If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                0x40) == 0x40))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                    }
                    ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                    {
                        EBUS = RPRM ((DADR + 0x19), One)
                        Local2 = SPCH (DADR, 0x10)
                        If ((((RPRM ((DADR + (Local2 + 0x02)), 
                            One) >> 0x04) & 0x0F) == 0x05))
                        {
                            If ((EBUS == Zero))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            ElseIf ((SPDP (EBUS) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                            One) & 0x40) == Zero))
                        {
                            If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                0x40) == Zero))
                            {
                                DSTA = Zero
                                ESTA = Zero
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                        }
                        ElseIf ((EBUS == Zero))
                        {
                            DSTA = 0x0F
                            ESTA = 0xEE
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = 0x0F
                        }
                    }
                    Else
                    {
                        DSTA = 0x0F
                        ESTA = Zero
                    }
                }
                Else
                {
                    DSTA = Zero
                    ESTA = 0xEE
                }
            }

            If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
            {
                PWST = 0xD0
            }

            If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
            {
                PWST = 0xD3
            }

            If (CondRefOf (SSTA))
            {
                SSTA ()
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
            Return (DSTA) /* \_SB_.PCI0.GP12.DSTA */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            Local0 = 0x7FFFFFFF
            Local0 |= 0x80000000
            Local1 = RPRM ((DADR + Zero), 0x04)
            If (((Local1 == Local0) || (Local1 == Zero)))
            {
                PCSA = Zero
                PWST = 0xD3
                PW3S = Zero
            }
            Else
            {
                PCSA = One
                PWST = 0xD0
                PW3S = One
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
            If (CondRefOf (SINI))
            {
                SINI ()
            }
        }

        Method (_REG, 2, Serialized)  // _REG: Region Availability
        {
            If (((Arg0 == 0x02) && (Arg1 == One)))
            {
                If ((DSTA == 0x0F))
                {
                    If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                    {
                        PCSA = One
                    }
                }
            }

            If (((Arg0 == 0x02) && (Arg1 == Zero)))
            {
                PCSA = Zero
            }

            If (CondRefOf (SREG))
            {
                SREG (Arg0, Arg1)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
        }

        Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
        {
            If (CondRefOf (SDSW))
            {
                SDSW (Arg0, Arg1, Arg2)
            }

            M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS0))
            {
                PPS0 ()
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (PPS3))
            {
                PPS3 ()
            }
        }

        PowerResource (PWRS, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                If (CondRefOf (PSTA))
                {
                    PSTA ()
                }

                Return (PW3S) /* \_SB_.PCI0.GP12.PW3S */
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((PW3S == Zero))
                {
                    PW3S = One
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (P_ON))
                    {
                        P_ON ()
                    }
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((PW3S == One))
                {
                    PW3S = Zero
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (P_OF))
                    {
                        P_OF ()
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PWRS
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PWRS
        })
        Name (YDSD, Package (0x06)
        {
            ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
            Package (0x01)
            {
                Package (0x02)
                {
                    "HotPlugSupportInD3", 
                    One
                }
            }, 

            ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
            Package (0x02)
            {
                Package (0x02)
                {
                    "ExternalFacingPort", 
                    One
                }, 

                Package (0x02)
                {
                    "UID", 
                    One
                }
            }, 

            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
            Package (0x02)
            {
                Package (0x02)
                {
                    "usb4-host-interface", 
                    \_SB.PCI0.GP19.NHI1
                }, 

                Package (0x02)
                {
                    "usb4-port-number", 
                    0x02
                }
            }
        })
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                CreateDWordField (Arg0, Zero, UID0)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12._DSM (UUID 0x%X, 0x%X, 0x%X)\n", UID0, Arg1, Arg2, Zero, Zero, Zero)
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (Arg1)
                        {
                            Case (Zero)
                            {
                                M460 ("    Return 0x0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                            Case (One)
                            {
                                M460 ("    Return 0x21\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (Buffer (One)
                                {
                                     0x21                                             // !
                                })
                            }

                        }

                        M460 ("    Return 0x61\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (Buffer (One)
                        {
                             0x61                                             // a
                        })
                    }
                    Case (0x05)
                    {
                        If ((Arg1 >= One))
                        {
                            Local0 = Zero
                            If ((\RCRS != 0x55))
                            {
                                Local0 = \RCRS
                            }

                            M460 ("    Return %d\n", Local0, Zero, Zero, Zero, Zero, Zero)
                            Return (Local0)
                        }
                    }
                    Case (0x06)
                    {
                        If ((Arg1 >= 0x02))
                        {
                            M460 ("    Return Package (4) {0x02, 0xC8, 0x02, 0xC8}\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Return (Package (0x04)
                            {
                                0x02, 
                                0xC8, 
                                0x02, 
                                0xC8
                            })
                        }
                    }

                }
            }
        }

        Device (SWUS)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_RMV, 0, Serialized)  // _RMV: Removal Status
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12.SWUS._RMV ()  Return 0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (Zero)
            }

            Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
            {
                M000 (0x3FA4)
                Local0 = Zero
                If ((\H0D3 != 0x55))
                {
                    Local0 = \H0D3
                }

                M460 ("  OEM-ASL-\\_SB.PCI0.GP12.SWUS._S0W ()  Return %d\n", Local0, Zero, Zero, Zero, Zero, Zero)
                Return (Local0)
            }

            Method (_PRW, 0, Serialized)  // _PRW: Power Resources for Wake
            {
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12.SWUS._PRW ()  Return Package (2) {0x1A, 0x04}\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (Package (0x02)
                {
                    0x1A, 
                    0x03
                })
            }

            Method (SREG, 2, Serialized)
            {
                M000 (0x3FA0)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12.SWUS._REG (%d %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
            }

            Method (PPS0, 0, Serialized)
            {
                M000 (0x3FA1)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12.SWUS._PS0 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Method (PPS3, 0, Serialized)
            {
                M000 (0x3FA3)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12.SWUS._PS3 ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Method (PSTA, 0, Serialized)
            {
                M000 (0x3FA5)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12.SWUS.PWRS._STA ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Method (P_ON, 0, Serialized)
            {
                M000 (0x3FA6)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12.SWUS.PWRS._ON ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Method (P_OF, 0, Serialized)
            {
                M000 (0x3FA8)
                M460 ("  OEM-ASL-\\_SB.PCI0.GP12.SWUS.PWRS._OFF ()\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Name (DADR, 0xEEEEEEEE)
            Name (DSTA, 0xEE)
            Name (DBUS, 0xEEEE)
            Name (PCSA, Zero)
            Name (PWST, 0xD3)
            Name (ESTA, 0xEE)
            Name (EBUS, 0xEEEE)
            Name (PW3S, Zero)
            Method (RPRM, 2, NotSerialized)
            {
                Local0 = Arg0
                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                Field (VARM, AnyAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Local1 = VARR /* \_SB_.PCI0.GP12.SWUS.RPRM.VARR */
                If ((Arg1 == One))
                {
                    Local1 &= 0xFF
                }
                ElseIf ((Arg1 == 0x02))
                {
                    Local1 &= 0xFFFF
                }
                ElseIf ((Arg1 == 0x03))
                {
                    Local1 &= 0x00FFFFFF
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X).RPRM (0x%X 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local1, Zero, Zero)
                Return (Local1)
            }

            Method (WPRM, 3, NotSerialized)
            {
                Local0 = Arg0
                If ((Arg1 == One))
                {
                    OperationRegion (VARA, SystemMemory, Local0, One)
                    Field (VARA, AnyAcc, NoLock, Preserve)
                    {
                        VARE,   8
                    }

                    VARE = Arg2
                }
                ElseIf ((Arg1 == 0x02))
                {
                    OperationRegion (VARB, SystemMemory, Local0, 0x02)
                    Field (VARB, AnyAcc, NoLock, Preserve)
                    {
                        VARF,   16
                    }

                    VARF = Arg2
                }
                ElseIf ((Arg1 == 0x03))
                {
                    OperationRegion (VARC, SystemMemory, Local0, 0x03)
                    Field (VARC, AnyAcc, NoLock, Preserve)
                    {
                        VARG,   24
                    }

                    VARG = Arg2
                }
                Else
                {
                    OperationRegion (VARD, SystemMemory, Local0, 0x04)
                    Field (VARD, AnyAcc, NoLock, Preserve)
                    {
                        VARH,   32
                    }

                    VARH = Arg2
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X).WPRM (0x%X 0x%X 0x%X)\n", DADR, Arg0, Arg1, Arg2, Zero, Zero)
            }

            Method (SPDP, 1, NotSerialized)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local2 = Zero
                Local0 = Zero
                While ((Local0 <= 0x1F))
                {
                    Local1 = Zero
                    While ((Local1 <= 0x07))
                    {
                        Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                            0x0F) & 0x000F8000))
                        Local3 |= ((Local1 << 0x0C) & 0x7000)
                        Local4 = RPRM ((M083 + Local3), 0x04)
                        If (((Local4 != Local5) && (Local4 != Zero)))
                        {
                            Local2 |= (One << Local0)
                        }
                        ElseIf ((Local1 == Zero))
                        {
                            Break
                        }

                        Local1++
                    }

                    Local0++
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X).SPDP (0x%X) = 0x%X\n", DADR, Arg0, Local2, Zero, Zero, Zero)
                Return (Local2)
            }

            Method (SPCH, 2, NotSerialized)
            {
                Local0 = Zero
                Local1 = RPRM ((Arg0 + 0x34), One)
                While ((Local1 != Zero))
                {
                    Local2 = RPRM ((DADR + Local1), One)
                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                    {
                        Break
                    }

                    If ((Local2 == Arg1))
                    {
                        Local0 = Local1
                        Break
                    }

                    Local1 = RPRM ((DADR + (Local1 + One)), One)
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X).SPCH (0x%X, 0x%X) = 0x%X\n", DADR, Arg0, Arg1, Local0, Zero, Zero)
                Return (Local0)
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (((DSTA == 0xEE) || (ESTA == 0xEE)))
                {
                    If ((DBUS == 0xEEEE))
                    {
                        If (CondRefOf (^^EBUS))
                        {
                            DBUS = ^^EBUS /* \_SB_.PCI0.GP12.EBUS */
                        }
                        Else
                        {
                            DBUS = Zero
                        }
                    }

                    If ((DBUS != 0xEEEE))
                    {
                        If ((DADR == 0xEEEEEEEE))
                        {
                            Local0 = (((_ADR << 0x0C) & 0x7000) | ((_ADR >> 
                                One) & 0x000F8000))
                            Local0 |= ((DBUS << 0x14) & 0x0FF00000)
                            DADR = (M083 + Local0)
                        }

                        Local0 = 0x7FFFFFFF
                        Local0 |= 0x80000000
                        Local1 = RPRM ((DADR + Zero), 0x04)
                        If (((Local1 == Local0) || (Local1 == Zero)))
                        {
                            DSTA = Zero
                            ESTA = Zero
                            If ((DBUS != Zero))
                            {
                                Local2 = ^^SPCH (^^DADR, 0x10)
                                If (((^^RPRM ((^^DADR + (Local2 + 0x14)), One) & 
                                    0x40) == 0x40))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                            }
                        }
                        ElseIf ((RPRM ((DADR + 0x0A), 0x02) == 0x0604))
                        {
                            EBUS = RPRM ((DADR + 0x19), One)
                            Local2 = SPCH (DADR, 0x10)
                            If ((((RPRM ((DADR + (Local2 + 0x02)), 
                                One) >> 0x04) & 0x0F) == 0x05))
                            {
                                If ((EBUS == Zero))
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                                ElseIf ((SPDP (EBUS) == Zero))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0x0F
                                }
                            }
                            ElseIf (((RPRM ((DADR + (Local2 + 0x1A)), 
                                One) & 0x40) == Zero))
                            {
                                If (((RPRM ((DADR + (Local2 + 0x14)), One) & 
                                    0x40) == Zero))
                                {
                                    DSTA = Zero
                                    ESTA = Zero
                                }
                                Else
                                {
                                    DSTA = 0x0F
                                    ESTA = 0xEE
                                }
                            }
                            ElseIf ((EBUS == Zero))
                            {
                                DSTA = 0x0F
                                ESTA = 0xEE
                            }
                            Else
                            {
                                DSTA = 0x0F
                                ESTA = 0x0F
                            }
                        }
                        Else
                        {
                            DSTA = 0x0F
                            ESTA = Zero
                        }
                    }
                    Else
                    {
                        DSTA = Zero
                        ESTA = 0xEE
                    }
                }

                If ((((PCSA == One) && (PWST == 0xD3)) && (PW3S == One)))
                {
                    PWST = 0xD0
                }

                If ((((PCSA == Zero) && (PWST == 0xD0)) && (PW3S == Zero)))
                {
                    PWST = 0xD3
                }

                If (CondRefOf (SSTA))
                {
                    SSTA ()
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._STA = 0x%X  PWST = 0x%X  DBUS = 0x%X  ESTA = 0x%X  EBUS = 0x%X\n", DADR, DSTA, PWST, DBUS, ESTA, EBUS)
                Return (DSTA) /* \_SB_.PCI0.GP12.SWUS.DSTA */
            }

            Method (_INI, 0, Serialized)  // _INI: Initialize
            {
                Local0 = 0x7FFFFFFF
                Local0 |= 0x80000000
                Local1 = RPRM ((DADR + Zero), 0x04)
                If (((Local1 == Local0) || (Local1 == Zero)))
                {
                    PCSA = Zero
                    PWST = 0xD3
                    PW3S = Zero
                }
                Else
                {
                    PCSA = One
                    PWST = 0xD0
                    PW3S = One
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._INI  PCSA = 0x%X  PWST = 0x%X  PW3S = 0x%X\n", DADR, PCSA, PWST, PW3S, Zero, Zero)
                If (CondRefOf (SINI))
                {
                    SINI ()
                }
            }

            Method (_REG, 2, Serialized)  // _REG: Region Availability
            {
                If (((Arg0 == 0x02) && (Arg1 == One)))
                {
                    If ((DSTA == 0x0F))
                    {
                        If (((RPRM ((DADR + 0x04), One) & 0xFC) == 0x04))
                        {
                            PCSA = One
                        }
                    }
                }

                If (((Arg0 == 0x02) && (Arg1 == Zero)))
                {
                    PCSA = Zero
                }

                If (CondRefOf (SREG))
                {
                    SREG (Arg0, Arg1)
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._REG (%d %d)  PCSA = %d\n", DADR, Arg0, Arg1, PCSA, Zero, Zero)
            }

            Method (_DSW, 3, Serialized)  // _DSW: Device Sleep Wake
            {
                If (CondRefOf (SDSW))
                {
                    SDSW (Arg0, Arg1, Arg2)
                }

                M460 ("  OEM-ASL-PCIe Address (0x%X)._DSW (%d %d %d)  PCSA = %d\n", DADR, Arg0, Arg1, Arg2, PCSA, Zero)
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS0\n", DADR, Zero, Zero, Zero, Zero, Zero)
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                M460 ("  OEM-ASL-PCIe Address (0x%X)._PS3\n", DADR, Zero, Zero, Zero, Zero, Zero)
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            PowerResource (PWRS, 0x00, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._STA = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                    If (CondRefOf (PSTA))
                    {
                        PSTA ()
                    }

                    Return (PW3S) /* \_SB_.PCI0.GP12.SWUS.PW3S */
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                    If ((PW3S == Zero))
                    {
                        PW3S = One
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._ON = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        If (CondRefOf (P_ON))
                        {
                            P_ON ()
                        }
                    }
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                    If ((PW3S == One))
                    {
                        PW3S = Zero
                        M460 ("  OEM-ASL-PCIe Address (0x%X).PWRS._OFF = 0x%X\n", DADR, PW3S, Zero, Zero, Zero, Zero)
                        If (CondRefOf (P_OF))
                        {
                            P_OF ()
                        }
                    }
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PWRS
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PWRS
            })
        }
    }

    Scope (\_GPE)
    {
        Method (_L1A, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            M460 ("  OEM-ASL-\\_GPE._L1A\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_SB.PCI0.GP19))
            {
                M460 ("    Notify (\\_SB.PCI0.GP19, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GP19, 0x02) // Device Wake
            }

            If (CondRefOf (\_SB.PCI0.GP19.NHI0))
            {
                M460 ("    Notify (\\_SB.PCI0.GP19.NHI0, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GP19.NHI0, 0x02) // Device Wake
            }

            If (CondRefOf (\_SB.PCI0.GP19.NHI1))
            {
                M460 ("    Notify (\\_SB.PCI0.GP19.NHI1, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GP19.NHI1, 0x02) // Device Wake
            }

            If (CondRefOf (\_SB.PCI0.GP19.XHC2))
            {
                M460 ("    Notify (\\_SB.PCI0.GP19.XHC2, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GP19.XHC2, 0x02) // Device Wake
            }

            If (CondRefOf (\_SB.PCI0.GP19.XHC3))
            {
                M460 ("    Notify (\\_SB.PCI0.GP19.XHC3, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GP19.XHC3, 0x02) // Device Wake
            }

            If (CondRefOf (\_SB.PCI0.GP19.XHC4))
            {
                M460 ("    Notify (\\_SB.PCI0.GP19.XHC4, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GP19.XHC4, 0x02) // Device Wake
            }

            If (CondRefOf (\_SB.PCI0.GP11))
            {
                M460 ("    Notify (\\_SB.PCI0.GP11, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GP11, 0x02) // Device Wake
            }

            If (CondRefOf (\_SB.PCI0.GP11.SWUS))
            {
                M460 ("    Notify (\\_SB.PCI0.GP11.SWUS, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GP11.SWUS, 0x02) // Device Wake
            }

            If (CondRefOf (\_SB.PCI0.GP12))
            {
                M460 ("    Notify (\\_SB.PCI0.GP12, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GP12, 0x02) // Device Wake
            }

            If (CondRefOf (\_SB.PCI0.GP12.SWUS))
            {
                M460 ("    Notify (\\_SB.PCI0.GP12.SWUS, 0x2)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Notify (\_SB.PCI0.GP12.SWUS, 0x02) // Device Wake
            }
        }
    }
}



SSDT16
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.PCI0.LPC0.EC0_, DeviceObj)
    External (_SB_.PCI0.LPC0.EC0_.ECAV, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.LFCM, UnknownObj)

    Scope (\_SB.PCI0.LPC0.EC0)
    {
        Mutex (HGCT, 0x00)
        Method (_Q4F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((Acquire (\_SB.PCI0.LPC0.EC0.HGCT, 0xA000) == Zero))
            {
                \_SB.UBTC.NTFY ()
                Release (\_SB.PCI0.LPC0.EC0.HGCT)
            }
        }
    }

    Scope (\_SB)
    {
        Device (UBTC)
        {
            Name (_HID, EisaId ("USBC000"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0CA0"))  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_DDN, "USB Type C")  // _DDN: DOS Device Name
            Name (_ADR, Zero)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xBAF66000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.UBTC._CRS.RBUF */
            }

            Device (CR01)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x09, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "CENTER",
                        PLD_Shape              = "UNKNOWN",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x3,
                        PLD_GroupPosition      = 0x1,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x0,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (CR02)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x09, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "CENTER",
                        PLD_Shape              = "UNKNOWN",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x4,
                        PLD_GroupPosition      = 0x1,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x0,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            OperationRegion (E9FF, SystemMemory, 0xFEEC2980, 0x10)
            Field (E9FF, AnyAcc, Lock, Preserve)
            {
                Offset (0x09), 
                EC89,   8
            }

            OperationRegion (USBC, SystemMemory, 0xBAF66000, 0x30)
            Field (USBC, ByteAcc, Lock, Preserve)
            {
                VER1,   8, 
                VER2,   8, 
                RSV1,   8, 
                RSV2,   8, 
                CCI0,   8, 
                CCI1,   8, 
                CCI2,   8, 
                CCI3,   8, 
                CTL0,   8, 
                CTL1,   8, 
                CTL2,   8, 
                CTL3,   8, 
                CTL4,   8, 
                CTL5,   8, 
                CTL6,   8, 
                CTL7,   8, 
                MGI0,   8, 
                MGI1,   8, 
                MGI2,   8, 
                MGI3,   8, 
                MGI4,   8, 
                MGI5,   8, 
                MGI6,   8, 
                MGI7,   8, 
                MGI8,   8, 
                MGI9,   8, 
                MGIA,   8, 
                MGIB,   8, 
                MGIC,   8, 
                MGID,   8, 
                MGIE,   8, 
                MGIF,   8, 
                MGO0,   8, 
                MGO1,   8, 
                MGO2,   8, 
                MGO3,   8, 
                MGO4,   8, 
                MGO5,   8, 
                MGO6,   8, 
                MGO7,   8, 
                MGO8,   8, 
                MGO9,   8, 
                MGOA,   8, 
                MGOB,   8, 
                MGOC,   8, 
                MGOD,   8, 
                MGOE,   8, 
                MGOF,   8
            }

            OperationRegion (DBG0, SystemIO, 0x80, One)
            Field (DBG0, ByteAcc, NoLock, Preserve)
            {
                IO80,   8
            }

            Method (NTFY, 0, Serialized)
            {
                IO80 = 0x4F
                ECRD ()
                Sleep (One)
                Notify (\_SB.UBTC, 0x80) // Status Change
            }

            OperationRegion (H5FA, SystemMemory, 0xFEEC2421, One)
            Field (H5FA, AnyAcc, Lock, Preserve)
            {
                HNTF,   8
            }

            OperationRegion (ECSM, SystemMemory, 0xFEEC2460, 0x30)
            Field (ECSM, AnyAcc, Lock, Preserve)
            {
                HMPR,   8, 
                    ,   7, 
                HMDN,   1, 
                HADD,   8, 
                HCMD,   8, 
                HD00,   8, 
                HD01,   8, 
                HD02,   8, 
                HD03,   8, 
                HD04,   8, 
                HD05,   8, 
                HD06,   8, 
                HD07,   8, 
                HD08,   8, 
                HD09,   8, 
                HD0A,   8, 
                HD0B,   8, 
                HD0C,   8, 
                HD0D,   8, 
                HD0E,   8, 
                HD0F,   8, 
                Offset (0x24), 
                HCNT,   8
            }

            Method (CHKM, 0, NotSerialized)
            {
                Local0 = 0x03E8
                While (HMPR)
                {
                    Sleep (One)
                    Local0--
                    If (!Local0)
                    {
                        Return (0x8080)
                    }
                }

                If (HMDN)
                {
                    Return (Zero)
                }

                Return (0x8081)
            }

            Method (CHKS, 0, NotSerialized)
            {
                Local0 = 0x03E8
                While (HMPR)
                {
                    Sleep (One)
                    Local0--
                    If (!Local0)
                    {
                        Return (0x8080)
                    }
                }

                If (HMDN)
                {
                    Return (Zero)
                }

                Return (0x8081)
            }

            Name (RSTC, Zero)
            Mutex (UBSY, 0x00)
            Method (ECWR, 0, Serialized)
            {
                If (\_SB.PCI0.LPC0.EC0.ECAV)
                {
                    If ((Acquire (\_SB.PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                    {
                        Acquire (UBSY, 0xFFFF)
                        CHKM ()
                        HADD = 0x02
                        Sleep (One)
                        HCMD = 0x06
                        Sleep (One)
                        HD00 = MGO0 /* \_SB_.UBTC.MGO0 */
                        Sleep (One)
                        HD01 = MGO1 /* \_SB_.UBTC.MGO1 */
                        Sleep (One)
                        HD02 = MGO2 /* \_SB_.UBTC.MGO2 */
                        Sleep (One)
                        HD03 = MGO3 /* \_SB_.UBTC.MGO3 */
                        Sleep (One)
                        HD04 = MGO4 /* \_SB_.UBTC.MGO4 */
                        Sleep (One)
                        HD05 = MGO5 /* \_SB_.UBTC.MGO5 */
                        Sleep (One)
                        HD06 = MGO6 /* \_SB_.UBTC.MGO6 */
                        Sleep (One)
                        HD07 = MGO7 /* \_SB_.UBTC.MGO7 */
                        Sleep (One)
                        HD08 = MGO8 /* \_SB_.UBTC.MGO8 */
                        Sleep (One)
                        HD09 = MGO9 /* \_SB_.UBTC.MGO9 */
                        Sleep (One)
                        HD0A = MGOA /* \_SB_.UBTC.MGOA */
                        Sleep (One)
                        HD0B = MGOB /* \_SB_.UBTC.MGOB */
                        Sleep (One)
                        HD0C = MGOC /* \_SB_.UBTC.MGOC */
                        Sleep (One)
                        HD0D = MGOD /* \_SB_.UBTC.MGOD */
                        Sleep (One)
                        HD0E = MGOE /* \_SB_.UBTC.MGOE */
                        Sleep (One)
                        HD0F = MGOF /* \_SB_.UBTC.MGOF */
                        HCNT = 0x10
                        Sleep (One)
                        HMPR = 0x0A
                        EC89 = 0x08
                        Sleep (One)
                        CHKM ()
                        HADD = 0x02
                        Sleep (One)
                        HCMD = 0x04
                        Sleep (One)
                        HD00 = CTL0 /* \_SB_.UBTC.CTL0 */
                        Sleep (One)
                        HD01 = CTL1 /* \_SB_.UBTC.CTL1 */
                        Sleep (One)
                        HD02 = CTL2 /* \_SB_.UBTC.CTL2 */
                        Sleep (One)
                        HD03 = CTL3 /* \_SB_.UBTC.CTL3 */
                        Sleep (One)
                        HD04 = CTL4 /* \_SB_.UBTC.CTL4 */
                        Sleep (One)
                        HD05 = CTL5 /* \_SB_.UBTC.CTL5 */
                        Sleep (One)
                        HD06 = CTL6 /* \_SB_.UBTC.CTL6 */
                        Sleep (One)
                        HD07 = CTL7 /* \_SB_.UBTC.CTL7 */
                        Sleep (One)
                        HCNT = 0x08
                        Sleep (One)
                        HMPR = 0x0A
                        EC89 = 0x08
                        Sleep (One)
                        CHKM ()
                        Release (UBSY)
                        Release (\_SB.PCI0.LPC0.EC0.LFCM)
                    }
                }
            }

            Method (ECRD, 0, Serialized)
            {
                If (\_SB.PCI0.LPC0.EC0.ECAV)
                {
                    If ((Acquire (\_SB.PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                    {
                        Acquire (UBSY, 0xFFFF)
                        CHKM ()
                        HADD = 0x02
                        Sleep (One)
                        HCMD = 0x05
                        Sleep (One)
                        HCNT = 0x10
                        Sleep (One)
                        HMPR = 0x0B
                        EC89 = 0x07
                        Sleep (One)
                        CHKM ()
                        MGI0 = HD00 /* \_SB_.UBTC.HD00 */
                        Sleep (One)
                        MGI1 = HD01 /* \_SB_.UBTC.HD01 */
                        Sleep (One)
                        MGI2 = HD02 /* \_SB_.UBTC.HD02 */
                        Sleep (One)
                        MGI3 = HD03 /* \_SB_.UBTC.HD03 */
                        Sleep (One)
                        MGI4 = HD04 /* \_SB_.UBTC.HD04 */
                        Sleep (One)
                        MGI5 = HD05 /* \_SB_.UBTC.HD05 */
                        Sleep (One)
                        MGI6 = HD06 /* \_SB_.UBTC.HD06 */
                        Sleep (One)
                        MGI7 = HD07 /* \_SB_.UBTC.HD07 */
                        Sleep (One)
                        MGI8 = HD08 /* \_SB_.UBTC.HD08 */
                        Sleep (One)
                        MGI9 = HD09 /* \_SB_.UBTC.HD09 */
                        Sleep (One)
                        MGIA = HD0A /* \_SB_.UBTC.HD0A */
                        Sleep (One)
                        MGIB = HD0B /* \_SB_.UBTC.HD0B */
                        Sleep (One)
                        MGIC = HD0C /* \_SB_.UBTC.HD0C */
                        Sleep (One)
                        MGID = HD0D /* \_SB_.UBTC.HD0D */
                        Sleep (One)
                        MGIE = HD0E /* \_SB_.UBTC.HD0E */
                        Sleep (One)
                        MGIF = HD0F /* \_SB_.UBTC.HD0F */
                        CHKM ()
                        HADD = 0x02
                        Sleep (One)
                        HCMD = 0x03
                        Sleep (One)
                        HCNT = 0x04
                        Sleep (One)
                        HMPR = 0x0B
                        EC89 = 0x07
                        Sleep (One)
                        CHKM ()
                        CCI0 = HD00 /* \_SB_.UBTC.HD00 */
                        Sleep (One)
                        CCI1 = HD01 /* \_SB_.UBTC.HD01 */
                        Sleep (One)
                        CCI2 = HD02 /* \_SB_.UBTC.HD02 */
                        Sleep (One)
                        CCI3 = HD03 /* \_SB_.UBTC.HD03 */
                        Release (UBSY)
                        Release (\_SB.PCI0.LPC0.EC0.LFCM)
                    }
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("6f8398c2-7ca4-11e4-ad36-631042b5008f") /* Unknown UUID */))
                {
                    If ((ToInteger (Arg2) == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x0F                                             // .
                        })
                    }
                    ElseIf ((ToInteger (Arg2) == One))
                    {
                        ECWR ()
                    }
                    ElseIf ((ToInteger (Arg2) == 0x02))
                    {
                        ECRD ()
                        IO80 = 0xAB
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (Zero)
            }
        }
    }
}



SSDT17
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.PCI0.LPC0.EC0_.DIEH, FieldUnitObj)
    External (_SB_.PCI0.LPC0.EC0_.OKEC, IntObj)
    External (_SB_.PCI0.LPC0.EC0_.Z009, MutexObj)
    External (_SB_.PLTF.C000, DeviceObj)
    External (_SB_.PLTF.C001, DeviceObj)
    External (_SB_.PLTF.C002, DeviceObj)
    External (_SB_.PLTF.C003, DeviceObj)
    External (_SB_.PLTF.C004, DeviceObj)
    External (_SB_.PLTF.C005, DeviceObj)
    External (_SB_.PLTF.C006, DeviceObj)
    External (_SB_.PLTF.C007, DeviceObj)
    External (_SB_.PLTF.C008, DeviceObj)
    External (_SB_.PLTF.C009, DeviceObj)
    External (_SB_.PLTF.C00A, DeviceObj)
    External (_SB_.PLTF.C00B, DeviceObj)
    External (_SB_.PLTF.C00C, DeviceObj)
    External (_SB_.PLTF.C00D, DeviceObj)
    External (_SB_.PLTF.C00E, DeviceObj)
    External (_SB_.PLTF.C00F, DeviceObj)
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (M652, FieldUnitObj)

    Scope (\_TZ)
    {
        ThermalZone (TZ01)
        {
            Name (CRTT, 0x6E)
            Name (PSVT, 0x32)
            Name (TSPS, 0x14)
            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = 0x0B74
                If (CondRefOf (\_SB.PCI0.LPC0.EC0.OKEC))
                {
                    If ((\_SB.PCI0.LPC0.EC0.OKEC == One))
                    {
                        If (CondRefOf (\_SB.PCI0.LPC0.EC0.Z009))
                        {
                            Acquire (\_SB.PCI0.LPC0.EC0.Z009, 0xFFFF)
                            If (CondRefOf (\_SB.PCI0.LPC0.EC0.DIEH))
                            {
                                Local0 = \_SB.PCI0.LPC0.EC0.DIEH /* External reference */
                                Local0 = (0x0AAC + (Local0 * 0x0A))
                            }

                            Release (\_SB.PCI0.LPC0.EC0.Z009)
                        }
                    }
                }

                Return (Local0)
            }

            Method (_PSL, 0, Serialized)  // _PSL: Passive List
            {
                Return (Package (0x10)
                {
                    \_SB.PLTF.C000, 
                    \_SB.PLTF.C001, 
                    \_SB.PLTF.C002, 
                    \_SB.PLTF.C003, 
                    \_SB.PLTF.C004, 
                    \_SB.PLTF.C005, 
                    \_SB.PLTF.C006, 
                    \_SB.PLTF.C007, 
                    \_SB.PLTF.C008, 
                    \_SB.PLTF.C009, 
                    \_SB.PLTF.C00A, 
                    \_SB.PLTF.C00B, 
                    \_SB.PLTF.C00C, 
                    \_SB.PLTF.C00D, 
                    \_SB.PLTF.C00E, 
                    \_SB.PLTF.C00F
                })
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Local0 = (0x0AAC + (CRTT * 0x0A))
                Return (Local0)
            }

            Method (_TC1, 0, Serialized)  // _TC1: Thermal Constant 1
            {
                Return (One)
            }

            Method (_TC2, 0, Serialized)  // _TC2: Thermal Constant 2
            {
                Return (0x02)
            }

            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (TSPS) /* \_TZ_.TZ01.TSPS */
            }
        }
    }
}



SSDT18
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.GPP1.WD3C, FieldUnitObj)
    External (_SB_.PCI0.GPP5.DEV0, DeviceObj)
    External (_SB_.PCI0.GPP8.WD3C, FieldUnitObj)
    External (_SB_.PCI0.LPC0.EC0_.ESLP, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.UBCC, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.UPHK, MethodObj)    // 1 Arguments
    External (F0D3, IntObj)
    External (F1D3, IntObj)
    External (F3D3, IntObj)
    External (F5D3, IntObj)
    External (F6D3, IntObj)
    External (G0D3, IntObj)
    External (G3D3, IntObj)
    External (G5D3, IntObj)
    External (H0D3, IntObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M037, DeviceObj)
    External (M045, MethodObj)    // 0 Arguments
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (M652, FieldUnitObj)
    External (P1D3, IntObj)
    External (P3D3, IntObj)
    External (P4D3, IntObj)
    External (XXDF, IntObj)

    Scope (\_SB.PCI0)
    {
        Name (_DEP, Package (0x01)  // _DEP: Dependencies
        {
            \_SB.PEP
        })
    }

    Scope (\)
    {
        Name (SLX4, 0x55)
        Name (SLP4, 0x55)
    }

    Scope (\_SB)
    {
        Device (PEP)
        {
            Name (_HID, "AMDI0009")  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0D80") /* Windows-compatible System Power Management Controller */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (DEVL, Package (0x03)
            {
                Zero, 
                0x25, 
                Package (0x25)
                {
                    Package (0x04)
                    {
                        Zero, 
                        "\\_SB.PCI0.GP17", 
                        Zero, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        "\\_SB.PCI0.GP19", 
                        Zero, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GPP0", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GPP6", 
                        0x02, 
                        One
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GPP0.PEGP", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GPP5", 
                        0x02, 
                        One
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP17.XHC0.RHUB.PRT5", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GPP1.NVME", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GPP5.DEV0", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GPP6.WLAN", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GPP8.NVME", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP17.VGA", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP17.AZAL", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP17.ACP", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP17.HDAU", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP17.XHC0", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP17.XHC1", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP19.XHC2", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP19.XHC3", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP19.XHC4", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.I2CA.TPDD", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C000", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C001", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C002", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C003", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C004", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C005", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C006", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C007", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C008", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C009", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C00A", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C00B", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C00C", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C00D", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C00E", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C00F", 
                        One, 
                        0x03
                    }
                }
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (M045 ())
                {
                    M460 ("  OEM-ASL-\\_SB.PEP._STA = 0xF\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x0F)
                }
                Else
                {
                    M460 ("  OEM-ASL-\\_SB.PEP._STA = 0x0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (Zero)
                }
            }

            Method (MPEP, 4, NotSerialized)
            {
                Local1 = DerefOf (DEVL [One])
                Local0 = Zero
                While ((Local0 < Local1))
                {
                    If ((DerefOf (DerefOf (DerefOf (DEVL [0x02]) [Local0]
                        ) [One]) == Arg1))
                    {
                        DerefOf (DerefOf (DEVL [0x02]) [Local0]) [Zero]
                             = Arg0
                        DerefOf (DerefOf (DEVL [0x02]) [Local0]) [0x02]
                             = Arg2
                        DerefOf (DerefOf (DEVL [0x02]) [Local0]) [0x03]
                             = Arg3
                        Break
                    }

                    Local0++
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                CreateDWordField (Arg0, Zero, UID0)
                M460 ("  OEM-ASL-\\_SB.PEP._DSM (UUID 0x%X, 0x%X, 0x%X)\n", UID0, Arg1, Arg2, Zero, Zero, Zero)
                If ((Arg0 == ToUUID ("e3f32452-febc-43ce-9039-932122d37721") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    M460 ("    Return (Buffer (1) {0x03})\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Case (One)
                                {
                                    M460 ("    Return (Buffer (1) {0x03})\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Case (0x02)
                                {
                                    M460 ("    Return (Buffer (1) {0x3F})\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                    Return (Buffer (One)
                                    {
                                         0x3F                                             // ?
                                    })
                                }
                                Default
                                {
                                    M460 ("    Return (Buffer (1) {0x00})\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            If (CondRefOf (\P4D3))
                            {
                                If ((\P4D3 != 0x55))
                                {
                                    MPEP (One, "\\_SB.PCI0.GP11", Zero, 0x03)
                                    MPEP (One, "\\_SB.PCI0.GP12", Zero, 0x03)
                                }
                            }

                            If (CondRefOf (\P1D3))
                            {
                                If ((\P1D3 != 0x55))
                                {
                                    MPEP (One, "\\_SB.PCI0.GP17", Zero, 0x03)
                                }
                            }

                            If (CondRefOf (\P3D3))
                            {
                                If ((\P3D3 != 0x55))
                                {
                                    MPEP (One, "\\_SB.PCI0.GP19", Zero, 0x03)
                                }
                            }

                            If (CondRefOf (\H0D3))
                            {
                                If ((\H0D3 != 0x04))
                                {
                                    MPEP (Zero, "\\_SB.PCI0.GP11.SWUS", Zero, Zero)
                                    MPEP (Zero, "\\_SB.PCI0.GP12.SWUS", Zero, Zero)
                                }
                            }

                            If (CondRefOf (\F0D3))
                            {
                                If ((\F0D3 != 0x04))
                                {
                                    MPEP (Zero, "\\_SB.PCI0.GP17.VGA", Zero, Zero)
                                }
                            }

                            If (CondRefOf (\F1D3))
                            {
                                If ((\F1D3 != 0x04))
                                {
                                    MPEP (Zero, "\\_SB.PCI0.GP17.HDAU", Zero, Zero)
                                }
                            }

                            If (CondRefOf (\F3D3))
                            {
                                If ((\F3D3 != 0x04))
                                {
                                    MPEP (Zero, "\\_SB.PCI0.GP17.XHC0", Zero, Zero)
                                    MPEP (Zero, "\\_SB.PCI0.GP17.XHC1", Zero, Zero)
                                }
                            }

                            If (CondRefOf (\F5D3))
                            {
                                If ((\F5D3 != 0x04))
                                {
                                    MPEP (Zero, "\\_SB.PCI0.GP17.ACP", Zero, Zero)
                                }
                            }

                            If (CondRefOf (\F6D3))
                            {
                                If ((\F6D3 != 0x04))
                                {
                                    MPEP (Zero, "\\_SB.PCI0.GP17.AZAL", Zero, Zero)
                                }
                            }

                            If (CondRefOf (\G0D3))
                            {
                                If ((\G0D3 != 0x04))
                                {
                                    MPEP (Zero, "\\_SB.PCI0.GP19.XHC2", Zero, Zero)
                                }
                            }

                            If (CondRefOf (\G3D3))
                            {
                                If ((\G3D3 != 0x04))
                                {
                                    MPEP (Zero, "\\_SB.PCI0.GP19.XHC3", Zero, Zero)
                                    MPEP (Zero, "\\_SB.PCI0.GP19.XHC4", Zero, Zero)
                                }
                            }

                            If (CondRefOf (\G5D3))
                            {
                                If ((\G5D3 != 0x04))
                                {
                                    MPEP (Zero, "\\_SB.PCI0.GP19.NHI0", Zero, Zero)
                                    MPEP (Zero, "\\_SB.PCI0.GP19.NHI1", Zero, Zero)
                                }
                            }

                            If ((\SLP4 != 0x55))
                            {
                                MPEP (One, "\\_SB.PCI0.GPP1.DEV0", Zero, 0x03)
                                MPEP (Zero, "\\_SB.PCI0.GPP1.NVME", Zero, Zero)
                                If ((\SLX4 != 0x55))
                                {
                                    MPEP (One, "\\_SB.PCI0.GPP1", Zero, 0x03)
                                }
                            }

                            ToInteger (M453, Local7)
                            If ((Local7 != Zero))
                            {
                                M460 ("    OEM-ASL-DEVL:\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Local1 = DerefOf (DEVL [One])
                                Local0 = Zero
                                While ((Local0 < Local1))
                                {
                                    Local2 = DerefOf (DerefOf (DerefOf (DEVL [0x02]) [Local0]
                                        ) [Zero])
                                    Local3 = DerefOf (DerefOf (DerefOf (DEVL [0x02]) [Local0]
                                        ) [One])
                                    Local4 = DerefOf (DerefOf (DerefOf (DEVL [0x02]) [Local0]
                                        ) [0x02])
                                    Local5 = DerefOf (DerefOf (DerefOf (DEVL [0x02]) [Local0]
                                        ) [0x03])
                                    M460 ("      %d - %d %S %d %d\n", ToInteger (Local0), Local2, Local3, Local4, Local5, Zero)
                                    Local0++
                                }
                            }

                            M460 ("    Return (DEVL)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Return (DEVL) /* \_SB_.PEP_.DEVL */
                        }
                        Case (0x02)
                        {
                            M000 (0x3E14)
                            If (CondRefOf (\_SB.PCI0.LPC0.EC0.UPHK))
                            {
                                \_SB.PCI0.LPC0.EC0.UPHK (0x03)
                            }

                            M460 ("    Return (0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }
                        Case (0x03)
                        {
                            M000 (0x3E15)
                            If (CondRefOf (\_SB.PCI0.LPC0.EC0.UPHK))
                            {
                                \_SB.PCI0.LPC0.EC0.UPHK (0x04)
                            }

                            M460 ("    Return (0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }
                        Case (0x04)
                        {
                            M000 (0x3E12)
                            If (CondRefOf (\_SB.PCI0.LPC0.EC0.UPHK))
                            {
                                \_SB.PCI0.LPC0.EC0.UPHK (0x05)
                                Sleep (One)
                                \_SB.PCI0.LPC0.EC0.UPHK (0x07)
                            }

                            M460 ("    Return (0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }
                        Case (0x05)
                        {
                            M000 (0x3E13)
                            If (CondRefOf (\_SB.PCI0.LPC0.EC0.UPHK))
                            {
                                \_SB.PCI0.LPC0.EC0.UPHK (0x08)
                                Sleep (One)
                                \_SB.PCI0.LPC0.EC0.UPHK (0x06)
                            }

                            M460 ("    Return (0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }
                        Default
                        {
                            M460 ("    Return (0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                    }
                }
                ElseIf ((Arg0 == ToUUID ("11e00d56-ce64-47ce-837b-1f898f9aa461") /* Unknown UUID */))
                {
                    If (CondRefOf (\_SB.PCI0.LPC0.EC0.UPHK))
                    {
                        \_SB.PCI0.LPC0.EC0.UPHK (ToInteger (Arg2))
                    }

                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    M460 ("    Return (Buffer (2) {0xF9, 0x01})\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                    Return (Buffer (0x02)
                                    {
                                         0xF9, 0x01                                       // ..
                                    })
                                }
                                Default
                                {
                                    M460 ("    Return (Buffer (1) {0x00})\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (0x03)
                        {
                            M000 (0x3E03)
                            M460 ("    Return (0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            \_SB.PCI0.LPC0.EC0.ESLP = One
                            Return (Zero)
                        }
                        Case (0x04)
                        {
                            M000 (0x3E04)
                            M460 ("    Return (0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            \_SB.PCI0.LPC0.EC0.ESLP = Zero
                            If (CondRefOf (\_SB.PCI0.GPP1.NVME))
                            {
                                \_SB.PCI0.GPP1.WD3C = Zero
                            }

                            If (CondRefOf (\_SB.PCI0.GPP8.NVME))
                            {
                                \_SB.PCI0.GPP8.WD3C = Zero
                            }

                            Return (Zero)
                        }
                        Case (0x05)
                        {
                            M000 (0x3E05)
                            M460 ("    Return (0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }
                        Case (0x06)
                        {
                            M000 (0x3E06)
                            M460 ("    Return (0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }
                        Case (0x07)
                        {
                            M000 (0x3E07)
                            M460 ("    Return (0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            If (CondRefOf (\_SB.PCI0.GPP1.NVME))
                            {
                                \_SB.PCI0.GPP1.WD3C = One
                            }

                            If (CondRefOf (\_SB.PCI0.GPP8.NVME))
                            {
                                \_SB.PCI0.GPP8.WD3C = One
                            }

                            \_SB.PCI0.LPC0.EC0.UBCC = 0xCC
                            Return (Zero)
                        }
                        Case (0x08)
                        {
                            \XXDF = One
                            M000 (0x3E08)
                            If (CondRefOf (\_SB.PCI0.GPP5.DEV0))
                            {
                                M460 ("    Notify (\\_SB.PCI0.GPP5.DEV0, 0x1)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Notify (\_SB.PCI0.GPP5.DEV0, One) // Device Check
                            }

                            M460 ("    Return (0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }
                        Default
                        {
                            M460 ("    Return (0x00)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    M460 ("    Return (Buffer (1) {0x00})\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }
}



SSDT19
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.PMF_.M480, BuffObj)
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (M652, FieldUnitObj)

    Scope (\_SB)
    {
        OperationRegion (TP80, SystemIO, 0x80, 0x04)
        Field (TP80, DWordAcc, NoLock, Preserve)
        {
            PMTP,   32
        }

        Name (DPX4, 0xD6040000)
        Method (APX4, 0, Serialized)
        {
            PMTP = DPX4 /* \_SB_.DPX4 */
            DPX4 += One
        }

        Method (APX7, 2, Serialized)
        {
            M460 ("FEA-ASL-\\_SB.PMF.PMF7 call APX7\n", Zero, Zero, Zero, Zero, Zero, Zero)
            Local0 = Arg1
            Local0 <<= 0x08
            Local0 |= Arg0
            PMTP = (0xD6070000 | Local0)
            CreateWordField (\_SB.PMF.M480, Zero, M157)
            CreateDWordField (\_SB.PMF.M480, 0x02, M4BD)
            CreateDWordField (\_SB.PMF.M480, 0x06, M4BE)
            M157 = 0x0A
            M4BD = 0xFFFFFFFF
            M4BE = 0xFFFFFFFF
            M460 ("  ECFanTableIndex: 0x%x\n", M4BD, Zero, Zero, Zero, Zero, Zero)
            M460 ("  ECFanRPM: 0x%x\n", M4BE, Zero, Zero, Zero, Zero, Zero)
        }

        Method (APX8, 1, Serialized)
        {
            PMTP = (0xD6080000 | Arg0)
        }

        Method (APXA, 1, Serialized)
        {
            PMTP = (0xD60A0000 | Arg0)
        }

        Method (APXE, 3, Serialized)
        {
            PMTP = (0xD60E0000 | Arg0)
            Sleep (One)
            PMTP = (0xD60E1000 | Arg1)
            Sleep (One)
            PMTP = (0xD60E2000 | Arg2)
        }

        Method (APXF, 2, Serialized)
        {
            Local0 = Arg1
            Local0 <<= 0x08
            Local0 |= Arg0
            PMTP = (0xD60F0000 | Local0)
        }

        Method (APXG, 4, Serialized)
        {
            Local0 = Arg3
            Local0 <<= 0x04
            Local0 |= Arg2
            Local0 <<= 0x04
            Local0 |= Arg1
            Local0 <<= 0x04
            Local0 |= Arg0
            PMTP = (0xD6100000 | Local0)
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    Scope (\_SB)
    {
        Name (AGRB, 0xE0000000)
        Name (ADBG, Buffer (0x0100){})
        Mutex (AM00, 0x00)
        Name (ADAT, Buffer (0x0520)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x07,  // ........
            /* 0028 */  0x00, 0xFF, 0xFF, 0x00, 0x03, 0x01, 0x01, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0038 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0060 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0088 */  0x00, 0x00, 0x01, 0x18, 0x1B, 0xFF, 0xFF, 0x00,  // ........
            /* 0090 */  0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00B0 */  0x00, 0x00, 0x00, 0x16, 0x16, 0xFF, 0xFF, 0x02,  // ........
            /* 00B8 */  0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x17,  // ........
            /* 00C8 */  0x17, 0xFF, 0xFF, 0x03, 0x00, 0x02, 0x01, 0x00,  // ........
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        OperationRegion (A001, SystemIO, 0x80, 0x04)
        Field (A001, DWordAcc, NoLock, Preserve)
        {
            A002,   32
        }

        OperationRegion (A003, SystemIO, 0x80, 0x02)
        Field (A003, WordAcc, NoLock, Preserve)
        {
            A004,   16
        }

        OperationRegion (A005, SystemIO, 0x80, 0x01)
        Field (A005, ByteAcc, NoLock, Preserve)
        {
            A006,   8
        }

        Method (A007, 1, NotSerialized)
        {
            A002 = (Arg0 | 0xB0000000)
        }

        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                A007 (0xAA80)
                CreateWordField (Arg1, 0x00, A020)
                CreateWordField (Arg1, 0x02, A021)
                CreateDWordField (Arg1, 0x04, A022)
                Local0 = Buffer (0x0100){}
                CreateWordField (Local0, 0x00, A023)
                A023 = A020 /* \_SB_.ALIB.A020 */
                CreateWordField (Local0, 0x02, A024)
                A024 = A021 /* \_SB_.ALIB.A021 */
                CreateDWordField (Local0, 0x04, A025)
                A025 = A022 /* \_SB_.ALIB.A022 */
                A025 &= ~0x0F
                If ((DerefOf (\_SB.ADAT [0x00]) > 0x00))
                {
                    Local1 = 0x0F
                }
                Else
                {
                    Local1 = 0x01
                }

                A025 |= Local1
                A007 (0xAA81)
                Return (Local0)
            }

            If ((Arg0 == 0x01))
            {
                A007 (0xAA82)
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = A026 (Local0)
                A007 (0xAA83)
                Return (Local1)
            }

            If ((Arg0 == 0x02))
            {
                A007 (0xAA84)
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                A007 (0xAA85)
                Return (Local0)
            }

            If ((Arg0 == 0x03))
            {
                A007 (0xAA86)
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                A007 (0xAA87)
                Return (Local0)
            }

            If ((Arg0 == 0x06))
            {
                A007 (0xAA88)
                Local0 = DerefOf (Arg1 [0x04])
                Local1 = DerefOf (Arg1 [0x02])
                Local2 = A029 (Local0, Local1)
                A007 (0xAA89)
                Return (Local2)
            }

            If ((Arg0 == 0x0A))
            {
                A007 (0xAA8A)
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = A030 (Local0)
                A007 (0xAA8B)
                Return (Local1)
            }

            If ((Arg0 == 0x0B))
            {
                A007 (0xAA8C)
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = DerefOf (Arg1 [0x03])
                Local2 = DerefOf (Arg1 [0x04])
                Local2 |= (DerefOf (Arg1 [0x05]) << 0x08)
                Local2 |= (DerefOf (Arg1 [0x06]) << 0x10)
                Local2 |= (DerefOf (Arg1 [0x07]) << 0x18)
                Local3 = DerefOf (Arg1 [0x08])
                Local3 |= (DerefOf (Arg1 [0x09]) << 0x08)
                Local3 |= (DerefOf (Arg1 [0x0A]) << 0x10)
                Local3 |= (DerefOf (Arg1 [0x0B]) << 0x18)
                Local4 = DerefOf (Arg1 [0x0C])
                Local4 |= (DerefOf (Arg1 [0x0D]) << 0x08)
                Local4 |= (DerefOf (Arg1 [0x0E]) << 0x10)
                Local4 |= (DerefOf (Arg1 [0x0F]) << 0x18)
                Local5 = A031 (Local0, Local1, Local2, Local3, Local4)
                A007 (0xAA8D)
                Return (Local5)
            }

            If ((Arg0 == 0x0C))
            {
                A007 (0xAA8E)
                Local0 = A032 (Arg1)
                A007 (0xAA8F)
                Return (Local0)
            }

            If ((Arg0 == 0x10))
            {
                A007 (0xAA90)
                Local7 = Buffer (0x18){}
                CreateDWordField (Local7, 0x00, A033)
                CreateDWordField (Local7, 0x04, A034)
                CreateDWordField (Local7, 0x08, A035)
                CreateDWordField (Local7, 0x0C, A036)
                CreateDWordField (Local7, 0x10, A037)
                CreateDWordField (Local7, 0x14, A038)
                A033 = 0x00
                A034 = 0x00
                A035 = 0x00
                A036 = 0x00
                A037 = 0x00
                A038 = 0x00
                A018 (0x28, Local7)
                A007 (0xAA91)
            }

            If ((Arg0 == 0x11))
            {
                A007 (0xAA92)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A012)
                CreateDWordField (Local6, 0x04, A013)
                CreateDWordField (Local6, 0x08, A014)
                CreateDWordField (Local6, 0x0C, A015)
                CreateDWordField (Local6, 0x10, A016)
                CreateDWordField (Local6, 0x14, A017)
                A012 = 0x00
                A013 = 0x00
                A014 = 0x00
                A015 = 0x00
                A016 = 0x00
                A017 = 0x00
                A018 (0x27, Local6)
                A007 (0xAA93)
            }

            If ((Arg0 == 0x12))
            {
                A007 (0xAA94)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A039)
                CreateDWordField (Local6, 0x04, A040)
                CreateDWordField (Local6, 0x08, A041)
                CreateDWordField (Local6, 0x0C, A042)
                CreateDWordField (Local6, 0x10, A043)
                CreateDWordField (Local6, 0x14, A044)
                A039 = 0x00
                A040 = 0x00
                A041 = 0x00
                A042 = 0x00
                A043 = 0x00
                A044 = 0x00
                Local5 = A045 (Arg1)
                If ((0xFF != Local5))
                {
                    A039 = Local5
                    A040 = 0x02
                    A046 (0x24, Local6)
                }

                A007 (0xAA95)
            }

            If ((Arg0 == 0x13))
            {
                A007 (0xAA96)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A047)
                CreateDWordField (Local6, 0x04, A048)
                CreateDWordField (Local6, 0x08, A049)
                CreateDWordField (Local6, 0x0C, A050)
                CreateDWordField (Local6, 0x10, A051)
                CreateDWordField (Local6, 0x14, A052)
                A047 = 0x00
                A048 = 0x00
                A049 = 0x00
                A050 = 0x00
                A051 = 0x00
                A052 = 0x00
                Local5 = A045 (Arg1)
                If ((0xFF != Local5))
                {
                    A047 = Local5
                    A048 = 0x01
                    A046 (0x24, Local6)
                }

                A007 (0xAA97)
            }

            If ((Arg0 == 0x14))
            {
                A007 (0xAA9C)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A053)
                CreateDWordField (Local6, 0x04, A054)
                CreateDWordField (Local6, 0x08, A055)
                CreateDWordField (Local6, 0x0C, A056)
                CreateDWordField (Local6, 0x10, A057)
                CreateDWordField (Local6, 0x14, A058)
                A053 = Arg1
                A054 = 0x00
                A055 = 0x00
                A056 = 0x00
                A057 = 0x00
                A058 = 0x00
                A018 (0x61, Local6)
                A007 (0xAA9D)
            }

            If ((Arg0 == 0x15))
            {
                A007 (0xAA9E)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A059)
                CreateDWordField (Local6, 0x04, A060)
                CreateDWordField (Local6, 0x08, A061)
                CreateDWordField (Local6, 0x0C, A062)
                CreateDWordField (Local6, 0x10, A063)
                CreateDWordField (Local6, 0x14, A064)
                A059 = Arg1
                A060 = 0x00
                A061 = 0x00
                A062 = 0x00
                A063 = 0x00
                A064 = 0x00
                A018 (0x65, Local6)
                A007 (0xAA9F)
            }

            If ((Arg0 == 0xAA))
            {
                A007 (0xAA98)
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A065)
                CreateDWordField (Local6, 0x04, A066)
                CreateDWordField (Local6, 0x08, A067)
                CreateDWordField (Local6, 0x0C, A068)
                CreateDWordField (Local6, 0x10, A069)
                CreateDWordField (Local6, 0x14, A070)
                A065 = 0x00
                A066 = 0x00
                A067 = 0x00
                A068 = 0x00
                A069 = 0x00
                A070 = 0x00
                A071 (Arg1)
                A007 (0xAA99)
            }

            Return (0x00)
        }

        Method (A029, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x0B))
            {
                Local1 = A123 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    Local2 = A124 (Local0, Arg0)
                    Break
                }

                Local0++
            }

            Local7 = Buffer (0x0A){}
            CreateWordField (Local7, 0x00, A023)
            CreateByteField (Local7, 0x02, A073)
            CreateByteField (Local7, 0x03, A125)
            A023 = 0x04
            A073 = 0x00
            If ((Local2 == 0x00))
            {
                A125 = 0x00
            }
            Else
            {
                A125 = 0x01
            }

            Return (Local7)
        }

        Method (A123, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A118 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A118 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A118 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A118 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A118 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A118 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A118 (Arg1))
            }
        }

        Method (A124, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A119 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A119 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A119 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A119 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A119 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A119 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A119 (Arg1))
            }
        }

        Name (AD00, 0x00)
        Name (DK00, 0x00)
        Method (A026, 1, NotSerialized)
        {
            AD00 = Arg0
            A011 ()
        }

        Method (A030, 1, NotSerialized)
        {
            DK00 = Arg0
        }

        Method (A031, 5, NotSerialized)
        {
        }

        Name (AP01, 0x00)
        Name (AP02, 0x00)
        Name (AP03, 0x00)
        Name (AP05, 0x00)
        Name (AP0B, 0xFF)
        Name (AP10, 0x00)
        Method (A072, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100){}
            CreateWordField (Local7, 0x00, A023)
            A023 = 0x03
            CreateByteField (Local7, 0x02, A073)
            A073 = 0x01
            If ((DerefOf (\_SB.ADAT [0x00]) == 0x01))
            {
                A073 = 0x02
                Return (Local7)
            }

            If ((DerefOf (\_SB.ADAT [0x00]) == 0x00))
            {
                A073 = 0x01
                Return (Local7)
            }

            A074 (Arg0)
            If ((AP05 != 0x01))
            {
                Return (Local7)
            }

            A075 ()
            A073 = 0x02
            Return (Local7)
        }

        Method (A076, 0, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            If ((AP05 != 0x01))
            {
                Return (0x00)
            }

            A075 ()
        }

        Method (A077, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                AP01 = 0x00
            }
        }

        Method (A078, 1, NotSerialized)
        {
            AP10 = 0x01
        }

        Method (A079, 1, NotSerialized)
        {
            AP05 = Arg0
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            Local1 = AP0B /* \_SB_.AP0B */
            If ((AP05 == 0x00))
            {
                Local0 = 0x00
                While ((Local0 < 0x0B))
                {
                    A080 (Local0)
                    Local0++
                }

                AP0B = 0x00
            }

            A075 ()
            AP0B = Local1
            Local7 = Buffer (0x0100){}
            Local7 [0x00] = 0x03
            Local7 [0x01] = 0x00
            Local7 [0x02] = 0x00
            Return (Local7)
        }

        Method (A081, 0, NotSerialized)
        {
            If ((AP0B != 0xFF))
            {
                Return (AP0B) /* \_SB_.AP0B */
            }

            Return (AD00) /* \_SB_.AD00 */
        }

        Method (A074, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Local0 = 0x00
            While ((Local0 < 0x0B))
            {
                If ((A082 (Local0, AP06) == 0x01))
                {
                    If (((AP07 & AP08) == 0x01))
                    {
                        Local1 = A083 (Local0)
                        A084 (Local0, Local1)
                    }
                    Else
                    {
                        A084 (Local0, AP0A)
                    }

                    Break
                }

                Local0++
            }
        }

        Method (A085, 0, NotSerialized)
        {
            AP02 = 0x01
            Local0 = 0x00
            While ((Local0 < 0x0B))
            {
                Local1 = A086 (Local0)
                If ((Local1 > AP02))
                {
                    AP02 = Local1
                }

                Local0++
            }
        }

        Method (A087, 0, NotSerialized)
        {
            AP03 = 0x00
            Local0 = 0x00
            While ((Local0 < 0x0B))
            {
                Local1 = A088 (Local0)
                If ((Local1 > AP03))
                {
                    AP03 = Local1
                }

                Local0++
            }
        }

        Method (A075, 0, NotSerialized)
        {
            A087 ()
            A085 ()
            If ((AP02 != AP01))
            {
                A019 (AP02, AP01)
            }

            If ((AP02 > AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            Local0 = 0x00
            While ((Local0 < 0x0B))
            {
                Local1 = A086 (Local0)
                Local2 = A089 (Local0)
                If ((Local1 != Local2))
                {
                    A090 (Local0, Local1)
                }
                ElseIf ((AP10 == 0x01))
                {
                    A090 (Local0, Local1)
                }

                Local0++
            }

            If ((AP02 < AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }
            ElseIf ((AP10 == 0x01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            AP10 = 0x00
        }

        Method (A090, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A091 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A091 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A091 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A091 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A091 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A091 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A091 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A091 (Arg1))
            }
        }

        Method (A089, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A092 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A092 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A092 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A092 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A092 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A092 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A092 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A092 ())
            }
        }

        Method (A086, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A093 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A093 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A093 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A093 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A093 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A093 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A093 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A093 ())
            }
        }

        Method (A088, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A094 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A094 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A094 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A094 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A094 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A094 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A094 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A094 ())
            }
        }

        Method (A083, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A095 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A095 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A095 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A095 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A095 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A095 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A095 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A095 ())
            }
        }

        Method (A084, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A096 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A096 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A096 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A096 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A096 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A096 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A096 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A096 (Arg1))
            }
        }

        Method (A082, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A097 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A097 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A097 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A097 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A097 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A097 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A097 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A097 (Arg1))
            }
        }

        Method (A080, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A098 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A098 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A098 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A098 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A098 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A098 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A098 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A098 ())
            }
        }

        OperationRegion (A168, SystemMemory, AGRB, 0x1000)
        Field (A168, DWordAcc, Lock, Preserve)
        {
            Offset (0xA0), 
            A169,   32
        }

        BankField (A168, A169, 0x03B10528, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A153,   32
        }

        BankField (A168, A169, 0x03B10578, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A146,   32
        }

        BankField (A168, A169, 0x03B10998, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A147,   32
        }

        BankField (A168, A169, 0x03B1099C, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A148,   32
        }

        BankField (A168, A169, 0x03B109A0, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A149,   32
        }

        BankField (A168, A169, 0x03B109A4, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A150,   32
        }

        BankField (A168, A169, 0x03B109A8, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A151,   32
        }

        BankField (A168, A169, 0x03B109AC, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A152,   32
        }

        BankField (A168, A169, 0x13B00084, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A128,   32
        }

        BankField (A168, A169, 0x11140280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A129,   32
        }

        BankField (A168, A169, 0x11141280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A130,   32
        }

        BankField (A168, A169, 0x11142280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A131,   32
        }

        BankField (A168, A169, 0x11143280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A132,   32
        }

        BankField (A168, A169, 0x11144280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A133,   32
        }

        BankField (A168, A169, 0x11240280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A134,   32
        }

        BankField (A168, A169, 0x11241280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A135,   32
        }

        BankField (A168, A169, 0x11242280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A136,   32
        }

        BankField (A168, A169, 0x11243280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A137,   32
        }

        BankField (A168, A169, 0x11244280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A138,   32
        }

        BankField (A168, A169, 0x11245280, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A139,   32
        }

        BankField (A168, A169, 0x11140294, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A175,   32
        }

        BankField (A168, A169, 0x11141294, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A176,   32
        }

        BankField (A168, A169, 0x11142294, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A177,   32
        }

        BankField (A168, A169, 0x11143294, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A178,   32
        }

        BankField (A168, A169, 0x0C9109C8, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A160,   32
        }

        BankField (A168, A169, 0x0C9109CC, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A161,   32
        }

        BankField (A168, A169, 0x0C9109D0, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A162,   32
        }

        BankField (A168, A169, 0x0C9109D4, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A163,   32
        }

        BankField (A168, A169, 0x0C9109D8, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A164,   32
        }

        BankField (A168, A169, 0x0C9109DC, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A165,   32
        }

        BankField (A168, A169, 0x0C9109E0, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A166,   32
        }

        BankField (A168, A169, 0x0C910554, DWordAcc, Lock, Preserve)
        {
            Offset (0xA4), 
            A167,   32
        }

        Method (A126, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A106 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A106 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A106 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A106 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A106 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A106 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A106 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A106 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR0.ABR8.A106 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR0.ABR9.A106 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR0.ABRA.A106 (Arg1))
            }
        }

        Method (A127, 2, NotSerialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            If ((Arg1 == 0x01))
            {
                If ((Arg0 == 0x00))
                {
                    Local0 = 0x00190300
                }

                If ((Arg0 == 0x01))
                {
                    Local0 = 0x001A0300
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = 0x001B0300
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = 0x001C0300
                }

                If ((Arg0 == 0x04))
                {
                    Local0 = 0x001D0300
                }

                If ((Arg0 == 0x05))
                {
                    Local0 = 0x001E0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x001F0300
                }

                If ((Arg0 == 0x07))
                {
                    Local0 = 0x00090300
                }

                If ((Arg0 == 0x08))
                {
                    Local0 = 0x000A0300
                }

                If ((Arg0 == 0x09))
                {
                    Local0 = 0x000B0300
                }

                If ((Arg0 == 0x0A))
                {
                    Local0 = 0x000C0300
                }

                Local1 = A128 /* \_SB_.A128 */
                Local1 &= 0xFF00FCFF
                A128 = (Local0 | Local1)
                Local1 = A128 /* \_SB_.A128 */
                A128 = (0xFFFFFDFF & Local1)
            }
            ElseIf ((Arg1 == 0x00))
            {
                If ((Arg0 == 0x00))
                {
                    Local1 = A129 /* \_SB_.A129 */
                    A129 = (0x00400000 | Local1)
                    Local1 = A129 /* \_SB_.A129 */
                    A129 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x01))
                {
                    Local1 = A130 /* \_SB_.A130 */
                    A130 = (0x00400000 | Local1)
                    Local1 = A130 /* \_SB_.A130 */
                    A130 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x02))
                {
                    Local1 = A131 /* \_SB_.A131 */
                    A131 = (0x00400000 | Local1)
                    Local1 = A131 /* \_SB_.A131 */
                    A131 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x03))
                {
                    Local1 = A132 /* \_SB_.A132 */
                    A132 = (0x00400000 | Local1)
                    Local1 = A132 /* \_SB_.A132 */
                    A132 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x04))
                {
                    Local1 = A133 /* \_SB_.A133 */
                    A133 = (0x00400000 | Local1)
                    Local1 = A133 /* \_SB_.A133 */
                    A133 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x05))
                {
                    Local1 = A134 /* \_SB_.A134 */
                    A134 = (0x00400000 | Local1)
                    Local1 = A134 /* \_SB_.A134 */
                    A134 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x06))
                {
                    Local1 = A135 /* \_SB_.A135 */
                    A135 = (0x00400000 | Local1)
                    Local1 = A135 /* \_SB_.A135 */
                    A135 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x07))
                {
                    Local1 = A136 /* \_SB_.A136 */
                    A136 = (0x00400000 | Local1)
                    Local1 = A136 /* \_SB_.A136 */
                    A136 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x08))
                {
                    Local1 = A137 /* \_SB_.A137 */
                    A137 = (0x00400000 | Local1)
                    Local1 = A137 /* \_SB_.A137 */
                    A137 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x09))
                {
                    Local1 = A138 /* \_SB_.A138 */
                    A138 = (0x00400000 | Local1)
                    Local1 = A138 /* \_SB_.A138 */
                    A138 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x0A))
                {
                    Local1 = A139 /* \_SB_.A139 */
                    A139 = (0x00400000 | Local1)
                    Local1 = A139 /* \_SB_.A139 */
                    A139 = (0xFFBFFFFF & Local1)
                }
            }

            Release (\_SB.AM00)
        }

        Method (A010, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x0B))
            {
                Local1 = A126 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    A127 (Local0, Arg1)
                    Break
                }

                Local0++
            }
        }

        Method (A045, 1, NotSerialized)
        {
            Local0 = 0xFF
            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR0.A110 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR1.A110 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR2.A110 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR3.A110 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR4.A110 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR5.A110 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR6.A110 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR7.A110 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR8.A110 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABR9.A110 (Arg0)
            }

            If ((0xFF == Local0))
            {
                Local0 = \_SB.AWR0.ABRA.A110 (Arg0)
            }

            Return (Local0)
        }

        Method (A018, 2, Serialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            CreateDWordField (Arg1, 0x00, A140)
            CreateDWordField (Arg1, 0x04, A141)
            CreateDWordField (Arg1, 0x08, A142)
            CreateDWordField (Arg1, 0x0C, A143)
            CreateDWordField (Arg1, 0x10, A144)
            CreateDWordField (Arg1, 0x14, A145)
            While ((A146 == 0x00)){}
            A146 = 0x00
            While ((A146 != 0x00))
            {
                A146 = 0x00
            }

            A147 = A140 /* \_SB_.A018.A140 */
            A148 = A141 /* \_SB_.A018.A141 */
            A149 = A142 /* \_SB_.A018.A142 */
            A150 = A143 /* \_SB_.A018.A143 */
            A151 = A144 /* \_SB_.A018.A144 */
            A152 = A145 /* \_SB_.A018.A145 */
            A153 = Arg0
            While ((A146 == 0x00)){}
            Release (\_SB.AM00)
        }

        Method (A121, 5, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            A012 = Arg0
            A013 = Arg1
            A014 = Arg2
            A015 = Arg3
            A018 (0x09, Local7)
        }

        Method (A046, 2, Serialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            CreateDWordField (Arg1, 0x00, A154)
            CreateDWordField (Arg1, 0x04, A155)
            CreateDWordField (Arg1, 0x08, A156)
            CreateDWordField (Arg1, 0x0C, A157)
            CreateDWordField (Arg1, 0x10, A158)
            CreateDWordField (Arg1, 0x14, A159)
            Local0 = (0x80000000 & A160) /* \_SB_.A160 */
            While ((Local0 == 0x00))
            {
                Local0 = (0x80000000 & A160) /* \_SB_.A160 */
            }

            A161 = A154 /* \_SB_.A046.A154 */
            A162 = A155 /* \_SB_.A046.A155 */
            A163 = A156 /* \_SB_.A046.A156 */
            A164 = A157 /* \_SB_.A046.A157 */
            A165 = A158 /* \_SB_.A046.A158 */
            A166 = A159 /* \_SB_.A046.A159 */
            Local1 = (Arg0 & 0xFF)
            Local1 <<= 0x08
            A160 = Local1
            A167 = 0xFFFFFFFF
            Local0 = (0x80000000 & A160) /* \_SB_.A160 */
            While ((Local0 == 0x00))
            {
                Local0 = (0x80000000 & A160) /* \_SB_.A160 */
            }

            Release (\_SB.AM00)
        }

        Method (AMNR, 1, NotSerialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            BankField (A168, A169, Arg0, DWordAcc, NoLock, Preserve)
            {
                Offset (0xA4), 
                A170,   32
            }

            Release (\_SB.AM00)
            Return (A170) /* \_SB_.AMNR.A170 */
        }

        Method (AMNW, 2, NotSerialized)
        {
            Acquire (\_SB.AM00, 0xFFFF)
            BankField (A168, A169, Arg0, DWordAcc, NoLock, Preserve)
            {
                Offset (0xA4), 
                A171,   32
            }

            A171 = Arg1
            Release (\_SB.AM00)
        }

        Method (A032, 1, Serialized)
        {
            CreateWordField (Arg0, 0x00, A172)
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            Local0 = 0x02
            While ((Local0 < A172))
            {
                Local1 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x10)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x18)
                Local0++
                A012 = 0x00
                A013 = 0x00
                A014 = 0x00
                A015 = 0x00
                A016 = 0x00
                A017 = 0x00
                If ((Local1 == 0x01))
                {
                    A012 = Local2
                    A018 (0x18, Local7)
                }

                If ((Local1 == 0x03))
                {
                    A012 = Local2
                    A018 (0x19, Local7)
                }

                If ((Local1 == 0x05))
                {
                    A012 = Local2
                    A018 (0x14, Local7)
                }

                If ((Local1 == 0x06))
                {
                    A012 = Local2
                    A018 (0x15, Local7)
                }

                If ((Local1 == 0x07))
                {
                    A012 = Local2
                    A018 (0x16, Local7)
                }

                If ((Local1 == 0x08))
                {
                    A012 = Local2
                    A018 (0x17, Local7)
                }

                If ((Local1 == 0x09))
                {
                    A012 = Local2
                    A018 (0x1F, Local7)
                }

                If ((Local1 == 0x0B))
                {
                    A012 = Local2
                    A018 (0x1A, Local7)
                }

                If ((Local1 == 0x0C))
                {
                    A012 = Local2
                    A018 (0x1C, Local7)
                }

                If ((Local1 == 0x0D))
                {
                    A012 = Local2
                    A018 (0x1E, Local7)
                }

                If ((Local1 == 0x0E))
                {
                    A012 = Local2
                    A018 (0x1B, Local7)
                }

                If ((DerefOf (\_SB.ADAT [0x08]) == 0x01))
                {
                    If ((Local1 == 0x10))
                    {
                        If ((Local2 == 0x00))
                        {
                            A018 (0x28, Local7)
                        }
                        Else
                        {
                            A018 (0x27, Local7)
                        }
                    }
                }

                If ((Local1 == 0x11))
                {
                    A012 = Local2
                    A018 (0x1D, Local7)
                }

                If ((Local1 == 0x12))
                {
                    A012 = Local2
                    A018 (0x54, Local7)
                }

                If ((Local1 == 0x13))
                {
                    A012 = Local2
                    A018 (0x23, Local7)
                }

                If ((Local1 == 0x20))
                {
                    A012 = Local2
                    A018 (0x31, Local7)
                }

                If ((Local1 == 0x21))
                {
                    A012 = Local2
                    A018 (0x32, Local7)
                }

                If ((Local1 == 0x22))
                {
                    A012 = Local2
                    A018 (0x33, Local7)
                }

                If ((Local1 == 0x23))
                {
                    A012 = Local2
                    A018 (0x34, Local7)
                }

                If ((Local1 == 0x24))
                {
                    A012 = Local2
                    A018 (0x35, Local7)
                }

                If ((Local1 == 0x25))
                {
                    A012 = Local2
                    A018 (0x36, Local7)
                }

                If ((Local1 == 0x26))
                {
                    A012 = Local2
                    A018 (0x37, Local7)
                }

                If ((Local1 == 0x27))
                {
                    A012 = Local2
                    A018 (0x38, Local7)
                }

                If ((Local1 == 0x28))
                {
                    A012 = Local2
                    A018 (0x39, Local7)
                }

                If ((Local1 == 0x29))
                {
                    A012 = Local2
                    A018 (0x3A, Local7)
                }

                If ((Local1 == 0x2A))
                {
                    A012 = Local2
                    A018 (0x3B, Local7)
                }

                If ((Local1 == 0x2B))
                {
                    A012 = Local2
                    A018 (0x3C, Local7)
                }

                If ((Local1 == 0x2C))
                {
                    A012 = Local2
                    A018 (0x3D, Local7)
                }

                If ((Local1 == 0x2D))
                {
                    A012 = Local2
                    A018 (0x3E, Local7)
                }

                If ((Local1 == 0x2E))
                {
                    A012 = Local2
                    A018 (0x4A, Local7)
                }

                If ((Local1 == 0x30))
                {
                    A012 = Local2
                    A018 (0x55, Local7)
                    Acquire (\_SB.AM00, 0xFFFF)
                    Local3 = Buffer (0x08){}
                    CreateDWordField (Local3, 0x00, A173)
                    CreateDWordField (Local3, 0x04, A174)
                    A173 = A147 /* \_SB_.A147 */
                    A174 = A148 /* \_SB_.A148 */
                    Release (\_SB.AM00)
                    Return (Local3)
                }

                If ((Local1 == 0x31))
                {
                    A012 = Local2
                    A018 (0x56, Local7)
                }

                If ((Local1 == 0x32))
                {
                    A012 = Local2
                    A018 (0x20, Local7)
                }
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x90)  // _UID: Unique ID
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A104,   8, 
                    A105,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A099, 0, NotSerialized)
                {
                    Local0 = A081 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR0.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A100, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A093, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }

                    Local0 = A100 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A099 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A092, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR0.AB02 */
                }

                Method (A095, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                }

                Method (A091, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A101 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A102 (0x00)
                    Name (A103, 0x00)
                    A102 (0x01)
                }

                Method (A096, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A097, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A104) && (Local0 <= A105)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A106, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A098, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A101, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A108 (Local0, 0x00)
                    Local2 = A108 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A108 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A108 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A109 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A109 (0x26, Local5, 0x00)
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A110, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR0.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR0.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A108 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A108 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A108 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A102, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A108 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A108 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A108 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A108, 2, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR0.A108.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A106 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A103, 0x00)
                    Local2 = 0x00
                    A103 = A112 /* \_SB_.AWR0.ABR0.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A102 (0x00)
                        Local0 = A108 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A108 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A108 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A103 /* \_SB_.AWR0.ABR0.A119.A103 */
                    If ((A103 != 0x00))
                    {
                        A102 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A104,   8, 
                    A105,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A099, 0, NotSerialized)
                {
                    Local0 = A081 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR1.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A100, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A093, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }

                    Local0 = A100 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A099 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A092, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR1.AB02 */
                }

                Method (A095, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                }

                Method (A091, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A101 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A102 (0x00)
                    Name (A103, 0x00)
                    A102 (0x01)
                }

                Method (A096, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A097, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A104) && (Local0 <= A105)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A106, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A098, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A101, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A108 (Local0, 0x00)
                    Local2 = A108 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A108 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A108 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A109 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A109 (0x26, Local5, 0x00)
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A110, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR1.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR1.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A108 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A108 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A108 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A102, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A108 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A108 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A108 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A108, 2, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR1.A108.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A106 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A103, 0x00)
                    Local2 = 0x00
                    A103 = A112 /* \_SB_.AWR0.ABR1.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A102 (0x00)
                        Local0 = A108 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A108 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A108 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A103 /* \_SB_.AWR0.ABR1.A119.A103 */
                    If ((A103 != 0x00))
                    {
                        A102 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A104,   8, 
                    A105,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A099, 0, NotSerialized)
                {
                    Local0 = A081 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR2.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A100, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A093, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }

                    Local0 = A100 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A099 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A092, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR2.AB02 */
                }

                Method (A095, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                }

                Method (A091, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A101 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A102 (0x00)
                    Name (A103, 0x00)
                    A102 (0x01)
                }

                Method (A096, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A097, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A104) && (Local0 <= A105)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A106, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A098, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A101, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A108 (Local0, 0x00)
                    Local2 = A108 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A108 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A108 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A109 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A109 (0x26, Local5, 0x00)
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A110, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR2.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR2.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A108 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A108 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A108 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A102, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A108 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A108 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A108 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A108, 2, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR2.A108.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A106 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A103, 0x00)
                    Local2 = 0x00
                    A103 = A112 /* \_SB_.AWR0.ABR2.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A102 (0x00)
                        Local0 = A108 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A108 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A108 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A103 /* \_SB_.AWR0.ABR2.A119.A103 */
                    If ((A103 != 0x00))
                    {
                        A102 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A104,   8, 
                    A105,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A099, 0, NotSerialized)
                {
                    Local0 = A081 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR3.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A100, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A093, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }

                    Local0 = A100 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A099 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A092, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR3.AB02 */
                }

                Method (A095, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                }

                Method (A091, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A101 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A102 (0x00)
                    Name (A103, 0x00)
                    A102 (0x01)
                }

                Method (A096, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A097, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A104) && (Local0 <= A105)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A106, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A098, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A101, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A108 (Local0, 0x00)
                    Local2 = A108 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A108 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A108 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A109 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A109 (0x26, Local5, 0x00)
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A110, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR3.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR3.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A108 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A108 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A108 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A102, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A108 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A108 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A108 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A108, 2, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR3.A108.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A106 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A103, 0x00)
                    Local2 = 0x00
                    A103 = A112 /* \_SB_.AWR0.ABR3.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A102 (0x00)
                        Local0 = A108 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A108 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A108 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A103 /* \_SB_.AWR0.ABR3.A119.A103 */
                    If ((A103 != 0x00))
                    {
                        A102 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A104,   8, 
                    A105,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A099, 0, NotSerialized)
                {
                    Local0 = A081 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR4.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A100, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A093, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }

                    Local0 = A100 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A099 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A092, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR4.AB02 */
                }

                Method (A095, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                }

                Method (A091, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A101 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A102 (0x00)
                    Name (A103, 0x00)
                    A102 (0x01)
                }

                Method (A096, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A097, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A104) && (Local0 <= A105)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A106, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A098, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A101, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A108 (Local0, 0x00)
                    Local2 = A108 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A108 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A108 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A109 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A109 (0x26, Local5, 0x00)
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A110, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR4.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR4.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A108 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A108 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A108 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A102, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A108 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A108 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A108 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A108, 2, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR4.A108.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A106 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A103, 0x00)
                    Local2 = 0x00
                    A103 = A112 /* \_SB_.AWR0.ABR4.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A102 (0x00)
                        Local0 = A108 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A108 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A108 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A103 /* \_SB_.AWR0.ABR4.A119.A103 */
                    If ((A103 != 0x00))
                    {
                        A102 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR5)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x85)  // _UID: Unique ID
                Name (AB12, 0x84)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A104,   8, 
                    A105,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A099, 0, NotSerialized)
                {
                    Local0 = A081 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR5.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A100, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A093, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }

                    Local0 = A100 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A099 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A092, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR5.AB02 */
                }

                Method (A095, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                }

                Method (A091, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A101 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A102 (0x00)
                    Name (A103, 0x00)
                    A102 (0x01)
                }

                Method (A096, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A097, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A104) && (Local0 <= A105)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A106, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A098, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A101, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A108 (Local0, 0x00)
                    Local2 = A108 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A108 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A108 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A109 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A109 (0x26, Local5, 0x00)
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A110, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR5.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR5.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A108 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A108 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A108 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A102, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A108 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A108 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A108 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A108, 2, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR5.A108.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A106 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A103, 0x00)
                    Local2 = 0x00
                    A103 = A112 /* \_SB_.AWR0.ABR5.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A102 (0x00)
                        Local0 = A108 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A108 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A108 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A103 /* \_SB_.AWR0.ABR5.A119.A103 */
                    If ((A103 != 0x00))
                    {
                        A102 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR6)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x86)  // _UID: Unique ID
                Name (AB12, 0x98)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A104,   8, 
                    A105,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A099, 0, NotSerialized)
                {
                    Local0 = A081 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR6.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A100, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A093, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }

                    Local0 = A100 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A099 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A092, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR6.AB02 */
                }

                Method (A095, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                }

                Method (A091, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A101 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A102 (0x00)
                    Name (A103, 0x00)
                    A102 (0x01)
                }

                Method (A096, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A097, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A104) && (Local0 <= A105)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A106, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A098, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A101, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A108 (Local0, 0x00)
                    Local2 = A108 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A108 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A108 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A109 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A109 (0x26, Local5, 0x00)
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A110, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR6.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR6.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A108 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A108 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A108 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A102, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A108 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A108 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A108 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A108, 2, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR6.A108.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A106 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A103, 0x00)
                    Local2 = 0x00
                    A103 = A112 /* \_SB_.AWR0.ABR6.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A102 (0x00)
                        Local0 = A108 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A108 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A108 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A103 /* \_SB_.AWR0.ABR6.A119.A103 */
                    If ((A103 != 0x00))
                    {
                        A102 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR7)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x87)  // _UID: Unique ID
                Name (AB12, 0xAC)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A104,   8, 
                    A105,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A099, 0, NotSerialized)
                {
                    Local0 = A081 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR7.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A100, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A093, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }

                    Local0 = A100 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A099 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A092, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR7.AB02 */
                }

                Method (A095, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                }

                Method (A091, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A101 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A102 (0x00)
                    Name (A103, 0x00)
                    A102 (0x01)
                }

                Method (A096, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A097, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A104) && (Local0 <= A105)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A106, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A098, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A101, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A108 (Local0, 0x00)
                    Local2 = A108 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A108 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A108 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A109 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A109 (0x26, Local5, 0x00)
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A110, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR7.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR7.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A108 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A108 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A108 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A102, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A108 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A108 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A108 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A108, 2, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR7.A108.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A106 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A103, 0x00)
                    Local2 = 0x00
                    A103 = A112 /* \_SB_.AWR0.ABR7.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A102 (0x00)
                        Local0 = A108 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A108 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A108 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A103 /* \_SB_.AWR0.ABR7.A119.A103 */
                    If ((A103 != 0x00))
                    {
                        A102 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR8)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x88)  // _UID: Unique ID
                Name (AB12, 0xC0)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A104,   8, 
                    A105,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A099, 0, NotSerialized)
                {
                    Local0 = A081 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR8.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR8.AB0E */
                    }
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A100, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR8.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A093, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR8.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR8.AB0E */
                    }

                    Local0 = A100 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR8.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A099 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A092, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR8.AB02 */
                }

                Method (A095, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR8.AB00 */
                }

                Method (A091, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A101 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A102 (0x00)
                    Name (A103, 0x00)
                    A102 (0x01)
                }

                Method (A096, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A097, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A104) && (Local0 <= A105)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A106, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A098, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A101, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A108 (Local0, 0x00)
                    Local2 = A108 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A108 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A108 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A109 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A109 (0x26, Local5, 0x00)
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A110, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR8.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR8.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A108 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A108 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A108 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A102, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A108 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A108 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A108 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A108, 2, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR8.A108.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A106 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A103, 0x00)
                    Local2 = 0x00
                    A103 = A112 /* \_SB_.AWR0.ABR8.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A102 (0x00)
                        Local0 = A108 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A108 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A108 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A103 /* \_SB_.AWR0.ABR8.A119.A103 */
                    If ((A103 != 0x00))
                    {
                        A102 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR9)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x89)  // _UID: Unique ID
                Name (AB12, 0xD4)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A104,   8, 
                    A105,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A099, 0, NotSerialized)
                {
                    Local0 = A081 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR9.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR9.AB0E */
                    }
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A100, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR9.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A093, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR9.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR9.AB0E */
                    }

                    Local0 = A100 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR9.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A099 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A092, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR9.AB02 */
                }

                Method (A095, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR9.AB00 */
                }

                Method (A091, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A101 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A102 (0x00)
                    Name (A103, 0x00)
                    A102 (0x01)
                }

                Method (A096, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A097, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A104) && (Local0 <= A105)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A106, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A098, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A101, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A108 (Local0, 0x00)
                    Local2 = A108 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A108 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A108 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A109 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A109 (0x26, Local5, 0x00)
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A110, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABR9.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABR9.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A108 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A108 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A108 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A102, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A108 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A108 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A108 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A108, 2, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR9.A108.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A106 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A103, 0x00)
                    Local2 = 0x00
                    A103 = A112 /* \_SB_.AWR0.ABR9.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A102 (0x00)
                        Local0 = A108 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A108 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A108 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A103 /* \_SB_.AWR0.ABR9.A119.A103 */
                    If ((A103 != 0x00))
                    {
                        A102 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRA)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8A)  // _UID: Unique ID
                Name (AB12, 0xE8)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A111, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A111, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A104,   8, 
                    A105,   8, 
                    Offset (0x68), 
                    A112,   2, 
                        ,   2, 
                    A113,   1, 
                    A114,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A115,   1, 
                    Offset (0x88), 
                    A116,   4, 
                        ,   1, 
                    A117,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A099, 0, NotSerialized)
                {
                    Local0 = A081 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABRA.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABRA.AB0E */
                    }
                }

                Method (A094, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A100, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABRA.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A093, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABRA.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABRA.AB0E */
                    }

                    Local0 = A100 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABRA.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A099 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A092, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABRA.AB02 */
                }

                Method (A095, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABRA.AB00 */
                }

                Method (A091, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A101 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A102 (0x00)
                    Name (A103, 0x00)
                    A102 (0x01)
                }

                Method (A096, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A097, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A104) && (Local0 <= A105)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A106, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A098, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A101, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A107, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A108 (Local0, 0x00)
                    Local2 = A108 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A108 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A108 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A109 (0x25, (Local4 & 0xFFFFFFF0), 0x00)
                                            A109 (0x26, Local5, 0x00)
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x27, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A109 (0x28, 0x00, 0x00)
                                            A109 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 & 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A110, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        If ((AB06 > AB07))
                        {
                            Return (AB07) /* \_SB_.AWR0.ABRA.AB07 */
                        }
                        Else
                        {
                            Return (AB06) /* \_SB_.AWR0.ABRA.AB06 */
                        }
                    }

                    Return (0xFF)
                }

                Method (A122, 2, NotSerialized)
                {
                    If ((A108 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A108 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A108 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A102, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A108 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A108 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A122 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A108 (Local0, (Local1 + 0x10))
                                A120 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A120 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A120, 3, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A108, 2, Serialized)
                {
                    Local0 = (AGRB + (A105 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABRA.A108.ADRR */
                }

                Method (A118, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A106 (Arg0))
                }

                Method (A119, 1, NotSerialized)
                {
                    Name (A103, 0x00)
                    Local2 = 0x00
                    A103 = A112 /* \_SB_.AWR0.ABRA.A112 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A113 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A102 (0x00)
                        Local0 = A108 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A120 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A108 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A120 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A113 = 0x01
                        Local0 = 0x05
                    }

                    A112 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A121 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A108 (0x00, 0x00)
                            A121 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A112 = A103 /* \_SB_.AWR0.ABRA.A119.A103 */
                    If ((A103 != 0x00))
                    {
                        A102 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Method (A179, 1, Serialized)
        {
            If ((DerefOf (\_SB.ADAT [0x08]) == 0x01))
            {
                Local0 = 0x00
                While ((Local0 < 0x0B))
                {
                    A180 (Local0, Arg0)
                    Local0++
                }
            }
        }

        Method (A109, 3, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            A012 = Arg1
            A013 = Arg2
            A018 (Arg0, Local7)
        }

        Method (A180, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A107 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A107 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A107 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A107 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A107 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A107 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A107 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A107 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR0.ABR8.A107 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR0.ABR9.A107 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR0.ABRA.A107 (Arg1))
            }
        }

        Method (A071, 1, Serialized)
        {
            Local0 = 0x00
            Local6 = DerefOf (Arg0 [Local0])
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            Local0 = 0x02
            Local1 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
            A012 = 0x00
            A013 = 0x00
            A014 = 0x00
            A015 = 0x00
            A016 = 0x00
            A017 = 0x00
            If ((Local1 == 0x00))
            {
                A012 = Local2
                A179 (0x00)
            }

            If ((Local1 == 0x01))
            {
                A012 = Local2
                A179 (0x01)
            }

            If ((Local1 == 0x02))
            {
                A012 = Local2
                A018 (0x27, Local7)
            }

            If ((Local1 == 0x03))
            {
                A012 = Local2
                A018 (0x28, Local7)
            }
        }

        Name (A008, 0x01)
        Name (A009, 0x00)
        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (AWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (APPM, 1, NotSerialized)
        {
            Local0 = DerefOf (Arg0 [0x04])
            Local1 = DerefOf (Arg0 [0x02])
            A010 (Local0, Local1)
        }

        Method (A011, 0, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A012)
            CreateDWordField (Local7, 0x04, A013)
            CreateDWordField (Local7, 0x08, A014)
            CreateDWordField (Local7, 0x0C, A015)
            CreateDWordField (Local7, 0x10, A016)
            CreateDWordField (Local7, 0x14, A017)
            A012 = 0x00
            A013 = 0x00
            A014 = 0x00
            A015 = 0x00
            A016 = 0x00
            A017 = 0x00
            If ((AD00 == 0x00))
            {
                A018 (0x11, Local7)
            }
            Else
            {
                A018 (0x12, Local7)
            }
        }

        Method (A019, 2, NotSerialized)
        {
        }
    }
}



SSDT20
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.PLTF, DeviceObj)

    Scope (\_SB.PLTF)
    {
        Name (_LPI, Package (0x04)  // _LPI: Low Power Idle States
        {
            Zero, 
            Zero, 
            One, 
            Package (0x0A)
            {
                0x000F4240, 
                0xC350, 
                One, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "S0i3"
            }
        })
    }
}



SSDT21
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.PCI0.GPP8, DeviceObj)
    External (_SB_.PCI0.GPP8._ADR, IntObj)
    External (_SB_.PCI0.RPCF, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.SPCF, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.UPWD, MethodObj)    // 0 Arguments
    External (M000, MethodObj)    // 1 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (M652, FieldUnitObj)

    Scope (\_SB.PCI0.GPP8)
    {
        Name (WD3C, Zero)
        PowerResource (P0NV, 0x00, 0x0000)
        {
            Name (D0NV, One)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                M000 (0x30AA)
                M460 ("PLA-ASL-\\_SB.PCI0.GPP8.P0NV._STA\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (D0NV) /* \_SB_.PCI0.GPP8.P0NV.D0NV */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                M000 (0x30D0)
                M460 ("PLA-ASL-\\_SB.PCI0.GPP8.P0NV._ON\n", Zero, Zero, Zero, Zero, Zero, Zero)
                If ((WD3C == One))
                {
                    If ((M049 (M4C0, 0x12) == One))
                    {
                        RPCF (_ADR)
                        UPWD ()
                        Sleep (0x64)
                        Sleep (0x64)
                        Sleep (0x64)
                        Sleep (0x64)
                    }
                }

                D0NV = One
                M000 (0x30D1)
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                M000 (0x30D3)
                M460 ("PLA-ASL-\\_SB.PCI0.GPP8.P0NV._OFF\n", Zero, Zero, Zero, Zero, Zero, Zero)
                If ((M049 (M4C0, 0x12) == One))
                {
                    SPCF (_ADR)
                }

                D0NV = Zero
                M000 (0x30D5)
            }
        }

        Device (NVME)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                P0NV
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                P0NV
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                P0NV
            })
            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                M000 (0x3050)
                M460 ("PLA-ASL-\\_SB.PCI0.GPP8.NVME._PS0\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                M000 (0x3053)
                M460 ("PLA-ASL-\\_SB.PCI0.GPP8.NVME._PS3\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "StorageD3Enable", 
                        One
                    }
                }
            })
        }
    }
}



SSDT22
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.PLTF.C000, DeviceObj)
    External (_SB_.PLTF.C001, DeviceObj)
    External (_SB_.PLTF.C002, DeviceObj)
    External (_SB_.PLTF.C003, DeviceObj)
    External (_SB_.PLTF.C004, DeviceObj)
    External (_SB_.PLTF.C005, DeviceObj)
    External (_SB_.PLTF.C006, DeviceObj)
    External (_SB_.PLTF.C007, DeviceObj)
    External (_SB_.PLTF.C008, DeviceObj)
    External (_SB_.PLTF.C009, DeviceObj)
    External (_SB_.PLTF.C00A, DeviceObj)
    External (_SB_.PLTF.C00B, DeviceObj)
    External (_SB_.PLTF.C00C, DeviceObj)
    External (_SB_.PLTF.C00D, DeviceObj)
    External (_SB_.PLTF.C00E, DeviceObj)
    External (_SB_.PLTF.C00F, DeviceObj)

    Scope (\_SB.PLTF.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x000011D0, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x000011D0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C000.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x000011D0, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x000011D0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C001.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x000011D0, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x000011D0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C002.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x000011D0, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x000011D0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C003.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C004)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x000011D0, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x000011D0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C004.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C005)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x000011D0, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x000011D0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C005.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C006)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x000011D0, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x000011D0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C006.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C007)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x000011D0, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x000011D0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C007.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C008)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x000011D0, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x000011D0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C008.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C009)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x000011D0, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x000011D0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C009.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C00A)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x000011D0, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x000011D0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00A.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C00B)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x000011D0, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x000011D0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00B.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C00C)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x000011D0, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x000011D0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00C.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C00D)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x000011D0, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x000011D0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00D.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C00E)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x000011D0, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x000011D0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00E.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000ED9
        })
    }

    Scope (\_SB.PLTF.C00F)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010063, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x000011D0, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x000011D0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x00000974, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000640, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00F.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B4, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000ED9
        })
    }

    Method (NFPC, 0, NotSerialized)
    {
        Notify (\_SB.PLTF.C000, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C001, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C002, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C003, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C004, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C005, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C006, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C007, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C008, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C009, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00A, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00B, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00C, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00D, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00E, 0x85) // Device-Specific
        Notify (\_SB.PLTF.C00F, 0x85) // Device-Specific
    }
}



SSDT23
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.GZFD.HTPE, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.ACP_, DeviceObj)
    External (_SB_.PCI0.GP17.AZAL, DeviceObj)
    External (_SB_.PCI0.GP17.MP2C, DeviceObj)
    External (_SB_.PCI0.GP17.XHC0, DeviceObj)
    External (_SB_.PCI0.GP17.XHC1, DeviceObj)
    External (_SB_.PCI0.GPP0, DeviceObj)
    External (_SB_.PCI0.GPP0.PEGP, DeviceObj)
    External (_SB_.PCI0.GPP1, DeviceObj)
    External (_SB_.PCI0.GPP2, DeviceObj)
    External (_SB_.PCI0.GPP5, DeviceObj)
    External (_SB_.PCI0.GPP6, DeviceObj)
    External (_SB_.PCI0.GPP6.WLAN, DeviceObj)
    External (_SB_.PCI0.GPP7, DeviceObj)
    External (_SB_.PCI0.LPC0.EC0_, DeviceObj)
    External (_SB_.PCI0.LPC0.EC0_.ACIN, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPC0.EC0_.ACOU, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPC0.EC0_.ADPT, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.BAT0, DeviceObj)
    External (_SB_.PCI0.LPC0.EC0_.HWAK, FieldUnitObj)
    External (_SB_.PCI0.LPC0.EC0_.LIDC, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPC0.EC0_.LIDO, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPC0.EC0_.OKEC, IntObj)
    External (_SB_.PCI0.LPC0.EC0_.REJF, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.LPC0.EC0_.Z009, MutexObj)
    External (_SB_.PWRB, DeviceObj)
    External (DSMF, FieldUnitObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (M652, FieldUnitObj)

    Scope (\_SB.PCI0.LPC0.EC0)
    {
        OperationRegion (ECRM, EmbeddedControl, Zero, 0xFF)
        Field (ECRM, ByteAcc, NoLock, Preserve)
        {
            Offset (0xCC), 
            PBCN,   8
        }
    }

    Scope (\_SB.GPIO)
    {
        Method (_AEI, 0, NotSerialized)  // _AEI: ACPI Event Interrupts
        {
            Name (BUF0, ResourceTemplate ()
            {
                GpioInt (Edge, ActiveHigh, ExclusiveAndWake, PullDefault, 0x1388,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0000
                    }
                GpioInt (Level, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003D
                    }
                GpioInt (Level, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003E
                    }
                GpioInt (Level, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003A
                    }
                GpioInt (Level, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003B
                    }
                GpioInt (Edge, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0012
                    }
                GpioInt (Edge, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0007
                    }
                GpioInt (Edge, ActiveBoth, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0004
                    }
                GpioInt (Edge, ActiveBoth, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0005
                    }
            })
            M460 ("  OEM-ASL-\\_SB.GPIO._AEI\n", Zero, Zero, Zero, Zero, Zero, Zero)
            Return (BUF0) /* \_SB_.GPIO._AEI.BUF0 */
        }

        Method (_EVT, 1, Serialized)  // _EVT: Event
        {
            Name (HPDW, 0x55)
            M460 ("  OEM-ASL-\\_SB.GPIO._EVT-Start Case %d\n", ToInteger (Arg0), Zero, Zero, Zero, Zero, Zero)
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    M000 (0x3900)
                    M460 ("    Notify (\\_SB.PWRB, 0x80)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Local0 = \_SB.PCI0.LPC0.EC0.HWAK /* External reference */
                    If (((Local0 & 0x04) == 0x04))
                    {
                        \_SB.PCI0.LPC0.EC0.LIDO ()
                        Sleep (0x01F4)
                        If ((\_SB.PCI0.LPC0.EC0.ADPT == One))
                        {
                            \_SB.PCI0.LPC0.EC0.ACIN ()
                        }
                        Else
                        {
                            \_SB.PCI0.LPC0.EC0.ACOU ()
                        }

                        Local0 &= 0xFFFB
                        \_SB.PCI0.LPC0.EC0.HWAK = Local0
                    }
                    ElseIf (((Local0 & 0x20) == 0x20))
                    {
                        \_SB.PCI0.LPC0.EC0.LIDC ()
                        Sleep (0x01F4)
                        Local0 &= 0xFFDF
                        \_SB.PCI0.LPC0.EC0.HWAK = Local0
                    }
                    ElseIf (((Local0 & 0x40) == 0x40))
                    {
                        If ((\_SB.PCI0.LPC0.EC0.ADPT == One))
                        {
                            \_SB.PCI0.LPC0.EC0.ACIN ()
                        }
                        Else
                        {
                            \_SB.PCI0.LPC0.EC0.ACOU ()
                        }

                        Local0 &= 0xFFBF
                        \_SB.PCI0.LPC0.EC0.HWAK = Local0
                    }
                    ElseIf (((Local0 & 0x80) == 0x80))
                    {
                        Notify (\_SB.PCI0.LPC0.EC0.BAT0, 0x80) // Status Change
                        Local0 &= 0xFF7F
                        \_SB.PCI0.LPC0.EC0.HWAK = Local0
                    }
                    Else
                    {
                        Notify (\_SB.PWRB, 0x80) // Status Change
                        Local0 &= 0xFFEF
                        \_SB.PCI0.LPC0.EC0.HWAK = Local0
                    }
                }
                Case (0x12)
                {
                    M000 (0x3912)
                    M460 ("    Notify (\\_SB.PCI0.GPP6, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP6, 0x02) // Device Wake
                    If (CondRefOf (\_SB.PCI0.GPP6.WLAN))
                    {
                        Notify (\_SB.PCI0.GPP6.WLAN, 0x02) // Device Wake
                    }
                }
                Case (0x3A)
                {
                    M000 (0x393A)
                    M460 ("    Notify (\\_SB.PCI0.GP17.XHC0, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GP17.XHC0, 0x02) // Device Wake
                }
                Case (0x3B)
                {
                    M000 (0x393B)
                    M460 ("    Notify (\\_SB.PCI0.GP17.XHC1, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GP17.XHC1, 0x02) // Device Wake
                }
                Case (0x3D)
                {
                    M000 (0x393D)
                    M460 ("    Notify (\\_SB.PCI0.GP17.AZAL, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GP17.AZAL, 0x02) // Device Wake
                }
                Case (0x3E)
                {
                    M000 (0x393D)
                    M460 ("    Notify (\\_SB.PCI0.GP17.ACP, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GP17.ACP, 0x02) // Device Wake
                }
                Case (0x07)
                {
                    M000 (0x3902)
                    M460 ("    Notify (\\_SB.PCI0.GPP5, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Notify (\_SB.PCI0.GPP5, 0x02) // Device Wake
                }
                Case (0x04)
                {
                    M000 (0x3904)
                    M460 ("    Notify (\\_SB.PCI0.GPP0.PEGP, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    If (((DSMF == 0x03) || (DSMF == 0x04)))
                    {
                        If ((\_SB.PCI0.LPC0.EC0.REJF (0x03) == One))
                        {
                            \_SB.GZFD.HTPE ()
                        }
                    }

                    Notify (\_SB.PCI0.GPP0.PEGP, 0x81) // Information Change
                }
                Case (0x05)
                {
                    M000 (0x3905)
                    M460 ("    Notify (\\_SB.PCI0.GPP0.PEGP, 0x02)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    If (((DSMF == 0x03) || (DSMF == 0x04)))
                    {
                        If ((\_SB.PCI0.LPC0.EC0.REJF (0x03) == One))
                        {
                            \_SB.GZFD.HTPE ()
                        }
                    }

                    Sleep (0x01F4)
                    Notify (\_SB.PCI0.GPP0.PEGP, 0x81) // Information Change
                }

            }

            M460 ("  OEM-ASL-\\_SB.GPIO._EVT-End Case %d\n", ToInteger (Arg0), Zero, Zero, Zero, Zero, Zero)
        }
    }
}



SSDT24
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_GPE, DeviceObj)
    External (_GPE.AIE0, MethodObj)    // 0 Arguments
    External (_GPE.AIE1, MethodObj)    // 0 Arguments
    External (_GPE.AIE2, MethodObj)    // 0 Arguments
    External (_GPE.AIE3, MethodObj)    // 0 Arguments
    External (_GPE.BIE0, MethodObj)    // 0 Arguments
    External (_GPE.BIE1, MethodObj)    // 0 Arguments
    External (_GPE.BIE2, MethodObj)    // 0 Arguments
    External (_GPE.BIE3, MethodObj)    // 0 Arguments
    External (_GPE.PTS0, MethodObj)    // 1 Arguments
    External (_GPE.PTS1, MethodObj)    // 1 Arguments
    External (_GPE.PTS2, MethodObj)    // 1 Arguments
    External (_GPE.PTS3, MethodObj)    // 1 Arguments
    External (_GPE.SP00, MethodObj)    // 0 Arguments
    External (_GPE.SP01, MethodObj)    // 0 Arguments
    External (_GPE.SP02, MethodObj)    // 0 Arguments
    External (_GPE.SP03, MethodObj)    // 0 Arguments
    External (_GPE.SP04, MethodObj)    // 0 Arguments
    External (_GPE.SP05, MethodObj)    // 0 Arguments
    External (_GPE.SP06, MethodObj)    // 0 Arguments
    External (_GPE.SP07, MethodObj)    // 0 Arguments
    External (_GPE.SP10, MethodObj)    // 0 Arguments
    External (_GPE.SP11, MethodObj)    // 0 Arguments
    External (_GPE.SP12, MethodObj)    // 0 Arguments
    External (_GPE.SP13, MethodObj)    // 0 Arguments
    External (_GPE.SP14, MethodObj)    // 0 Arguments
    External (_GPE.SP15, MethodObj)    // 0 Arguments
    External (_GPE.SP16, MethodObj)    // 0 Arguments
    External (_GPE.SP17, MethodObj)    // 0 Arguments
    External (_GPE.SP20, MethodObj)    // 0 Arguments
    External (_GPE.SP21, MethodObj)    // 0 Arguments
    External (_GPE.SP22, MethodObj)    // 0 Arguments
    External (_GPE.SP23, MethodObj)    // 0 Arguments
    External (_GPE.SP24, MethodObj)    // 0 Arguments
    External (_GPE.SP25, MethodObj)    // 0 Arguments
    External (_GPE.SP26, MethodObj)    // 0 Arguments
    External (_GPE.SP27, MethodObj)    // 0 Arguments
    External (_GPE.SP30, MethodObj)    // 0 Arguments
    External (_GPE.SP31, MethodObj)    // 0 Arguments
    External (_GPE.SP32, MethodObj)    // 0 Arguments
    External (_GPE.SP33, MethodObj)    // 0 Arguments
    External (_GPE.SP34, MethodObj)    // 0 Arguments
    External (_GPE.SP35, MethodObj)    // 0 Arguments
    External (_GPE.SP36, MethodObj)    // 0 Arguments
    External (_GPE.SP37, MethodObj)    // 0 Arguments
    External (_GPE.SP40, MethodObj)    // 0 Arguments
    External (_GPE.SP41, MethodObj)    // 0 Arguments
    External (_GPE.SP42, MethodObj)    // 0 Arguments
    External (_GPE.SP43, MethodObj)    // 0 Arguments
    External (_GPE.SP44, MethodObj)    // 0 Arguments
    External (_GPE.SP45, MethodObj)    // 0 Arguments
    External (_GPE.SP46, MethodObj)    // 0 Arguments
    External (_GPE.SP47, MethodObj)    // 0 Arguments
    External (_GPE.SP50, MethodObj)    // 0 Arguments
    External (_GPE.SP51, MethodObj)    // 0 Arguments
    External (_GPE.SP52, MethodObj)    // 0 Arguments
    External (_GPE.SP53, MethodObj)    // 0 Arguments
    External (_GPE.SP54, MethodObj)    // 0 Arguments
    External (_GPE.SP55, MethodObj)    // 0 Arguments
    External (_GPE.SP56, MethodObj)    // 0 Arguments
    External (_GPE.SP57, MethodObj)    // 0 Arguments
    External (_GPE.SP60, MethodObj)    // 0 Arguments
    External (_GPE.SP61, MethodObj)    // 0 Arguments
    External (_GPE.SP62, MethodObj)    // 0 Arguments
    External (_GPE.SP63, MethodObj)    // 0 Arguments
    External (_GPE.SP64, MethodObj)    // 0 Arguments
    External (_GPE.SP65, MethodObj)    // 0 Arguments
    External (_GPE.SP66, MethodObj)    // 0 Arguments
    External (_GPE.SP67, MethodObj)    // 0 Arguments
    External (_GPE.SP70, MethodObj)    // 0 Arguments
    External (_GPE.SP71, MethodObj)    // 0 Arguments
    External (_GPE.SP72, MethodObj)    // 0 Arguments
    External (_GPE.SP73, MethodObj)    // 0 Arguments
    External (_GPE.SP74, MethodObj)    // 0 Arguments
    External (_GPE.SP75, MethodObj)    // 0 Arguments
    External (_GPE.SP76, MethodObj)    // 0 Arguments
    External (_GPE.SP77, MethodObj)    // 0 Arguments
    External (_GPE.WAK0, MethodObj)    // 1 Arguments
    External (_GPE.WAK1, MethodObj)    // 1 Arguments
    External (_GPE.WAK2, MethodObj)    // 1 Arguments
    External (_GPE.WAK3, MethodObj)    // 1 Arguments
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.AM00, MutexObj)
    External (_SB_.BPTS, MethodObj)    // 1 Arguments
    External (_SB_.BWAK, MethodObj)    // 1 Arguments
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.IPTS, MethodObj)    // 1 Arguments
    External (_SB_.IWAK, MethodObj)    // 1 Arguments
    External (_SB_.M263, MethodObj)    // 1 Arguments
    External (_SB_.M264, MethodObj)    // 1 Arguments
    External (_SB_.M284, MethodObj)    // 1 Arguments
    External (_SB_.OPTS, MethodObj)    // 1 Arguments
    External (_SB_.OWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PTBR.PTST.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PTBR.PTST.TWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.GPXX.SAXX.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.GPXX.SAXX.TWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.SAXX.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.SAXX.TWAK, MethodObj)    // 1 Arguments
    External (M038, MethodObj)    // 1 Arguments
    External (M039, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M127, DeviceObj)
    External (MOEM, MethodObj)    // 3 Arguments
    External (NFPC, MethodObj)    // 0 Arguments

    OperationRegion (CPNV, SystemMemory, 0xBAF67018, 0x00010117)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M221,   8, 
        M086,   16, 
        M229,   8, 
        M231,   16, 
        M235,   8, 
        M233,   32, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x19), 
        M087,   1, 
            ,   1, 
        Offset (0x1C), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   32768, 
        M378,   32768, 
        M379,   32768, 
        M380,   32768, 
        M381,   32768, 
        M382,   32768, 
        M383,   32768, 
        M384,   32768, 
        M385,   32768, 
        M386,   32768, 
        M387,   32768, 
        M388,   32768, 
        M389,   32768, 
        M390,   32768, 
        M391,   32768, 
        M392,   32768, 
        M107,   64, 
        M320,   32, 
        M321,   32, 
        M322,   32, 
        M323,   32, 
        M324,   32, 
        M325,   32, 
        M326,   32, 
        M327,   16, 
        M328,   8, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32, 
        M220,   32, 
        M226,   32, 
        M251,   32, 
        M310,   32, 
        M280,   32, 
        M290,   32, 
        M331,   32, 
        M414,   16, 
        M444,   72, 
        M453,   32, 
        M454,   16, 
        M455,   8, 
        M456,   8, 
        M457,   8, 
        M449,   72, 
        M4C0,   32, 
        M23A,   8, 
        M31C,   32, 
        M4F0,   32, 
        M610,   32, 
        M620,   32, 
        M29A,   128, 
        M631,   32, 
        M652,   32
    }

    Name (CTMR, Zero)
    Name (M285, Buffer (0x04)
    {
         0x01, 0x03, 0x80, 0x00                           // ....
    })
    Method (M000, 1, Serialized)
    {
        CreateByteField (M285, Zero, M286)
        CreateByteField (M285, One, M287)
        CreateWordField (M285, 0x02, M288)
        Name (M450, Buffer (0x05)
        {
             0x00, 0x96, 0x05, 0x00, 0x00                     // .....
        })
        CreateDWordField (M450, Zero, M452)
        CreateByteField (M450, 0x04, M451)
        Local0 = (Arg0 + 0xB0000000)
        If ((ToInteger (M286) == One))
        {
            Local1 = ToInteger (M288)
            If ((ToInteger (M287) == 0x03))
            {
                OperationRegion (VARM, SystemIO, Local1, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }
            ElseIf ((ToInteger (M287) == 0x02))
            {
                OperationRegion (VARN, SystemIO, Local1, 0x02)
                Field (VARN, WordAcc, NoLock, Preserve)
                {
                    VARS,   16
                }

                VARS = (Local0 & 0xFFFF)
            }
            ElseIf ((ToInteger (M287) == One))
            {
                OperationRegion (VARO, SystemIO, Local1, One)
                Field (VARO, ByteAcc, NoLock, Preserve)
                {
                    VART,   8
                }

                VART = (Local0 & 0xFF)
            }
        }

        If ((ToInteger (M451) == One))
        {
            Local2 = ToInteger (M452)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }

        OperationRegion (VARP, SystemMemory, 0xFED80808, 0x04)
        Field (VARP, DWordAcc, NoLock, Preserve)
        {
            VARU,   32
        }

        Local1 = VARU /* \M000.VARU */
        If ((Local1 >= CTMR))
        {
            Local2 = (Local1 - CTMR) /* \CTMR */
        }
        Else
        {
            Local2 = (Local1 + ((0xFFFFFFFE - CTMR) + One))
        }

        Divide (Local2, 0x19, Local3, Local2)
        Divide ((Local2 * 0x07), 0x03E8, Local3, Local2)
        If ((Local3 >= 0x64))
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.%d ms\n", Local0, Local1, Local2, Local3, Zero, Zero)
        }
        ElseIf ((Local3 >= 0x0A))
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.0%d ms\n", Local0, Local1, Local2, Local3, Zero, Zero)
        }
        Else
        {
            M460 ("  POST CODE: %X  ACPI TIMER: %X  TIME: %d.00%d ms\n", Local0, Local1, Local2, Local3, Zero, Zero)
        }

        CTMR = Local1
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0700), Arg0, Zero, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0400), Arg0, Zero, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 ((M084 + 0x0400), Arg0, Zero, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, Zero, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, Zero, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 == 0x15))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (M004, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M004.VAR2 */
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg1
    }

    Method (M006, 3, Serialized)
    {
        Local0 = (M004 (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, Zero)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, Zero)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, Zero)
            }

            Sleep (One)
        }

        If ((Arg0 == One))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (One)
        }

        If ((Arg0 == Zero))
        {
            M008 (Arg1)
            Local0 = M004 (M003 (0x03, Arg1, 0xA5))
            Local0 &= 0xFF
            Local1 = 0x01F4
            While (((Local1 > Zero) && (Local0 != 0x10)))
            {
                Local0 = M004 (M003 (0x03, Arg1, 0xA5))
                Local0 &= 0xFF
                Local1--
                Sleep (One)
            }

            If ((Local0 != 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x02)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, One)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (One)
    }

    Method (M007, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | One)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, Zero)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (One)
    }

    Method (M111, 2, Serialized)
    {
        M460 ("  KER-ASL-CpmSetDevicePower (0x%X, %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local3 != Zero))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 ((Local5 & 0xFF00FFFF), Local6)
                                If ((Arg1 == Zero))
                                {
                                    M000 (0x0DD8)
                                }
                                Else
                                {
                                    M000 (0x0DDB)
                                }
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                While ((M009 ((Local5 & 0xFF00FFFF)) != Local6)){}
                                If ((Arg1 == Zero))
                                {
                                    M000 (0x0DD9)
                                }
                                Else
                                {
                                    M000 (0x0DDC)
                                }
                            }

                            If ((Local4 == 0x02))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Sleep (((Local5 + 0x03E7) / 0x03E8))
                                If ((Arg1 == Zero))
                                {
                                    M000 (0x0DDA)
                                }
                                Else
                                {
                                    M000 (0x0DDD)
                                }
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M470, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If (((Local3 == Zero) && (Local4 != Zero)))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 ((Local5 & 0xFF00FFFF)) == Local6))
                            {
                                Local7 = One
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }

        M460 ("  KER-ASL-CpmCheckDevicePowerState (0x%X, %d)  Return (%d)\n", Arg0, Arg1, Local7, Zero, Zero, Zero)
        Return (Local7)
    }

    Method (M228, 1, Serialized)
    {
        If ((Arg0 > 0x03))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                    If ((Local3 == Arg0))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        If ((Local4 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 ((Local5 & 0xFF00FFFF), Local6)
                        }

                        If ((Local4 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 ((Local5 & 0xFF00FFFF)) != Local6)){}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M219, 2, Serialized)
    {
        M460 ("  KER-ASL-CpmSetDeviceClock (0x%X, %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If ((Arg0 != Zero))
        {
            Local0 = M221 /* \M221 */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* \M220 */
                If (Local0)
                {
                    Local0 += 0x10
                    Local1 = Zero
                    Local2 = One
                    While ((Local2 != 0xFF))
                    {
                        Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                        Local5 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        Local7 = M013 ((Local0 + Local1), 0x08, Zero, 0x20)
                        If ((Local4 == Arg0))
                        {
                            If (((Local2 < 0x0A) && (Local5 & 0x80)))
                            {
                                If ((Arg1 == Zero))
                                {
                                    Local3 = Zero
                                }
                                ElseIf ((Local5 & 0x04))
                                {
                                    If ((Arg1 == One))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            Local3 = 0x03
                                        }
                                        Else
                                        {
                                            Local3 = 0x0F
                                        }
                                    }

                                    If ((Arg1 == 0x02))
                                    {
                                        Local6 = M017 (Zero, M013 ((Local0 + Local1), 0x05, Zero, 0x08), 
                                            M013 ((Local0 + Local1), 0x06, Zero, 0x08), 0x19, Zero, 0x08)
                                        If ((M265 (Local6, Zero, Zero) == One))
                                        {
                                            If ((M085 >= 0x04))
                                            {
                                                Local3 = One
                                            }
                                        }
                                        ElseIf ((M085 >= 0x04))
                                        {
                                            Local3 = 0x03
                                        }
                                        Else
                                        {
                                            Local3 = 0x0F
                                        }
                                    }
                                }
                                ElseIf ((M085 >= 0x04))
                                {
                                    Local3 = 0x03
                                }
                                Else
                                {
                                    Local3 = 0x0F
                                }

                                If ((M085 >= 0x04))
                                {
                                    If ((M085 == 0x08))
                                    {
                                        If (((Local7 & 0x0FF00000) > Zero))
                                        {
                                            Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                            Local6 &= (0xFFFFFFFF ^ (0x03 << (Local2 << One)))
                                            Local6 |= (Local3 << (Local2 << One))
                                            M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), (Local2 >> 0x02), ((Local2 & 
                                                0x03) << One), 0x02, Local3)
                                        }
                                    }
                                    ElseIf (((Local7 >> 0x1C) == 0x02))
                                    {
                                        M012 ((M084 + 0x1300), (Local2 >> 0x02), ((Local2 & 
                                            0x03) << One), 0x02, Local3)
                                    }
                                    Else
                                    {
                                        M012 ((M084 + 0x0E00), (Local2 >> 0x02), ((Local2 & 
                                            0x03) << One), 0x02, Local3)
                                    }
                                }
                                Else
                                {
                                    M012 ((M084 + 0x0E00), (Local2 >> One), ((Local2 & 
                                        One) << 0x02), 0x04, Local3)
                                }

                                If ((Arg1 == Zero))
                                {
                                    M000 (0x0DE0)
                                }

                                If ((Arg1 == One))
                                {
                                    M000 (0x0DE1)
                                }

                                If ((Arg1 == 0x02))
                                {
                                    M000 (0x0DE2)
                                }

                                Local2 = 0xFF
                            }
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }
    }

    Method (M112, 2, Serialized)
    {
        M460 ("  KER-ASL-CpmSetDeviceReset (0x%X, %d)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 ((Local5 & 0xFF00FFFF), Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 ((Local5 & 0xFF00FFFF), Local6)
                                Local7 = M009 ((Local5 & 0xFF00FFFF))
                                Local4 = 0x03F2
                                While (((Local4 > Zero) && (Local7 != Local6)))
                                {
                                    Local4 = (Local4 - One)
                                    Stall (0x63)
                                    Local7 = M009 ((Local5 & 0xFF00FFFF))
                                }
                            }

                            If ((Local3 == Zero))
                            {
                                M000 (0x0DD5)
                            }

                            If ((Local3 == One))
                            {
                                M000 (0x0DD6)
                            }
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                            M000 (0x0DD7)
                        }
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M275, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 ((Local5 & 0xFF00FFFF)) == Local6))
                            {
                                Local7 = One
                            }
                        }
                    }

                    Local1 += 0x08
                }
            }
        }

        M460 ("  KER-ASL-CpmCheckDeviceResetState (0x%X, %d)  Return (%d)\n", Arg0, Arg1, Local7, Zero, Zero, Zero)
        Return (Local7)
    }

    Method (M113, 1, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M108 /* \M108 */
            Local7 = One
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    If ((Local2 == Arg0))
                    {
                        Local2 = 0xFF
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        If ((Local3 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x0A, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x0C, Zero, 0x08)
                            Local7 &= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x03))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }

                        If ((Local3 == 0x04))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x06, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x08, Zero, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x0A, Zero, 0x20)
                            Local6 = M013 ((Local0 + Local1), 0x0C, Zero, 0x08)
                            Local7 |= (M009 ((Local5 & 0xFF00FFFF)) == Local6)
                        }
                    }
                    Else
                    {
                        Local1 += 0x0E
                    }
                }
            }
        }
        Else
        {
            Local7 = Zero
        }

        If (Local7)
        {
            Local7 = One
        }

        Return (Local7)
    }

    Name (M046, 0xAA)
    Method (M045, 0, Serialized)
    {
        Local0 = Zero
        If ((M046 == 0xAA))
        {
            M046 = Zero
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("Windows 2021"))
                {
                    M046 = 0x0B
                    M460 ("  KER-ASL-_OSI = Windows 11\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2020"))
                {
                    M046 = 0x0A
                    M460 ("  KER-ASL-_OSI = Windows 10, version 2004\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2019"))
                {
                    M046 = 0x09
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1903\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2018.2"))
                {
                    M046 = 0x08
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1809\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2018"))
                {
                    M046 = 0x07
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1803\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2017.2"))
                {
                    M046 = 0x06
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1709\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2017"))
                {
                    M046 = 0x05
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1703\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2016"))
                {
                    M046 = 0x04
                    M460 ("  KER-ASL-_OSI = Windows 10, version 1607\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2015"))
                {
                    M046 = 0x03
                    M460 ("  KER-ASL-_OSI = Windows 10\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2013"))
                {
                    M046 = 0x02
                    M460 ("  KER-ASL-_OSI = Windows 8.1\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf (\_OSI ("Windows 2012"))
                {
                    M046 = One
                    M460 ("  KER-ASL-_OSI = Windows 8, Win Server 2012\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
            }
        }

        If ((M046 >= One))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M22A, 1, Serialized)
    {
        M460 ("  KER-ASL-CpmTriggerSci (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        OperationRegion (VARP, SystemMemory, 0xFED8020C, 0x14)
        Field (VARP, DWordAcc, NoLock, Preserve)
        {
            VA0C,   32, 
            Offset (0x0C), 
            VA18,   32, 
            VA1C,   32
        }

        Local0 = (One << Arg0)
        Local1 = 0x7FFFFFFF
        Local1 |= 0x80000000
        Local1 ^= Local0
        VA0C &= Local1
        VA18 = ((VA18 & Local1) | Local0)
        VA1C = ((VA1C & Local1) | Local0)
        Sleep (One)
        VA1C &= Local1
        VA18 &= Local1
    }

    Mutex (M230, 0x00)
    Method (M232, 3, Serialized)
    {
        Local0 = Arg0
        Local1 = Arg1
        Local2 = Arg2
        M460 ("  KER-ASL-CpmTriggerSmi (0x%X, 0x%X, %d)\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
        Acquire (M230, 0xFFFF)
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, M231, 0x02)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VAR1,   8, 
            VAR2,   8
        }

        VAR2 = Local1
        VAR1 = Local0
        If ((Local2 > Zero))
        {
            Sleep (Local2)
        }

        Release (M230)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM (Arg0, Arg1, Arg2))
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MLIB, 2, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = DerefOf (Arg1 [0x02])
                Switch (ToInteger (Local0))
                {
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x05)
                    }
                    Case (0x04)
                    {
                        M228 (0x04)
                        M228 (0x06)
                    }
                    Case (0x05)
                    {
                        M228 (0x04)
                        M228 (0x07)
                    }

                }
            }

        }
    }

    Method (M458, 1, NotSerialized)
    {
        ToInteger (M453, Local0)
        If ((Local0 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local0, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                THRM,   8, 
                Offset (0x14), 
                LSRM,   8, 
                Offset (0x18), 
                MSRM,   8
            }

            Local1 = 0x001E8480
            While (((Local1 > Zero) && ((LSRM & 0x60) != 0x60)))
            {
                Local1 -= One
            }

            If ((M457 != Zero))
            {
                Local2 = 0x001E8480
                While (((Local2 > Zero) && ((MSRM & 0x10) != 0x10)))
                {
                    Local2 -= One
                }
            }

            If ((Local1 != Zero))
            {
                THRM = Arg0
                Return (Zero)
            }
        }
        ElseIf ((Local0 > Zero))
        {
            CreateWordField (M285, 0x02, M288)
            OperationRegion (VARN, SystemIO, Local0, 0x08)
            Field (VARN, ByteAcc, NoLock, Preserve)
            {
                THRI,   8, 
                Offset (0x05), 
                LSRI,   8
            }

            Local1 = 0x001E8480
            If ((ToInteger (M288) != Local0))
            {
                While (((Local1 > Zero) && ((LSRI & 0xE0) != 0x60)))
                {
                    If ((LSRI == 0xFF))
                    {
                        M453 = Zero
                        Local1 = One
                    }

                    Local1 -= One
                }
            }

            If ((Local1 != Zero))
            {
                THRI = Arg0
                Return (Zero)
            }
        }

        Return (0xFF)
    }

    Method (M459, 2, NotSerialized)
    {
        ToInteger (M453, Local0)
        If ((Local0 == Zero))
        {
            Return (0xFF)
        }
        ElseIf ((Local0 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local0, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                DLLM,   8, 
                Offset (0x04), 
                DLHM,   8, 
                Offset (0x08), 
                FCRM,   8, 
                Offset (0x0C), 
                LCRM,   8, 
                Offset (0x10), 
                MCRM,   8
            }

            If (((LCRM & 0x3F) != M455))
            {
                LCRM = 0x80
                DLHM = (M454 >> 0x08)
                DLLM = (M454 & 0xFF)
                LCRM = M455 /* \M455 */
                FCRM = Zero
                FCRM = M456 /* \M456 */
                DLHM = Zero
                MCRM = Zero
            }
        }

        Local0 = SizeOf (Arg0)
        ToInteger (Arg1, Local1)
        Local2 = Zero
        ToBuffer (Arg0, Local3)
        If ((Local0 != Zero))
        {
            While (((Local0 > Local1) && (Local2 == Zero)))
            {
                Local2 = M458 (DerefOf (Local3 [Local1]))
                Local1 += One
            }
        }

        Return (Local2)
    }

    Method (M460, 7, Serialized)
    {
        CreateWordField (M285, 0x02, M288)
        ToInteger (M453, Local7)
        If ((Local7 == Zero))
        {
            Return (0xFF)
        }
        ElseIf ((Local7 > 0xFFFF))
        {
            OperationRegion (VARM, SystemMemory, Local7, 0x20)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                DLLM,   8, 
                Offset (0x04), 
                DLHM,   8, 
                Offset (0x08), 
                FCRM,   8, 
                Offset (0x0C), 
                LCRM,   8, 
                Offset (0x10), 
                MCRM,   8
            }

            If (((LCRM & 0x3F) != M455))
            {
                LCRM = 0x80
                DLHM = (M454 >> 0x08)
                DLLM = (M454 & 0xFF)
                LCRM = M455 /* \M455 */
                FCRM = Zero
                FCRM = M456 /* \M456 */
                DLHM = Zero
                MCRM = Zero
            }
        }
        ElseIf ((ToInteger (M288) == Local7))
        {
            OperationRegion (VARS, SystemIO, Local7, 0x04)
            Field (VARS, DWordAcc, NoLock, Preserve)
            {
                VART,   32
            }

            VART = 0x5F535452
        }

        Local0 = SizeOf (Arg0)
        Local1 = Zero
        Local2 = Zero
        Local5 = One
        ToBuffer (Arg0, Local3)
        If ((Local0 != Zero))
        {
            While (((Local0 > Local1) && (Local2 == Zero)))
            {
                Local4 = DerefOf (Local3 [Local1])
                If (((Local4 == 0x25) && (0x07 > Local5)))
                {
                    If ((Local5 == One))
                    {
                        Local6 = Arg1
                    }
                    ElseIf ((Local5 == 0x02))
                    {
                        Local6 = Arg2
                    }
                    ElseIf ((Local5 == 0x03))
                    {
                        Local6 = Arg3
                    }
                    ElseIf ((Local5 == 0x04))
                    {
                        Local6 = Arg4
                    }
                    ElseIf ((Local5 == 0x05))
                    {
                        Local6 = Arg5
                    }
                    ElseIf ((Local5 == 0x06))
                    {
                        Local6 = Arg6
                    }

                    Local5 += One
                    Local1 += One
                    Local4 = DerefOf (Local3 [Local1])
                    If (((Local4 == 0x58) || (Local4 == 0x78)))
                    {
                        Local2 = M459 (ToHexString (Local6), 0x02)
                    }
                    ElseIf (((Local4 == 0x44) || (Local4 == 0x64)))
                    {
                        Local2 = M459 (ToDecimalString (Local6), Zero)
                    }
                    ElseIf (((Local4 == 0x53) || (Local4 == 0x73)))
                    {
                        Local2 = M459 (Local6, Zero)
                    }
                    Else
                    {
                        Local2 = M458 (0x25)
                        Local5 -= One
                        Local1 -= One
                    }
                }
                ElseIf ((Local4 == 0x0A))
                {
                    Local2 = M458 (0x0D)
                    Local2 = M458 (0x0A)
                }
                Else
                {
                    Local2 = M458 (Local4)
                }

                Local1 += One
            }
        }

        If ((ToInteger (M288) == Local7))
        {
            OperationRegion (VARU, SystemIO, Local7, 0x04)
            Field (VARU, DWordAcc, NoLock, Preserve)
            {
                VARV,   32
            }

            VARV = 0x5F454E44
        }

        Return (Local2)
    }

    Name (M404, Buffer (0x07)
    {
         0x00, 0x02, 0x06, 0x08, 0x04, 0x0A, 0x0C         // .......
    })
    Method (M405, 5, Serialized)
    {
        If ((M085 >= 0x04))
        {
            If ((M085 == 0x08))
            {
                Local1 = DerefOf (M404 [Arg4])
                If (((Arg0 > Zero) || (Arg1 > Zero)))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                    Local0 >>= Local1
                    Local0 &= 0x03
                }
                Else
                {
                    Local0 = M011 ((M084 + 0x0E00), (Local1 >> 0x08), (
                        Local1 & 0x07), 0x02)
                }
            }
            ElseIf ((Arg3 == 0x02))
            {
                Local0 = M011 ((M084 + 0x1300), (Local1 >> 0x08), (
                    Local1 & 0x07), 0x02)
            }
            Else
            {
                Local0 = M011 ((M084 + 0x0E00), (Local1 >> 0x08), (
                    Local1 & 0x07), 0x02)
            }
        }
        Else
        {
            Local0 = M011 ((M084 + 0x0E00), (Arg4 >> One), (
                (Arg4 & One) << 0x02), 0x04)
        }

        M460 ("  KER-ASL-CpmReadClkReq  (%d, %d, %d, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Arg4, Local0)
        Return (Local0)
    }

    Method (M406, 6, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteClkReq (%d, %d, %d, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)
        If ((M085 >= 0x04))
        {
            If ((M085 == 0x08))
            {
                Local1 = DerefOf (M404 [Arg4])
                If (((Arg0 > Zero) || (Arg1 > Zero)))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                    Local0 &= (0xFFFFFFFF ^ (0x03 << Local1))
                    Local0 |= (Arg5 << Local1)
                    M250 (Arg0, Arg1, Arg2, 0x02D01E00, Local0)
                }
                Else
                {
                    M012 ((M084 + 0x0E00), (Local1 >> 0x08), (Local1 & 0x07
                        ), 0x02, Arg5)
                }
            }
            ElseIf ((Arg3 == 0x02))
            {
                M012 ((M084 + 0x1300), (Local1 >> 0x08), (Local1 & 0x07
                    ), 0x02, Arg5)
            }
            Else
            {
                M012 ((M084 + 0x0E00), (Local1 >> 0x08), (Local1 & 0x07
                    ), 0x02, Arg5)
            }
        }
        Else
        {
            M012 ((M084 + 0x0E00), (Arg4 >> One), ((Arg4 & 
                One) << 0x02), 0x04, Arg5)
        }
    }

    Method (M600, 2, Serialized)
    {
        Name (TEMP, Package (0x04)
        {
            0xFF, 
            0x09, 
            Zero, 
            Zero
        })
        If ((Arg0 == Zero))
        {
            TEMP [Zero] = Zero
        }

        If ((Arg1 != 0x09))
        {
            TEMP [One] = Arg1
        }

        Local0 = DerefOf (TEMP [Zero])
        Local1 = DerefOf (TEMP [One])
        Local2 = DerefOf (TEMP [0x02])
        Local3 = DerefOf (TEMP [0x03])
        M460 ("  KER-ASL-CpmGenerateUPC () Return Package (4) {0x%X, 0x%X, 0x%X, 0x%X}\n", Local0, Local1, Local2, Local3, Zero, Zero)
        Return (TEMP) /* \M600.TEMP */
    }

    Method (M601, 6, Serialized)
    {
        Name (TEMP, Package (0x01)
        {
            Buffer (0x14)
            {
                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
            }
        })
        CreateField (DerefOf (TEMP [Zero]), 0x20, 0x10, WIDH)
        CreateField (DerefOf (TEMP [Zero]), 0x30, 0x10, HIGT)
        CreateField (DerefOf (TEMP [Zero]), 0x40, One, VISI)
        CreateField (DerefOf (TEMP [Zero]), 0x42, One, FLID)
        CreateField (DerefOf (TEMP [Zero]), 0x43, 0x03, PANE)
        CreateField (DerefOf (TEMP [Zero]), 0x46, 0x02, VTPS)
        CreateField (DerefOf (TEMP [Zero]), 0x48, 0x02, HZPS)
        CreateField (DerefOf (TEMP [Zero]), 0x4A, 0x04, SHAP)
        CreateField (DerefOf (TEMP [Zero]), 0x4F, 0x08, GPTN)
        CreateField (DerefOf (TEMP [Zero]), 0x57, 0x08, GPPS)
        CreateField (DerefOf (TEMP [Zero]), 0x60, 0x02, EJTB)
        CreateField (DerefOf (TEMP [Zero]), 0x73, 0x04, ROTN)
        CreateField (DerefOf (TEMP [Zero]), 0x80, 0x20, OFST)
        If (((Arg0 == Zero) || (Arg0 == 0x02)))
        {
            SHAP = 0x03
            WIDH = 0x08
            HIGT = 0x0E
        }
        ElseIf (((Arg0 == One) || (Arg0 == 0x03)))
        {
            SHAP = One
            WIDH = 0x03
            HIGT = 0x08
        }
        ElseIf ((Arg0 == 0x02))
        {
            SHAP = 0x02
            WIDH = 0x08
            HIGT = 0x08
            FLID = One
        }

        If (((Arg0 == 0x02) || (Arg0 == 0x03)))
        {
            ROTN = 0x02
        }

        VISI = Arg1
        GPTN = ((Arg2 >> 0x08) & 0xFF)
        GPPS = (Arg2 & 0xFF)
        EJTB = Arg3
        PANE = (Arg4 & 0x07)
        VTPS = ((Arg4 >> 0x04) & 0x03)
        HZPS = ((Arg4 >> 0x08) & 0x03)
        If ((Arg5 != Zero))
        {
            OFST = Arg5
        }

        CreateDWordField (DerefOf (TEMP [Zero]), Zero, DW00)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x04, DW01)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x08, DW02)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x0C, DW03)
        CreateDWordField (DerefOf (TEMP [Zero]), 0x10, DW04)
        M460 ("  KER-ASL-CpmGeneratePLD () Return 0x%X, 0x%X, 0x%X, 0x%X, 0x%X\n", DW00, DW01, DW02, DW03, DW04, Zero)
        Return (TEMP) /* \M601.TEMP */
    }

    Method (M643, 1, Serialized)
    {
        ToInteger (Arg0, Local0)
        Local1 = Zero
        If ((Local0 != Zero))
        {
            While (((Local1 < 0x20) && ((Local0 & One) == Zero)))
            {
                Local0 >>= One
                Local1 += One
            }
        }

        If ((Local1 >= 0x20))
        {
            Local1 = Zero
        }

        Return (Local1)
    }

    Method (MPTS, 1, NotSerialized)
    {
        M460 ("  KER-ASL-MPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        M000 (0x0DE7)
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TPTS))
                {
                    M460 ("    KER-ASL-Call \\_SB.PCXX.GPXX.SAXX.TPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCXX.GPXX.SAXX.TPTS (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TPTS))
                {
                    M460 ("    KER-ASL-Call ZERO_POWR_ODD_SATA_PATH.TPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCI0.PTBR.PTST.TPTS (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TPTS))
            {
                M460 ("    KER-ASL-Call \\_SB.PCXX.SAXX.TPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.PCXX.SAXX.TPTS (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M263))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmOtherHotplugCard_PTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.M263 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x21)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IPTS))
                {
                    M460 ("    KER-ASL-Call \\_SB.IPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.IPTS (Arg0)
                }
            }
        }

        If ((M620 != Zero))
        {
            Local0 = M049 (M620, 0x10)
            If ((Local0 != Zero))
            {
                If (CondRefOf (\_SB.BPTS))
                {
                    M460 ("    KER-ASL-Call \\_SB.BPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.BPTS (Arg0)
                }
            }
        }

        If ((M4F0 != Zero))
        {
            If (CondRefOf (\_GPE.PTS0))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS0 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS0 (Arg0)
            }

            If (CondRefOf (\_GPE.PTS1))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS1 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS1 (Arg0)
            }

            If (CondRefOf (\_GPE.PTS2))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS2 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS2 (Arg0)
            }

            If (CondRefOf (\_GPE.PTS3))
            {
                M460 ("    KER-ASL-Call \\_GPE.PTS3 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.PTS3 (Arg0)
            }
        }

        If (CondRefOf (\_SB.OPTS))
        {
            M460 ("    KER-ASL-Call \\_SB.OPTS (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            \_SB.OPTS (Arg0)
        }

        M000 (0x0DE8)
    }

    Method (MWAK, 1, NotSerialized)
    {
        M460 ("  KER-ASL-MWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        M000 (0x0DE9)
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TWAK))
                {
                    M460 ("    KER-ASL-Call \\_SB.PCXX.GPXX.SAXX.TWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCXX.GPXX.SAXX.TWAK (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TWAK))
                {
                    M460 ("    KER-ASL-Call ZERO_POWR_ODD_SATA_PATH.TWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCI0.PTBR.PTST.TWAK (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TWAK))
            {
                M460 ("    KER-ASL-Call \\_SB.PCXX.SAXX.TWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.PCXX.SAXX.TWAK (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M264))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmOtherHotplugCard_WAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.M264 (Arg0)
            }
        }

        If ((M280 != Zero))
        {
            If (CondRefOf (\_SB.M284))
            {
                M460 ("    KER-ASL-Call \\_SB.CpmLowPowerEthernet_WAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_SB.M284 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x21)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IWAK))
                {
                    M460 ("    KER-ASL-Call \\_SB.IWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.IWAK (Arg0)
                }
            }
        }

        If ((M620 != Zero))
        {
            Local0 = M049 (M620, 0x10)
            If ((Local0 != Zero))
            {
                If (CondRefOf (\_SB.BWAK))
                {
                    M460 ("    KER-ASL-Call \\_SB.BWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                    \_SB.BWAK (Arg0)
                }
            }
        }

        If ((M4F0 != Zero))
        {
            If (CondRefOf (\_GPE.WAK0))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK0 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK0 (Arg0)
            }

            If (CondRefOf (\_GPE.WAK1))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK1 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK1 (Arg0)
            }

            If (CondRefOf (\_GPE.WAK2))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK2 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK2 (Arg0)
            }

            If (CondRefOf (\_GPE.WAK3))
            {
                M460 ("    KER-ASL-Call \\_GPE.WAK3 (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                \_GPE.WAK3 (Arg0)
            }
        }

        If (CondRefOf (\_SB.OWAK))
        {
            M460 ("    KER-ASL-Call \\_SB.OWAK (%d)\n", Arg0, Zero, Zero, Zero, Zero, Zero)
            \_SB.OWAK (Arg0)
        }

        M000 (0x0DEA)
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20, Arg4)
    }

    Method (M021, 4, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M021.VAR2 */
        M460 ("  KER-ASL-CpmReadPcieRegister  (0x%X, 0x%X, 0x%X, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local0, Zero)
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWritePcieRegister (0x%X, 0x%X, 0x%X, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg4
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, One, Zero)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, One, One)
    }

    Method (M024, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x0128)
        If ((Local0 & 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Local0 = M021 (Arg0, Arg1, Arg2, 0xA2)
        Local0 &= 0xFFFFFFFFFFFFFFF8
        Local1 = (Local0 >> 0x04)
        Local1 &= 0x07
        Local0 |= Local1
        Local0 |= 0x0100
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 4, Serialized)
    {
        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (Arg3)
        {
            M429 (Arg0, Arg1, Arg2, 0x88, Zero, 0x04, Arg3)
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, One)
        Local1 = 0x64
        Local2 = One
        While ((Local1 && Local2))
        {
            Sleep (One)
            Local3 = M430 (Arg0, Arg1, Arg2)
            If ((Local3 & 0x0800))
            {
                Local1--
            }
            Else
            {
                Local2 = Zero
            }
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (!Local2)
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M430, 3, Serialized)
    {
        Local0 = M017 (Arg0, Arg1, Arg2, 0x68, 0x10, 0x10)
        Return (Local0)
    }

    Method (M017, 6, Serialized)
    {
        Local0 = M645 (Arg0, Arg1, Arg2)
        If ((Local0 == Zero))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            Local1 = ((Local3 >> Arg4) & (Local3 >> (0x20 - Arg5)
                ))
        }
        Else
        {
            Local1 = M013 (Local0, Arg3, Arg4, Arg5)
        }

        Return (Local1)
    }

    Method (M018, 7, Serialized)
    {
        Local0 = M645 (Arg0, Arg1, Arg2)
        If ((Local0 != Zero))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M014 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M428, 6, Serialized)
    {
        Local0 = M645 (Arg0, Arg1, Arg2)
        If ((Local0 == Zero))
        {
            Local3 = 0xFF
            Local1 = ((Local3 >> Arg4) & (Local3 >> (0x08 - Arg5)
                ))
        }
        Else
        {
            Local1 = M011 (Local0, Arg3, Arg4, Arg5)
        }

        Return (Local1)
    }

    Method (M429, 7, Serialized)
    {
        Local0 = M645 (Arg0, Arg1, Arg2)
        If ((Local0 != Zero))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M012 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M265, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M645 (Arg0, Arg1, Arg2)
        Local2 = M646 (Local1, 0x10)
        If ((Local2 != Zero))
        {
            Local3 = M013 (Local1, (Local2 + 0x0C), 0x12, One)
            Local4 = M013 (Local1, (Local2 + 0x10), 0x08, One)
            If (((Local3 == One) && (Local4 == One)))
            {
                Local0 = One
            }
        }

        Return (Local0)
    }

    Method (M033, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M645 (Arg0, Arg1, Arg2)
        Local2 = M646 (Local1, 0x10)
        If ((Local2 != Zero))
        {
            Local0 = M013 (Local1, (Local2 + 0x0C), 0x0A, 0x02)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M645 (Arg0, Arg1, Arg2)
        Local2 = M646 (Local1, 0x10)
        If ((Local2 != Zero))
        {
            Local0 = M013 (Local1, (Local2 + 0x10), Zero, 0x02)
        }

        M460 ("  KER-ASL-CpmGetPcieAspm (0x%X, 0x%X, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Local0, Zero, Zero)
        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        M460 ("  KER-ASL-CpmSetPcieAspm (0x%X, 0x%X, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
        Local1 = M645 (Arg0, Arg1, Arg2)
        Local2 = M646 (Local1, 0x10)
        If ((Local2 != Zero))
        {
            M014 (Local1, (Local2 + 0x10), Zero, 0x02, (Arg3 & 0x03))
        }
    }

    Method (M114, 4, Serialized)
    {
        Local7 = Zero
        If (!M001 (Arg0, Arg1))
        {
            Name (M115, Buffer (0x05){})
            CreateWordField (M115, Zero, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            M116 = 0x05
            M119 = Zero
            M118 = Arg0
            M117 = Arg1
            If ((Arg2 == Zero))
            {
                If ((Arg3 != One))
                {
                    M120 = Zero
                    \_SB.ALIB (0x06, M115)
                }
            }
            Else
            {
                If ((Arg3 != One))
                {
                    M120 = One
                    \_SB.ALIB (0x06, M115)
                }

                Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    Local1 = M019 (Local0, Zero, Zero, Zero)
                    Local2 = 0x7FFFFFFF
                    Local2 |= 0x80000000
                    If (((Local1 != Zero) && (Local1 != Local2)))
                    {
                        Local7 = One
                    }
                }
            }
        }
        ElseIf ((Arg2 == Zero))
        {
            M002 (One, Arg1)
        }
        Else
        {
            M002 (Zero, Arg1)
            Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                Local1 = M019 (Local0, Zero, Zero, Zero)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If (((Local1 != Zero) && (Local1 != Local2)))
                {
                    Local7 = One
                }
            }
        }

        Return (Local7)
    }

    Method (M248, 1, Serialized)
    {
        If ((M085 == 0x08))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x0B))
        {
            If ((M085 >= 0x0D))
            {
                Return (M017 (Zero, 0x08, (Arg0 + One), 0x19, Zero, 0x08))
            }
            ElseIf ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, Arg0, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, 0x02, 0x19, Zero, 0x08))
            }
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M401, 3, Serialized)
    {
        Local0 = (M430 (Arg0, Arg1, Arg2) & 0x0F)
        If (((Local0 == 0x0F) || (Local0 == Zero)))
        {
            Return (0xFF)
        }

        If (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            If ((Arg0 <= 0x03))
            {
                Local3 = (0x06 - Arg0)
            }
            Else
            {
                Local3 = 0x06
            }
        }
        Else
        {
            Local3 = 0x03
        }

        Local3 = (0x14001000 + (Local3 << 0x14))
        Local0 = (Arg1 & 0x1F)
        Local0 = ((Local0 << 0x03) | (Arg2 & 0x07))
        Local1 = Zero
        If (((M085 >= 0x09) && (M085 <= 0x0A)))
        {
            Local2 = 0x09
        }
        ElseIf (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            Local2 = 0x16
        }
        ElseIf ((M085 == 0x0D))
        {
            Local2 = 0x0D
        }
        ElseIf ((M085 == 0x0E))
        {
            Local2 = 0x0A
        }
        ElseIf ((M085 == 0x0F))
        {
            Local2 = 0x10
        }
        ElseIf ((M085 == 0x10))
        {
            Local2 = 0x15
        }
        ElseIf ((M085 == 0x12))
        {
            Local2 = 0x14
        }
        ElseIf ((M085 == 0x13))
        {
            Local2 = 0x0D
        }
        ElseIf ((M085 == 0x14))
        {
            Local2 = 0x12
        }
        Else
        {
            Local2 = 0x12
        }

        Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
            ))
        While (((Local1 < Local2) && (Local4 != Local0)))
        {
            Local1++
            Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
                ))
        }

        If ((Local1 <= Local2))
        {
            Return (Local1)
        }
        Else
        {
            Return (0xFF)
        }
    }

    Method (M471, 3, Serialized)
    {
        If (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            If ((Arg0 <= 0x03))
            {
                Local5 = (0x04 - Arg0)
            }
            Else
            {
                Local5 = 0x04
            }
        }
        Else
        {
            Local5 = (Arg0 + One)
        }

        ToInteger (Arg1, Local4)
        If (((M085 >= 0x0D) && (M085 <= 0x0E)))
        {
            If ((Local4 >= 0x03))
            {
                Local4 -= 0x03
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x0F))
        {
            If ((Local4 >= 0x0C))
            {
                Local4 -= 0x0C
                Local5 += 0x03
            }
            ElseIf ((Local4 == 0x0B))
            {
                Local4 -= 0x0B
                Local5 += 0x02
            }
            ElseIf ((Local4 >= 0x05))
            {
                Local4 -= 0x05
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x12))
        {
            If ((Local4 >= 0x10))
            {
                Local4 -= 0x10
                Local5 += 0x03
            }
            ElseIf ((Local4 >= 0x0C))
            {
                Local4 -= 0x0C
                Local5 += 0x02
            }
            ElseIf ((Local4 >= 0x06))
            {
                Local4 -= 0x06
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x10))
        {
            If ((Local4 >= 0x09))
            {
                Local4 -= 0x09
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x13))
        {
            If ((Local4 >= 0x05))
            {
                Local4 -= 0x05
                Local5 += One
            }
        }
        ElseIf ((M085 == 0x14))
        {
            If ((Local4 >= 0x09))
            {
                Local4 -= 0x09
                Local5 += 0x03
            }
            ElseIf ((Local4 >= 0x03))
            {
                Local4 -= 0x03
                Local5 += One
            }
        }
        ElseIf ((Local4 >= 0x08))
        {
            Local4 -= 0x08
            If (((M085 >= 0x0B) && (M085 <= 0x0C)))
            {
                Local5 += 0x04
            }
            Else
            {
                Local5 += One
            }
        }

        Local6 = (0x11000000 + (Local5 << 0x14))
        Local6 += (Arg2 << 0x10)
        If (((Arg2 == Zero) || (Arg2 == 0x04)))
        {
            Local6 += (Local4 << 0x0C)
        }

        Return (Local6)
    }

    Method (M402, 3, Serialized)
    {
        Local4 = M401 (Arg0, Arg1, Arg2)
        If ((Local4 != 0xFF))
        {
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                Local7 = (M471 (Arg0, Local4, 0x08) + 0x0188)
                Local0 = M249 (Zero, Zero, Zero, Local7)
                Local0 &= 0xFFFFDFFF
                M250 (Zero, Zero, Zero, Local7, (Local0 | 0x2000))
            }

            Local1 = (M019 (Zero, Zero, Zero, 0x84) & 0xFF00FCFF)
            Local2 = ((Arg1 << 0x13) | (Arg2 << 0x10))
            Local1 |= Local2
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0300))
            If ((M085 >= 0x0C))
            {
                Local3 = M019 (Zero, Zero, Zero, 0x84)
                Local5 = 0x4EEA
                Local6 = M453 /* \M453 */
                M453 = Zero
                While (((Local5 > Zero) && ((Local3 & 0x0400) != 0x0400)))
                {
                    Local5 = (Local5 - One)
                    Stall (0x63)
                    If (((Local5 & 0x03FF) == Zero))
                    {
                        M453 = Local6
                    }

                    Local3 = M019 (Zero, Zero, Zero, 0x84)
                    If (((Local5 & 0x03FF) == Zero))
                    {
                        M453 = Zero
                    }
                }

                M453 = Local6
            }

            Local6 = (M471 (Arg0, Local4, 0x04) + 0x0294)
            Local3 = M249 (Zero, Zero, Zero, Local6)
            Local5 = 0x4EEA
            Local4 = M453 /* \M453 */
            M453 = Zero
            While (((Local5 > Zero) && ((Local3 & 0x3F) != 0x1F)))
            {
                Local5 = (Local5 - One)
                Stall (0x63)
                If (((Local5 & 0x03FF) == Zero))
                {
                    M453 = Local4
                }

                Local3 = M249 (Zero, Zero, Zero, Local6)
                If (((Local5 & 0x03FF) == Zero))
                {
                    M453 = Zero
                }
            }

            M453 = Local4
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                M250 (Zero, Zero, Zero, Local7, Local0)
            }
        }
    }

    Method (M403, 4, Serialized)
    {
        Local4 = M401 (Arg0, Arg1, Arg2)
        If ((Local4 != 0xFF))
        {
            Local2 = (M471 (Arg0, Local4, 0x04) + 0x0280)
            Local0 = M249 (Zero, Zero, Zero, Local2)
            Local0 &= 0xFFBFFFFF
            Local1 = Arg3
            Local0 |= (Local1 << 0x16)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }
    }

    Method (M472, 4, Serialized)
    {
        Local4 = M401 (Arg0, Arg1, Arg2)
        If ((Local4 != 0xFF))
        {
            Local7 = (M471 (Arg0, Local4, 0x08) + 0x0428)
            If (((M085 >= 0x0D) && (M085 <= 0x0E)))
            {
                If ((Local4 >= 0x03))
                {
                    Local4 -= 0x03
                }
            }
            ElseIf ((M085 == 0x0F))
            {
                If ((Local4 >= 0x05))
                {
                    Local4 -= 0x05
                }
            }
            ElseIf ((M085 == 0x12))
            {
                If ((Local4 >= 0x06))
                {
                    Local4 -= 0x06
                }
            }
            ElseIf ((M085 == 0x13))
            {
                If ((Local4 >= 0x05))
                {
                    Local4 -= 0x05
                }
            }
            ElseIf ((M085 == 0x10))
            {
                If ((Local4 >= 0x09))
                {
                    Local4 -= 0x09
                }
            }
            ElseIf ((M085 == 0x14))
            {
                If ((Local4 >= 0x09))
                {
                    Local4 -= 0x09
                }
                ElseIf ((Local4 >= 0x03))
                {
                    Local4 -= 0x03
                }
            }
            ElseIf ((Local4 >= 0x08))
            {
                Local4 -= 0x08
            }

            Local0 = M249 (Zero, Zero, Zero, Local7)
            Local1 = (One << Local4)
            Local2 = (Arg3 << Local4)
            If (((Local0 & Local1) != Local2))
            {
                Local3 = (Local0 & (0xFFFFFFFF ^ Local1))
                M250 (Zero, Zero, Zero, Local7, (Local3 | Local2))
                Local0 = M249 (Zero, Zero, Zero, Local7)
            }
        }
    }

    Method (M645, 3, Serialized)
    {
        Local3 = Zero
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Return (Local3)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (Local0)
    }

    Method (M646, 2, Serialized)
    {
        Local0 = Zero
        Local1 = M049 (Arg0, 0x34)
        While ((Local1 != Zero))
        {
            Local2 = M049 (Arg0, Local1)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == Arg1))
            {
                Local0 = Local1
                Break
            }

            Local1 = M049 (Arg0, (Local1 + One))
        }

        M460 ("  FEA-ASL-CpmSearchPcieCapability (0x%X, 0x%X) = 0x%X\n", Arg0, Arg1, Local0, Zero, Zero, Zero)
        Return (Local0)
    }

    Method (M647, 2, Serialized)
    {
        M460 ("  KER-ASL-CpmDumpPcieRegisters (0x%X, 0x%X)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If ((Arg0 != 0xEEEEEEEE))
        {
            Local0 = M04B (Arg0, Zero)
            Local1 = 0x7FFFFFFF
            Local1 |= 0x80000000
            If (((Local0 != Zero) && (Local0 != Local1)))
            {
                M644 (Arg0, 0x04, Arg1)
            }
        }
    }

    Method (M648, 3, Serialized)
    {
        Local2 = Zero
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local0 = Zero
        While ((Local0 <= Arg1))
        {
            Local1 = Zero
            While ((Local1 <= Arg2))
            {
                Local3 = (((Arg0 << 0x14) & 0x0FF00000) | ((Local0 << 
                    0x0F) & 0x000F8000))
                Local3 |= ((Local1 << 0x0C) & 0x7000)
                Local4 = M04B (M083, Local3)
                If (((Local4 != Local5) && (Local4 != Zero)))
                {
                    Local2 |= (One << Local0)
                }
                ElseIf ((Local1 == Zero))
                {
                    Break
                }

                Local1++
            }

            Local0++
        }

        M460 ("  KER-ASL-CpmSearchPcieDevice (Bus 0x%X) = Device 0x%X Exist\n", Arg0, Local2, Zero, Zero, Zero, Zero)
        Return (Local2)
    }

    Method (M649, 1, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != 0xEEEEEEEE))
        {
            Local2 = M646 (Arg0, One)
            If ((Local2 != Zero))
            {
                Local0 = (M04A (Arg0, (Local2 + 0x04)) & 0x7FFF)
                Local1 = (Local0 & 0xFFFC)
                Local0 = M04A (Arg0, (Local2 + 0x04))
            }
        }

        M460 ("  FEA-ASL-CpmGetPCIePowerState (0x%X) = 0x%X\n", Arg0, Local0, Zero, Zero, Zero, Zero)
        Return (Local0)
    }

    Method (M650, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != 0xEEEEEEEE))
        {
            Local2 = M646 (Arg0, One)
            If ((Local2 != Zero))
            {
                Local0 = (M04A (Arg0, (Local2 + 0x04)) & 0x7FFF)
                Local1 = (Local0 & 0xFFFC)
                M04D (Arg0, (Local2 + 0x04), (Local1 | Arg1))
            }
        }

        M460 ("  FEA-ASL-CpmSetPCIePowerState (0x%X, 0x%X) = 0x%X\n", Arg0, Arg1, Local0, Zero, Zero, Zero)
        Return (Local0)
    }

    Method (M651, 4, Serialized)
    {
        Local0 = M04B (Arg0, Zero)
        Local1 = 0x7FFFFFFF
        Local1 |= 0x80000000
        If ((((Arg1 != Zero) && (Arg0 != 0xEEEEEEEE)) && (
            (Local0 != Zero) && (Local0 != Local1))))
        {
            M04E (Arg1, (Arg2 + Zero), M04B (Arg0, 0x18))
            M04E (Arg1, (Arg2 + 0x04), M04B (Arg0, 0x1C))
            M04E (Arg1, (Arg2 + 0x08), M04B (Arg0, 0x20))
            M04E (Arg1, (Arg2 + 0x0C), M04B (Arg0, 0x24))
            M04E (Arg1, (Arg2 + 0x10), M04B (Arg0, 0x28))
            M04E (Arg1, (Arg2 + 0x14), M04B (Arg0, 0x2C))
            M04D (Arg1, (Arg2 + 0x18), M04A (Arg0, 0x04))
            M04C (Arg1, (Arg2 + 0x1A), M049 (Arg0, 0x0C))
            M04C (Arg1, (Arg2 + 0x1B), M049 (Arg0, 0x3C))
            Local0 = (Arg0 + M646 (Arg0, One))
            If ((Local0 != Arg0))
            {
                M04D (Arg1, (Arg2 + 0x1C), M04A (Local0, 0x04))
            }
            Else
            {
                M04D (Arg1, (Arg2 + 0x1C), Zero)
            }

            If ((Arg3 == One))
            {
                Local0 = (Arg0 + M646 (Arg0, 0x15))
                If ((Local0 != Arg0))
                {
                    M04E (Arg1, (Arg2 + 0x20), M04B (Local0, 0x08))
                    M04E (Arg1, (Arg2 + 0x24), M04B (Local0, 0x0C))
                    M04E (Arg1, (Arg2 + 0x28), M04B (Local0, 0x10))
                    M04E (Arg1, (Arg2 + 0x2C), M04B (Local0, 0x14))
                    M04E (Arg1, (Arg2 + 0x30), M04B (Local0, 0x18))
                    M04E (Arg1, (Arg2 + 0x34), M04B (Local0, 0x1C))
                }
                Else
                {
                    M04E (Arg1, (Arg2 + 0x20), Zero)
                    M04E (Arg1, (Arg2 + 0x24), Zero)
                    M04E (Arg1, (Arg2 + 0x28), Zero)
                    M04E (Arg1, (Arg2 + 0x2C), Zero)
                    M04E (Arg1, (Arg2 + 0x30), Zero)
                    M04E (Arg1, (Arg2 + 0x34), Zero)
                }
            }
        }
        Else
        {
            M04E (Arg1, (Arg2 + Zero), Zero)
            M04E (Arg1, (Arg2 + 0x04), Zero)
            M04E (Arg1, (Arg2 + 0x08), Zero)
            M04E (Arg1, (Arg2 + 0x0C), Zero)
            M04E (Arg1, (Arg2 + 0x10), Zero)
            M04E (Arg1, (Arg2 + 0x14), Zero)
            M04E (Arg1, (Arg2 + 0x18), Zero)
            M04E (Arg1, (Arg2 + 0x1C), Zero)
            If ((Arg3 == One))
            {
                M04E (Arg1, (Arg2 + 0x20), Zero)
                M04E (Arg1, (Arg2 + 0x24), Zero)
                M04E (Arg1, (Arg2 + 0x28), Zero)
                M04E (Arg1, (Arg2 + 0x2C), Zero)
                M04E (Arg1, (Arg2 + 0x30), Zero)
                M04D (Arg1, (Arg2 + 0x34), Zero)
            }
        }

        M460 ("  FEA-ASL-CpmSavePcieBridgeData (0x%X, 0x%X, 0x%X, %d)\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
    }

    Mutex (M421, 0x00)
    Method (M422, 4, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 == Zero))
        {
            Return (0xFFFFFFFF)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xE0
        Acquire (M421, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M422.VAR1 */
        Local2 = VAR2 /* \M422.VAR2 */
        VAR1 = Local1
        Release (M421)
        M460 ("  KER-ASL-CpmReadBxbSmnRegister  (%d, %d, %d, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M423, 5, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 != Zero))
        {
            M460 ("  KER-ASL-CpmWriteBxbSmnRegister (%d, %d, %d, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xE0
            Acquire (M421, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M423.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M421)
        }
    }

    Mutex (M253, 0x00)
    Method (M249, 4, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 == 0xFFFFFFFF))
        {
            Return (0xFFFFFFFF)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xB8
        If (CondRefOf (\_SB.AM00))
        {
            Acquire (\_SB.AM00, 0xFFFF)
        }
        Else
        {
            Acquire (M253, 0xFFFF)
        }

        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M249.VAR1 */
        Local2 = VAR2 /* \M249.VAR2 */
        VAR1 = Local1
        If (CondRefOf (\_SB.AM00))
        {
            Release (\_SB.AM00)
        }
        Else
        {
            Release (M253)
        }

        M460 ("  KER-ASL-CpmReadSmnRegister  (%d, %d, %d, 0x%X) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M250, 5, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 != 0xFFFFFFFF))
        {
            M460 ("  KER-ASL-CpmWriteSmnRegister (%d, %d, %d, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xB8
            If (CondRefOf (\_SB.AM00))
            {
                Acquire (\_SB.AM00, 0xFFFF)
            }
            Else
            {
                Acquire (M253, 0xFFFF)
            }

            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M250.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            If (CondRefOf (\_SB.AM00))
            {
                Release (\_SB.AM00)
            }
            Else
            {
                Release (M253)
            }
        }
    }

    Method (M013, 4, Serialized)
    {
        Local1 = M04B (Arg0, Arg1)
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
            ))
        M460 ("  KER-ASL-CpmReadMem32  (0x%X, 0x%X, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteMem32 (0x%X, 0x%X, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local1 = M04B (Arg0, Arg1)
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        M04E (Arg0, Arg1, Local4)
    }

    Method (M011, 4, Serialized)
    {
        Local1 = M049 (Arg0, Arg1)
        Local2 = ((Local1 >> Arg2) & (0xFF >> (0x08 - Arg3)
            ))
        M460 ("  KER-ASL-CpmReadMem8  (0x%X, 0x%X, %d, %d) = 0x%X\n", Arg0, Arg1, Arg2, Arg3, Local2, Zero)
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        M460 ("  KER-ASL-CpmWriteMem8 (0x%X, 0x%X, %d, %d, 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local1 = M049 (Arg0, Arg1)
        Local2 = (Arg2 + Arg3)
        Local2 = (0x08 - Local2)
        Local2 = (((0xFF << Local2) & 0xFF) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (0xFF ^ Local2)) | Local3)
        M04C (Arg0, Arg1, Local4)
    }

    Method (M252, 3, Serialized)
    {
        If ((M085 >= 0x08))
        {
            Local0 = M251 /* \M251 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = Zero
                While ((Local2 != 0xFF))
                {
                    Local2 = M011 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M011 ((Local0 + Local1), One, Zero, 0x08)
                    Local4 = M011 ((Local0 + Local1), 0x02, Zero, 0x08)
                    Local5 = M011 ((Local0 + Local1), 0x03, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local4 == Arg2))
                        {
                            Return (Local5)
                        }
                    }

                    Local1 += 0x05
                }
            }
        }

        Return (0xFFFFFFFF)
    }

    Method (M624, 1, Serialized)
    {
        Local0 = Zero
        If ((M251 != Zero))
        {
            Local1 = (0x10 + (Arg0 * 0x05))
            Local0 = M049 (M251, Local1)
            If ((Local0 == 0xFF))
            {
                Local0 = Zero
            }
        }

        Return (Local0)
    }

    Method (M049, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, One)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                VARR,   8
            }

            Local0 = VARR /* \M049.VARR */
        }

        Return (Local0)
    }

    Method (M04A, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x02)
            Field (VARM, WordAcc, NoLock, Preserve)
            {
                VARR,   16
            }

            Local0 = VARR /* \M04A.VARR */
        }

        Return (Local0)
    }

    Method (M04B, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            Local0 = VARR /* \M04B.VARR */
        }

        Return (Local0)
    }

    Method (M04C, 3, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, One)
            Field (VARM, ByteAcc, NoLock, Preserve)
            {
                VARR,   8
            }

            VARR = Arg2
        }
    }

    Method (M04D, 3, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x02)
            Field (VARM, WordAcc, NoLock, Preserve)
            {
                VARR,   16
            }

            VARR = Arg2
        }
    }

    Method (M04E, 3, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = (Arg0 + Arg1)
            OperationRegion (VARM, SystemMemory, Local0, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            VARR = Arg2
        }
    }

    Method (M644, 3, Serialized)
    {
        M460 ("  FEA-ASL-CpmDumpData (0x%X, 0x%X, 0x%X)\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
        If (((Arg1 != One) && ((Arg1 != 0x02) && 
            (Arg1 != 0x04))))
        {
            M460 ("  Arg1: One Data Width is illegal", Zero, Zero, Zero, Zero, Zero, Zero)
        }
        ElseIf ((Arg2 > 0x1000))
        {
            M460 ("  Arg2: Total Data Size is illegal", Zero, Zero, Zero, Zero, Zero, Zero)
        }
        Else
        {
            Local0 = Zero
            Local1 = Arg0
            M460 ("  0x%X:", Local1, Zero, Zero, Zero, Zero, Zero)
            While ((Local0 < Arg2))
            {
                If ((Arg1 == One))
                {
                    M460 ("  %X", M049 (Arg0, Local0), Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf ((Arg1 == 0x02))
                {
                    M460 ("  %X", M04A (Arg0, Local0), Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf ((Arg1 == 0x04))
                {
                    M460 ("  %X", M04B (Arg0, Local0), Zero, Zero, Zero, Zero, Zero)
                }

                Local0 += Arg1
                Local1 = (Arg0 + Local0)
                If (((Local1 & 0x0F) == Zero))
                {
                    M460 ("\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    If ((Local0 < Arg2))
                    {
                        M460 ("  0x%X:", (Local1 & 0xFFFFFFF0), Zero, Zero, Zero, Zero, Zero)
                    }
                }
            }
        }

        M460 ("\n", Zero, Zero, Zero, Zero, Zero, Zero)
    }

    Method (M412, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x1F)
        Local0 &= One
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M409 (Local0, Local1, Local3)
        Local5 >>= Local4
        Local5 &= One
        Return (Local5)
    }

    Method (M4E3, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x15)
        Local0 &= 0x07
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M4E1 (Local0, Local1, Local3)
        Local5 >>= Local4
        Local5 &= One
        Return (Local5)
    }

    Method (M413, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x1F)
        Local0 &= One
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local2 = (Arg0 >> 0x06)
        Local2 &= 0x03
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M409 (Local0, Local1, (((Local2 + One) * One
            ) + Local3))
        Local6 = Local5
        Local5 &= (0xFFFFFFFF ^ (One << Local4))
        Local5 |= ((Arg1 & One) << Local4)
        If ((Local5 != Local6))
        {
            M410 (Local0, Local1, (((Local2 + One) * One) + Local3
                ), Local5)
        }
    }

    Method (M4E4, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x15)
        Local0 &= 0x07
        Local1 = (Arg0 >> 0x18)
        Local1 &= 0x7F
        Local2 = (Arg0 >> 0x06)
        Local2 &= 0x03
        Local3 = (Arg0 >> 0x04)
        Local3 &= 0x03
        Local4 = (Arg0 & 0x07)
        Local5 = M4E1 (Local0, Local1, (((Local2 + One) * One
            ) + Local3))
        Local6 = Local5
        Local5 &= (0xFFFFFFFF ^ (One << Local4))
        Local5 |= ((Arg1 & One) << Local4)
        If ((Local5 != Local6))
        {
            M4E2 (Local0, Local1, (((Local2 + One) * One) + Local3
                ), Local5)
        }
    }

    Method (M43A, 1, Serialized)
    {
        Local0 = Zero
        Local1 = M04B (M128, 0x33)
        Local2 = M04B (M128, 0x72)
        If (((Local1 == Zero) || (Local2 == Zero)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local1 = 0x%X  Local2 = 0x%X  ERROR ERROR ERROR\n", Arg0, Local1, Local2, Zero, Zero, Zero)
            Return (Local0)
        }

        Local3 = M011 (Local2, 0x19, Zero, 0x08)
        If (((Local3 == Zero) || (Local3 == 0xFF)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 1\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Local2 = (Local1 + (Local3 << 0x14))
        Local3 = M013 (Local2, 0x08, 0x08, 0x18)
        If ((Local3 != 0x00060400))
        {
            If ((Arg0 >= 0x08))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d >= 8)  Not PROM21  ERROR ERROR ERROR\n", Arg0, Zero, Zero, Zero, Zero, Zero)
                Return (Local0)
            }

            Local3 = 0x02
            Local2 += (Local3 << 0x0C)
        }
        ElseIf ((Arg0 >= 0x18))
        {
            Local4 = M049 (M128, 0x93)
            If ((Local4 == Zero))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local4 = 0x%X  ERROR ERROR ERROR\n", Arg0, Local4, Zero, Zero, Zero, Zero)
                Return (Local0)
            }
            Else
            {
                Local4 &= 0x1F
            }

            Local3 = M011 (Local2, 0x19, Zero, 0x08)
            If (((Local3 == Zero) || (Local3 == 0xFF)))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 2\n", Arg0, Local3, Zero, Zero, Zero, Zero)
                Return (Local0)
            }

            Local2 = (Local1 + (Local3 << 0x14))
            Local2 += (Local4 << 0x0F)
            Local3 = M011 (Local2, 0x19, Zero, 0x08)
            If (((Local3 == Zero) || (Local3 == 0xFF)))
            {
                M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 3\n", Arg0, Local3, Zero, Zero, Zero, Zero)
                Return (Local0)
            }

            Local2 = (Local1 + (Local3 << 0x14))
        }

        Local3 = M011 (Local2, 0x04, Zero, 0x08)
        If (((Local3 == Zero) || (Local3 == 0xFF)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 4\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        If (((Local3 & 0x02) != 0x02))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 5\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        Local3 = M013 (Local2, 0x40, Zero, 0x20)
        Local3 &= 0xFFFFFFFB
        If (((Local3 == Zero) || (Local3 == 0xFFFFFFFB)))
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X  ERROR ERROR ERROR - 6\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local0)
        }
        Else
        {
            M460 ("  KER-ASL-CpmGetPtGpioMmioAddress (%d)  Local3 = 0x%X\n", Arg0, Local3, Zero, Zero, Zero, Zero)
            Return (Local3)
        }
    }

    Method (M440, 1, Serialized)
    {
        Local0 = M43A (Arg0)
        If ((Local0 == Zero))
        {
            M460 ("  KER-ASL-CpmPtReadGpio  (%d) = %d  MMIO = 0x%X  ERROR ERROR ERROR\n", Arg0, Local0, Local0, Zero, Zero, Zero)
            Return (Local0)
        }

        If ((Arg0 >= 0x18))
        {
            Local1 = (Arg0 - 0x18)
        }
        Else
        {
            Local1 = Arg0
        }

        Local2 = M013 (Local0, Zero, Local1, One)
        If ((Local2 == One))
        {
            M014 (Local0, Zero, Local1, One, Zero)
        }

        Local2 = M013 (Local0, 0x04, Local1, One)
        M460 ("  KER-ASL-CpmPtReadGpio  (%d) = %d  MMIO = 0x%X\n", Arg0, Local2, Local0, Zero, Zero, Zero)
        Return (Local2)
    }

    Method (M441, 2, Serialized)
    {
        Local0 = M43A (Arg0)
        If ((Local0 == Zero))
        {
            M460 ("  KER-ASL-CpmPtWriteGpio (%d, %d)   MMIO = 0x%X  ERROR ERROR ERROR\n", Arg0, Arg1, Local0, Zero, Zero, Zero)
            Return (Local0)
        }

        If ((Arg0 >= 0x18))
        {
            Local1 = (Arg0 - 0x18)
        }
        Else
        {
            Local1 = Arg0
        }

        Local2 = M013 (Local0, Zero, Local1, One)
        If ((Local2 != One))
        {
            M014 (Local0, Zero, Local1, One, One)
        }

        M014 (Local0, 0x08, Local1, One, Arg1)
        M460 ("  KER-ASL-CpmPtWriteGpio (%d, %d)   MMIO = 0x%X\n", Arg0, Arg1, Local0, Zero, Zero, Zero)
    }

    Method (M009, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        Local2 = Zero
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                If (((Arg0 & 0xF8000000) == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        Local2 = M011 ((M084 + 0x1502), (Local1 * 0x04), Zero, 
                            One)
                    }
                    Else
                    {
                        Local2 = M011 ((M084 + 0x1202), (Local1 * 0x04), Zero, 
                            One)
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x1F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x1D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x1B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 >>= 0x10
                    Local2 &= One
                }
            }
            Else
            {
                Local2 = M011 ((M084 + 0x0100), Local1, 0x07, One)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x1F)
            Local3 &= One
            Local4 = (Arg0 >> 0x1D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x1B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 >>= 0x10
            Local2 &= One
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                Local2 = M038 ((Local1 + 0x08))
            }
            Else
            {
                Local2 = 0xFF
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            Local2 = M440 (Local1)
        }
        ElseIf ((Local0 == 0x06))
        {
            Local2 = M412 (Arg0)
        }
        ElseIf ((Local0 == 0x07))
        {
            Local2 = M4E3 (Arg0)
        }

        M460 ("  KER-ASL-CpmReadGpio  (0x%X) = 0x%X\n", Arg0, Local2, Zero, Zero, Zero, Zero)
        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        M460 ("  KER-ASL-CpmWriteGpio (0x%X, 0x%X)\n", Arg0, Arg1, Zero, Zero, Zero, Zero)
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                If (((Arg0 & 0xF8000000) == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                    Else
                    {
                        M012 ((M084 + 0x1202), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x1F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x1D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x1B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 &= 0xCF3FFFFF
                    Local2 |= 0x00800000
                    Local2 |= (Arg1 << 0x16)
                    M250 (Local3, Local4, Local5, Local6, Local2)
                }
            }
            Else
            {
                M012 ((M084 + 0x0100), Local1, 0x06, One, Arg1)
                M012 ((M084 + 0x0100), Local1, 0x05, One, Zero)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x1F)
            Local3 &= One
            Local4 = (Arg0 >> 0x1D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x1B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 &= 0xCF3FFFFF
            Local2 |= 0x00800000
            Local2 |= (Arg1 << 0x16)
            M423 (Local3, Local4, Local5, Local6, Local2)
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                M039 ((Local1 + 0x08), Arg1)
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            M441 (Local1, Arg1)
        }
        ElseIf ((Local0 == 0x06))
        {
            M413 (Arg0, Arg1)
        }
        ElseIf ((Local0 == 0x07))
        {
            M4E4 (Arg0, Arg1)
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */  0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // ~.......
        /* 0008 */  0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // . ......
        /* 0010 */  0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09         // .......
    })
    Name (M227, Buffer (0x18)
    {
        /* 0000 */  0x41, 0x42, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // AB......
        /* 0008 */  0x02, 0x44, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .D......
        /* 0010 */  0x17, 0x45, 0x0B, 0x01, 0x0F, 0x0D, 0x09, 0x08   // .E......
    })
    Name (M329, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x12, 0x18,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32A, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M330, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32B, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x0B, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x1D, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // ........
        /* 0010 */  0x17, 0x20, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // . T.(...
    })
    Name (M32C, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Method (M029, 1, Serialized)
    {
        If ((M085 == 0x02))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M037 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 < 0x02))
        {
            Return (M011 ((M084 + 0x0160), Arg0, 0x07, One))
        }
        ElseIf (((M085 > 0x02) && (M085 < 0x08)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M227 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x08))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M329 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x09) || (M085 == 0x0A)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0B) || (M085 == 0x0C)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32A [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0D) || (M085 == 0x0E)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x0F))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x10))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x12))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x13))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x14))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32C [Arg0]) * 
                0x04), Zero, One))
        }
    }

    Method (M031, 1, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        Return (M011 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 
            0x07), One))
    }

    Method (M032, 2, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        M012 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 0x07
            ), One, Arg1)
    }

    Method (M477, 2, Serialized)
    {
        If ((Arg1 == Zero))
        {
            Return (Zero)
        }

        OperationRegion (VARM, SystemIO, Arg0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            SMB8,   8
        }

        Local0 = Arg1
        While ((Local0 > Zero))
        {
            SMB8 |= 0x40
            If ((Local0 < 0x00FFFFFF))
            {
                If ((Local0 > 0x05))
                {
                    Local0 = (Local0 - 0x05)
                }
                Else
                {
                    Local0 = Zero
                }
            }

            Stall (0x05)
            Local1 = SMB8 /* \M477.SMB8 */
            If (((Local1 & 0x50) == 0x40))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Method (M478, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, Arg0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            SMB8,   8
        }

        SMB8 |= 0x80
    }

    Method (M479, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, Arg0, 0x03)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8
        }

        Local0 = Arg1
        While ((Local0 > Zero))
        {
            Local1 = 0x64
            Local2 = One
            While (((Local1 > Zero) && ((Local2 & One) != Zero)))
            {
                SMB0 = 0x1F
                If ((Local0 < 0x00FFFFFF))
                {
                    If ((Local0 > 0x05))
                    {
                        Local0 = (Local0 - 0x05)
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local1--
                Stall (0x05)
                Local2 = SMB0 /* \M479.SMB0 */
            }

            If (((Local2 & One) != Zero))
            {
                SMB2 = 0x02
            }
            Else
            {
                Break
            }
        }

        If (((SMB0 & One) != Zero))
        {
            Return (One)
        }

        While ((Local0 > Zero))
        {
            Local1 = 0x64
            Local2 = One
            While (((Local1 > Zero) && ((Local2 & One) != Zero)))
            {
                SMB1 = 0x3F
                If ((Local0 < 0x00FFFFFF))
                {
                    If ((Local0 > 0x05))
                    {
                        Local0 = (Local0 - 0x05)
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local1--
                Stall (0x05)
                Local2 = SMB1 /* \M479.SMB1 */
            }

            If (((Local2 & One) != Zero))
            {
                SMB1 = 0x02
            }
            Else
            {
                Break
            }
        }

        If (((SMB1 & One) != Zero))
        {
            Return (One)
        }

        Return (Zero)
    }

    Mutex (M408, 0x00)
    Method (M47A, 6, Serialized)
    {
        Local0 = Buffer (0x22){}
        CreateByteField (Local0, Zero, STAT)
        CreateByteField (Local0, One, LEN)
        CreateByteField (Local0, 0x02, DATB)
        CreateWordField (Local0, 0x02, DATW)
        CreateField (Local0, 0x10, 0x0100, DTBF)
        STAT = 0xFF
        LEN = Zero
        DTBF = Zero
        M000 (0x0DE5)
        M460 ("  KER-ASL-CpmSmbusExecutor (Port%d, isRead %d, Potcl %d, DevAddr 0x%X, Cmd 0x%X)\n", Arg0, Arg1, Arg2, Arg3, Arg4, Zero)
        Local1 = M049 (M128, 0x94)
        If ((((Arg0 != Zero) && (Arg0 != One)) || (
            Local1 == One)))
        {
            STAT = 0x80
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x80\n", Zero)
            Return (Local0)
        }

        If (((Arg1 != Zero) && (Arg1 != One)))
        {
            STAT = 0x81
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x81\n", Zero)
            Return (Local0)
        }

        Name (VALP, Package (0x05)
        {
            Zero, 
            One, 
            0x02, 
            0x03, 
            0x05
        })
        If ((Match (VALP, MEQ, Arg2, MTR, Zero, Zero) == Ones))
        {
            STAT = 0x82
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x82\n", Zero)
            Return (Local0)
        }

        If (((Arg1 == Zero) && (Arg2 == 0x05)))
        {
            Local7 = Arg5
            Local2 = DerefOf (Local7 [Zero])
            If (((Local2 < One) || (Local2 > 0x20)))
            {
                STAT = 0x83
                M460 ("  KER-ASL-CpmSmbusExecutor return 0x83, Length %d\n", Local2, Zero, Zero, Zero, Zero, Zero)
                Return (Local0)
            }
        }

        Acquire (M408, 0xFFFF)
        Local4 = (M414 + (Arg0 << 0x05))
        If ((Local4 == Zero))
        {
            Release (M408)
            STAT = 0x84
            M460 ("  KER-ASL-CpmSmbusExecutor return 0x84, Local4 %d\n", Local4, Zero, Zero, Zero, Zero, Zero)
            Return (Local0)
        }

        OperationRegion (VARM, SystemIO, Local4, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        }

        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M47A.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        If (M477 (Local4, 0x4E20))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            STAT = 0x85
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x85\n", Zero)
            Return (Local0)
        }

        If (M479 (Local4, 0x4E20))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            M478 (Local4)
            Release (M408)
            STAT = 0x86
            M459 ("  KER-ASL-CpmSmbusExecutor return 0x86\n", Zero)
            Return (Local0)
        }

        Local7 = Arg5
        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg3 << One) | Arg1)
            SMB3 = Arg4
            SMB2 = (Arg2 << 0x02)
            Local1 = SMB2 /* \M47A.SMB2 */
            If ((Arg1 == Zero))
            {
                If (((Arg2 == One) || (Arg2 == 0x02)))
                {
                    SMB5 = DerefOf (Local7 [One])
                }

                If ((Arg2 == 0x03))
                {
                    SMB6 = DerefOf (Local7 [0x02])
                    SMB5 = DerefOf (Local7 [One])
                }

                If ((Arg2 == 0x05))
                {
                    Local2 = DerefOf (Local7 [Zero])
                    SMB5 = Local2
                    Local1 = One
                    While ((Local1 <= Local2))
                    {
                        SMB7 = DerefOf (Local7 [Local1])
                        Local1++
                    }
                }
            }
            ElseIf ((Arg2 == 0x05))
            {
                Local2 = DerefOf (Local7 [Zero])
                SMB5 = Local2
            }

            SMB2 = ((Arg2 << 0x02) | 0x40)
            If ((Arg2 == 0x05))
            {
                Local1 = 0x1B58
            }
            Else
            {
                Local1 = 0x03E8
            }

            Local2 = One
            While (((Local1 > Zero) && ((Local2 & 0x0E) == Zero)))
            {
                If (((Local2 & One) == Zero))
                {
                    Break
                }

                Local1--
                Stall (0x05)
                Local2 = SMB0 /* \M47A.SMB0 */
            }

            If (((Local1 == Zero) && ((Local2 & One) != Zero)))
            {
                SMB2 = 0x02
                If ((Arg0 == One))
                {
                    SMB2 = Local6
                }

                If (((Local5 & One) == Zero))
                {
                    M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                }

                M478 (Local4)
                Release (M408)
                STAT = 0x87
                M459 ("  KER-ASL-CpmSmbusExecutor return 0x87\n", Zero)
                Return (Local0)
            }

            If (((Local2 & 0x04) != Zero))
            {
                Local3 = Zero
            }
            ElseIf (((Local2 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3--
            }
            Else
            {
                Local3 = Zero
                STAT = Zero
                If ((Arg1 != Zero))
                {
                    If (((Arg2 == One) || (Arg2 == 0x02)))
                    {
                        DATB = SMB5 /* \M47A.SMB5 */
                        LEN = One
                    }

                    If ((Arg2 == 0x03))
                    {
                        Local0 [0x03] = SMB6 /* \M47A.SMB6 */
                        Local0 [0x02] = SMB5 /* \M47A.SMB5 */
                        LEN = 0x02
                    }

                    If ((Arg2 == 0x05))
                    {
                        Local2 = SMB2 /* \M47A.SMB2 */
                        Local2 = SMB5 /* \M47A.SMB5 */
                        If ((Local2 > 0x20))
                        {
                            Local2 = 0x20
                        }

                        LEN = Local2
                        Local1 = 0x02
                        Local2 += 0x02
                        While ((Local1 < Local2))
                        {
                            Local0 [Local1] = 0xCC
                            Local0 [Local1] = SMB7 /* \M47A.SMB7 */
                            Local1++
                        }
                    }
                }
            }
        }

        Local1 = (SMB0 & 0x1D)
        STAT = Local1
        SMB0 = 0x1F
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        }

        M478 (Local4)
        Release (M408)
        M460 ("  KER-ASL-CpmSmbusExecutor return St: 0x%X, Len %d, Data: 0x%X, 0x%X, 0x%X, 0x%X ...\n", STAT, LEN, DerefOf (Local0 [0x02]), DerefOf (Local0 [
            0x03]), DerefOf (Local0 [0x04]), DerefOf (Local0 [0x05]))
        M000 (0x0DE6)
        Return (Local0)
    }

    Method (M47B, 3, Serialized)
    {
        Local0 = M47A (Arg0, Arg1, Zero, Arg2, Zero, Zero)
        Return (DerefOf (Local0 [Zero]))
    }

    Method (M47C, 4, Serialized)
    {
        Local0 = Buffer (0x02){}
        CreateByteField (Local0, Zero, LEN)
        CreateByteField (Local0, One, DATB)
        LEN = One
        DATB = Arg3
        Local1 = M47A (Arg0, Arg1, One, Arg2, Zero, Local0)
        Return (Local1)
    }

    Method (M47D, 5, Serialized)
    {
        Local0 = Buffer (0x02){}
        CreateByteField (Local0, Zero, LEN)
        CreateByteField (Local0, One, DATB)
        LEN = One
        DATB = Arg4
        Local1 = M47A (Arg0, Arg1, 0x02, Arg2, Arg3, Local0)
        Return (Local1)
    }

    Method (M47E, 5, Serialized)
    {
        Local0 = Buffer (0x03){}
        CreateByteField (Local0, Zero, LEN)
        CreateByteField (Local0, One, DATL)
        CreateByteField (Local0, 0x02, DATH)
        LEN = 0x02
        DATL = (Arg4 & 0xFF)
        DATH = ((Arg4 >> 0x08) & 0xFF)
        Local1 = M47A (Arg0, Arg1, 0x03, Arg2, Arg3, Local0)
        Return (Local1)
    }

    Method (M47F, 5, Serialized)
    {
        Local1 = M47A (Arg0, Arg1, 0x05, Arg2, Arg3, Arg4)
        Return (Local1)
    }

    Method (M409, 3, Serialized)
    {
        Local0 = M049 (M128, 0x94)
        If ((Local0 == One))
        {
            M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 Smbus Access Disable\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
            Return (Zero)
        }

        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        }

        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M409.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M409.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 ERROR 1\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M409.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 ERROR 2\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg1 << One) | One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M409.SMB2 */
            SMB2 = 0x48
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M409.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    If (((Local5 & One) == Zero))
                    {
                        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    }

                    Release (M408)
                    M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0 ERROR 3\n", Arg0, Arg1, Arg2, Zero, Zero, Zero)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = SMB5 /* \M409.SMB5 */
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        }

        Release (M408)
        M460 ("  KER-ASL-CpmReadSmbusByte (%d, 0x%X, 0x%X) = 0x%X Success\n", Arg0, Arg1, Arg2, Local4, Zero, Zero)
        Return (Local4)
    }

    Method (M410, 4, Serialized)
    {
        Local0 = M049 (M128, 0x94)
        If ((Local0 == One))
        {
            M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) = 0 Smbus Access Disable\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
            Return (Zero)
        }

        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        }

        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M410.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M410.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) = 0 ERROR 1\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M410.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            If (((Local5 & One) == Zero))
            {
                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            }

            Release (M408)
            M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) = 0 ERROR 2\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = (Arg1 << One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M410.SMB2 */
            SMB5 = Arg3
            SMB2 = 0x48
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M410.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    If (((Local5 & One) == Zero))
                    {
                        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    }

                    Release (M408)
                    M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) = 0 ERROR 3\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = Zero
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        If (((Local5 & One) == Zero))
        {
            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        }

        Release (M408)
        M460 ("  KER-ASL-CpmWriteSmbusByte (%d, 0x%X, 0x%X, 0x%X) Success\n", Arg0, Arg1, Arg2, Arg3, Zero, Zero)
        Return (Local4)
    }

    Method (M4F1, 1, Serialized)
    {
        M460 ("  KER-ASL-CpmCheckExpanderInputEvent (0x%X) Start\n", Arg0, Zero, Zero, Zero, Zero, Zero)
        Local5 = Zero
        If (((Arg0 >= Zero) && (Arg0 <= 0x03)))
        {
            Local0 = M4F0 /* \M4F0 */
            If ((Local0 != Zero))
            {
                Local0 += 0x10
                Local0 += (Arg0 * 0x26)
                If ((M049 (Local0, Zero) == Arg0))
                {
                    Local1 = M049 (Local0, 0x15)
                    Local2 = M049 (Local0, 0x16)
                    Local3 = M049 (Local0, 0x1E)
                    Local4 = M409 (Local1, Local2, Zero)
                    M04C (Local0, 0x1E, Local4)
                    Local4 ^= Local3
                    Local4 &= M049 (Local0, 0x1C)
                    Local4 |= M049 (Local0, 0x1D)
                    If ((M049 (Local0, 0x17) >= One))
                    {
                        Local3 = M049 (Local0, 0x25)
                        Local5 = M409 (Local1, Local2, One)
                        M04C (Local0, 0x25, Local5)
                        Local5 ^= Local3
                        Local5 &= M049 (Local0, 0x23)
                        Local5 |= M049 (Local0, 0x24)
                        Local5 <<= 0x08
                    }

                    Local5 |= Local4
                }
            }
        }

        M460 ("  KER-ASL-CpmCheckExpanderInputEvent (0x%X) = 0x%X End\n", Arg0, Local5, Zero, Zero, Zero, Zero)
        Return (Local5)
    }

    Mutex (M4E5, 0x00)
    Name (M4E7, 0x5A)
    Name (M4E8, 0x5A)
    Name (M4E9, 0x5A)
    Name (M4EA, 0x5A5A5A5A)
    Name (M4EB, 0x5A5A5A5A)
    Name (M4EC, Package (0x07)
    {
        0x06, 
        Package (0x05)
        {
            0x0F, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                Zero, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                Zero, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x71, 
                0x72, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x13, 
                0x14, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }
        }, 

        Package (0x05)
        {
            0x13, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                Zero, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                Zero, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x71, 
                0x72, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x13, 
                0x14, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }
        }, 

        Package (0x05)
        {
            0x10, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                Zero, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                Zero, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x71, 
                0x72, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x13, 
                0x14, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }
        }, 

        Package (0x07)
        {
            0x11, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                One, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                One, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x95, 
                0x96, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x97, 
                0x98, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }, 

            Package (0x06)
            {
                "I2C4", 
                0x0D, 
                0x0E, 
                Zero, 
                0xFED81E52, 
                0xFEDC6000
            }, 

            Package (0x06)
            {
                "I2C5", 
                0x13, 
                0x14, 
                Zero, 
                0xFED81E54, 
                0xFEDCB000
            }
        }, 

        Package (0x05)
        {
            0x12, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                Zero, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                Zero, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x71, 
                0x72, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x13, 
                0x14, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }
        }, 

        Package (0x05)
        {
            0x14, 
            Package (0x06)
            {
                "I2C0", 
                0x91, 
                0x92, 
                Zero, 
                0xFED81E4A, 
                0xFEDC2000
            }, 

            Package (0x06)
            {
                "I2C1", 
                0x93, 
                0x94, 
                Zero, 
                0xFED81E4C, 
                0xFEDC3000
            }, 

            Package (0x06)
            {
                "I2C2", 
                0x71, 
                0x72, 
                One, 
                0xFED81E4E, 
                0xFEDC4000
            }, 

            Package (0x06)
            {
                "I2C3", 
                0x13, 
                0x14, 
                One, 
                0xFED81E50, 
                0xFEDC5000
            }
        }
    })
    Method (M4E6, 1, Serialized)
    {
        Local0 = M085 /* \M085 */
        Local1 = DerefOf (M4EC [Zero])
        Local2 = One
        While ((Local2 <= Local1))
        {
            Local3 = DerefOf (M4EC [Local2])
            Local4 = DerefOf (Local3 [Zero])
            If ((Local4 == Local0))
            {
                Break
            }

            Local2++
        }

        If ((Local2 > Local1))
        {
            Return (Zero)
        }

        Local2 = One
        Local1 = SizeOf (Local3)
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = "I2C0"
            }
            Case (One)
            {
                Local0 = "I2C1"
            }
            Case (0x02)
            {
                Local0 = "I2C2"
            }
            Case (0x03)
            {
                Local0 = "I2C3"
            }
            Case (0x04)
            {
                Local0 = "I2C4"
            }
            Case (0x05)
            {
                Local0 = "I2C5"
            }

        }

        While ((Local2 <= Local1))
        {
            Local4 = DerefOf (Local3 [Local2])
            Local5 = DerefOf (Local4 [Zero])
            If ((Local5 == Local0))
            {
                Break
            }

            Local2++
        }

        If ((Local2 > Local1))
        {
            Return (Zero)
        }

        M4E7 = DerefOf (Local4 [One])
        M4E8 = DerefOf (Local4 [0x02])
        M4E9 = DerefOf (Local4 [0x03])
        M4EA = DerefOf (Local4 [0x04])
        M4EB = DerefOf (Local4 [0x05])
        Return (One)
    }

    Method (M4E0, 5, Serialized)
    {
        Local0 = M4E6 (Arg0)
        If ((Local0 == Zero))
        {
            Return (0xFF00)
        }

        Name (RTFF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        Local0 = M4EA /* \M4EA */
        Local1 = M4EB /* \M4EB */
        OperationRegion (VAR0, SystemMemory, Local0, 0x02)
        Field (VAR0, ByteAcc, NoLock, Preserve)
        {
            ADTD,   2, 
            ADPS,   1, 
            ADPD,   1, 
            ADSO,   1, 
            ADSC,   1, 
            ADSR,   1, 
            ADIS,   1, 
            ADDS,   3
        }

        OperationRegion (VAR1, SystemMemory, Local1, 0x0100)
        Field (VAR1, DWordAcc, NoLock, Preserve)
        {
            IC00,   32, 
            IC04,   32, 
            Offset (0x10), 
            IC10,   32, 
            IC14,   32, 
            IC18,   32, 
            IC1C,   32, 
            IC20,   32, 
            Offset (0x30), 
            IC30,   32, 
            IC34,   32, 
            IC38,   32, 
            IC3C,   32, 
            IC40,   32, 
            IC44,   32, 
            IC48,   32, 
            Offset (0x54), 
            IC54,   32, 
            Offset (0x6C), 
            IC6C,   32, 
            IC70,   32, 
            IC74,   32, 
            IC78,   32, 
            IC7C,   32, 
            IC80,   32, 
            Offset (0x9C), 
            IC9C,   32, 
            Offset (0xF4), 
            ICF4,   32
        }

        Name (BUFF, Buffer (0x03)
        {
             0x00, 0x00, 0x00                                 // ...
        })
        CreateByteField (BUFF, Zero, AOAC)
        CreateByteField (BUFF, One, ISCL)
        CreateByteField (BUFF, 0x02, ISDA)
        Acquire (M4E5, 0xFFFF)
        Local1 = 0x000186A0
        Local0 = Zero
        AOAC = ADTD /* \M4E0.ADTD */
        ISCL = M011 (0xFED80D00, M4E7, Zero, 0x08)
        ISDA = M011 (0xFED80D00, M4E8, Zero, 0x08)
        M012 (0xFED80D00, M4E7, Zero, 0x08, M4E9)
        M012 (0xFED80D00, M4E8, Zero, 0x08, M4E9)
        Local2 = AOAC /* \M4E0.AOAC */
        If ((Local2 == 0x03))
        {
            ADTD = Zero
            ADPD = One
            Local3 = ADDS /* \M4E0.ADDS */
            While ((Local3 != 0x07))
            {
                Local1--
                Stall (0x0A)
                Local3 = ADDS /* \M4E0.ADDS */
                If ((Local1 == Zero))
                {
                    Local0 = 0xFF01
                    Break
                }
            }
        }

        If ((Local0 == Zero))
        {
            Local2 = IC70 /* \M4E0.IC70 */
            While ((0x20 == (Local2 & 0x20)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for IDE : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF02
                    Break
                }

                Local2 = IC70 /* \M4E0.IC70 */
                Local1--
                Stall (0x0A)
            }
        }

        If ((Local0 == Zero))
        {
            IC6C = Zero
            Local2 = IC9C /* \M4E0.IC9C */
            While ((Zero != (Local2 & One)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for fI2cDisable : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF03
                    Break
                }

                Local2 = IC9C /* \M4E0.IC9C */
                Local1--
                Stall (0x0A)
            }
        }

        If ((Local0 == Zero))
        {
            IC00 = 0x63
            IC04 = Arg1
            IC14 = 0x0285
            IC18 = 0x0357
            IC7C = 0x00400040
            IC38 = Zero
            IC34 = Zero
            IC30 = Zero
            Local2 = IC40 /* \M4E0.IC40 */
            Local2 = IC54 /* \M4E0.IC54 */
        }

        If ((Local0 == Zero))
        {
            IC6C = One
            Local2 = IC9C /* \M4E0.IC9C */
            While ((Zero == (Local2 & One)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for I2cEnable : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF04
                    Break
                }

                Local2 = IC9C /* \M4E0.IC9C */
                Local1--
                Stall (0x0A)
            }
        }

        If ((Local0 == Zero))
        {
            Local3 = Arg3
            Local4 = Arg2
            Local5 = Zero
            Local6 = Zero
            Local7 = 0x02
            While (((Local3 + Local4) > Zero))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for TxRx: (0x%X, 0x%X)\n", Local3, Local4, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF06
                    Break
                }

                Local2 = IC70 /* \M4E0.IC70 */
                If (((Local2 & 0x08) != Zero))
                {
                    Local2 = IC10 /* \M4E0.IC10 */
                    Local1--
                    Stall (0x0A)
                    Continue
                }

                Local2 = IC74 /* \M4E0.IC74 */
                If ((Local2 != Zero))
                {
                    Local1--
                    Stall (0x0A)
                    Continue
                }

                If ((Local3 > One))
                {
                    IC10 = (ToInteger (DerefOf (Arg4 [Local5])) & 0xFF)
                    Local3--
                    Local5++
                }
                ElseIf (((Local3 == One) && (Local4 != Zero)))
                {
                    IC10 = (ToInteger (DerefOf (Arg4 [Local5])) & 0xFF)
                    Local3--
                    Local5++
                }
                ElseIf (((Local3 == One) && (Local4 == Zero)))
                {
                    IC10 = ((ToInteger (DerefOf (Arg4 [Local5])) & 0xFF
                        ) | 0x0200)
                    Local3--
                    Local5++
                }
                ElseIf (((Local3 == Zero) && (Local4 > One)))
                {
                    IC10 = 0x0100
                    Local6 = One
                    Local4--
                }
                ElseIf (((Local3 == Zero) && (Local4 == One)))
                {
                    IC10 = 0x0300
                    Local6 = One
                    Local4--
                }

                Local1--
                Stall (0x0A)
                Local2 = IC34 /* \M4E0.IC34 */
                If ((Zero != (Local2 & 0x40)))
                {
                    Local7 = IC54 /* \M4E0.IC54 */
                    Local2 = IC80 /* \M4E0.IC80 */
                    M460 ("  I2cTX Abrt Source: (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF05
                    Break
                }

                If ((Local6 != Zero))
                {
                    Local2 = IC70 /* \M4E0.IC70 */
                    While (((Local2 & 0x08) != 0x08))
                    {
                        Local2 = IC70 /* \M4E0.IC70 */
                        If ((Local1 == Zero))
                        {
                            M460 ("  I2cTimeout for Rx : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                            Local0 = 0xFF07
                            Break
                        }

                        Local1--
                        Stall (0x0A)
                    }
                }

                If ((Local6 != Zero))
                {
                    Local2 = IC10 /* \M4E0.IC10 */
                    RTFF [Local7] = Local2
                    Local1--
                    Stall (0x14)
                    Local6 = Zero
                }
            }
        }

        Release (M4E5)
        If ((Local0 == Zero))
        {
            Local2 = IC70 /* \M4E0.IC70 */
            While ((0x20 == (Local2 & 0x20)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for IDE2 : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF08
                    Break
                }

                Local2 = IC70 /* \M4E0.IC70 */
                Local1--
                Stall (0x0A)
            }
        }

        If (((Local0 > 0xFF04) && (Local0 < 0xFF08)))
        {
            IC6C = Zero
            Local2 = IC9C /* \M4E0.IC9C */
            While ((Zero != (Local2 & One)))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for fI2cDisable : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF09
                    Break
                }

                Local2 = IC9C /* \M4E0.IC9C */
                Local1--
                Stall (0x0A)
            }
        }

        Local3 = AOAC /* \M4E0.AOAC */
        If ((Local3 == 0x03))
        {
            ADPD = Zero
            Local2 = ADDS /* \M4E0.ADDS */
            While ((Local2 != Zero))
            {
                If ((Local1 == Zero))
                {
                    M460 ("  I2cTimeout for AOAC Off : (0x%X)\n", Local2, Zero, Zero, Zero, Zero, Zero)
                    Local0 = 0xFF10
                    Break
                }

                Local1--
                Stall (0x0A)
                Local2 = ADDS /* \M4E0.ADDS */
            }

            ADTD = 0x03
        }

        M012 (0xFED80D00, M4E7, Zero, 0x08, ISCL)
        M012 (0xFED80D00, M4E8, Zero, 0x08, ISDA)
        CreateWordField (RTFF, Zero, STAT)
        STAT = Local0
        Return (RTFF) /* \M4E0.RTFF */
    }

    Method (M4E1, 3, Serialized)
    {
        Name (RTFF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        Name (WRFF, Buffer (One)
        {
             0x00                                             // .
        })
        CreateByteField (WRFF, Zero, WDAT)
        WDAT = Arg2
        RTFF = M4E0 (Arg0, Arg1, One, One, WRFF)
        CreateWordField (RTFF, Zero, STAT)
        CreateByteField (RTFF, 0x02, RDAT)
        Local0 = STAT /* \M4E1.STAT */
        Local1 = RDAT /* \M4E1.RDAT */
        M460 ("  Read I2C Byte (0x%X, 0x%X)\n", Local0, Local1, Zero, Zero, Zero, Zero)
        If ((Local0 == Zero))
        {
            Return ((RDAT & 0xFF))
        }

        Return (Zero)
    }

    Method (M4E2, 4, Serialized)
    {
        Name (WRFF, Buffer (0x02)
        {
             0x00, 0x00                                       // ..
        })
        CreateByteField (WRFF, Zero, WDA1)
        CreateByteField (WRFF, One, WDA2)
        WDA1 = Arg2
        WDA2 = (Arg3 & 0xFF)
        Local0 = M4E0 (Arg0, Arg1, Zero, 0x02, WRFF)
        CreateWordField (Local0, Zero, STAT)
        Local1 = STAT /* \M4E2.STAT */
        M460 ("  Write I2C Byte(0x%X)\n", Local1, Zero, Zero, Zero, Zero, Zero)
    }

    Scope (\_SB.GPIO)
    {
        Method (XINI, 0, NotSerialized)
        {
            M460 ("  KER-ASL-\\_SB.GPIO._INI Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If ((M4F0 != Zero))
            {
                Local0 = M4F1 (Zero)
                Local0 = M4F1 (One)
                Local0 = M4F1 (0x02)
                Local0 = M4F1 (0x03)
            }

            M460 ("  KER-ASL-\\_SB.GPIO._INI End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }
    }

    Scope (\_GPE)
    {
        Method (SIE0, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE0 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE0))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE0 ()
            }

            Local0 = M4F1 (Zero)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP00))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP00\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP00 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP01))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP01\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP01 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP02))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP02\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP02 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP03))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP03\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP03 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP04))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP04\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP04 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP05))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP05\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP05 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP06))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP06\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP06 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP07))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP07\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP07 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP10))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP10\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP10 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP11))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP11\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP11 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP12))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP12\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP12 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP13))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP13\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP13 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP14))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP14\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP14 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP15))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP15\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP15 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP16))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP16\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP16 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP17))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP17\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP17 ()
                }
            }

            If (CondRefOf (\_GPE.AIE0))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE0 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE0 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SIE1, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE1 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE1))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE1\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE1 ()
            }

            Local0 = M4F1 (One)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP20))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP20\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP20 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP21))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP21\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP21 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP22))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP22\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP22 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP23))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP23\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP23 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP24))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP24\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP24 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP25))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP25\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP25 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP26))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP26\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP26 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP27))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP27\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP27 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP30))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP30\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP30 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP31))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP31\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP31 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP32))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP32\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP32 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP33))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP33\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP33 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP34))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP34\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP34 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP35))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP35\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP35 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP36))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP36\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP36 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP37))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP37\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP37 ()
                }
            }

            If (CondRefOf (\_GPE.AIE1))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE1\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE1 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE1 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SIE2, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE2 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE2))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE2\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE2 ()
            }

            Local0 = M4F1 (0x02)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP40))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP40\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP40 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP41))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP41\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP41 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP42))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP42\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP42 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP43))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP43\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP43 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP44))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP44\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP44 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP45))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP45\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP45 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP46))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP46\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP46 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP47))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP47\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP47 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP50))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP50\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP50 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP51))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP51\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP51 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP52))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP52\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP52 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP53))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP53\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP53 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP54))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP54\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP54 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP55))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP55\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP55 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP56))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP56\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP56 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP57))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP57\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP57 ()
                }
            }

            If (CondRefOf (\_GPE.AIE2))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE2\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE2 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE2 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Method (SIE3, 0, Serialized)
        {
            M460 ("  KER-ASL-\\_GPE.SIE3 Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If (CondRefOf (\_GPE.BIE3))
            {
                M460 ("  KER-ASL-Callout \\_GPE.BIE3\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.BIE3 ()
            }

            Local0 = M4F1 (0x03)
            If (((Local0 & One) == One))
            {
                If (CondRefOf (\_GPE.SP60))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP60\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP60 ()
                }
            }

            If (((Local0 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP61))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP61\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP61 ()
                }
            }

            If (((Local0 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP62))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP62\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP62 ()
                }
            }

            If (((Local0 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP63))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP63\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP63 ()
                }
            }

            If (((Local0 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP64))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP64\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP64 ()
                }
            }

            If (((Local0 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP65))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP65\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP65 ()
                }
            }

            If (((Local0 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP66))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP66\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP66 ()
                }
            }

            If (((Local0 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP67))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP67\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP67 ()
                }
            }

            If (((Local0 & 0x0100) == 0x0100))
            {
                If (CondRefOf (\_GPE.SP70))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP70\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP70 ()
                }
            }

            If (((Local0 & 0x0200) == 0x0200))
            {
                If (CondRefOf (\_GPE.SP71))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP71\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP71 ()
                }
            }

            If (((Local0 & 0x0400) == 0x0400))
            {
                If (CondRefOf (\_GPE.SP72))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP72\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP72 ()
                }
            }

            If (((Local0 & 0x0800) == 0x0800))
            {
                If (CondRefOf (\_GPE.SP73))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP73\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP73 ()
                }
            }

            If (((Local0 & 0x1000) == 0x1000))
            {
                If (CondRefOf (\_GPE.SP74))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP74\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP74 ()
                }
            }

            If (((Local0 & 0x2000) == 0x2000))
            {
                If (CondRefOf (\_GPE.SP75))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP75\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP75 ()
                }
            }

            If (((Local0 & 0x4000) == 0x4000))
            {
                If (CondRefOf (\_GPE.SP76))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP76\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP76 ()
                }
            }

            If (((Local0 & 0x8000) == 0x8000))
            {
                If (CondRefOf (\_GPE.SP77))
                {
                    M460 ("  KER-ASL-Callout \\_GPE.SP77\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_GPE.SP77 ()
                }
            }

            If (CondRefOf (\_GPE.AIE3))
            {
                M460 ("  KER-ASL-Callout \\_GPE.AIE3\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_GPE.AIE3 ()
            }

            M460 ("  KER-ASL-\\_GPE.SIE3 End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }

        Name (M4D2, Buffer (0x08){})
        Method (XL0B, 0, Serialized)
        {
            Local3 = Buffer (0x08){}
            CreateWordField (Local3, Zero, M254)
            CreateByteField (Local3, 0x02, M255)
            CreateDWordField (Local3, 0x03, M256)
            M256 = Zero
            M254 = 0x07
            M255 = 0x30
            If (CondRefOf (\_SB.ALIB))
            {
                M460 ("  KER-ASL-Call \\_SB.ALIB (0x0C, 0x%X)\n", Local3, Zero, Zero, Zero, Zero, Zero)
                Local4 = \_SB.ALIB (0x0C, Local3)
                M4D2 = Local4
                CreateDWordField (M4D2, Zero, M4D0)
                CreateDWordField (M4D2, 0x04, M4D1)
                ToInteger (M4D0, Local0)
                ToInteger (M4D1, Local1)
                M460 ("  KER-ASL-ALIB Return Data (0x%X, 0x%X)\n", Local0, Local1, Zero, Zero, Zero, Zero)
                If ((Local0 == Zero))
                {
                    If (CondRefOf (\_SB.APAD))
                    {
                        \_SB.APAD.M446 [One] = Local1
                        M460 ("  KER-ASL-Notify \\_SB.APAD 0x80\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Notify (\_SB.APAD, 0x80) // Status Change
                    }
                }
                ElseIf ((Local0 == One))
                {
                    M460 ("  KER-ASL-Notify \\_SB.APAD 0x84\n", Zero, Zero, Zero, Zero, Zero, Zero)
                }
                ElseIf ((Local0 == 0x02))
                {
                    M460 ("  KER-ASL-Notify \\_SB.APAD 0x85\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    If (CondRefOf (NFPC))
                    {
                        NFPC ()
                    }
                }
            }
        }
    }

    Scope (\_SB)
    {
        Device (APAD)
        {
            Name (_HID, "ACPI000C" /* Processor Aggregator Device */)  // _HID: Hardware ID
            Name (M446, Package (0x02)
            {
                One, 
                Zero
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (\_OSI ("Processor Aggregator Device"))
                {
                    Local0 = M04A (M128, 0x91)
                    If (((Local0 & 0x80) == 0x80))
                    {
                        M460 ("  KER-ASL-\\_SB.APAD._STA = 0xF\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (0x0F)
                    }
                    Else
                    {
                        M460 ("  KER-ASL-\\_SB.APAD._STA = 0x0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (Zero)
                    }
                }
                Else
                {
                    M460 ("  KER-ASL-1-\\_SB.APAD._STA = 0x0\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (Zero)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                M460 ("  KER-ASL-\\_SB.APAD._INI\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Local0 = M04A (M128, 0x91)
                If ((((Local0 & 0xC0) == 0xC0) && ((Local0 & 
                    0xFF00) != 0xFF00)))
                {
                    Local3 = Buffer (0x08){}
                    CreateWordField (Local3, Zero, M254)
                    CreateByteField (Local3, 0x02, M255)
                    CreateDWordField (Local3, 0x03, M256)
                    M256 = (Local0 >> 0x08)
                    M254 = 0x07
                    M255 = 0x31
                    If (CondRefOf (\_SB.ALIB))
                    {
                        M460 ("  KER-ASL-Call \\_SB.ALIB (0x0C, 0x%X)\n", Local3, Zero, Zero, Zero, Zero, Zero)
                        \_SB.ALIB (0x0C, Local3)
                    }
                }
            }

            Method (_PUR, 0, NotSerialized)  // _PUR: Processor Utilization Request
            {
                ToInteger (DerefOf (M446 [Zero]), Local0)
                ToInteger (DerefOf (M446 [One]), Local1)
                M460 ("  KER-ASL-\\_SB.APAD._PUR Return Package (2) (0x%X, 0x%X) to OSPM\n", Local0, Local1, Zero, Zero, Zero, Zero)
                Return (M446) /* \_SB_.APAD.M446 */
            }
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.PCI0.GP11, DeviceObj)
    External (_SB_.PCI0.GP12, DeviceObj)
    External (_SB_.PCI0.GP17, DeviceObj)
    External (_SB_.PCI0.GP18, DeviceObj)
    External (_SB_.PCI0.GP19, DeviceObj)
    External (_SB_.PCI0.GPP0, DeviceObj)
    External (_SB_.PCI0.GPP1, DeviceObj)
    External (_SB_.PCI0.GPP2, DeviceObj)
    External (_SB_.PCI0.GPP3, DeviceObj)
    External (_SB_.PCI0.GPP4, DeviceObj)
    External (_SB_.PCI0.GPP5, DeviceObj)
    External (_SB_.PCI0.GPP6, DeviceObj)
    External (_SB_.PCI0.GPP7, DeviceObj)
    External (_SB_.PCI0.GPP8, DeviceObj)
    External (_SB_.PCI0.GPP9, DeviceObj)
    External (_SB_.PCI0.GPPA, DeviceObj)
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (M652, FieldUnitObj)

    Scope (\_GPE)
    {
        Name (ETP0, 0x55)
        Name (ETP1, 0x55)
        Name (ETP2, 0x55)
        Name (ETP3, 0x55)
        Name (ETP4, 0x55)
        Name (ETP5, 0x55)
        Name (ETP6, 0x55)
        Name (ETP7, 0x55)
        Name (ETP8, 0x55)
        Name (ETP9, 0x55)
        Name (ETPA, 0x55)
        Name (ET11, 0x55)
        Name (ET12, 0x55)
        Name (ET17, 0x55)
        Name (ET18, 0x55)
        Name (ET19, 0x55)
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.I2CA, DeviceObj)
    External (_SB_.PCI0.LPC0.EC0_.ECTP, UnknownObj)
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (M652, FieldUnitObj)
    External (TPTY, UnknownObj)

    Scope (\_SB.I2CA)
    {
        Device (TPDD)
        {
            Name (_HID, "XXXX0000")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_SUB, "XXXX0000")  // _SUB: Subsystem ID
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((TPTY == One))
                {
                    _HID = "ELAN06FA"
                    _SUB = "ELAN0001"
                    Return (Zero)
                }

                If ((TPTY == 0x02))
                {
                    _HID = "SYNA2BA6"
                    _SUB = "SYNA0001"
                    Return (Zero)
                }

                If ((TPTY == 0x04))
                {
                    _HID = "GXTP5100"
                    _SUB = "GOOD0001"
                    Return (Zero)
                }

                If ((TPTY == 0x05))
                {
                    _HID = "FTCS0038"
                    _SUB = "FOCA0001"
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == One))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        If ((TPTY == One))
                        {
                            Return (One)
                        }

                        If ((TPTY == 0x02))
                        {
                            Return (0x20)
                        }

                        If ((TPTY == 0x04))
                        {
                            Return (One)
                        }

                        If ((TPTY == 0x05))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TPTY == Zero))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If ((TPTY == One))
                {
                    Name (SBFB, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CA",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                }

                If ((TPTY == 0x02))
                {
                    Name (SBFS, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x002C, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CA",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                }

                If ((TPTY == 0x04))
                {
                    Name (SBFF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x005D, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CA",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                }

                If ((TPTY == 0x05))
                {
                    Name (SBFG, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CA",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                }

                Name (SBFI, ResourceTemplate ()
                {
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0008
                        }
                })
                If ((TPTY == One))
                {
                    Return (ConcatenateResTemplate (SBFB, SBFI))
                }

                If ((TPTY == 0x02))
                {
                    Return (ConcatenateResTemplate (SBFS, SBFI))
                }

                If ((TPTY == 0x04))
                {
                    Return (ConcatenateResTemplate (SBFF, SBFI))
                }

                If ((TPTY == 0x05))
                {
                    Return (ConcatenateResTemplate (SBFG, SBFI))
                }
            }

            Method (TPRD, 0, Serialized)
            {
                Return (\_SB.PCI0.LPC0.EC0.ECTP) /* External reference */
            }

            Method (TPWR, 1, Serialized)
            {
                \_SB.PCI0.LPC0.EC0.ECTP = Arg0
            }
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (_SB_.PCI0.GP17.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.PB2_.SWUS.SWDS.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PB2_.SWUS.SWDS.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PB2_.SWUS.SWDS.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.PB2_.SWUS.SWDS.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.PB2_.SWUS.SWDS.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PB2_.SWUS.SWDS.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PB2_.SWUS.SWDS.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PB2_.SWUS.SWDS.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PB2_.SWUS.SWDS.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PB2_.SWUS.SWDS.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.PB2_.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PB2_.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PB2_.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.PB2_.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.PB2_.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PB2_.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PB2_.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PB2_.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PB2_.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PB2_.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (M000, MethodObj)    // 1 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M113, MethodObj)    // 1 Arguments
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (M652, FieldUnitObj)

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Name (M207, Buffer (0xFF){})
        Name (M208, Buffer (0x03){})
        Name (M204, One)
        Method (ATCS, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                M000 (0x0D60)
                ATC0 ()
                M000 (0x0D70)
            }

            If ((Arg0 == One))
            {
                M000 (0x0D61)
                ATC1 ()
                M000 (0x0D71)
            }

            If ((Arg0 == 0x02))
            {
                M000 (0x0D62)
                ATC2 (Arg1)
                M000 (0x0D72)
            }

            If ((Arg0 == 0x03))
            {
                M000 (0x0D63)
                ATC3 ()
                M000 (0x0D73)
            }

            If ((Arg0 == 0x04))
            {
                M000 (0x0D64)
                ATC4 (Arg1)
                M000 (0x0D74)
            }

            If ((Arg0 == 0x06))
            {
                M000 (0x0D66)
                ATC6 (Arg1)
                M000 (0x0D76)
            }

            If ((Arg0 == 0x07))
            {
                M000 (0x0D67)
                ATC7 (Arg1)
                M000 (0x0D77)
            }

            If ((Arg0 == 0x08))
            {
                M000 (0x0D68)
                ATC8 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x03]), DerefOf (
                    Arg1 [0x04]), DerefOf (Arg1 [0x05]))
                M000 (0x0D78)
            }

            If ((Arg0 == 0x09))
            {
                M000 (0x0D69)
                ATC9 ()
                M000 (0x0D79)
            }

            If ((Arg0 == 0x0A))
            {
                M000 (0x0D6A)
                ATCA (Arg1)
                M000 (0x0D7A)
            }

            Return (M207) /* \_SB_.PCI0.GP17.VGA_.M207 */
        }

        Method (ATC0, 0, NotSerialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateWordField (M207, 0x02, M158)
            CreateDWordField (M207, 0x04, M160)
            M157 = 0x08
            M158 = One
            M160 = M100 /* External reference */
            M207 = \_SB.ALIB (Zero, M207)
        }

        Method (ATC1, 0, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateDWordField (M207, 0x02, M161)
            CreateDWordField (M207, 0x06, M162)
            CreateField (M207, 0x30, One, M203)
            M157 = 0x0A
            M161 = One
            M162 = M100 /* External reference */
            Local0 = M049 (M133, 0x15)
            If ((Local0 & 0x80))
            {
                M204 = (Local0 & One)
            }
            ElseIf ((Local0 & 0x7F))
            {
                M204 = M113 (Local0)
            }

            M203 = M204 /* \_SB_.PCI0.GP17.VGA_.M204 */
        }

        Method (ATC2, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M205)
            M157 = 0x03
            M205 = One
            M207 = \_SB.ALIB (0x02, Arg0)
        }

        Method (ATC3, 0, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M205)
            CreateWordField (M208, Zero, M197)
            CreateByteField (M208, 0x02, M206)
            M157 = 0x03
            M205 = One
            M197 = 0x03
            M206 = One
            M207 = \_SB.ALIB (0x03, M208)
        }

        Method (ATC4, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M209)
            M157 = 0x03
            M209 = One
            M207 = \_SB.ALIB (0x04, Arg0)
        }

        Method (ATC6, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateDWordField (M207, 0x02, M234)
            M157 = 0x06
            M234 = M233 /* External reference */
        }

        Method (ATC7, 1, Serialized)
        {
            M232 (M235, Zero, One)
        }

        Method (ATC8, 4, Serialized)
        {
            Local0 = Buffer (0x05){}
            CreateWordField (Local0, Zero, M157)
            CreateByteField (Local0, 0x02, M425)
            CreateWordField (Local0, 0x03, M426)
            M157 = 0x05
            Local1 = Arg0
            Local2 = Arg1
            M426 = ((Local2 << 0x08) + Local1)
            Local3 = Arg2
            Local4 = Arg3
            If (((Local3 == Zero) && (Local4 == Zero)))
            {
                M425 = One
                \_SB.ALIB (0xAA, Local0)
            }
            ElseIf (((Local3 == Zero) && (Local4 == One)))
            {
                M425 = Zero
                \_SB.ALIB (0xAA, Local0)
            }
            ElseIf (((Local3 == 0x03) && (Local4 == One)))
            {
                M425 = 0x03
                \_SB.ALIB (0xAA, Local0)
            }
        }

        Method (ATC9, 0, Serialized)
        {
            M207 = M444 /* External reference */
        }

        Method (ATCA, 1, Serialized)
        {
            CreateWordField (Arg0, Zero, M157)
            CreateWordField (Arg0, 0x02, M240)
            M232 (M23A, M240, One)
        }

        Method (XTRM, 2, Serialized)
        {
            If ((M105 == Zero))
            {
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Local4 = M105 /* External reference */
            If ((Local4 > 0x00010000))
            {
                Local4 = 0x00010000
            }

            Local5 = Arg0
            Local6 = Arg1
            If ((Local6 > 0x1000))
            {
                Local6 = 0x1000
            }

            If ((Local5 >= Local4))
            {
                Return (Buffer (Local6)
                {
                     0x00                                             // .
                })
            }

            If ((((Local5 & 0x0FFF) + Local6) > 0x1000))
            {
                Local6 = (0x1000 - (Local5 & 0x0FFF))
            }

            Name (M202, Buffer (0x1000)
            {
                 0x00                                             // .
            })
            If (((Local5 & 0xF000) == Zero))
            {
                M202 = M106 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x1000))
            {
                M202 = M378 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x2000))
            {
                M202 = M379 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x3000))
            {
                M202 = M380 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x4000))
            {
                M202 = M381 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x5000))
            {
                M202 = M382 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x6000))
            {
                M202 = M383 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x7000))
            {
                M202 = M384 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x8000))
            {
                M202 = M385 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x9000))
            {
                M202 = M386 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xA000))
            {
                M202 = M387 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xB000))
            {
                M202 = M388 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xC000))
            {
                M202 = M389 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xD000))
            {
                M202 = M390 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xE000))
            {
                M202 = M391 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xF000))
            {
                M202 = M392 /* External reference */
            }

            If (((Local5 + Local6) <= Local4))
            {
                If ((Local6 == 0x1000))
                {
                    Return (M202) /* \_SB_.PCI0.GP17.VGA_.XTRM.M202 */
                }
            }
            Else
            {
                Local6 = (Local4 - Local5)
            }

            Name (M393, Buffer (Local6)
            {
                 0x00                                             // .
            })
            CreateField (M202, ((Local5 & 0x0FFF) * 0x08), (Local6 * 0x08
                ), M394)
            M393 = M394 /* \_SB_.PCI0.GP17.VGA_.XTRM.M394 */
            Return (M393) /* \_SB_.PCI0.GP17.VGA_.XTRM.M393 */
        }
    }

    Method (AFN0, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN0))
            {
                \_SB.PCI0.GP17.VGA.AFN0 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.PB2.VGA.AFN0))
            {
                \_SB.PCI0.PB2.VGA.AFN0 ()
            }

            If (CondRefOf (\_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN0))
            {
                \_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN0 ()
            }
        }
    }

    Method (AFN1, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN1))
            {
                \_SB.PCI0.GP17.VGA.AFN1 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.PB2.VGA.AFN1))
            {
                \_SB.PCI0.PB2.VGA.AFN1 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN1))
            {
                \_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN1 (Arg0)
            }
        }
    }

    Method (AFN2, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN2))
            {
                \_SB.PCI0.GP17.VGA.AFN2 (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.PB2.VGA.AFN2))
            {
                \_SB.PCI0.PB2.VGA.AFN2 (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN2))
            {
                \_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN2 (Arg0, Arg1)
            }
        }
    }

    Method (AFN3, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN3))
            {
                \_SB.PCI0.GP17.VGA.AFN3 (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.PB2.VGA.AFN3))
            {
                \_SB.PCI0.PB2.VGA.AFN3 (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN3))
            {
                \_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN3 (Arg0, Arg1)
            }
        }
    }

    Method (AFN4, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN4))
            {
                \_SB.PCI0.GP17.VGA.AFN4 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.PB2.VGA.AFN4))
            {
                \_SB.PCI0.PB2.VGA.AFN4 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN4))
            {
                \_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN4 (Arg0)
            }
        }
    }

    Method (AFN5, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN5))
            {
                \_SB.PCI0.GP17.VGA.AFN5 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.PB2.VGA.AFN5))
            {
                \_SB.PCI0.PB2.VGA.AFN5 ()
            }

            If (CondRefOf (\_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN5))
            {
                \_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN5 ()
            }
        }
    }

    Method (AFN6, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN6))
            {
                \_SB.PCI0.GP17.VGA.AFN6 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.PB2.VGA.AFN6))
            {
                \_SB.PCI0.PB2.VGA.AFN6 ()
            }

            If (CondRefOf (\_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN6))
            {
                \_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN6 ()
            }
        }
    }

    Method (AFN7, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN7))
            {
                \_SB.PCI0.GP17.VGA.AFN7 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.PB2.VGA.AFN7))
            {
                \_SB.PCI0.PB2.VGA.AFN7 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN7))
            {
                \_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN7 (Arg0)
            }
        }
    }

    Method (AFN8, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN8))
            {
                \_SB.PCI0.GP17.VGA.AFN8 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.PB2.VGA.AFN8))
            {
                \_SB.PCI0.PB2.VGA.AFN8 ()
            }

            If (CondRefOf (\_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN8))
            {
                \_SB.PCI0.PB2.SWUS.SWDS.VGA.AFN8 ()
            }
        }
    }

    Method (AFNC, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFNC))
            {
                \_SB.PCI0.GP17.VGA.AFNC (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.PB2.VGA.AFNC))
            {
                \_SB.PCI0.PB2.VGA.AFNC (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.PB2.SWUS.SWDS.VGA.AFNC))
            {
                \_SB.PCI0.PB2.SWUS.SWDS.VGA.AFNC (Arg0, Arg1)
            }
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.PCI0.GP17.ACP_, DeviceObj)
    External (_SB_.PCI0.GP17.AZAL, DeviceObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M017, MethodObj)    // 6 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M249, MethodObj)    // 4 Arguments
    External (M250, MethodObj)    // 5 Arguments
    External (M251, FieldUnitObj)
    External (M276, MethodObj)    // 1 Arguments
    External (M277, MethodObj)    // 1 Arguments
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (M652, FieldUnitObj)

    Name (M278, One)
    Name (M279, One)
    Name (M27A, One)
    Name (M27B, One)
    Name (APGE, One)
    Name (ACGE, One)
    Mutex (M27E, 0x00)
    Method (M27D, 0, Serialized)
    {
        M460 ("FEA-ASL-CpmAcpRemovePowerGating-Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
        Local0 = M249 (Zero, Zero, Zero, 0x01240644)
        M460 ("  ACP_DSP_FUSION_RUNSTALL   = %d\n", Local0, Zero, Zero, Zero, Zero, Zero)
        If ((Local0 == Zero))
        {
            M250 (Zero, Zero, Zero, 0x01241A48, One)
            M250 (Zero, Zero, Zero, 0x01241A24, 0x02)
            Local5 = 0x64
            Local1 = M249 (Zero, Zero, Zero, 0x01241A48)
            While ((Local1 != 0x0101))
            {
                Local1 = M249 (Zero, Zero, Zero, 0x01241A48)
                Local5--
                If ((Local5 == Zero))
                {
                    M460 ("  Wait PGFSM status timeout", Zero, Zero, Zero, Zero, Zero, Zero)
                    Break
                }

                Stall (0x63)
            }
        }
        Else
        {
            M250 (Zero, Zero, Zero, 0x01241024, 0x07)
            Local5 = 0x64
            Local1 = M249 (Zero, Zero, Zero, 0x01241028)
            While ((Local1 != Zero))
            {
                Local1 = M249 (Zero, Zero, Zero, 0x01241028)
                Local5--
                If ((Local5 == Zero))
                {
                    M460 ("  Wait PGFSM status timeout", Zero, Zero, Zero, Zero, Zero, Zero)
                    Break
                }

                Stall (0x63)
            }
        }

        M460 ("FEA-ASL-CpmAcpRemovePowerGating-End\n", Zero, Zero, Zero, Zero, Zero, Zero)
    }

    Method (M27C, 0, Serialized)
    {
        M460 ("FEA-ASL-CpmAcpApplyPowerGating-Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
        Local0 = M249 (Zero, Zero, Zero, 0x01240644)
        M460 ("  ACP_DSP_FUSION_RUNSTALL   = %d\n", Local0, Zero, Zero, Zero, Zero, Zero)
        If ((Local0 == Zero))
        {
            M250 (Zero, Zero, Zero, 0x01241A48, 0x02)
            M250 (Zero, Zero, Zero, 0x01241A24, 0x02)
            Local5 = 0x64
            Local1 = M249 (Zero, Zero, Zero, 0x01241A48)
            While ((Local1 != 0x0202))
            {
                Local1 = M249 (Zero, Zero, Zero, 0x01241A48)
                Local5--
                If ((Local5 == Zero))
                {
                    M460 ("  Wait mmACP_P1_FUTURE_REG_ACLK_1 status timeout", Zero, Zero, Zero, Zero, Zero, Zero)
                    Break
                }

                Stall (0x63)
            }
        }
        Else
        {
            M250 (Zero, Zero, Zero, 0x01241024, 0x06)
            Local5 = 0x64
            Local1 = M249 (Zero, Zero, Zero, 0x01241028)
            While ((Local1 != 0x0A))
            {
                Local1 = M249 (Zero, Zero, Zero, 0x01241028)
                Local5--
                If ((Local5 == Zero))
                {
                    M460 ("  Wait PGFSM status timeout", Zero, Zero, Zero, Zero, Zero, Zero)
                    Break
                }

                Stall (0x63)
            }
        }

        M460 ("FEA-ASL-CpmAcpApplyPowerGating-End\n", Zero, Zero, Zero, Zero, Zero, Zero)
    }

    Method (M276, 1, Serialized)
    {
        Acquire (M27E, 0xFFFF)
        If ((Arg0 == Zero))
        {
            M460 ("FEA-ASL-CpmPowerGateOn CpmAcpPresentState = 1\n", Zero, Zero, Zero, Zero, Zero, Zero)
            M278 = One
        }
        ElseIf ((Arg0 == One))
        {
            M460 ("FEA-ASL-CpmPowerGateOn CpmAzaliaPresentState = 1\n", Zero, Zero, Zero, Zero, Zero, Zero)
            M279 = One
        }

        M460 ("FEA-ASL-CpmPowerGateOn-Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
        M460 ("  CpmAcpPresentState    = %d\n", M278, Zero, Zero, Zero, Zero, Zero)
        M460 ("  CpmAzaliaPresentState = %d\n", M279, Zero, Zero, Zero, Zero, Zero)
        M460 ("  ACGE                  = %d\n", ACGE, Zero, Zero, Zero, Zero, Zero)
        M460 ("  APGE                  = %d\n", APGE, Zero, Zero, Zero, Zero, Zero)
        If (!(M278 ^ M279))
        {
            M460 ("FEA-ASL-CpmPowerGateOn-1-End\n", Zero, Zero, Zero, Zero, Zero, Zero)
            Release (M27E)
            Return (Zero)
        }

        If ((APGE == One))
        {
            M000 (0x0DB4)
            If ((M27A == One))
            {
                Local0 = M017 (Zero, 0x08, One, 0x19, Zero, 0x08)
                Local1 = M019 (Local0, Zero, 0x05, Zero)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        M27D ()
                    }
                }
            }
            ElseIf ((M27B == One))
            {
                M250 (Zero, Zero, Zero, 0x0900E784, 0x0303)
                Local5 = 0x64
                Local4 = M249 (Zero, Zero, Zero, 0x0900E790)
                Local4 &= 0x0F
                While ((Local4 != Zero))
                {
                    Local4 = M249 (Zero, Zero, Zero, 0x0900E790)
                    Local4 &= 0x0F
                    Local5--
                    If ((Local5 == Zero))
                    {
                        M460 ("  Wait mmRSMU_PGFSM_STATUS_ACP status timeout", Zero, Zero, Zero, Zero, Zero, Zero)
                        Break
                    }

                    Stall (0x63)
                }
            }

            M000 (0x0DB5)
        }

        M460 ("FEA-ASL-CpmPowerGateOn-End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        Release (M27E)
    }

    Method (M277, 1, Serialized)
    {
        Acquire (M27E, 0xFFFF)
        If ((Arg0 == Zero))
        {
            M460 ("FEA-ASL-CpmPowerGateOn CpmAcpPresentState = 0\n", Zero, Zero, Zero, Zero, Zero, Zero)
            M278 = Zero
        }
        ElseIf ((Arg0 == One))
        {
            M460 ("FEA-ASL-CpmPowerGateOn CpmAzaliaPresentState = 0\n", Zero, Zero, Zero, Zero, Zero, Zero)
            M279 = Zero
        }

        M460 ("FEA-ASL-CpmPowerGateOff-Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
        M460 ("  CpmAcpPresentState    = %d\n", M278, Zero, Zero, Zero, Zero, Zero)
        M460 ("  CpmAzaliaPresentState = %d\n", M279, Zero, Zero, Zero, Zero, Zero)
        M460 ("  APGE                  = %d\n", APGE, Zero, Zero, Zero, Zero, Zero)
        M460 ("  ACGE                  = %d\n", ACGE, Zero, Zero, Zero, Zero, Zero)
        If (!((M278 == Zero) && (M279 == Zero)))
        {
            M460 ("FEA-ASL-CpmPowerGateOff-1-End\n", Zero, Zero, Zero, Zero, Zero, Zero)
            Release (M27E)
            Return (Zero)
        }

        If ((APGE == One))
        {
            M000 (0x0DB6)
            If ((M27A == One))
            {
                Local0 = M017 (Zero, 0x08, One, 0x19, Zero, 0x08)
                Local1 = M019 (Local0, Zero, 0x05, Zero)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        M27C ()
                    }
                }
            }
            ElseIf ((M27B == One))
            {
                M250 (Zero, Zero, Zero, 0x0900E784, 0x0301)
                Local5 = 0x64
                Local4 = M249 (Zero, Zero, Zero, 0x0900E790)
                Local4 &= 0x0F
                While ((Local4 != 0x0A))
                {
                    Local4 = M249 (Zero, Zero, Zero, 0x0900E790)
                    Local4 &= 0x0F
                    Local5--
                    If ((Local5 == Zero))
                    {
                        M460 ("  Wait mmRSMU_PGFSM_STATUS_ACP status timeout", Zero, Zero, Zero, Zero, Zero, Zero)
                        Break
                    }

                    Stall (0x63)
                }
            }

            M000 (0x0DB7)
        }

        M460 ("FEA-ASL-CpmPowerGateOff-End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        Release (M27E)
    }

    Scope (\_SB.PCI0.GP17.ACP)
    {
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            M460 ("FEA-ASL-\\_SB.PCI0.PBC.ACP._PS0\n", Zero, Zero, Zero, Zero, Zero, Zero)
            M276 (Zero)
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            M460 ("FEA-ASL-\\_SB.PCI0.PBC.ACP._PS3\n", Zero, Zero, Zero, Zero, Zero, Zero)
            M277 (Zero)
        }
    }

    Scope (\_SB.PCI0.GP17.AZAL)
    {
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            M460 ("FEA-ASL-\\_SB.PCI0.PBC.AZAL._PS0\n", Zero, Zero, Zero, Zero, Zero, Zero)
            M276 (One)
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            M460 ("FEA-ASL-\\_SB.PCI0.PBC.AZAL._PS3\n", Zero, Zero, Zero, Zero, Zero, Zero)
            M277 (One)
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.PCI0.GPP1, DeviceObj)
    External (_SB_.PCI0.GPP2, DeviceObj)
    External (_SB_.PCI0.GPP2.RTL8, DeviceObj)
    External (_SB_.PCI0.GPP5, DeviceObj)
    External (_SB_.PCI0.GPP5.DEV0, DeviceObj)
    External (_SB_.PCI0.GPP6, DeviceObj)
    External (_SB_.PCI0.GPP6.WLAN, DeviceObj)
    External (_SB_.PCI0.GPP7, DeviceObj)
    External (_SB_.PCI0.GPP7.WWAN, DeviceObj)
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (M652, FieldUnitObj)

    Scope (\_SB.PCI0.GPP1)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            M460 ("PLA-ASL-\\_SB.PCI0.GPP1._PRW Return GPRW (0x8, 0x4)\n", Zero, Zero, Zero, Zero, Zero, Zero)
            Return (Package (0x02)
            {
                0x08, 
                0x04
            })
        }
    }

    Scope (\_SB.PCI0.GPP2)
    {
        Name (EWPM, 0x00)
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If ((EWPM == One))
            {
                M460 ("PLA-ASL-\\_SB.PCI0.GPP2._PRW Return GPRW (0xF, 0x4)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (Package (0x02)
                {
                    0x0F, 
                    0x04
                })
            }
            Else
            {
                M460 ("PLA-ASL-\\_SB.PCI0.GPP2._PRW Return GPRW (0xF, 0x0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (Package (0x02)
                {
                    0x0F, 
                    Zero
                })
            }
        }
    }

    Scope (\_SB.PCI0.GPP2.RTL8)
    {
        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
    }

    Scope (\_SB.PCI0.GPP5)
    {
        Name (EWPM, 0x00)
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If ((EWPM == One))
            {
                M460 ("PLA-ASL-\\_SB.PCI0.GPP5._PRW Return GPRW (0x2, 0x4)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (Package (0x02)
                {
                    0x02, 
                    0x04
                })
            }
            Else
            {
                M460 ("PLA-ASL-\\_SB.PCI0.GPP5._PRW Return GPRW (0x2, 0x0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (Package (0x02)
                {
                    0x02, 
                    Zero
                })
            }
        }
    }

    Scope (\_SB.PCI0.GPP5.DEV0)
    {
        Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
    }

    Scope (\_SB.PCI0.GPP6)
    {
        Name (_S0W, Zero)  // _S0W: S0 Device Wake State
        Method (QDSW, 3, NotSerialized)
        {
            M460 ("PLA-ASL-\\_SB.PCI0.GPP6._DSW\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }
    }

    Scope (\_SB.PCI0.GPP6.WLAN)
    {
        OperationRegion (PCIC, PCI_Config, Zero, 0x04)
        Field (PCIC, WordAcc, NoLock, Preserve)
        {
            DVID,   16, 
            DDID,   16
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x0E, 
                0x03
            })
        }

        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            M460 ("PLA-ASL-\\_SB.PCI0.GPP6.WLAN._S0W - DID:%x VID:%x\n", DVID, DDID, Zero, Zero, Zero, Zero)
            If (((DVID == 0x17CB) && (DDID == 0x1103)))
            {
                M460 ("PLA-ASL-\\_SB.PCI0.GPP6.WLAN._S0W : 3\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (0x03)
            }
            Else
            {
                M460 ("PLA-ASL-\\_SB.PCI0.GPP6.WLAN._S0W : 4\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (0x04)
            }
        }

        Method (QDSW, 3, NotSerialized)
        {
            M460 ("PLA-ASL-\\_SB.PCI0.GPP6.WLAN._DSW\n", Zero, Zero, Zero, Zero, Zero, Zero)
        }
    }

    Scope (\_SB.PCI0.GPP7)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            M460 ("PLA-ASL-\\_SB.PCI0.GPP7._PRW Return GPRW (0xD, 0x4)\n", Zero, Zero, Zero, Zero, Zero, Zero)
            Return (Package (0x02)
            {
                0x0D, 
                0x04
            })
        }
    }

    Scope (\_SB.PCI0.GPP7.WWAN)
    {
        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.PCI0.GP17.ACP_, DeviceObj)

    Scope (\_SB.PCI0.GP17.ACP)
    {
        Name (WOVS, 0x00)
        Method (_WOV, 0, NotSerialized)
        {
            Return (WOVS) /* \_SB_.PCI0.GP17.ACP_.WOVS */
        }

        Device (HDA0)
        {
            Name (_ADR, One)  // _ADR: Address
            Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "acp-audio-device-interface-version", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-device-type", 
                        One
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "acp-audio-device-eps", 
                        Package (0x02)
                        {
                            "PE00", 
                            "PE01"
                        }
                    }
                }
            })
            Name (PE00, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x03)
                {
                    Package (0x02)
                    {
                        "acp-audio-ep-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-dsp-offload-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-category", 
                        One
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "acp-audio-ep-format", 
                        "EFMT"
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-apo-fx-type", 
                        "EAFX"
                    }
                }
            })
            Name (PE01, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x03)
                {
                    Package (0x02)
                    {
                        "acp-audio-ep-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-dsp-offload-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-category", 
                        0x02
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "acp-audio-ep-format", 
                        "EFMT"
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-apo-fx-type", 
                        "EAFX"
                    }
                }
            })
            Name (EFMT, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x03)
                {
                    Package (0x02)
                    {
                        "acp-audio-ep-format-max-channels", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-format-sampling-frequency", 
                        Package (0x02)
                        {
                            0xBB80, 
                            0x00017700
                        }
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-format-bits-per-sample", 
                        Package (0x02)
                        {
                            0x10, 
                            0x18
                        }
                    }
                }
            })
            Name (EAFX, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "acp-audio-ep-apo-efx-type", 
                        0x0C
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-apo-mfx-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-apo-sfx-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "acp-audio-ep-apo-efx-encoder-type", 
                        Zero
                    }
                }
            })
        }
    }
}



SSDT9
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.M625, MethodObj)    // 2 Arguments
    External (DDEP, IntObj)
    External (DIMS, IntObj)
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M29A, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, BuffObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (M610, FieldUnitObj)
    External (M620, FieldUnitObj)
    External (M631, FieldUnitObj)
    External (M652, FieldUnitObj)

    Scope (\_SB)
    {
        Name (M630, 0x5555)
        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            Name (MSDB, One)
            Name (U4PC, 0xFF)
            CreateDWordField (Arg0, Zero, UID0)
            CreateDWordField (Arg3, Zero, CDW1)
            If ((Arg2 >= 0x02))
            {
                CreateDWordField (Arg3, 0x04, CDW2)
            }

            If ((Arg2 >= 0x03))
            {
                CreateDWordField (Arg3, 0x08, CDW3)
            }

            If ((Arg2 == One))
            {
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Start  CDW1 = 0x%X\n", UID0, CDW1, Zero, Zero, Zero, Zero)
            }
            ElseIf ((Arg2 == 0x02))
            {
                Local2 = CDW2 /* \_SB_._OSC.CDW2 */
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Start  CDW1 = 0x%X CDW2 = 0x%X\n", UID0, CDW1, CDW2, Zero, Zero, Zero)
            }
            Else
            {
                Local3 = CDW3 /* \_SB_._OSC.CDW3 */
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Start  CDW1 = 0x%X CDW2 = 0x%X CDW3 = 0x%X\n", UID0, CDW1, CDW2, CDW3, Zero, Zero)
            }

            If ((Arg0 == ToUUID ("23a0d13a-26ab-486c-9c5f-0ffa525a575a") /* USB4 Capabilities */))
            {
                If ((Arg1 == One))
                {
                    Local5 = Zero
                    If ((U4PC != 0xFF))
                    {
                        Local5 = (U4PC & 0x0F)
                        Local3 &= 0xFFFFFFF0
                        Local3 |= Local5
                    }
                    ElseIf ((CondRefOf (\_SB.M625) && (M620 != Zero)))
                    {
                        If ((M049 (M620, 0x10) != Zero))
                        {
                            If ((\_SB.M630 == 0x5555))
                            {
                                Local1 = \_SB.M625 (0x0180, 0x03E8)
                                \_SB.M630 = Local1
                            }
                            Else
                            {
                                Local1 = \_SB.M630
                            }

                            If (((Local1 & 0xFF) == Zero))
                            {
                                Local5 = ((Local1 >> 0x10) & 0x0F)
                                Local3 &= 0xFFFFFFF0
                                Local3 |= Local5
                            }
                        }
                    }

                    If ((Local5 == Zero))
                    {
                        CDW1 |= 0x04
                    }
                    ElseIf ((Local3 != CDW3))
                    {
                        CDW3 = Local3
                        CDW1 |= 0x10
                    }
                }
                Else
                {
                    CDW1 |= 0x08
                }
            }
            ElseIf ((Arg0 == ToUUID ("0811b06e-4a27-44f9-8d60-3cbbc22e7b48") /* Platform-wide Capabilities */))
            {
                If ((Arg1 == One))
                {
                    If ((CondRefOf (\DIMS) && CondRefOf (\DDEP)))
                    {
                        If (((\DDEP == One) && ((CDW2 & 0x00040000) == 0x00040000)))
                        {
                            M460 ("    Disable USB4 ACPI _DEP\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Local1 = \DIMS /* External reference */
                            M232 (Local1, 0x55, Zero)
                            \DDEP = Zero
                        }
                    }

                    Local2 |= 0x04
                    If ((MSDB == One))
                    {
                        Local2 &= 0xFFFFFF7F
                    }

                    If ((U4PC != 0xFF))
                    {
                        Local2 |= 0x00040000
                    }
                    ElseIf ((M620 != Zero))
                    {
                        If ((M049 (M620, 0x10) != Zero))
                        {
                            If ((M049 (M620, 0x45) == Zero))
                            {
                                Local2 &= 0xFFFBFFFF
                            }
                        }
                    }

                    If ((Local2 != CDW2))
                    {
                        CDW2 = Local2
                        CDW1 |= 0x10
                    }

                    If ((((CDW1 & One) != One) && CondRefOf (\_SB.M625)))
                    {
                        If ((M620 != Zero))
                        {
                            If ((M049 (M620, 0x10) != Zero))
                            {
                                Local4 = M049 (M620, 0x43)
                                Local1 = \_SB.M625 ((0x0102 + (Local4 << 0x10)), 0x03E8)
                            }
                        }
                    }
                }
                Else
                {
                    CDW1 |= 0x08
                }
            }
            Else
            {
                CDW1 |= 0x04
            }

            If ((Arg2 == One))
            {
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Return CDW1 = 0x%X\n", UID0, CDW1, Zero, Zero, Zero, Zero)
            }
            ElseIf ((Arg2 == 0x02))
            {
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Return CDW1 = 0x%X CDW2 = 0x%X\n", UID0, CDW1, CDW2, Zero, Zero, Zero)
            }
            Else
            {
                M460 ("  FEA-ASL-\\_SB._OSC UUID 0x%X Return CDW1 = 0x%X CDW2 = 0x%X CDW3 = 0x%X\n", UID0, CDW1, CDW2, CDW3, Zero, Zero)
            }

            Return (Arg3)
        }
    }
}



TPM2
----
[000h 0000 004h]                   Signature : "TPM2"    [Trusted Platform Module hardware interface Table]
[004h 0004 004h]                Table Length : 00000034
[008h 0008 001h]                    Revision : 04
[009h 0009 001h]                    Checksum : 38
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 002h]              Platform Class : 0000
[026h 0038 002h]                    Reserved : 0000
[028h 0040 008h]             Control Address : 00000000FDF10510
[030h 0048 004h]                Start Method : 02 [ACPI Start Method]

/**** ACPI table terminates in the middle of a data structure! (dump table) 
CurrentOffset: 34, TableLength: 34 ***/
Raw Table Data: Length 52 (0x34)

    0000: 54 50 4D 32 34 00 00 00 04 38 4C 45 4E 4F 56 4F  // TPM24....8LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 00 00 00 00 10 05 F1 FD 00 00 00 00  // ................
    0030: 02 00 00 00                                      // ....


UEFI
----
[000h 0000 004h]                   Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004 004h]                Table Length : 00000236
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 38
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 010h]             UUID Identifier : 9D4BF935-A674-4710-BA02-BF0AA1758C7B
[034h 0052 002h]                 Data Offset : 0036

Raw Table Data: Length 566 (0x236)

    0000: 55 45 46 49 36 02 00 00 01 38 4C 45 4E 4F 56 4F  // UEFI6....8LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 35 F9 4B 9D 74 A6 10 47 BA 02 BF 0A  // ....5.K.t..G....
    0030: A1 75 8C 7B 36 00 24 42 56 44 54 24 00 00 00 24  // .u.{6.$BVDT$...$
    0040: 00 00 00 24 4D 41 43 4E 32 33 57 57 00 00 00 00  // ...$MACN23WW....
    0050: 00 00 00 00 00 00 00 00 00 00 00 00 24 4C 65 67  // ............$Leg
    0060: 69 6F 6E 20 78 38 30 20 73 6C 69 6D 20 41 4D 44  // ion x80 slim AMD
    0070: 00 00 00 00 00 00 24 30 35 2E 35 32 2E 34 36 00  // ......$05.52.46.
    0080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0090: 00 00 00 00 00 00 00 00 00 00 00 00 FF FF FF FF  // ................
    00A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0100: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0110: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0120: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0130: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0140: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0150: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0160: FF FF FF FF FF 24 42 4D 45 24 00 90 F8 01 00 10  // .....$BME$......
    0170: 00 00 24 00 00 00 02 00 00 00 00 24 00 FF FF FF  // ..$........$....
    0180: FF FF FF FF FF 24 5F 4D 53 43 5F 56 45 52 3D 40  // .....$_MSC_VER=@
    0190: 06 24 52 44 41 54 45 23 08 18 24 45 53 52 54 23  // .$RDATE#..$ESRT#
    01A0: 50 46 71 59 84 24 BE F2 CA 09 4B AF 02 69 B6 A4  // PFqY.$....K..i..
    01B0: 99 74 C1 8B 01 00 00 24 45 4E 44 4F 46 42 56 44  // .t.....$ENDOFBVD
    01C0: 54 FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // T...............
    01D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    01E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    01F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0200: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0210: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0220: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0230: FF FF FF FF FF FF                                // ......


VFCT
----
[000h 0000 004h]                   Signature : "VFCT"    
[004h 0004 004h]                Table Length : 00003084
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : BE
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000


**** Unknown ACPI table signature [VFCT]


Raw Table Data: Length 12420 (0x3084)

    0000: 56 46 43 54 84 30 00 00 01 BE 4C 45 4E 4F 56 4F  // VFCT.0....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  // ....2..]...I....
    0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  // ..y.L...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 05 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 02 10 BF 15 00 00 00 00  // ................
    0060: 01 00 00 00 00 30 00 00 55 AA 18 00 00 00 00 00  // .....0..U.......
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: C0 01 00 00 00 00 49 42 4D 41 00 00 00 00 00 00  // ......IBMA......
    0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  // ........ 7612955
    00A0: 32 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // 20..............
    00B0: 94 01 00 00 00 00 00 00 30 33 2F 32 38 2F 32 33  // ........03/28/23
    00C0: 2C 30 33 3A 31 32 3A 34 35 00 00 00 00 00 00 00  // ,03:12:45.......
    00D0: 00 00 00 00 00 00 80 00 00 00 00 00 00 00 00 00  // ................
    00E0: 00 00 00 00 00 00 00 00 31 31 33 2D 50 48 58 47  // ........113-PHXG
    00F0: 45 4E 45 52 49 43 2D 30 30 31 00 50 48 4F 45 4E  // ENERIC-001.PHOEN
    0100: 49 58 00 50 43 49 5F 45 58 50 52 45 53 53 00 44  // IX.PCI_EXPRESS.D
    0110: 44 52 35 00 0D 0A 41 4D 44 20 41 4D 44 5F 50 48  // DR5...AMD AMD_PH
    0120: 4F 45 4E 49 58 5F 47 45 4E 45 52 49 43 20 20 20  // OENIX_GENERIC   
    0130: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0140: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0150: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0160: 20 20 0D 0A 00 0D 0A 20 0D 0A 00 28 43 29 20 31  //   ..... ...(C) 1
    0170: 39 38 38 2D 32 30 32 32 2C 20 41 64 76 61 6E 63  // 988-2022, Advanc
    0180: 65 64 20 4D 69 63 72 6F 20 44 65 76 69 63 65 73  // ed Micro Devices
    0190: 2C 20 49 6E 63 2E 00 41 54 4F 4D 42 49 4F 53 42  // , Inc..ATOMBIOSB
    01A0: 4B 2D 41 4D 44 20 56 45 52 30 32 32 2E 30 31 32  // K-AMD VER022.012
    01B0: 2E 30 30 30 2E 30 31 36 2E 30 30 30 30 30 31 00  // .000.016.000001.
    01C0: 50 48 4F 45 4E 49 58 2E 62 69 6E 20 00 30 30 30  // PHOENIX.bin .000
    01D0: 30 30 30 30 30 00 30 30 30 35 38 32 37 35 00 20  // 00000.00058275. 
    01E0: 20 20 20 20 20 20 20 00 41 4D 44 5F 50 48 4F 45  //        .AMD_PHOE
    01F0: 4E 49 58 5F 47 45 4E 45 52 49 43 00 2C 00 02 03  // NIX_GENERIC.,...
    0200: 41 54 4F 4D 00 00 00 00 58 01 E5 01 AC 00 00 00  // ATOM....X.......
    0210: 00 00 00 00 02 10 02 10 C0 01 60 27 00 03 00 00  // ..........`'....
    0220: 00 00 00 00 00 02 03 00 50 43 49 52 02 10 BF 15  // ........PCIR....
    0230: 00 00 18 00 00 00 80 03 18 00 0C 16 00 80 00 00  // ................
    0240: 41 4D 44 20 41 54 4F 4D 42 49 4F 53 00 D7 8D 67  // AMD ATOMBIOS...g
    0250: 5B 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // [...............
    0260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0270: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0290: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0310: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0320: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0330: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0340: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0350: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0360: 00 00 00 00 00 00 00 00 4A 00 02 01 00 00 00 00  // ........J.......
    0370: 00 00 D8 23 4C 26 48 25 88 1D 4C 03 B8 26 00 00  // ...#L&H%..L..&..
    0380: 00 00 40 26 AC 1E 7C 25 D4 26 00 00 00 00 20 26  // ..@&..|%.&.... &
    0390: 00 00 00 00 00 00 00 00 00 23 D0 23 00 00 54 05  // .........#.#..T.
    03A0: 00 00 D8 1D 00 00 00 00 00 1F 00 00 00 00 00 00  // ................
    03B0: 00 00 00 00 08 02 05 04 10 00 38 00 4C 00 60 01  // ..........8.L.`.
    03C0: A8 01 00 00 30 75 00 00 0C 00 1F 05 39 50 00 00  // ....0u......9P..
    03D0: 40 9C 00 00 0C 00 1F 05 3E 00 00 00 FF FF FF 00  // @.......>.......
    03E0: 0C 00 1F 05 6F A1 00 00 00 00 00 00 FF FF FF 00  // ....o...........
    03F0: 0C 00 1F 02 3E 00 00 00 00 00 00 00 00 00 00 00  // ....>...........
    0400: 48 3F 00 00 1F 00 44 00 00 16 00 00 00 05 01 1F  // H?....D.........
    0410: 00 00 00 05 02 2C 00 00 00 05 03 3E 00 00 00 05  // .....,.....>....
    0420: 08 1B 50 00 00 05 09 25 60 00 00 05 0A 35 90 00  // ..P....%`....5..
    0430: 00 05 10 21 B0 00 00 05 11 2F F0 00 00 05 18 2A  // ...!...../.....*
    0440: 40 01 00 05 78 69 00 00 1F 00 44 00 00 16 00 00  // @...xi....D.....
    0450: 00 05 01 1F 00 00 00 05 02 2C 00 00 00 05 03 3E  // .........,.....>
    0460: 00 00 00 05 08 1B 50 00 00 05 09 25 60 00 00 05  // ......P....%`...
    0470: 0A 35 90 00 00 05 10 21 B0 00 00 05 11 2F F0 00  // .5.....!...../..
    0480: 00 05 18 2A 40 01 00 05 F0 D2 00 00 1F 00 44 00  // ...*@.........D.
    0490: 00 1E 00 00 00 05 01 26 00 00 00 05 02 30 00 00  // .......&.....0..
    04A0: 00 05 03 3E 00 00 00 05 08 22 40 00 00 05 09 2C  // ...>....."@....,
    04B0: 60 00 00 05 0A 37 70 00 00 05 10 27 90 00 00 05  // `....7p....'....
    04C0: 11 32 C0 00 00 05 18 2E 00 01 00 05 68 3C 01 00  // .2..........h<..
    04D0: 1F 00 44 00 00 1E 00 00 00 05 01 26 00 00 00 05  // ..D........&....
    04E0: 02 30 00 00 00 05 03 3E 00 00 00 05 08 22 40 00  // .0.....>....."@.
    04F0: 00 05 09 2C 60 00 00 05 0A 37 70 00 00 05 10 27  // ...,`....7p....'
    0500: 90 00 00 05 11 32 C0 00 00 05 18 2E 00 01 00 05  // .....2..........
    0510: 00 00 00 00 00 01 02 03 00 01 02 03 00 07 05 00  // ................
    0520: 00 01 02 03 00 01 02 03 00 07 05 00 00 01 02 03  // ................
    0530: 00 01 02 03 00 07 05 00 00 01 02 03 00 01 02 03  // ................
    0540: 00 07 05 00 00 01 02 03 00 01 02 03 00 07 05 00  // ................
    0550: 00 01 02 03 00 01 02 03 00 07 05 00 08 30 00 00  // .............0..
    0560: 87 00 00 00 07 30 00 00 B2 25 00 00 08 31 00 00  // .....0...%...1..
    0570: 87 00 00 00 07 31 00 00 B2 25 00 00 08 32 00 00  // .....1...%...2..
    0580: 87 00 00 00 07 32 00 00 B2 25 00 00 08 33 00 00  // .....2...%...3..
    0590: 87 00 00 00 07 33 00 00 B2 25 00 00 5A 00 00 00  // .....3...%..Z...
    05A0: 05 00 00 00 47 00 00 00 30 00 00 00 54 00 00 00  // ....G...0...T...
    05B0: 30 00 00 00 FF FF FF FF 00 00 00 00 FC 13 01 00  // 0...............
    05C0: 00 1F 00 00 00 00 00 00 48 3F 00 00 05 02 00 07  // ........H?......
    05D0: 03 00 00 16 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05E0: 00 00 00 00 00 1F 01 00 00 00 00 00 48 3F 00 00  // ............H?..
    05F0: 05 02 00 07 03 00 00 1F 00 00 00 00 00 00 00 00  // ................
    0600: 00 00 00 00 00 00 00 00 00 1F 02 00 00 00 00 00  // ................
    0610: 48 3F 00 00 05 02 00 07 03 00 00 2C 00 00 00 00  // H?.........,....
    0620: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 03 00  // ................
    0630: 00 00 00 00 48 3F 00 00 05 02 00 07 03 00 00 3E  // ....H?.........>
    0640: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0650: 00 1F 08 00 00 00 00 00 48 3F 00 00 05 02 00 07  // ........H?......
    0660: 03 00 00 1B 05 00 00 00 00 00 00 00 00 00 00 00  // ................
    0670: 00 00 00 00 00 1F 09 00 00 00 00 00 48 3F 00 00  // ............H?..
    0680: 05 02 00 07 03 00 00 25 06 00 00 00 00 00 00 00  // .......%........
    0690: 00 00 00 00 00 00 00 00 00 1F 0A 00 00 00 00 00  // ................
    06A0: 48 3F 00 00 05 02 00 07 03 00 00 35 09 00 00 00  // H?.........5....
    06B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 10 00  // ................
    06C0: 00 00 00 00 48 3F 00 00 05 02 00 07 03 00 00 21  // ....H?.........!
    06D0: 0B 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06E0: 00 1F 11 00 00 00 00 00 48 3F 00 00 05 02 00 07  // ........H?......
    06F0: 03 00 00 2F 0F 00 00 00 00 00 00 00 00 00 00 00  // .../............
    0700: 00 00 00 00 00 1F 18 00 00 00 00 00 48 3F 00 00  // ............H?..
    0710: 05 02 00 07 03 00 00 2A 14 00 00 00 00 00 00 00  // .......*........
    0720: 00 00 00 00 00 00 00 00 00 1F 00 00 00 00 00 00  // ................
    0730: 78 69 00 00 05 02 00 07 03 00 00 16 00 00 00 00  // xi..............
    0740: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 01 00  // ................
    0750: 00 00 00 00 78 69 00 00 05 02 00 07 03 00 00 1F  // ....xi..........
    0760: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0770: 00 1F 02 00 00 00 00 00 78 69 00 00 05 02 00 07  // ........xi......
    0780: 03 00 00 2C 00 00 00 00 00 00 00 00 00 00 00 00  // ...,............
    0790: 00 00 00 00 00 1F 03 00 00 00 00 00 78 69 00 00  // ............xi..
    07A0: 05 02 00 07 03 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
    07B0: 00 00 00 00 00 00 00 00 00 1F 08 00 00 00 00 00  // ................
    07C0: 78 69 00 00 05 02 00 07 03 00 00 1B 05 00 00 00  // xi..............
    07D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 09 00  // ................
    07E0: 00 00 00 00 78 69 00 00 05 02 00 07 03 00 00 25  // ....xi.........%
    07F0: 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0800: 00 1F 0A 00 00 00 00 00 78 69 00 00 05 02 00 07  // ........xi......
    0810: 03 00 00 35 09 00 00 00 00 00 00 00 00 00 00 00  // ...5............
    0820: 00 00 00 00 00 1F 10 00 00 00 00 00 78 69 00 00  // ............xi..
    0830: 05 02 00 07 03 00 00 21 0B 00 00 00 00 00 00 00  // .......!........
    0840: 00 00 00 00 00 00 00 00 00 1F 11 00 00 00 00 00  // ................
    0850: 78 69 00 00 05 02 00 07 03 00 00 2F 0F 00 00 00  // xi........./....
    0860: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 18 00  // ................
    0870: 00 00 00 00 78 69 00 00 05 02 00 07 03 00 00 2A  // ....xi.........*
    0880: 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0890: 00 1F 00 00 00 00 00 00 F0 D2 00 00 05 02 00 07  // ................
    08A0: 03 00 00 1D 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08B0: 00 00 00 00 00 1F 01 00 00 00 00 00 F0 D2 00 00  // ................
    08C0: 05 02 00 07 03 00 00 26 00 00 00 00 00 00 00 00  // .......&........
    08D0: 00 00 00 00 00 00 00 00 00 1F 02 00 00 00 00 00  // ................
    08E0: F0 D2 00 00 05 02 00 07 03 00 00 30 00 00 00 00  // ...........0....
    08F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 03 00  // ................
    0900: 00 00 00 00 F0 D2 00 00 05 02 00 07 03 00 00 3E  // ...............>
    0910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0920: 00 1F 08 00 00 00 00 00 F0 D2 00 00 05 02 00 07  // ................
    0930: 03 00 00 22 04 00 00 00 00 00 00 00 00 00 00 00  // ..."............
    0940: 00 00 00 00 00 1F 09 00 00 00 00 00 F0 D2 00 00  // ................
    0950: 05 02 00 07 03 00 00 2C 06 00 00 00 00 00 00 00  // .......,........
    0960: 00 00 00 00 00 00 00 00 00 1F 0A 00 00 00 00 00  // ................
    0970: F0 D2 00 00 05 02 00 07 03 00 00 37 07 00 00 00  // ...........7....
    0980: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 10 00  // ................
    0990: 00 00 00 00 F0 D2 00 00 05 02 00 07 03 00 00 27  // ...............'
    09A0: 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09B0: 00 1F 11 00 00 00 00 00 F0 D2 00 00 05 02 00 07  // ................
    09C0: 03 00 00 32 0C 00 00 00 00 00 00 00 00 00 00 00  // ...2............
    09D0: 00 00 00 00 00 1F 18 00 00 00 00 00 F0 D2 00 00  // ................
    09E0: 05 02 00 07 03 00 00 2E 10 00 00 00 00 00 00 00  // ................
    09F0: 00 00 00 00 00 00 00 00 00 1F 00 00 00 00 00 00  // ................
    0A00: 68 3C 01 00 05 02 00 07 03 00 00 1D 00 00 00 00  // h<..............
    0A10: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 01 00  // ................
    0A20: 00 00 00 00 68 3C 01 00 05 02 00 07 03 00 00 26  // ....h<.........&
    0A30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A40: 00 1F 02 00 00 00 00 00 68 3C 01 00 05 02 00 07  // ........h<......
    0A50: 03 00 00 30 00 00 00 00 00 00 00 00 00 00 00 00  // ...0............
    0A60: 00 00 00 00 00 1F 03 00 00 00 00 00 68 3C 01 00  // ............h<..
    0A70: 05 02 00 07 03 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
    0A80: 00 00 00 00 00 00 00 00 00 1F 08 00 00 00 00 00  // ................
    0A90: 68 3C 01 00 05 02 00 07 03 00 00 22 04 00 00 00  // h<........."....
    0AA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 09 00  // ................
    0AB0: 00 00 00 00 68 3C 01 00 05 02 00 07 03 00 00 2C  // ....h<.........,
    0AC0: 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AD0: 00 1F 0A 00 00 00 00 00 68 3C 01 00 05 02 00 07  // ........h<......
    0AE0: 03 00 00 37 07 00 00 00 00 00 00 00 00 00 00 00  // ...7............
    0AF0: 00 00 00 00 00 1F 10 00 00 00 00 00 68 3C 01 00  // ............h<..
    0B00: 05 02 00 07 03 00 00 27 09 00 00 00 00 00 00 00  // .......'........
    0B10: 00 00 00 00 00 00 00 00 00 1F 11 00 00 00 00 00  // ................
    0B20: 68 3C 01 00 05 02 00 07 03 00 00 32 0C 00 00 00  // h<.........2....
    0B30: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 18 00  // ................
    0B40: 00 00 00 00 68 3C 01 00 05 02 00 07 03 00 00 2E  // ....h<..........
    0B50: 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B60: 08 1F 00 00 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    0B70: 03 00 00 3E 00 00 00 00 00 00 00 00 00 00 00 00  // ...>............
    0B80: 00 00 00 00 08 1F 01 00 00 00 00 00 A0 86 01 00  // ................
    0B90: 05 02 00 07 03 00 00 38 06 00 00 00 00 00 00 00  // .......8........
    0BA0: 00 00 00 00 00 00 00 00 08 1F 02 00 00 00 00 00  // ................
    0BB0: A0 86 01 00 05 02 00 07 03 00 00 33 0B 00 00 00  // ...........3....
    0BC0: 00 00 00 00 00 00 00 00 00 00 00 00 08 1F 03 00  // ................
    0BD0: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 00 30  // ...............0
    0BE0: 0E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BF0: 08 1F 04 00 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    0C00: 03 00 00 2B 13 00 00 00 00 00 00 00 00 00 00 00  // ...+............
    0C10: 00 00 00 00 08 1F 05 00 00 00 00 00 A0 86 01 00  // ................
    0C20: 05 02 00 07 03 00 03 3B 00 00 00 00 00 00 00 00  // .......;........
    0C30: 00 00 00 00 00 00 00 00 08 1F 06 00 00 00 00 00  // ................
    0C40: A0 86 01 00 05 02 00 07 03 00 03 35 06 00 00 00  // ...........5....
    0C50: 00 00 00 00 00 00 00 00 00 00 00 00 08 1F 07 00  // ................
    0C60: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 03 31  // ...............1
    0C70: 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C80: 08 1F 08 00 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    0C90: 03 00 03 2D 0E 00 00 00 00 00 00 00 00 00 00 00  // ...-............
    0CA0: 00 00 00 00 08 1F 09 00 00 00 00 00 A0 86 01 00  // ................
    0CB0: 05 02 00 07 03 00 03 2A 11 00 00 00 00 00 00 00  // .......*........
    0CC0: 00 00 00 00 00 00 00 00 08 1F 0A 00 00 00 00 00  // ................
    0CD0: A0 86 01 00 05 02 00 07 03 00 06 38 00 00 00 00  // ...........8....
    0CE0: 00 00 00 00 00 00 00 00 00 00 00 00 08 1F 0B 00  // ................
    0CF0: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 06 32  // ...............2
    0D00: 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D10: 08 1F 0C 00 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    0D20: 03 00 06 2F 09 00 00 00 00 00 00 00 00 00 00 00  // .../............
    0D30: 00 00 00 00 08 1F 0D 00 00 00 00 00 A0 86 01 00  // ................
    0D40: 05 02 00 07 03 00 06 2B 0D 00 00 00 00 00 00 00  // .......+........
    0D50: 00 00 00 00 00 00 00 00 08 1F 0E 00 00 00 00 00  // ................
    0D60: A0 86 01 00 05 02 00 07 03 00 0A 33 00 00 00 00  // ...........3....
    0D70: 00 00 00 00 00 00 00 00 00 00 00 00 08 1F 0F 00  // ................
    0D80: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 03 22  // ..............."
    0D90: 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DA0: 00 1F 00 00 00 00 00 00 60 54 00 00 05 02 00 07  // ........`T......
    0DB0: 03 00 00 1E 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DC0: 00 00 00 00 00 1F 01 00 00 00 00 00 60 54 00 00  // ............`T..
    0DD0: 05 02 00 07 03 00 00 26 00 00 00 00 00 00 00 00  // .......&........
    0DE0: 00 00 00 00 00 00 00 00 00 1F 02 00 00 00 00 00  // ................
    0DF0: 60 54 00 00 05 02 00 07 03 00 00 30 00 00 00 00  // `T.........0....
    0E00: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 03 00  // ................
    0E10: 00 00 00 00 60 54 00 00 05 02 00 07 03 00 00 3E  // ....`T.........>
    0E20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E30: 00 1F 08 00 00 00 00 00 60 54 00 00 05 02 00 07  // ........`T......
    0E40: 03 00 00 22 04 00 00 00 00 00 00 00 00 00 00 00  // ..."............
    0E50: 00 00 00 00 00 1F 09 00 00 00 00 00 60 54 00 00  // ............`T..
    0E60: 05 02 00 07 03 00 00 2C 06 00 00 00 00 00 00 00  // .......,........
    0E70: 00 00 00 00 00 00 00 00 00 1F 0A 00 00 00 00 00  // ................
    0E80: 60 54 00 00 05 02 00 07 03 00 00 37 07 00 00 00  // `T.........7....
    0E90: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 10 00  // ................
    0EA0: 00 00 00 00 60 54 00 00 05 02 00 07 03 00 00 27  // ....`T.........'
    0EB0: 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EC0: 00 1F 11 00 00 00 00 00 60 54 00 00 05 02 00 07  // ........`T......
    0ED0: 03 00 00 32 0C 00 00 00 00 00 00 00 00 00 00 00  // ...2............
    0EE0: 00 00 00 00 00 1F 18 00 00 00 00 00 60 54 00 00  // ............`T..
    0EF0: 05 02 00 07 03 00 00 2E 10 00 00 00 00 00 00 00  // ................
    0F00: 00 00 00 00 00 00 00 00 00 1F 00 00 00 00 00 00  // ................
    0F10: EC 5E 00 00 05 02 00 07 03 00 00 1E 00 00 00 00  // .^..............
    0F20: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 01 00  // ................
    0F30: 00 00 00 00 EC 5E 00 00 05 02 00 07 03 00 00 26  // .....^.........&
    0F40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F50: 00 1F 02 00 00 00 00 00 EC 5E 00 00 05 02 00 07  // .........^......
    0F60: 03 00 00 30 00 00 00 00 00 00 00 00 00 00 00 00  // ...0............
    0F70: 00 00 00 00 00 1F 03 00 00 00 00 00 EC 5E 00 00  // .............^..
    0F80: 05 02 00 07 03 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
    0F90: 00 00 00 00 00 00 00 00 00 1F 08 00 00 00 00 00  // ................
    0FA0: EC 5E 00 00 05 02 00 07 03 00 00 22 04 00 00 00  // .^........."....
    0FB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 09 00  // ................
    0FC0: 00 00 00 00 EC 5E 00 00 05 02 00 07 03 00 00 2C  // .....^.........,
    0FD0: 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0FE0: 00 1F 0A 00 00 00 00 00 EC 5E 00 00 05 02 00 07  // .........^......
    0FF0: 03 00 00 37 07 00 00 00 00 00 00 00 00 00 00 00  // ...7............
    1000: 00 00 00 00 00 1F 10 00 00 00 00 00 EC 5E 00 00  // .............^..
    1010: 05 02 00 07 03 00 00 27 09 00 00 00 00 00 00 00  // .......'........
    1020: 00 00 00 00 00 00 00 00 00 1F 11 00 00 00 00 00  // ................
    1030: EC 5E 00 00 05 02 00 07 03 00 00 32 0C 00 00 00  // .^.........2....
    1040: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 18 00  // ................
    1050: 00 00 00 00 EC 5E 00 00 05 02 00 07 03 00 00 2E  // .....^..........
    1060: 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1070: 00 1F 00 00 00 00 00 00 90 7E 00 00 05 02 00 07  // .........~......
    1080: 03 00 00 1E 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1090: 00 00 00 00 00 1F 01 00 00 00 00 00 90 7E 00 00  // .............~..
    10A0: 05 02 00 07 03 00 00 26 00 00 00 00 00 00 00 00  // .......&........
    10B0: 00 00 00 00 00 00 00 00 00 1F 02 00 00 00 00 00  // ................
    10C0: 90 7E 00 00 05 02 00 07 03 00 00 30 00 00 00 00  // .~.........0....
    10D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 03 00  // ................
    10E0: 00 00 00 00 90 7E 00 00 05 02 00 07 03 00 00 3E  // .....~.........>
    10F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1100: 00 1F 08 00 00 00 00 00 90 7E 00 00 05 02 00 07  // .........~......
    1110: 03 00 00 22 04 00 00 00 00 00 00 00 00 00 00 00  // ..."............
    1120: 00 00 00 00 00 1F 09 00 00 00 00 00 90 7E 00 00  // .............~..
    1130: 05 02 00 07 03 00 00 2C 06 00 00 00 00 00 00 00  // .......,........
    1140: 00 00 00 00 00 00 00 00 00 1F 0A 00 00 00 00 00  // ................
    1150: 90 7E 00 00 05 02 00 07 03 00 00 37 07 00 00 00  // .~.........7....
    1160: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 10 00  // ................
    1170: 00 00 00 00 90 7E 00 00 05 02 00 07 03 00 00 27  // .....~.........'
    1180: 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1190: 00 1F 11 00 00 00 00 00 90 7E 00 00 05 02 00 07  // .........~......
    11A0: 03 00 00 32 0C 00 00 00 00 00 00 00 00 00 00 00  // ...2............
    11B0: 00 00 00 00 00 1F 18 00 00 00 00 00 90 7E 00 00  // .............~..
    11C0: 05 02 00 07 03 00 00 2E 10 00 00 00 00 00 00 00  // ................
    11D0: 00 00 00 00 00 00 00 00 00 1F 00 00 00 00 00 00  // ................
    11E0: C0 A8 00 00 05 02 00 07 03 00 00 1E 00 00 00 00  // ................
    11F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 01 00  // ................
    1200: 00 00 00 00 C0 A8 00 00 05 02 00 07 03 00 00 26  // ...............&
    1210: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1220: 00 1F 02 00 00 00 00 00 C0 A8 00 00 05 02 00 07  // ................
    1230: 03 00 00 30 00 00 00 00 00 00 00 00 00 00 00 00  // ...0............
    1240: 00 00 00 00 00 1F 03 00 00 00 00 00 C0 A8 00 00  // ................
    1250: 05 02 00 07 03 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
    1260: 00 00 00 00 00 00 00 00 00 1F 08 00 00 00 00 00  // ................
    1270: C0 A8 00 00 05 02 00 07 03 00 00 22 04 00 00 00  // ..........."....
    1280: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 09 00  // ................
    1290: 00 00 00 00 C0 A8 00 00 05 02 00 07 03 00 00 2C  // ...............,
    12A0: 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    12B0: 00 1F 0A 00 00 00 00 00 C0 A8 00 00 05 02 00 07  // ................
    12C0: 03 00 00 37 07 00 00 00 00 00 00 00 00 00 00 00  // ...7............
    12D0: 00 00 00 00 00 1F 10 00 00 00 00 00 C0 A8 00 00  // ................
    12E0: 05 02 00 07 03 00 00 27 09 00 00 00 00 00 00 00  // .......'........
    12F0: 00 00 00 00 00 00 00 00 00 1F 11 00 00 00 00 00  // ................
    1300: C0 A8 00 00 05 02 00 07 03 00 00 32 0C 00 00 00  // ...........2....
    1310: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 18 00  // ................
    1320: 00 00 00 00 C0 A8 00 00 05 02 00 07 03 00 00 2E  // ................
    1330: 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1340: 00 1F 00 00 00 00 00 00 20 FD 00 00 05 02 00 07  // ........ .......
    1350: 03 00 00 1E 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1360: 00 00 00 00 00 1F 01 00 00 00 00 00 20 FD 00 00  // ............ ...
    1370: 05 02 00 07 03 00 00 26 00 00 00 00 00 00 00 00  // .......&........
    1380: 00 00 00 00 00 00 00 00 00 1F 02 00 00 00 00 00  // ................
    1390: 20 FD 00 00 05 02 00 07 03 00 00 30 00 00 00 00  //  ..........0....
    13A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 03 00  // ................
    13B0: 00 00 00 00 20 FD 00 00 05 02 00 07 03 00 00 3E  // .... ..........>
    13C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    13D0: 00 1F 08 00 00 00 00 00 20 FD 00 00 05 02 00 07  // ........ .......
    13E0: 03 00 00 22 04 00 00 00 00 00 00 00 00 00 00 00  // ..."............
    13F0: 00 00 00 00 00 1F 09 00 00 00 00 00 20 FD 00 00  // ............ ...
    1400: 05 02 00 07 03 00 00 2C 06 00 00 00 00 00 00 00  // .......,........
    1410: 00 00 00 00 00 00 00 00 00 1F 0A 00 00 00 00 00  // ................
    1420: 20 FD 00 00 05 02 00 07 03 00 00 37 07 00 00 00  //  ..........7....
    1430: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 10 00  // ................
    1440: 00 00 00 00 20 FD 00 00 05 02 00 07 03 00 00 27  // .... ..........'
    1450: 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1460: 00 1F 11 00 00 00 00 00 20 FD 00 00 05 02 00 07  // ........ .......
    1470: 03 00 00 32 0C 00 00 00 00 00 00 00 00 00 00 00  // ...2............
    1480: 00 00 00 00 00 1F 18 00 00 00 00 00 20 FD 00 00  // ............ ...
    1490: 05 02 00 07 03 00 00 2E 10 00 00 00 00 00 00 00  // ................
    14A0: 00 00 00 00 00 00 00 00 00 1F 00 00 00 00 00 00  // ................
    14B0: AC 07 01 00 05 02 00 07 03 00 00 1E 00 00 00 00  // ................
    14C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 01 00  // ................
    14D0: 00 00 00 00 AC 07 01 00 05 02 00 07 03 00 00 26  // ...............&
    14E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    14F0: 00 1F 02 00 00 00 00 00 AC 07 01 00 05 02 00 07  // ................
    1500: 03 00 00 30 00 00 00 00 00 00 00 00 00 00 00 00  // ...0............
    1510: 00 00 00 00 00 1F 03 00 00 00 00 00 AC 07 01 00  // ................
    1520: 05 02 00 07 03 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
    1530: 00 00 00 00 00 00 00 00 00 1F 08 00 00 00 00 00  // ................
    1540: AC 07 01 00 05 02 00 07 03 00 00 22 04 00 00 00  // ..........."....
    1550: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 09 00  // ................
    1560: 00 00 00 00 AC 07 01 00 05 02 00 07 03 00 00 2C  // ...............,
    1570: 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1580: 00 1F 0A 00 00 00 00 00 AC 07 01 00 05 02 00 07  // ................
    1590: 03 00 00 37 07 00 00 00 00 00 00 00 00 00 00 00  // ...7............
    15A0: 00 00 00 00 00 1F 10 00 00 00 00 00 AC 07 01 00  // ................
    15B0: 05 02 00 07 03 00 00 27 09 00 00 00 00 00 00 00  // .......'........
    15C0: 00 00 00 00 00 00 00 00 00 1F 11 00 00 00 00 00  // ................
    15D0: AC 07 01 00 05 02 00 07 03 00 00 32 0C 00 00 00  // ...........2....
    15E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 18 00  // ................
    15F0: 00 00 00 00 AC 07 01 00 05 02 00 07 03 00 00 2E  // ................
    1600: 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1610: 02 1F 00 00 00 00 00 00 30 75 00 00 05 02 00 07  // ........0u......
    1620: 00 00 00 3E 00 00 00 04 00 00 00 00 00 00 00 00  // ...>............
    1630: 00 00 00 00 02 1F 00 00 00 00 00 00 40 9C 00 00  // ............@...
    1640: 05 02 00 07 00 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
    1650: 00 00 00 00 00 00 00 00 02 1F 00 00 00 00 00 00  // ................
    1660: 60 EA 00 00 05 02 00 07 00 00 00 3E 00 00 00 00  // `..........>....
    1670: 00 00 00 00 00 00 00 00 00 00 00 00 03 1F 00 00  // ................
    1680: 00 00 00 00 30 75 00 00 05 02 00 07 00 00 00 3E  // ....0u.........>
    1690: 00 00 00 0F 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    16A0: 03 1F 00 00 00 00 00 00 40 9C 00 00 05 02 00 07  // ........@.......
    16B0: 00 00 00 3E 00 00 00 00 00 00 00 00 00 00 00 00  // ...>............
    16C0: 00 00 00 00 03 1F 00 00 00 00 00 00 60 EA 00 00  // ............`...
    16D0: 05 02 00 07 00 00 00 3E 00 00 00 00 00 00 00 00  // .......>........
    16E0: 00 00 00 00 00 00 00 00 04 1F 00 00 00 00 00 00  // ................
    16F0: 30 75 00 00 05 02 00 07 03 00 05 31 08 00 00 00  // 0u.........1....
    1700: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 01 00  // ................
    1710: 00 00 00 00 30 75 00 00 05 02 00 07 03 00 05 2F  // ....0u........./
    1720: 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1730: 04 1F 02 00 00 00 00 00 30 75 00 00 05 02 00 07  // ........0u......
    1740: 03 00 05 2C 0D 00 00 00 00 00 00 00 00 00 00 00  // ...,............
    1750: 00 00 00 00 04 1F 03 00 00 00 00 00 30 75 00 00  // ............0u..
    1760: 05 02 00 07 03 00 05 29 10 00 00 00 00 00 00 00  // .......)........
    1770: 00 00 00 00 00 00 00 00 04 1F 00 00 00 00 00 00  // ................
    1780: 60 EA 00 00 05 02 00 07 03 00 05 31 08 00 00 00  // `..........1....
    1790: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 01 00  // ................
    17A0: 00 00 00 00 60 EA 00 00 05 02 00 07 03 00 05 2F  // ....`........../
    17B0: 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    17C0: 04 1F 02 00 00 00 00 00 60 EA 00 00 05 02 00 07  // ........`.......
    17D0: 03 00 05 2C 0D 00 00 00 00 00 00 00 00 00 00 00  // ...,............
    17E0: 00 00 00 00 04 1F 03 00 00 00 00 00 60 EA 00 00  // ............`...
    17F0: 05 02 00 07 03 00 05 29 10 00 00 00 00 00 00 00  // .......)........
    1800: 00 00 00 00 00 00 00 00 04 1F 00 00 00 00 00 00  // ................
    1810: 80 38 01 00 05 02 00 07 03 00 05 31 08 00 00 00  // .8.........1....
    1820: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 01 00  // ................
    1830: 00 00 00 00 80 38 01 00 05 02 00 07 03 00 05 2F  // .....8........./
    1840: 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1850: 04 1F 02 00 00 00 00 00 80 38 01 00 05 02 00 07  // .........8......
    1860: 03 00 05 2C 0D 00 00 00 00 00 00 00 00 00 00 00  // ...,............
    1870: 00 00 00 00 04 1F 03 00 00 00 00 00 80 38 01 00  // .............8..
    1880: 05 02 00 07 03 00 05 29 10 00 00 00 00 00 00 00  // .......)........
    1890: 00 00 00 00 00 00 00 00 04 1F 00 00 00 00 00 00  // ................
    18A0: A0 86 01 00 05 02 00 07 03 00 05 31 08 00 00 00  // ...........1....
    18B0: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 01 00  // ................
    18C0: 00 00 00 00 A0 86 01 00 05 02 00 07 03 00 05 2F  // .............../
    18D0: 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    18E0: 04 1F 02 00 00 00 00 00 A0 86 01 00 05 02 00 07  // ................
    18F0: 03 00 05 2C 0D 00 00 00 00 00 00 00 00 00 00 00  // ...,............
    1900: 00 00 00 00 04 1F 03 00 00 00 00 00 A0 86 01 00  // ................
    1910: 05 02 00 07 03 00 05 29 10 00 00 00 00 00 00 00  // .......)........
    1920: 00 00 00 00 00 00 00 00 04 1F 00 00 00 00 00 00  // ................
    1930: C0 D4 01 00 05 02 00 07 03 00 05 31 08 00 00 00  // ...........1....
    1940: 00 00 00 00 00 00 00 00 00 00 00 00 04 1F 01 00  // ................
    1950: 00 00 00 00 C0 D4 01 00 05 02 00 07 03 00 05 2F  // .............../
    1960: 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1970: 04 1F 02 00 00 00 00 00 C0 D4 01 00 05 02 00 07  // ................
    1980: 03 00 05 2C 0D 00 00 00 00 00 00 00 00 00 00 00  // ...,............
    1990: 00 00 00 00 04 1F 03 00 00 00 00 00 C0 D4 01 00  // ................
    19A0: 05 02 00 07 03 00 05 29 10 00 00 00 00 00 00 00  // .......)........
    19B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    19C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    19D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    19E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    19F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1A90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1AA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1AB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1AC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1AD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1AE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1AF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1B90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1BA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1BB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1BC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1BD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1BE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1BF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1C90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1CA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1CB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1CC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1CD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1CE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1CF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1DA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1DB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1DC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1DD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1DE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1DF0: 50 00 03 01 84 03 00 00 B8 0B 00 00 00 00 00 00  // P...............
    1E00: 7D 12 01 03 FF 00 00 00 00 00 00 00 00 00 00 00  // }...............
    1E10: 00 00 00 00 84 03 00 00 B8 0B 00 00 00 00 00 00  // ................
    1E20: 7D 12 01 03 FF 00 00 00 00 00 00 00 00 00 00 00  // }...............
    1E30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E40: D4 00 04 04 40 06 00 00 24 F4 00 00 60 09 60 09  // ....@...$...`.`.
    1E50: 00 00 00 00 00 00 00 00 5E 01 4E 0C 01 01 00 00  // ........^.N.....
    1E60: 55 00 00 00 60 09 BF 15 01 03 04 01 00 05 05 00  // U...`...........
    1E70: 00 00 00 00 00 46 C3 23 00 00 00 00 00 00 00 00  // .....F.#........
    1E80: 00 00 00 00 54 00 01 00 00 00 03 0C 00 00 00 00  // ....T...........
    1E90: A0 00 00 00 10 11 3D 10 4D 1C 02 00 00 45 00 00  // ......=.M....E..
    1EA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 AA 0A  // ................
    1EB0: 22 22 02 00 00 F0 01 00 00 00 00 00 00 00 00 00  // ""..............
    1EC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1ED0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1EE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1EF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1F10: 00 00 00 00 54 00 02 01 B5 5D 00 00 00 00 01 00  // ....T....]......
    1F20: B5 5D 00 00 08 08 02 00 B5 5D 00 00 10 10 03 00  // .].......]......
    1F30: B5 5D 00 00 18 14 04 00 B5 5D 00 00 1A 18 05 00  // .].......]......
    1F40: 91 5D 00 00 08 08 90 00 95 5D 00 00 08 08 91 00  // .].......]......
    1F50: 99 5D 00 00 08 08 92 00 9D 5D 00 00 08 08 93 00  // .].......]......
    1F60: A1 5D 00 00 08 08 94 00 00 04 02 02 00 00 00 00  // .]..............
    1F70: 00 00 00 00 00 00 00 00 00 00 00 00 77 01 00 00  // ............w...
    1F80: 00 00 23 04 00 00 00 00 84 03 00 00 00 00 00 00  // ..#.............
    1F90: 00 00 00 00 00 12 01 00 00 00 00 00 00 00 00 00  // ................
    1FA0: 00 00 00 00 00 00 00 00 84 03 00 00 00 00 00 00  // ................
    1FB0: 00 00 00 00 00 12 01 00 00 00 00 00 00 00 00 00  // ................
    1FC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1FD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1FE0: 00 00 00 00 00 00 00 00 8C 00 01 01 00 00 00 00  // ................
    1FF0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 10 01  // ................
    2000: 14 31 00 00 00 00 E4 00 00 00 00 00 00 00 00 00  // .1..............
    2010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2020: 00 00 00 00 00 00 00 00 00 00 00 00 08 00 10 02  // ................
    2030: 13 31 03 03 00 00 E4 00 00 01 30 00 00 00 00 00  // .1........0.....
    2040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    20A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    20B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    20C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    20D0: 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00  // ................
    20E0: 01 00 00 00 01 02 00 00 00 00 00 00 00 00 00 00  // ................
    20F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2170: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    21A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    21B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    21C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    21D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    21E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    21F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2210: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2220: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2230: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2240: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2270: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2290: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    22A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    22B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    22C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    22D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    22E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    22F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2310: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2320: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2330: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2340: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2350: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2360: 00 00 00 00 00 00 00 00 CD 00 01 04 0A 00 06 00  // ................
    2370: 14 31 68 00 1E 21 00 00 95 00 00 00 02 00 00 00  // .1h..!..........
    2380: 00 00 71 00 1E 22 00 00 9C 00 00 00 00 00 00 00  // ..q.."..........
    2390: 00 00 7A 00 20 21 00 00 A3 00 00 00 00 00 00 00  // ..z. !..........
    23A0: 13 31 83 00 20 22 00 00 AA 00 00 00 08 00 00 00  // .1.. "..........
    23B0: 00 00 8C 00 21 21 00 00 B1 00 00 00 00 00 00 00  // ....!!..........
    23C0: 03 71 B8 00 00 00 00 00 00 00 00 00 00 00 00 00  // .q..............
    23D0: 01 04 90 00 02 04 01 00 FF 01 04 90 00 02 04 00  // ................
    23E0: 00 FF 01 04 90 00 02 04 00 00 FF 01 04 93 00 02  // ................
    23F0: 04 04 00 FF 01 04 90 00 02 04 00 00 FF 14 06 0F  // ................
    2400: 00 00 00 FF 14 06 3F 1E 00 00 FF 14 06 3F 1F 00  // ......?......?..
    2410: 00 FF 14 06 3F 01 00 00 FF 14 06 3F 1F 00 00 FF  // ....?......?....
    2420: 10 0A 01 02 03 04 05 06 07 08 11 0A 90 91 92 93  // ................
    2430: 94 95 96 97 FF 00 00 00 08 00 01 01 00 00 00 00  // ................
    2440: 70 01 02 01 D6 09 80 02 A0 00 E0 01 2D 00 10 00  // p...........-...
    2450: 60 00 0A 00 02 00 00 00 00 00 08 08 06 00 12 3C  // `..............<
    2460: A0 0F 20 03 00 01 58 02 1C 00 28 00 80 00 01 00  // .. ...X...(.....
    2470: 04 00 00 00 00 00 00 00 00 00 6A 3C 64 19 00 04  // ..........j<d...
    2480: 40 01 00 03 26 00 18 00 88 00 03 00 06 00 00 00  // @...&...........
    2490: 00 00 00 00 06 00 55 3C 01 1D 00 05 72 01 D0 02  // ......U<....r...
    24A0: 1E 00 6E 00 28 00 05 00 05 00 00 00 00 00 00 00  // ..n.(...........
    24B0: 00 00 E8 3C 30 2A 00 05 08 02 C0 03 28 00 60 00  // ...<0*......(.`.
    24C0: 70 00 01 00 03 00 00 00 00 00 00 00 00 00 E9 3C  // p..............<
    24D0: 30 2A 00 05 98 01 00 04 2A 00 30 00 70 00 01 00  // 0*......*.0.p...
    24E0: 03 00 00 00 00 00 00 00 00 00 EA 3C 66 21 56 05  // ...........<f!V.
    24F0: AA 01 00 03 1E 00 46 00 8F 00 03 00 03 00 00 00  // ......F.........
    2500: 00 00 00 00 02 00 ED 3C 8F 2F 78 05 D0 01 1A 04  // .......<./x.....
    2510: 27 00 58 00 90 00 03 00 04 00 00 00 00 00 00 00  // '.X.............
    2520: 02 00 EB 3C 48 3F 40 06 30 02 B0 04 32 00 40 00  // ...<H?@.0...2.@.
    2530: C0 00 01 00 03 00 00 00 00 00 00 00 00 00 EC 3C  // ...............<
    2540: 02 3A 80 07 18 01 38 04 2D 00 58 00 2C 00 04 00  // .:....8.-.X.,...
    2550: 05 00 00 00 00 00 00 00 02 00 F3 3C 7D 4B 80 07  // ...........<}K..
    2560: A0 02 B0 04 2D 00 88 00 C8 00 03 00 06 00 00 00  // ....-...........
    2570: 00 00 00 00 02 00 F0 3C 68 5B 80 07 A8 02 A0 05  // .......<h[......
    2580: 3C 00 80 00 D0 00 01 00 03 00 00 00 00 00 00 00  // <...............
    2590: 02 00 F1 3C 32 96 00 0A B0 03 40 06 3A 00 C0 00  // ...<2.....@.:...
    25A0: 18 01 03 00 06 00 00 00 00 00 00 00 02 00 F2 3C  // ...............<
    25B0: 34 00 02 01 00 00 00 00 00 2A 00 2A 00 00 2A 2A  // 4........*.*..**
    25C0: 2A 00 00 2A 00 2A 2A 15 00 2A 2A 2A 15 15 15 15  // *..*.**..***....
    25D0: 15 3F 15 3F 15 15 3F 3F 3F 15 15 3F 15 3F 3F 3F  // .?.?..???..?.???
    25E0: 15 3F 3F 3F A4 00 01 01 10 01 06 12 11 01 16 12  // .???............
    25F0: 21 01 0A 12 13 01 06 6A 14 01 16 6A 22 01 0A 6A  // !......j...j"..j
    2600: 16 01 06 55 17 01 16 55 23 01 0A 55 63 01 16 E8  // ...U...U#..Uc...
    2610: 64 01 0A E8 65 01 16 E9 66 01 0A E9 19 01 06 EA  // d...e...f.......
    2620: 1A 01 16 EA 24 01 0A EA 47 01 16 ED 48 01 0A ED  // ....$...G...H...
    2630: 45 01 16 EB 46 01 0A EB 75 01 16 EC 76 01 0A EC  // E...F...u...v...
    2640: A5 01 16 F3 A6 01 0A F3 A0 01 16 F0 A1 01 0A F0  // ................
    2650: A2 01 16 F1 A3 01 0A F1 A4 01 16 F2 A5 01 0A F2  // ................
    2660: D2 01 16 70 D4 01 0A 70 D8 01 16 71 D9 01 0A 71  // ...p...p...q...q
    2670: E2 01 16 72 E4 01 0A 72 E8 01 16 73 E9 01 0A 73  // ...r...r...s...s
    2680: F5 01 16 74 F6 01 0A 74 20 00 02 02 02 00 20 00  // ...t...t ..... .
    2690: 08 00 80 00 00 02 00 04 00 08 40 00 01 00 04 00  // ..........@.....
    26A0: 10 00 00 01 FF FF FF FF 0C 00 02 01 00 00 00 00  // ................
    26B0: 00 00 00 00 6C 00 03 04 10 00 0C 16 20 4E 00 00  // ....l....... N..
    26C0: 20 4E 00 00 01 00 00 00 40 04 00 00 4C 00 00 00  //  N......@...L...
    26D0: 00 00 00 00 00 00 00 00 00 00 01 00 80 00 00 00  // ................
    26E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    26F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2700: 00 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00  // ................
    2710: 00 00 00 00 00 00 00 00 00 00 00 00 0A 00 FC 13  // ................
    2720: 1C 00 03 01 00 0D 00 00 00 00 00 00 77 01 35 0C  // ............w.5.
    2730: C0 12 00 00 FF 00 FF 00 FF 00 00 00 88 00 03 00  // ................
    2740: 00 0B 01 00 04 02 02 02 83 14 01 00 84 14 01 00  // ................
    2750: 85 14 01 00 86 14 01 00 6F 14 01 00 32 14 01 00  // ........o...2...
    2760: 2E 6A 01 00 10 27 00 00 04 02 01 00 00 00 00 00  // .j...'..........
    2770: 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    2780: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2790: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    27A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    27B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    27C0: 00 00 00 00 00 00 00 00 A2 00 02 01 04 28 00 00  // .............(..
    27D0: 00 00 00 00 00 00 00 00 B8 2E 00 00 00 00 00 00  // ................
    27E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    27F0: 00 00 00 00 00 00 00 00 FC 29 00 00 00 00 00 00  // .........)......
    2800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2810: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2820: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2830: 00 00 00 00 00 00 A4 28 00 00 00 00 00 00 00 00  // .......(........
    2840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2850: 24 2A 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // $*..............
    2860: 00 00 00 00 00 00 00 00 00 00 00 00 9E 00 02 01  // ................
    2870: 00 00 37 00 00 66 16 3E 0D 42 00 00 44 25 00 03  // ..7..f.>.B..D%..
    2880: 0C 41 04 00 4C 0D 41 02 00 44 25 00 0D 25 4C 00  // .A..L.A..D%..%L.
    2890: 02 52 16 01 01 35 39 01 01 01 36 39 02 01 05 0C  // .R...59...69....
    28A0: 00 5C A3 06 00 01 00 37 39 0D 00 03 01 41 01 15  // .\.....79....A..
    28B0: 05 41 18 01 02 C4 00 41 03 01 41 01 1B 05 41 08  // .A.....A..A...A.
    28C0: 01 02 C9 00 41 03 00 41 37 39 01 02 3B 39 41 03  // ....A..A79..;9A.
    28D0: 01 40 02 33 01 40 01 2D 02 40 41 01 02 3C 39 40  // .@.3.@.-.@A..<9@
    28E0: 03 00 41 E3 0D 3E 05 41 00 00 00 00 44 93 00 33  // ..A..>.A....D..3
    28F0: 05 41 01 00 00 00 1B 05 41 0B 01 02 06 00 41 0D  // .A......A.....A.
    2900: 25 20 0E 03 0D 65 53 00 02 5B 00 00 58 01 04 00  // % ...eS..[..X...
    2910: 0C 00 37 00 00 3D A5 04 01 44 E5 00 66 04 03 04  // ..7..=...D..f...
    2920: 46 28 00 3E 05 46 00 00 00 00 49 43 00 03 01 00  // F(.>.F....IC....
    2930: 00 03 01 01 01 03 01 02 02 52 16 03 01 46 00 1B  // .........R...F..
    2940: 05 46 08 02 02 00 00 02 02 01 01 02 02 02 02 3D  // .F.............=
    2950: 25 04 00 49 4E 00 2C 02 01 46 3D 65 04 00 49 59  // %..IN.,..F=e..IY
    2960: 00 2C 02 03 46 03 01 40 05 09 05 40 00 00 00 FC  // .,..F..@...@....
    2970: 3E 05 40 00 00 00 80 49 81 00 55 00 00 55 00 01  // >.@....I..U..U..
    2980: 01 05 0C 00 B8 51 04 00 01 01 0D 00 06 01 05 0C  // .....Q..........
    2990: 00 BC 51 04 00 01 05 0D 00 00 00 00 00 01 05 0C  // ..Q.............
    29A0: 00 A4 51 04 00 01 01 0D 00 00 01 05 0C 00 A8 51  // ..Q............Q
    29B0: 04 00 01 01 0D 00 01 01 05 0C 00 AC 51 04 00 01  // ............Q...
    29C0: 01 0D 00 02 01 05 0C 00 B0 51 04 00 01 01 0D 00  // .........Q......
    29D0: 03 01 05 0C 00 B4 51 04 00 01 01 0D 00 05 01 05  // ......Q.........
    29E0: 0C 00 C8 50 04 00 4A E5 0D 00 80 44 D2 00 43 57  // ...P..J....D..CW
    29F0: 01 01 05 0C 00 84 09 81 03 01 05 0D 00 00 00 07  // ................
    2A00: 00 01 05 0C 00 84 09 81 03 3C 05 0D 00 00 00 00  // .........<......
    2A10: 80 49 FD 00 01 05 0C 00 04 52 04 00 01 01 0D 00  // .I.......R......
    2A20: 00 01 05 0C 00 08 52 04 00 01 01 0D 00 01 01 05  // ......R.........
    2A30: 0C 00 00 52 04 00 03 00 41 0D 00 09 05 41 C1 FF  // ...R....A....A..
    2A40: FF FF 0F 05 41 15 00 00 00 01 05 0C 00 00 52 04  // ....A.........R.
    2A50: 00 01 02 0D 00 41 01 05 0C 00 A4 50 04 00 02 00  // .....A.....P....
    2A60: 06 0D 00 5B 28 00 02 01 00 00 37 00 00 01 05 0C  // ...[(.....7.....
    2A70: 00 B0 A3 06 00 02 00 00 0D 00 02 01 01 00 01 05  // ................
    2A80: 0C 00 B4 A3 06 00 02 00 02 0D 00 5B 94 04 01 02  // ...........[....
    2A90: 08 00 37 00 00 3D 25 00 00 44 05 01 4A 05 A3 36  // ..7..=%..D..J..6
    2AA0: 02 00 00 00 44 93 04 03 05 00 32 00 00 00 03 00  // ....D.....2.....
    2AB0: 40 97 36 03 00 41 96 36 03 05 46 00 31 00 00 04  // @.6..A.6..F.1...
    2AC0: 02 04 40 3E 02 41 40 49 42 00 04 02 05 40 03 03  // ..@>.A@IB....@..
    2AD0: 41 05 3E 02 41 40 48 5C 00 33 02 40 41 03 03 41  // A.>.A@H\.3.@A..A
    2AE0: 06 33 02 41 40 43 60 00 33 02 41 40 3E 05 41 00  // .3.A@C`.3.A@>.A.
    2AF0: 00 00 00 44 80 00 33 05 00 01 00 00 00 3E 05 00  // ...D..3......>..
    2B00: 00 00 00 00 44 93 04 51 14 43 22 00 03 03 40 05  // ....D..Q.C"...@.
    2B10: 03 02 41 40 2D 05 40 00 00 00 00 03 02 46 40 04  // ..A@-.@......F@.
    2B20: 01 00 00 04 01 01 01 04 01 02 02 04 01 03 03 04  // ................
    2B30: 01 04 04 04 01 05 05 04 01 06 06 2D 05 41 40 00  // ...........-.A@.
    2B40: 00 00 3E 05 41 00 20 00 00 45 C7 00 27 05 41 00  // ..>.A. ..E..'.A.
    2B50: 20 00 00 03 05 46 00 31 00 00 04 02 05 41 01 02  //  ....F.1.....A..
    2B60: 96 36 41 03 05 00 80 1A 06 00 03 00 41 97 36 03  // .6A.........A.6.
    2B70: 00 40 96 36 3E 02 41 40 44 93 04 33 05 00 01 00  // .@.6>.A@D..3....
    2B80: 00 00 3E 05 00 00 00 00 00 44 93 04 51 14 43 DE  // ..>......D..Q.C.
    2B90: 00 43 E7 01 3D 65 00 01 44 48 01 4A 05 B6 36 00  // .C..=e..DH.J..6.
    2BA0: 00 01 00 49 48 01 4A 05 C0 36 01 00 00 00 44 48  // ...IH.J..6....DH
    2BB0: 01 01 05 0C 00 84 09 81 03 01 05 0D 00 00 00 06  // ................
    2BC0: 00 01 05 0C 00 84 09 81 03 3C 05 0D 00 00 00 00  // .........<......
    2BD0: 80 49 3D 01 4A 05 C0 36 01 00 00 00 49 E7 01 01  // .I=.J..6....I...
    2BE0: 05 B8 36 00 00 02 10 03 05 41 0A 00 00 00 33 05  // ..6......A....3.
    2BF0: 41 01 00 00 00 3E 05 41 00 00 00 00 44 A5 01 51  // A....>.A....D..Q
    2C00: 0A 3C 05 B8 36 00 00 02 00 49 62 01 03 05 41 04  // .<..6....Ib...A.
    2C10: 00 00 00 51 0A 33 05 41 01 00 00 00 3E 05 41 00  // ...Q.3.A....>.A.
    2C20: 00 00 00 44 A5 01 3C 05 AA 36 AD DE AD DE 49 87  // ...D..<..6....I.
    2C30: 01 01 05 B8 36 00 00 00 00 0D 05 C0 36 01 00 00  // ....6.......6...
    2C40: 00 07 05 B6 36 FF FF FE FF 0D 05 02 38 00 01 00  // ....6.......8...
    2C50: 00 51 0A 01 05 97 36 00 00 00 00 01 05 96 36 00  // .Q....6.......6.
    2C60: 00 00 00 01 05 A3 36 00 00 00 00 07 05 02 38 FF  // ......6.......8.
    2C70: FE FF FF 66 0B 03 04 00 04 00 03 02 01 00 15 05  // ...f............
    2C80: 00 0A 1B 05 01 16 43 49 02 02 05 00 00 00 00 00  // ......CI........
    2C90: 02 02 02 00 2C 05 02 00 00 02 00 02 02 03 01 02  // ....,...........
    2CA0: 05 04 01 00 00 00 02 05 05 00 00 05 80 52 35 02  // .............R5.
    2CB0: 05 00 00 00 00 00 02 02 02 00 2C 05 02 00 00 00  // ..........,.....
    2CC0: 00 02 02 03 01 02 05 04 01 00 00 00 02 05 05 00  // ................
    2CD0: 20 00 80 52 35 66 16 3E 0D 42 00 00 44 C3 02 56  //  ..R5f.>.B..D..V
    2CE0: 00 41 03 0C 41 00 00 2D 05 41 0F 00 00 00 09 05  // .A..A..-.A......
    2CF0: 41 F0 FF 00 00 2D 0A 41 42 03 05 46 00 84 00 00  // A....-.AB..F....
    2D00: 56 08 42 04 04 00 00 00 2D 05 46 04 00 00 00 2D  // V.B.....-.F....-
    2D10: 05 42 04 00 00 00 3E 02 42 41 45 77 02 02 05 00  // .B....>.BAEw....
    2D20: 00 84 00 00 2C 02 00 00 02 02 02 00 2C 05 02 00  // ....,.......,...
    2D30: 00 02 00 02 02 03 01 02 02 01 01 02 05 04 00 00  // ................
    2D40: 00 00 02 05 05 00 00 00 40 02 0A 05 41 52 35 52  // ........@...AR5R
    2D50: 16 02 01 02 00 14 05 00 18 1A 05 02 08 43 98 03  // .............C..
    2D60: 03 02 41 00 2D 05 41 00 00 02 00 2D 01 41 00 01  // ..A.-.A....-.A..
    2D70: 02 7B 36 41 03 02 40 01 2D 01 40 02 01 02 7C 36  // .{6A..@.-.@...|6
    2D80: 40 01 05 68 36 00 00 00 03 01 05 70 36 FF FF 01  // @..h6......p6...
    2D90: 83 03 02 41 00 2D 05 41 00 00 04 00 2D 01 41 00  // ...A.-.A....-.A.
    2DA0: 01 02 7D 36 41 03 02 40 01 2D 01 40 02 01 02 7E  // ..}6A..@.-.@...~
    2DB0: 36 40 01 05 69 36 00 00 00 04 01 05 71 36 FF FF  // 6@..i6......q6..
    2DC0: 00 84 03 02 41 00 2D 05 41 00 00 05 00 2D 01 41  // ....A.-.A....-.A
    2DD0: 00 01 02 7F 36 41 03 02 40 01 2D 01 40 02 01 02  // ....6A..@.-.@...
    2DE0: 80 36 40 01 05 6A 36 00 00 00 05 01 05 72 36 FF  // .6@..j6......r6.
    2DF0: FF 00 85 03 02 41 00 2D 05 41 00 00 06 00 2D 01  // .....A.-.A....-.
    2E00: 41 00 01 02 81 36 41 03 02 40 01 2D 01 40 02 01  // A....6A..@.-.@..
    2E10: 02 82 36 40 01 05 6B 36 00 00 00 06 01 05 73 36  // ..6@..k6......s6
    2E20: FF FF 00 86 03 05 46 00 31 00 00 03 02 41 00 2D  // ......F.1....A.-
    2E30: 05 41 00 00 00 00 2D 01 41 00 03 02 40 01 2D 01  // .A....-.A...@.-.
    2E40: 40 02 04 02 00 41 04 02 01 40 04 05 04 00 00 00  // @....A...@......
    2E50: 00 04 05 05 00 00 00 00 04 05 06 00 20 00 00 43  // ............ ..C
    2E60: 08 04 01 05 94 36 00 00 00 80 01 05 95 36 00 20  // .....6.......6. 
    2E70: 00 00 01 02 56 36 41 01 02 57 36 40 01 05 61 36  // ....V6A..W6@..a6
    2E80: FF FF 00 80 01 05 97 36 00 00 00 00 01 05 96 36  // .......6.......6
    2E90: 00 00 00 00 4A 25 48 00 01 44 18 04 0D 05 B1 36  // ....J%H..D.....6
    2EA0: 08 00 00 00 43 57 04 5C 05 B6 36 00 FF FF FF C6  // ....CW.\..6.....
    2EB0: 00 09 00 07 05 C0 36 FE FF FF FF 03 05 41 50 C3  // ......6......AP.
    2EC0: 00 00 4A 05 A3 36 02 00 00 00 49 54 04 51 14 33  // ..J..6....IT.Q.3
    2ED0: 05 41 01 00 00 00 3E 05 41 00 00 00 00 49 36 04  // .A....>.A....I6.
    2EE0: 43 93 04 07 05 B1 36 FF FE FF FF 02 05 00 80 19  // C.....6.........
    2EF0: 00 00 02 05 01 00 00 00 00 02 05 02 00 00 00 00  // ................
    2F00: 02 05 03 00 00 00 00 02 05 04 00 00 00 00 02 05  // ................
    2F10: 05 00 00 00 00 02 05 06 00 00 00 00 43 10 00 5B  // ............C..[
    2F20: 4B 00 01 01 00 00 37 00 00 42 21 00 63 00 1F 00  // K.....7..B!.c...
    2F30: 63 01 39 00 63 03 3F 00 63 02 45 00 5A 5A 5B 03  // c.9.c.?.c.E.ZZ[.
    2F40: 05 40 00 00 05 04 2D 19 40 00 15 05 40 02 01 02  // .@....-.@...@...
    2F50: 0C 00 40 02 00 00 0D 00 5B 02 00 00 E3 0D 5B 02  // ..@.....[.....[.
    2F60: 00 00 E7 0D 5B 02 00 00 E8 0D 5B 00 41 54 4F 4D  // ....[.....[.ATOM
    2F70: 5F 44 41 54 41 5F 54 41 42 4C 45 5F 45 4E 44 00  // _DATA_TABLE_END.
    2F80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2F90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2FA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2FB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2FC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2FD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2FE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2FF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    3080: 00 00 00 00                                      // ....


WSMT
----
[000h 0000 004h]                   Signature : "WSMT"    [Windows SMM Security Mitigations Table]
[004h 0004 004h]                Table Length : 00000028
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 1D
[00Ah 0010 006h]                      Oem ID : "LENOVO"
[010h 0016 008h]                Oem Table ID : "CB-01   "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]            Protection Flags : 00000007
                          FIXED_COMM_BUFFERS : 1
           COMM_BUFFER_NESTED_PTR_PROTECTION : 1
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 1D 4C 45 4E 4F 56 4F  // WSMT(.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 07 00 00 00                          // ........


